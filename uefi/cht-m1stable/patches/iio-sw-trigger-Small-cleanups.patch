From 6bd7ede734f2709fb99b13ee0b9acc6fb70eed96 Mon Sep 17 00:00:00 2001
From: Daniel Baluta <daniel.baluta@intel.com>
Date: Fri, 8 May 2015 17:46:34 +0300
Subject: [PATCH 03/11] iio: sw-trigger: Small cleanups

- updated the function name from iio_find_sw_trigger_type to
   _iio_find_sw_trigger_type
- changed the *name from char to const char
- added in spaces for better code readability

Change-Id: Icbeeed7ab83663f721534ef4555f945926229a62
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-26476
Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
Reviewed-on: https://android.intel.com:443/486296
---
 drivers/iio/industrialio-sw-trigger.c | 14 ++++++++------
 include/linux/iio/sw_trigger.h        | 23 +++++++++++++++++------
 2 files changed, 25 insertions(+), 12 deletions(-)

diff --git a/drivers/iio/industrialio-sw-trigger.c b/drivers/iio/industrialio-sw-trigger.c
index 567c675..b2d4aff 100644
--- a/drivers/iio/industrialio-sw-trigger.c
+++ b/drivers/iio/industrialio-sw-trigger.c
@@ -20,7 +20,8 @@ static LIST_HEAD(iio_trigger_types_list);
 static DEFINE_RWLOCK(iio_trigger_types_lock);
 
 static
-struct iio_sw_trigger_type *iio_find_sw_trigger_type(char *name, unsigned len)
+struct iio_sw_trigger_type *__iio_find_sw_trigger_type(const char *name,
+						       unsigned len)
 {
 	struct iio_sw_trigger_type *t = NULL, *iter;
 
@@ -39,12 +40,13 @@ int iio_register_sw_trigger_type(struct iio_sw_trigger_type *t)
 	int ret = 0;
 
 	write_lock(&iio_trigger_types_lock);
-	iter = iio_find_sw_trigger_type(t->name, strlen(t->name));
+	iter = __iio_find_sw_trigger_type(t->name, strlen(t->name));
 	if (iter)
 		ret = -EBUSY;
 	else
 		list_add_tail(&t->list, &iio_trigger_types_list);
 	write_unlock(&iio_trigger_types_lock);
+
 	return ret;
 }
 EXPORT_SYMBOL(iio_register_sw_trigger_type);
@@ -55,7 +57,7 @@ int iio_unregister_sw_trigger_type(struct iio_sw_trigger_type *t)
 	int ret = 0;
 
 	write_lock(&iio_trigger_types_lock);
-	iter = iio_find_sw_trigger_type(t->name, strlen(t->name));
+	iter = __iio_find_sw_trigger_type(t->name, strlen(t->name));
 	if (!iter)
 		ret = -EINVAL;
 	else
@@ -67,12 +69,12 @@ int iio_unregister_sw_trigger_type(struct iio_sw_trigger_type *t)
 EXPORT_SYMBOL(iio_unregister_sw_trigger_type);
 
 static
-struct iio_sw_trigger_type *iio_get_sw_trigger_type(char *name)
+struct iio_sw_trigger_type *iio_get_sw_trigger_type(const char *name)
 {
 	struct iio_sw_trigger_type *t;
 
 	read_lock(&iio_trigger_types_lock);
-	t = iio_find_sw_trigger_type(name, strlen(name));
+	t = __iio_find_sw_trigger_type(name, strlen(name));
 	if (t && !try_module_get(t->owner))
 		t = NULL;
 	read_unlock(&iio_trigger_types_lock);
@@ -80,7 +82,7 @@ struct iio_sw_trigger_type *iio_get_sw_trigger_type(char *name)
 	return t;
 }
 
-struct iio_sw_trigger *iio_sw_trigger_create(char *type, char *name)
+struct iio_sw_trigger *iio_sw_trigger_create(const char *type, const char *name)
 {
 	struct iio_sw_trigger *t;
 	struct iio_sw_trigger_type *tt;
diff --git a/include/linux/iio/sw_trigger.h b/include/linux/iio/sw_trigger.h
index da7d014..ebc4dc6 100644
--- a/include/linux/iio/sw_trigger.h
+++ b/include/linux/iio/sw_trigger.h
@@ -1,5 +1,5 @@
 /*
- * Industrial I/O configfs bits
+ * Industrial I/O software trigger interface
  *
  * Copyright (c) 2015 Intel Corporation
  *
@@ -23,9 +23,9 @@
 struct iio_sw_trigger_ops;
 
 struct iio_sw_trigger_type {
-	char *name;
+	const char *name;
 	struct module *owner;
-	struct iio_sw_trigger_ops *ops;
+	const struct iio_sw_trigger_ops *ops;
 	struct list_head list;
 };
 
@@ -42,10 +42,21 @@ struct iio_sw_trigger_ops {
 	int (*remove)(struct iio_sw_trigger *);
 };
 
-int iio_register_sw_trigger_type(struct iio_sw_trigger_type *);
-int iio_unregister_sw_trigger_type(struct iio_sw_trigger_type *);
+/**
+ * iio_register_sw_trigger_type() - register a software trigger type
+ *
+ * @tt: software trigger type to be registered
+ */
+int iio_register_sw_trigger_type(struct iio_sw_trigger_type *tt);
+
+/**
+ * iio_unregister_sw_trigger_type() - unregister a software trigger type
+ *
+ * @tt: software trigger type to be unregistered
+ */
+int iio_unregister_sw_trigger_type(struct iio_sw_trigger_type *tt);
 
-struct iio_sw_trigger *iio_sw_trigger_create(char *, char *);
+struct iio_sw_trigger *iio_sw_trigger_create(const char *, const char *);
 void iio_sw_trigger_destroy(struct iio_sw_trigger *);
 
 #ifdef CONFIG_CONFIGFS_FS
-- 
1.9.1

