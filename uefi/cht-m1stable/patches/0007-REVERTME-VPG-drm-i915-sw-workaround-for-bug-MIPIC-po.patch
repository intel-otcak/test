From e738e39d7f6bcf8225f93a6c22bbe88a37ea4eae Mon Sep 17 00:00:00 2001
Message-Id: <e738e39d7f6bcf8225f93a6c22bbe88a37ea4eae.1414143271.git.chang-joon.lee@intel.com>
In-Reply-To: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
References: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
From: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
Date: Tue, 14 Oct 2014 13:23:30 +0530
Subject: [PATCH 07/26] REVERTME [VPG]: drm/i915: sw workaround for bug MIPIC
 port reg cannot be read

CHT till C0 steppings has hardware bug that MIPI port-C register
can be read, hence put a wa for this.

REVERTME: This patch can be reverted once erveyone in Intel has stopped
using CHT SoC stepping less than B0. This patch is not needed for the
final product.

For: GMINL-1532
Change-Id: Ide4aa413355710647d27429348c5619662987fca
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/intel_dsi.c |   38 ++++++++++++++++++++++++++++----------
 1 file changed, 28 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index 204c0d3..fe42ca6 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -154,10 +154,16 @@ static void intel_dsi_enable(struct intel_encoder *encoder)
 
 		wait_for_dsi_fifo_empty(intel_dsi);
 
-		/* assert ip_tg_enable signal */
-		temp = I915_READ(MIPI_PORT_CTRL(pipe)) & ~LANE_CONFIGURATION_MASK;
-		temp = temp | intel_dsi->port_bits;
-		I915_WRITE(MIPI_PORT_CTRL(pipe), temp | DPI_ENABLE);
+		if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3) &&
+						pipe == PIPE_B)
+			I915_WRITE(MIPI_PORT_CTRL(pipe), DPI_ENABLE);
+		else {
+			/* assert ip_tg_enable signal */
+			temp = I915_READ(MIPI_PORT_CTRL(pipe)) &
+						~LANE_CONFIGURATION_MASK;
+			temp = temp | intel_dsi->port_bits;
+			I915_WRITE(MIPI_PORT_CTRL(pipe), temp | DPI_ENABLE);
+		}
 		POSTING_READ(MIPI_PORT_CTRL(pipe));
 	}
 
@@ -283,9 +289,14 @@ static void intel_dsi_disable(struct intel_encoder *encoder)
 	if (is_vid_mode(intel_dsi)) {
 		wait_for_dsi_fifo_empty(intel_dsi);
 
-		/* de-assert ip_tg_enable signal */
-		temp = I915_READ(MIPI_PORT_CTRL(pipe));
-		I915_WRITE(MIPI_PORT_CTRL(pipe), temp & ~DPI_ENABLE);
+		if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3) &&
+						pipe == PIPE_B)
+			I915_WRITE(MIPI_PORT_CTRL(pipe), ~DPI_ENABLE);
+		else {
+			/* de-assert ip_tg_enable signal */
+			temp = I915_READ(MIPI_PORT_CTRL(pipe));
+			I915_WRITE(MIPI_PORT_CTRL(pipe), temp & ~DPI_ENABLE);
+		}
 		POSTING_READ(MIPI_PORT_CTRL(pipe));
 
 		msleep(2);
@@ -396,9 +407,10 @@ static void intel_dsi_post_disable(struct intel_encoder *encoder)
 static bool intel_dsi_get_hw_state(struct intel_encoder *encoder,
 				   enum pipe *pipe)
 {
+	struct drm_device *dev = encoder->base.dev;
 	struct drm_i915_private *dev_priv = encoder->base.dev->dev_private;
 	enum intel_display_power_domain power_domain;
-	u32 port, func;
+	u32 dsi_status, func;
 	enum pipe p;
 
 	DRM_DEBUG_KMS("\n");
@@ -409,10 +421,16 @@ static bool intel_dsi_get_hw_state(struct intel_encoder *encoder,
 
 	/* XXX: this only works for one DSI output */
 	for (p = PIPE_A; p <= PIPE_B; p++) {
-		port = I915_READ(MIPI_PORT_CTRL(p));
+		if (IS_CHERRYVIEW(dev) &&
+				STEP_BETWEEN_INCLUSIVE(STEP_A0, STEP_B3) &&
+				(MIPI_PORT_CTRL(p) == _MIPIB_PORT_CTRL))
+			dsi_status = I915_READ(PIPECONF(PIPE_B)) &
+							PIPECONF_ENABLE;
+		else
+			dsi_status = I915_READ(MIPI_PORT_CTRL(p)) & DPI_ENABLE;
 		func = I915_READ(MIPI_DSI_FUNC_PRG(p));
 
-		if ((port & DPI_ENABLE) || (func & CMD_MODE_DATA_WIDTH_MASK)) {
+		if (dsi_status || (func & CMD_MODE_DATA_WIDTH_MASK)) {
 			if (I915_READ(MIPI_DEVICE_READY(p)) & DEVICE_READY) {
 				*pipe = p;
 				return true;
-- 
1.7.9.5

