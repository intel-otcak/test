From 581855bf7f9ee7e6cd428e08a1fd51c28be820e0 Mon Sep 17 00:00:00 2001
Message-Id: <581855bf7f9ee7e6cd428e08a1fd51c28be820e0.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Uma Shankar <uma.shankar@intel.com>
Date: Wed, 15 May 2013 11:11:46 +0530
Subject: [PATCH 028/312] REVERTME [VPG]: drm/i915: Added DRM Ioctl to control
 Wide Gamut

Add support wide gamut and color space conversion for BYT.
For HSW, current implementation is ioctl based. Hence added
just implementation. IOCTL specific changes are not added.
Finally for BYT, CSC will be supported based on debugfs interface.
Patches to follow.

(cherry picked from commit 6dce449d9ae606eb7a1115391a899025b2dbe141)

Issue: APDEV-1117
Change-Id: I5d7ae66a441520338a597848ac9240c9f26baf99
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Reviewed-on: http://android.intel.com:8080/107652
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Purushothaman, Vijay A <vijay.a.purushothaman@intel.com>
Reviewed-by: Stimson, Dale B <dale.b.stimson@intel.com>
Tested-by: Stimson, Dale B <dale.b.stimson@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Signed-off-by: A.Sunil Kamath <sunil.kamath@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h      |    4 +++
 drivers/gpu/drm/i915/intel_display.c |   45 ++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_drv.h     |    2 ++
 include/uapi/drm/i915_drm.h          |   17 +++++++++++++
 4 files changed, 68 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 0623b51..ae5f2f9 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -2228,6 +2228,10 @@ enum punit_power_well {
 /* Same as Haswell, but 72064 bytes now. */
 #define GEN8_CXT_TOTAL_SIZE		(18 * PAGE_SIZE)
 
+/* CSC Control Register */
+#define	_PIPEACSC	0x600b0
+#define	_PIPEBCSC	0x610b0
+#define	PIPECONF_CSC_ENABLE	(1<<15)
 
 #define VLV_CLK_CTL2			0x101104
 #define   CLK_CTL2_CZCOUNT_30NS_SHIFT	28
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 9a20415..3979bf2 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -7050,6 +7050,51 @@ static void lpt_init_pch_refclk(struct drm_device *dev)
 		lpt_disable_clkout_dp(dev);
 }
 
+int intel_enable_CSC(struct drm_device *dev, void *data, struct drm_file *priv)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct CSC_Coeff *wgCSCCoeff = data;
+	struct drm_mode_object *obj;
+	struct drm_crtc *crtc;
+	struct intel_crtc *intel_crtc;
+	u32 pipeconf;
+	int pipe;
+	u32 csc_reg=_PIPEACSC;
+	int i = 0, j = 0;
+
+	obj = drm_mode_object_find(dev, wgCSCCoeff->crtc_id,
+			DRM_MODE_OBJECT_CRTC);
+	if (!obj) {
+		DRM_DEBUG_DRIVER("Unknown CRTC ID %d\n", wgCSCCoeff->crtc_id);
+			return -EINVAL;
+	}
+
+	crtc = obj_to_crtc(obj);
+	DRM_DEBUG_DRIVER("[CRTC:%d]\n", crtc->base.id);
+	intel_crtc = to_intel_crtc(crtc);
+	pipe = intel_crtc->pipe;
+	DRM_DEBUG_DRIVER("pipe = %d\n", pipe);
+	pipeconf = I915_READ(PIPECONF(pipe));
+	pipeconf |= PIPECONF_CSC_ENABLE;
+
+	if (pipe == 0)
+		csc_reg = _PIPEACSC;
+	else if (pipe == 1)
+		csc_reg = _PIPEBCSC;
+	else
+		BUG();
+
+	I915_WRITE(PIPECONF(pipe), pipeconf);
+	POSTING_READ(PIPECONF(pipe));
+
+	for (i = 0; i < 6; i++) {
+		I915_WRITE(csc_reg + j, wgCSCCoeff->VLV_CSC_Coeff[i].Value);
+		j = j + 0x4;
+	}
+
+	return 0;
+}
+
 /*
  * Initialize reference clocks when the driver loads
  */
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 5c2c03a..8ed1eeb 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -773,6 +773,8 @@ void intel_wait_for_pipe_off(struct drm_device *dev, int pipe);
 int ironlake_get_lanes_required(int target_clock, int link_bw, int bpp);
 void vlv_wait_port_ready(struct drm_i915_private *dev_priv,
 			 struct intel_digital_port *dport);
+extern int intel_enable_CSC(struct drm_device *dev, void *csc_params,
+		struct drm_file *file_priv);
 int intel_configure_csc(struct drm_device *dev, void *csc_params,
 					struct drm_file *file_priv);
 bool intel_get_load_detect_pipe(struct drm_connector *connector,
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 06d9f19..0b610b1 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -63,6 +63,23 @@
 #define I915_NR_TEX_REGIONS 255	/* table size 2k - maximum due to use
 				 * of chars for next/prev indices */
 #define I915_LOG_MIN_TEX_REGION_SIZE 14
+#define MAX_CSC_COEFFICIENTS 9
+struct drm_intel_csc_params {
+	float   m_CSCCoeff[MAX_CSC_COEFFICIENTS];
+};
+
+union CSC_COEFFICIENT_WG {
+	unsigned int  Value;
+	struct {
+	unsigned int Coeff_2:16; /* bit 0-15 */
+	unsigned int  Coeff_1:16; /* bits 16-32 */
+	};
+};
+
+struct CSC_Coeff {
+	unsigned int crtc_id;
+	union CSC_COEFFICIENT_WG VLV_CSC_Coeff[6];
+};
 
 typedef struct _drm_i915_init {
 	enum {
-- 
1.7.9.5

