From f20eec473f915084e85e2d9c69ea1a0e8d7181ba Mon Sep 17 00:00:00 2001
From: Ananth Krishna R <ananth.krishna.r@intel.com>
Date: Fri, 20 Feb 2015 19:10:17 +0530
Subject: [PATCH] [MODULE LEVEL DVFS] Fix for suspend exit failure

This patch fixes the issue seen on exit from suspend. With module
level DFVS enabled and cpu core being grouped; there is a conflict
of who is the real policy->cpu holder being deferenced.

Change-Id: I7e88eb228c8a3c2e9db1943204f4ac7369793b6f
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-5644
Signed-off-by: Ananth Krishna R <ananth.krishna.r@intel.com>
---
 drivers/cpufreq/cpufreq.c | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index f500c00..ebbbfb1 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1345,8 +1345,21 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
 	} else if (cpus > 1) {
 		new_cpu = cpufreq_nominate_new_policy_cpu(policy, cpu);
 		if (new_cpu >= 0) {
-			update_policy_cpu(policy, new_cpu);
+#ifdef CONFIG_INTEL_MODULE_CPU_FREQ
+			if (cpufreq_driver->exit)
+				cpufreq_driver->exit(policy);
+#endif
 
+			update_policy_cpu(policy, new_cpu);
+#ifdef CONFIG_INTEL_MODULE_CPU_FREQ
+			if (cpufreq_driver->init) {
+				ret = cpufreq_driver->init(policy);
+				if (ret)
+					pr_debug("initialization failed during promotion from CPU%d to CPU%d\n",
+						 policy->cpu, new_cpu);
+				cpumask_clear_cpu(cpu, policy->cpus);
+			}
+#endif
 			if (!frozen) {
 				pr_debug("%s: policy Kobject moved to cpu: %d from: %d\n",
 						__func__, new_cpu, cpu);
@@ -1385,7 +1398,11 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
 	up_write(&policy->rwsem);
 
 	/* If cpu is last user of policy, free policy */
+#ifdef CONFIG_INTEL_MODULE_CPU_FREQ
+	if ((cpus == 1) && (cpu == policy->cpu)) {
+#else
 	if (cpus == 1) {
+#endif
 		if (has_target()) {
 			ret = __cpufreq_governor(policy,
 					CPUFREQ_GOV_POLICY_EXIT);
-- 
1.9.1

