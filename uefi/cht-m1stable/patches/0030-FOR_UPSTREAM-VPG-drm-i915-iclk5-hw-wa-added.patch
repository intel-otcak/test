From 8c955dde5b379e57e65d5440cc7795b5583e246a Mon Sep 17 00:00:00 2001
Message-Id: <8c955dde5b379e57e65d5440cc7795b5583e246a.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Tue, 11 Jun 2013 21:22:14 +0530
Subject: [PATCH 030/312] FOR_UPSTREAM [VPG]: drm/i915: iclk5 hw wa added

Writing to iCLK5 register for clock bending and spread is
currently not allowed. Hence an alternative PMC register is
provided for enabling/disabling clock bend/spread. Details of
the alternative register address 0xB4: 0th Bit handshake, 1st bit
clock bending enable/disable, 2nd bit spread enable/disable

Conflicts:
	drivers/gpu/drm/i915/intel_sideband.c

Issue: APDEV-1159
Change-Id: I8861c2020735eb358943e6c82d992d4bdc9ed9ec
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
Reviewed-on: http://android.intel.com:8080/112985
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Ernst, Eric <eric.ernst@intel.com>
Reviewed-by: Stimson, Dale B <dale.b.stimson@intel.com>
Tested-by: Stimson, Dale B <dale.b.stimson@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Signed-off-by: A.Sunil Kamath <sunil.kamath@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h       |   11 ++++++
 drivers/gpu/drm/i915/i915_reg.h       |    8 +++++
 drivers/gpu/drm/i915/intel_display.c  |   63 +++++++++++++++++++++++----------
 drivers/gpu/drm/i915/intel_sideband.c |   46 ++++++++++++++++++++++++
 4 files changed, 109 insertions(+), 19 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 5db7ef0..507c0d4 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2658,6 +2658,10 @@ void intel_sbi_write(struct drm_i915_private *dev_priv, u16 reg, u32 value,
 u32 vlv_flisdsi_read(struct drm_i915_private *dev_priv, u32 reg);
 void vlv_flisdsi_write(struct drm_i915_private *dev_priv, u32 reg, u32 val);
 
+int intel_pmc_read32(struct drm_i915_private *dev_priv, u32 reg,  u32 *val);
+int intel_pmc_write32(struct drm_i915_private *dev_priv, u32 reg, u32 val);
+int intel_pmc_write32_bits(struct drm_i915_private *dev_priv, \
+			u32 reg, u32 val, u32 mask);
 int vlv_gpu_freq(struct drm_i915_private *dev_priv, int val);
 int vlv_freq_opcode(struct drm_i915_private *dev_priv, int val);
 
@@ -2707,6 +2711,13 @@ int vlv_freq_opcode(struct drm_i915_private *dev_priv, int val);
 #define INTEL_BROADCAST_RGB_FULL 1
 #define INTEL_BROADCAST_RGB_LIMITED 2
 
+#define intel_pmc_read(dev_priv, reg, val) \
+		intel_pmc_read32(dev_priv, reg, val)
+#define intel_pmc_write(dev_priv, reg, val) \
+		intel_pmc_write32(dev_priv, reg, val)
+#define intel_pmc_write_bits(dev_priv, reg, val, mask) \
+		intel_pmc_write32_bits(dev_priv, reg, val, mask)
+
 static inline uint32_t i915_vgacntrl_reg(struct drm_device *dev)
 {
 	if (HAS_PCH_SPLIT(dev))
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 0994c16..039d0c5 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -463,6 +463,13 @@
 #define  DEBUG_RESET_FULL		(1<<7)
 #define  DEBUG_RESET_RENDER		(1<<8)
 #define  DEBUG_RESET_DISPLAY		(1<<9)
+/*
+ * PMC HW WA Reg
+ */
+#define PMC_WA_FORICLK5_REG		0xB4
+#define PMC_WA_HNDSHK			(1<<0)
+#define PMC_WA_ICLK5_BIT16_BND		(1<<1)
+#define PMC_WA_ICLK5_BIT17_SPRD		(1<<2)
 
 /*
  * IOSF sideband
@@ -482,6 +489,7 @@
 #define   IOSF_PORT_GPIO_NC			0x13
 #define   IOSF_PORT_CCK				0x14
 #define   IOSF_PORT_CCU				0xA9
+#define IOSF_PORT_PMC				0x52
 #define   IOSF_PORT_GPS_CORE			0x48
 #define   IOSF_PORT_FLISDSI			0x1B
 #define VLV_IOSF_DATA				(VLV_DISPLAY_BASE + 0x2104)
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index df5e4e3..3552bc9 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -6249,8 +6249,9 @@ void valleyview_program_clock_bending(struct drm_i915_private *dev_priv,
 	bool ssbendupdown = 0, clkbenden = 0;
 	u32 iClk1val = 0, iClk0val = 0, iClk5val = 0, writeval = 0;
 	unsigned long long bendadjust = 0, bendstepsize = 0;
-	u32 bendtimetosw = 0;
+	u32 bendtimetosw = 0, regval = 0;
 	unsigned long long mult = 0, div = 0;
+	unsigned long timeout = jiffies + msecs_to_jiffies(100);
 
 	clkbenden = clockbend->is_enable;
 	if (clockbend->is_enable) {
@@ -6323,15 +6324,22 @@ void valleyview_program_clock_bending(struct drm_i915_private *dev_priv,
 
 			Disable clock bending if enabled: toggling of enable bit
 			is required for new parameters to take effect.*/
-			intel_iosf_rw(dev_priv, OPCODE_REG_READ,
-				IOSF_PORT_CCU, CCU_iCLK5_REG, &iClk5val);
+			iClk5val = vlv_nc_read(dev_priv, CCU_iCLK5_REG);
 			if (true == ((iClk5val & iCLK5_DISPBENDCLKEN)
 					>> iCLK5_BENDCLKEN_SHIFT)) {
-				writeval = ~iCLK5_DISPBENDCLKEN;
-				iClk5val = iClk5val & writeval;
-				intel_iosf_rw(dev_priv, OPCODE_REG_WRITE,
-					IOSF_PORT_CCU, CCU_iCLK5_REG,
-					&iClk5val);
+				/* HW WA - Clear the dispbendclken */
+				intel_pmc_write_bits(dev_priv,
+				PMC_WA_FORICLK5_REG, PMC_WA_HNDSHK, 0x3);
+				do {
+					regval = 0xF; /* Random */
+					intel_pmc_read(dev_priv,
+						PMC_WA_FORICLK5_REG, &regval);
+				 /* Wait for handshake bit clearance */
+				} while (((regval & PMC_WA_HNDSHK) != 0x0) &&
+					time_after(timeout, jiffies));
+				if (time_after(jiffies, timeout))
+					DRM_DEBUG_DRIVER(
+					"Clock bending prgm timed out\n");
 			}
 
 			/*program step size*/
@@ -6355,12 +6363,20 @@ void valleyview_program_clock_bending(struct drm_i915_private *dev_priv,
 				IOSF_PORT_CCU, CCU_iCLK1_REG, &iClk1val);
 
 			/*enable clock bend*/
-			intel_iosf_rw(dev_priv, OPCODE_REG_READ,
-				IOSF_PORT_CCU, CCU_iCLK5_REG, &iClk5val);
-			writeval = iCLK5_DISPBENDCLKREQ | iCLK5_DISPBENDCLKEN;
-			iClk5val = iClk5val | writeval;
-			intel_iosf_rw(dev_priv, OPCODE_REG_WRITE,
-				IOSF_PORT_CCU, CCU_iCLK5_REG, &iClk5val);
+			/* Alternative HW WA */
+			/* Handshake bit and bit 1 mapped to bit 16 of iclk5 */
+			intel_pmc_write_bits(dev_priv, PMC_WA_FORICLK5_REG,
+				PMC_WA_HNDSHK | PMC_WA_ICLK5_BIT16_BND, 0x3);
+			do {
+				regval = 0xF; /* Random */
+				intel_pmc_read(dev_priv,
+					PMC_WA_FORICLK5_REG, &regval);
+			/* Wait for handshake bit clearance */
+			} while (((regval & PMC_WA_HNDSHK) != 0x0) &&
+				time_after(timeout, jiffies));
+			if (time_after(jiffies, timeout))
+				DRM_DEBUG_DRIVER(
+				"Clock bending prgm timed out\n");
 		} else {
 			clkbenden = false;
 		}
@@ -6381,11 +6397,20 @@ void valleyview_program_clock_bending(struct drm_i915_private *dev_priv,
 		intel_iosf_rw(dev_priv, OPCODE_REG_WRITE, IOSF_PORT_CCU,
 				CCU_iCLK1_REG, &iClk1val);
 
-		intel_iosf_rw(dev_priv, OPCODE_REG_READ,
-				IOSF_PORT_CCU, CCU_iCLK5_REG, &iClk5val);
-		iClk5val = iClk5val & ~iCLK5_DISPBENDCLKEN;
-		intel_iosf_rw(dev_priv, OPCODE_REG_WRITE, IOSF_PORT_CCU,
-				CCU_iCLK5_REG, &iClk5val);
+		/* Alternative HW WA */
+		intel_pmc_write_bits(dev_priv,
+			PMC_WA_FORICLK5_REG, PMC_WA_HNDSHK, 0x3);
+		do {
+			regval = 0xF; /* Random */
+			intel_pmc_read(dev_priv, PMC_WA_FORICLK5_REG, &regval);
+		 /* Wait for handshake bit clearance */
+		} while (((regval & PMC_WA_HNDSHK) != 0x0) &&
+			time_after(timeout, jiffies));
+		if (time_after(jiffies, timeout))
+			DRM_DEBUG_DRIVER(
+			"Clock bending prgm timed out\n");
+		iClk5val = vlv_nc_read(dev_priv, CCU_iCLK5_REG);
+		DRM_DEBUG_DRIVER("iCLK5 Reg Value = %x\n", iClk5val);
 	}
 }
 
diff --git a/drivers/gpu/drm/i915/intel_sideband.c b/drivers/gpu/drm/i915/intel_sideband.c
index 01d841e..7a3da0e 100644
--- a/drivers/gpu/drm/i915/intel_sideband.c
+++ b/drivers/gpu/drm/i915/intel_sideband.c
@@ -45,6 +45,13 @@ static int vlv_sideband_rw(struct drm_i915_private *dev_priv, u32 devfn,
 	u32 cmd, be = 0xf, bar = 0;
 	bool is_read = (opcode == SB_MRD_NP || opcode == SB_CRRDDA_NP);
 
+	if (port == IOSF_PORT_PMC) {
+		if (is_read)
+			opcode = 0x0;
+		else
+			opcode = 0x1;
+	}
+
 	cmd = (devfn << IOSF_DEVFN_SHIFT) | (opcode << IOSF_OPCODE_SHIFT) |
 		(port << IOSF_PORT_SHIFT) | (be << IOSF_BYTE_ENABLES_SHIFT) |
 		(bar << IOSF_BAR_SHIFT);
@@ -75,6 +82,25 @@ static int vlv_sideband_rw(struct drm_i915_private *dev_priv, u32 devfn,
 	return 0;
 }
 
+static int vlv_sideband_rw32_bits(struct drm_i915_private *dev_priv, u32 devfn,
+			   u32 port, u32 opcode, u32 addr, u32 *val, u32 mask)
+{
+	u32 tmp;
+	int status;
+
+	status = vlv_sideband_rw(dev_priv, DPIO_DEVFN, port,
+					SB_MRD_NP, addr, &tmp);
+	if (status != 0)
+		return status;
+	tmp = tmp & ~mask;
+	*val = *val & mask;
+	tmp = *val | tmp;
+
+	return vlv_sideband_rw(dev_priv, DPIO_DEVFN, IOSF_PORT_PMC,
+				SB_MWR_NP, addr, &tmp);
+
+}
+
 u32 vlv_punit_read(struct drm_i915_private *dev_priv, u8 addr)
 {
 	u32 val = 0;
@@ -280,3 +306,23 @@ void vlv_flisdsi_write(struct drm_i915_private *dev_priv, u32 reg, u32 val)
 	vlv_sideband_rw(dev_priv, DPIO_DEVFN, IOSF_PORT_FLISDSI, SB_CRWRDA_NP,
 			reg, &val);
 }
+
+int intel_pmc_read32(struct drm_i915_private *dev_priv, u32 reg, u32 *val)
+{
+
+	return vlv_sideband_rw(dev_priv, DPIO_DEVFN, IOSF_PORT_PMC,
+				SB_MRD_NP, reg, val);
+}
+
+int intel_pmc_write32(struct drm_i915_private *dev_priv, u32 reg, u32 val)
+{
+	return vlv_sideband_rw(dev_priv, DPIO_DEVFN, IOSF_PORT_PMC,
+				SB_MWR_NP, reg, &val);
+}
+
+int intel_pmc_write32_bits(struct drm_i915_private *dev_priv, u32 reg,
+				u32 val, u32 mask)
+{
+	return vlv_sideband_rw32_bits(dev_priv, DPIO_DEVFN, IOSF_PORT_PMC,
+				SB_MWR_NP, reg, &val, mask);
+}
-- 
1.7.9.5

