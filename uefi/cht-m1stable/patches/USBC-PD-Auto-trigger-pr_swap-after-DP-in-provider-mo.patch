From 1edfb70d19ad09ff57161bdacd3aa8f6d3d5c30b Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Fri, 21 Aug 2015 22:25:39 +0530
Subject: [PATCH] USBC-PD: Auto trigger pr_swap after DP in provider mode.

Currently auto triggering power role swap based on external
powered bit is stated immidiatlty after pd negotiation.
This is causing issues for display communication as these
should not run in parallel. Hence the power role swap is
triggered after DP negotiation to avoid conflicts.

Change-Id: Id13e8ad5452e35cd49476730d2aabca8e3feb41d
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17053
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
---
 drivers/usb/typec/pd/display_pe.c    |  6 ++++
 drivers/usb/typec/pd/policy_engine.c | 55 ++++++++++++++++++++++++++++--------
 drivers/usb/typec/pd/policy_engine.h |  9 ++++++
 drivers/usb/typec/pd/src_port_pe.c   | 34 ++++++++++++++++------
 4 files changed, 85 insertions(+), 19 deletions(-)

diff --git a/drivers/usb/typec/pd/display_pe.c b/drivers/usb/typec/pd/display_pe.c
index cfbd203cced7..5806e9676598 100644
--- a/drivers/usb/typec/pd/display_pe.c
+++ b/drivers/usb/typec/pd/display_pe.c
@@ -492,6 +492,9 @@ static int disp_pe_handle_display_configure(struct disp_port_pe *disp_pe,
 		disp_pe->hpd_state = true;
 		policy_set_dp_state(&disp_pe->p, CABLE_ATTACHED,
 					disp_pe->dp_mode);
+		/* Update the DP state to policy engine */
+		pe_notify_policy_status_changed(&disp_pe->p,
+				POLICY_TYPE_DISPLAY, POLICY_STATUS_SUCCESS);
 		break;
 	case REP_NACK:
 		log_warn("NAK for display config cmd %d\n", disp_pe->dp_mode);
@@ -652,6 +655,9 @@ static void disp_pe_start_comm(struct work_struct *work)
 		disp_pe->p.status = POLICY_STATUS_FAIL;
 		mutex_unlock(&disp_pe->pe_lock);
 		log_warn("Not scheduling srccap as max re-try reached\n");
+		/* Update the DP state to policy engine */
+		pe_notify_policy_status_changed(&disp_pe->p,
+				POLICY_TYPE_DISPLAY, POLICY_STATUS_FAIL);
 	}
 }
 
diff --git a/drivers/usb/typec/pd/policy_engine.c b/drivers/usb/typec/pd/policy_engine.c
index 8907c5a31bd3..255f906e1c62 100644
--- a/drivers/usb/typec/pd/policy_engine.c
+++ b/drivers/usb/typec/pd/policy_engine.c
@@ -534,23 +534,56 @@ static void pe_policy_status_changed(struct policy_engine *pe, int policy_type,
 				int status)
 {
 	struct policy *p;
+	int ret;
 
 	if (!pe)
 		return;
-	/* Handle the source policy status change */
-	if ((policy_type == POLICY_TYPE_SOURCE)
-		&& ((status == POLICY_STATUS_SUCCESS)
-		|| (status == POLICY_STATUS_FAIL))) {
-		p = pe_get_policy(pe, POLICY_TYPE_DISPLAY);
-		/* Start the display policy */
+	switch (policy_type) {
+	case POLICY_TYPE_SOURCE:
+		/* Handle the source policy status change */
+		if (status == POLICY_STATUS_SUCCESS
+			|| status == POLICY_STATUS_FAIL) {
+			p = pe_get_policy(pe, POLICY_TYPE_DISPLAY);
+			/* Start the display policy */
+			if (!p) {
+				pr_err("PE: %s No Display policy found\n",
+						__func__);
+				break;
+			}
+			if (p->start) {
+				pr_info("PE: %s Stating disp policy\n",
+						__func__);
+				p->start(p);
+			}
+		}
+		break;
+	case POLICY_TYPE_DISPLAY:
+		/* Handle the display policy status change */
+		p = pe_get_policy(pe, POLICY_TYPE_SOURCE);
 		if (!p) {
-			pr_err("PE: %s No Display policy found\n", __func__);
-			return;
+			pr_err("PE: %s No Source policy found\n", __func__);
+			break;
 		}
-		if (p->start) {
-			pr_info("PE: %s Stating disp policy\n", __func__);
-			p->start(p);
+
+		if (p->status != POLICY_STATUS_SUCCESS
+			&& p->status != POLICY_STATUS_RUNNING) {
+			pr_warn("PE:%s: Source PE not success!!\n", __func__);
+			break;
+		}
+		if (!p->get_port_caps)
+			break;
+
+		ret = p->get_port_caps(p, &pe->pp_caps);
+		if (ret) {
+			pr_warn("PE:%s: faied to get pp caps!!\n", __func__);
+			break;
 		}
+		/* Trigger PR_SWAP if pp is externally powered */
+		if (pe->pp_caps.pp_is_ext_pwrd && p->rcv_request)
+			p->rcv_request(p, PE_EVT_SEND_PR_SWAP);
+		break;
+	default:
+		pr_debug("PE:%s: Not processing state change\n", __func__);
 	}
 }
 
diff --git a/drivers/usb/typec/pd/policy_engine.h b/drivers/usb/typec/pd/policy_engine.h
index 28ae2c102cc4..914ff24df0c2 100644
--- a/drivers/usb/typec/pd/policy_engine.h
+++ b/drivers/usb/typec/pd/policy_engine.h
@@ -293,6 +293,12 @@ enum policy_status {
 	POLICY_STATUS_SUCCESS,
 };
 
+struct pe_port_partner_caps {
+	unsigned pp_is_dual_drole:1;
+	unsigned pp_is_dual_prole:1;
+	unsigned pp_is_ext_pwrd:1;
+};
+
 struct policy {
 	enum policy_type type;
 	struct policy_engine *pe;
@@ -305,6 +311,8 @@ struct policy {
 				enum pe_event evt);
 	int (*rcv_cmd)(struct policy *p, enum pe_event evt);
 	int (*rcv_request)(struct policy *p, enum pe_event evt);
+	int (*get_port_caps)(struct policy *p,
+				struct pe_port_partner_caps *pp_caps);
 	void (*exit)(struct policy *p);
 };
 
@@ -323,6 +331,7 @@ struct policy_engine {
 	enum data_role	cur_drole;
 	enum pwr_role cur_prole;
 	bool is_pd_connected;
+	struct pe_port_partner_caps pp_caps;
 };
 
 struct pe_operations {
diff --git a/drivers/usb/typec/pd/src_port_pe.c b/drivers/usb/typec/pd/src_port_pe.c
index 3f3e8d6a0f68..638b5356a76d 100644
--- a/drivers/usb/typec/pd/src_port_pe.c
+++ b/drivers/usb/typec/pd/src_port_pe.c
@@ -254,8 +254,6 @@ src_pe_handle_gcrc(struct src_port_pe *src_pe, struct pd_packet *pkt)
 		cancel_delayed_work_sync(&src_pe->start_comm);
 		log_info("SRC_PE_STATE_PS_RDY_SENT -> SRC_PE_STATE_PD_CONFIGURED");
 
-		pe_notify_policy_status_changed(&src_pe->p,
-				POLICY_TYPE_SOURCE, src_pe->p.status);
 		/* Schedule worker to get sink caps */
 		schedule_work(&src_pe->msg_work);
 		break;
@@ -348,6 +346,11 @@ static int src_pe_rcv_request(struct policy *srcp, enum pe_event evt)
 			log_info("Port partner doesnt support pr_swap");
 			break;
 		}
+		if (src_pe->state != SRC_PE_STATE_PD_CONFIGURED) {
+			log_info("Cannot process PR_SWAP in state=%d\n",
+					src_pe->state);
+			break;
+		}
 		mutex_lock(&src_pe->pe_lock);
 		src_pe->state = PE_PRS_SRC_SNK_SEND_PR_SWAP;
 		src_pe->p.status = POLICY_STATUS_RUNNING;
@@ -384,9 +387,6 @@ static void src_pe_handle_snk_cap_rcv(struct src_port_pe *src_pe,
 	log_dbg("is_dual_prole=%d, is_dual_drole=%d, is_ext_pwrd=%d",
 			snk_cap->dual_role_pwr, snk_cap->data_role_swap,
 			snk_cap->ext_powered);
-	/* Trigger power role swap if extenally powered */
-	if (snk_cap->ext_powered)
-		src_pe_rcv_request(&src_pe->p, PE_EVT_SEND_PR_SWAP);
 }
 
 static int
@@ -466,9 +466,11 @@ static int src_pe_handle_after_prswap_sent(struct src_port_pe *src_pe)
 	 * cur_state */
 	ret = wait_for_completion_timeout(&src_pe->srt_complete, timeout);
 	if (ret == 0) {
-		log_err("SRT time expired Sending PD_CMD_HARD_RESET");
-		policy_send_packet(&src_pe->p, NULL, 0, PD_CMD_HARD_RESET,
-					PE_EVT_SEND_HARD_RESET);
+		log_err("SRT time expired, move to READY");
+		mutex_lock(&src_pe->pe_lock);
+		src_pe->state = SRC_PE_STATE_PD_CONFIGURED;
+		mutex_unlock(&src_pe->pe_lock);
+
 		goto error;
 	}
 	ret = src_pe_handle_sink_transition_to_off(src_pe);
@@ -672,6 +674,21 @@ static void src_pe_exit(struct policy *p)
 	kfree(src_pe);
 }
 
+static int src_pe_get_port_caps(struct policy *p,
+			struct pe_port_partner_caps *pp_caps)
+{
+	struct src_port_pe *src_pe = container_of(p,
+					struct src_port_pe, p);
+
+	mutex_lock(&src_pe->pe_lock);
+	pp_caps->pp_is_dual_drole = src_pe->pp_is_dual_drole;
+	pp_caps->pp_is_dual_prole = src_pe->pp_is_dual_prole;
+	pp_caps->pp_is_ext_pwrd = src_pe->pp_is_ext_pwrd;
+	mutex_unlock(&src_pe->pe_lock);
+
+	return 0;
+}
+
 /* Init function to initialize the source policy engine */
 struct policy *src_pe_init(struct policy_engine *pe)
 {
@@ -701,6 +718,7 @@ struct policy *src_pe_init(struct policy_engine *pe)
 	p->start = src_pe_start_policy_engine;
 	p->stop = src_pe_stop_policy_engine;
 	p->exit = src_pe_exit;
+	p->get_port_caps = src_pe_get_port_caps;
 	init_completion(&src_pe->srt_complete);
 	init_completion(&src_pe->psso_complete);
 
-- 
1.9.1

