From 2a1464a5f3db8a0dcae8d4ef17e1e091511d27bd Mon Sep 17 00:00:00 2001
Message-Id: <2a1464a5f3db8a0dcae8d4ef17e1e091511d27bd.1417780878.git.chang-joon.lee@intel.com>
In-Reply-To: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
References: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
From: Durgadoss R <durgadoss.r@intel.com>
Date: Tue, 11 Nov 2014 16:42:18 +0530
Subject: [PATCH 16/34] FOR_UPSTREAM [VPG]: drm/i915: Handle PSR interrupts

This patch enables PSR active state interrupts for CHV.
Whenever PSR enters state 'active' (state:3), an interrupt
is generated. We cache the time of this interrupt to make
sure we allow setup time to pass when we exit PSR.

Issue: GMINL-3876
Change-Id: Id39e6f02515f070c3b8a65081f678865e0e67863
Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
---
 drivers/gpu/drm/i915/i915_irq.c |   14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index e85e638..9dd9b7e 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -589,6 +589,8 @@ __i915_enable_pipestat(struct drm_i915_private *dev_priv, enum pipe pipe,
 {
 	u32 reg = PIPESTAT(pipe);
 	u32 pipestat = I915_READ(reg) & PIPESTAT_INT_ENABLE_MASK;
+	u32 vlv_psr_status[I915_MAX_PIPES] = {PIPE_A_PSR_STATUS_VLV,
+					PIPE_B_PSR_STATUS_VLV, 0};
 
 	assert_spin_locked(&dev_priv->irq_lock);
 
@@ -601,6 +603,9 @@ __i915_enable_pipestat(struct drm_i915_private *dev_priv, enum pipe pipe,
 	if ((pipestat & enable_mask) == enable_mask)
 		return;
 
+	if (IS_CHERRYVIEW(dev_priv->dev))
+		status_mask |= vlv_psr_status[pipe];
+
 	dev_priv->pipestat_irq_mask[pipe] |= status_mask;
 
 	/* Enable the interrupt, clear any pending status */
@@ -1148,6 +1153,9 @@ static void i915_hotplug_work_func(struct work_struct *work)
 	u32 hpd_event_bits;
 	char *envp[] = {"hdcp_hpd", NULL};
 
+	/* Disable PSR on Hotplug interrupt */
+	intel_vlv_edp_psr_disable(dev);
+
 	mutex_lock(&mode_config->mutex);
 	DRM_DEBUG_KMS("running encoder hotplug functions\n");
 
@@ -2097,6 +2105,8 @@ static void valleyview_pipestat_irq_handler(struct drm_device *dev, u32 iir)
 	struct drm_crtc *crtc;
 	struct intel_crtc *intel_crtc;
 	u32 pipe_stats[I915_MAX_PIPES] = { };
+	u32 vlv_psr_status[I915_MAX_PIPES] = {PIPE_A_PSR_STATUS_VLV,
+					PIPE_B_PSR_STATUS_VLV, 0};
 	int pipe;
 
 	spin_lock(&dev_priv->irq_lock);
@@ -2170,6 +2180,10 @@ static void valleyview_pipestat_irq_handler(struct drm_device *dev, u32 iir)
 		if (pipe_stats[pipe] & PIPE_DPST_EVENT_STATUS)
 			i915_dpst_irq_handler(dev, pipe);
 
+		/* Handle PSR active entry events */
+		if (pipe_stats[pipe] & vlv_psr_status[pipe])
+			intel_vlv_psr_irq_handler(dev, pipe);
+
 		if (pipe_stats[pipe] & PIPE_FIFO_UNDERRUN_STATUS &&
 		    intel_set_cpu_fifo_underrun_reporting(dev, pipe, false))
 			DRM_ERROR("pipe %c underrun\n", pipe_name(pipe));
-- 
1.7.9.5

