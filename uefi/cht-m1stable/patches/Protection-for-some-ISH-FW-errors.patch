From 38c15ed180f6ebf922d7c8f3046e029a99be778f Mon Sep 17 00:00:00 2001
From: Daniel Drubin <daniel.drubin@intel.com>
Date: Mon, 7 Sep 2015 14:21:10 +0300
Subject: [PATCH] Protection for some ISH FW errors

Added protection against bad HID-over-HECI packets.
Added PCI reset for ISH FW upon some error conditions as immediate
treatment until real FW fix is available

Change-Id: Ia6f921591a59257f59621d478e0479993b96ac4e
Signed-off-by: Daniel Drubin <daniel.drubin@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-42974
---
 drivers/misc/heci/heci-api.c        |   5 ++
 drivers/misc/heci/heci-hid-client.c | 105 ++++++++++++++++++++++++++++++------
 drivers/misc/heci/heci_dev.h        |  14 +++--
 drivers/misc/heci/hw-ish-regs.h     |  34 ++++++++----
 drivers/misc/heci/hw-ish.c          |  65 ++++++++++++++++++++--
 drivers/misc/heci/init.c            |   2 +-
 drivers/misc/heci/platform-config.h |   2 +-
 7 files changed, 193 insertions(+), 34 deletions(-)

diff --git a/drivers/misc/heci/heci-api.c b/drivers/misc/heci/heci-api.c
index 4c2f9a8..a056202 100644
--- a/drivers/misc/heci/heci-api.c
+++ b/drivers/misc/heci/heci-api.c
@@ -483,6 +483,11 @@ static long heci_ioctl(struct file *file, unsigned int cmd, unsigned long data)
 	dev = cl->dev;
 	dev_dbg(&dev->pdev->dev, "IOCTL cmd = 0x%x", cmd);
 
+	/* Test API for triggering PCI reset */
+	if (cmd == 0x12341234) {
+		return	heci_hw_reset(dev);
+	}
+
 	/* Test API for triggering host-initiated IPC reset to ISS */
 	if (cmd == 0x12345678) {
 		ISH_DBG_PRINT(KERN_ALERT "%s(): ISS FW reset is requested\n",
diff --git a/drivers/misc/heci/heci-hid-client.c b/drivers/misc/heci/heci-hid-client.c
index 2febee3..85622c5 100644
--- a/drivers/misc/heci/heci-hid-client.c
+++ b/drivers/misc/heci/heci-hid-client.c
@@ -55,12 +55,36 @@ struct hid_device	*hid_sensor_hubs[MAX_HID_DEVICES];
 
 static wait_queue_head_t	init_wait;
 wait_queue_head_t	heci_hid_wait;
+static unsigned	bad_recv_cnt;
+static int	multi_packet_cnt;
 
 /*flush notification*/
 void (*flush_cb)(void);
+static int	init_done;
+
+
+static void	report_bad_packet(void *recv_buf, size_t cur_pos, size_t payload_len)
+{
+	struct hostif_msg	*recv_msg = recv_buf;
+
+	dev_err(&hid_heci_cl->device->dev, "[hid-ish]: BAD packet %02X\n",
+		recv_msg->hdr.command);
+	dev_err(&hid_heci_cl->device->dev, "total_bad=%u cur_pos=%u\n",
+		bad_recv_cnt, cur_pos);
+	dev_err(&hid_heci_cl->device->dev, "[%02X %02X %02X %02X]\n",
+		((unsigned char*)recv_msg)[0], ((unsigned char*)recv_msg)[1],
+		((unsigned char*)recv_msg)[2], ((unsigned char*)recv_msg)[3]);
+	dev_err(&hid_heci_cl->device->dev, "[hid-ish]: payload_len=%u\n",
+		payload_len);
+	dev_err(&hid_heci_cl->device->dev, "[hid-ish]: multi_packet_cnt=%u\n",
+		multi_packet_cnt);
+	dev_err(&hid_heci_cl->device->dev, "[hid-ish]: is_response=%02X\n",
+		recv_msg->hdr.command & ~CMD_MASK);
+}
+
 
 /* HECI client driver structures and API for bus interface */
-void	process_recv(void *recv_buf, size_t data_len)
+static void	process_recv(void *recv_buf, size_t data_len)
 {
 	struct hostif_msg	*recv_msg;
 	unsigned char	*payload;
@@ -78,10 +102,14 @@ void	process_recv(void *recv_buf, size_t data_len)
 		(unsigned)data_len);
 
 	if (data_len < sizeof(struct hostif_msg_hdr)) {
-		dev_err(NULL, "[hid-ish]: error, received %u which is ",
+		dev_err(&hid_heci_cl->device->dev,
+			"[hid-ish]: error, received %u which is ",
 			(unsigned)data_len);
-		dev_err(NULL, " less than data header %u\n",
+		dev_err(&hid_heci_cl->device->dev,
+			" less than data header %u\n",
 			(unsigned)sizeof(struct hostif_msg_hdr));
+		++bad_recv_cnt;
+		heci_hw_reset(hid_heci_cl->dev);
 		return;
 	}
 
@@ -95,14 +123,35 @@ void	process_recv(void *recv_buf, size_t data_len)
 		recv_msg = (struct hostif_msg *)(recv_buf + cur_pos);
 		payload_len = recv_msg->hdr.size;
 
+		/* Sanity checks */
+		if (cur_pos + payload_len + sizeof(struct hostif_msg) >
+				total_len) {
+			++bad_recv_cnt;
+			report_bad_packet(recv_msg, cur_pos, payload_len);
+			heci_hw_reset(hid_heci_cl->dev);
+			break;
+		}
+
+
 		switch (recv_msg->hdr.command & CMD_MASK) {
 		default:
+			++bad_recv_cnt;
+			report_bad_packet(recv_msg, cur_pos, payload_len);
+			heci_hw_reset(hid_heci_cl->dev);
 			break;
 
 		case HOSTIF_DM_ENUM_DEVICES:
 			ISH_DBG_PRINT(KERN_ALERT
-				"[hid-ish]: %s(): received HOSTIF_DM_ENUM_DEVICES\n",
-				__func__);
+				"[hid-ish]: %s(): HOSTIF_DM_ENUM_DEVICES [cur_pos=%u] [%02X %02X %02X %02X]\n",
+				__func__, cur_pos, ((unsigned char*)recv_msg)[0], ((unsigned char*)recv_msg)[1], ((unsigned char*)recv_msg)[2], ((unsigned char*)recv_msg)[3]);
+			if ((!(recv_msg->hdr.command & ~CMD_MASK) ||
+					init_done)) {
+				++bad_recv_cnt;
+				report_bad_packet(recv_msg, cur_pos,
+					payload_len);
+				heci_hw_reset(hid_heci_cl->dev);
+				break;
+			}
 			hid_dev_count = (unsigned)*payload;
 			ISH_DBG_PRINT(KERN_ALERT
 				"[hid-ish]: %s(): hid_dev_count=%d\n",
@@ -116,13 +165,16 @@ void	process_recv(void *recv_buf, size_t data_len)
 			for (i = 0; i < hid_dev_count; ++i) {
 				if (1 + sizeof(struct device_info) * i >=
 						payload_len) {
-					dev_err(NULL,
+					dev_err(&hid_heci_cl->device->dev,
 						"[hid-ish]: [ENUM_DEVICES]:");
-					dev_err(NULL, " content size %lu ", 1 +
+					dev_err(&hid_heci_cl->device->dev,
+						" content size %lu ", 1 +
 						sizeof(struct device_info) *
 						i);
-					dev_err(NULL, "is bigger than ");
-					dev_err(NULL, "payload_len %u\n",
+					dev_err(&hid_heci_cl->device->dev,
+						"is bigger than ");
+					dev_err(&hid_heci_cl->device->dev,
+						"payload_len %u\n",
 						(unsigned)payload_len);
 				}
 
@@ -150,11 +202,19 @@ void	process_recv(void *recv_buf, size_t data_len)
 
 		case HOSTIF_GET_HID_DESCRIPTOR:
 			ISH_DBG_PRINT(KERN_ALERT
-				"[hid-ish]: %s(): received HOSTIF_GET_HID_DESCRIPTOR\n",
-				__func__);
+				"[hid-ish]: %s(): received HOSTIF_GET_HID_DESCRIPTOR [cur_pos=%u] [%02X %02X %02X %02X]\n",
+				__func__, cur_pos, ((unsigned char*)recv_msg)[0], ((unsigned char*)recv_msg)[1], ((unsigned char*)recv_msg)[2], ((unsigned char*)recv_msg)[3]);
 			ISH_DBG_PRINT(KERN_ALERT
 				"[hid-ish]: %s(): dump HID descriptor\n",
 				__func__);
+			if ((!(recv_msg->hdr.command & ~CMD_MASK) ||
+					init_done)) {
+				++bad_recv_cnt;
+				report_bad_packet(recv_msg, cur_pos,
+					payload_len);
+				heci_hw_reset(hid_heci_cl->dev);
+				break;
+			}
 			for (i = 0; i < payload_len; ++i)
 				ISH_DBG_PRINT(KERN_ALERT "%02X ", payload[i]);
 			ISH_DBG_PRINT(KERN_ALERT "\n");
@@ -173,11 +233,19 @@ void	process_recv(void *recv_buf, size_t data_len)
 
 		case HOSTIF_GET_REPORT_DESCRIPTOR:
 			ISH_DBG_PRINT(KERN_ALERT
-				"[hid-ish]: %s(): received HOSTIF_GET_REPORT_DESCRIPTOR\n",
-				__func__);
+				"[hid-ish]: %s(): received HOSTIF_GET_REPORT_DESCRIPTOR [cur_pos=%u] [%02X %02X %02X %02X]\n",
+				__func__, cur_pos, ((unsigned char*)recv_msg)[0], ((unsigned char*)recv_msg)[1], ((unsigned char*)recv_msg)[2], ((unsigned char*)recv_msg)[3]);
 			ISH_DBG_PRINT(KERN_ALERT
 				"[hid-ish]: %s(): Length of report descriptor is %u\n",
 				__func__, (unsigned)payload_len);
+			if ((!(recv_msg->hdr.command & ~CMD_MASK) ||
+					init_done)) {
+				++bad_recv_cnt;
+				report_bad_packet(recv_msg, cur_pos,
+					payload_len);
+				heci_hw_reset(hid_heci_cl->dev);
+				break;
+			}
 			report_descr[cur_hid_dev] = kmalloc(payload_len,
 				GFP_KERNEL);
 			if (report_descr[cur_hid_dev])
@@ -314,6 +382,10 @@ do_get_report:
 
 		}
 
+		if (!cur_pos && cur_pos + payload_len +
+				sizeof(struct hostif_msg) < total_len)
+			++multi_packet_cnt;
+
 		cur_pos += payload_len + sizeof(struct hostif_msg);
 		payload += payload_len + sizeof(struct hostif_msg);
 
@@ -500,9 +572,6 @@ struct heci_cl_driver	hid_heci_cl_driver = {
 
 /****************************************************************/
 
-
-
-
 void workqueue_init_function(struct work_struct *work)
 {
 	int	rv;
@@ -513,6 +582,7 @@ void workqueue_init_function(struct work_struct *work)
 	struct heci_device	*dev;
 	int	retry_count;
 
+	init_done = 0;
 	ISH_DBG_PRINT(KERN_ALERT
 		"[ish client driver] %s() in workqueue func, continue initialization process\n",
 		__func__);
@@ -700,13 +770,14 @@ void workqueue_init_function(struct work_struct *work)
 		__func__);
 
 ret:
-
 	ISH_DBG_PRINT(KERN_ALERT
 		"[hid-ish] %s() :in ret label --- returning %d\n", __func__,
 		rv);
+	init_done = 1;
 }
 /****************************************************************/
 
+
 static int __init ish_init(void)
 {
 	int	rv;
diff --git a/drivers/misc/heci/heci_dev.h b/drivers/misc/heci/heci_dev.h
index 3e6699f..bc857c5 100644
--- a/drivers/misc/heci/heci_dev.h
+++ b/drivers/misc/heci/heci_dev.h
@@ -127,7 +127,8 @@ struct wr_msg_ctl_info {
 struct heci_hw_ops {
 	bool (*host_is_ready)(struct heci_device *dev);
 	bool (*hw_is_ready)(struct heci_device *dev);
-	int (*hw_reset)(struct heci_device *dev, bool enable);
+	int (*hw_reset)(struct heci_device *dev);
+	int (*ipc_reset)(struct heci_device *dev);
 	int (*hw_start)(struct heci_device *dev);
 	void (*hw_config)(struct heci_device *dev);
 	int (*write)(struct heci_device *dev, struct heci_msg_hdr *hdr,
@@ -292,9 +293,15 @@ static inline void heci_hw_config(struct heci_device *dev)
 {
 	dev->ops->hw_config(dev);
 }
-static inline int heci_hw_reset(struct heci_device *dev, bool enable)
+
+static inline int heci_ipc_reset(struct heci_device *dev)
 {
-	return dev->ops->hw_reset(dev, enable);
+	return dev->ops->ipc_reset(dev);
+}
+
+static inline int heci_hw_reset(struct heci_device *dev)
+{
+	return dev->ops->hw_reset(dev);
 }
 
 static inline int heci_hw_start(struct heci_device *dev)
@@ -306,6 +313,7 @@ static inline bool heci_host_is_ready(struct heci_device *dev)
 {
 	return dev->ops->host_is_ready(dev);
 }
+
 static inline bool heci_hw_is_ready(struct heci_device *dev)
 {
 	return dev->ops->hw_is_ready(dev);
diff --git a/drivers/misc/heci/hw-ish-regs.h b/drivers/misc/heci/hw-ish-regs.h
index e67fd44..9d3db55 100644
--- a/drivers/misc/heci/hw-ish-regs.h
+++ b/drivers/misc/heci/hw-ish-regs.h
@@ -66,13 +66,12 @@
 ISS FW may not write to them */
 #define	IPC_HOST_OWNS_MSG_BIT		(1<<IPC_HOST_OWNS_MSG_OFFS)
 
+/*
+ * Host status bits (HOSTCOMM)
+ */
 /* bit corresponds host ready bit in Host Status Register (HOST_COMM) */
-#define IPC_HOST_READY_OFFS		(7)
-#define IPC_HOST_READY_BIT		(1<<IPC_HOST_READY_OFFS)
-
-/* bit corresponds host ready bit in ISS FW Status Register */
-#define IPC_ISH_READY_OFFS              (1)
-#define IPC_ISH_READY_BIT               (1<<IPC_ISH_READY_OFFS)
+#define IPC_HOSTCOMM_READY_OFFS		(7)
+#define IPC_HOSTCOMM_READY_BIT		(1<<IPC_HOSTCOMM_READY_OFFS)
 
 #define	IPC_HOSTCOMM_INT_EN_OFFS	(31)
 #define	IPC_HOSTCOMM_INT_EN_BIT		(1<<IPC_HOSTCOMM_INT_EN_OFFS)
@@ -84,6 +83,23 @@ ISS FW may not write to them */
 #define IPC_ILUP_OFFS			(0)
 #define IPC_ILUP_BIT			(1<<IPC_ILUP_OFFS)
 
+/*
+ * FW status bits (relevant)
+ */ 
+#define	IPC_FWSTS_ILUP		0x1
+#define	IPC_FWSTS_HECI_UP	(1<<1)
+#define	IPC_FWSTS_DMA0		(1<<16)
+#define	IPC_FWSTS_DMA1		(1<<17)
+#define	IPC_FWSTS_DMA2		(1<<18)
+#define	IPC_FWSTS_DMA3		(1<<19)
+
+#define	IPC_ISH_IN_DMA		\
+	(IPC_FWSTS_DMA0 | IPC_FWSTS_DMA1 | IPC_FWSTS_DMA2 | IPC_FWSTS_DMA3)
+
+/* bit corresponds host ready bit in ISS FW Status Register */
+#define IPC_ISH_HECI_READY_OFFS              (1)
+#define IPC_ISH_HECI_READY_BIT               (1<<IPC_ISH_HECI_READY_OFFS)
+
 #define	IPC_RMP2_DMA_ENABLED	0x1	/* Value to enable DMA, per D3 RCR */
 
 #define IPC_MSG_MAX_SIZE	0x80
@@ -124,13 +140,13 @@ ISS FW may not write to them */
 
 
 #define IPC_SET_HOST_READY(host_status)		\
-				((host_status) |= (IPC_HOST_READY_BIT))
+				((host_status) |= (IPC_HOSTCOMM_READY_BIT))
 
 #define IPC_SET_HOST_ILUP(host_status)		\
 				((host_status) |= (IPC_ILUP_BIT))
 
 #define IPC_CLEAR_HOST_READY(host_status)	\
-				((host_status) ^= (IPC_HOST_READY_BIT))
+				((host_status) ^= (IPC_HOSTCOMM_READY_BIT))
 
 #define IPC_CLEAR_HOST_ILUP(host_status)	\
 				((host_status) ^= (IPC_ILUP_BIT))
@@ -149,7 +165,7 @@ ISS FW may not write to them */
 
 
 #define IPC_IS_ISH_HECI_READY(ish_status)       \
-		(((ish_status)&IPC_ISH_READY_BIT) == ((u32)IPC_ISH_READY_BIT))
+		(((ish_status)&IPC_ISH_HECI_READY_BIT) == ((u32)IPC_ISH_HECI_READY_BIT))
 
 #define IPC_IS_ISH_ILUP(ish_status)		\
 			(((ish_status)&IPC_ILUP_BIT) == ((u32)IPC_ILUP_BIT))
diff --git a/drivers/misc/heci/hw-ish.c b/drivers/misc/heci/hw-ish.c
index 6d43787..3bb9799 100644
--- a/drivers/misc/heci/hw-ish.c
+++ b/drivers/misc/heci/hw-ish.c
@@ -730,13 +730,71 @@ void ish_clr_host_rdy(struct heci_device *dev)
 		host_status);
 }
 
+
+static int ish_hw_reset(struct heci_device *dev)
+{
+	struct pci_dev *pdev = dev->pdev;
+	struct ish_hw *hw = to_ish_hw(dev);
+	int	rv;
+	u16 csr;
+
+#define	MAX_DMA_DELAY	20
+	unsigned	dma_delay;
+
+	if (!pdev)
+		return	-ENODEV;
+
+	rv = pci_reset_function(pdev);
+	if (!rv)
+		dev->dev_state = HECI_DEV_RESETTING;
+
+	if (!pdev->pm_cap) {
+		dev_err(&pdev->dev, "Can't reset - no PM caps\n");
+		return	-EINVAL;
+	}
+
+	/* Now trigger reset to FW */
+	writel(0, hw->mem_addr + IPC_REG_ISH_RMP2);
+
+	for (dma_delay = 0; dma_delay < MAX_DMA_DELAY &&
+		ish_reg_read(dev, IPC_REG_ISH_HOST_FWSTS) & (IPC_ISH_IN_DMA);
+		dma_delay += 5);
+			mdelay(5);
+
+	if (dma_delay >= MAX_DMA_DELAY) {
+		dev_err(&pdev->dev,
+			"Can't reset - stuck with DMA in-progress\n");
+		return	-EBUSY;
+	}
+
+	pci_read_config_word(pdev, pdev->pm_cap + PCI_PM_CTRL, &csr);
+
+	csr &= ~PCI_PM_CTRL_STATE_MASK;
+	csr |= PCI_D3hot;
+	pci_write_config_word(pdev, pdev->pm_cap + PCI_PM_CTRL, csr);
+
+	mdelay(pdev->d3_delay);
+
+	csr &= ~PCI_PM_CTRL_STATE_MASK;
+	csr |= PCI_D0;
+	pci_write_config_word(pdev, pdev->pm_cap + PCI_PM_CTRL, csr);
+
+	writel(IPC_RMP2_DMA_ENABLED, hw->mem_addr + IPC_REG_ISH_RMP2);
+
+	/* Send 0 IPC message so that ISS FW wakes up if it was already
+	 asleep */
+	writel(IPC_DRBL_BUSY_BIT, hw->mem_addr + IPC_REG_HOST2ISH_DRBL);
+
+	return	0;
+}
+
+
 /**
- * ish_hw_reset - resets host and fw.
+ * ish_ipc_reset - resets host and fw IPC and upper layers.
  *
  * @dev: the device structure
- * @intr_enable: if interrupt should be enabled after reset.
  */
-static int ish_hw_reset(struct heci_device *dev, bool intr_enable)
+static int ish_ipc_reset(struct heci_device *dev)
 {
 	struct ipc_rst_payload_type ipc_mng_msg;
 	int	rv = 0;
@@ -861,6 +919,7 @@ static const struct heci_hw_ops ish_hw_ops = {
 	.host_is_ready = ish_host_is_ready,
 	.hw_is_ready = ish_hw_is_ready,
 	.hw_reset = ish_hw_reset,
+	.ipc_reset = ish_ipc_reset,
 	.hw_config = ish_hw_config,
 	.hw_start = ish_hw_start,
 	.read = ish_read,
diff --git a/drivers/misc/heci/init.c b/drivers/misc/heci/init.c
index bacee06..39336b9 100644
--- a/drivers/misc/heci/init.c
+++ b/drivers/misc/heci/init.c
@@ -197,7 +197,7 @@ void heci_reset(struct heci_device *dev, int interrupts_enabled)
 			dev->dev_state != HECI_DEV_POWER_DOWN &&
 			dev->dev_state != HECI_DEV_POWER_UP);
 
-	ret = heci_hw_reset(dev, interrupts_enabled);
+	ret = heci_hw_reset(dev);
 	if (ret) {
 		dev_err(&dev->pdev->dev, "hw reset failed disabling the device\n");
 		interrupts_enabled = false;
diff --git a/drivers/misc/heci/platform-config.h b/drivers/misc/heci/platform-config.h
index 24e7308..933b8c7 100644
--- a/drivers/misc/heci/platform-config.h
+++ b/drivers/misc/heci/platform-config.h
@@ -17,7 +17,7 @@
 #define PLATFORM_CONFIG__H
 
 /* Build ID string */
-#define	BUILD_ID	"0181-fix-wake-irq"
+#define	BUILD_ID	"0195-fix-recv-hid-hw-reset"
 
 #define	ISH_DEBUG	0
 #if ISH_DEBUG
-- 
1.9.1

