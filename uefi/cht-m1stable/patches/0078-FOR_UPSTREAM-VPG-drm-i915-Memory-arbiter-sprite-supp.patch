From 02521784c6190d17d98eb800df2ece8de6cfc8ef Mon Sep 17 00:00:00 2001
Message-Id: <02521784c6190d17d98eb800df2ece8de6cfc8ef.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Fri, 4 Jul 2014 22:28:07 +0530
Subject: [PATCH 078/312] FOR_UPSTREAM [VPG]: drm/i915: Memory arbiter sprite
 support

Changes for checking if sprite/primary/plane/cursor is enabled.
Added support to compute drain latency when Primary plane/sprite/cursor is
enabled. Added support to compute drain latency for sprite.

Issue: APDEV-1158
OTC-Tracker: VIZ-3515
Change-Id: I0b06677daafc0b5ef9a5ca8bd9b1fba9ae6b0384
Signed-off-by: vkannan <vandana.kannan@intel.com>
Signed-off-by: Pallavi <pallavi.g@intel.com>
Tested-by: Shirakanahalli, Ravikumar <ravikumar.shirakanahalli@intel.com>
Reviewed-on: http://android.intel.com:8080/109736
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Wood, Brian J <brian.j.wood@intel.com>
Reviewed-by: Stimson, Dale B <dale.b.stimson@intel.com>
Tested-by: Stimson, Dale B <dale.b.stimson@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Signed-off-by: A.Sunil Kamath <sunil.kamath@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h      |    5 +
 drivers/gpu/drm/i915/intel_display.c |   42 +++++++
 drivers/gpu/drm/i915/intel_drv.h     |   18 +++
 drivers/gpu/drm/i915/intel_pm.c      |  212 +++++++++++++++++++++++++++-------
 4 files changed, 234 insertions(+), 43 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 98565d3..5735ad2 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4025,6 +4025,8 @@ enum punit_power_well {
 #define   MCURSOR_PIPE_B	(1 << 28)
 #define   MCURSOR_GAMMA_ENABLE  (1 << 26)
 #define   CURSOR_TRICKLE_FEED_DISABLE	(1 << 14)
+#define   CUR_MODE_SEL_BIT	(1 << 5)
+#define   CUR_ENABLE		7
 #define _CURABASE		0x70084
 #define _CURAPOS		0x70088
 #define   CURSOR_POS_MASK       0x007FF
@@ -4358,6 +4360,9 @@ enum punit_power_well {
 #define _SPBGAMC		(VLV_DISPLAY_BASE + 0x722f4)
 #define VLV_NUM_SPRITES		2
 
+#define _SPCCNTR		(VLV_DISPLAY_BASE + 0x72380)
+#define _SPDCNTR		(VLV_DISPLAY_BASE + 0x72480)
+
 #define SPCNTR(pipe, plane) _PIPE(pipe * 2 + plane, _SPACNTR, _SPBCNTR)
 #define SPLINOFF(pipe, plane) _PIPE(pipe * 2 + plane, _SPALINOFF, _SPBLINOFF)
 #define SPSTRIDE(pipe, plane) _PIPE(pipe * 2 + plane, _SPASTRIDE, _SPBSTRIDE)
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 8cb44cc..b58dfe9 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -1133,6 +1133,48 @@ static void assert_dsi_pll(struct drm_i915_private *dev_priv, bool state)
 #define assert_dsi_pll_enabled(d) assert_dsi_pll(d, true)
 #define assert_dsi_pll_disabled(d) assert_dsi_pll(d, false)
 
+bool is_plane_enabled(struct drm_i915_private *dev_priv,
+			enum plane plane)
+{
+	int reg;
+	u32 val;
+
+	reg = DSPCNTR(plane);
+	val = I915_READ(reg);
+	return val & DISPLAY_PLANE_ENABLE;
+}
+
+bool is_sprite_enabled(struct drm_i915_private *dev_priv,
+			enum pipe pipe, enum plane plane)
+{
+	int reg;
+	u32 val;
+
+	reg = SPCNTR(pipe, plane);
+	val = I915_READ(reg);
+	return val & SP_ENABLE;
+}
+
+bool is_cursor_enabled(struct drm_i915_private *dev_priv,
+			enum pipe pipe)
+{
+	int reg;
+	bool ret = false;
+	u32 val;
+
+	reg = CURCNTR(pipe);
+	val = I915_READ(reg);
+
+	/* check bit 5 of cursor control register.
+	if bit 5 is 1, then cursor enabled */
+	ret = val & CUR_MODE_SEL_BIT;
+	/* if bit 5 is 0, check if bit 2:0 are all zeroes */
+	if (false == ret)
+		ret = val & CUR_ENABLE;
+
+	return ret;
+}
+
 struct intel_shared_dpll *
 intel_crtc_to_shared_dpll(struct intel_crtc *crtc)
 {
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 4ef86c2..9cec89c 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -476,6 +476,18 @@ struct intel_plane {
 	u32 (*current_surface)(struct drm_plane *plane);
 };
 
+struct vlv_MA_component_enabled {
+	union {
+		u8 component;
+		struct {
+			u8 EnPlane:1;
+			u8 EnSprite:1;
+			u8 EnCursor:1;
+			u8 reserved:5;
+		};
+	};
+};
+
 struct intel_watermark_params {
 	unsigned long fifo_size;
 	unsigned long max_wm;
@@ -1043,5 +1055,11 @@ void intel_tv_init(struct drm_device *dev);
 /* VLV LP clock bending */
 extern void valleyview_program_clock_bending(struct drm_i915_private *dev_priv,
 		struct intel_program_clock_bending *clockbendargs);
+bool is_plane_enabled(struct drm_i915_private *dev_priv,
+			enum plane plane);
+bool is_sprite_enabled(struct drm_i915_private *dev_priv,
+			enum pipe pipe, enum plane plane);
+bool is_cursor_enabled(struct drm_i915_private *dev_priv,
+			enum pipe pipe);
 
 #endif /* __INTEL_DRV_H__ */
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 3ff65cb..6b7a108 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -1377,35 +1377,55 @@ static bool g4x_compute_srwm(struct drm_device *dev,
 }
 
 static bool vlv_compute_drain_latency(struct drm_device *dev,
-				     int plane,
-				     int *plane_prec_mult,
-				     int *plane_dl,
-				     int *cursor_prec_mult,
-				     int *cursor_dl)
+				int plane,
+				int *plane_prec_mult,
+				int *plane_dl,
+				int *cursor_prec_mult,
+				int *cursor_dl,
+				int *sprite_prec_mult, int *sprite_dl,
+				int sprite_pixel_size,
+				struct vlv_MA_component_enabled enable)
 {
 	struct drm_crtc *crtc;
 	int clock, pixel_size;
 	int entries;
+	bool latencyprogrammed = false;
 
 	crtc = intel_get_crtc_for_plane(dev, plane);
 	if (!intel_crtc_active(crtc))
 		return false;
 
 	clock = to_intel_crtc(crtc)->config.adjusted_mode.crtc_clock;
-	pixel_size = crtc->primary->fb->bits_per_pixel / 8;	/* BPP */
+	if (enable.EnPlane) {
+		pixel_size =
+			crtc->primary->fb->bits_per_pixel / 8;	/* BPP */
 
-	entries = (clock / 1000) * pixel_size;
-	*plane_prec_mult = (entries > 256) ?
-		DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
-	*plane_dl = (64 * (*plane_prec_mult) * 4) / ((clock / 1000) *
-						     pixel_size);
+		entries = (clock / 1000) * pixel_size;
+		*plane_prec_mult = (entries > 256) ?
+			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
+		*plane_dl = (64 * (*plane_prec_mult) * 4) / ((clock / 1000) *
+				pixel_size);
+		latencyprogrammed = true;
+	}
 
-	entries = (clock / 1000) * 4;	/* BPP is always 4 for cursor */
-	*cursor_prec_mult = (entries > 256) ?
-		DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
-	*cursor_dl = (64 * (*cursor_prec_mult) * 4) / ((clock / 1000) * 4);
+	if (enable.EnCursor) {
+		entries = (clock / 1000) * 4;	/* BPP is always 4 for cursor */
+		*cursor_prec_mult = (entries > 256) ?
+			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
+		*cursor_dl = (64 * (*cursor_prec_mult) * 4) / ((clock / 1000) *
+							4);
+		latencyprogrammed = true;
+	}
+	if (enable.EnSprite) {
+		entries = (clock / 1000) * sprite_pixel_size;
+		*sprite_prec_mult = (entries > 256) ?
+			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
+		*sprite_dl = (64 * (*sprite_prec_mult) * 4) / ((clock / 1000) *
+						sprite_pixel_size);
+		latencyprogrammed = true;
+	}
 
-	return true;
+	return latencyprogrammed;
 }
 
 /*
@@ -1419,35 +1439,62 @@ static bool vlv_compute_drain_latency(struct drm_device *dev,
 static void vlv_update_drain_latency(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	int planea_prec, planea_dl, planeb_prec, planeb_dl;
-	int cursora_prec, cursora_dl, cursorb_prec, cursorb_dl;
-	int plane_prec_mult, cursor_prec_mult; /* Precision multiplier is
-							either 64 or 32 */
+	int planea_prec = 0, planea_dl = 0, planeb_prec = 0, planeb_dl = 0;
+	int cursora_prec = 0, cursora_dl = 0, cursorb_prec = 0, cursorb_dl = 0;
+	int plane_prec_mult = 0, cursor_prec_mult = 0;
+	/* Precision multiplier is either 64 or 32 */
+	struct vlv_MA_component_enabled enable;
+	u32 val;
 
-	/* For plane A, Cursor A */
-	if (vlv_compute_drain_latency(dev, 0, &plane_prec_mult, &planea_dl,
-				      &cursor_prec_mult, &cursora_dl)) {
-		cursora_prec = (cursor_prec_mult == DRAIN_LATENCY_PRECISION_32) ?
-			DDL_CURSORA_PRECISION_32 : DDL_CURSORA_PRECISION_64;
-		planea_prec = (plane_prec_mult == DRAIN_LATENCY_PRECISION_32) ?
-			DDL_PLANEA_PRECISION_32 : DDL_PLANEA_PRECISION_64;
 
-		I915_WRITE(VLV_DDL1, cursora_prec |
-				(cursora_dl << DDL_CURSORA_SHIFT) |
-				planea_prec | planea_dl);
+	/* compute & update drain latency only if plane enabled */
+	enable.EnPlane = is_plane_enabled(dev_priv, 0);
+	enable.EnCursor = is_cursor_enabled(dev_priv, 0);
+	enable.EnSprite = false;
+
+	/* For plane A, Cursor A */
+	if (vlv_compute_drain_latency(dev, 0, &plane_prec_mult,
+		&planea_dl, &cursor_prec_mult, &cursora_dl, NULL,
+		NULL, 0, enable)) {
+		cursora_prec = (cursor_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_CURSORA_PRECISION_32 :
+				DDL_CURSORA_PRECISION_64;
+		planea_prec = (plane_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_PLANEA_PRECISION_32 :
+				DDL_PLANEA_PRECISION_64;
+
+		val = I915_READ(VLV_DDL1);
+		I915_WRITE(VLV_DDL1, val | cursora_prec |
+			(cursora_dl << DDL_CURSORA_SHIFT) |
+			planea_prec | planea_dl);
+	} else {
+		I915_WRITE(VLV_DDL1, 0);
 	}
+	enable.EnPlane = is_plane_enabled(dev_priv, 1);
+	enable.EnCursor = is_cursor_enabled(dev_priv, 1);
+	enable.EnSprite = false;
 
 	/* For plane B, Cursor B */
-	if (vlv_compute_drain_latency(dev, 1, &plane_prec_mult, &planeb_dl,
-				      &cursor_prec_mult, &cursorb_dl)) {
-		cursorb_prec = (cursor_prec_mult == DRAIN_LATENCY_PRECISION_32) ?
-			DDL_CURSORB_PRECISION_32 : DDL_CURSORB_PRECISION_64;
-		planeb_prec = (plane_prec_mult == DRAIN_LATENCY_PRECISION_32) ?
-			DDL_PLANEB_PRECISION_32 : DDL_PLANEB_PRECISION_64;
-
-		I915_WRITE(VLV_DDL2, cursorb_prec |
-				(cursorb_dl << DDL_CURSORB_SHIFT) |
-				planeb_prec | planeb_dl);
+	if (vlv_compute_drain_latency(dev, 1, &plane_prec_mult,
+		&planeb_dl, &cursor_prec_mult, &cursorb_dl, NULL,
+		NULL, 0, enable)) {
+		cursorb_prec = (cursor_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_CURSORB_PRECISION_32 :
+				DDL_CURSORB_PRECISION_64;
+		planeb_prec = (plane_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_PLANEB_PRECISION_32 :
+				DDL_PLANEB_PRECISION_64;
+
+		val = I915_READ(VLV_DDL2);
+		I915_WRITE(VLV_DDL2, val | cursorb_prec |
+			(cursorb_dl << DDL_CURSORB_SHIFT) |
+			planeb_prec | planeb_dl);
+	} else {
+		I915_WRITE(VLV_DDL1, 0);
 	}
 }
 
@@ -2991,11 +3038,90 @@ void ilk_wm_get_hw_state(struct drm_device *dev)
 		!(I915_READ(DISP_ARB_CTL) & DISP_FBC_WM_DIS);
 }
 
-static void valleyview_update_sprite_wm(struct drm_device *dev, int pipe,
-					uint32_t sprite_width,
-					int pixel_size)
+static void valleyview_update_sprite_wm(struct drm_plane *plane,
+					struct drm_crtc *crtc,
+					uint32_t sprite_width, int pixel_size,
+					bool enabled, bool scaled)
 {
+	struct drm_device *dev = plane->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	int pipe = to_intel_plane(plane)->pipe;
+	int sprite_prec = 0, sprite_dl = 0;
+	int sprite_prec_mult = 0;
+	struct vlv_MA_component_enabled enable;
+	u32 val;
+
+	/* Sprite A */
+	enable.EnSprite = is_sprite_enabled(dev_priv, 0, 0);
+
+	val = I915_READ(VLV_DDL1);
+	if (vlv_compute_drain_latency(dev, 0, NULL, NULL, NULL, NULL,
+		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
+		sprite_prec = (sprite_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_SPRITEA_PRECISION_32 :
+				DDL_SPRITEA_PRECISION_64;
+
+		I915_WRITE(VLV_DDL1, val |
+			(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
+	} else {
+		I915_WRITE(VLV_DDL1, val &
+			(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
+	}
+
+	/* Sprite B */
+	enable.EnSprite = is_sprite_enabled(dev_priv, 0, 1);
+
+	val = I915_READ(VLV_DDL1);
+	if (vlv_compute_drain_latency(dev, 0, NULL, NULL, NULL, NULL,
+		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
+		sprite_prec = (sprite_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_SPRITEB_PRECISION_32 :
+				DDL_SPRITEB_PRECISION_64;
+
+		I915_WRITE(VLV_DDL1, val |
+			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
+	}  else {
+		I915_WRITE(VLV_DDL1, val &
+			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
+	}
+
+	/* Sprite C */
+	enable.EnSprite = is_sprite_enabled(dev_priv, 1, 0);
+
+	val = I915_READ(VLV_DDL2);
+	if (vlv_compute_drain_latency(dev, 0, NULL, NULL, NULL, NULL,
+		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
+		sprite_prec = (sprite_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_SPRITEA_PRECISION_32 :
+				DDL_SPRITEA_PRECISION_64;
+
+		I915_WRITE(VLV_DDL2, val |
+			(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
+	} else {
+		I915_WRITE(VLV_DDL2, val &
+		(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
+	}
+
+	/* Sprite D */
+	enable.EnSprite = is_sprite_enabled(dev_priv, 1, 1);
+
+	val = I915_READ(VLV_DDL2);
+	if (vlv_compute_drain_latency(dev, 0, NULL, NULL, NULL, NULL,
+		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
+		sprite_prec = (sprite_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_SPRITEB_PRECISION_32 :
+				DDL_SPRITEB_PRECISION_64;
+
+		I915_WRITE(VLV_DDL2, val |
+			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
+	} else {
+		I915_WRITE(VLV_DDL2, val &
+			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
+	}
 
 	I915_WRITE(DSPFW4, (DSPFW4_SPRITEB_VAL << DSPFW4_SPRITEB_SHIFT) |
 			(DSPFW4_CURSORA_VAL << DSPFW4_CURSORA_SHIFT) |
-- 
1.7.9.5

