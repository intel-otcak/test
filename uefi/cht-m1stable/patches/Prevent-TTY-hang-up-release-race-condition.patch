From bba1fd06c55c22c7f20d5617de12fc2bb4a9ddc4 Mon Sep 17 00:00:00 2001
From: Lionel Ulmer <lionel.ulmer@intel.com>
Date: Fri, 12 Jun 2015 16:14:58 +0200
Subject: [PATCH] Prevent TTY hang-up / release race condition

When calling tty_hangup, the actual processing is done in the
'hangup_work' work queue without having taken a reference on
the TTY. This means that the reference count for this TTY may
reach 0 before the work queue has been scheduled (for example
if the user closes the TTY while the hang-up is being
processed at kernel side).

This leads to list corruption issues as the 'release_one_tty'
code uses also the 'hangup_work' queue to do its processing.

Fix the issue by taking a reference on the TTY when queuing the
hangup procedure and release it once finished.

Change-Id: Id9585bf952efa754f175679b118043a98076b839
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-38385
Signed-off-by: Lionel Ulmer <lionel.ulmer@intel.com>
---
 drivers/tty/tty_io.c | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index bbb238998fe1..b86551ccd750 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -608,7 +608,7 @@ static int tty_signal_session_leader(struct tty_struct *tty, int exit_session)
  *		  tasklist_lock to walk task list for hangup event
  *		    ->siglock to protect ->signal/->sighand
  */
-static void __tty_hangup(struct tty_struct *tty, int exit_session)
+static void __tty_hangup(struct tty_struct *tty, int exit_session, int put_tty)
 {
 	struct file *cons_filp = NULL;
 	struct file *filp, *f = NULL;
@@ -631,6 +631,8 @@ static void __tty_hangup(struct tty_struct *tty, int exit_session)
 
 	if (test_bit(TTY_HUPPED, &tty->flags)) {
 		tty_unlock(tty);
+		if (put_tty)
+			tty_kref_put(tty);
 		return;
 	}
 
@@ -702,6 +704,8 @@ static void __tty_hangup(struct tty_struct *tty, int exit_session)
 
 	if (f)
 		fput(f);
+	if (put_tty)
+		tty_kref_put(tty);
 }
 
 static void do_tty_hangup(struct work_struct *work)
@@ -709,7 +713,7 @@ static void do_tty_hangup(struct work_struct *work)
 	struct tty_struct *tty =
 		container_of(work, struct tty_struct, hangup_work);
 
-	__tty_hangup(tty, 0);
+	__tty_hangup(tty, 0, 1);
 }
 
 /**
@@ -726,6 +730,7 @@ void tty_hangup(struct tty_struct *tty)
 	char	buf[64];
 	printk(KERN_DEBUG "%s hangup...\n", tty_name(tty, buf));
 #endif
+	tty_kref_get(tty);
 	schedule_work(&tty->hangup_work);
 }
 
@@ -747,7 +752,7 @@ void tty_vhangup(struct tty_struct *tty)
 
 	printk(KERN_DEBUG "%s vhangup...\n", tty_name(tty, buf));
 #endif
-	__tty_hangup(tty, 0);
+	__tty_hangup(tty, 0, 0);
 }
 
 EXPORT_SYMBOL(tty_vhangup);
@@ -788,7 +793,7 @@ static void tty_vhangup_session(struct tty_struct *tty)
 
 	printk(KERN_DEBUG "%s vhangup session...\n", tty_name(tty, buf));
 #endif
-	__tty_hangup(tty, 1);
+	__tty_hangup(tty, 1, 0);
 }
 
 /**
-- 
1.9.1

