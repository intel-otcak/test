From c45d3130288fa21672e3e9331116ff5d8370d29f Mon Sep 17 00:00:00 2001
From: Tianshu Qiu <tian.shu.qiu@intel.com>
Date: Mon, 2 Mar 2015 15:01:59 +0800
Subject: [PATCH 283/284] atomisp2: Add debug logs for dual camera

Change-Id: Ieb89c80ec1898ba156c46215be32285eaa060fa5
Fix-Issues: #H1503921321
Signed-off-by: Tianshu Qiu <tian.shu.qiu@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/44131
Build: viefandr
Reviewed-by: Jing Tao <jing.tao@intel.com>
Validation-Android: Wei Tao <wei.tao@intel.com>
Integrator: Wei Tao <wei.tao@intel.com>
Approver: Wei Tao <wei.tao@intel.com>
Build: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
Maintainer: Wei Tao <wei.tao@intel.com>
---
 .../drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c | 10 +++++-----
 .../media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c       | 13 ++++++++++---
 2 files changed, 15 insertions(+), 8 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index bc1bd2e..17859dc 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -3543,9 +3543,9 @@ int atomisp_set_parameters(struct video_device *vdev,
 		return -EINVAL;
 	}
 
-	dev_dbg(asd->isp->dev, "%s: set parameter(per_frame_setting %d) with isp_config_id %d of %s\n",
-		__func__, arg->per_frame_setting, arg->isp_config_id,
-		vdev->name);
+	dev_dbg(asd->isp->dev, "%s: set parameter(per_frame_setting %d) for asd%d with isp_config_id %d of %s\n",
+		__func__, arg->per_frame_setting, asd->index,
+		arg->isp_config_id, vdev->name);
 	if (arg->per_frame_setting && !atomisp_is_vf_pipe(pipe)) {
 		/*
 		 * Per-frame setting enabled, we allocate a new paramter
@@ -4957,9 +4957,9 @@ int atomisp_set_fmt(struct video_device *vdev, struct v4l2_format *f)
 	int ret;
 
 	dev_dbg(isp->dev,
-		"setting resolution %ux%u on pad %u, bytesperline %u\n",
+		"setting resolution %ux%u on pad %u for asd%d, bytesperline %u\n",
 		f->fmt.pix.width, f->fmt.pix.height, source_pad,
-		f->fmt.pix.bytesperline);
+		asd->index, f->fmt.pix.bytesperline);
 
 	if (asd->streaming == ATOMISP_DEVICE_STREAMING_ENABLED) {
 		dev_warn(isp->dev, "ISP does not support set format while at streaming!\n");
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index a125b9f..f52f76a 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -1376,7 +1376,8 @@ done:
 	}
 	rt_mutex_unlock(&isp->mutex);
 
-	dev_dbg(isp->dev, "qbuf buffer %d (%s)\n", buf->index, vdev->name);
+	dev_dbg(isp->dev, "qbuf buffer %d (%s) for asd%d\n", buf->index,
+		vdev->name, asd->index);
 
 	return ret;
 
@@ -1490,8 +1491,8 @@ static int atomisp_dqbuf(struct file *file, void *fh, struct v4l2_buffer *buf)
 	buf->reserved2 = pipe->frame_config_id[buf->index];
 	rt_mutex_unlock(&isp->mutex);
 
-	dev_dbg(isp->dev, "dqbuf buffer %d (%s) with exp_id %d, isp_config_id %d\n",
-		buf->index, vdev->name, __get_frame_exp_id(pipe, buf),
+	dev_dbg(isp->dev, "dqbuf buffer %d (%s) for asd%d with exp_id %d, isp_config_id %d\n",
+		buf->index, vdev->name, asd->index, __get_frame_exp_id(pipe, buf),
 		buf->reserved2);
 	return 0;
 }
@@ -1662,6 +1663,9 @@ static int atomisp_streamon(struct file *file, void *fh,
 	int ret = 0;
 	unsigned long irqflags;
 
+	dev_dbg(isp->dev, "Start stream on pad %d for asd%d\n",
+		atomisp_subdev_source_pad(vdev), asd->index);
+
 	if (type != V4L2_BUF_TYPE_VIDEO_CAPTURE) {
 		dev_dbg(isp->dev, "unsupported v4l2 buf type\n");
 		return -EINVAL;
@@ -1897,6 +1901,9 @@ int __atomisp_streamoff(struct file *file, void *fh, enum v4l2_buf_type type)
 	unsigned long flags;
 	bool first_streamoff = false;
 
+	dev_dbg(isp->dev, "Stop stream on pad %d for asd%d\n",
+		atomisp_subdev_source_pad(vdev), asd->index);
+
 	BUG_ON(!rt_mutex_is_locked(&isp->mutex));
 	BUG_ON(!mutex_is_locked(&isp->streamoff_mutex));
 
-- 
1.9.1

