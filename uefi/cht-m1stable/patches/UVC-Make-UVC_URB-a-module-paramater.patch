From d9dc3b86470a6520ef2672da185d2631d54feace Mon Sep 17 00:00:00 2001
From: Aviv Greenberg <aviv.d.greenberg@intel.com>
Date: Thu, 7 Apr 2016 14:08:29 -0700
Subject: [PATCH 1/2] UVC: Make UVC_URB a module paramater

On new USB3 based webcams we observe that the number of URBs must to be
increased in order avoid buffer underruns, leading to image tear and
drops.

Since URB mamory is expensive, it is preferrable to have this as a module
parameter rather then just increase the USB_URBS define.

Change-Id: I81284292faad83efd5d00422ad1188f8fecdcd6e
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-29604
Signed-off-by: Aviv Greenberg <aviv.d.greenberg@intel.com>
Reviewed-on: https://android.intel.com:443/496205
---
 drivers/media/usb/uvc/uvc_driver.c |  6 ++++++
 drivers/media/usb/uvc/uvc_video.c  | 16 ++++++++--------
 drivers/media/usb/uvc/uvcvideo.h   | 13 ++++++++-----
 3 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/drivers/media/usb/uvc/uvc_driver.c b/drivers/media/usb/uvc/uvc_driver.c
index 7dbe287..8d4acb4 100644
--- a/drivers/media/usb/uvc/uvc_driver.c
+++ b/drivers/media/usb/uvc/uvc_driver.c
@@ -36,6 +36,7 @@ unsigned int uvc_no_drop_param;
 static unsigned int uvc_quirks_param = -1;
 unsigned int uvc_trace_param;
 unsigned int uvc_timeout_param = UVC_CTRL_STREAMING_TIMEOUT;
+unsigned int uvc_urbs_param = UVC_DEFAULT_URBS;
 
 /* ------------------------------------------------------------------------
  * Video formats
@@ -2087,6 +2088,8 @@ module_param_named(trace, uvc_trace_param, uint, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(trace, "Trace level bitmask");
 module_param_named(timeout, uvc_timeout_param, uint, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(timeout, "Streaming control requests timeout");
+module_param_named(uvc_urbs, uvc_urbs_param, uint, S_IRUGO);
+MODULE_PARM_DESC(uvc_urbs, "Number of URB buffers to allocate");
 
 /* ------------------------------------------------------------------------
  * Driver initialization and cleanup
@@ -2560,6 +2563,9 @@ static int __init uvc_init(void)
 		return ret;
 	}
 
+	if (uvc_urbs_param > UVC_MAX_URBS)
+		uvc_urbs_param = UVC_MAX_URBS;
+
 	printk(KERN_INFO DRIVER_DESC " (" DRIVER_VERSION ")\n");
 	return 0;
 }
diff --git a/drivers/media/usb/uvc/uvc_video.c b/drivers/media/usb/uvc/uvc_video.c
index 4f1cf6f..d719341 100644
--- a/drivers/media/usb/uvc/uvc_video.c
+++ b/drivers/media/usb/uvc/uvc_video.c
@@ -1380,7 +1380,7 @@ static void uvc_free_urb_buffers(struct uvc_streaming *stream)
 {
 	unsigned int i;
 
-	for (i = 0; i < UVC_URBS; ++i) {
+	for (i = 0; i < uvc_urbs_param; ++i) {
 		if (stream->urb_buffer[i]) {
 #ifndef CONFIG_DMA_NONCOHERENT
 			usb_free_coherent(stream->dev->udev, stream->urb_size,
@@ -1425,7 +1425,7 @@ static int uvc_alloc_urb_buffers(struct uvc_streaming *stream,
 
 	/* Retry allocations until one succeed. */
 	for (; npackets > 1; npackets /= 2) {
-		for (i = 0; i < UVC_URBS; ++i) {
+		for (i = 0; i < uvc_urbs_param; ++i) {
 			stream->urb_size = psize * npackets;
 #ifndef CONFIG_DMA_NONCOHERENT
 			stream->urb_buffer[i] = usb_alloc_coherent(
@@ -1441,9 +1441,9 @@ static int uvc_alloc_urb_buffers(struct uvc_streaming *stream,
 			}
 		}
 
-		if (i == UVC_URBS) {
+		if (i == uvc_urbs_param) {
 			uvc_trace(UVC_TRACE_VIDEO, "Allocated %u URB buffers "
-				"of %ux%u bytes each.\n", UVC_URBS, npackets,
+				"of %ux%u bytes each.\n", uvc_urbs_param, npackets,
 				psize);
 			return npackets;
 		}
@@ -1464,7 +1464,7 @@ static void uvc_uninit_video(struct uvc_streaming *stream, int free_buffers)
 
 	uvc_video_stats_stop(stream);
 
-	for (i = 0; i < UVC_URBS; ++i) {
+	for (i = 0; i < uvc_urbs_param; ++i) {
 		urb = stream->urb[i];
 		if (urb == NULL)
 			continue;
@@ -1519,7 +1519,7 @@ static int uvc_init_video_isoc(struct uvc_streaming *stream,
 
 	size = npackets * psize;
 
-	for (i = 0; i < UVC_URBS; ++i) {
+	for (i = 0; i < uvc_urbs_param; ++i) {
 		urb = usb_alloc_urb(npackets, gfp_flags);
 		if (urb == NULL) {
 			uvc_uninit_video(stream, 1);
@@ -1585,7 +1585,7 @@ static int uvc_init_video_bulk(struct uvc_streaming *stream,
 	if (stream->type == V4L2_BUF_TYPE_VIDEO_OUTPUT)
 		size = 0;
 
-	for (i = 0; i < UVC_URBS; ++i) {
+	for (i = 0; i < uvc_urbs_param; ++i) {
 		urb = usb_alloc_urb(0, gfp_flags);
 		if (urb == NULL) {
 			uvc_uninit_video(stream, 1);
@@ -1690,7 +1690,7 @@ static int uvc_init_video(struct uvc_streaming *stream, gfp_t gfp_flags)
 		return ret;
 
 	/* Submit the URBs. */
-	for (i = 0; i < UVC_URBS; ++i) {
+	for (i = 0; i < uvc_urbs_param; ++i) {
 		ret = usb_submit_urb(stream->urb[i], gfp_flags);
 		if (ret < 0) {
 			uvc_printk(KERN_ERR, "Failed to submit URB %u "
diff --git a/drivers/media/usb/uvc/uvcvideo.h b/drivers/media/usb/uvc/uvcvideo.h
index 8c2780f..5dd7cae 100644
--- a/drivers/media/usb/uvc/uvcvideo.h
+++ b/drivers/media/usb/uvc/uvcvideo.h
@@ -132,8 +132,10 @@
 
 #define DRIVER_VERSION		"1.1.1"
 
-/* Number of isochronous URBs. */
-#define UVC_URBS		5
+/* Default Number of isochronous URBs. */
+#define UVC_DEFAULT_URBS	5
+/* Maximum Number of isochronous URBs. */
+#define UVC_MAX_URBS		32
 /* Maximum number of packets per URB. */
 #define UVC_MAX_PACKETS		32
 /* Maximum number of video buffers. */
@@ -489,9 +491,9 @@ struct uvc_streaming {
 		__u32 max_payload_size;
 	} bulk;
 
-	struct urb *urb[UVC_URBS];
-	char *urb_buffer[UVC_URBS];
-	dma_addr_t urb_dma[UVC_URBS];
+	struct urb *urb[UVC_MAX_URBS];
+	char *urb_buffer[UVC_MAX_URBS];
+	dma_addr_t urb_dma[UVC_MAX_URBS];
 	unsigned int urb_size;
 
 	__u32 sequence;
@@ -606,6 +608,7 @@ extern unsigned int uvc_clock_param;
 extern unsigned int uvc_no_drop_param;
 extern unsigned int uvc_trace_param;
 extern unsigned int uvc_timeout_param;
+extern unsigned int uvc_urbs_param;
 
 #define uvc_trace(flag, msg...) \
 	do { \
-- 
1.9.1

