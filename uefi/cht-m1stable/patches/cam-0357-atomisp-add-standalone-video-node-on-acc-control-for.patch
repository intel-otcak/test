From cd9d8b9cb923c600709238ab60e656dec686842e Mon Sep 17 00:00:00 2001
From: "Tao, Jing" <jing.tao@intel.com>
Date: Mon, 12 Jan 2015 18:05:21 +0800
Subject: [PATCH 357/360] atomisp: add standalone video node on acc control for
 each asd

Adding two video nodes for atomisp subdevs respectively.

Change-Id: I5d1ad7d0307611d2e89b92c073b8cea910dd2f70
Tracked-On: #JIMINAN-30614
Signed-off-by: Tao, Jing <jing.tao@intel.com>
Signed-off-by: Tao Wei <wei.tao@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/36783
---
 .../pci/atomisp2/atomisp_driver/atomisp_acc.c      | 11 -----
 .../pci/atomisp2/atomisp_driver/atomisp_acc.h      |  6 ---
 .../pci/atomisp2/atomisp_driver/atomisp_cmd.c      |  9 ++++
 .../pci/atomisp2/atomisp_driver/atomisp_cmd.h      |  1 +
 .../pci/atomisp2/atomisp_driver/atomisp_fops.c     | 54 +++++++++++++++++++---
 .../pci/atomisp2/atomisp_driver/atomisp_ioctl.c    | 10 +++-
 .../pci/atomisp2/atomisp_driver/atomisp_subdev.c   | 19 ++++++++
 .../pci/atomisp2/atomisp_driver/atomisp_subdev.h   |  9 ++++
 .../pci/atomisp2/atomisp_driver/atomisp_v4l2.c     | 34 +++++++++++++-
 .../pci/atomisp2/atomisp_driver/atomisp_v4l2.h     |  5 ++
 10 files changed, 132 insertions(+), 26 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c
index 7083c24..4c35a78 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c
@@ -109,17 +109,6 @@ static int acc_stop_acceleration(struct atomisp_sub_device *asd)
 	return ret;
 }
 
-void atomisp_acc_init(struct atomisp_device *isp)
-{
-	int i;
-
-	for (i = 0; i < isp->num_of_streams; i++) {
-		INIT_LIST_HEAD(&isp->asd[i].acc.fw);
-		INIT_LIST_HEAD(&isp->asd[i].acc.memory_maps);
-		ida_init(&isp->asd[i].acc.ida);
-	}
-}
-
 void atomisp_acc_cleanup(struct atomisp_device *isp)
 {
 	int i;
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h
index ae7d2f8..6a2d1f9 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h
@@ -33,12 +33,6 @@
 
 struct atomisp_sub_device;
 
-/*
- * Initialize acceleration interface.
- * Must be called once when the driver is loaded.
- */
-void atomisp_acc_init(struct atomisp_device *isp);
-
 void atomisp_acc_cleanup(struct atomisp_device *isp);
 
 /*
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index 677daa0..8dd7569 100755
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -146,6 +146,15 @@ struct atomisp_video_pipe *atomisp_to_video_pipe(struct video_device *dev)
 	    container_of(dev, struct atomisp_video_pipe, vdev);
 }
 
+/*
+ * get struct atomisp_acc_pipe from v4l2 video_device
+ */
+struct atomisp_acc_pipe *atomisp_to_acc_pipe(struct video_device *dev)
+{
+	return (struct atomisp_acc_pipe *)
+	    container_of(dev, struct atomisp_acc_pipe, vdev);
+}
+
 static unsigned short atomisp_get_sensor_fps(struct atomisp_sub_device *asd)
 {
 	struct v4l2_subdev_frame_interval frame_interval;
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h
index 1644da6..2218e7b 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h
@@ -56,6 +56,7 @@ void dump_sp_dmem(struct atomisp_device *isp, unsigned int addr,
 		  unsigned int size);
 struct camera_mipi_info *atomisp_to_sensor_mipi_info(struct v4l2_subdev *sd);
 struct atomisp_video_pipe *atomisp_to_video_pipe(struct video_device *dev);
+struct atomisp_acc_pipe *atomisp_to_acc_pipe(struct video_device *dev);
 int atomisp_reset(struct atomisp_device *isp);
 void atomisp_flush_bufs_and_wakeup(struct atomisp_sub_device *asd);
 void atomisp_clear_css_buffer_counters(struct atomisp_sub_device *asd);
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c
index ad314c4..2bab06d 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c
@@ -744,6 +744,7 @@ unsigned int atomisp_subdev_users(struct atomisp_sub_device *asd)
 	       asd->video_out_vf.users +
 	       asd->video_out_capture.users +
 	       asd->video_out_video_capture.users +
+	       asd->video_acc.users +
 	       asd->video_in.users;
 }
 
@@ -760,14 +761,26 @@ static int atomisp_open(struct file *file)
 {
 	struct video_device *vdev = video_devdata(file);
 	struct atomisp_device *isp = video_get_drvdata(vdev);
-	struct atomisp_video_pipe *pipe = atomisp_to_video_pipe(vdev);
-	struct atomisp_sub_device *asd = pipe->asd;
+	struct atomisp_video_pipe *pipe;
+	struct atomisp_acc_pipe *acc_pipe;
+	struct atomisp_sub_device *asd;
+	bool acc_node;
 	int ret;
 
 	dev_dbg(isp->dev, "open device %s\n", vdev->name);
 
 	rt_mutex_lock(&isp->mutex);
 
+	acc_node = !strncmp(vdev->name, "ATOMISP ISP ACC",
+			sizeof(vdev->name));
+	if (acc_node) {
+		acc_pipe = atomisp_to_acc_pipe(vdev);
+		asd = acc_pipe->asd;
+	} else {
+		pipe = atomisp_to_video_pipe(vdev);
+		asd = pipe->asd;
+	}
+
 	/* Deferred firmware loading case. */
 	if (isp->css_env.isp_css_fw.bytes == 0) {
 		isp->firmware = atomisp_load_firmware(isp);
@@ -787,6 +800,14 @@ static int atomisp_open(struct file *file)
 		isp->css_env.isp_css_fw.data = NULL;
 	}
 
+	if (acc_node && acc_pipe->users) {
+		dev_dbg(isp->dev, "acc node already opened\n");
+		rt_mutex_unlock(&isp->mutex);
+		return -EBUSY;
+	} else if (acc_node) {
+		goto dev_init;
+	}
+
 	if (!isp->input_cnt) {
 		dev_err(isp->dev, "no camera attached\n");
 		ret = -EINVAL;
@@ -806,7 +827,7 @@ static int atomisp_open(struct file *file)
 	if (ret)
 		goto error;
 
-
+dev_init:
 	if (atomisp_dev_users(isp)) {
 		dev_dbg(isp->dev, "skip init isp in open\n");
 		goto init_subdev;
@@ -847,7 +868,11 @@ init_subdev:
 	atomisp_subdev_init_struct(asd);
 
 done:
-	pipe->users++;
+
+	if (acc_node)
+		acc_pipe->users++;
+	else
+		pipe->users++;
 	rt_mutex_unlock(&isp->mutex);
 	return 0;
 
@@ -864,8 +889,10 @@ static int atomisp_release(struct file *file)
 {
 	struct video_device *vdev = video_devdata(file);
 	struct atomisp_device *isp = video_get_drvdata(vdev);
-	struct atomisp_video_pipe *pipe = atomisp_to_video_pipe(vdev);
-	struct atomisp_sub_device *asd = pipe->asd;
+	struct atomisp_video_pipe *pipe;
+	struct atomisp_acc_pipe *acc_pipe;
+	struct atomisp_sub_device *asd;
+	bool acc_node;
 	struct v4l2_requestbuffers req;
 	struct v4l2_subdev_fh fh;
 	int ret = 0;
@@ -880,7 +907,20 @@ static int atomisp_release(struct file *file)
 	rt_mutex_lock(&isp->mutex);
 
 	dev_dbg(isp->dev, "release device %s\n", vdev->name);
+	acc_node = !strncmp(vdev->name, "ATOMISP ISP ACC",
+			sizeof(vdev->name));
+	if (acc_node) {
+		acc_pipe = atomisp_to_acc_pipe(vdev);
+		asd = acc_pipe->asd;
+	} else {
+		pipe = atomisp_to_video_pipe(vdev);
+		asd = pipe->asd;
+	}
 
+	if (acc_node) {
+		acc_pipe->users--;
+		goto subdev_uninit;
+	}
 	pipe->users--;
 
 	if (pipe->capq.streaming)
@@ -924,7 +964,7 @@ static int atomisp_release(struct file *file)
 			V4L2_SUBDEV_FORMAT_ACTIVE, ATOMISP_SUBDEV_PAD_SINK,
 			&isp_sink_fmt);
 	}
-
+subdev_uninit:
 	if (atomisp_subdev_users(asd))
 		goto done;
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index c2427a1..07a116c 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -2687,9 +2687,17 @@ static long atomisp_vidioc_default(struct file *file, void *fh,
 {
 	struct video_device *vdev = video_devdata(file);
 	struct atomisp_device *isp = video_get_drvdata(vdev);
-	struct atomisp_sub_device *asd = atomisp_to_video_pipe(vdev)->asd;
+	struct atomisp_sub_device *asd;
+	bool acc_node;
 	int err;
 
+	acc_node = !strncmp(vdev->name, "ATOMISP ISP ACC",
+			sizeof(vdev->name));
+	if (acc_node)
+		asd = atomisp_to_acc_pipe(vdev)->asd;
+	else
+		asd = atomisp_to_video_pipe(vdev)->asd;
+
 	switch (cmd) {
 	case ATOMISP_IOC_G_MOTOR_PRIV_INT_DATA:
 	case ATOMISP_IOC_S_EXPOSURE:
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.c
index 32cfe6d..0f988e3 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.c
@@ -1065,6 +1065,16 @@ static void atomisp_init_subdev_pipe(struct atomisp_sub_device *asd,
 		sizeof(struct atomisp_css_params_with_list *));
 }
 
+static void atomisp_init_acc_pipe(struct atomisp_sub_device *asd,
+		struct atomisp_acc_pipe *pipe)
+{
+	pipe->asd = asd;
+	pipe->isp = asd->isp;
+	INIT_LIST_HEAD(&asd->acc.fw);
+	INIT_LIST_HEAD(&asd->acc.memory_maps);
+	ida_init(&asd->acc.ida);
+}
+
 /*
  * isp_subdev_init_entities - Initialize V4L2 subdev and media entity
  * @asd: ISP CCDC module
@@ -1123,6 +1133,8 @@ static int isp_subdev_init_entities(struct atomisp_sub_device *asd)
 	atomisp_init_subdev_pipe(asd, &asd->video_out_video_capture,
 			V4L2_BUF_TYPE_VIDEO_CAPTURE);
 
+	atomisp_init_acc_pipe(asd, &asd->video_acc);
+
 	ret = atomisp_video_init(&asd->video_in, "MEMORY");
 	if (ret < 0)
 		return ret;
@@ -1143,6 +1155,8 @@ static int isp_subdev_init_entities(struct atomisp_sub_device *asd)
 	if (ret < 0)
 		return ret;
 
+	atomisp_acc_init(&asd->video_acc, "ACC");
+
 	/* Connect the isp subdev to the video node. */
 	ret = media_entity_create_link(&asd->video_in.vdev.entity,
 		0, &asd->subdev.entity, ATOMISP_SUBDEV_PAD_SINK, 0);
@@ -1242,6 +1256,7 @@ void atomisp_subdev_unregister_entities(struct atomisp_sub_device *asd)
 	atomisp_video_unregister(&asd->video_out_vf);
 	atomisp_video_unregister(&asd->video_out_capture);
 	atomisp_video_unregister(&asd->video_out_video_capture);
+	atomisp_acc_unregister(&asd->video_acc);
 }
 
 int atomisp_subdev_register_entities(struct atomisp_sub_device *asd,
@@ -1270,6 +1285,10 @@ int atomisp_subdev_register_entities(struct atomisp_sub_device *asd,
 	if (ret < 0)
 		goto error;
 
+	ret = atomisp_acc_register(&asd->video_acc, vdev);
+	if (ret < 0)
+		goto error;
+
 	/*
 	 * file input only supported on subdev0
 	 * so do not create video node for subdevs other then subdev0
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
index 3d71461..ae62cdc 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
@@ -112,6 +112,14 @@ struct atomisp_video_pipe {
 	struct atomisp_css_params_with_list *frame_params[VIDEO_MAX_FRAME];
 };
 
+struct atomisp_acc_pipe {
+	struct video_device vdev;
+	unsigned int users;
+	bool running;
+	struct atomisp_sub_device *asd;
+	struct atomisp_device *isp;
+};
+
 struct atomisp_pad_format {
 	struct v4l2_mbus_framefmt fmt;
 	struct v4l2_rect crop;
@@ -284,6 +292,7 @@ struct atomisp_sub_device {
 	struct atomisp_video_pipe video_out_capture; /* capture output */
 	struct atomisp_video_pipe video_out_vf;      /* viewfinder output */
 	struct atomisp_video_pipe video_out_preview; /* preview output */
+	struct atomisp_acc_pipe video_acc;
 	/* video pipe main output */
 	struct atomisp_video_pipe video_out_video_capture;
 	/* struct isp_subdev_params params; */
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c
index e2542da..0c74f03 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c
@@ -156,6 +156,18 @@ int atomisp_video_init(struct atomisp_video_pipe *video, const char *name)
 	return 0;
 }
 
+void atomisp_acc_init(struct atomisp_acc_pipe *video, const char *name)
+{
+	video->vdev.fops = &atomisp_fops;
+	video->vdev.ioctl_ops = &atomisp_ioctl_ops;
+
+	/* Initialize the video device. */
+	snprintf(video->vdev.name, sizeof(video->vdev.name),
+		 "ATOMISP ISP %s", name);
+	video->vdev.release = video_device_release_empty;
+	video_set_drvdata(&video->vdev, video->isp);
+}
+
 int atomisp_video_register(struct atomisp_video_pipe *video,
 	struct v4l2_device *vdev)
 {
@@ -171,6 +183,21 @@ int atomisp_video_register(struct atomisp_video_pipe *video,
 	return ret;
 }
 
+int atomisp_acc_register(struct atomisp_acc_pipe *video,
+		struct v4l2_device *vdev)
+{
+	int ret;
+
+	video->vdev.v4l2_dev = vdev;
+
+	ret = video_register_device(&video->vdev, VFL_TYPE_GRABBER, -1);
+	if (ret < 0)
+		dev_err(vdev->dev, "%s: could not register video device (%d)\n",
+			__func__, ret);
+
+	return ret;
+}
+
 void atomisp_video_unregister(struct atomisp_video_pipe *video)
 {
 	if (video_is_registered(&video->vdev)) {
@@ -179,6 +206,12 @@ void atomisp_video_unregister(struct atomisp_video_pipe *video)
 	}
 }
 
+void atomisp_acc_unregister(struct atomisp_acc_pipe *video)
+{
+	if (video_is_registered(&video->vdev))
+		video_unregister_device(&video->vdev);
+}
+
 static int atomisp_save_iunit_reg(struct atomisp_device *isp)
 {
 	struct pci_dev *dev = isp->pdev;
@@ -1463,7 +1496,6 @@ static int atomisp_pci_probe(struct pci_dev *dev,
 			err);
 		goto register_entities_fail;
 	}
-	atomisp_acc_init(isp);
 
 	/* init atomisp wdts */
 	if (init_atomisp_wdts(isp) != 0)
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.h
index 0023e54..191b2e5 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.h
@@ -25,14 +25,19 @@
 #define __ATOMISP_V4L2_H__
 
 struct atomisp_video_pipe;
+struct atomisp_acc_pipe;
 struct v4l2_device;
 struct atomisp_device;
 struct firmware;
 
 int atomisp_video_init(struct atomisp_video_pipe *video, const char *name);
+void atomisp_acc_init(struct atomisp_acc_pipe *video, const char *name);
 void atomisp_video_unregister(struct atomisp_video_pipe *video);
 int atomisp_video_register(struct atomisp_video_pipe *video,
 	struct v4l2_device *vdev);
+void atomisp_acc_unregister(struct atomisp_acc_pipe *video);
+int atomisp_acc_register(struct atomisp_acc_pipe *video,
+	struct v4l2_device *vdev);
 const struct firmware *atomisp_load_firmware(struct atomisp_device *isp);
 int atomisp_csi_lane_config(struct atomisp_device *isp);
 
-- 
1.9.1

