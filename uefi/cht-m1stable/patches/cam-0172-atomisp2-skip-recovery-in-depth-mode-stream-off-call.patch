From 85f4f5f69aefedfe5942ec03c497c01274418f1b Mon Sep 17 00:00:00 2001
From: Jianxu Zheng <jian.xu.zheng@intel.com>
Date: Wed, 27 Aug 2014 13:26:18 +0800
Subject: [PATCH 172/176] atomisp2: skip recovery in depth mode stream off call

in depth mode stream off call, skip the main sensor restart case
since the ov8858 would be stream off very soon too.

Change-Id: Iee4dfe5e3b08c10923bf6a032aca3a0063af8c71
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-8555
Signed-off-by: Jianxu Zheng <jian.xu.zheng@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/28037
Reviewed-by: Soren Friis <soren.friis@intel.com>
Reviewed-by: Jukka O Kaartinen <jukka.o.kaartinen@intel.com>
Integrator: Wei Tao <wei.tao@intel.com>
Approver: Wei Tao <wei.tao@intel.com>
Build: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
Maintainer: Wei Tao <wei.tao@intel.com>
---
 .../media/pci/atomisp2/atomisp_driver/atomisp_cmd.c       | 15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index 4aec89e..0bc9933 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -1228,7 +1228,7 @@ void atomisp_delayed_init_work(struct work_struct *work)
 	complete(&asd->init_done);
 }
 
-static void __atomisp_css_recover(struct atomisp_device *isp)
+static void __atomisp_css_recover(struct atomisp_device *isp, bool isp_timeout)
 {
 	enum atomisp_css_pipe_id css_pipe_id;
 	bool stream_restart[MAX_STREAM_NUM] = {0};
@@ -1294,6 +1294,14 @@ static void __atomisp_css_recover(struct atomisp_device *isp)
 	 * may be corrupted, so mark it so. */
 	isp->sw_contex.invalid_frame = 1;
 	isp->sw_contex.invalid_vf_frame = 1;
+
+	if (!isp_timeout) {
+		for (i = 0; i < isp->num_of_streams; i++) {
+			if (isp->asd[i].depth_mode->val)
+				return;
+		}
+	}
+
 	for (i = 0; i < isp->num_of_streams; i++) {
 		struct atomisp_sub_device *asd = &isp->asd[i];
 
@@ -1496,7 +1504,8 @@ void atomisp_wdt_work(struct work_struct *work)
 	if (dbg_level > 5)
 		kct_log(CT_EV_CRASH, "ATOMISP2", "TIMEOUT", 0, "", "", "", "", "", "", "/logs/aplog");
 #endif
-	__atomisp_css_recover(isp);
+
+	__atomisp_css_recover(isp, true);
 	atomisp_set_stop_timeout(ATOMISP_CSS_STOP_TIMEOUT_US);
 	dev_err(isp->dev, "timeout recovery handling done\n");
 	atomic_set(&isp->wdt_work_queued, 0);
@@ -1518,7 +1527,7 @@ void atomisp_css_flush(struct atomisp_device *isp)
 	}
 
 	/* Start recover */
-	__atomisp_css_recover(isp);
+	__atomisp_css_recover(isp, false);
 	/* Restore wdt */
 	for (i = 0; i < isp->num_of_streams; i++) {
 		struct atomisp_sub_device *asd = &isp->asd[i];
-- 
1.9.1

