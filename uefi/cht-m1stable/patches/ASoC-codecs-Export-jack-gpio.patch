From 2d16826ff82d009acf0c89667bfc4c9d3f6e8aa6 Mon Sep 17 00:00:00 2001
From: "Subhransu S. Prusty" <subhransu.s.prusty@intel.com>
Date: Wed, 4 Jun 2014 16:46:49 +0530
Subject: ASoC: codecs: Export jack gpio

Change-Id: I5e39cf0e0c38eb91d80dc907631a622e63e11c5d
Signed-off-by: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
---
 sound/soc/codecs/rt5640.c | 13 +++++++++++++
 sound/soc/codecs/rt5640.h |  2 ++
 2 files changed, 15 insertions(+)

diff --git a/sound/soc/codecs/rt5640.c b/sound/soc/codecs/rt5640.c
index 1a8d270..46e647c 100644
--- a/sound/soc/codecs/rt5640.c
+++ b/sound/soc/codecs/rt5640.c
@@ -24,6 +24,7 @@
 #include <sound/initval.h>
 #include <sound/tlv.h>
 #include <linux/acpi.h>
+#include <linux/gpio/consumer.h>
 
 #define RTK_IOCTL
 #ifdef RTK_IOCTL
@@ -531,6 +532,12 @@ int rt5640_check_bp_status(struct snd_soc_codec *codec)
 	return  snd_soc_read(codec, RT5640_IRQ_CTRL2) & 0x8;
 }
 EXPORT_SYMBOL(rt5640_check_bp_status);
+int rt5640_get_jack_gpio(struct snd_soc_codec *codec)
+{
+	struct rt5640_priv *rt5640 = snd_soc_codec_get_drvdata(codec);
+	return rt5640->codec_gpio;
+}
+EXPORT_SYMBOL(rt5640_get_jack_gpio);
 
 /* Function to enable/disable overcurrent detection(OVCD) and button
    press interrupts (based on OVCD) in the codec*/
@@ -3447,6 +3454,7 @@ static int rt5640_i2c_probe(struct i2c_client *i2c,
 {
 	struct rt5640_priv *rt5640;
 	int ret;
+	struct gpio_desc *gpiod;
 
 	pr_debug("%s enter", __func__);
 	rt5640 = kzalloc(sizeof(struct rt5640_priv), GFP_KERNEL);
@@ -3460,6 +3468,11 @@ static int rt5640_i2c_probe(struct i2c_client *i2c,
 	if (ret < 0)
 		kfree(rt5640);
 
+	gpiod = devm_gpiod_get_index(&i2c->dev, NULL, 0);
+	rt5640->codec_gpio = desc_to_gpio(gpiod);
+	devm_gpiod_put(&i2c->dev, gpiod);
+	pr_debug("%s: codec gpio is %d\n", rt5640->codec_gpio);
+
 	return ret;
 }
 
diff --git a/sound/soc/codecs/rt5640.h b/sound/soc/codecs/rt5640.h
index a0cc5fc..79b1758 100644
--- a/sound/soc/codecs/rt5640.h
+++ b/sound/soc/codecs/rt5640.h
@@ -2161,6 +2161,7 @@ struct rt5640_priv {
 	bool dsp_rec_pass;
 
 	int jack_type;
+	int codec_gpio;
 	unsigned int ovcd_th_base; /* OVCD threshold base value*/
 	unsigned int ovcd_th_sf; /* OVCD threshold scale factor */
 
@@ -2169,6 +2170,7 @@ struct rt5640_priv {
 int rt5640_detect_hs_type(struct snd_soc_codec *codec, int jack_insert);
 int rt5640_check_jd_status(struct snd_soc_codec *codec);
 int rt5640_check_bp_status(struct snd_soc_codec *codec);
+int rt5640_get_jack_gpio(struct snd_soc_codec *codec);
 void rt5640_enable_ovcd_interrupt(struct snd_soc_codec *codec, bool enable);
 void rt5640_config_ovcd_thld(struct snd_soc_codec *codec,
 						int base, int scale_factor);
-- 
2.0.0

