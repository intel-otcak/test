From ad60a9aac8bd5be77855818bd7c6586abfc5cf13 Mon Sep 17 00:00:00 2001
From: Jenny TC <jenny.tc@intel.com>
Date: Thu, 6 Nov 2014 13:53:35 +0530
Subject: [PATCH 1/1] power_supply: Read battery temperature from thermal zone

With ACPI, battery temperature from PMIC may be reported using
thermal zone using opregion driver. So use this interface to
report battery temperature.

Change-Id: Ia6881e0bec492ef82d694d141e2ff2e6ff6b5670
Signed-off-by: Jenny TC <jenny.tc@intel.com>

Conflicts:
	drivers/power/max17042_battery.c
---
 drivers/power/max17042_battery.c | 34 +++++++++++++++++++++++++++++++---
 1 file changed, 31 insertions(+), 3 deletions(-)

diff --git a/drivers/power/max17042_battery.c b/drivers/power/max17042_battery.c
index aed4386..a367488 100644
--- a/drivers/power/max17042_battery.c
+++ b/drivers/power/max17042_battery.c
@@ -38,6 +38,7 @@
 #include <linux/gpio/consumer.h>
 #include <linux/acpi.h>
 #include <linux/power/battery_id.h>
+#include <linux/thermal.h>
 
 /* Status register bits */
 #define STATUS_POR_BIT         (1 << 1)
@@ -69,6 +70,8 @@
 
 #define SOC_ROUNDOFF_MASK      0x80
 
+#define MAX17042_TEX_BIT_ENBL	(1 << 8)
+
 #define MAX17042_TEMP_REG_SHIFT	8
 #define MAX17042_VOLTAGE_CONV_FCTR	625
 #define MAX17042_CHRG_CONV_FCTR	500
@@ -79,6 +82,9 @@
 
 #define MAX17042_IC_VERSION	0x0092
 #define MAX17047_IC_VERSION	0x00AC	/* same for max17050 */
+#define MC_TO_DEGREE(mC) (mC / 1000)
+#define DEGREE_TO_TENTHS_DEGREE(c) (c * 10)
+#define ACPI_BATTERY_SENSOR_NAME "STR3"
 
 struct max17042_chip {
 	struct i2c_client *client;
@@ -122,10 +128,32 @@ static int max17042_get_temperature(struct max17042_chip *chip, int *temp)
 	int ret;
 	u32 data;
 	struct regmap *map = chip->regmap;
+#ifdef CONFIG_ACPI
+	u32 config, val;
+	struct thermal_zone_device *tzd;
+	unsigned long temp_mC;
+
+	tzd = thermal_zone_get_zone_by_name(ACPI_BATTERY_SENSOR_NAME);
+	if (!IS_ERR_OR_NULL(tzd)) {
+		tzd->ops->get_temp(tzd, &temp_mC);
+		*temp = MC_TO_DEGREE(temp_mC);
+
+		regmap_read(chip->regmap, MAX17042_CONFIG, &config);
+		if (config & MAX17042_TEX_BIT_ENBL) {
+			if (*temp < 0) {
+				val = (*temp + 0xff + 1);
+				val <<= 8;
+			} else {
+				val = *temp;
+				val <<= 8;
+			}
+			regmap_write(chip->regmap, MAX17042_TEMP, val);
+		}
 
-	if (!temp)
-		return -EINVAL;
-
+		*temp = DEGREE_TO_TENTHS_DEGREE(*temp);
+		return 0;
+	}
+#endif
 	ret = regmap_read(map, MAX17042_TEMP, &data);
 	if (ret < 0)
 		return ret;
-- 
1.9.1

