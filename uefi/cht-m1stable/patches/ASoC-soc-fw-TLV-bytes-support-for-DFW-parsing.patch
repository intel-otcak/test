From f033eb34073ce15c78026a01e30c00414937962d Mon Sep 17 00:00:00 2001
From: Mythri P K <mythri.p.k@intel.com>
Date: Fri, 20 Mar 2015 13:56:33 +0530
Subject: [PATCH] ASoC: soc-fw: TLV bytes support for DFW parsing

Issue: GMINL-7223

Add the support for TLV in the DFW code.

Change-Id: Ie97069f1cba94d6cc5335b9fef637f4327c51827
Signed-off-by: Mythri P K <mythri.p.k@intel.com>
Signed-off-by: Samreen Nilofer <samreen.nilofer@intel.com>
---
 include/sound/soc-fw.h    |  10 ++
 include/sound/soc.h       |   1 +
 include/uapi/sound/asoc.h |  26 +++-
 sound/soc/soc-fw.c        | 305 ++++++++++++++++++++++++++++++++++++++++++----
 4 files changed, 317 insertions(+), 25 deletions(-)

diff --git a/include/sound/soc-fw.h b/include/sound/soc-fw.h
index da57b5d51dd0..ef25534971d2 100644
--- a/include/sound/soc-fw.h
+++ b/include/sound/soc-fw.h
@@ -31,6 +31,13 @@ struct snd_soc_fw_kcontrol_ops {
 		struct snd_ctl_elem_info *uinfo);
 };
 
+struct snd_soc_fw_tlv_ops {
+	u32 id;
+	int (*get)(struct snd_kcontrol *kcontrol,
+			unsigned int __user *bytes, unsigned int size);
+	int (*put)(struct snd_kcontrol *kcontrol,
+			const unsigned int __user *bytes, unsigned int size);
+};
 /*
  * Dai operations - used to map dai ops structure to firmware based dais.
  */
@@ -104,6 +111,9 @@ struct snd_soc_fw_platform_ops {
 	/* dai operations */
 	const struct snd_soc_fw_dai_ops *dai_ops;
 	int dai_ops_count;
+
+	const struct snd_soc_fw_tlv_ops *tlv_ops;
+	int tlv_ops_count;
 };
 
 struct snd_soc_fw_card_ops {
diff --git a/include/sound/soc.h b/include/sound/soc.h
index 97fe9d96b3f1..77d0c0fcf26a 100644
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@ -887,6 +887,7 @@ struct soc_bytes_ext {
 	struct list_head list;
 	struct snd_kcontrol *dcontrol;
 	int index;
+	int tlv_index;
 
 	/* used for TLV byte control */
 	int (*get)(struct snd_kcontrol *kcontrol,
diff --git a/include/uapi/sound/asoc.h b/include/uapi/sound/asoc.h
index 003cfd0d1e7a..6ddd6eb4924c 100644
--- a/include/uapi/sound/asoc.h
+++ b/include/uapi/sound/asoc.h
@@ -101,9 +101,10 @@
 	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE | \
 	SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK, \
 	.tlv.c = (snd_soc_bytes_tlv_callback), \
-	.info = snd_soc_info_bytes_ext, \
+	.info = snd_soc_info_bytes_ext, .index = SOC_CONTROL_IO_BYTES_TLV, \
 	.private_value = (unsigned long)&(struct soc_bytes_ext) \
-	{.max = xcount, .get = xhandler_get, .put = xhandler_put, } }
+	{.max = xcount, .get = xhandler_get, .put = xhandler_put, \
+	 .tlv_index = SOC_CONTROL_TLV,	} }
 #define SOC_DOUBLE(xname, reg, shift_left, shift_right, max, invert) \
 {	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
 	.info = snd_soc_info_volsw, .get = snd_soc_get_volsw, \
@@ -320,9 +321,16 @@
 	(SOC_CONTROL_ID_PUT(p) | SOC_CONTROL_ID_GET(g) |\
 	SOC_CONTROL_ID_INFO(i))
 
+#define SOC_CONTROL_ID_TLV_PUT(p)	((p & 0xff) << 8)
+#define SOC_CONTROL_ID_TLV_GET(g)	((g & 0xff) << 0)
+#define SOC_CONTROL_ID_TLV(g, p)	\
+	(SOC_CONTROL_ID_TLV_PUT(p) | SOC_CONTROL_ID_TLV_GET(g))
+
 #define SOC_CONTROL_GET_ID_PUT(id)	((id & 0xff0000) >> 16)
 #define SOC_CONTROL_GET_ID_GET(id)	((id & 0x00ff00) >> 8)
 #define SOC_CONTROL_GET_ID_INFO(id)	((id & 0x0000ff) >> 0)
+#define SOC_CONTROL_GET_ID_TLV_PUT(id)  ((id & 0xff00) >> 8)
+#define SOC_CONTROL_GET_ID_TLV_GET(id)  ((id & 0x00ff) >> 0)
 
 /* individual kcontrol info types - can be mixed with other types */
 #define SOC_CONTROL_TYPE_EXT		0	/* driver defined */
@@ -337,8 +345,11 @@
 #define SOC_CONTROL_TYPE_RANGE		10
 #define SOC_CONTROL_TYPE_STROBE		11
 #define SOC_CONTROL_TYPE_BYTES_EXT	12
+#define SOC_CONTROL_TYPE_BYTES_TLV	13
 
 #define SOC_CONTROL_TYPE_VOLSW_EXT      14
+/* To index get and put of TLV */
+#define SOC_CONTROL_TYPE_TLV                 0
 
 /* compound control IDs */
 #define SOC_CONTROL_IO_VOLSW \
@@ -389,10 +400,18 @@
 	SOC_CONTROL_ID(SOC_CONTROL_TYPE_EXT, \
 		SOC_CONTROL_TYPE_EXT, \
 		SOC_CONTROL_TYPE_BYTES_EXT)
+#define SOC_CONTROL_IO_BYTES_TLV \
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_EXT, \
+		SOC_CONTROL_TYPE_EXT, \
+		SOC_CONTROL_TYPE_BYTES_TLV)
 #define SOC_CONTROL_IO_VOLSW_EXT \
 	SOC_CONTROL_ID(SOC_CONTROL_TYPE_EXT, \
 		SOC_CONTROL_TYPE_EXT, \
 		SOC_CONTROL_TYPE_VOLSW)
+
+#define SOC_CONTROL_TLV \
+	SOC_CONTROL_ID_TLV(SOC_CONTROL_TYPE_TLV, \
+			SOC_CONTROL_TYPE_TLV)
 /* widget has no PM register bit */
 #define SND_SOC_NOPM	-1
 
@@ -866,7 +885,8 @@ struct snd_soc_fw_enum_control {
 struct snd_soc_fw_bytes_ext {
 	struct snd_soc_fw_control_hdr hdr;
 	__s32 max;
-	__le32 reserved[12]; /* Reserved for future use */
+	__le32 tlv_index;
+	__le32 reserved[11]; /* Reserved for future use */
 	__le32 pvt_data_len;
 	char pvt_data[0];
 } __attribute__((packed));
diff --git a/sound/soc/soc-fw.c b/sound/soc/soc-fw.c
index f3a3e49b3233..57802f8e3999 100644
--- a/sound/soc/soc-fw.c
+++ b/sound/soc/soc-fw.c
@@ -67,6 +67,10 @@ struct soc_fw {
 	const struct snd_soc_fw_dai_ops *dai_ops;
 	int dai_ops_count;
 
+	/* TLV operations */
+	const struct snd_soc_fw_tlv_ops *tlv_ops;
+	int tlv_ops_count;
+
 	/* optional fw loading callbacks to component drivers */
 	union {
 		struct snd_soc_fw_codec_ops *codec_ops;
@@ -96,6 +100,8 @@ static const struct snd_soc_fw_kcontrol_ops io_ops[] = {
 		NULL, snd_ctl_boolean_mono_info},
 	{SOC_CONTROL_IO_BYTES_EXT, NULL,
 		NULL, snd_soc_info_bytes_ext},
+	{SOC_CONTROL_IO_BYTES_TLV, NULL,
+		NULL, snd_soc_info_bytes_ext},
 	{SOC_CONTROL_IO_RANGE, snd_soc_get_volsw_range,
 		snd_soc_put_volsw_range, snd_soc_info_volsw_range},
 	{SOC_CONTROL_IO_VOLSW_XR_SX, snd_soc_get_xr_sx,
@@ -336,25 +342,59 @@ static int soc_fw_add_kcontrol(struct soc_fw *sfw, struct snd_kcontrol_new *k,
 
 /* bind a kcontrol to it's IO handlers */
 static int soc_fw_kcontrol_bind_io(u32 io_type, struct snd_kcontrol_new *k,
-	const struct snd_soc_fw_kcontrol_ops *ops, int num_ops)
+	const struct snd_soc_fw_kcontrol_ops *ops, int num_ops, bool tlv)
 {
 	int i;
 
+	if (!tlv) {
+		for (i = 0; i < num_ops; i++) {
+			if (SOC_CONTROL_GET_ID_PUT(ops[i].id) ==
+				SOC_CONTROL_GET_ID_PUT(io_type) && ops[i].put)
+				k->put = ops[i].put;
+			if (SOC_CONTROL_GET_ID_GET(ops[i].id) ==
+				SOC_CONTROL_GET_ID_GET(io_type) && ops[i].get)
+				k->get = ops[i].get;
+			if (SOC_CONTROL_GET_ID_INFO(ops[i].id) ==
+				SOC_CONTROL_GET_ID_INFO(io_type) && ops[i].info)
+				k->info = ops[i].info;
+		}
+		/* let the caller know if we need to bind external kcontrols */
+		if (!k->put || !k->get || !k->info)
+			return 1;
+	} else {
+		for (i = 0; i < num_ops; i++) {
+			if (SOC_CONTROL_GET_ID_INFO(ops[i].id) ==
+				SOC_CONTROL_GET_ID_INFO(io_type) && ops[i].info)
+				k->info = ops[i].info;
+		}
+		/* let the caller know if we need to bind external kcontrols */
+		if (!k->info)
+			return 1;
+	}
+
+	return 0;
+}
+
+/* bind a kcontrol to it's TLV handlers */
+static int soc_fw_kcontrol_bind_tlv(u32 tlv_type, struct soc_bytes_ext *be,
+	const struct snd_soc_fw_tlv_ops *ops, int num_ops)
+{
+	int i;
+
+	pr_debug("%s: num _ops %d type 0x%x\n",	__func__, num_ops, tlv_type);
+
 	for (i = 0; i < num_ops; i++) {
 
-		if (SOC_CONTROL_GET_ID_PUT(ops[i].id) ==
-			SOC_CONTROL_GET_ID_PUT(io_type) && ops[i].put)
-			k->put = ops[i].put;
-		if (SOC_CONTROL_GET_ID_GET(ops[i].id) ==
-			SOC_CONTROL_GET_ID_GET(io_type) && ops[i].get)
-			k->get = ops[i].get;
-		if (SOC_CONTROL_GET_ID_INFO(ops[i].id) ==
-			SOC_CONTROL_GET_ID_INFO(io_type) && ops[i].info)
-			k->info = ops[i].info;
+		if (SOC_CONTROL_GET_ID_TLV_PUT(ops[i].id) ==
+			SOC_CONTROL_GET_ID_TLV_PUT(tlv_type) && ops[i].put)
+			be->put = ops[i].put;
+		if (SOC_CONTROL_GET_ID_TLV_GET(ops[i].id) ==
+			SOC_CONTROL_GET_ID_TLV_GET(tlv_type) && ops[i].get)
+			be->get = ops[i].get;
 	}
 
 	/* let the caller know if we need to bind external kcontrols */
-	if (!k->put || !k->get || !k->info)
+	if (!be->put || !be->get)
 		return 1;
 
 	return 0;
@@ -506,12 +546,11 @@ static int soc_fw_dbytes_create(struct soc_fw *sfw, unsigned int count,
 
 		/* map standard io handlers and check for external handlers */
 		ext = soc_fw_kcontrol_bind_io(be->hdr.index, &kc, io_ops,
-			ARRAY_SIZE(io_ops));
-
+			ARRAY_SIZE(io_ops), 0);
 		if (ext) {
 			/* none exist, so now try and map ext handlers */
 			ext = soc_fw_kcontrol_bind_io(be->hdr.index, &kc,
-				sfw->io_ops, sfw->io_ops_count);
+				sfw->io_ops, sfw->io_ops_count, 0);
 			if (ext) {
 				dev_err(sfw->dev,
 					"ASoC: no complete mixer IO handler for %s type (g,p,i) %d:%d:%d\n",
@@ -539,6 +578,113 @@ static int soc_fw_dbytes_create(struct soc_fw *sfw, unsigned int count,
 			kfree(sbe);
 			continue;
 		}
+
+		/* This needs to  be change to a widget which would not work
+		 * unless we made changes to snd_soc_code, snd_soc_platform as
+		 * that has only enumns and mixer everywhere that list is used*/
+		soc_fw_list_add_bytes(sfw, sbe);
+	}
+	return 0;
+
+}
+static int soc_fw_dbytes_tlv_create(struct soc_fw *sfw, unsigned int count,
+	size_t size)
+{
+	struct snd_soc_fw_bytes_ext *be;
+	struct soc_bytes_ext  *sbe;
+	struct snd_kcontrol_new kc;
+	int i, err, ext;
+
+	if (soc_fw_check_control_count(sfw,
+		sizeof(struct snd_soc_fw_bytes_ext), count, size)) {
+		dev_err(sfw->dev, "Asoc: Invalid count %d for tlv control\n",
+				count);
+		return -EINVAL;
+	}
+
+	for (i = 0; i < count; i++) {
+		be = (struct snd_soc_fw_bytes_ext *)sfw->pos;
+
+		/* validate kcontrol */
+		if (strnlen(be->hdr.name, SND_SOC_FW_TEXT_SIZE) ==
+			SND_SOC_FW_TEXT_SIZE)
+			return -EINVAL;
+
+		sbe = kzalloc(sizeof(*sbe) + be->pvt_data_len, GFP_KERNEL);
+		if (!sbe)
+			return -ENOMEM;
+
+		sfw->pos += (sizeof(struct snd_soc_fw_bytes_ext) + be->pvt_data_len);
+
+		dev_dbg(sfw->dev,
+			"ASoC: adding kcontrol %s with access 0x%x\n",
+			be->hdr.name, be->hdr.access);
+
+		memset(&kc, 0, sizeof(kc));
+		kc.name = be->hdr.name;
+		kc.private_value = (long)sbe;
+		kc.iface = SNDRV_CTL_ELEM_IFACE_MIXER;
+		kc.access = be->hdr.access;
+		kc.tlv.c = snd_soc_bytes_tlv_callback;
+		sbe->max = be->max;
+
+		if (be->pvt_data_len)
+			soc_fw_init_pvt_data(sfw, be->tlv_index, (unsigned long)sbe, (unsigned long)be);
+
+		INIT_LIST_HEAD(&sbe->list);
+
+
+		/* none exist, so now try and map ext handlers */
+		ext = soc_fw_kcontrol_bind_tlv(be->tlv_index, sbe,
+				sfw->tlv_ops, sfw->tlv_ops_count);
+		if (ext) {
+			dev_err(sfw->dev,
+				"ASoC:%s no complete TLV handler for %s type (g,p) %d:%d\n",
+				__func__,
+				be->hdr.name,
+				SOC_CONTROL_GET_ID_GET(be->tlv_index),
+				SOC_CONTROL_GET_ID_PUT(be->tlv_index));
+			kfree(sbe);
+			continue;
+		}
+
+		/* map standard io handlers and check for external handlers */
+		ext = soc_fw_kcontrol_bind_io(be->hdr.index, &kc, io_ops,
+				ARRAY_SIZE(io_ops), 1);
+		if (ext) {
+			/* none exist, so now try and map ext handlers */
+			ext = soc_fw_kcontrol_bind_io(be->hdr.index, &kc,
+					sfw->io_ops, sfw->io_ops_count, 1);
+			if (ext) {
+				dev_err(sfw->dev,
+					"ASoC:%s no complete IO handler for %s type (g,p,i) %d:%d:%d\n",
+					__func__,
+					be->hdr.name,
+					SOC_CONTROL_GET_ID_GET(be->hdr.index),
+					SOC_CONTROL_GET_ID_PUT(be->hdr.index),
+					SOC_CONTROL_GET_ID_INFO(be->hdr.index));
+				kfree(sbe);
+				continue;
+			}
+
+			err = soc_fw_init_kcontrol(sfw, &kc);
+			if (err < 0) {
+				dev_err(sfw->dev, "ASoC: tlv: failed to init %s\n",
+						be->hdr.name);
+				kfree(sbe);
+				continue;
+			}
+		}
+
+		/* register control here */
+		err = soc_fw_add_kcontrol(sfw, &kc, &sbe->dcontrol);
+		if (err < 0) {
+			dev_err(sfw->dev, "ASoC: tlv: failed to add %s\n",
+					be->hdr.name);
+			kfree(sbe);
+			continue;
+		}
+
 		/* This needs to  be change to a widget which would not work
 		 * unless we made changes to snd_soc_code, snd_soc_platform as
 		 * that has only enumns and mixer everywhere that list is used*/
@@ -602,11 +748,11 @@ static int soc_fw_dmixer_create(struct soc_fw *sfw, unsigned int count,
 
 		/* map standard io handlers and check for external handlers */
 		ext = soc_fw_kcontrol_bind_io(mc->hdr.index, &kc, io_ops,
-			ARRAY_SIZE(io_ops));
+			ARRAY_SIZE(io_ops), 0);
 		if (ext) {
 			/* none exist, so now try and map ext handlers */
 			ext = soc_fw_kcontrol_bind_io(mc->hdr.index, &kc,
-				sfw->io_ops, sfw->io_ops_count);
+				sfw->io_ops, sfw->io_ops_count, 0);
 			if (ext) {
 				dev_err(sfw->dev,
 					"ASoC: no complete mixer IO handler for %s type (g,p,i) %d:%d:%d\n",
@@ -760,11 +906,11 @@ static int soc_fw_denum_create(struct soc_fw *sfw, unsigned int count,
 
 		/* map standard io handlers and check for external handlers */
 		ext = soc_fw_kcontrol_bind_io(ec->hdr.index, &kc, io_ops,
-			ARRAY_SIZE(io_ops));
+			ARRAY_SIZE(io_ops), 0);
 		if (ext) {
 			/* none exist, so now try and map ext handlers */
 			ext = soc_fw_kcontrol_bind_io(ec->hdr.index, &kc,
-				sfw->io_ops, sfw->io_ops_count);
+				sfw->io_ops, sfw->io_ops_count, 0);
 			if (ext) {
 				dev_err(sfw->dev, "ASoC: no complete enum IO handler for %s type (g,p,i) %d:%d:%d\n",
 					ec->hdr.name,
@@ -842,6 +988,9 @@ static int soc_fw_kcontrol_load(struct soc_fw *sfw, struct snd_soc_fw_hdr *hdr)
 		case SOC_CONTROL_TYPE_BYTES_EXT:
 			soc_fw_dbytes_create(sfw, 1, hdr->size);
 			break;
+		case SOC_CONTROL_TYPE_BYTES_TLV:
+			soc_fw_dbytes_tlv_create(sfw, 1, hdr->size);
+			break;
 		default:
 			dev_err(sfw->dev, "ASoC: invalid control type %d:%d:%d count %d\n",
 				SOC_CONTROL_GET_ID_GET(control_hdr->index),
@@ -962,11 +1111,11 @@ static struct snd_kcontrol_new *soc_fw_dapm_widget_dmixer_create(struct soc_fw *
 
 		/* map standard io handlers and check for external handlers */
 		ext = soc_fw_kcontrol_bind_io(mc->hdr.index, &kc[i], io_ops,
-			ARRAY_SIZE(io_ops));
+			ARRAY_SIZE(io_ops), 0);
 		if (ext) {
 			/* none exist, so now try and map ext handlers */
 			ext = soc_fw_kcontrol_bind_io(mc->hdr.index, &kc[i],
-				sfw->io_ops, sfw->io_ops_count);
+				sfw->io_ops, sfw->io_ops_count, 0);
 			if (ext) {
 				dev_err(sfw->dev,
 					"ASoC: no complete widget mixer IO handler for %s type (g,p,i) %d:%d:%d\n",
@@ -1058,11 +1207,11 @@ static struct snd_kcontrol_new *soc_fw_dapm_widget_denum_create(struct soc_fw *s
 
 	/* map standard io handlers and check for external handlers */
 	ext = soc_fw_kcontrol_bind_io(ec->hdr.index, kc, io_ops,
-		ARRAY_SIZE(io_ops));
+		ARRAY_SIZE(io_ops), 0);
 	if (ext) {
 		/* none exist, so now try and map ext handlers */
 		ext = soc_fw_kcontrol_bind_io(ec->hdr.index, kc,
-			sfw->io_ops, sfw->io_ops_count);
+			sfw->io_ops, sfw->io_ops_count, 0);
 		if (ext) {
 			dev_err(sfw->dev,
 				"ASoC: no complete widget enum IO handler for %s type (g,p,i) %d:%d:%d\n",
@@ -1095,6 +1244,107 @@ err_se:
 	return NULL;
 }
 
+static struct snd_kcontrol_new *soc_fw_dapm_widget_dbytes_tlv_create(struct soc_fw *sfw,
+		int count)
+{
+	struct snd_soc_fw_bytes_ext *be;
+	struct soc_bytes_ext  *sbe;
+	struct snd_kcontrol_new *kc;
+	int i, err, ext;
+
+	kc = kzalloc(sizeof(*kc) * count, GFP_KERNEL);
+	if (!kc)
+		return NULL;
+
+	for (i = 0; i < count; i++) {
+		be = (struct snd_soc_fw_bytes_ext *)sfw->pos;
+
+		/* validate kcontrol */
+		if (strnlen(be->hdr.name, SND_SOC_FW_TEXT_SIZE) ==
+			SND_SOC_FW_TEXT_SIZE)
+			goto err;
+
+		sbe = kzalloc(sizeof(*sbe) + be->pvt_data_len, GFP_KERNEL);
+		if (!sbe)
+			goto err;
+
+		sfw->pos += (sizeof(struct snd_soc_fw_bytes_ext) + be->pvt_data_len);
+
+		dev_dbg(sfw->dev,
+			"ASoC: tlv: adding bytes kctrl %s with access 0x%x\n",
+			be->hdr.name, be->hdr.access);
+
+		memset(kc, 0, sizeof(*kc));
+
+		kc[i].name = be->hdr.name;
+		kc[i].private_value = (long)sbe;
+		kc[i].iface = SNDRV_CTL_ELEM_IFACE_MIXER;
+		kc[i].access = be->hdr.access;
+		kc[i].tlv.c = snd_soc_bytes_tlv_callback;
+		sbe->max = be->max;
+
+		dev_dbg(sfw->dev, "ASoC: %s: name %s\n", __func__, kc[i].name);
+		dev_dbg(sfw->dev, "ASoC: iface %d\n", kc[i].iface);
+		dev_dbg(sfw->dev, "ASoC: access %d\n", kc[i].access);
+		dev_dbg(sfw->dev, "ASoC: pvt len %d\n", be->pvt_data_len);
+
+		if (be->pvt_data_len)
+			soc_fw_init_pvt_data(sfw, be->tlv_index, (unsigned long)sbe, (unsigned long)be);
+
+		INIT_LIST_HEAD(&sbe->list);
+
+
+		/* none exist, so now try and map ext handlers */
+		ext = soc_fw_kcontrol_bind_tlv(be->tlv_index, sbe,
+				sfw->tlv_ops, sfw->tlv_ops_count);
+
+		if (ext) {
+			dev_err(sfw->dev,
+				"ASoC: %s no complete TLV handler for %s type (g,p) %d:%d\n",
+				__func__,
+				be->hdr.name,
+				SOC_CONTROL_GET_ID_GET(be->tlv_index),
+				SOC_CONTROL_GET_ID_PUT(be->tlv_index));
+			kfree(sbe);
+			continue;
+		}
+		/* map standard io handlers and check for external handlers */
+		ext = soc_fw_kcontrol_bind_io(be->hdr.index, &kc[i], io_ops,
+				ARRAY_SIZE(io_ops), 1);
+		if (ext) {
+			/* none exist, so now try and map ext handlers */
+			ext = soc_fw_kcontrol_bind_io(be->hdr.index, &kc[i],
+					sfw->io_ops, sfw->io_ops_count, 1);
+			if (ext) {
+				dev_err(sfw->dev,
+					"ASoC: %s no complete IO handler for %s type (g,p,i) %d:%d:%d\n",
+					__func__,
+					be->hdr.name,
+					SOC_CONTROL_GET_ID_GET(be->hdr.index),
+					SOC_CONTROL_GET_ID_PUT(be->hdr.index),
+					SOC_CONTROL_GET_ID_INFO(be->hdr.index));
+				kfree(sbe);
+				continue;
+			}
+			err = soc_fw_init_kcontrol(sfw, &kc[i]);
+			if (err < 0) {
+				dev_err(sfw->dev, "ASoC: tlv_create: failed to init %s\n",
+						be->hdr.name);
+				kfree(sbe);
+				continue;
+			}
+		}
+	}
+	return kc;
+
+err:
+	for (--i; i >= 0; i--)
+		kfree((void *)kc[i].private_value);
+
+	kfree(kc);
+
+	return NULL;
+}
 static int soc_fw_dapm_widget_create(struct soc_fw *sfw,
 	struct snd_soc_fw_dapm_widget *w)
 {
@@ -1173,6 +1423,15 @@ static int soc_fw_dapm_widget_create(struct soc_fw *sfw,
 			goto hdr_err;
 		}
 		break;
+	case SOC_CONTROL_TYPE_BYTES_TLV:
+		widget.num_kcontrols = w->num_kcontrols;
+		widget.kcontrol_news = soc_fw_dapm_widget_dbytes_tlv_create(sfw, widget.num_kcontrols);
+		if (!widget.kcontrol_news) {
+			dev_err(sfw->dev, " ASoC: Bytes_TLV: no control\n");
+			ret = -ENOMEM;
+			goto hdr_err;
+		}
+		break;
 	default:
 		dev_err(sfw->dev, "ASoC: invalid widget control type %d:%d:%d\n",
 			SOC_CONTROL_GET_ID_GET(control_hdr->index),
@@ -1550,6 +1809,8 @@ int snd_soc_fw_load_platform(struct snd_soc_platform *platform,
 	sfw.io_ops_count = ops->io_ops_count;
 	sfw.dai_ops = ops->dai_ops;
 	sfw.dai_ops_count = ops->dai_ops_count;
+	sfw.tlv_ops = ops->tlv_ops;
+	sfw.tlv_ops_count = ops->tlv_ops_count;
 
 	return soc_fw_load(&sfw);
 }
-- 
1.9.1

