From 0fbd9ee9a3bf7cdd38dcf4555812fae0dd15aebb Mon Sep 17 00:00:00 2001
From: "Kurtadkar, Yashodhan" <yashodhan.kurtadkar@intel.com>
Date: Thu, 12 Feb 2015 02:23:14 +0530
Subject: [PATCH] EM/bq24192-charger: Disable safety timer

In order to run the MTBF long duration tests, charger saftey
timer is disabled. Otherwise the charging will be disabled
once safety timer expires and system starts draining the
battery, leading to mtbf failures. Safe charging can be
acheived with the help of watchdog timer, which will be
kicked in every 160s. If system hang, and software can't kick
watchdog, charging will be set to default charging parameters.

Also, this patch will not set the the watchdog timer during
probe.

The bug found in charger ic bq24192(PG1.0) to kick the WDT,
driver should write 8 times to the register. This is fixed in
bq24292 (PG1.1).
This patch addresses the WDT kick issue too.

Change-Id: I7603107536ef59b003ffc167e23fc1d2cf0a588d
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1068
Signed-off-by: Kurtadkar, Yashodhan <yashodhan.kurtadkar@intel.com>
Signed-off-by: R, Kannappan <r.kannappan@intel.com>
Reviewed-on: https://android.intel.com:443/331248
---
 drivers/power/bq24192_charger.c | 26 ++++++++++----------------
 1 file changed, 10 insertions(+), 16 deletions(-)

diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index 584b451..ad958fa 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -919,17 +919,15 @@ static int program_timers(struct bq24192_chip *chip, int wdt_duration,
 /* This function should be called with the mutex held */
 static int reset_wdt_timer(struct bq24192_chip *chip)
 {
-	int ret = 0, i;
+	int ret = 0;
 
 	/* reset WDT timer */
-	for (i = 0; i < MAX_RESET_WDT_RETRY; i++) {
-		ret = bq24192_reg_read_modify(chip->client,
-						BQ24192_POWER_ON_CFG_REG,
-						WDTIMER_RESET_MASK, true);
-		if (ret < 0)
-			dev_warn(&chip->client->dev, "I2C write failed:%s\n",
-							__func__);
-	}
+	ret = bq24192_reg_read_modify(chip->client,
+					BQ24192_POWER_ON_CFG_REG,
+					WDTIMER_RESET_MASK, true);
+	if (ret < 0)
+		dev_warn(&chip->client->dev, "I2C write failed:%s\n",
+						__func__);
 	return ret;
 }
 
@@ -1202,7 +1200,7 @@ static inline int bq24192_enable_charging(
 
 	dev_warn(&chip->client->dev, "%s:%d %d\n", __func__, __LINE__, val);
 
-	ret = program_timers(chip, CHRG_TIMER_EXP_CNTL_WDT160SEC, true);
+	ret = program_timers(chip, CHRG_TIMER_EXP_CNTL_WDT160SEC, false);
 	if (ret < 0) {
 		dev_err(&chip->client->dev,
 				"program_timers failed: %d\n", ret);
@@ -1750,9 +1748,10 @@ static void bq24192_irq_worker(struct work_struct *work)
 	dev_info(&chip->client->dev, "FAULT reg %x\n", reg_fault);
 	if (reg_fault & FAULT_STAT_WDT_TMR_EXP) {
 		dev_warn(&chip->client->dev, "WDT expiration fault\n");
+
 		if (chip->is_charging_enabled) {
 			program_timers(chip,
-					CHRG_TIMER_EXP_CNTL_WDT160SEC, true);
+					CHRG_TIMER_EXP_CNTL_WDT160SEC, false);
 			mutex_lock(&chip->event_lock);
 			bq24192_resume_charging(chip);
 			mutex_unlock(&chip->event_lock);
@@ -2165,11 +2164,6 @@ static int bq24192_probe(struct i2c_client *client,
 		return -EIO;
 	}
 
-	/* Enable the WDT and Disable Safety timer */
-	ret = program_timers(chip, CHRG_TIMER_EXP_CNTL_WDT160SEC, false);
-	if (ret < 0)
-		dev_warn(&chip->client->dev, "TIMER enable failed\n");
-
 	/*
 	 * Initialize the platform data
 	 */
-- 
1.9.1

