From 49378fd387f77074d1d5bce61782bda5e719d544 Mon Sep 17 00:00:00 2001
From: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date: Thu, 9 Oct 2014 13:01:14 -0700
Subject: soc_dts: Process bad soc temp read data

When the SOC temp read gives a value more than tjmax (90C), simply return
error to the caller. For close to critical (software max, at 85C),
confirm the value three times with variation less or equal to 2C.

Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
---
 drivers/thermal/intel_byt_dts_thermal.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/drivers/thermal/intel_byt_dts_thermal.c b/drivers/thermal/intel_byt_dts_thermal.c
index f079c2f..e50f6ca 100644
--- a/drivers/thermal/intel_byt_dts_thermal.c
+++ b/drivers/thermal/intel_byt_dts_thermal.c
@@ -19,6 +19,7 @@
 #include <linux/debugfs.h>
 #include <linux/slab.h>
 #include <linux/interrupt.h>
+#include <linux/delay.h>
 #include <asm/cpu_device_id.h>
 #include <asm/iosf_mbi.h>
 #include <linux/thermal.h>
@@ -248,9 +249,12 @@ static int sys_get_curr_temp(struct thermal_zone_device *tzd,
 	int status;
 	u32 out;
 	struct byt_aux_sensor_entry *aux_entry;
+	int retry_count = 0;
+	unsigned long last_temp = 0;
 
 	aux_entry = tzd->devdata;
 
+read_temp_again:
 	status = iosf_mbi_read(BT_MBI_UNIT_PMC, BT_MBI_BUNIT_READ,
 					BYT_AUX_DTS_OFFSET_TEMP, &out);
 	if (status)
@@ -260,6 +264,23 @@ static int sys_get_curr_temp(struct thermal_zone_device *tzd,
 	out -= 0x7F;
 	*temp = aux_entry->tj_max - out * 1000;
 
+	if (*temp > aux_entry->tj_max) {
+		pr_err("Ignore junk temp %lu \n", *temp);
+		return -EAGAIN; /* Let user space retry if required */
+	}
+
+	if ((*temp >= (aux_entry->tj_max - crit_offset)) &&
+						retry_count++ < 2) {
+		if (!last_temp)
+			last_temp = *temp;
+		else {
+			if (abs(last_temp - *temp) > 2000)
+				return -EINVAL;
+		}
+		udelay(100);
+		goto read_temp_again;
+	}
+
 	return 0;
 }
 
-- 
1.9.1

