From af5708a00cc143517a38e1c7d275f44fd34cb529 Mon Sep 17 00:00:00 2001
From: Xiang Wang <xiang.a.wang@intel.com>
Date: Tue, 2 Jun 2015 15:08:08 +0800
Subject: [PATCH] i2c: designware: do not release ownership during i2c_dw_init

If ownership is released in i2c_dw_init, it may be acquired by
PUNIT. PUNIT might see controller in bad state and cause hang.
After we removing "might sleep" clk operation out of i2c_dw_init,
we don't need to release ownership (atomic context is needed when
ownership is hold when use polling mode).

Change-Id: I7a2d5ffa975041409bedcdf111f62e9aa9f4ed93
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-30930
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1824
Signed-off-by: Xiang Wang <xiang.a.wang@intel.com>
---
 drivers/i2c/busses/i2c-designware-core.c    | 22 ++--------------------
 drivers/i2c/busses/i2c-designware-core.h    |  1 +
 drivers/i2c/busses/i2c-designware-pcidrv.c  |  1 +
 drivers/i2c/busses/i2c-designware-platdrv.c |  1 +
 4 files changed, 5 insertions(+), 20 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-core.c b/drivers/i2c/busses/i2c-designware-core.c
index aca702f86ec1..9c5e9f76569e 100644
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@ -294,28 +294,10 @@ static bool __i2c_dw_enable(struct dw_i2c_dev *dev, bool enable)
  */
 int i2c_dw_init(struct dw_i2c_dev *dev)
 {
-	u32 input_clock_khz;
+	u32 input_clock_khz = dev->clk_rate_khz;
 	u32 hcnt, lcnt;
 	u32 reg;
-	int timeout = TIMEOUT, ret;
-
-	/*
-	 * acquire_ownership may disable local irq.
-	 * So release it first and do operations that might sleep.
-	 */
-	if (dev->shared_host && dev->release_ownership)
-		dev->release_ownership();
-
-	input_clock_khz = dev->get_clk_rate_khz(dev);
-
-	if (dev->shared_host && dev->acquire_ownership) {
-		ret = dev->acquire_ownership();
-		if (ret < 0) {
-			dev_WARN(dev->dev, "%s couldn't acquire ownership\n",
-					__func__);
-			return ret;
-		}
-	}
+	int timeout = TIMEOUT;
 
 	do {
 		/*
diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index 91e23cae4f7d..8b96a58eac8c 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -85,6 +85,7 @@ struct dw_i2c_dev {
 	struct mutex		lock;
 	struct clk		*clk;
 	u32			(*get_clk_rate_khz) (struct dw_i2c_dev *dev);
+	u32			clk_rate_khz;
 	struct dw_pci_controller *controller;
 	int			cmd_err;
 	struct i2c_msg		*msgs;
diff --git a/drivers/i2c/busses/i2c-designware-pcidrv.c b/drivers/i2c/busses/i2c-designware-pcidrv.c
index 3ef324389397..6b0ef92adbde 100644
--- a/drivers/i2c/busses/i2c-designware-pcidrv.c
+++ b/drivers/i2c/busses/i2c-designware-pcidrv.c
@@ -245,6 +245,7 @@ static int i2c_dw_pci_probe(struct pci_dev *pdev,
 	dev->clk = NULL;
 	dev->controller = controller;
 	dev->get_clk_rate_khz = i2c_dw_get_clk_rate_khz;
+	dev->clk_rate_khz = dev->get_clk_rate_khz(dev);
 	dev->base = pcim_iomap_table(pdev)[0];
 	dev->dev = &pdev->dev;
 	dev->functionality =
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 105e28af3ae3..7feb0ff15af9 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -318,6 +318,7 @@ static int dw_i2c_probe(struct platform_device *pdev)
 	if (IS_ERR(dev->clk))
 		return PTR_ERR(dev->clk);
 	clk_prepare_enable(dev->clk);
+	dev->clk_rate_khz = dev->get_clk_rate_khz(dev);
 
 	if (pdev->dev.of_node) {
 		u32 ht = 0;
-- 
1.9.1

