From c1f28cc0f9c91f212726b3cab9389baa1fad57e2 Mon Sep 17 00:00:00 2001
From: Jayachandran B <jayachandran.b@intel.com>
Date: Mon, 22 Sep 2014 23:02:48 +0530
Subject: [PATCH 09/13] ASoC: Intel: CHT: Move platform dev creation to SST
 driver

Issue: GMINL-1602

sst-platform device creation is moved to SST driver.
This will help to set the platform data(Eg. SSP configuration)
appropriately since the necessary info for platform identification
is available in SST driver.

Change-Id: If4f1c1892010d251b5674748db979626e07901a3
Signed-off-by: Jayachandran B <jayachandran.b@intel.com>
---
 arch/x86/include/asm/platform_sst_audio.h          |    3 +-
 arch/x86/platform/intel-mid/device_libs/Makefile   |    1 -
 .../intel-mid/device_libs/platform_byt_audio.c     |    8 -
 .../intel-mid/device_libs/platform_msic_audio.c    |   47 ---
 .../intel-mid/device_libs/platform_sst_audio.c     |  384 --------------------
 sound/soc/intel/sst/Makefile                       |    2 +-
 sound/soc/intel/sst/sst.c                          |    6 +
 sound/soc/intel/sst/sst.h                          |    2 +
 sound/soc/intel/sst/sst_platform.c                 |  377 +++++++++++++++++++
 9 files changed, 388 insertions(+), 442 deletions(-)
 delete mode 100644 arch/x86/platform/intel-mid/device_libs/platform_msic_audio.c
 delete mode 100644 arch/x86/platform/intel-mid/device_libs/platform_sst_audio.c
 create mode 100644 sound/soc/intel/sst/sst_platform.c

diff --git a/arch/x86/include/asm/platform_sst_audio.h b/arch/x86/include/asm/platform_sst_audio.h
index 85bee41..0955197 100644
--- a/arch/x86/include/asm/platform_sst_audio.h
+++ b/arch/x86/include/asm/platform_sst_audio.h
@@ -232,6 +232,7 @@ struct sst_platform_data {
 	const struct sst_ssp_config ssp_config[SST_NUM_SSPS][SST_MAX_SSP_MUX][SST_MAX_SSP_DOMAINS];
 };
 
-int add_sst_platform_device(void);
+int sst_audio_platform_init(int dev_id);
+
 #endif
 
diff --git a/arch/x86/platform/intel-mid/device_libs/Makefile b/arch/x86/platform/intel-mid/device_libs/Makefile
index 9c3efcb..61b64d9 100644
--- a/arch/x86/platform/intel-mid/device_libs/Makefile
+++ b/arch/x86/platform/intel-mid/device_libs/Makefile
@@ -1,6 +1,5 @@
 # IPC Devices
 #obj-y += platform_ipc.o
-obj-y += platform_sst_audio.o
 obj-$(subst m,y,$(CONFIG_SND_SST_PLATFORM)) += platform_byt_audio.o
 obj-$(subst m,y,$(CONFIG_MFD_INTEL_MSIC)) += platform_msic.o
 obj-$(subst m,y,$(CONFIG_SND_MFLD_MACHINE)) += platform_msic_audio.o
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_byt_audio.c b/arch/x86/platform/intel-mid/device_libs/platform_byt_audio.c
index e4b35d5..36ce2ee 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_byt_audio.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_byt_audio.c
@@ -12,23 +12,15 @@
 
 #include <linux/kernel.h>
 #include <linux/init.h>
-#include <asm/platform_sst_audio.h>
 #include <linux/platform_device.h>
 
 
 static int __init byt_audio_platform_init(void)
 {
 	struct platform_device *pdev;
-	int ret;
 
 	pr_debug("%s: Enter.\n", __func__);
 
-	ret = add_sst_platform_device();
-	if (ret < 0) {
-		pr_err("%s failed to sst_platform device\n", __func__);
-		return 0;
-	}
-
 	pdev = platform_device_register_simple("hdmi-audio", -1, NULL, 0);
 
 	return 0;
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_msic_audio.c b/arch/x86/platform/intel-mid/device_libs/platform_msic_audio.c
deleted file mode 100644
index 2962939..0000000
--- a/arch/x86/platform/intel-mid/device_libs/platform_msic_audio.c
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * platform_msic_audio.c: MSIC audio platform data initilization file
- *
- * (C) Copyright 2013 Intel Corporation
- * Author: Sathyanarayanan Kuppuswamy <sathyanarayanan.kuppuswamy@intel.com>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; version 2
- * of the License.
- */
-
-#include <linux/kernel.h>
-#include <linux/interrupt.h>
-#include <linux/scatterlist.h>
-#include <linux/init.h>
-#include <linux/sfi.h>
-#include <linux/platform_device.h>
-#include <linux/mfd/intel_msic.h>
-#include <asm/intel-mid.h>
-
-#include "platform_msic.h"
-#include "platform_ipc.h"
-
-static void *msic_audio_platform_data(void *info)
-{
-	struct platform_device *pdev;
-
-	pdev = platform_device_register_simple("sst-platform", -1, NULL, 0);
-
-	if (IS_ERR(pdev)) {
-		pr_err("failed to create audio platform device\n");
-		return NULL;
-	}
-
-	return msic_generic_platform_data(info, INTEL_MSIC_BLOCK_AUDIO);
-}
-
-static const struct devs_id msic_audio_dev_id __initconst = {
-	.name = "msic_audio",
-	.type = SFI_DEV_TYPE_IPC,
-	.delay = 1,
-	.get_platform_data = &msic_audio_platform_data,
-	.device_handler = &ipc_device_handler,
-};
-
-sfi_device(msic_audio_dev_id);
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_sst_audio.c b/arch/x86/platform/intel-mid/device_libs/platform_sst_audio.c
deleted file mode 100644
index 633d8d2..0000000
--- a/arch/x86/platform/intel-mid/device_libs/platform_sst_audio.c
+++ /dev/null
@@ -1,384 +0,0 @@
-/*
- * platform_sst_libs.c: SST platform  data initilization file
- *
- * Copyright (C) 2012 Intel Corporation
- * Author: Jeeja KP <jeeja.kp@intel.com>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; version 2
- * of the License.
- */
-
-#include <linux/kernel.h>
-#include <linux/init.h>
-#include <linux/sfi.h>
-#include <linux/platform_device.h>
-#include <asm/platform_sst_audio.h>
-#include <asm/intel-mid.h>
-#include <asm/intel_sst_mrfld.h>
-#include <asm/platform_byt_audio.h>
-#include <sound/asound.h>
-
-static struct sst_platform_data sst_platform_pdata;
-static struct sst_dev_stream_map byt_bl_strm_map[] = {
-	{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, /* Reserved, not in use */
-	{BYT_AUD_AIF1, 0, SNDRV_PCM_STREAM_PLAYBACK, SST_PCM_OUT0, SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-	{BYT_AUD_AIF1, 1, SNDRV_PCM_STREAM_PLAYBACK, SST_PCM_OUT1, SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-	{BYT_AUD_COMPR_DEV, 0, SNDRV_PCM_STREAM_PLAYBACK, SST_COMPRESSED_OUT,
-					SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-	{BYT_AUD_AIF1, 0, SNDRV_PCM_STREAM_CAPTURE, SST_CAPTURE_IN, SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-};
-static struct sst_dev_stream_map byt_cr_strm_map[] = {
-	{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, /* Reserved, not in use */
-	{BYT_CR_AUD_AIF1, 0, SNDRV_PCM_STREAM_PLAYBACK, SST_PCM_OUT0, SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-	{BYT_CR_AUD_AIF1, 1, SNDRV_PCM_STREAM_PLAYBACK, SST_PCM_OUT1, SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-	{BYT_CR_AUD_COMPR_DEV, 0, SNDRV_PCM_STREAM_PLAYBACK, SST_COMPRESSED_OUT,
-					SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-	{BYT_CR_AUD_AIF1, 0, SNDRV_PCM_STREAM_CAPTURE, SST_CAPTURE_IN, SST_TASK_ID_NONE, SST_DEV_MAP_IN_USE},
-};
-
-static struct sst_dev_stream_map mrfld_strm_map[] = {
-	{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, /* Reserved, not in use */
-	{MERR_SALTBAY_AUDIO, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_AUDIO, 1, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_AUDIO, 2, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_COMPR, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_MEDIA0_IN, SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
-	{MERR_SALTBAY_VOIP, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_VOIP_IN, SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
-	{MERR_SALTBAY_AUDIO, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_PCM1_OUT, SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
-	{MERR_SALTBAY_VOIP, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_VOIP_OUT, SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
-	{MERR_SALTBAY_PROBE, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 1, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 2, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 3, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 4, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 5, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 6, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 7, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 1, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 2, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 3, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 4, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 5, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 6, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_PROBE, 7, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD, SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
-	{MERR_SALTBAY_AWARE, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_AWARE_OUT, SST_TASK_ID_AWARE, SST_DEV_MAP_IN_USE},
-	{MERR_SALTBAY_VAD, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_VAD_OUT, SST_TASK_ID_AWARE, SST_DEV_MAP_IN_USE},
-};
-
-#define EQ_EFFECT_ALGO_ID 0x99
-static struct sst_dev_effects_map mrfld_effs_map[] = {
-	{
-	  {0xc1, 0x47, 0xa2, 0xf7, 0x7b, 0x1a, 0xe0, 0x11, 0x0d, 0xbb, 0x2a, 0x30, 0xdf, 0xd7, 0x20, 0x45},/* uuid */
-	   EQ_EFFECT_ALGO_ID,										   /* algo id */
-	  {0x00, 0x43, 0xed, 0x0b, 0xd6, 0xdd, 0xdb, 0x11, 0x34, 0x8f, 0x00, 0x02, 0xa5, 0xd5, 0xc5, 0x1b, /* descriptor */
-	   0xc1, 0x47, 0xa2, 0xf7, 0x7b, 0x1a, 0xe0, 0x11, 0x0d, 0xbb, 0x2a, 0x30, 0xdf, 0xd7, 0x20, 0x45,
-	   0x12, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x45, 0x71, 0x75, 0x61,
-	   0x6c, 0x69, 0x7a, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x74, 0x65,
-	   0x6c, 0x20, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00,
-	   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	  },
-	}
-};
-
-static struct sst_dev_effects_resource_map mrfld_effs_res_map[] = {
-	{
-	 {0xc1, 0x47, 0xa2, 0xf7, 0x7b, 0x1a, 0xe0, 0x11, 0x0d, 0xbb, 0x2a, 0x30, 0xdf, 0xd7, 0x20, 0x45}, /* uuid */
-	  0x50, /* Flags */
-	  0x00, /* Cpu load */
-	  0x01, /* Memory Usage */
-	 }
-};
-
-static const int sst_ssp_mux_shift[SST_NUM_SSPS] = {
-	[SST_SSP0] = -1,			/* no register shift, i.e. single mux value */
-	[SST_SSP1] = SST_BT_FM_MUX_SHIFT,
-	[SST_SSP2] = -1,
-};
-
-static const int sst_ssp_domain_shift[SST_NUM_SSPS][SST_MAX_SSP_MUX] = {
-	[SST_SSP0][0] = -1,			/* no domain shift, i.e. single domain */
-	[SST_SSP1] = {
-		[SST_SSP_FM_MUX] = -1,
-		[SST_SSP_BT_MUX] = SST_BT_MODE_SHIFT,
-	},
-	[SST_SSP2][0] = -1,
-};
-
-#define SST_SSP_CODEC_MUX		0
-#define SST_SSP_CODEC_DOMAIN		0
-#define SST_SSP_MODEM_MUX		0
-#define SST_SSP_MODEM_DOMAIN		0
-#define SST_SSP_FM_MUX			0
-#define SST_SSP_FM_DOMAIN		0
-#define SST_SSP_BT_MUX			1
-#define SST_SSP_BT_NB_DOMAIN		0
-#define SST_SSP_BT_WB_DOMAIN		1
-
-/**
- * sst_ssp_config - contains SSP configuration for different UCs
- *
- * The 3-D array contains SSP configuration for different SSPs for different
- * domains (e.g. NB, WB), as well as muxed SSPs.
- *
- * The first dimension has SSP number
- * The second dimension has SSP Muxing (e.g. BT/FM muxed on same SSP)
- * The third dimension has SSP domains (e.g. NB/WB for BT)
- */
-static const struct sst_ssp_config
-sst_ssp_configs_mrfld[SST_NUM_SSPS][SST_MAX_SSP_MUX][SST_MAX_SSP_DOMAINS] = {
-	[SST_SSP0] = {
-		[SST_SSP_MODEM_MUX] = {
-			[SST_SSP_MODEM_DOMAIN] = {
-				.ssp_id = SSP_MODEM,
-				.bits_per_slot = 16,
-				.slots = 1,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NETWORK,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_PCM,
-				.fs_width = 1,
-				.fs_frequency = SSP_FS_48_KHZ,
-				.active_slot_map = 0x1,
-				.start_delay = 1,
-			},
-		},
-	},
-	[SST_SSP1] = {
-		[SST_SSP_FM_MUX] = {
-			[SST_SSP_FM_DOMAIN] = {
-				.ssp_id = SSP_FM,
-				.bits_per_slot = 16,
-				.slots = 2,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NORMAL,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_I2S,
-				.fs_width = 32,
-				.fs_frequency = SSP_FS_48_KHZ,
-				.active_slot_map = 0x3,
-				.start_delay = 0,
-			},
-		},
-		[SST_SSP_BT_MUX] = {
-			[SST_SSP_BT_NB_DOMAIN] = {
-				.ssp_id = SSP_BT,
-				.bits_per_slot = 16,
-				.slots = 1,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NORMAL,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_PCM,
-				.fs_width = 1,
-				.fs_frequency = SSP_FS_8_KHZ,
-				.active_slot_map = 0x1,
-				.start_delay = 1,
-			},
-			[SST_SSP_BT_WB_DOMAIN] = {
-				.ssp_id = SSP_BT,
-				.bits_per_slot = 16,
-				.slots = 1,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NORMAL,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_PCM,
-				.fs_width = 1,
-				.fs_frequency = SSP_FS_16_KHZ,
-				.active_slot_map = 0x1,
-				.start_delay = 1,
-			},
-		},
-	},
-	[SST_SSP2] = {
-		[SST_SSP_CODEC_MUX] = {
-			[SST_SSP_CODEC_DOMAIN] = {
-				.ssp_id = SSP_CODEC,
-				.bits_per_slot = 24,
-				.slots = 4,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NETWORK,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_PCM,
-				.fs_width = 1,
-				.fs_frequency = SSP_FS_48_KHZ,
-				.active_slot_map = 0xF,
-				.start_delay = 0,
-			},
-		},
-	},
-};
-
-static const struct sst_ssp_config
-sst_ssp_configs_cht_cr[SST_NUM_SSPS][SST_MAX_SSP_MUX][SST_MAX_SSP_DOMAINS] = {
-	[SST_SSP0] = {
-		[SST_SSP_MODEM_MUX] = {
-			[SST_SSP_MODEM_DOMAIN] = {
-				.ssp_id = SSP_MODEM,
-				.bits_per_slot = 16,
-				.slots = 1,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NETWORK,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_PCM,
-				.fs_width = 1,
-				.fs_frequency = SSP_FS_48_KHZ,
-				.active_slot_map = 0x1,
-				.start_delay = 1,
-			},
-		},
-	},
-	[SST_SSP1] = {
-		[SST_SSP_FM_MUX] = {
-			[SST_SSP_FM_DOMAIN] = {
-				.ssp_id = SSP_FM,
-				.bits_per_slot = 16,
-				.slots = 2,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NORMAL,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_I2S,
-				.fs_width = 32,
-				.fs_frequency = SSP_FS_48_KHZ,
-				.active_slot_map = 0x3,
-				.start_delay = 0,
-			},
-		},
-		[SST_SSP_BT_MUX] = {
-			[SST_SSP_BT_NB_DOMAIN] = {
-				.ssp_id = SSP_BT,
-				.bits_per_slot = 16,
-				.slots = 1,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NORMAL,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_PCM,
-				.fs_width = 1,
-				.fs_frequency = SSP_FS_8_KHZ,
-				.active_slot_map = 0x1,
-				.start_delay = 0,
-			},
-			[SST_SSP_BT_WB_DOMAIN] = {
-				.ssp_id = SSP_BT,
-				.bits_per_slot = 16,
-				.slots = 1,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NORMAL,
-				.data_polarity = 1,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_PCM,
-				.fs_width = 1,
-				.fs_frequency = SSP_FS_16_KHZ,
-				.active_slot_map = 0x1,
-				.start_delay = 1,
-			},
-		},
-	},
-	[SST_SSP2] = {
-		[SST_SSP_CODEC_MUX] = {
-			[SST_SSP_CODEC_DOMAIN] = {
-				.ssp_id = SSP_CODEC,
-				.bits_per_slot = 24,
-				.slots = 2,
-				.ssp_mode = SSP_MODE_MASTER,
-				.pcm_mode = SSP_PCM_MODE_NORMAL,
-				.data_polarity = 0,
-				.duplex = SSP_DUPLEX,
-				.ssp_protocol = SSP_MODE_I2S,
-				.fs_width = 24,
-				.fs_frequency = SSP_FS_48_KHZ,
-				.active_slot_map = 0x3,
-				.start_delay = 1,
-			},
-		},
-	},
-};
-
-static void set_byt_cr_platform_config(void)
-{
-	sst_platform_pdata.pdev_strm_map = byt_cr_strm_map;
-	sst_platform_pdata.strm_map_size =  ARRAY_SIZE(byt_cr_strm_map);
-	pr_debug("audio:byt_cr:strm_map_size %d\n", sst_platform_pdata.strm_map_size);
-}
-
-static void set_byt_platform_config(void)
-{
-	sst_platform_pdata.pdev_strm_map = byt_bl_strm_map;
-	sst_platform_pdata.strm_map_size =  ARRAY_SIZE(byt_bl_strm_map);
-}
-
-static void set_cht_platform_config(void)
-{
-	sst_platform_pdata.pdev_strm_map = mrfld_strm_map;
-	sst_platform_pdata.strm_map_size = ARRAY_SIZE(mrfld_strm_map);
-	memcpy(sst_platform_pdata.ssp_config, sst_ssp_configs_mrfld, sizeof(sst_ssp_configs_mrfld));
-	memcpy(sst_platform_pdata.mux_shift, sst_ssp_mux_shift, sizeof(sst_ssp_mux_shift));
-	memcpy(sst_platform_pdata.domain_shift, sst_ssp_domain_shift, sizeof(sst_ssp_domain_shift));
-}
-
-static void set_cht_cr_platform_config(void)
-{
-	sst_platform_pdata.pdev_strm_map = mrfld_strm_map;
-	sst_platform_pdata.strm_map_size = ARRAY_SIZE(mrfld_strm_map);
-	memcpy(sst_platform_pdata.ssp_config, sst_ssp_configs_cht_cr, sizeof(sst_ssp_configs_cht_cr));
-	memcpy(sst_platform_pdata.mux_shift, sst_ssp_mux_shift, sizeof(sst_ssp_mux_shift));
-	memcpy(sst_platform_pdata.domain_shift, sst_ssp_domain_shift, sizeof(sst_ssp_domain_shift));
-}
-
-static void set_mrfld_platform_config(void)
-{
-	sst_platform_pdata.pdev_strm_map = mrfld_strm_map;
-	sst_platform_pdata.strm_map_size = ARRAY_SIZE(mrfld_strm_map);
-	sst_platform_pdata.pdev_effs.effs_map = mrfld_effs_map;
-	sst_platform_pdata.pdev_effs.effs_res_map = mrfld_effs_res_map;
-	sst_platform_pdata.pdev_effs.effs_num_map = ARRAY_SIZE(mrfld_effs_map);
-	memcpy(sst_platform_pdata.ssp_config, sst_ssp_configs_mrfld, sizeof(sst_ssp_configs_mrfld));
-	memcpy(sst_platform_pdata.mux_shift, sst_ssp_mux_shift, sizeof(sst_ssp_mux_shift));
-	memcpy(sst_platform_pdata.domain_shift, sst_ssp_domain_shift, sizeof(sst_ssp_domain_shift));
-}
-
-static void  populate_platform_data(void)
-{
-	set_cht_cr_platform_config();
-}
-
-int add_sst_platform_device(void)
-{
-	struct platform_device *pdev = NULL;
-	int ret;
-	populate_platform_data();
-
-	pdev = platform_device_alloc("sst-platform", -1);
-	if (!pdev) {
-		pr_err("failed to allocate audio platform device\n");
-		return -EINVAL;
-	}
-
-	ret = platform_device_add_data(pdev, &sst_platform_pdata,
-					sizeof(sst_platform_pdata));
-	if (ret) {
-		pr_err("failed to add sst platform data\n");
-		platform_device_put(pdev);
-		return  -EINVAL;
-	}
-	ret = platform_device_add(pdev);
-	if (ret) {
-		pr_err("failed to add audio platform device\n");
-		platform_device_put(pdev);
-		return  -EINVAL;
-	}
-	return ret;
-}
diff --git a/sound/soc/intel/sst/Makefile b/sound/soc/intel/sst/Makefile
index 45f1ec3..524c05e 100644
--- a/sound/soc/intel/sst/Makefile
+++ b/sound/soc/intel/sst/Makefile
@@ -1,5 +1,5 @@
 # Makefile for SST Audio driver
-snd-intel-sst-objs := sst.o sst_ipc.o sst_stream.o sst_drv_interface.o sst_dsp.o sst_pvt.o sst_app_interface.o sst_acpi.o
+snd-intel-sst-objs := sst.o sst_ipc.o sst_stream.o sst_drv_interface.o sst_dsp.o sst_pvt.o sst_app_interface.o sst_acpi.o sst_platform.o
 
 ifdef CONFIG_DEBUG_FS
 	snd-intel-sst-objs += sst_debug.o
diff --git a/sound/soc/intel/sst/sst.c b/sound/soc/intel/sst/sst.c
index 4146ff7..82029b6 100644
--- a/sound/soc/intel/sst/sst.c
+++ b/sound/soc/intel/sst/sst.c
@@ -620,6 +620,12 @@ int sst_request_firmware_async(struct intel_sst_drv *ctx)
 	struct mach_codec_link const *mc_link;
 	struct board_config const *conf;
 
+	ret = sst_audio_platform_init(ctx->pci_id);
+	if (ret) {
+		pr_err("failed to register platform device; Exiting\n");
+		return -ENOENT;
+	}
+
 	if (ctx->pci_id == SST_BYT_PCI_ID) {
 		mc_link = get_mc_link();
 		if (mc_link == NULL) {
diff --git a/sound/soc/intel/sst/sst.h b/sound/soc/intel/sst/sst.h
index 3930027..c0bdd15 100644
--- a/sound/soc/intel/sst/sst.h
+++ b/sound/soc/intel/sst/sst.h
@@ -32,6 +32,8 @@
 #include <linux/lnw_gpio.h>
 #include <asm/platform_sst.h>
 #include <sound/intel_sst_ioctl.h>
+#include "../sst_platform.h"
+#include "../platform_ipc_v2.h"
 
 #define SST_DRIVER_VERSION "3.0.8"
 
diff --git a/sound/soc/intel/sst/sst_platform.c b/sound/soc/intel/sst/sst_platform.c
new file mode 100644
index 0000000..599fb26
--- /dev/null
+++ b/sound/soc/intel/sst/sst_platform.c
@@ -0,0 +1,377 @@
+/*
+ * sst_platform.c: SST platform  data initilization file
+ *
+ * Copyright (C) 2012 Intel Corporation
+ * Author: Jeeja KP <jeeja.kp@intel.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; version 2
+ * of the License.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sfi.h>
+#include <linux/platform_device.h>
+#include <asm/platform_sst_audio.h>
+#include <asm/intel-mid.h>
+#include <asm/intel_sst_mrfld.h>
+#include <asm/platform_byt_audio.h>
+#include <sound/asound.h>
+#include "sst.h"
+
+static struct sst_platform_data sst_platform_pdata;
+static struct sst_dev_stream_map mrfld_strm_map[] = {
+	{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, /* Reserved, not in use */
+	{MERR_SALTBAY_AUDIO, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_AUDIO, 1, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_AUDIO, 2, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_COMPR, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_MEDIA0_IN,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
+	{MERR_SALTBAY_VOIP, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_VOIP_IN,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
+	{MERR_SALTBAY_AUDIO, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_PCM1_OUT,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
+	{MERR_SALTBAY_VOIP, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_VOIP_OUT,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
+	{MERR_SALTBAY_PROBE, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 1, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 2, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 3, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 4, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 5, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 6, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 7, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 1, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 2, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 3, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 4, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 5, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 6, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_PROBE, 7, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
+	SST_TASK_ID_MEDIA, SST_DEV_MAP_FREE},
+	{MERR_SALTBAY_AWARE, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_AWARE_OUT,
+	SST_TASK_ID_AWARE, SST_DEV_MAP_IN_USE},
+	{MERR_SALTBAY_VAD, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_VAD_OUT,
+	SST_TASK_ID_AWARE, SST_DEV_MAP_IN_USE},
+};
+
+static const int sst_ssp_mux_shift[SST_NUM_SSPS] = {
+	[SST_SSP0] = -1,	/* no register shift, i.e. single mux value */
+	[SST_SSP1] = SST_BT_FM_MUX_SHIFT,
+	[SST_SSP2] = -1,
+};
+
+static const int sst_ssp_domain_shift[SST_NUM_SSPS][SST_MAX_SSP_MUX] = {
+	[SST_SSP0][0] = -1,	/* no domain shift, i.e. single domain */
+	[SST_SSP1] = {
+		[SST_SSP_FM_MUX] = -1,
+		[SST_SSP_BT_MUX] = SST_BT_MODE_SHIFT,
+	},
+	[SST_SSP2][0] = -1,
+};
+
+#define SST_SSP_CODEC_MUX		0
+#define SST_SSP_CODEC_DOMAIN		0
+#define SST_SSP_MODEM_MUX		0
+#define SST_SSP_MODEM_DOMAIN		0
+#define SST_SSP_FM_MUX			0
+#define SST_SSP_FM_DOMAIN		0
+#define SST_SSP_BT_MUX			1
+#define SST_SSP_BT_NB_DOMAIN		0
+#define SST_SSP_BT_WB_DOMAIN		1
+
+/**
+ * sst_ssp_config - contains SSP configuration for different UCs
+ *
+ * The 3-D array contains SSP configuration for different SSPs for different
+ * domains (e.g. NB, WB), as well as muxed SSPs.
+ *
+ * The first dimension has SSP number
+ * The second dimension has SSP Muxing (e.g. BT/FM muxed on same SSP)
+ * The third dimension has SSP domains (e.g. NB/WB for BT)
+ */
+static const struct sst_ssp_config
+sst_ssp_configs_mrfld[SST_NUM_SSPS][SST_MAX_SSP_MUX][SST_MAX_SSP_DOMAINS] = {
+	[SST_SSP0] = {
+		[SST_SSP_MODEM_MUX] = {
+			[SST_SSP_MODEM_DOMAIN] = {
+				.ssp_id = SSP_MODEM,
+				.bits_per_slot = 16,
+				.slots = 1,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NETWORK,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_PCM,
+				.fs_width = 1,
+				.fs_frequency = SSP_FS_48_KHZ,
+				.active_slot_map = 0x1,
+				.start_delay = 1,
+			},
+		},
+	},
+	[SST_SSP1] = {
+		[SST_SSP_FM_MUX] = {
+			[SST_SSP_FM_DOMAIN] = {
+				.ssp_id = SSP_FM,
+				.bits_per_slot = 16,
+				.slots = 2,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NORMAL,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_I2S,
+				.fs_width = 32,
+				.fs_frequency = SSP_FS_48_KHZ,
+				.active_slot_map = 0x3,
+				.start_delay = 0,
+			},
+		},
+		[SST_SSP_BT_MUX] = {
+			[SST_SSP_BT_NB_DOMAIN] = {
+				.ssp_id = SSP_BT,
+				.bits_per_slot = 16,
+				.slots = 1,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NORMAL,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_PCM,
+				.fs_width = 1,
+				.fs_frequency = SSP_FS_8_KHZ,
+				.active_slot_map = 0x1,
+				.start_delay = 1,
+			},
+			[SST_SSP_BT_WB_DOMAIN] = {
+				.ssp_id = SSP_BT,
+				.bits_per_slot = 16,
+				.slots = 1,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NORMAL,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_PCM,
+				.fs_width = 1,
+				.fs_frequency = SSP_FS_16_KHZ,
+				.active_slot_map = 0x1,
+				.start_delay = 1,
+			},
+		},
+	},
+	[SST_SSP2] = {
+		[SST_SSP_CODEC_MUX] = {
+			[SST_SSP_CODEC_DOMAIN] = {
+				.ssp_id = SSP_CODEC,
+				.bits_per_slot = 24,
+				.slots = 4,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NETWORK,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_PCM,
+				.fs_width = 1,
+				.fs_frequency = SSP_FS_48_KHZ,
+				.active_slot_map = 0xF,
+				.start_delay = 0,
+			},
+		},
+	},
+};
+
+static const struct sst_ssp_config
+sst_ssp_configs_cht_cr[SST_NUM_SSPS][SST_MAX_SSP_MUX][SST_MAX_SSP_DOMAINS] = {
+	[SST_SSP0] = {
+		[SST_SSP_MODEM_MUX] = {
+			[SST_SSP_MODEM_DOMAIN] = {
+				.ssp_id = SSP_MODEM,
+				.bits_per_slot = 16,
+				.slots = 1,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NETWORK,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_PCM,
+				.fs_width = 1,
+				.fs_frequency = SSP_FS_48_KHZ,
+				.active_slot_map = 0x1,
+				.start_delay = 1,
+			},
+		},
+	},
+	[SST_SSP1] = {
+		[SST_SSP_FM_MUX] = {
+			[SST_SSP_FM_DOMAIN] = {
+				.ssp_id = SSP_FM,
+				.bits_per_slot = 16,
+				.slots = 2,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NORMAL,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_I2S,
+				.fs_width = 32,
+				.fs_frequency = SSP_FS_48_KHZ,
+				.active_slot_map = 0x3,
+				.start_delay = 0,
+			},
+		},
+		[SST_SSP_BT_MUX] = {
+			[SST_SSP_BT_NB_DOMAIN] = {
+				.ssp_id = SSP_BT,
+				.bits_per_slot = 16,
+				.slots = 1,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NORMAL,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_PCM,
+				.fs_width = 1,
+				.fs_frequency = SSP_FS_8_KHZ,
+				.active_slot_map = 0x1,
+				.start_delay = 0,
+			},
+			[SST_SSP_BT_WB_DOMAIN] = {
+				.ssp_id = SSP_BT,
+				.bits_per_slot = 16,
+				.slots = 1,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NORMAL,
+				.data_polarity = 1,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_PCM,
+				.fs_width = 1,
+				.fs_frequency = SSP_FS_16_KHZ,
+				.active_slot_map = 0x1,
+				.start_delay = 1,
+			},
+		},
+	},
+	[SST_SSP2] = {
+		[SST_SSP_CODEC_MUX] = {
+			[SST_SSP_CODEC_DOMAIN] = {
+				.ssp_id = SSP_CODEC,
+				.bits_per_slot = 24,
+				.slots = 2,
+				.ssp_mode = SSP_MODE_MASTER,
+				.pcm_mode = SSP_PCM_MODE_NORMAL,
+				.data_polarity = 0,
+				.duplex = SSP_DUPLEX,
+				.ssp_protocol = SSP_MODE_I2S,
+				.fs_width = 24,
+				.fs_frequency = SSP_FS_48_KHZ,
+				.active_slot_map = 0x3,
+				.start_delay = 1,
+			},
+		},
+	},
+};
+
+
+static void set_cht_platform_config(void)
+{
+	sst_platform_pdata.pdev_strm_map = mrfld_strm_map;
+	sst_platform_pdata.strm_map_size = ARRAY_SIZE(mrfld_strm_map);
+	memcpy(sst_platform_pdata.ssp_config, sst_ssp_configs_mrfld,
+						sizeof(sst_ssp_configs_mrfld));
+	memcpy(sst_platform_pdata.mux_shift, sst_ssp_mux_shift,
+						sizeof(sst_ssp_mux_shift));
+	memcpy(sst_platform_pdata.domain_shift, sst_ssp_domain_shift,
+						sizeof(sst_ssp_domain_shift));
+	pr_info("audio:%s\n", __func__);
+}
+
+static void set_cht_cr_platform_config(void)
+{
+	sst_platform_pdata.pdev_strm_map = mrfld_strm_map;
+	sst_platform_pdata.strm_map_size = ARRAY_SIZE(mrfld_strm_map);
+	memcpy(sst_platform_pdata.ssp_config, sst_ssp_configs_cht_cr,
+						sizeof(sst_ssp_configs_cht_cr));
+	memcpy(sst_platform_pdata.mux_shift, sst_ssp_mux_shift,
+						sizeof(sst_ssp_mux_shift));
+	memcpy(sst_platform_pdata.domain_shift, sst_ssp_domain_shift,
+						sizeof(sst_ssp_domain_shift));
+	pr_info("audio:%s\n", __func__);
+}
+
+static int  populate_platform_data(int dev_id)
+{
+	if (dev_id == SST_CHT_PCI_ID)
+		set_cht_platform_config();
+	else if (dev_id == SST_BYT_PCI_ID)
+		set_cht_cr_platform_config();
+	else {
+		pr_err("%s: invalid device_id %d\n", __func__, dev_id);
+		return  -EINVAL;
+	}
+	return 0;
+}
+
+static int add_sst_platform_device(int dev_id)
+{
+	struct platform_device *pdev = NULL;
+	int ret;
+
+	ret = populate_platform_data(dev_id);
+	if (ret) {
+		pr_err("failed to populate sst platform data\n");
+		return  -EINVAL;
+	}
+
+	pdev = platform_device_alloc("sst-platform", -1);
+	if (!pdev) {
+		pr_err("failed to allocate audio platform device\n");
+		return -EINVAL;
+	}
+
+	ret = platform_device_add_data(pdev, &sst_platform_pdata,
+					sizeof(sst_platform_pdata));
+	if (ret) {
+		pr_err("failed to add sst platform data\n");
+		platform_device_put(pdev);
+		return  -EINVAL;
+	}
+	ret = platform_device_add(pdev);
+	if (ret) {
+		pr_err("failed to add audio platform device\n");
+		platform_device_put(pdev);
+		return  -EINVAL;
+	}
+	return ret;
+}
+
+
+int sst_audio_platform_init(int dev_id)
+{
+	int ret;
+
+	pr_info("Enter: %s\n", __func__);
+
+	ret = add_sst_platform_device(dev_id);
+	if (ret < 0)
+		pr_err("%s failed to add sst-platform device\n", __func__);
+
+	return ret;
+}
-- 
1.7.9.5

