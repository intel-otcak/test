From 81ee92d5839846dd59d1783719a389c38323378f Mon Sep 17 00:00:00 2001
From: "Thulasimani,Sivakumar" <sivakumar.thulasimani@intel.com>
Date: Thu, 31 Mar 2016 00:39:28 +0530
Subject: [PATCH 17/19] SQUASHME! [VPG]: drm/i915: Always do fake detach-attach
 for SHPD failure

It was incorrect to assume that forcing full detect when
handling short pulse interrupt failures will recover the
system. It will just end up detecting the panel as still
connected and exit. hence force fake detach and attach
for all short pulse failures to allow the system
to be recovered.

Upfront logic is not required for simulated detach and attach since
it is expected that the lane count will not change through
short pulse. This also helps in avoiding the time spent in
upfront link training.

This patch has to be squashed to the following patch
Change-Id: I2ca73a2d23343e9b257f0d64650317e1da2837d5
Author: Thulasimani,Sivakumar <sivakumar.thulasimani@intel.com>
Date:   Thu Sep 24 18:53:36 2015 +0530
FOR_UPSTREAM [VPG]: drm/i915: Lane count change detection

Change-Id: I361fc07c48f007cd99fc17221d20bf7c18565e09
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-30099
Signed-off-by: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
Reviewed-on: https://android.intel.com:443/498192
---
 drivers/gpu/drm/i915/intel_dp.c | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index 34c0329..96d6258 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -4605,7 +4605,6 @@ intel_dp_check_link_status(struct intel_dp *intel_dp, bool *perform_full_detect)
 		 */
 		if (old_lane_count != intel_dp->dpcd[DP_MAX_LANE_COUNT]) {
 			DRM_DEBUG_KMS("Lane count changed\n");
-			intel_dp_update_simulate_detach_info(intel_dp);
 			*perform_full_detect = true;
 			return;
 		}
@@ -4640,7 +4639,6 @@ intel_dp_check_link_status(struct intel_dp *intel_dp, bool *perform_full_detect)
 
 	if (check_link) {
 		if (IS_CHERRYVIEW(dev)) {
-			intel_dp_update_simulate_detach_info(intel_dp);
 			*perform_full_detect = true;
 		} else {
 			if (intel_dp_start_link_train(intel_dp))
@@ -4915,7 +4913,10 @@ intel_dp_detect(struct drm_connector *connector, bool force)
 			DRM_DEBUG_DRIVER("CP or sink specific irq unhandled\n");
 	}
 
-	if (IS_CHERRYVIEW(dev) &&
+	/* if simulation was in progress clear the flag & skip upfront */
+	if (dev_priv->simulate_dp_in_progress & intel_encoder->hpd_pin)
+		dev_priv->simulate_dp_in_progress &= ~(intel_encoder->hpd_pin);
+	else if (IS_CHERRYVIEW(dev) &&
 		intel_dp->compliance_test_type != DP_TEST_LINK_TRAINING &&
 			intel_encoder->type == INTEL_OUTPUT_DISPLAYPORT) {
 
@@ -5239,6 +5240,7 @@ intel_dp_hpd_pulse(struct intel_digital_port *intel_dig_port, bool long_hpd)
 
 	if (full_detect) {
 		DRM_DEBUG_KMS("Forcing full detect for short pulse\n");
+		intel_dp_update_simulate_detach_info(intel_dp);
 		return true;
 	}
 
-- 
1.9.1

