From 40e549f7ec3b2b792a804a8a7bbd936cae8bb9d3 Mon Sep 17 00:00:00 2001
Message-Id: <40e549f7ec3b2b792a804a8a7bbd936cae8bb9d3.1421709247.git.chang-joon.lee@intel.com>
In-Reply-To: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
References: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
From: Uma Shankar <uma.shankar@intel.com>
Date: Mon, 10 Nov 2014 19:32:04 +0530
Subject: [PATCH 72/75] MUST_REBASE [VPG]: adf: Rejected Flips during DPMS
 state

Flips were getting scheduled even after ADF blank calls.
This caused the system to crash. Resolved the same by
blocking flip calls while DPMS operation is in progress
or if the device is suspended.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-3547
Change-Id: I893a657bd88beca0ab9d6dcdcfef7595839eb201
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
---
 drivers/video/adf/adf.c        |    1 +
 drivers/video/adf/adf_client.c |    9 +++++++++
 drivers/video/adf/adf_fops.c   |   15 +++++++++++++++
 include/video/adf.h            |    3 +++
 4 files changed, 28 insertions(+)

diff --git a/drivers/video/adf/adf.c b/drivers/video/adf/adf.c
index a7f45ea..d5bfe97 100644
--- a/drivers/video/adf/adf.c
+++ b/drivers/video/adf/adf.c
@@ -552,6 +552,7 @@ int adf_device_init(struct adf_device *dev, struct device *parent,
 	idr_init(&dev->overlay_engines);
 	idr_init(&dev->interfaces);
 	mutex_init(&dev->client_lock);
+	mutex_init(&dev->dpms_lock);
 	INIT_LIST_HEAD(&dev->post_list);
 	mutex_init(&dev->post_lock);
 	init_kthread_worker(&dev->post_worker);
diff --git a/drivers/video/adf/adf_client.c b/drivers/video/adf/adf_client.c
index 5292745..a090b55 100644
--- a/drivers/video/adf/adf_client.c
+++ b/drivers/video/adf/adf_client.c
@@ -49,6 +49,9 @@ int adf_interface_blank(struct adf_interface *intf, u8 state)
 	if (state > DRM_MODE_DPMS_OFF)
 		return -EINVAL;
 
+	dev->dpms_in_progress = true;
+
+	mutex_lock(&dev->dpms_lock);
 	mutex_lock(&dev->client_lock);
 	if (state != DRM_MODE_DPMS_ON)
 		flush_kthread_worker(&dev->post_worker);
@@ -94,6 +97,12 @@ int adf_interface_blank(struct adf_interface *intf, u8 state)
 done:
 	mutex_unlock(&intf->base.event_lock);
 	mutex_unlock(&dev->client_lock);
+	dev->dpms_in_progress = false;
+	if (state == DRM_MODE_DPMS_OFF)
+		dev->dpms_state = DRM_MODE_DPMS_OFF;
+	else if (state == DRM_MODE_DPMS_ON)
+		dev->dpms_state = DRM_MODE_DPMS_ON;
+	mutex_unlock(&dev->dpms_lock);
 	return ret;
 }
 EXPORT_SYMBOL(adf_interface_blank);
diff --git a/drivers/video/adf/adf_fops.c b/drivers/video/adf/adf_fops.c
index 8660c76..e54e6ad 100644
--- a/drivers/video/adf/adf_fops.c
+++ b/drivers/video/adf/adf_fops.c
@@ -229,6 +229,19 @@ static int adf_device_post_config(struct adf_device *dev,
 	if (complete_fence_fd < 0)
 		return complete_fence_fd;
 
+	if (dev->dpms_in_progress) {
+		ret = -EBUSY;
+		pr_err("DPMS in Progress. Rejecting Flip.\n");
+		goto err_get_user;
+	}
+
+	mutex_lock(&dev->dpms_lock);
+	if (dev->dpms_state == DRM_MODE_DPMS_OFF) {
+		ret = -EFAULT;
+		pr_err("Device Suspended. Rejecting Flip.\n");
+		goto err_get_user;
+	}
+
 	if (get_user(n_intfs, &arg->n_interfaces)) {
 		ret = -EFAULT;
 		goto err_get_user;
@@ -324,6 +337,7 @@ static int adf_device_post_config(struct adf_device *dev,
 	}
 
 	sync_fence_install(complete_fence, complete_fence_fd);
+	mutex_unlock(&dev->dpms_lock);
 	return 0;
 
 err_import:
@@ -335,6 +349,7 @@ err_get_user:
 	kfree(bufs);
 	kfree(intfs);
 	put_unused_fd(complete_fence_fd);
+	mutex_unlock(&dev->dpms_lock);
 	return ret;
 }
 
diff --git a/include/video/adf.h b/include/video/adf.h
index 3b13027..c3989a0 100644
--- a/include/video/adf.h
+++ b/include/video/adf.h
@@ -275,6 +275,9 @@ struct adf_device {
 
 	struct list_head post_list;
 	struct mutex post_lock;
+	struct mutex dpms_lock;
+	bool dpms_in_progress;
+	int dpms_state;
 	struct kthread_worker post_worker;
 	struct task_struct *post_thread;
 	struct kthread_work post_work;
-- 
1.7.9.5

