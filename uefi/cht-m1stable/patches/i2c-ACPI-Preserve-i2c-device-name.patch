From 39cbd508da170e0cd6f554ed00e97459feb12098 Mon Sep 17 00:00:00 2001
From: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date: Tue, 8 Apr 2014 09:31:28 -0700
Subject: [PATCH] i2c/ACPI: Preserve i2c device name

When only one address in the resource table then keep the current naming (Same
as ACPI device name followed by :instance), and do not add i2c address. When
device enumerates on i2c device names they ignore anything after ":" as
instance, so this is not an issue. But if some driver is specifically looking
for acpi_dev_name:0 then adding address in the name will break those drivers.
So this change keep compatability with the current implementation, if there is
one address in the resource table for this device (Which should be for majority
of devices, except for some combo devices which have multiple chipsets suporting
i2c interface). But if some ACPI device tried to define multiple addresses, then
clients have to change.

For: GMIN-856
Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Change-Id: I61bd26bac592d656e47116781e93e31d70f6e171
---
 drivers/i2c/i2c-core.c | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/drivers/i2c/i2c-core.c b/drivers/i2c/i2c-core.c
index 84d06b9..cca3f26 100644
--- a/drivers/i2c/i2c-core.c
+++ b/drivers/i2c/i2c-core.c
@@ -1195,13 +1195,19 @@ static acpi_status acpi_i2c_add_device(acpi_handle handle, u32 level,
 			continue;
 		info.addr = rcs_info.addrs[i].addr;
 		info.flags = rcs_info.addrs[i].flags;
-		snprintf(info.type, sizeof(info.type), "%s:%02x",
-						dev_name(&adev->dev),
-						info.addr);
-		info.comp_addrs = kmemdup(rcs_info.addrs,
+		/* If there is only address, keep current info.type */
+		if (rcs_info.count > 1) {
+			snprintf(info.type, sizeof(info.type), "%s:%02x",
+					dev_name(&adev->dev),
+					info.addr);
+			info.comp_addrs = kmemdup(rcs_info.addrs,
 					rcs_info.count *
 					sizeof(struct i2c_comp_address),
 					GFP_KERNEL);
+		} else
+			strlcpy(info.type, dev_name(&adev->dev),
+					sizeof(info.type));
+
 		i2c_client = i2c_new_device(adapter, &info);
 		if (!i2c_client) {
 			if (!i)
-- 
1.9.3

