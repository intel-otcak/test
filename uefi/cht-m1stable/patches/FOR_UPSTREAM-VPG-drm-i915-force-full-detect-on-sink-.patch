From fc172917272be3797a7453c0b01370b7f6101efb Mon Sep 17 00:00:00 2001
From: "Thulasimani,Sivakumar" <sivakumar.thulasimani@intel.com>
Date: Thu, 20 Aug 2015 14:50:40 +0530
Subject: [PATCH 04/28] FOR_UPSTREAM [VPG]: drm/i915: force full detect on sink
 count change

This patch checks for changes in sink count between short pulse
hpds and forces full detect when there is a change.

This will allow both detection of hotplug and unplug of panels
through dongles that give only short pulse for such events.

v2: changed variable type from u8 to bool (Jani)
    return immediately if perform_full_detect is set(Siva)

Change-Id: Iefb0a79c037fdc0ec3b942834c9030d9e9aab860
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-9749
Signed-off-by: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
Reviewed-on: https://android.intel.com:443/439677
---
 drivers/gpu/drm/i915/intel_dp.c  | 29 +++++++++++++++++++++++++----
 drivers/gpu/drm/i915/intel_drv.h |  2 +-
 2 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index f295f37..9a7e799 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -4416,19 +4416,33 @@ update_status:
  */
 
 void
-intel_dp_check_link_status(struct intel_dp *intel_dp)
+intel_dp_check_link_status(struct intel_dp *intel_dp, bool *perform_full_detect)
 {
 	struct intel_encoder *intel_encoder = &dp_to_dig_port(intel_dp)->base;
 	u8 sink_irq_vector;
 	u8 link_status[DP_LINK_STATUS_SIZE];
+	u8 old_sink_count = intel_dp->sink_count;
+	bool ret;
+
+	*perform_full_detect = false;
 
 	/* Try to read receiver status if the link appears to be up */
 	if (!intel_dp_get_link_status(intel_dp, link_status)) {
+		*perform_full_detect = true;
 		return;
 	}
 
-	/* Now read the DPCD to see if it's actually running */
-	if (!intel_dp_get_dpcd(intel_dp)) {
+	/* Now read the DPCD to see if it's actually running
+	 * Don't return immediately if dpcd read failed,
+	 * if sink count was 1 and dpcd read failed we need
+	 * to do full detection
+	 */
+	ret = intel_dp_get_dpcd(intel_dp);
+
+	if ((old_sink_count != intel_dp->sink_count) || !ret) {
+		*perform_full_detect = true;
+
+		/* No need to proceed if we are going to do full detect */
 		return;
 	}
 
@@ -5027,6 +5041,7 @@ bool
 intel_dp_hpd_pulse(struct intel_digital_port *intel_dig_port, bool long_hpd)
 {
 	struct intel_dp *intel_dp = &intel_dig_port->dp;
+	bool full_detect;
 
 	if (long_hpd)
 		return true;
@@ -5035,7 +5050,13 @@ intel_dp_hpd_pulse(struct intel_digital_port *intel_dig_port, bool long_hpd)
 	 * we'll check the link status via the normal hot plug path later -
 	 * but for short hpds we should check it now
 	 */
-	intel_dp_check_link_status(intel_dp);
+	intel_dp_check_link_status(intel_dp, &full_detect);
+
+	if (full_detect) {
+		DRM_DEBUG_KMS("Forcing full detect for short pulse\n");
+		return true;
+	}
+
 	return false;
 }
 
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 144df4e..2497808 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -1006,7 +1006,7 @@ void intel_dp_set_clock(struct intel_encoder *encoder,
 void intel_dp_sink_dpms(struct intel_dp *intel_dp, int mode);
 void intel_dp_set_m2_n2(struct intel_crtc *crtc, struct intel_link_m_n *m_n);
 void intel_dp_encoder_destroy(struct drm_encoder *encoder);
-void intel_dp_check_link_status(struct intel_dp *intel_dp);
+void intel_dp_check_link_status(struct intel_dp *intel_dp, bool *full_detect);
 int intel_dp_sink_crc(struct intel_dp *intel_dp, u8 *crc);
 bool intel_dp_compute_config(struct intel_encoder *encoder,
 			     struct intel_crtc_config *pipe_config);
-- 
1.9.1

