From 4bf8c7f11109e039f14267273d97d2658a91c8bf Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Mon, 31 Aug 2015 22:59:05 +0530
Subject: [PATCH] [EM/USBC_PHY]:  Enable power for measurement block upon
 suspend

When system entering to suspend the power should be given to
measurement block of the  fusb phy in order to receive disconnect
event. Hence enabled power for measurement block upon entering
suspend.

Change-Id: I48ff1efdc742558e6039bbafeacb6aab403d0afb
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17488
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
Signed-off-by: R, Kannappan <r.kannappan@intel.com>
---
 drivers/usb/typec/phy-fusb300.c | 39 +++++++++++++++++++++++++++------------
 1 file changed, 27 insertions(+), 12 deletions(-)

diff --git a/drivers/usb/typec/phy-fusb300.c b/drivers/usb/typec/phy-fusb300.c
index 9fd8aede6a30..4e9adb6728d1 100644
--- a/drivers/usb/typec/phy-fusb300.c
+++ b/drivers/usb/typec/phy-fusb300.c
@@ -1799,12 +1799,19 @@ static int fusb300_resume(struct device *dev)
 
 static int fusb300_late_suspend(struct device *dev)
 {
-	struct fusb300_chip *chip;
-
-	chip = dev_get_drvdata(dev);
+	struct fusb300_chip *chip = dev_get_drvdata(dev);
+	struct typec_phy *phy = &chip->phy;
 
-	/* enable power only for wakeup block */
-	regmap_write(chip->map, FUSB300_PWR_REG, FUSB300_PWR_BG_WKUP);
+	if (phy->state == TYPEC_STATE_ATTACHED_UFP ||
+		phy->state == TYPEC_STATE_ATTACHED_DFP) {
+		/* enable power for wakeup block and measure block*/
+		regmap_write(chip->map, FUSB300_PWR_REG,
+			FUSB300_PWR_BG_WKUP | FUSB300_PWR_MEAS);
+	} else {
+		/* enable power only for wakeup block */
+		regmap_write(chip->map, FUSB300_PWR_REG,
+			FUSB300_PWR_BG_WKUP);
+	}
 
 	/* Disable the irq during suspend to prevent fusb300
 	isr executed before the i2c controller resume.*/
@@ -1818,14 +1825,22 @@ static int fusb300_late_suspend(struct device *dev)
 
 static int fusb300_early_resume(struct device *dev)
 {
-	struct fusb300_chip *chip;
-
-	chip = dev_get_drvdata(dev);
+	struct fusb300_chip *chip = dev_get_drvdata(dev);
+	struct typec_phy *phy = &chip->phy;
 
-	/* enable the power for wakeup + measurement block */
-	regmap_write(chip->map, FUSB300_PWR_REG,
-			FUSB300_PWR_BG_WKUP | FUSB300_PWR_BMC |
-			FUSB300_PWR_MEAS);
+	if (phy->state == TYPEC_STATE_ATTACHED_UFP ||
+		phy->state == TYPEC_STATE_ATTACHED_DFP) {
+		/* enable the power for wakeup + measurement block and
+		 * internal osc */
+		regmap_write(chip->map, FUSB300_PWR_REG,
+				FUSB300_PWR_BG_WKUP | FUSB300_PWR_BMC |
+				FUSB300_PWR_MEAS | FUSB300_PWR_OSC);
+	} else {
+		/* enable the power for wakeup + measurement block */
+		regmap_write(chip->map, FUSB300_PWR_REG,
+				FUSB300_PWR_BG_WKUP | FUSB300_PWR_BMC |
+				FUSB300_PWR_MEAS);
+	}
 
 	/* Enable the irq after resume to prevent fusb300
 	isr executed before the i2c controller resume.*/
-- 
2.6.0.rc0.2.g7662973

