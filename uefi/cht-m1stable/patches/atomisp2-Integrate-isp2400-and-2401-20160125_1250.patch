From 806f73c4c6ce074b0a3394bd53a70e65a1a9429c Mon Sep 17 00:00:00 2001
From: "Liu,Dalei" <daleix.liu@intel.com>
Date: Wed, 27 Jan 2016 12:38:15 +0800
Subject: [PATCH 07/13] atomisp2: Integrate isp2400 and 2401 20160125_1250

Integrate ISP FW 2400 and 2401_legacy for
irci_ecr-master_20160125_1250

Change-Id: Id0304e4c736c6aad7dab43c6e78fee3c41add0fc
Original-Tracked_On: #H1604083893
Signed-off-by: Liu,Dalei <daleix.liu@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/98290
Reviewed-by: HaiqiangX Yao <haiqiangx.yao@intel.com>
Build: Dessert M BXT RVP (SC)
Approver: Jing Tao <jing.tao@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Build: Dessert M CHT FFD (SC)
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-17482
Signed-off-by: Tao Wei <wei.tao@intel.com>
Reviewed-on: https://android.intel.com:443/464450
---
 .../camera/drivers/media/pci/atomisp2/css/ia_css.h |   2 +-
 .../drivers/media/pci/atomisp2/css/ia_css_types.h  |   2 +-
 .../media/pci/atomisp2/css/ia_css_version_data.h   |   2 +-
 .../runtime/pipeline/interface/ia_css_pipeline.h   |   8 +-
 .../atomisp2/css/runtime/pipeline/src/pipeline.c   | 158 +++++++++++++++++++--
 .../camera/drivers/media/pci/atomisp2/css/sh_css.c |  11 +-
 .../media/pci/atomisp2/css/sh_css_firmware.c       |   4 +-
 7 files changed, 167 insertions(+), 20 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h
index 1615723..6a73620 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_ecr-master_20160121_0200 */
+/* Release Version: irci_ecr-master_20160125_1250 */
 /**
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h
index f877539..3d30409 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_ecr-master_20160121_0200 */
+/* Release Version: irci_ecr-master_20160125_1250 */
 /**
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h
index 84da485..f49ae40 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h
@@ -22,7 +22,7 @@ more details.
 #define __IA_CSS_VERSION_DATA_H
 
 
-#define CSS_VERSION_STRING "REL:20160121_03.4_0636; API:2.1.21.0; GIT:irci____2#79f572d3abee152c445a9e5f63bbf93f8f2f7415; SDK:; USER:viedifw; "
+#define CSS_VERSION_STRING "REL:20160125_04.1_1840; API:2.1.21.0; GIT:irci___#4923fff34777f286fac2188e945b1cf3914c9809; SDK:; USER:viedifw; "
 
 
 #endif
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/interface/ia_css_pipeline.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/interface/ia_css_pipeline.h
index 2e6c19d..b1413bd 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/interface/ia_css_pipeline.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/interface/ia_css_pipeline.h
@@ -20,7 +20,7 @@ more details.
 #include "ia_css_pipeline_common.h"
 
 #define IA_CSS_PIPELINE_NUM_MAX		(20)
-
+#define NUM_SHARED_STAGE_BUFFERS	(2)
 
 /* Pipeline stage to be executed on SP/ISP */
 struct ia_css_pipeline_stage {
@@ -34,7 +34,9 @@ struct ia_css_pipeline_stage {
 	struct sh_css_binary_args args;
 	int mode;
 	bool out_frame_allocated[IA_CSS_BINARY_MAX_OUTPUT_PORTS];
+	bool out_frame_shared_buffer[IA_CSS_BINARY_MAX_OUTPUT_PORTS];
 	bool vf_frame_allocated;
+	bool vf_frame_shared_buffer;
 	struct ia_css_pipeline_stage *next;
 	bool enable_zoom;
 };
@@ -50,6 +52,8 @@ struct ia_css_pipeline {
 	struct ia_css_frame in_frame;
 	struct ia_css_frame out_frame[IA_CSS_PIPE_MAX_OUTPUT_STAGE];
 	struct ia_css_frame vf_frame[IA_CSS_PIPE_MAX_OUTPUT_STAGE];
+	struct ia_css_frame *shared_frame[IA_CSS_PIPE_MAX_OUTPUT_STAGE][NUM_SHARED_STAGE_BUFFERS]; /* share buffers between stages */
+	unsigned shared_buf_idx[IA_CSS_PIPE_MAX_OUTPUT_STAGE]; /* alternating buffer index between 2 shared_frame */
 	unsigned int dvs_frame_delay;
 	unsigned inout_port_config;
 	int num_execs;
@@ -68,6 +72,8 @@ struct ia_css_pipeline {
 	DEFAULT_FRAME,          /* in_frame */ \
 	{DEFAULT_FRAME},          /* out_frame */ \
 	{DEFAULT_FRAME},          /* vf_frame */ \
+	{{NULL, NULL}, {NULL, NULL}}, /* shared_frame */ \
+	{0, 0}, 		  /* shared_buf_idx */ \
 	IA_CSS_FRAME_DELAY_1,   /* frame_delay */ \
 	0,                      /* inout_port_config */ \
 	-1,                     /* num_execs */ \
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/src/pipeline.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/src/pipeline.c
index cc903f9..0a75c26 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/src/pipeline.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/pipeline/src/pipeline.c
@@ -21,6 +21,7 @@ more details.
 #include "ia_css_pipeline.h"
 #include "ia_css_isp_param.h"
 #include "ia_css_bufq.h"
+#include "ia_css_frame.h"
 
 #define PIPELINE_NUM_UNMAPPED                   (~0U)
 #define PIPELINE_SP_THREAD_EMPTY_TOKEN          (0x0)
@@ -47,11 +48,14 @@ static void pipeline_init_defaults(
 
 static void pipeline_stage_destroy(struct ia_css_pipeline_stage *stage);
 static enum ia_css_err pipeline_stage_create(
+	struct ia_css_pipeline *pipeline,
 	struct ia_css_pipeline_stage_desc *stage_desc,
 	struct ia_css_pipeline_stage **new_stage);
 static void ia_css_pipeline_set_zoom_stage(struct ia_css_pipeline *pipeline);
 static void ia_css_pipeline_configure_inout_port(struct ia_css_pipeline *me,
 	bool continuous);
+static unsigned int  get_shared_stage_buffer_size(
+	unsigned int width, unsigned int height, unsigned buf_idx);
 
 /*******************************************************
 *** Public functions
@@ -236,6 +240,7 @@ enum ia_css_err ia_css_pipeline_request_stop(struct ia_css_pipeline *pipeline)
 void ia_css_pipeline_clean(struct ia_css_pipeline *pipeline)
 {
 	struct ia_css_pipeline_stage *s;
+	unsigned i, j;
 
 	assert(pipeline != NULL);
 	IA_CSS_ENTER_PRIVATE("pipeline = %p", pipeline);
@@ -245,6 +250,16 @@ void ia_css_pipeline_clean(struct ia_css_pipeline *pipeline)
 		IA_CSS_LEAVE_PRIVATE("void");
 		return;
 	}
+
+	for ( i = 0; i < IA_CSS_PIPE_MAX_OUTPUT_STAGE; i++) {
+		for ( j = 0; j < NUM_SHARED_STAGE_BUFFERS; j++) {
+			if (pipeline->shared_frame[i][j]) {
+				ia_css_frame_free(pipeline->shared_frame[i][j]);
+				pipeline->shared_frame[i][j] = NULL;
+			}
+		}
+	}
+
 	s = pipeline->stages;
 
 	while (s) {
@@ -313,7 +328,7 @@ enum ia_css_err ia_css_pipeline_create_and_add_stage(
 	}
 
 	/* Create the new stage */
-	err = pipeline_stage_create(stage_desc, &new_stage);
+	err = pipeline_stage_create(pipeline, stage_desc, &new_stage);
 	if (err != IA_CSS_SUCCESS) {
 		ia_css_debug_dtrace(IA_CSS_DEBUG_TRACE,
 			      "ia_css_pipeline_create_and_add_stage() done:"
@@ -500,11 +515,21 @@ static void pipeline_stage_destroy(struct ia_css_pipeline_stage *stage)
 		if (stage->out_frame_allocated[i]) {
 			ia_css_frame_free(stage->args.out_frame[i]);
 			stage->args.out_frame[i] = NULL;
+		} else {
+			if (stage->out_frame_shared_buffer[i] && stage->args.out_frame[i]) {
+				sh_css_free(stage->args.out_frame[i]);
+				stage->args.out_frame[i] = NULL;
+			}
 		}
 	}
 	if (stage->vf_frame_allocated) {
 		ia_css_frame_free(stage->args.out_vf_frame);
 		stage->args.out_vf_frame = NULL;
+	} else {
+		if (stage->vf_frame_shared_buffer && stage->args.out_vf_frame) {
+			sh_css_free(stage->args.out_vf_frame);
+			stage->args.out_vf_frame = NULL;
+		}
 	}
 	sh_css_free(stage);
 }
@@ -561,6 +586,7 @@ static void pipeline_unmap_num_to_sp_thread(unsigned int pipe_num)
 }
 
 static enum ia_css_err pipeline_stage_create(
+	struct ia_css_pipeline *pipeline,
 	struct ia_css_pipeline_stage_desc *stage_desc,
 	struct ia_css_pipeline_stage **new_stage)
 {
@@ -571,6 +597,7 @@ static enum ia_css_err pipeline_stage_create(
 	struct ia_css_frame *out_frame[IA_CSS_BINARY_MAX_OUTPUT_PORTS];
 	const struct ia_css_fw_info *firmware;
 	unsigned int i;
+	bool share_stage_buffers = false;
 
 	/* Verify input parameters*/
 	if (!(stage_desc->in_frame) && !(stage_desc->firmware)
@@ -610,20 +637,67 @@ static enum ia_css_err pipeline_stage_create(
 	stage->sp_func = stage_desc->sp_func;
 	stage->max_input_width = stage_desc->max_input_width;
 	stage->mode = stage_desc->mode;
-	for (i = 0; i < IA_CSS_BINARY_MAX_OUTPUT_PORTS; i++)
+	for (i = 0; i < IA_CSS_BINARY_MAX_OUTPUT_PORTS; i++) {
 		stage->out_frame_allocated[i] = false;
+		stage->out_frame_shared_buffer[i] = false;
+	}
 	stage->vf_frame_allocated = false;
+	stage->vf_frame_shared_buffer = false;
 	stage->next = NULL;
 	sh_css_binary_args_reset(&stage->args);
 
+	/* Turn on shared_stage_buffers on ISP2.7 to save memory allocation */
+	share_stage_buffers = binary && (binary->info->sp.pipeline.isp_pipe_version == SH_CSS_ISP_PIPE_VERSION_2_7);
 	for (i = 0; i < IA_CSS_BINARY_MAX_OUTPUT_PORTS; i++) {
 		if (!(out_frame[i]) && (binary)
 			&& (binary->out_frame_info[i].res.width)) {
-			err = ia_css_frame_allocate_from_info(&out_frame[i],
+
+			if (share_stage_buffers) {
+				unsigned shared_buf_idx = pipeline->shared_buf_idx[i];
+
+				if (pipeline->shared_frame[i][shared_buf_idx] == NULL) {
+					struct ia_css_frame_info myInfo = binary->out_frame_info[i];
+
+					unsigned stage_buf_size = get_shared_stage_buffer_size(
+									myInfo.padded_width, myInfo.res.height, shared_buf_idx);
+					if (!stage_buf_size) {
+						err = IA_CSS_ERR_INTERNAL_ERROR;
+						goto ERR;
+					}
+
+					err = ia_css_frame_allocate_with_buffer_size(
+							&pipeline->shared_frame[i][shared_buf_idx], stage_buf_size, false);
+
+					if (err != IA_CSS_SUCCESS)
+						goto ERR;
+				}
+
+				/* Create frame w/o allocating memory */
+				err = ia_css_frame_create_from_info(&out_frame[i], &binary->out_frame_info[i]);
+				if (err != IA_CSS_SUCCESS)
+					goto ERR;
+
+				/* Assign data from shared resource */
+				err = ia_css_frame_set_data(out_frame[i],
+						pipeline->shared_frame[i][shared_buf_idx]->data,
+						pipeline->shared_frame[i][shared_buf_idx]->data_bytes);
+				if (err != IA_CSS_SUCCESS) {
+					ia_css_debug_dtrace(IA_CSS_DEBUG_TRACE,
+						"pipeline_stage_create() shared buffer too small! sz(%d) req(%d)\n",
+						pipeline->shared_frame[i][shared_buf_idx]->data_bytes,
+						out_frame[i]->data_bytes);
+					goto ERR;
+				}
+
+				stage->out_frame_shared_buffer[i] = true;
+				pipeline->shared_buf_idx[i] ^= 0x1;
+			} else {
+				err = ia_css_frame_allocate_from_info(&out_frame[i],
 							&binary->out_frame_info[i]);
-			if (err != IA_CSS_SUCCESS)
-				goto ERR;
-			stage->out_frame_allocated[i] = true;
+				if (err != IA_CSS_SUCCESS)
+					goto ERR;
+				stage->out_frame_allocated[i] = true;
+			}
 		}
 	}
 	/* VF frame is not needed in case of need_pp
@@ -633,11 +707,35 @@ static enum ia_css_err pipeline_stage_create(
 		if ((binary && binary->vf_frame_info.res.width) ||
 		    (firmware && firmware->info.isp.sp.enable.vf_veceven)
 		    ) {
-			err = ia_css_frame_allocate_from_info(&vf_frame,
+			if (share_stage_buffers) {
+				unsigned port = 0;
+				/* Create vf_frame w/o allocating memory */
+				err = ia_css_frame_create_from_info(&vf_frame,
+						&binary->vf_frame_info);
+				if (err != IA_CSS_SUCCESS)
+					goto ERR;
+
+				/* Assign data from shared resource */
+				err = ia_css_frame_set_data(vf_frame,
+						pipeline->shared_frame[port][pipeline->shared_buf_idx[port]]->data,
+						pipeline->shared_frame[port][pipeline->shared_buf_idx[port]]->data_bytes);
+				if (err != IA_CSS_SUCCESS) {
+					ia_css_debug_dtrace(IA_CSS_DEBUG_TRACE,
+						"pipeline_stage_create() vf shared buffer too small! sz(%d) req(%d)\n",
+						pipeline->shared_frame[port][pipeline->shared_buf_idx[port]]->data_bytes,
+						vf_frame->data_bytes);
+					goto ERR;
+				}
+
+				stage->vf_frame_shared_buffer = true;
+				pipeline->shared_buf_idx[port] ^= 0x1;
+			} else {
+				err = ia_css_frame_allocate_from_info(&vf_frame,
 							&binary->vf_frame_info);
-			if (err != IA_CSS_SUCCESS)
-				goto ERR;
-			stage->vf_frame_allocated = true;
+				if (err != IA_CSS_SUCCESS)
+					goto ERR;
+				stage->vf_frame_allocated = true;
+			}
 		}
 	} else if (vf_frame && binary && binary->vf_frame_info.res.width
 		&& !firmware) {
@@ -665,7 +763,7 @@ static void pipeline_init_defaults(
 	unsigned int dvs_frame_delay)
 {
 	struct ia_css_frame init_frame = DEFAULT_FRAME;
-	unsigned int i;
+	unsigned int i, j;
 
 	pipeline->pipe_id = pipe_id;
 	pipeline->stages = NULL;
@@ -676,6 +774,14 @@ static void pipeline_init_defaults(
 		pipeline->out_frame[i] = init_frame;
 		pipeline->vf_frame[i] = init_frame;
 	}
+
+	for (i = 0 ; i < IA_CSS_PIPE_MAX_OUTPUT_STAGE; i++) {
+		pipeline->shared_buf_idx[i] = 0;
+		for (j = 0; j < NUM_SHARED_STAGE_BUFFERS; j++) {
+			pipeline->shared_frame[i][j] = NULL;
+		}
+	}
+
 	pipeline->num_execs = -1;
 	pipeline->acquire_isp_each_stage = true;
 	pipeline->pipe_num = (uint8_t)pipe_num;
@@ -776,3 +882,33 @@ ia_css_pipeline_configure_inout_port(struct ia_css_pipeline *me, bool continuous
 		"ia_css_pipeline_configure_inout_port() leave: inout_port_config(%x)\n",
 		me->inout_port_config);
 }
+
+static unsigned int
+get_shared_stage_buffer_size(unsigned int width, unsigned int height, unsigned buf_idx)
+{
+	unsigned int frame = width * height;
+
+	/* On ISP 2.7 capture Pipe stages are constructed with required memory size as following
+	 * PRE_DE #0 (RAW format):        2 frames (of padded input-res)
+	 *         frame * 2 raw_bit_depth
+	 * PRIMARY #0 (EED, YCgCo444_16): 6 frames (of padded inupt-res)
+	 *         frame * 3 YUV * 2 bytes/elem
+	 * PRIMARY #1 (IEFD, YUV420_16) : 3 frames (of padded input-res)
+	 *         frame * 1 Y * 2 bytes/elem + frame * 2 UV * 1/4 decimation * 2 bytes/elem
+	 * PRIMARY #2 (XNR3) :            1.5 frames (of effective-res)
+	 *         frame * 1 Y * 1 bytes/elem + frame * 2 UV * 1/4 decimation * 1 bytes/elem
+	 * PRIMARY #3 (CROP) :            1.5 frames (of output-res)
+	 *         frame * 1 Y * 1 bytes/elem + frame * 2 UV * 1/4 decimation * 1 bytes/elem
+	 * ...
+	 * To ensure shared_frames are sufficiently allocated for 2 largest of stage buffers,
+	 * we'll allocate
+	 *   buf_idx0 : 3 frames (PRE_DE, PRIM #1, PRIM #3)
+	 *   buf_idx1 : 6 frames (PRIM #0, PRIM #2 ..)
+	 */
+	switch (buf_idx) {
+		case 0:  return 3*frame;
+		case 1:  return 6*frame;
+		default: return 0;
+	}
+
+}
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c
index b7a5808..64ac4ba 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c
@@ -3347,10 +3347,15 @@ static enum ia_css_err add_capture_pp_stage(
 	ia_css_pipe_util_create_output_frames(out_frames);
 
 	last_fw = last_output_firmware(pipe->output_stage);
-	err = ia_css_frame_allocate_from_info(&vf_frame,
+
+	/* ISP 2.7 - VF is to use a shared buffer */
+	if (capture_pp_binary->info->sp.pipeline.isp_pipe_version != SH_CSS_ISP_PIPE_VERSION_2_7) {
+		err = ia_css_frame_allocate_from_info(&vf_frame,
 				    &capture_pp_binary->vf_frame_info);
-	if (err != IA_CSS_SUCCESS)
-		return err;
+		if (err != IA_CSS_SUCCESS)
+			return err;
+	}
+
 	if(last_fw)	{
 		ia_css_pipe_util_set_output_frames(out_frames, 0, NULL);
 		ia_css_pipe_get_generic_stage_desc(&stage_desc,
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c
index ff02cb4..44463f9 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c
@@ -47,10 +47,10 @@ struct fw_param {
 /* Warning: same order as SH_CSS_BINARY_ID_* */
 static struct firmware_header *firmware_header;
 
-/* The string STR(irci_ecr-master_20160121_0200) is a place holder
+/* The string STR(irci_ecr-master_20160125_1250) is a place holder
  * which will be replaced with the actual RELEASE_VERSION
  * during package generation. Please do not modify  */
-static const char *release_version = STR(irci_ecr-master_20160121_0200);
+static const char *release_version = STR(irci_ecr-master_20160125_1250);
 
 #define MAX_FW_REL_VER_NAME	300
 static char FW_rel_ver_name[MAX_FW_REL_VER_NAME] = "---";
-- 
1.9.1

