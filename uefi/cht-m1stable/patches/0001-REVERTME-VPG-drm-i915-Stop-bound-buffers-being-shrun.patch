From 2a59efb195329ac28200fa6e68e1170a4cf8d03c Mon Sep 17 00:00:00 2001
Message-Id: <2a59efb195329ac28200fa6e68e1170a4cf8d03c.1421886431.git.chang-joon.lee@intel.com>
From: Rafael Barbalho <rafael.barbalho@intel.com>
Date: Tue, 2 Dec 2014 18:20:52 +0000
Subject: [PATCH 01/11] REVERTME [VPG]: drm/i915: Stop bound buffers being
 shrunk

At the moment during media execution we are seeing scenarios where the i915
shrinker is being called and we are freeing up the backing store of buffers
that still need to be used by the GPU.

While we track down the issue and come up with better algorithms with upstream
we are just going to allow purgeable buffers to be freed by the shrinker.

Revert condition: New shrinker algorithm and patches that can handle
dirty buffers and don't cause media test execution issues.

v2: Shrinker can get called during allocation of obj backing store and can free
backing store of bound buffers, modify shrinker behaviour in this case to
free only purgeable buffers.

Issue: GMINL-4853
Change-Id: I7585e8703b9ce187175597de26e9877d6b010b6b
Signed-off-by: Rafael Barbalho <rafael.barbalho@intel.com>
Signed-off-by: Arun Siluvery <arun.siluvery@linux.intel.com>
---
 drivers/gpu/drm/i915/i915_gem.c |    9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 254e37f..c2bba10 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -2129,7 +2129,8 @@ i915_gem_shrink_all(struct drm_i915_private *dev_priv)
 {
 	i915_gem_evict_everything(dev_priv->dev);
 	return i915_gem_shrink(dev_priv, LONG_MAX,
-			       I915_SHRINK_BOUND | I915_SHRINK_UNBOUND);
+			       I915_SHRINK_BOUND | I915_SHRINK_UNBOUND |
+			       I915_SHRINK_PURGEABLE);
 }
 
 static int
@@ -5383,6 +5384,7 @@ static bool i915_gem_shrinker_lock(struct drm_device *dev, bool *unlock)
 	return true;
 }
 
+#if 0
 static int num_vma_bound(struct drm_i915_gem_object *obj)
 {
 	struct i915_vma *vma;
@@ -5394,6 +5396,7 @@ static int num_vma_bound(struct drm_i915_gem_object *obj)
 
 	return count;
 }
+#endif
 
 static unsigned long
 i915_gem_shrinker_count(struct shrinker *shrinker, struct shrink_control *sc)
@@ -5415,7 +5418,7 @@ i915_gem_shrinker_count(struct shrinker *shrinker, struct shrink_control *sc)
 
 	list_for_each_entry(obj, &dev_priv->mm.bound_list, global_list) {
 		if (!i915_gem_obj_is_pinned(obj) &&
-		    obj->pages_pin_count == num_vma_bound(obj))
+		    obj->pages_pin_count == 0)
 			count += obj->base.size >> PAGE_SHIFT;
 	}
 
@@ -5500,11 +5503,13 @@ i915_gem_shrinker_scan(struct shrinker *shrinker, struct shrink_control *sc)
 				I915_SHRINK_BOUND |
 				I915_SHRINK_UNBOUND |
 				I915_SHRINK_PURGEABLE);
+#if 0
 	if (freed < sc->nr_to_scan)
 		freed += i915_gem_shrink(dev_priv,
 					 sc->nr_to_scan - freed,
 					 I915_SHRINK_BOUND |
 					 I915_SHRINK_UNBOUND);
+#endif
 	if (unlock)
 		mutex_unlock(&dev->struct_mutex);
 
-- 
1.7.9.5

