From a7a24955273d82bafbe93be1deb8277ac27ff18c Mon Sep 17 00:00:00 2001
Message-Id: <a7a24955273d82bafbe93be1deb8277ac27ff18c.1421395644.git.chang-joon.lee@intel.com>
In-Reply-To: <87b3fd6ee09eca535f11edc6180f37fb5c67ac4d.1421395644.git.chang-joon.lee@intel.com>
References: <87b3fd6ee09eca535f11edc6180f37fb5c67ac4d.1421395644.git.chang-joon.lee@intel.com>
From: Michel Thierry <michel.thierry@intel.com>
Date: Thu, 20 Nov 2014 17:45:03 +0000
Subject: [PATCH 6/7] MUST_REBASE [VPG]: drm/i915/chv: HuC firmware loading in
 true PPGTT

The patch:
MUST_REBASE [VPG]: drm/i915/chv: HuC firmware loading
Creates an object pinned to GGTT and executes it inside a batchbuffer.
This works fine in aliasing PPGTT, where the GGTT and PPGTT are
identical, but in true PPGTT it isn't the case anymore (GGTT and PPGTTs
are different).

As a workaround, add the commands to the ring directly.

MUST_REBASE - This patch is a MUST_REBASE because it there are currently
no upstream opensource usermode consumers of this mechanism, and hence it
would not be accepted upstream.

v2: Do not set PrivilegeCheckDisable while huc-load commands are
executed; it was a workaround when these commands were inside a
batchbuffer.

Issue: GMINL-2512
Change-Id: Iadae04e408410de1c336ed9261622cf33668beca
Signed-off-by: Michel Thierry <michel.thierry@intel.com>
---
 drivers/gpu/drm/i915/intel_huc_chv.c |   67 ++++++++++------------------------
 1 file changed, 20 insertions(+), 47 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_huc_chv.c b/drivers/gpu/drm/i915/intel_huc_chv.c
index b79a982..6dcf727 100644
--- a/drivers/gpu/drm/i915/intel_huc_chv.c
+++ b/drivers/gpu/drm/i915/intel_huc_chv.c
@@ -112,9 +112,8 @@ out:
 	return obj;
 }
 
-static struct drm_i915_gem_object *create_huc_batch(struct drm_device *dev,
+static int add_huc_commands(struct intel_ringbuffer *ringbuf,
 	struct drm_i915_gem_object *fw_obj, u32 fw_size)
-
 {
 	#define CHV_DMA_GUC_OFFSET 0xc340
 	#define   CHV_GEN8_DMA_GUC_OFFSET (0x80000)
@@ -134,12 +133,15 @@ static struct drm_i915_gem_object *create_huc_batch(struct drm_device *dev,
 		0x00000000, 0x00000000, 0x00000000, 0x00000000,
 		0x00000000, 0x00000000, 0x00000000, 0x13000000,
 		0x00000004, 0x00000000, 0x00000000, 0x00000000,
-		0x00000000, 0x00000000, 0x00000000, 0x05000000,
+		0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	};
 
+	struct intel_engine_cs *ring = ringbuf->ring;
+	struct drm_device *dev = ring->dev;
 	struct drm_i915_private *dev_priv = NULL;
-	struct drm_i915_gem_object *obj = NULL;
-	int ret = 0;
+	int i;
+	int ret;
+	int load_cmd_size = sizeof(load_cmds) / sizeof(load_cmds[0]);
 
 	dev_priv = dev->dev_private;
 
@@ -155,45 +157,32 @@ static struct drm_i915_gem_object *create_huc_batch(struct drm_device *dev,
 	I915_WRITE(CHV_DMA_GUC_SIZE, 0);
 	POSTING_READ(CHV_DMA_GUC_SIZE);
 
-	obj = i915_gem_alloc_object(dev, 4096);
-	if (!obj)
-		HUC_ERROR_OUT("Failed allocation");
+	load_cmds[FIRMWARE_ADDR] |= i915_gem_obj_ggtt_offset(fw_obj);
+	load_cmds[FIRMWARE_SIZE] |= fw_size;
 
-	ret = i915_gem_obj_ggtt_pin(obj, 4096, 0);
+	ret = intel_logical_ring_begin(ringbuf, load_cmd_size);
 	if (ret)
-		HUC_ERROR_OUT("Failed to pin");
+		return ret;
 
-	load_cmds[FIRMWARE_ADDR] |= i915_gem_obj_ggtt_offset(fw_obj);
-	load_cmds[FIRMWARE_SIZE] |= fw_size;
+	for (i = 0; i < load_cmd_size; i++)
+		intel_logical_ring_emit(ringbuf, load_cmds[i]);
 
-	ret = i915_gem_object_write(obj, load_cmds, sizeof(load_cmds));
-	if (ret) {
-		i915_gem_object_ggtt_unpin(obj);
-		HUC_ERROR_OUT("Failed to write");
-	}
-out:
-	if (ret && obj) {
-		drm_gem_object_unreference(&obj->base);
-		obj = NULL;
-	}
+	intel_logical_ring_advance(ringbuf);
 
-	return obj;
+	return ret;
 }
 
 static void finish_chv_huc_load(const struct firmware *fw, void *context)
 {
-	#define CHV_VCS_GFX_MODE 0x1229C
-
 	struct drm_i915_private *dev_priv = context;
 	struct drm_device *dev = dev_priv->dev;
-	struct drm_i915_gem_object *batch_obj = NULL;
 	struct drm_i915_gem_object *fw_obj = NULL;
 	struct intel_engine_cs *ring;
 	struct intel_context *ctx;
 	struct intel_ringbuffer *ringbuf;
 	u32 seqno;
 	u32 fw_size;
-	int ret = 0;
+	int ret;
 
 	if (!fw) {
 		DRM_ERROR("HuC: Null fw. Check fw binary file is present\n");
@@ -211,16 +200,10 @@ static void finish_chv_huc_load(const struct firmware *fw, void *context)
 		return;
 	}
 
-	I915_WRITE(CHV_VCS_GFX_MODE, 0x00010001);
-
 	fw_obj = create_fw_obj(dev, fw, &fw_size);
 	if (!fw_obj)
 		HUC_ERROR_OUT("Null fw obj");
 
-	batch_obj = create_huc_batch(dev, fw_obj, fw_size);
-	if (!batch_obj)
-		HUC_ERROR_OUT("Null batch obj");
-
 	ring = &dev_priv->ring[VCS];
 
 	ctx = ring->default_context;
@@ -231,33 +214,23 @@ static void finish_chv_huc_load(const struct firmware *fw, void *context)
 	if (!ringbuf)
 		HUC_ERROR_OUT("No ring obj");
 
-	ret = ring->emit_bb_start(ringbuf,
-			i915_gem_obj_ggtt_offset(batch_obj),
-			I915_DISPATCH_SECURE);
+	ret = add_huc_commands(ringbuf, fw_obj, fw_size);
 	if (ret)
-		HUC_ERROR_OUT("Failed to emit batch");
-
-	i915_vma_move_to_active(i915_gem_obj_to_ggtt(batch_obj), ring);
+		HUC_ERROR_OUT("add huc commands failed");
 
-	ret = __i915_add_request(ring, NULL, batch_obj, &seqno);
+	ret = __i915_add_request(ring, NULL, ringbuf->obj, &seqno);
 	if (ret)
 		HUC_ERROR_OUT("Failed to add request");
 
 	ret = i915_wait_seqno(ring, seqno);
 	if (ret)
-		HUC_ERROR_OUT("Batch didn't finish executing");
+		HUC_ERROR_OUT("Commands didn't finish executing");
 
 out:
-	I915_WRITE(CHV_VCS_GFX_MODE, 0x00010000);
-
 	if (fw_obj) {
 		i915_gem_object_ggtt_unpin(fw_obj);
 		drm_gem_object_unreference(&fw_obj->base);
 	}
-	if (batch_obj) {
-		i915_gem_object_ggtt_unpin(batch_obj);
-		drm_gem_object_unreference(&batch_obj->base);
-	}
 
 	mutex_unlock(&dev->struct_mutex);
 	intel_runtime_pm_put(dev_priv);
-- 
1.7.9.5

