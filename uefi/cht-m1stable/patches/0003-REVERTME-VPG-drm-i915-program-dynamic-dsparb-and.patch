From ae33f9b64f75b9c8780c20a2ad943edd7937b3ad Mon Sep 17 00:00:00 2001
Message-Id: <ae33f9b64f75b9c8780c20a2ad943edd7937b3ad.1429601425.git.chang-joon.lee@intel.com>
In-Reply-To: <20df33cbe9e95d11653023b1a6201653c517d353.1429601425.git.chang-joon.lee@intel.com>
References: <20df33cbe9e95d11653023b1a6201653c517d353.1429601425.git.chang-joon.lee@intel.com>
From: vandita kulkarni <vandita.kulkarni@intel.com>
Date: Sat, 18 Apr 2015 00:12:16 +0530
Subject: [PATCH 3/9] REVERTME: [VPG]: drm/i915 : program dynamic dsparb and 
 wm

This patch programs calculated watermarks and calculated
display arbitrer values for single plane and multiplane
cases.

REVERTME: this patch is based on internal implementation
of atomic display, needs to be reverted when nuclear flip/
atomic modeset is completed in upstream.

Issue: GMINL-4468
Change-Id: Ie14d42d1db396f653e4d23561325875041cdc174
Signed-off-by: Vandita Kulkarni <vandita.kulkarni@intel.com>
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |    2 +
 drivers/gpu/drm/i915/i915_reg.h      |   40 ++++-
 drivers/gpu/drm/i915/intel_display.c |   15 +-
 drivers/gpu/drm/i915/intel_drv.h     |   14 ++
 drivers/gpu/drm/i915/intel_pm.c      |  285 +++++++++++++++++++++++++++++-----
 drivers/gpu/drm/i915/intel_sprite.c  |    8 +
 6 files changed, 319 insertions(+), 45 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 2eacf84..7c2d1e9 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -3171,6 +3171,8 @@ extern void intel_detect_pch(struct drm_device *dev);
 extern int intel_trans_dp_port_sel(struct drm_crtc *crtc);
 extern int intel_enable_rc6(const struct drm_device *dev);
 extern void valleyview_update_wm_pm5(struct intel_crtc *crtc);
+extern void vlv_update_dsparb(struct intel_crtc *crtc);
+void vlv_update_watermarks(struct drm_i915_private *dev_priv);
 
 extern bool i915_semaphore_is_enabled(struct drm_device *dev);
 int i915_reg_read_ioctl(struct drm_device *dev, void *data,
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 763812e..2786001 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4182,11 +4182,14 @@ enum punit_power_well {
 
 #define	DSPARB	(dev_priv->info.display_mmio_offset + 0x70030)
 #define DSPARB_PIPEA_MASK	0xffff
-#define DSPARB_PIPEB_MASK	(0xffff << 16)
+#define DSPARB_PIPEB_SHIFT	16
+#define DSPARB_PIPEB_MASK	(0xffff << DSPARB_PIPEB_SHIFT)
 #define	DSPARB2	(dev_priv->info.display_mmio_offset + 0x70060)
 #define DSPARB2_PIPEA_MASK	0xff
-#define DSPARB2_PIPEB_MASK	(0xff << 8)
-#define DSPARB2_PIPEC_MASK	(0xff << 16)
+#define DSPARB2_PIPEB_SHIFT	8
+#define DSPARB2_PIPEB_MASK	(0xff << DSPARB2_PIPEB_SHIFT)
+#define DSPARB2_PIPEC_SHIFT	16
+#define DSPARB2_PIPEC_MASK	(0xff << DSPARB2_PIPEC_SHIFT)
 #define	DSPARB3	(dev_priv->info.display_mmio_offset + 0x7006c)
 #define DSPARB3_PIPEC_MASK	0xffff
 
@@ -4277,6 +4280,37 @@ enum punit_power_well {
 #define DSPFW9			(dev_priv->info.display_mmio_offset + 0x7007C)
 #define VLV_DSPFW9_DEF_WM	0x40f0004
 
+#define VLV_FW_PIPEA_PA_MASK	0xff
+#define VLV_FW_PIPEA_SA_MASK	0xff
+#define VLV_FW_PIPEA_SB_MASK	0xff0000
+#define VLV_FW_PIPEA_SB_SHIFT	16
+#define VLV_DSPHOWM_PIPEA_MASK	0x111
+#define VLV_DSPHOWM_PIPEA_SA_SHIFT	4
+#define VLV_DSPHOWM_PIPEA_SB_SHIFT	8
+
+#define VLV_FW_PIPEB_PB_MASK	0xff00
+#define VLV_FW_PIPEB_PB_SHIFT	8
+#define VLV_FW_PIPEB_SC_MASK	0xff
+#define VLV_FW_PIPEB_SD_MASK	0xff0000
+#define VLV_FW_PIPEB_SD_SHIFT	16
+#define VLV_DSPHOWM_PIPEB_MASK	0x111000
+#define VLV_DSPHOWM_PIPEB_PB_SHIFT	12
+#define VLV_DSPHOWM_PIPEB_SC_SHIFT	16
+#define VLV_DSPHOWM_PIPEB_SD_SHIFT	20
+
+#define VLV_FW_PIPEC_PC_MASK	0xff0000
+#define VLV_FW_PIPEC_PC_SHIFT	16
+#define VLV_FW_PIPEC_SE_MASK	0xff
+#define VLV_FW_PIPEC_SF_MASK	0xff0000
+#define VLV_FW_PIPEC_SF_SHIFT	16
+#define VLV_DSPHOWM_PIPEC_MASK	0xe00000
+#define VLV_DSPHOWM_PIPEC_PC_SHIFT	21
+#define VLV_DSPHOWM_PIPEC_SE_SHIFT	22
+#define VLV_DSPHOWM_PIPEC_SF_SHIFT	23
+
+#define VLV_FW_PIPEB_WM1_MASK1	0xff00
+#define VLV_FW_PIPEB_WM1_MASK2	0xff000000
+
 /* drain latency register values*/
 #define VLV_DDL(pipe)	_PIPE(pipe, VLV_DDL1, VLV_DDL2)
 #define DRAIN_LATENCY_PRECISION_64	64
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 11b708a..f1fe36f 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -47,10 +47,6 @@
 
 #define DIV_ROUND_CLOSEST_ULL(ll, d)	\
 	({ unsigned long long _tmp = (ll)+(d)/2; do_div(_tmp, d); _tmp; })
-#define NIBBLE	4
-#define PIPE_ENABLE(pipe)	(1 << (pipe + ((sizeof(int) * BITS_PER_BYTE) \
-								- NIBBLE)))
-
 
 void intel_save_clr_mgr_status(struct drm_device *dev);
 bool intel_restore_clr_mgr_status(struct drm_device *dev);
@@ -2538,7 +2534,7 @@ static void intel_find_plane_obj(struct intel_crtc *intel_crtc,
 	}
 }
 
-static void vlv_update_watermarks(struct drm_i915_private *dev_priv)
+void vlv_update_watermarks(struct drm_i915_private *dev_priv)
 {
 	I915_WRITE(DSPARB, DSPARB_VLV_DEFAULT);
 	I915_WRITE(DSPFW1,
@@ -2823,6 +2819,7 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 	 */
 	mask = 0x000000ff;
 	vlv_calculate_ddl(crtc, pixel_size, &plane_prec_multi, &plane_ddl);
+	intel_crtc->vlv_wm.pa = vlv_calculate_wm(intel_crtc, pixel_size);
 	plane_ddl = plane_prec_multi | (plane_ddl);
 
 	intel_crtc->reg_ddl.plane_ddl = plane_ddl;
@@ -11073,6 +11070,7 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 	int plane_cnt = 0;
 	int pipe_stat = VLV_PIPE_STATS(dev_priv->pipe_plane_stat);
 	int plane_stat;
+	int prev_plane_stat;
 	int pipe = intel_crtc->pipe;
 	disp->errored = 0;
 	disp->presented = 0;
@@ -11117,7 +11115,12 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 	/* Calculation for Flips */
 	ret = intel_set_disp_calc_flip(disp, dev, file_priv, intel_crtc);
 
+	prev_plane_stat = VLV_PLANE_STATS(dev_priv->prev_pipe_plane_stat, pipe);
 	plane_stat = VLV_PLANE_STATS(dev_priv->pipe_plane_stat, pipe);
+
+	if (hweight32(prev_plane_stat) <=  hweight32(plane_stat))
+		valleyview_update_wm_pm5(intel_crtc);
+
 	/* Check if we need to a vblank, if so wait for vblank */
 	if (intel_dsi_is_enc_on_crtc_cmd_mode(crtc)) {
 		/*
@@ -11144,7 +11147,7 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 	ret = intel_set_disp_commit_regs(disp, dev, intel_crtc);
 
 	if (IS_CHERRYVIEW(dev))
-		valleyview_update_wm_pm5(intel_crtc);
+		vlv_update_dsparb(intel_crtc);
 
 	/* Enable maxfifo if needed */
 	if (!dev_priv->maxfifo_enabled && single_pipe_enabled(pipe_stat)
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index dbc59f4..b58b799 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -77,6 +77,10 @@
 #define VLV_PLANE_STATS(x, pipe) (((x & ~(0xF << (((sizeof(int)) * 8) - 4))) \
 					>> (4 * pipe)) & (0xf))
 
+#define NIBBLE	4
+#define PIPE_ENABLE(pipe)	(1 << (pipe + ((sizeof(int) * BITS_PER_BYTE) \
+								- NIBBLE)))
+
 /*
  * Display related stuff
  */
@@ -418,6 +422,12 @@ struct intel_ddl_reg {
 	u32 spriteb_ddl_mask;
 };
 
+struct vlv_wm_level {
+	u32 pa;
+	u32 sa;
+	u32 sb;
+};
+
 struct intel_crtc {
 	struct drm_crtc base;
 	enum pipe pipe;
@@ -487,6 +497,9 @@ struct intel_crtc {
 	struct intel_disp_reg reg;
 	struct intel_ddl_reg reg_ddl;
 
+	/* per-pipe wm level */
+	struct vlv_wm_level vlv_wm;
+
 	/* per-pipe watermark state */
 	struct {
 		/* watermarks currently being used  */
@@ -1171,6 +1184,7 @@ bool i915_is_device_suspended(struct drm_device *drm_dev);
 
 void intel_update_maxfifo(struct drm_i915_private *dev_priv,
 				struct drm_crtc *crtc, bool enable);
+u32 vlv_calculate_wm(struct intel_crtc *crtc, int pixel_size);
 
 /* intel_sdvo.c */
 bool intel_sdvo_init(struct drm_device *dev, uint32_t sdvo_reg, bool is_sdvob);
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 5bdeed3..d6cc4d7 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -1542,6 +1542,188 @@ bool vlv_calculate_ddl(struct drm_crtc *crtc,
 	return true;
 }
 
+u32 vlv_calculate_wm(struct intel_crtc *crtc, int pixel_size)
+{
+	struct drm_device *dev = crtc->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	const struct drm_display_mode *adjusted_mode;
+	int pipe = crtc->pipe;
+	int plane_stat = VLV_PLANE_STATS(dev_priv->pipe_plane_stat, pipe);
+	int pipe_stat = VLV_PIPE_STATS(dev_priv->pipe_plane_stat);
+	u32 line_time = 0, buffer_wm = 0;
+	int latency;
+	int hdisplay, htotal, clock;
+
+	adjusted_mode = &crtc->config.adjusted_mode;
+	htotal = adjusted_mode->crtc_htotal;
+	hdisplay = crtc->config.pipe_src_w;
+	clock = crtc->config.adjusted_mode.crtc_clock;
+
+	if (single_plane_enabled(plane_stat)
+			&& !(pipe_stat & PIPE_ENABLE(PIPE_C)))
+		latency = 33000;
+	else
+		latency = 20000;
+
+	if (clock)
+		line_time = (htotal * 1000) / clock;
+	if (line_time)
+		buffer_wm = ((latency / line_time / 1000) + 1) *
+						hdisplay * pixel_size;
+
+	return buffer_wm;
+}
+
+static u32 vlv_update_wm_val(int fifo_size, int wm_level)
+{
+	int wm_val;
+
+	if (fifo_size/64 > wm_level/64)
+		wm_val = fifo_size/64 - wm_level/64;
+	else
+		wm_val = 0;
+
+	return wm_val;
+}
+
+void vlv_update_dsparb(struct intel_crtc *intel_crtc)
+{
+	struct drm_device *dev = intel_crtc->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	int pipe = intel_crtc->pipe;
+	int plane_stat = VLV_PLANE_STATS(dev_priv->pipe_plane_stat, pipe);
+	int pipe_stat = VLV_PIPE_STATS(dev_priv->pipe_plane_stat);
+	u32 dsparb = 0;
+	u32 dsparb_h = 0;
+	u32 pa = 0, sa = 0, sb = 0;
+	int fifo_size = 0;
+
+	if (hweight32(plane_stat) == 1) {
+		/* Allocate the entire fifo to the plane that is enabled */
+		dsparb |=  (0xFFFF << ((ffs(plane_stat) - 1) * 8));
+		dsparb_h |= (0x11 << ((ffs(plane_stat) - 1) * 4));
+
+		fifo_size = 32 * 1024;
+
+		/* recollect the wm values */
+		if (plane_stat == 0x1)
+			pa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.pa);
+		else if (plane_stat == 0x2)
+			sa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sa);
+		else
+			sb = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sb);
+	} else if (hweight32(plane_stat) == 3) {
+		/* all 3 planes enabled, fifo allocation 50:25:25 */
+		dsparb |= DSPARB_50_25_25;
+		dsparb_h |= DSPARB2_50_25_25;
+
+		/* recollect the wm values */
+		fifo_size = (32 * 1024 * 50) / 100;
+		pa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.pa);
+		fifo_size = (32 * 1024 * 25) / 100;
+		sa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sa);
+		sb = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sb);
+
+	} else if (hweight32(plane_stat) == 2) {
+		/* 2 planes, enable fifo allocation 50:50 */
+		fifo_size = (32 * 1024 * 50) / 100;
+		if ((plane_stat & PRI_SA) == PRI_SA) {
+			dsparb |= DSPARB_PRI50_SA50;
+			dsparb_h |= DSPARB2_PRI50_SA50;
+
+			pa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.pa);
+			sa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sa);
+
+		} else if ((plane_stat & PRI_SB) == PRI_SB) {
+			dsparb |= DSPARB_PRI50_SB50;
+			dsparb_h |= DSPARB2_PRI50_SB50;
+
+			pa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.pa);
+			sb = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sb);
+		} else {
+			dsparb |= DSPARB_SA50_SB50;
+			dsparb_h |= DSPARB2_SA50_SB50;
+
+			sa = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sa);
+			sb = vlv_update_wm_val(fifo_size,
+					intel_crtc->vlv_wm.sb);
+		}
+	} else {
+		DRM_ERROR("Invalid pipe\n");
+	}
+
+	if (!single_pipe_enabled(pipe_stat) ||
+				(pipe_stat & PIPE_ENABLE(PIPE_C))) {
+		pa = 0;
+		sa = 0;
+		sb = 0;
+	}
+
+	switch (pipe) {
+	case PIPE_A:
+		I915_WRITE_BITS(DSPARB, dsparb, DSPARB_PIPEA_MASK);
+		I915_WRITE_BITS(DSPARB2, dsparb_h, DSPARB2_PIPEA_MASK);
+
+		/* update wm */
+		I915_WRITE_BITS(DSPFW1, pa, VLV_FW_PIPEA_PA_MASK);
+		I915_WRITE_BITS(DSPFW2, sa, VLV_FW_PIPEA_SA_MASK);
+		I915_WRITE_BITS(DSPFW2, (sb << VLV_FW_PIPEA_SB_SHIFT),
+							VLV_FW_PIPEA_SB_MASK);
+		I915_WRITE(DSPHOWM, (I915_READ(DSPHOWM) &
+						~(VLV_DSPHOWM_PIPEA_MASK)) |
+						(((pa >> 8) | ((sa >> 8) <<
+						VLV_DSPHOWM_PIPEA_SA_SHIFT) |
+						((sb >> 8) <<
+						VLV_DSPHOWM_PIPEA_SB_SHIFT))));
+		break;
+	case PIPE_B:
+		I915_WRITE_BITS(DSPARB, (dsparb << DSPARB_PIPEB_SHIFT),
+						DSPARB_PIPEB_MASK);
+		I915_WRITE_BITS(DSPARB2, (dsparb_h << DSPARB2_PIPEB_SHIFT),
+						DSPARB2_PIPEB_MASK);
+		/* update wm */
+		I915_WRITE_BITS(DSPFW1, (pa << VLV_FW_PIPEB_PB_SHIFT),
+							VLV_FW_PIPEB_PB_MASK);
+		I915_WRITE_BITS(DSPFW7, sa, VLV_FW_PIPEB_SC_MASK);
+		I915_WRITE_BITS(DSPFW7, (sb << VLV_FW_PIPEB_SD_SHIFT),
+							VLV_FW_PIPEB_SD_MASK);
+		I915_WRITE(DSPHOWM, (I915_READ(DSPHOWM) &
+					~(VLV_DSPHOWM_PIPEB_MASK)) |
+				((((pa >> 8) << VLV_DSPHOWM_PIPEB_PB_SHIFT) |
+				((sa >> 8) << VLV_DSPHOWM_PIPEB_SC_SHIFT) |
+				((sb >> 8) << VLV_DSPHOWM_PIPEB_SD_SHIFT))));
+
+		break;
+	case PIPE_C:
+		I915_WRITE_BITS(DSPARB3, dsparb, DSPARB3_PIPEC_MASK);
+		I915_WRITE_BITS(DSPARB2, (dsparb_h << DSPARB2_PIPEC_SHIFT),
+						DSPARB2_PIPEC_MASK);
+		/* update wm */
+		I915_WRITE_BITS(DSPFW9, (pa << VLV_FW_PIPEC_PC_SHIFT),
+							VLV_FW_PIPEC_PC_MASK);
+		I915_WRITE_BITS(DSPFW8, sa, VLV_FW_PIPEC_SE_MASK);
+		I915_WRITE_BITS(DSPFW8, (sb << VLV_FW_PIPEC_SF_SHIFT),
+							VLV_FW_PIPEC_SF_MASK);
+		I915_WRITE(DSPHOWM, (I915_READ(DSPHOWM) &
+						~(VLV_DSPHOWM_PIPEC_MASK)) |
+				((((pa >> 8) << VLV_DSPHOWM_PIPEC_PC_SHIFT) |
+				((sa >> 8) << VLV_DSPHOWM_PIPEC_SE_SHIFT) |
+				((sb >> 8) << VLV_DSPHOWM_PIPEC_SF_SHIFT))));
+		break;
+	}
+}
+
 void intel_update_maxfifo(struct drm_i915_private *dev_priv,
 				struct drm_crtc *crtc, bool enable)
 {
@@ -1571,7 +1753,6 @@ void intel_update_maxfifo(struct drm_i915_private *dev_priv,
 			mutex_lock(&dev_priv->rps.hw_lock);
 			vlv_punit_write(dev_priv, CHV_DDR_DVFS, val);
 			mutex_unlock(&dev_priv->rps.hw_lock);
-			valleyview_update_wm_pm5(to_intel_crtc(crtc));
 			mutex_lock(&dev_priv->rps.hw_lock);
 			val = vlv_punit_read(dev_priv, CHV_DPASSC);
 			I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
@@ -1588,44 +1769,76 @@ void valleyview_update_wm_pm5(struct intel_crtc *crtc)
 {
 	struct drm_device *dev = crtc->base.dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	int pipe = crtc->pipe;
+	int plane_stat = VLV_PLANE_STATS(dev_priv->pipe_plane_stat, pipe);
+	int prev_plane_stat = VLV_PLANE_STATS(dev_priv->prev_pipe_plane_stat,
+								pipe);
+	int sa, sb, pa, dsparb, dsparb_h;
 
-	I915_WRITE(DSPARB, DSPARB_VLV_DEFAULT);
-	I915_WRITE(DSPARB2, DSPARB2_VLV_DEFAULT);
-	I915_WRITE(DSPARB3, DSPARB3_VLV_DEFAULT);
+	if (prev_plane_stat == plane_stat)
+		return;
 
-	I915_WRITE(DSPFW1,
-		   (DSPFW_SR_VAL << DSPFW_SR_SHIFT) |
-		   (DSPFW_CURSORB_VAL << DSPFW_CURSORB_SHIFT) |
-		   (DSPFW_PLANEB_VAL << DSPFW_PLANEB_SHIFT) |
-		   DSPFW_PLANEA_VAL);
-	I915_WRITE(DSPFW2,
-		   (DSPFW2_RESERVED) |
-		   (DSPFW_CURSORA_VAL << DSPFW_CURSORA_SHIFT) |
-		   DSPFW_PLANEC_VAL);
-	I915_WRITE(DSPFW3,
-		   (I915_READ(DSPFW3) & ~DSPFW_CURSOR_SR_MASK) |
-		   (DSPFW3_VLV));
-	I915_WRITE(DSPFW5, (DSPFW5_DISPLAYB_VAL << DSPFW5_DISPLAYB_SHIFT) |
-			(DSPFW5_DISPLAYA_VAL << DSPFW5_DISPLAYA_SHIFT) |
-			(DSPFW5_CURSORB_VAL << DSPFW5_CURSORB_SHIFT) |
-			DSPFW5_CURSORSR_VAL);
-	I915_WRITE(DSPFW6, DSPFW6_DISPLAYSR_VAL);
+	/* intermediate watermarks*/
+	pa = 0;
+	sa = 0;
+	sb = 0;
+	dsparb = DSPARB_50_25_25;
+	dsparb_h = DSPARB2_50_25_25;
+
+	switch (pipe) {
+	case PIPE_A:
+		I915_WRITE_BITS(DSPARB, dsparb, DSPARB_PIPEA_MASK);
+		I915_WRITE_BITS(DSPARB2, dsparb_h, DSPARB2_PIPEA_MASK);
+
+		/* update wm*/
+		I915_WRITE_BITS(DSPFW1, pa, VLV_FW_PIPEA_PA_MASK);
+		I915_WRITE_BITS(DSPFW2, sa, VLV_FW_PIPEA_SA_MASK);
+		I915_WRITE_BITS(DSPFW2, (sb << VLV_FW_PIPEA_SB_SHIFT),
+							VLV_FW_PIPEA_SB_MASK);
+		I915_WRITE(DSPHOWM, (I915_READ(DSPHOWM) &
+						~(VLV_DSPHOWM_PIPEA_MASK)) |
+						(((pa >> 8) | ((sa >> 8) <<
+						VLV_DSPHOWM_PIPEA_SA_SHIFT) |
+						((sb >> 8) <<
+						VLV_DSPHOWM_PIPEA_SB_SHIFT))));
+		break;
+	case PIPE_B:
+		I915_WRITE_BITS(DSPARB, (dsparb << DSPARB_PIPEB_SHIFT),
+						DSPARB_PIPEB_MASK);
+		I915_WRITE_BITS(DSPARB2, (dsparb_h << DSPARB2_PIPEB_SHIFT),
+						DSPARB2_PIPEB_MASK);
+		/* update wm*/
+		I915_WRITE_BITS(DSPFW1, (pa << VLV_FW_PIPEB_PB_SHIFT),
+							VLV_FW_PIPEB_PB_MASK);
+		I915_WRITE_BITS(DSPFW7, sa, VLV_FW_PIPEB_SC_MASK);
+		I915_WRITE_BITS(DSPFW7, (sb << VLV_FW_PIPEB_SD_SHIFT),
+							VLV_FW_PIPEB_SD_MASK);
+		I915_WRITE(DSPHOWM, (I915_READ(DSPHOWM) &
+					~(VLV_DSPHOWM_PIPEB_MASK)) |
+				((((pa >> 8) << VLV_DSPHOWM_PIPEB_PB_SHIFT) |
+				((sa >> 8) << VLV_DSPHOWM_PIPEB_SC_SHIFT) |
+				((sb >> 8) << VLV_DSPHOWM_PIPEB_SD_SHIFT))));
 
-	/* updating the sprite watermark*/
-	I915_WRITE(DSPFW4, (DSPFW4_SPRITEB_VAL << DSPFW4_SPRITEB_SHIFT) |
-			(DSPFW4_CURSORA_VAL << DSPFW4_CURSORA_SHIFT) |
-			DSPFW4_SPRITEA_VAL);
-	I915_WRITE(DSPFW7, (DSPFW7_SPRITED1_VAL << DSPFW7_SPRITED1_SHIFT) |
-			(DSPFW7_SPRITED_VAL << DSPFW7_SPRITED_SHIFT) |
-			(DSPFW7_SPRITEC1_VAL << DSPFW7_SPRITEC1_SHIFT) |
-			DSPFW7_SPRITEC_VAL);
-	I915_WRITE(DSPFW8, (DSPFW8_SPRITEF1_VAL << DSPFW8_SPRITEF1_SHIFT) |
-			(DSPFW8_SPRITEF_VAL << DSPFW8_SPRITEF_SHIFT) |
-			(DSPFW8_SPRITEE1_VAL << DSPFW8_SPRITEE1_SHIFT) |
-			DSPFW8_SPRITEE_VAL);
-	I915_WRITE(DSPFW9, (I915_READ(DSPFW9) | VLV_DSPFW9_DEF_WM));
-	I915_WRITE(DSPHOWM, 0);
-	I915_WRITE(DSPHOWM1, 0);
+		break;
+	case PIPE_C:
+		I915_WRITE_BITS(DSPARB3, dsparb, DSPARB3_PIPEC_MASK);
+		I915_WRITE_BITS(DSPARB2, (dsparb_h << DSPARB2_PIPEC_SHIFT),
+						DSPARB2_PIPEC_MASK);
+		/* update wm*/
+		I915_WRITE_BITS(DSPFW9, (pa << VLV_FW_PIPEC_PC_SHIFT),
+							VLV_FW_PIPEC_PC_MASK);
+		I915_WRITE_BITS(DSPFW8, sa, VLV_FW_PIPEC_SE_MASK);
+		I915_WRITE_BITS(DSPFW8, (sb << VLV_FW_PIPEC_SF_SHIFT),
+							VLV_FW_PIPEC_SF_MASK);
+		I915_WRITE(DSPHOWM, (I915_READ(DSPHOWM) &
+						~(VLV_DSPHOWM_PIPEC_MASK)) |
+				((((pa >> 8) << VLV_DSPHOWM_PIPEC_PC_SHIFT) |
+				((sa >> 8) << VLV_DSPHOWM_PIPEC_SE_SHIFT) |
+				((sb >> 8) << VLV_DSPHOWM_PIPEC_SF_SHIFT))));
+		break;
+	default:
+		DRM_ERROR("invalid pipe\n");
+	}
 }
 
 static void valleyview_update_wm(struct drm_crtc *crtc)
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index b43b1dd..accecdd 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -672,6 +672,14 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	if ((sprite_ddl & mask) != (I915_READ(VLV_DDL(pipe)) & mask))
 		I915_WRITE_BITS(VLV_DDL(pipe), 0x00, mask);
 
+	/* calculate  watermark */
+	if (intel_plane->plane == 0)
+		intel_crtc->vlv_wm.sa = vlv_calculate_wm(intel_crtc,
+							pixel_size);
+	else
+		intel_crtc->vlv_wm.sb = vlv_calculate_wm(intel_crtc,
+							pixel_size);
+
 	intel_plane->reg.surf = I915_READ(SPSURF(pipe, plane));
 
 	if (intel_plane->rrb2_enable)
-- 
1.7.9.5

