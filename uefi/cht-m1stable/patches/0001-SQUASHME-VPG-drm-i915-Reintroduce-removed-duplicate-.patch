From b4c66aa6a04d2be0fca9fa4448c7188a581a57a5 Mon Sep 17 00:00:00 2001
Message-Id: <b4c66aa6a04d2be0fca9fa4448c7188a581a57a5.1427265330.git.chang-joon.lee@intel.com>
From: Arun Siluvery <arun.siluvery@linux.intel.com>
Date: Thu, 12 Mar 2015 10:30:18 +0000
Subject: [PATCH 01/22] SQUASHME! [VPG]: drm/i915: Reintroduce removed
 duplicate variable

A duplicate variable (last_head) in Ring hangcheck structure to track
last known head position was previously removed in the following patch.

SQUASHME! [VPG]: drm/i915: Keep Ring HWS page address persistent across GPU reset
https://android.intel.com/#/c/333321/

This change overwrites the variable last_hd stored in hangcheck structure.
In case of normal hang they should have the same head value and this change
did not cause any issues with our TDR ULTs.
But a failure scenario is found with the stress tests done by validation team
with a very large batch buffers; they found that we can get stuck in an endless
reset recovery cycle, in this case it was Blitter ring that caused issues.
Tests are now passing if these changes are reverted.

This patch should be squashed into the following patch:

    Author: Tomas Elf <tomas.elf@intel.com>
    Date:   Fri Oct 24 13:57:09 2014 +0100
    Change-Id: I45de965b4a81d93c135a74248eb22a8a5c816e9f
    FOR_UPSTREAM [VPG]: drm/i915: Added gen8 support for Timeout Detection Recovery for engine hangs

For: GMIN-3564
Tracked-On: https://jira01.devtools.intel.com/browse/GMIN-3564
Change-Id: I1d7a85140accf679d0acf1137a87703b6922e700
Cc: Tomas Elf <tomas.elf@intel.com>
Signed-off-by: Arun Siluvery <arun.siluvery@linux.intel.com>
---
 drivers/gpu/drm/i915/i915_drv.c         |    6 +++---
 drivers/gpu/drm/i915/intel_ringbuffer.h |    5 +++++
 2 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 7aa476b..e7de30c 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -1000,8 +1000,8 @@ int i915_handle_hung_ring(struct drm_device *dev, uint32_t ringid)
 	}
 
 	DRM_DEBUG_TDR("head 0x%08X, last_head 0x%08X\n",
-		head, dev_priv->ring[ringid].hangcheck.last_hd);
-	if (head == dev_priv->ring[ringid].hangcheck.last_hd) {
+		head, dev_priv->ring[ringid].hangcheck.last_head);
+	if (head == dev_priv->ring[ringid].hangcheck.last_head) {
 		/*
 		 * The ring has not advanced since the last
 		 * time it hung so force it to advance to the
@@ -1019,7 +1019,7 @@ int i915_handle_hung_ring(struct drm_device *dev, uint32_t ringid)
 		ring_flags = FORCE_ADVANCE;
 		DRM_DEBUG_TDR("Force ring head to advance\n");
 	}
-	dev_priv->ring[ringid].hangcheck.last_hd = head;
+	dev_priv->ring[ringid].hangcheck.last_head = head;
 
 	ret = intel_ring_save(ring, current_context, ring_flags);
 	if (ret == -EAGAIN) {
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.h b/drivers/gpu/drm/i915/intel_ringbuffer.h
index 368bdea..8004110 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.h
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.h
@@ -216,6 +216,11 @@ struct intel_ring_hangcheck {
 	u32 last_acthd;
 	u32 last_hd;
 
+	/* Last recorded ring head index.
+	 * This is only ever a ring index where as active
+	 * head may be a graphics address in a ring buffer */
+	u32 last_head;
+
 	/* Last recorded instdone */
 	u32 prev_instdone[I915_NUM_INSTDONE_REG];
 
-- 
1.7.9.5

