From 54281ed4458337b1ea0a074af88a73762f4a4551 Mon Sep 17 00:00:00 2001
From: "Yang, Dong" <dong.yang@intel.com>
Date: Fri, 27 Mar 2015 16:04:31 +0800
Subject: [PATCH 06/10] gc2235: Add more video resolutions

To reach the 30 fps, adjust some of the gc2235 register parameter.
Add 1296x736 and 960x480 resolution for video mode.

Separate BYT CR driver settings to separate file (gc2235-legacy.h)
to avoid breaking anything. The new resolutions for CHT T3 are only
needed because the MCLK is different between BYT and CHT.

Change-Id: Ic3629f6b8fcdb3b5e40f25b3b3ed39a7c970efcd
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-27057
Signed-off-by: Yang, Dong <dong.yang@intel.com>
Signed-off-by: Jarno Jakonen <jarno.jakonen@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/48709
Build: IMIN (SC)
Validation-Android: Wei Tao <wei.tao@intel.com>
Approver: Shuguang Gong <shuguang.gong@intel.com>
Reviewed-by: Shuguang Gong <shuguang.gong@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Build: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Maintainer: WeiX Meng <weix.meng@intel.com>
---
 .../camera/drivers/media/i2c/gc2235-legacy.h       | 556 +++++++++++++++++++++
 .../camera/drivers/media/i2c/gc2235.c              |  10 +-
 .../camera/drivers/media/i2c/gc2235.h              | 222 +++++---
 3 files changed, 725 insertions(+), 63 deletions(-)
 create mode 100644 drivers/external_drivers/camera/drivers/media/i2c/gc2235-legacy.h

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235-legacy.h b/drivers/external_drivers/camera/drivers/media/i2c/gc2235-legacy.h
new file mode 100644
index 0000000..5d6a3d7
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235-legacy.h
@@ -0,0 +1,556 @@
+/*
+ * Support for GalaxyCore GC2235 2M camera sensor.
+ *
+ * Copyright (c) 2014 Intel Corporation. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.
+ *
+ */
+
+#ifndef __GC2235_H__
+#define __GC2235_H__
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/videodev2.h>
+#include <linux/spinlock.h>
+#include <media/v4l2-subdev.h>
+#include <media/v4l2-device.h>
+#ifndef CONFIG_GMIN_INTEL_MID /* FIXME! for non-gmin*/
+#include <media/v4l2-chip-ident.h>
+#endif
+#include <linux/v4l2-mediabus.h>
+#include <media/media-entity.h>
+
+#include <linux/atomisp_platform.h>
+
+#define GC2235_NAME		"gc2235"
+
+/* Defines for register writes and register array processing */
+#define I2C_MSG_LENGTH		0x2
+#define I2C_RETRY_COUNT		5
+
+#define GC2235_FOCAL_LENGTH_NUM	278	/*2.78mm*/
+#define GC2235_FOCAL_LENGTH_DEM	100
+#define GC2235_F_NUMBER_DEFAULT_NUM	26
+#define GC2235_F_NUMBER_DEM	10
+
+#define MAX_FMTS		1
+
+/*
+ * focal length bits definition:
+ * bits 31-16: numerator, bits 15-0: denominator
+ */
+#define GC2235_FOCAL_LENGTH_DEFAULT 0x1160064
+
+/*
+ * current f-number bits definition:
+ * bits 31-16: numerator, bits 15-0: denominator
+ */
+#define GC2235_F_NUMBER_DEFAULT 0x1a000a
+
+/*
+ * f-number range bits definition:
+ * bits 31-24: max f-number numerator
+ * bits 23-16: max f-number denominator
+ * bits 15-8: min f-number numerator
+ * bits 7-0: min f-number denominator
+ */
+#define GC2235_F_NUMBER_RANGE 0x1a0a1a0a
+#define GC2235_ID	0x2235
+
+#define GC2235_FINE_INTG_TIME_MIN 0
+#define GC2235_FINE_INTG_TIME_MAX_MARGIN 0
+#define GC2235_COARSE_INTG_TIME_MIN 1
+#define GC2235_COARSE_INTG_TIME_MAX_MARGIN 6
+
+/*
+ * GC2235 System control registers
+ */
+/*
+ * GC2235 System control registers
+ */
+#define GC2235_SENSOR_ID_H		0xF0
+#define GC2235_SENSOR_ID_L		0xF1
+#define GC2235_RESET_RELATED		0xFE
+#define GC2235_SW_RESET			0x8
+#define GC2235_MIPI_RESET		0x3
+#define GC2235_RESET_BIT		0x4
+#define GC2235_REGISTER_PAGE_0		0x0
+#define GC2235_REGISTER_PAGE_3		0x3
+
+#define GC2235_V_CROP_START_H		0x91
+#define GC2235_V_CROP_START_L		0x92
+#define GC2235_H_CROP_START_H		0x93
+#define GC2235_H_CROP_START_L		0x94
+#define GC2235_V_OUTSIZE_H		0x95
+#define GC2235_V_OUTSIZE_L		0x96
+#define GC2235_H_OUTSIZE_H		0x97
+#define GC2235_H_OUTSIZE_L		0x98
+
+#define GC2235_HB_H			0x5
+#define GC2235_HB_L			0x6
+#define GC2235_VB_H			0x7
+#define GC2235_VB_L			0x8
+#define GC2235_SH_DELAY_H		0x11
+#define GC2235_SH_DELAY_L		0x12
+
+#define GC2235_CSI2_MODE		0x10
+
+#define GC2235_EXPOSURE_H		0x3
+#define GC2235_EXPOSURE_L		0x4
+#define GC2235_GLOBAL_GAIN		0xB0
+#define GC2235_PRE_GAIN			0xB1
+#define GC2235_AWB_R_GAIN		0xB3
+#define GC2235_AWB_G_GAIN		0xB4
+#define GC2235_AWB_B_GAIN		0xB5
+
+#define GC2235_START_STREAMING		0x91
+#define GC2235_STOP_STREAMING		0x0
+
+struct regval_list {
+	u16 reg_num;
+	u8 value;
+};
+
+struct gc2235_resolution {
+	u8 *desc;
+	const struct gc2235_reg *regs;
+	int res;
+	int width;
+	int height;
+	int fps;
+	int pix_clk_freq;
+	u32 skip_frames;
+	u16 pixels_per_line;
+	u16 lines_per_frame;
+	u8 bin_factor_x;
+	u8 bin_factor_y;
+	u8 bin_mode;
+	bool used;
+};
+
+struct gc2235_format {
+	u8 *desc;
+	u32 pixelformat;
+	struct gc2235_reg *regs;
+};
+
+struct gc2235_control {
+	struct v4l2_queryctrl qc;
+	int (*query)(struct v4l2_subdev *sd, s32 *value);
+	int (*tweak)(struct v4l2_subdev *sd, s32 value);
+};
+
+/*
+ * gc2235 device structure.
+ */
+struct gc2235_device {
+	struct v4l2_subdev sd;
+	struct media_pad pad;
+	struct v4l2_mbus_framefmt format;
+	struct mutex input_lock;
+
+	struct camera_sensor_platform_data *platform_data;
+	int vt_pix_clk_freq_mhz;
+	int fmt_idx;
+	int run_mode;
+	u8 res;
+	u8 type;
+};
+
+enum gc2235_tok_type {
+	GC2235_8BIT  = 0x0001,
+	GC2235_16BIT = 0x0002,
+	GC2235_32BIT = 0x0004,
+	GC2235_TOK_TERM   = 0xf000,	/* terminating token for reg list */
+	GC2235_TOK_DELAY  = 0xfe00,	/* delay token for reg list */
+	GC2235_TOK_MASK = 0xfff0
+};
+
+/**
+ * struct gc2235_reg - MI sensor  register format
+ * @type: type of the register
+ * @reg: 8-bit offset to register
+ * @val: 8/16/32-bit register value
+ *
+ * Define a structure for sensor register initialization values
+ */
+struct gc2235_reg {
+	enum gc2235_tok_type type;
+	u8 reg;
+	u32 val;	/* @set value for read/mod/write, @mask */
+};
+
+#define to_gc2235_sensor(x) container_of(x, struct gc2235_device, sd)
+
+#define GC2235_MAX_WRITE_BUF_SIZE	30
+
+struct gc2235_write_buffer {
+	u8 addr;
+	u8 data[GC2235_MAX_WRITE_BUF_SIZE];
+};
+
+struct gc2235_write_ctrl {
+	int index;
+	struct gc2235_write_buffer buffer;
+};
+
+static const struct i2c_device_id gc2235_id[] = {
+	{GC2235_NAME, 0},
+	{}
+};
+
+static struct gc2235_reg const gc2235_stream_on[] = {
+	{ GC2235_8BIT, 0xfe, 0x03}, /* switch to P3 */
+	{ GC2235_8BIT, 0x10, 0x91}, /* start mipi */
+	{ GC2235_8BIT, 0xfe, 0x00}, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+
+static struct gc2235_reg const gc2235_stream_off[] = {
+	{ GC2235_8BIT, 0xfe, 0x03}, /* switch to P3 */
+	{ GC2235_8BIT, 0x10, 0x81}, /* stop mipi */
+	{ GC2235_8BIT, 0xfe, 0x00}, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+
+static struct gc2235_reg const gc2235_init_settings[] = {
+	/* Sysytem */
+	{ GC2235_8BIT, 0xfe, 0x80 },
+	{ GC2235_8BIT, 0xfe, 0x80 },
+	{ GC2235_8BIT, 0xfe, 0x80 },
+	{ GC2235_8BIT, 0xf2, 0x00 },
+	{ GC2235_8BIT, 0xf6, 0x00 },
+	{ GC2235_8BIT, 0xfc, 0x06 },
+	{ GC2235_8BIT, 0xf7, 0x15 },
+	{ GC2235_8BIT, 0xf8, 0x85 },
+	{ GC2235_8BIT, 0xf9, 0xfe },
+	{ GC2235_8BIT, 0xfa, 0x00 },
+	{ GC2235_8BIT, 0xfe, 0x00 },
+	/* Analog & cisctl */
+	{ GC2235_8BIT, 0x03, 0x04 },
+	{ GC2235_8BIT, 0x04, 0x9e },
+	{ GC2235_8BIT, 0x05, 0x00 },
+	{ GC2235_8BIT, 0x06, 0xf4 },
+	{ GC2235_8BIT, 0x07, 0x00 },
+	{ GC2235_8BIT, 0x08, 0x88 },
+	{ GC2235_8BIT, 0x0a, 0x00 }, /* row start */
+	{ GC2235_8BIT, 0x0c, 0x00 }, /* col start */
+	{ GC2235_8BIT, 0x0d, 0x04 }, /* win height 1232 */
+	{ GC2235_8BIT, 0x0e, 0xd0 },
+	{ GC2235_8BIT, 0x0f, 0x06 }, /* win width: 1616 */
+	{ GC2235_8BIT, 0x10, 0x60 },
+	{ GC2235_8BIT, 0x17, 0x15 }, /* mirror flip */
+	{ GC2235_8BIT, 0x18, 0x12 },
+	{ GC2235_8BIT, 0x19, 0x06 },
+	{ GC2235_8BIT, 0x1a, 0x01 },
+	{ GC2235_8BIT, 0x1b, 0x4d },
+	{ GC2235_8BIT, 0x1e, 0x88 },
+	{ GC2235_8BIT, 0x1f, 0x48 },
+	{ GC2235_8BIT, 0x20, 0x03 },
+	{ GC2235_8BIT, 0x21, 0x7f },
+	{ GC2235_8BIT, 0x22, 0x83 },
+	{ GC2235_8BIT, 0x23, 0x42 },
+	{ GC2235_8BIT, 0x24, 0x16 },
+	{ GC2235_8BIT, 0x26, 0x01 }, /*analog gain*/
+	{ GC2235_8BIT, 0x27, 0x30 },
+	{ GC2235_8BIT, 0x3f, 0x00 }, /* PRC */
+	/* blk */
+	{ GC2235_8BIT, 0x40, 0x03 },
+	{ GC2235_8BIT, 0x41, 0x00 },
+	{ GC2235_8BIT, 0x43, 0x20 },
+	{ GC2235_8BIT, 0x5e, 0x00 },
+	{ GC2235_8BIT, 0x5f, 0x00 },
+	{ GC2235_8BIT, 0x60, 0x00 },
+	{ GC2235_8BIT, 0x61, 0x00 },
+	{ GC2235_8BIT, 0x62, 0x00 },
+	{ GC2235_8BIT, 0x63, 0x00 },
+	{ GC2235_8BIT, 0x64, 0x00 },
+	{ GC2235_8BIT, 0x65, 0x00 },
+	{ GC2235_8BIT, 0x66, 0x20 },
+	{ GC2235_8BIT, 0x67, 0x20 },
+	{ GC2235_8BIT, 0x68, 0x20 },
+	{ GC2235_8BIT, 0x69, 0x20 },
+	/* Gain */
+	{ GC2235_8BIT, 0xb2, 0x00 },
+	{ GC2235_8BIT, 0xb3, 0x40 },
+	{ GC2235_8BIT, 0xb4, 0x40 },
+	{ GC2235_8BIT, 0xb5, 0x40 },
+	/* Dark sun */
+	{ GC2235_8BIT, 0xbc, 0x00 },
+
+	{ GC2235_8BIT, 0xfe, 0x03 },
+	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+/*
+ * Register settings for various resolution
+ */
+static struct gc2235_reg const gc2235_1616_916_30fps[] = {
+	{ GC2235_8BIT, 0x8b, 0xa0 },
+	{ GC2235_8BIT, 0x8c, 0x02 },
+	{ GC2235_8BIT, 0x90, 0x01 },
+	{ GC2235_8BIT, 0x92, 0x96 },
+	{ GC2235_8BIT, 0x94, 0x00 },
+	{ GC2235_8BIT, 0x95, 0x03 }, /* crop win height 900 */
+	{ GC2235_8BIT, 0x96, 0x94 },
+	{ GC2235_8BIT, 0x97, 0x06 }, /* crop win width 1600 */
+	{ GC2235_8BIT, 0x98, 0x50 },
+	/* mimi init */
+	{ GC2235_8BIT, 0xfe, 0x03 }, /* switch to P3 */
+	{ GC2235_8BIT, 0x01, 0x07 },
+	{ GC2235_8BIT, 0x02, 0x11 },
+	{ GC2235_8BIT, 0x03, 0x11 },
+	{ GC2235_8BIT, 0x06, 0x80 },
+	{ GC2235_8BIT, 0x11, 0x2b },
+	/* set mipi buffer */
+	{ GC2235_8BIT, 0x12, 0xe4 }, /* val_low = (width * 10 / 8) & 0xFF */
+	{ GC2235_8BIT, 0x13, 0x07 }, /* val_high = (width * 10 / 8) >> 8 */
+
+	{ GC2235_8BIT, 0x15, 0x12 }, /* DPHY mode*/
+	{ GC2235_8BIT, 0x04, 0x20 },
+	{ GC2235_8BIT, 0x05, 0x00 },
+	{ GC2235_8BIT, 0x17, 0x01 },
+	{ GC2235_8BIT, 0x21, 0x01 },
+	{ GC2235_8BIT, 0x22, 0x02 },
+	{ GC2235_8BIT, 0x23, 0x01 },
+	{ GC2235_8BIT, 0x29, 0x02 },
+	{ GC2235_8BIT, 0x2a, 0x01 },
+	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+
+static struct gc2235_reg const gc2235_1616_1082_30fps[] = {
+	{ GC2235_8BIT, 0x8b, 0xa0 },
+	{ GC2235_8BIT, 0x8c, 0x02 },
+	{ GC2235_8BIT, 0x90, 0x01 },
+	{ GC2235_8BIT, 0x92, 0x4a },
+	{ GC2235_8BIT, 0x94, 0x00 },
+	{ GC2235_8BIT, 0x95, 0x04 }, /* crop win height 1082 */
+	{ GC2235_8BIT, 0x96, 0x3a },
+	{ GC2235_8BIT, 0x97, 0x06 }, /* crop win width 1616 */
+	{ GC2235_8BIT, 0x98, 0x50 },
+	/* mimi init */
+	{ GC2235_8BIT, 0xfe, 0x03 }, /* switch to P3 */
+	{ GC2235_8BIT, 0x01, 0x07 },
+	{ GC2235_8BIT, 0x02, 0x11 },
+	{ GC2235_8BIT, 0x03, 0x11 },
+	{ GC2235_8BIT, 0x06, 0x80 },
+	{ GC2235_8BIT, 0x11, 0x2b },
+	/* set mipi buffer */
+	{ GC2235_8BIT, 0x12, 0xe4 }, /* val_low = (width * 10 / 8) & 0xFF */
+	{ GC2235_8BIT, 0x13, 0x07 }, /* val_high = (width * 10 / 8) >> 8 */
+
+	{ GC2235_8BIT, 0x15, 0x12 }, /* DPHY mode*/
+	{ GC2235_8BIT, 0x04, 0x20 },
+	{ GC2235_8BIT, 0x05, 0x00 },
+	{ GC2235_8BIT, 0x17, 0x01 },
+	{ GC2235_8BIT, 0x21, 0x01 },
+	{ GC2235_8BIT, 0x22, 0x02 },
+	{ GC2235_8BIT, 0x23, 0x01 },
+	{ GC2235_8BIT, 0x29, 0x02 },
+	{ GC2235_8BIT, 0x2a, 0x01 },
+	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+
+static struct gc2235_reg const gc2235_1616_1216_30fps[] = {
+	{ GC2235_8BIT, 0x8b, 0xa0 },
+	{ GC2235_8BIT, 0x8c, 0x02 },
+	{ GC2235_8BIT, 0x90, 0x01 },
+	{ GC2235_8BIT, 0x92, 0x02 },
+	{ GC2235_8BIT, 0x94, 0x00 },
+	{ GC2235_8BIT, 0x95, 0x04 }, /* crop win height 1216 */
+	{ GC2235_8BIT, 0x96, 0xc0 },
+	{ GC2235_8BIT, 0x97, 0x06 }, /* crop win width 1616 */
+	{ GC2235_8BIT, 0x98, 0x50 },
+	/* mimi init */
+	{ GC2235_8BIT, 0xfe, 0x03 }, /* switch to P3 */
+	{ GC2235_8BIT, 0x01, 0x07 },
+	{ GC2235_8BIT, 0x02, 0x11 },
+	{ GC2235_8BIT, 0x03, 0x11 },
+	{ GC2235_8BIT, 0x06, 0x80 },
+	{ GC2235_8BIT, 0x11, 0x2b },
+	/* set mipi buffer */
+	{ GC2235_8BIT, 0x12, 0xe4 }, /* val_low = (width * 10 / 8) & 0xFF */
+	{ GC2235_8BIT, 0x13, 0x07 }, /* val_high = (width * 10 / 8) >> 8 */
+
+	{ GC2235_8BIT, 0x15, 0x12 }, /* DPHY mode*/
+	{ GC2235_8BIT, 0x04, 0x20 },
+	{ GC2235_8BIT, 0x05, 0x00 },
+	{ GC2235_8BIT, 0x17, 0x01 },
+	{ GC2235_8BIT, 0x21, 0x01 },
+	{ GC2235_8BIT, 0x22, 0x02 },
+	{ GC2235_8BIT, 0x23, 0x01 },
+	{ GC2235_8BIT, 0x29, 0x02 },
+	{ GC2235_8BIT, 0x2a, 0x01 },
+	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+
+struct gc2235_resolution gc2235_res_preview[] = {
+	{
+		.desc = "gc2235_1600_900_30fps",
+		.width = 1616,
+		.height = 916,
+		.pix_clk_freq = 75,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 932,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_916_30fps,
+	},
+	{
+		.desc = "gc2235_1600_1066_30fps",
+		.width = 1616,
+		.height = 1082,
+		.pix_clk_freq = 75,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 1098,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_1082_30fps,
+	},
+	{
+		.desc = "gc2235_1600_1200_30fps",
+		.width = 1616,
+		.height = 1216,
+		.pix_clk_freq = 75,
+		.fps = 27,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 1232,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_1216_30fps,
+	},
+};
+#define N_RES_PREVIEW (ARRAY_SIZE(gc2235_res_preview))
+
+struct gc2235_resolution gc2235_res_still[] = {
+	{
+		.desc = "gc2235_1600_900_30fps",
+		.width = 1616,
+		.height = 916,
+		.pix_clk_freq = 75,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 932,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_916_30fps,
+	},
+	{
+		.desc = "gc2235_1600_1066_30fps",
+		.width = 1616,
+		.height = 1082,
+		.pix_clk_freq = 75,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 1098,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_1082_30fps,
+	},
+	{
+		.desc = "gc2235_1600_1200_30fps",
+		.width = 1616,
+		.height = 1216,
+		.pix_clk_freq = 75,
+		.fps = 27,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 1232,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_1216_30fps,
+	},
+};
+#define N_RES_STILL (ARRAY_SIZE(gc2235_res_still))
+
+struct gc2235_resolution gc2235_res_video[] = {
+	{
+		.desc = "gc2235_1600_900_30fps",
+		.width = 1616,
+		.height = 916,
+		.pix_clk_freq = 75,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 932,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_916_30fps,
+	},
+	{
+		.desc = "gc2235_1600_1066_30fps",
+		.width = 1616,
+		.height = 1082,
+		.pix_clk_freq = 75,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 1098,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_1082_30fps,
+	},
+	{
+		.desc = "gc2235_1600_1200_30fps",
+		.width = 1616,
+		.height = 1216,
+		.pix_clk_freq = 75,
+		.fps = 27,
+		.used = 0,
+		.pixels_per_line = 1616,
+		.lines_per_frame = 1232,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = gc2235_1616_1216_30fps,
+	},
+};
+#define N_RES_VIDEO (ARRAY_SIZE(gc2235_res_video))
+
+static struct gc2235_resolution *gc2235_res = gc2235_res_preview;
+static int N_RES = N_RES_PREVIEW;
+#endif
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
index f7d03bb..2431b4f 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
@@ -42,7 +42,11 @@
 #include <linux/acpi.h>
 #include <linux/io.h>
 
+#ifndef CONFIG_GMIN_INTEL_MID /* for BYT CR legacy settings */
+#include "gc2235-legacy.h"
+#else
 #include "gc2235.h"
+#endif
 
 /* i2c read/write stuff */
 static int gc2235_read_reg(struct i2c_client *client,
@@ -570,6 +574,7 @@ static int gc2235_s_ctrl(struct v4l2_subdev *sd, struct v4l2_control *ctrl)
 
 	return ret;
 }
+
 static int __gc2235_init(struct v4l2_subdev *sd)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
@@ -827,9 +832,10 @@ static int startup(struct v4l2_subdev *sd)
 	/* force gc2235 to do a reset, otherwise it
 	* can not output normal after switching res
 	*/
-	gc2235_s_power(sd, 0);
-	gc2235_s_power(sd, 1);
+	power_down(sd);
+	power_up(sd);
 
+	gc2235_write_reg_array(client, gc2235_init_settings);
 	ret = gc2235_write_reg_array(client, gc2235_res[dev->fmt_idx].regs);
 	if (ret) {
 		dev_err(&client->dev, "gc2235 write register err.\n");
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
index 615c32a..71a4e72 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
@@ -13,9 +13,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
+ * along with this program.
  *
  */
 
@@ -223,7 +221,7 @@ static struct gc2235_reg const gc2235_stream_on[] = {
 
 static struct gc2235_reg const gc2235_stream_off[] = {
 	{ GC2235_8BIT, 0xfe, 0x03}, /* switch to P3 */
-	{ GC2235_8BIT, 0x10, 0x81}, /* stop mipi */
+	{ GC2235_8BIT, 0x10, 0x01}, /* stop mipi */
 	{ GC2235_8BIT, 0xfe, 0x00}, /* switch to P0 */
 	{ GC2235_TOK_TERM, 0, 0 }
 };
@@ -243,12 +241,12 @@ static struct gc2235_reg const gc2235_init_settings[] = {
 	{ GC2235_8BIT, 0xfe, 0x00 },
 	/* Analog & cisctl */
 	{ GC2235_8BIT, 0x03, 0x04 },
-	{ GC2235_8BIT, 0x04, 0x9e },
+	{ GC2235_8BIT, 0x04, 0x9E },
 	{ GC2235_8BIT, 0x05, 0x00 },
-	{ GC2235_8BIT, 0x06, 0xf4 },
+	{ GC2235_8BIT, 0x06, 0xfd },
 	{ GC2235_8BIT, 0x07, 0x00 },
-	{ GC2235_8BIT, 0x08, 0x88 },
-	{ GC2235_8BIT, 0x0a, 0x00 }, /* row start */
+	{ GC2235_8BIT, 0x08, 0x14 },
+	{ GC2235_8BIT, 0x0a, 0x02 }, /* row start */
 	{ GC2235_8BIT, 0x0c, 0x00 }, /* col start */
 	{ GC2235_8BIT, 0x0d, 0x04 }, /* win height 1232 */
 	{ GC2235_8BIT, 0x0e, 0xd0 },
@@ -294,23 +292,123 @@ static struct gc2235_reg const gc2235_init_settings[] = {
 	{ GC2235_8BIT, 0xbc, 0x00 },
 
 	{ GC2235_8BIT, 0xfe, 0x03 },
-	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0x10, 0x01 }, /* disable mipi */
 	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
 	{ GC2235_TOK_TERM, 0, 0 }
 };
 /*
  * Register settings for various resolution
  */
-static struct gc2235_reg const gc2235_1616_916_30fps[] = {
+static struct gc2235_reg const gc2235_1296_736_30fps[] = {
 	{ GC2235_8BIT, 0x8b, 0xa0 },
 	{ GC2235_8BIT, 0x8c, 0x02 },
+
+	{ GC2235_8BIT, 0x07, 0x01 }, /* VBI */
+	{ GC2235_8BIT, 0x08, 0x48 },
+	{ GC2235_8BIT, 0x09, 0x00 }, /* row start */
+	{ GC2235_8BIT, 0x0a, 0xf0 },
+	{ GC2235_8BIT, 0x0b, 0x00 }, /* col start */
+	{ GC2235_8BIT, 0x0c, 0xa0 },
+	{ GC2235_8BIT, 0x0d, 0x02 }, /* win height 736 */
+	{ GC2235_8BIT, 0x0e, 0xf0 },
+	{ GC2235_8BIT, 0x0f, 0x05 }, /* win width: 1296 */
+	{ GC2235_8BIT, 0x10, 0x10 },
+
 	{ GC2235_8BIT, 0x90, 0x01 },
-	{ GC2235_8BIT, 0x92, 0x96 },
-	{ GC2235_8BIT, 0x94, 0x00 },
+	{ GC2235_8BIT, 0x92, 0x02 },
+	{ GC2235_8BIT, 0x94, 0x06 },
+	{ GC2235_8BIT, 0x95, 0x02 }, /* crop win height 736 */
+	{ GC2235_8BIT, 0x96, 0xd0 },
+	{ GC2235_8BIT, 0x97, 0x05 }, /* crop win width 1296 */
+	{ GC2235_8BIT, 0x98, 0x00 },
+	/* mimi init */
+	{ GC2235_8BIT, 0xfe, 0x03 }, /* switch to P3 */
+	{ GC2235_8BIT, 0x01, 0x07 },
+	{ GC2235_8BIT, 0x02, 0x11 },
+	{ GC2235_8BIT, 0x03, 0x11 },
+	{ GC2235_8BIT, 0x06, 0x80 },
+	{ GC2235_8BIT, 0x11, 0x2b },
+	/* set mipi buffer */
+	{ GC2235_8BIT, 0x12, 0x40 }, /* val_low = (width * 10 / 8) & 0xFF */
+	{ GC2235_8BIT, 0x13, 0x06 }, /* val_high = (width * 10 / 8) >> 8 */
+
+	{ GC2235_8BIT, 0x15, 0x12 }, /* DPHY mode*/
+	{ GC2235_8BIT, 0x04, 0x20 },
+	{ GC2235_8BIT, 0x05, 0x00 },
+	{ GC2235_8BIT, 0x17, 0x01 },
+	{ GC2235_8BIT, 0x21, 0x01 },
+	{ GC2235_8BIT, 0x22, 0x02 },
+	{ GC2235_8BIT, 0x23, 0x01 },
+	{ GC2235_8BIT, 0x29, 0x02 },
+	{ GC2235_8BIT, 0x2a, 0x09 },
+	{ GC2235_8BIT, 0x10, 0x01 }, /* disable mipi */
+	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+
+static struct gc2235_reg const gc2235_960_640_30fps[] = {
+	{ GC2235_8BIT, 0x8b, 0xa0 },
+	{ GC2235_8BIT, 0x8c, 0x02 },
+
+	{ GC2235_8BIT, 0x07, 0x02 }, /* VBI */
+	{ GC2235_8BIT, 0x08, 0xA4 },
+	{ GC2235_8BIT, 0x09, 0x01 }, /* row start */
+	{ GC2235_8BIT, 0x0a, 0x18 },
+	{ GC2235_8BIT, 0x0b, 0x01 }, /* col start */
+	{ GC2235_8BIT, 0x0c, 0x40 },
+	{ GC2235_8BIT, 0x0d, 0x02 }, /* win height 656 */
+	{ GC2235_8BIT, 0x0e, 0x90 },
+	{ GC2235_8BIT, 0x0f, 0x03 }, /* win width: 976 */
+	{ GC2235_8BIT, 0x10, 0xd0 },
+
+	{ GC2235_8BIT, 0x90, 0x01 },
+	{ GC2235_8BIT, 0x92, 0x02 },
+	{ GC2235_8BIT, 0x94, 0x06 },
+	{ GC2235_8BIT, 0x95, 0x02 }, /* crop win height 640 */
+	{ GC2235_8BIT, 0x96, 0x80 },
+	{ GC2235_8BIT, 0x97, 0x03 }, /* crop win width 960 */
+	{ GC2235_8BIT, 0x98, 0xc0 },
+	/* mimp init */
+	{ GC2235_8BIT, 0xfe, 0x03 }, /* switch to P3 */
+	{ GC2235_8BIT, 0x01, 0x07 },
+	{ GC2235_8BIT, 0x02, 0x11 },
+	{ GC2235_8BIT, 0x03, 0x11 },
+	{ GC2235_8BIT, 0x06, 0x80 },
+	{ GC2235_8BIT, 0x11, 0x2b },
+	/* set mipi buffer */
+	{ GC2235_8BIT, 0x12, 0xb0 }, /* val_low = (width * 10 / 8) & 0xFF */
+	{ GC2235_8BIT, 0x13, 0x04 }, /* val_high = (width * 10 / 8) >> 8 */
+
+	{ GC2235_8BIT, 0x15, 0x12 }, /* DPHY mode*/
+	{ GC2235_8BIT, 0x04, 0x20 },
+	{ GC2235_8BIT, 0x05, 0x00 },
+	{ GC2235_8BIT, 0x17, 0x01 },
+	{ GC2235_8BIT, 0x21, 0x01 },
+	{ GC2235_8BIT, 0x22, 0x02 },
+	{ GC2235_8BIT, 0x23, 0x01 },
+	{ GC2235_8BIT, 0x29, 0x02 },
+	{ GC2235_8BIT, 0x2a, 0x09 },
+	{ GC2235_8BIT, 0x10, 0x01 }, /* disable mipi */
+	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
+	{ GC2235_TOK_TERM, 0, 0 }
+};
+
+static struct gc2235_reg const gc2235_1600_900_30fps[] = {
+	{ GC2235_8BIT, 0x8b, 0xa0 },
+	{ GC2235_8BIT, 0x8c, 0x02 },
+
+	{ GC2235_8BIT, 0x0d, 0x03 }, /* win height 932 */
+	{ GC2235_8BIT, 0x0e, 0xa4 },
+	{ GC2235_8BIT, 0x0f, 0x06 }, /* win width: 1632 */
+	{ GC2235_8BIT, 0x10, 0x50 },
+
+	{ GC2235_8BIT, 0x90, 0x01 },
+	{ GC2235_8BIT, 0x92, 0x02 },
+	{ GC2235_8BIT, 0x94, 0x06 },
 	{ GC2235_8BIT, 0x95, 0x03 }, /* crop win height 900 */
-	{ GC2235_8BIT, 0x96, 0x94 },
+	{ GC2235_8BIT, 0x96, 0x84 },
 	{ GC2235_8BIT, 0x97, 0x06 }, /* crop win width 1600 */
-	{ GC2235_8BIT, 0x98, 0x50 },
+	{ GC2235_8BIT, 0x98, 0x40 },
 	/* mimi init */
 	{ GC2235_8BIT, 0xfe, 0x03 }, /* switch to P3 */
 	{ GC2235_8BIT, 0x01, 0x07 },
@@ -319,7 +417,7 @@ static struct gc2235_reg const gc2235_1616_916_30fps[] = {
 	{ GC2235_8BIT, 0x06, 0x80 },
 	{ GC2235_8BIT, 0x11, 0x2b },
 	/* set mipi buffer */
-	{ GC2235_8BIT, 0x12, 0xe4 }, /* val_low = (width * 10 / 8) & 0xFF */
+	{ GC2235_8BIT, 0x12, 0xd0 }, /* val_low = (width * 10 / 8) & 0xFF */
 	{ GC2235_8BIT, 0x13, 0x07 }, /* val_high = (width * 10 / 8) >> 8 */
 
 	{ GC2235_8BIT, 0x15, 0x12 }, /* DPHY mode*/
@@ -330,8 +428,8 @@ static struct gc2235_reg const gc2235_1616_916_30fps[] = {
 	{ GC2235_8BIT, 0x22, 0x02 },
 	{ GC2235_8BIT, 0x23, 0x01 },
 	{ GC2235_8BIT, 0x29, 0x02 },
-	{ GC2235_8BIT, 0x2a, 0x01 },
-	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0x2a, 0x09 },
+	{ GC2235_8BIT, 0x10, 0x01 }, /* disable mipi */
 	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
 	{ GC2235_TOK_TERM, 0, 0 }
 };
@@ -339,6 +437,12 @@ static struct gc2235_reg const gc2235_1616_916_30fps[] = {
 static struct gc2235_reg const gc2235_1616_1082_30fps[] = {
 	{ GC2235_8BIT, 0x8b, 0xa0 },
 	{ GC2235_8BIT, 0x8c, 0x02 },
+
+	{ GC2235_8BIT, 0x0d, 0x04 }, /* win height 1232 */
+	{ GC2235_8BIT, 0x0e, 0xd0 },
+	{ GC2235_8BIT, 0x0f, 0x06 }, /* win width: 1616 */
+	{ GC2235_8BIT, 0x10, 0x60 },
+
 	{ GC2235_8BIT, 0x90, 0x01 },
 	{ GC2235_8BIT, 0x92, 0x4a },
 	{ GC2235_8BIT, 0x94, 0x00 },
@@ -346,7 +450,7 @@ static struct gc2235_reg const gc2235_1616_1082_30fps[] = {
 	{ GC2235_8BIT, 0x96, 0x3a },
 	{ GC2235_8BIT, 0x97, 0x06 }, /* crop win width 1616 */
 	{ GC2235_8BIT, 0x98, 0x50 },
-	/* mimi init */
+	/* mimp init */
 	{ GC2235_8BIT, 0xfe, 0x03 }, /* switch to P3 */
 	{ GC2235_8BIT, 0x01, 0x07 },
 	{ GC2235_8BIT, 0x02, 0x11 },
@@ -366,7 +470,7 @@ static struct gc2235_reg const gc2235_1616_1082_30fps[] = {
 	{ GC2235_8BIT, 0x23, 0x01 },
 	{ GC2235_8BIT, 0x29, 0x02 },
 	{ GC2235_8BIT, 0x2a, 0x01 },
-	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0x10, 0x01 }, /* disable mipi */
 	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
 	{ GC2235_TOK_TERM, 0, 0 }
 };
@@ -374,6 +478,12 @@ static struct gc2235_reg const gc2235_1616_1082_30fps[] = {
 static struct gc2235_reg const gc2235_1616_1216_30fps[] = {
 	{ GC2235_8BIT, 0x8b, 0xa0 },
 	{ GC2235_8BIT, 0x8c, 0x02 },
+
+	{ GC2235_8BIT, 0x0d, 0x04 }, /* win height 1232 */
+	{ GC2235_8BIT, 0x0e, 0xd0 },
+	{ GC2235_8BIT, 0x0f, 0x06 }, /* win width: 1616 */
+	{ GC2235_8BIT, 0x10, 0x60 },
+
 	{ GC2235_8BIT, 0x90, 0x01 },
 	{ GC2235_8BIT, 0x92, 0x02 },
 	{ GC2235_8BIT, 0x94, 0x00 },
@@ -401,17 +511,18 @@ static struct gc2235_reg const gc2235_1616_1216_30fps[] = {
 	{ GC2235_8BIT, 0x23, 0x01 },
 	{ GC2235_8BIT, 0x29, 0x02 },
 	{ GC2235_8BIT, 0x2a, 0x01 },
-	{ GC2235_8BIT, 0x10, 0x81 }, /* disable mipi */
+	{ GC2235_8BIT, 0x10, 0x01 }, /* disable mipi */
 	{ GC2235_8BIT, 0xfe, 0x00 }, /* switch to P0 */
 	{ GC2235_TOK_TERM, 0, 0 }
 };
 
 struct gc2235_resolution gc2235_res_preview[] = {
+
 	{
 		.desc = "gc2235_1600_900_30fps",
-		.width = 1616,
-		.height = 916,
-		.pix_clk_freq = 75,
+		.width = 1600,
+		.height = 900,
+		.pix_clk_freq = 60,
 		.fps = 30,
 		.used = 0,
 		.pixels_per_line = 1616,
@@ -420,13 +531,14 @@ struct gc2235_resolution gc2235_res_preview[] = {
 		.bin_factor_y = 0,
 		.bin_mode = 0,
 		.skip_frames = 3,
-		.regs = gc2235_1616_916_30fps,
+		.regs = gc2235_1600_900_30fps,
 	},
+
 	{
 		.desc = "gc2235_1600_1066_30fps",
 		.width = 1616,
 		.height = 1082,
-		.pix_clk_freq = 75,
+		.pix_clk_freq = 60,
 		.fps = 30,
 		.used = 0,
 		.pixels_per_line = 1616,
@@ -441,7 +553,7 @@ struct gc2235_resolution gc2235_res_preview[] = {
 		.desc = "gc2235_1600_1200_30fps",
 		.width = 1616,
 		.height = 1216,
-		.pix_clk_freq = 75,
+		.pix_clk_freq = 60,
 		.fps = 27,
 		.used = 0,
 		.pixels_per_line = 1616,
@@ -452,15 +564,16 @@ struct gc2235_resolution gc2235_res_preview[] = {
 		.skip_frames = 3,
 		.regs = gc2235_1616_1216_30fps,
 	},
+
 };
 #define N_RES_PREVIEW (ARRAY_SIZE(gc2235_res_preview))
 
 struct gc2235_resolution gc2235_res_still[] = {
 	{
 		.desc = "gc2235_1600_900_30fps",
-		.width = 1616,
-		.height = 916,
-		.pix_clk_freq = 75,
+		.width = 1600,
+		.height = 900,
+		.pix_clk_freq = 60,
 		.fps = 30,
 		.used = 0,
 		.pixels_per_line = 1616,
@@ -469,13 +582,13 @@ struct gc2235_resolution gc2235_res_still[] = {
 		.bin_factor_y = 0,
 		.bin_mode = 0,
 		.skip_frames = 3,
-		.regs = gc2235_1616_916_30fps,
+		.regs = gc2235_1600_900_30fps,
 	},
 	{
 		.desc = "gc2235_1600_1066_30fps",
 		.width = 1616,
 		.height = 1082,
-		.pix_clk_freq = 75,
+		.pix_clk_freq = 60,
 		.fps = 30,
 		.used = 0,
 		.pixels_per_line = 1616,
@@ -490,7 +603,7 @@ struct gc2235_resolution gc2235_res_still[] = {
 		.desc = "gc2235_1600_1200_30fps",
 		.width = 1616,
 		.height = 1216,
-		.pix_clk_freq = 75,
+		.pix_clk_freq = 60,
 		.fps = 27,
 		.used = 0,
 		.pixels_per_line = 1616,
@@ -501,55 +614,42 @@ struct gc2235_resolution gc2235_res_still[] = {
 		.skip_frames = 3,
 		.regs = gc2235_1616_1216_30fps,
 	},
+
 };
 #define N_RES_STILL (ARRAY_SIZE(gc2235_res_still))
 
 struct gc2235_resolution gc2235_res_video[] = {
 	{
-		.desc = "gc2235_1600_900_30fps",
-		.width = 1616,
-		.height = 916,
-		.pix_clk_freq = 75,
+		.desc = "gc2235_1296_736_30fps",
+		.width = 1296,
+		.height = 736,
+		.pix_clk_freq = 60,
 		.fps = 30,
 		.used = 0,
-		.pixels_per_line = 1616,
-		.lines_per_frame = 932,
+		.pixels_per_line = 1296,
+		.lines_per_frame = 736,
 		.bin_factor_x = 0,
 		.bin_factor_y = 0,
 		.bin_mode = 0,
 		.skip_frames = 3,
-		.regs = gc2235_1616_916_30fps,
+		.regs = gc2235_1296_736_30fps,
 	},
 	{
-		.desc = "gc2235_1600_1066_30fps",
-		.width = 1616,
-		.height = 1082,
-		.pix_clk_freq = 75,
+		.desc = "gc2235_960_640_30fps",
+		.width = 960,
+		.height = 640,
+		.pix_clk_freq = 60,
 		.fps = 30,
 		.used = 0,
-		.pixels_per_line = 1616,
-		.lines_per_frame = 1098,
-		.bin_factor_x = 0,
-		.bin_factor_y = 0,
-		.bin_mode = 0,
-		.skip_frames = 3,
-		.regs = gc2235_1616_1082_30fps,
-	},
-	{
-		.desc = "gc2235_1600_1200_30fps",
-		.width = 1616,
-		.height = 1216,
-		.pix_clk_freq = 75,
-		.fps = 27,
-		.used = 0,
-		.pixels_per_line = 1616,
-		.lines_per_frame = 1232,
+		.pixels_per_line = 976,
+		.lines_per_frame = 656,
 		.bin_factor_x = 0,
 		.bin_factor_y = 0,
 		.bin_mode = 0,
 		.skip_frames = 3,
-		.regs = gc2235_1616_1216_30fps,
+		.regs = gc2235_960_640_30fps,
 	},
+
 };
 #define N_RES_VIDEO (ARRAY_SIZE(gc2235_res_video))
 
-- 
1.9.1

