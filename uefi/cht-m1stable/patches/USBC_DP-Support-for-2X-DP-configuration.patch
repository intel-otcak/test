From a51037a739e1cf04ceba49f9b2821bb3dd08d3b1 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Tue, 1 Sep 2015 15:26:26 +0530
Subject: [PATCH] USBC_DP: Support for 2X DP configuration.

If port partner supports both 2X and 4X DP configuration then
port partner can send both the pin configs in single VDO or
in multiple VDOs. This patch addresses both cases.

Change-Id: I2f33461647ec877677d1f48c6536ba7ecd7f8f5d
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17675
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
---
 drivers/usb/typec/pd/display_pe.c | 29 ++++++++++++++++-------------
 1 file changed, 16 insertions(+), 13 deletions(-)

diff --git a/drivers/usb/typec/pd/display_pe.c b/drivers/usb/typec/pd/display_pe.c
index 08643bed..bc40edc 100644
--- a/drivers/usb/typec/pd/display_pe.c
+++ b/drivers/usb/typec/pd/display_pe.c
@@ -372,7 +372,8 @@ static void disp_pe_process_dp_modes(struct disp_port_pe *disp_pe,
 				/* Mode intex starts from 1 */
 				index_4x = i + 1;
 			}
-		} else if (!index_2x) {
+		}
+		if (!index_2x) {
 			if ((dmode_pkt->mode[i].ufp_pin
 			& DISP_PORT_PIN_ASSIGN_D)
 			|| (dmode_pkt->mode[i].dfp_pin
@@ -380,7 +381,8 @@ static void disp_pe_process_dp_modes(struct disp_port_pe *disp_pe,
 				/* Mode intex starts from 1 */
 				index_2x = i + 1;
 			}
-		} else
+		}
+		if (index_2x && index_4x)
 			break;
 	}
 	disp_pe->port_caps.dmode_4x_index = index_4x;
@@ -407,30 +409,31 @@ static int disp_pe_handle_discover_mode(struct disp_port_pe *disp_pe,
 		}
 
 		disp_pe_process_dp_modes(disp_pe, dmode_pkt);
-		/* First check for 2X, Mode E */
+		/* First check for 2X, Mode D */
 		log_dbg("4x_index=%d, 2x_index=%d\n",
-			disp_pe->port_caps.dmode_4x_index,
-			disp_pe->port_caps.dmode_2x_index);
-		if (disp_pe->port_caps.dmode_4x_index) {
+				disp_pe->port_caps.dmode_4x_index,
+				disp_pe->port_caps.dmode_2x_index);
+		if (disp_pe->port_caps.dmode_2x_index) {
 			disp_pe_send_enter_mode(disp_pe,
-					disp_pe->port_caps.dmode_4x_index);
+				disp_pe->port_caps.dmode_2x_index);
 			mutex_lock(&disp_pe->pe_lock);
 			disp_pe->state = DISP_PE_STATE_EMODE_SENT;
-			disp_pe->dp_mode = TYPEC_DP_TYPE_4X;
+			disp_pe->dp_mode = TYPEC_DP_TYPE_2X;
 			mutex_unlock(&disp_pe->pe_lock);
 			log_dbg("State -> DISP_PE_STATE_EMODE_SENT\n");
 			break;
-		} else if (disp_pe->port_caps.dmode_2x_index) {
+
+		} else if (disp_pe->port_caps.dmode_4x_index) {
 			disp_pe_send_enter_mode(disp_pe,
-				disp_pe->port_caps.dmode_2x_index);
+					disp_pe->port_caps.dmode_4x_index);
 			mutex_lock(&disp_pe->pe_lock);
 			disp_pe->state = DISP_PE_STATE_EMODE_SENT;
-			disp_pe->dp_mode = TYPEC_DP_TYPE_2X;
+			disp_pe->dp_mode = TYPEC_DP_TYPE_4X;
 			mutex_unlock(&disp_pe->pe_lock);
 			log_dbg("State -> DISP_PE_STATE_EMODE_SENT\n");
 			break;
-		}
-		log_warn("This Display doesn't supports neither 2X nor 4X\n");
+		} else
+			log_warn("This Display doesn't supports neither 2X nor 4X\n");
 		/* Stop the display detection process */
 
 	case REP_NACK:
-- 
1.9.1

