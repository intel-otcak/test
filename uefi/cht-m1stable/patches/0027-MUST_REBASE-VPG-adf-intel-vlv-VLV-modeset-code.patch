From d8048f69580ea48ec8cd99f844a2437ba774299c Mon Sep 17 00:00:00 2001
Message-Id: <d8048f69580ea48ec8cd99f844a2437ba774299c.1421709247.git.chang-joon.lee@intel.com>
In-Reply-To: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
References: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
From: Pallavi <pallavi.g@intel.com>
Date: Wed, 27 Aug 2014 15:29:03 +0530
Subject: [PATCH 27/75] MUST_REBASE [VPG]: adf/intel/vlv: VLV modeset code

Added the valleyview modeset code

v2: Remove unused/untested code for HDMI enabling. Just have DSI related
    code now
v3: Correct the Vblank off bitmask

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-3547
Change-Id: Ib25a9d1929a90d8c90cc9fbc5415270f07847f84
Signed-off-by: Pallavi <pallavi.g@intel.com>
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
---
 drivers/video/adf/intel/core/vlv/Makefile          |    3 +-
 drivers/video/adf/intel/core/vlv/vlv_mode_set.c    |  251 ++++++++++++++++++++
 .../adf/intel/include/core/common/dsi/dsi_panel.h  |    3 +
 .../adf/intel/include/core/common/dsi/dsi_pipe.h   |    8 +
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |    4 +
 5 files changed, 268 insertions(+), 1 deletion(-)
 create mode 100644 drivers/video/adf/intel/core/vlv/vlv_mode_set.c

diff --git a/drivers/video/adf/intel/core/vlv/Makefile b/drivers/video/adf/intel/core/vlv/Makefile
index 48ac00f..d0fccbd 100644
--- a/drivers/video/adf/intel/core/vlv/Makefile
+++ b/drivers/video/adf/intel/core/vlv/Makefile
@@ -4,4 +4,5 @@ ccflags-y := -Idrivers/staging/ -Iinclude/adf -Iinclude/uapi/adf -Idrivers/video
 
 obj-y := vlv_dc_config.o \
 	vlv_pri_plane.o \
-	vlv_sp_plane.o
+	vlv_sp_plane.o \
+	vlv_mode_set.o
diff --git a/drivers/video/adf/intel/core/vlv/vlv_mode_set.c b/drivers/video/adf/intel/core/vlv/vlv_mode_set.c
new file mode 100644
index 0000000..7788c85
--- /dev/null
+++ b/drivers/video/adf/intel/core/vlv/vlv_mode_set.c
@@ -0,0 +1,251 @@
+/*
+ * Copyright (C) 2014, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ *
+ * Authors:
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/delay.h>
+
+#include <core/vlv/vlv_dc_config.h>
+#include <core/common/dsi/dsi_pipe.h>
+#include <core/intel_dc_config.h>
+#include <intel_adf.h>
+#include <core/vlv/vlv_dc_regs.h>
+#include <core/common/dsi/dsi_pipe.h>
+#include <drm/drmP.h>
+
+void vlv_vblank_on(int pipe)
+{
+	u32 val = REG_READ(PIPESTAT(pipe));
+	if (val & PIPE_VBLANK_INTERRUPT_ENABLE) {
+		pr_info("ADF: %s: vblank already on for pipe = %d\n",
+			__func__, pipe);
+	} else {
+		REG_WRITE(PIPESTAT(pipe),
+			 (val | PIPE_VBLANK_INTERRUPT_ENABLE));
+		REG_POSTING_READ(PIPESTAT(pipe));
+	}
+}
+
+void vlv_vblank_off(int pipe)
+{
+	u32 val = REG_READ(PIPESTAT(pipe));
+	if (val & PIPE_VBLANK_INTERRUPT_ENABLE) {
+		REG_WRITE(PIPESTAT(pipe),
+				val & ~PIPE_VBLANK_INTERRUPT_ENABLE);
+		REG_POSTING_READ(PIPESTAT(pipe));
+	} else
+		pr_info("ADF: %s: vblank already off for pipe = %d\n",
+			__func__, pipe);
+}
+
+void vlv_wait_for_vblank(int pipe)
+{
+	u32 frame, frame_reg = PIPE_FRMCOUNT_GM45(pipe);
+
+	frame = REG_READ(frame_reg);
+
+	if (wait_for(REG_POSTING_READ(frame_reg) != frame, 50))
+		pr_info("ADF: %s: vblank wait timed out\n", __func__);
+}
+
+void vlv_wait_for_pipe_off(int pipe)
+{
+	int reg = PIPECONF(pipe);
+
+	/* Wait for the Pipe State to go off */
+	if (wait_for((REG_READ(reg) & I965_PIPECONF_ACTIVE) == 0, 100))
+		pr_err("ADF: %s: pipe_off wait timed out\n", __func__);
+}
+
+int vlv_display_on(struct intel_pipe *pipe)
+{
+	int reg;
+	u32 val = 0;
+	u8 index;
+
+	if (!pipe)
+		return -EINVAL;
+
+	index = pipe->base.idx;
+
+	/* Enable VBLANK on ?*/
+
+	reg = PALETTE(0);
+
+	/* Enable pipe */
+	reg = PIPECONF(index);
+	val = REG_READ(reg);
+	if (val & PIPECONF_ENABLE)
+		pr_err("ADF: %s: Pipe already on !!\n", __func__);
+	else {
+		REG_WRITE(reg, val | PIPECONF_ENABLE);
+		REG_POSTING_READ(reg);
+	}
+
+	/* Enable plane */
+	reg = DSPCNTR(index);
+	val = REG_READ(reg);
+	if (val & DISPLAY_PLANE_ENABLE)
+		pr_err("ADF: %s: Plane already enabled\n", __func__);
+
+	/* disable rotation for now */
+	val &= ~(1 << 15);
+	val |= (1 << 30);
+
+	REG_WRITE(reg, val | DISPLAY_PLANE_ENABLE);
+	REG_WRITE(DSPSURF(index), REG_READ(DSPSURF(index)));
+	REG_POSTING_READ(DSPSURF(index));
+
+	/* TODO Encoder Enable */
+	return 0;
+}
+
+int vlv_display_off(struct intel_pipe *pipe)
+{
+	int i, reg;
+	u32 val = 0;
+	u8 index;
+	struct dsi_pipe *dsi = NULL;
+	int is_dsi = pipe->type == INTEL_PIPE_DSI ? true : false;
+
+	if (!pipe)
+		return -EINVAL;
+
+	index = pipe->base.idx;
+
+	 /* encoder specifific disabling if needed */
+	if (is_dsi) {
+		dsi = to_dsi_pipe(pipe);
+
+		/* DSI Shutdown command */
+		dsi->ops.pre_power_off(dsi);
+	}
+
+	/* Also check for pending flip and the vblank off  */
+
+	/* Disable Sprite planes */
+	for (i = 0; i < VLV_NUM_SPRITES; i++) {
+		REG_WRITE(SPCNTR(index, i), REG_READ(SPCNTR(index, i)) &
+				~SP_ENABLE);
+
+		/* Activate double buffered register update */
+		I915_MODIFY_DISPBASE(SPSURF(index, i), 0);
+		REG_POSTING_READ(SPSURF(index, i));
+	}
+
+	/* Disable primary plane */
+	reg = DSPCNTR(index);
+	val = REG_READ(reg);
+	if (val & DISPLAY_PLANE_ENABLE) {
+		REG_WRITE(reg, val & ~DISPLAY_PLANE_ENABLE);
+		REG_WRITE(DSPSURF(index), REG_READ(DSPSURF(index)));
+		vlv_wait_for_vblank(index);
+		mdelay(1);
+	} else
+		pr_info("ADF:%s: primary plane already disabled on pipe = %d\n",
+			__func__, index);
+
+	/* Disable pipe */
+	reg = PIPECONF(index);
+	val = REG_READ(reg);
+	if ((val & PIPECONF_ENABLE) == 0)
+		pr_info("ADF: %s: pipe already off\n", __func__);
+	else {
+		REG_WRITE(reg, val & ~PIPECONF_ENABLE);
+		vlv_wait_for_pipe_off(index);
+		REG_WRITE(PFIT_CONTROL, 0);
+	}
+
+	/* TODO
+	* Interface specific encoder post disable should be done here */
+
+	/* encoder off interface specific */
+	if (is_dsi)
+		dsi->ops.power_off(dsi);
+	/*
+	 * Disable PLL
+	 * Needed for interfaces other than DSI
+	 */
+
+	/*TODO*/
+	/* Power gate DPIO RX Lanes */
+
+	return 0;
+}
+
+int pipe_mode_set(struct intel_pipe *pipe, struct drm_mode_modeinfo *mode)
+{
+	int vblank_start;
+	int vblank_end;
+	int hblank_start;
+	int hblank_end;
+	uint32_t pipeconf = 0;
+	u8 index = pipe->base.idx;
+
+	vblank_start = min(mode->vsync_start, mode->vdisplay);
+	vblank_end = max(mode->vsync_end, mode->vtotal);
+	hblank_start = min(mode->hsync_start, mode->hdisplay);
+	hblank_end = max(mode->hsync_end, mode->htotal);
+
+	REG_WRITE(HTOTAL(index),
+		(mode->hdisplay - 1) |
+		((mode->htotal - 1) << 16));
+
+	REG_WRITE(HBLANK(index),
+		(hblank_start - 1) |
+		((hblank_end - 1) << 16));
+
+	REG_WRITE(HSYNC(index),
+		(mode->hsync_start - 1) |
+		((mode->hsync_end - 1) << 16));
+
+	REG_WRITE(VTOTAL(index),
+		(mode->vdisplay - 1) |
+		((mode->vtotal - 1) << 16));
+
+	REG_WRITE(VBLANK(index),
+		(vblank_start - 1) |
+		((vblank_end - 1) << 16));
+
+	REG_WRITE(VSYNC(index),
+		(mode->vsync_start - 1) |
+		((mode->vsync_end - 1) << 16));
+
+	/* pipesrc controls the size that is scaled from, which should
+	* always be the user's requested size.
+	*/
+	REG_WRITE(PIPESRC(index),
+		((mode->hdisplay - 1) << 16) | (mode->vdisplay - 1));
+
+	/* pipesrc and dspsize control the size that is scaled from,
+	* which should always be the user's requested size.
+	*/
+
+	REG_WRITE(DSPSIZE(index),
+		((mode->vdisplay - 1) << 16) |
+		(mode->hdisplay - 1));
+	REG_WRITE(DSPPOS(index), 0);
+
+	pipeconf |= PIPECONF_PROGRESSIVE;
+	REG_WRITE(PIPECONF(index), pipeconf);
+	REG_POSTING_READ(PIPECONF(index));
+
+	/* TODO primary plane fb update */
+
+	vlv_display_on(pipe);
+
+	return 0;
+}
diff --git a/drivers/video/adf/intel/include/core/common/dsi/dsi_panel.h b/drivers/video/adf/intel/include/core/common/dsi/dsi_panel.h
index 532635e..b3cb53a 100644
--- a/drivers/video/adf/intel/include/core/common/dsi/dsi_panel.h
+++ b/drivers/video/adf/intel/include/core/common/dsi/dsi_panel.h
@@ -20,6 +20,9 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <drm/drm_mode.h>
+#ifndef CONFIG_ADF_INTEL_VLV
+#include <linux/panel_psb_drv.h>
+#endif
 
 struct dsi_pipe;
 
diff --git a/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h b/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
index aa5b8c1..d39a901 100644
--- a/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
+++ b/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
@@ -21,6 +21,10 @@
 #include "core/intel_dc_config.h"
 #include "core/common/dsi/dsi_config.h"
 #include "core/common/dsi/dsi_panel.h"
+#ifndef CONFIG_ADF_INTEL_VLV
+#include "pwr_mgmt.h"
+#include "core/common/dsi/dsi_pkg_sender.h"
+#endif
 #ifdef CONFIG_BACKLIGHT_CLASS_DEVICE
 #include "core/common/backlight_dev.h"
 #endif
@@ -42,6 +46,7 @@ struct dsi_pipe;
  */
 struct dsi_pipe_ops {
 	int (*power_on)(struct dsi_pipe *pipe);
+	void (*pre_power_off)(struct dsi_pipe *pipe);
 	int (*power_off)(struct dsi_pipe *pipe);
 	int (*mode_set)(struct dsi_pipe *pipe,
 		struct drm_mode_modeinfo *mode);
@@ -56,6 +61,9 @@ struct dsi_pipe {
 	struct intel_pipe base;
 	struct dsi_pipe_ops ops;
 	struct dsi_config config;
+#ifndef CONFIG_ADF_INTEL_VLV
+	struct dsi_pkg_sender sender;
+#endif
 	struct dsi_panel *panel;
 };
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index 77b8dd5..98f37ca 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -47,4 +47,8 @@ enum vlv_disp_plane {
 
 bool vlv_intf_screen_connected(struct intel_pipe *pipe);
 u32 vlv_intf_vsync_counter(struct intel_pipe *pipe, u32 interval);
+extern int pipe_mode_set(struct intel_pipe *pipe,
+			 struct drm_mode_modeinfo *mode);
+extern int vlv_display_on(struct intel_pipe *pipe);
+extern int vlv_display_off(struct intel_pipe *pipe);
 #endif
-- 
1.7.9.5

