From f3731b12e4a4ca771ec7243f52794506ba52d803 Mon Sep 17 00:00:00 2001
From: Philippe Longepe <philippe.longepe@intel.com>
Date: Tue, 5 May 2015 14:32:00 +0200
Subject: [PATCH] Fix the IOBoost load computation issue

This patch fixes a regression on chrome sunspider and chrome fishtank.
This regression is due to a bad load calculation on boost transition
and we fix it by using a per cpu io_busy variable.

Change-Id: I4c13a52815ed1db09a5bea122c82250173077fea
Signed-off-by: Philippe Longepe <philippe.longepe@intel.com>
Signed-off-by: Simon Dubray <simonx.dubray@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-27525
---
 drivers/cpufreq/cpufreq_interactive.c | 46 ++++++++++++-----------------------
 1 file changed, 16 insertions(+), 30 deletions(-)

diff --git a/drivers/cpufreq/cpufreq_interactive.c b/drivers/cpufreq/cpufreq_interactive.c
index e475f77a2856..c17c674a8d1f 100644
--- a/drivers/cpufreq/cpufreq_interactive.c
+++ b/drivers/cpufreq/cpufreq_interactive.c
@@ -39,7 +39,7 @@ struct timer_list  bootboost_safety_timer;
 struct cpufreq_interactive_cpuinfo {
 	struct timer_list cpu_timer;
 	struct timer_list cpu_slack_timer;
-	spinlock_t load_lock; /* protects the next 8 fields */
+	spinlock_t load_lock; /* protects the next 9 fields */
 	u64 time_in_idle;
 	u64 time_in_idle_timestamp;
 	u64 cputime_speedadj;
@@ -49,6 +49,7 @@ struct cpufreq_interactive_cpuinfo {
 	u64 time_in_irq;
 	u64 cputime_iowait;
 	u64 time_in_iowait;
+	bool io_busy;
 #endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	struct cpufreq_policy *policy;
 	struct cpufreq_frequency_table *freq_table;
@@ -131,8 +132,6 @@ struct cpufreq_interactive_tunables {
 #ifdef CONFIG_IRQ_TIME_ACCOUNTING
 #define DEFAULT_IRQ_LOAD_THRESHOLD 5
 #define DEFAULT_IOWAIT_LOAD_THRESHOLD 15
-	bool io_busy;
-	unsigned int io_busy_mask;
 	unsigned int irq_load_threshold_val;
 	unsigned int iowait_load_threshold_val;
 #endif /* CONFIG_IRQ_TIME_ACCOUNTING */
@@ -181,17 +180,15 @@ static void cpufreq_interactive_timer_resched(
 		pcpu->policy->governor_data;
 	unsigned long expires;
 	unsigned long flags;
-	bool io_is_busy = tunables->io_is_busy;
 
 	spin_lock_irqsave(&pcpu->load_lock, flags);
 #ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	io_is_busy |= tunables->io_busy;
 	update_irq_time(pcpu);
 #endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	pcpu->time_in_idle =
 		get_cpu_idle_time(smp_processor_id(),
 				  &pcpu->time_in_idle_timestamp,
-				  io_is_busy);
+				  tunables->io_is_busy);
 	pcpu->cputime_speedadj = 0;
 	pcpu->cputime_speedadj_timestamp = pcpu->time_in_idle_timestamp;
 	expires = jiffies + usecs_to_jiffies(tunables->timer_rate);
@@ -217,7 +214,6 @@ static void cpufreq_interactive_timer_start(
 	unsigned long expires = jiffies +
 		usecs_to_jiffies(tunables->timer_rate);
 	unsigned long flags;
-	bool io_is_busy = tunables->io_is_busy;
 
 	pcpu->cpu_timer.expires = expires;
 	add_timer_on(&pcpu->cpu_timer, cpu);
@@ -230,12 +226,11 @@ static void cpufreq_interactive_timer_start(
 
 	spin_lock_irqsave(&pcpu->load_lock, flags);
 #ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	io_is_busy |= tunables->io_busy;
 	update_irq_time(pcpu);
 #endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	pcpu->time_in_idle =
 		get_cpu_idle_time(cpu, &pcpu->time_in_idle_timestamp,
-				  io_is_busy);
+				  tunables->io_is_busy);
 	pcpu->cputime_speedadj = 0;
 	pcpu->cputime_speedadj_timestamp = pcpu->time_in_idle_timestamp;
 	spin_unlock_irqrestore(&pcpu->load_lock, flags);
@@ -378,7 +373,6 @@ static u64 update_load(int cpu)
 	unsigned int delta_idle;
 	unsigned int delta_time;
 	u64 active_time;
-	bool io_is_busy = tunables->io_is_busy;
 
 #ifdef CONFIG_IRQ_TIME_ACCOUNTING
 	u64 now_irq;
@@ -386,7 +380,6 @@ static u64 update_load(int cpu)
 	unsigned int delta_irq;
 	unsigned int delta_iowait;
 
-	io_is_busy |= tunables->io_busy;
 	now_iowait = get_cpu_iowait_time_us(cpu, &now);
 	now_irq = irq_time_read(cpu);
 	delta_irq = (unsigned int)(now_irq - pcpu->time_in_irq);
@@ -397,8 +390,12 @@ static u64 update_load(int cpu)
 	pcpu->time_in_iowait = now_iowait;
 #endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
-	now_idle = get_cpu_idle_time(cpu, &now, io_is_busy);
+	now_idle = get_cpu_idle_time(cpu, &now, tunables->io_is_busy);
 	delta_idle = (unsigned int)(now_idle - pcpu->time_in_idle);
+#ifdef CONFIG_IRQ_TIME_ACCOUNTING
+	if (pcpu->io_busy)
+		delta_idle -= delta_iowait;
+#endif
 	delta_time = (unsigned int)(now - pcpu->time_in_idle_timestamp);
 
 	if (delta_time <= delta_idle)
@@ -477,35 +474,24 @@ static void cpufreq_interactive_timer(unsigned long data)
 		if (irq_load >= tunables->irq_load_threshold_val
 			&& iowait_load >= tunables->iowait_load_threshold_val) {
 			io_boosted = true;
-			tunables->io_busy_mask |= 1 << data;
-			tunables->io_busy = true;
+			pcpu->io_busy = true;
 		} else if (irq_load >= tunables->irq_load_threshold_val) {
-			tunables->io_busy_mask |= 1 << data;
-			tunables->io_busy = true;
+			pcpu->io_busy = true;
 		} else {
-			tunables->io_busy_mask &= ~(1 << data);
+			pcpu->io_busy = false;
 		}
-
-		if (!tunables->io_busy_mask)
-			tunables->io_busy = false;
 		spin_unlock_irqrestore(&pcpu->load_lock, flags);
 	} else {
 		if (irq_load >= tunables->irq_load_threshold_val
 			&& iowait_load >= tunables->iowait_load_threshold_val) {
 			io_boosted = true;
-			tunables->io_busy_mask |= 1 << data;
-			tunables->io_busy = true;
+			pcpu->io_busy = true;
 		} else if (irq_load >= tunables->irq_load_threshold_val) {
-			tunables->io_busy_mask |= 1 << data;
-			tunables->io_busy = true;
+			pcpu->io_busy = true;
 		} else {
-			tunables->io_busy_mask &= ~(1 << data);
+			pcpu->io_busy = false;
 		}
-
-		if (!tunables->io_busy_mask)
-			tunables->io_busy = false;
 	}
-
 #endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
 	spin_lock_irqsave(&pcpu->target_freq_lock, flags);
@@ -1545,7 +1531,6 @@ static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
 				 DEFAULT_IRQ_LOAD_THRESHOLD;
 		tunables->iowait_load_threshold_val =
 				 DEFAULT_IOWAIT_LOAD_THRESHOLD;
-		tunables->io_busy = false;
 #endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
 		spin_lock_init(&tunables->target_loads_lock);
@@ -1630,6 +1615,7 @@ static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
 			del_timer_sync(&pcpu->cpu_slack_timer);
 			cpufreq_interactive_timer_start(tunables, j);
 			pcpu->governor_enabled = 1;
+			pcpu->io_busy = false;
 			up_write(&pcpu->enable_sem);
 		}
 
-- 
1.9.1

