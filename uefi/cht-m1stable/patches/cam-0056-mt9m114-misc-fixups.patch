From 94ce79ba696e389d352222c0e9d1be9a88a69ab4 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 4 Jun 2014 12:44:48 -0700
Subject: [PATCH 056/117] mt9m114: misc fixups

Hardware scarcity led me to dust off a T100 for MT9M114 probing work:

+ Add T100 EFI variable tables to atomisp_gmin_platform.  Populated by
  driver defaults, I didn't check vs. schematics since we can't run
  the atomisp driver here anyway.

+ Syntax cleanup ("mt9m114_platform_data NULL" is a function call, it
  should look like one")

+ Fix cut-and-paste typo from earlier sensors: RAW_CAMERA should be
  SOC_CAMERA for this device.

+ Fix missing acpi_match_table so it probes at runtime.  Also remove
  tempoarary _HID as the BIOS team has confirmed the correct INT33F0
  value.

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 arch/x86/platform/intel-mid/atomisp_gmin_platform.c         | 12 ++++++++++++
 drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c |  8 ++++----
 2 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
index 146a8a4..f17cae1 100644
--- a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -149,12 +149,24 @@ static const struct gmin_cfg_var mrd7_vars[] = {
 	{},
 };
 
+/* Cribbed from MCG defaults in the mt9m114 driver, not actually verified
+ * vs. T100 hardware */
+static const struct gmin_cfg_var t100_vars[] = {
+	{ "INT33F0:00_CamType",  "2" },
+	{ "INT33F0:00_CsiPort",  "0" },
+	{ "INT33F0:00_CsiLanes", "1" },
+	{ "INT33F0:00_CsiFmt",   "-1" },
+	{ "INT33F0:00_CsiBayer", "0" },
+	{},
+};
+
 static const struct {
 	const char *dmi_board_name;
 	const struct gmin_cfg_var *vars;
 } hard_vars[] = {
 	{ "BYT-T FFD8", ffrd8_vars },
 	{ "TABLET", mrd7_vars },
+	{ "T100TA", t100_vars },
 };
 
 
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
index 6a0d2c1..cef9bd0 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
@@ -1105,7 +1105,7 @@ static int mt9m114_s_config(struct v4l2_subdev *sd,
 	 * This is hard coded to FFRD8. */
 	ret = atomisp_register_i2c_module(sd, client, platform_data,
 					  getvar_int(&client->dev, "CamType",
-						     RAW_CAMERA),
+						     SOC_CAMERA),
 					  getvar_int(&client->dev, "CsiPort",
 						     ATOMISP_CAMERA_PORT_PRIMARY));
 	if (ret) {
@@ -1507,7 +1507,7 @@ static int mt9m114_probe(struct i2c_client *client,
 		 * directly and configure via ACPI/EFIvars instead
 		 */
 		ret = mt9m114_s_config(&dev->sd, client->irq,
-				       mt9m114_platform_data NULL);
+				       mt9m114_platform_data(NULL));
 		if (ret)
 			goto out_free;
 	}
@@ -1533,7 +1533,6 @@ out_free:
 }
 
 static struct acpi_device_id mt9m114_acpi_match[] = {
-	{ "APTN1040" },
 	{ "INT33F0" },
 	{},
 };
@@ -1545,7 +1544,8 @@ MODULE_DEVICE_TABLE(i2c, mt9m114_id);
 static struct i2c_driver mt9m114_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
-		.name = "mt9m114"
+		.name = "mt9m114",
+		.acpi_match_table = ACPI_PTR(mt9m114_acpi_match),
 	},
 	.probe = mt9m114_probe,
 	.remove = mt9m114_remove,
-- 
1.9.3

