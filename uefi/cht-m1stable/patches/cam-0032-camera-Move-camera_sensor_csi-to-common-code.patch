From 35e308f00c2200621cc786a823b101733a4985e3 Mon Sep 17 00:00:00 2001
From: Ilkka Koskinen <ilkka.koskinen@intel.com>
Date: Wed, 14 May 2014 17:21:52 +0300
Subject: [PATCH 032/117] camera: Move camera_sensor_csi() to common code

Signed-off-by: Ilkka Koskinen <ilkka.koskinen@intel.com>
---
 .../x86/platform/intel-mid/atomisp_gmin_platform.c | 37 ++++++++++++++++++
 .../intel-mid/device_libs/platform_gc0339.c        | 35 +----------------
 .../intel-mid/device_libs/platform_gc2235.c        | 36 +----------------
 arch/x86/platform/intel-mid/platform_imx134.c      | 35 +----------------
 arch/x86/platform/intel-mid/platform_ov2722.c      | 45 ++++++++--------------
 include/linux/atomisp_gmin_platform.h              | 30 +++++++++++++++
 6 files changed, 87 insertions(+), 131 deletions(-)
 create mode 100644 include/linux/atomisp_gmin_platform.h

diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
index 5817994..51a7b52 100644
--- a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -5,6 +5,7 @@
 #include <linux/acpi.h>
 #include <linux/platform_device.h>
 #include <linux/atomisp_platform.h>
+#include <linux/atomisp_gmin_platform.h>
 #include <asm/spid.h>
 
 #define MAX_SUBDEVS 8
@@ -216,6 +217,42 @@ int gmin_get_config_var(struct device *dev, const char *var, char *out, size_t *
 }
 EXPORT_SYMBOL_GPL(gmin_get_config_var);
 
+/*
+ * Cloned from MCG platform_camera.c because it's small and
+ * self-contained.  All it does is maintain the V4L2 subdev hostdate
+ * pointer
+ */
+int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
+			     u32 lanes, u32 format, u32 bayer_order, int flag)
+{
+        struct i2c_client *client = v4l2_get_subdevdata(sd);
+        struct camera_mipi_info *csi = NULL;
+
+        if (flag) {
+                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
+                if (!csi) {
+                        dev_err(&client->dev, "out of memory\n");
+                        return -ENOMEM;
+                }
+                csi->port = port;
+                csi->num_lanes = lanes;
+                csi->input_format = format;
+                csi->raw_bayer_order = bayer_order;
+                v4l2_set_subdev_hostdata(sd, (void *)csi);
+                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
+                csi->metadata_effective_width = NULL;
+                dev_info(&client->dev,
+                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
+                         port, lanes, bayer_order);
+        } else {
+                csi = v4l2_get_subdev_hostdata(sd);
+                kfree(csi);
+        }
+
+        return 0;
+}
+EXPORT_SYMBOL_GPL(camera_sensor_csi);
+
 static int __init gmin_plat_init(void)
 {
 	/* BYT-T output clock driver required by the MIPI-CSI
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c b/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c
index 23c8233..cfe1d7e 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c
@@ -18,6 +18,7 @@
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_mid_pmic.h>
 #include <linux/vlv2_plat_clock.h>
+#include <linux/atomisp_gmin_platform.h>
 
 /* workround - pin defined for byt */
 #define CAMERA_0_RESET 126
@@ -77,40 +78,6 @@ EXPORT_SYMBOL_GPL(camera_set_pmic_power);
 /*
  * GC0339 platform data
  */
-/*
- * Cloned from MCG platform_camera.c because it's small and
- * self-contained.  All it does is maintain the V4L2 subdev hostdate
- * pointer
- */
-static int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
-			     u32 lanes, u32 format, u32 bayer_order, int flag)
-{
-        struct i2c_client *client = v4l2_get_subdevdata(sd);
-        struct camera_mipi_info *csi = NULL;
-
-        if (flag) {
-                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
-                if (!csi) {
-                        dev_err(&client->dev, "out of memory\n");
-                        return -ENOMEM;
-                }
-                csi->port = port;
-                csi->num_lanes = lanes;
-                csi->input_format = format;
-                csi->raw_bayer_order = bayer_order;
-                v4l2_set_subdev_hostdata(sd, (void *)csi);
-                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
-                csi->metadata_effective_width = NULL;
-                dev_info(&client->dev,
-                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
-                         port, lanes, bayer_order);
-        } else {
-                csi = v4l2_get_subdev_hostdata(sd);
-                kfree(csi);
-        }
-
-	return 0;
-}
 
 static int gc0339_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 {
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c b/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
index 7da60d5..1c39e46 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
@@ -18,6 +18,7 @@
 #include <asm/intel-mid.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_mid_pmic.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #ifdef CONFIG_VLV2_PLAT_CLK
 #include <linux/vlv2_plat_clock.h>
@@ -76,41 +77,6 @@ static struct gpio_desc *camera_power_down;
 static int camera_vprog1_on;
 
 /*
- * Cloned from MCG platform_camera.c because it's small and
- * self-contained.  All it does is maintain the V4L2 subdev hostdate
- * pointer
- */
-static int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
-			     u32 lanes, u32 format, u32 bayer_order, int flag)
-{
-        struct i2c_client *client = v4l2_get_subdevdata(sd);
-        struct camera_mipi_info *csi = NULL;
-
-        if (flag) {
-                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
-                if (!csi) {
-                        dev_err(&client->dev, "out of memory\n");
-                        return -ENOMEM;
-                }
-                csi->port = port;
-                csi->num_lanes = lanes;
-                csi->input_format = format;
-                csi->raw_bayer_order = bayer_order;
-                v4l2_set_subdev_hostdata(sd, (void *)csi);
-                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
-                csi->metadata_effective_width = NULL;
-                dev_info(&client->dev,
-                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
-                         port, lanes, bayer_order);
-        } else {
-                csi = v4l2_get_subdev_hostdata(sd);
-                kfree(csi);
-        }
-
-	return 0;
-}
-
-/*
  * BYT_CR2.1 primary camera sensor - GC2235 platform data
  */
 
diff --git a/arch/x86/platform/intel-mid/platform_imx134.c b/arch/x86/platform/intel-mid/platform_imx134.c
index 84698eb..c9fcd32 100644
--- a/arch/x86/platform/intel-mid/platform_imx134.c
+++ b/arch/x86/platform/intel-mid/platform_imx134.c
@@ -18,6 +18,7 @@
 #include <asm/intel-mid.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_mid_pmic.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #ifdef CONFIG_VLV2_PLAT_CLK
 #include <linux/vlv2_plat_clock.h>
@@ -72,40 +73,6 @@ static int camera_reset;
 static int camera_power_down;
 static int camera_vprog1_on;
 
-/* Cloned from MCG platform_camera.c because it's small and
- * self-contained.  All it does is maintain the V4L2 subdev hostdate
- * pointer */
-static int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
-                        u32 lanes, u32 format, u32 bayer_order, int flag)
-{
-        struct i2c_client *client = v4l2_get_subdevdata(sd);
-        struct camera_mipi_info *csi = NULL;
-
-        if (flag) {
-                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
-                if (!csi) {
-                        dev_err(&client->dev, "out of memory\n");
-                        return -ENOMEM;
-                }
-                csi->port = port;
-                csi->num_lanes = lanes;
-                csi->input_format = format;
-                csi->raw_bayer_order = bayer_order;
-                v4l2_set_subdev_hostdata(sd, (void *)csi);
-                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
-                csi->metadata_effective_width = NULL;
-                dev_info(&client->dev,
-                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
-                         port, lanes, bayer_order);
-        } else {
-                csi = v4l2_get_subdev_hostdata(sd);
-                kfree(csi);
-        }
-
-        return 0;
-}
-
-
 /*
  * MRFLD VV primary camera sensor - IMX134 platform data
  */
diff --git a/arch/x86/platform/intel-mid/platform_ov2722.c b/arch/x86/platform/intel-mid/platform_ov2722.c
index 90b6a08..eb001e9 100644
--- a/arch/x86/platform/intel-mid/platform_ov2722.c
+++ b/arch/x86/platform/intel-mid/platform_ov2722.c
@@ -13,11 +13,13 @@
 #include <linux/gpio.h>
 #include <linux/delay.h>
 #include <linux/i2c.h>
+#include <linux/acpi.h>
 #include <linux/atomisp_platform.h>
 #include <linux/regulator/consumer.h>
 #include <asm/intel-mid.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_mid_pmic.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #ifdef CONFIG_VLV2_PLAT_CLK
 #include <linux/vlv2_plat_clock.h>
@@ -415,35 +417,22 @@ static int ov2722_power_ctrl(struct v4l2_subdev *sd, int flag)
 
 static int ov2722_csi_configure(struct v4l2_subdev *sd, int flag)
 {
+	/* Default from legacy platform w/o firmware config */
+	int port = ATOMISP_CAMERA_PORT_SECONDARY;
+	int lanes = 1;
+	int format = ATOMISP_INPUT_FORMAT_RAW_10;
+	int bayer = atomisp_bayer_order_grbg;
+
         struct i2c_client *client = v4l2_get_subdevdata(sd);
-	u32 port = ATOMISP_CAMERA_PORT_SECONDARY;
-	u32 lanes = 1;
-	u32 format = ATOMISP_INPUT_FORMAT_RAW_10;
-	u32 bayer_order = atomisp_bayer_order_grbg;
-        struct camera_mipi_info *csi = NULL;
-
-        if (flag) {
-                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
-                if (!csi) {
-                        dev_err(&client->dev, "out of memory\n");
-                        return -ENOMEM;
-                }
-                csi->port = port;
-                csi->num_lanes = lanes;
-                csi->input_format = format;
-                csi->raw_bayer_order = bayer_order;
-                v4l2_set_subdev_hostdata(sd, (void *)csi);
-                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
-                csi->metadata_effective_width = NULL;
-                dev_info(&client->dev,
-                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
-                         port, lanes, bayer_order);
-        } else {
-                csi = v4l2_get_subdev_hostdata(sd);
-                kfree(csi);
-        }
-
-        return 0;
+	if (client && ACPI_COMPANION(&client->dev)) {
+		struct device *dev = &client->dev;
+		port = getvar_int(dev, "CsiPort", port);
+		lanes = getvar_int(dev, "CsiLanes", lanes);
+		format = getvar_int(dev, "CsiFmt", format);
+		bayer = getvar_int(dev, "CsiBayer", bayer);
+	}
+
+	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
 }
 
 #ifdef CONFIG_CRYSTAL_COVE
diff --git a/include/linux/atomisp_gmin_platform.h b/include/linux/atomisp_gmin_platform.h
new file mode 100644
index 0000000..318c965
--- /dev/null
+++ b/include/linux/atomisp_gmin_platform.h
@@ -0,0 +1,30 @@
+/*
+ * Support for Medifield PNW Camera Imaging ISP subsystem.
+ *
+ * Copyright (c) 2010 Intel Corporation. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef ATOMISP_GMIN_PLATFORM_H_
+#define ATOMISP_GMIN_PLATFORM_H_
+
+const struct atomisp_camera_caps *atomisp_get_default_camera_caps(void);
+const struct atomisp_platform_data *atomisp_get_platform_data(void);
+const struct camera_af_platform_data *camera_get_af_platform_data(void);
+int atomisp_register_i2c_module(struct v4l2_subdev *subdev,
+				struct i2c_client *client,
+                                enum intel_v4l2_subdev_type type,
+                                enum atomisp_camera_port port);
+struct v4l2_subdev *atomisp_gmin_find_subdev(struct i2c_adapter *adapter,
+					     struct i2c_board_info *board_info);
+int gmin_get_config_var(struct device *dev, const char *var, char *out, size_t *out_len);
+int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
+		      u32 lanes, u32 format, u32 bayer_order, int flag);
+#endif
-- 
1.9.3

