From 50a73f138b08b3ce89440a8e51e3c246e6f6c220 Mon Sep 17 00:00:00 2001
Message-Id: <50a73f138b08b3ce89440a8e51e3c246e6f6c220.1417780177.git.chang-joon.lee@intel.com>
In-Reply-To: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
References: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
From: Arun Siluvery <arun.siluvery@linux.intel.com>
Date: Thu, 13 Nov 2014 17:56:12 +0000
Subject: [PATCH 08/30] Revert "MUST_REBASE [VPG]: drm/i915/bdw: Add extra
 workarounds in render init"

WA framework is reworked in upstream and this is reworked based on
the new framework hence reverting this patch.

For: VIZ-4092
Change-Id: I176f0e193dd261f16dc501fe0ea06409f1afd709
Signed-off-by: Arun Siluvery <arun.siluvery@linux.intel.com>
---
 drivers/gpu/drm/i915/intel_pm.c         |    6 ++++++
 drivers/gpu/drm/i915/intel_ringbuffer.c |   16 ++--------------
 2 files changed, 8 insertions(+), 14 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index bb4beadb..da79fe9 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -6045,6 +6045,12 @@ static void broadwell_init_clock_gating(struct drm_device *dev)
 	I915_WRITE(GEN8_L3CNTLREG1, (I915_READ(GEN8_L3CNTLREG1) &
 			GEN8_TAG_CLK_OFFTIME_MASK) |
 			GEN8_TAG_CLK_OFFTIME);
+
+	/* WaAllocateSLML3CacheCtrlOverride:bdw */
+	I915_WRITE(GEN8_L3CNTLREG,
+			GEN8_L3CNTLREG_ALL_L3_CLIENT_POOL |
+			GEN8_L3CNTLREG_URB_ALLOCATION |
+			GEN8_L3CNTLREG_SLM_MODE_ENABLE);
 }
 
 static void haswell_init_clock_gating(struct drm_device *dev)
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.c b/drivers/gpu/drm/i915/intel_ringbuffer.c
index ed5534b..2512933 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@ -1089,12 +1089,10 @@ void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
 	struct intel_engine_cs *ring = ringbuf->ring;
 
 	/* WaDisablePartialInstShootdown:bdw */
-	/* WaDisableInstructionShootdown:bdw */
 	/* WaDisableThreadStallDopClockGating:bdw */
 	/* FIXME: Unclear whether we really need this on production bdw. */
 	ring->emit_wa(ringbuf, GEN8_ROW_CHICKEN,
 			   _MASKED_BIT_ENABLE(PARTIAL_INSTRUCTION_SHOOTDOWN_DISABLE
-					     | INSTRUCTION_SHOOTDOWN_DISABLE
 					     | STALL_DOP_GATING_DISABLE));
 
 	/* WaDisableDopClockGating:bdw May not be needed for production */
@@ -1118,13 +1116,9 @@ void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
 	/* Use Force Non-Coherent whenever executing a 3D context. This is a
 	 * workaround for for a possible hang in the unlikely event a TLB
 	 * invalidation occurs during a PSD flush.
-	 * WaDisableFenceDestinationToSLM:bdw
-	 * WaHdcDisableFetchWhenMasked:bdw
 	 */
 	ring->emit_wa(ringbuf, HDC_CHICKEN0,
-		   _MASKED_BIT_ENABLE(HDC_FENCE_DESTINATION_TO_SLM_DISABLE
-				   | HDC_DONOT_FETCH_MEM_WHEN_MASKED
-				   | HDC_FORCE_NON_COHERENT));
+			   _MASKED_BIT_ENABLE(HDC_FORCE_NON_COHERENT));
 
 	/* Wa4x4STCOptimizationDisable:bdw */
 	ring->emit_wa(ringbuf, CACHE_MODE_1,
@@ -1140,12 +1134,6 @@ void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
 	 */
 	ring->emit_wa(ringbuf, GEN7_GT_MODE,
 			   GEN6_WIZ_HASHING_MASK | GEN6_WIZ_HASHING_16x4);
-
-	/* WaAllocateSLML3CacheCtrlOverride:bdw */
-	ring->emit_wa(ringbuf, GEN8_L3CNTLREG,
-			GEN8_L3CNTLREG_ALL_L3_CLIENT_POOL |
-			GEN8_L3CNTLREG_URB_ALLOCATION |
-			GEN8_L3CNTLREG_SLM_MODE_ENABLE);
 }
 
 static int bdw_init_workarounds(struct intel_ringbuffer *ringbuf)
@@ -1167,7 +1155,7 @@ static int bdw_init_workarounds(struct intel_ringbuffer *ringbuf)
 	 * update the number of dwords required based on the
 	 * actual number of workarounds applied
 	 */
-	ret = intel_ring_begin(ring, 27);
+	ret = intel_ring_begin(ring, 24);
 	if (ret)
 		return ret;
 
-- 
1.7.9.5

