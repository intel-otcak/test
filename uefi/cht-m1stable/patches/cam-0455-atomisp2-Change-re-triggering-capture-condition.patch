From 69b15a984f50614cee9681461e280f0163c697f2 Mon Sep 17 00:00:00 2001
From: haiqiang yao <haiqiangx.yao@intel.com>
Date: Thu, 16 Jul 2015 09:43:27 +0800
Subject: [PATCH 455/462] atomisp2: Change re-triggering capture condition

Due to the design of HALv3,sometimes in ZSL or SDV mode HAL
needs to capture multiple images within one streaming cycle.But
the capture number cannot be determined by HAL.So HAL only sets
the capture number to 1 and queue multiple buffers to
driver. Atomisp driver needs to check this case and re-trigger
CSS to do capture when new buffer is queued.

But at present, the driver only check whether re-trigger is
needed at the capture buffer done event, which failure
to work if the next queue buffer happens after that.
Thus it will cause isp capture pipe timeout.

The patch adds re-re trigger capture check at the time
of queueing capture buffer to resolve the issue.

Change-Id: I9242b006967686b7be906098e55b970f71965052
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-36960
Signed-off-by: haiqiang yao <haiqiangx.yao@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/65234
Build: IMIN (SC)
Validation-Android: Wei Tao <wei.tao@intel.com>
Approver: Shuguang Gong <shuguang.gong@intel.com>
Reviewed-by: Shuguang Gong <shuguang.gong@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Build: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Maintainer: WeiX Meng <weix.meng@intel.com>
---
 .../media/pci/atomisp2/atomisp_driver/atomisp_cmd.c     | 16 ++++++++++------
 .../pci/atomisp2/atomisp_driver/atomisp_compat_css20.c  |  2 ++
 .../media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c   | 17 +++++++++++++++--
 .../media/pci/atomisp2/atomisp_driver/atomisp_subdev.h  |  2 +-
 4 files changed, 28 insertions(+), 9 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index e50c6ca..875d5a3 100755
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -1083,15 +1083,19 @@ void atomisp_buf_done(struct atomisp_sub_device *asd, int error,
 		WARN_ON(!vb);
 		if (vb)
 			pipe->frame_config_id[vb->i] = frame->isp_config_id;
-		if (css_pipe_id == IA_CSS_PIPE_ID_CAPTURE &&
-		    asd->pending_capture_request > 0) {
-			err = atomisp_css_offline_capture_configure(asd,
+		if (css_pipe_id == IA_CSS_PIPE_ID_CAPTURE) {
+			if (asd->pending_capture_request > 0) {
+				err = atomisp_css_offline_capture_configure(asd,
 					asd->params.offline_parm.num_captures,
 					asd->params.offline_parm.skip_frames,
 					asd->params.offline_parm.offset);
-			asd->pending_capture_request--;
-			dev_dbg(isp->dev, "Trigger capture again for new buffer. err=%d\n",
-				err);
+				asd->pending_capture_request--;
+				asd->re_trigger_capture = false;
+				dev_dbg(isp->dev, "Trigger capture again for new buffer. err=%d\n",
+						err);
+			} else {
+				asd->re_trigger_capture = true;
+			}
 		}
 		break;
 	case CSS_BUFFER_TYPE_OUTPUT_FRAME:
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
index 72aca14..445c45d 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
@@ -3392,6 +3392,8 @@ int atomisp_css_offline_capture_configure(struct atomisp_sub_device *asd,
 {
 	enum ia_css_err ret;
 
+	dev_dbg(asd->isp->dev, "%s num_capture:%d skip:%d offset:%d\n",
+			__func__, num_captures, skip, offset);
 	ret = ia_css_stream_capture(
 		asd->stream_env[ATOMISP_INPUT_STREAM_GENERAL].stream,
 		num_captures, skip, offset);
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index d345a40..cd637f0 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -1372,8 +1372,20 @@ done:
 	    pipe->capq.streaming &&
 	    !asd->enable_raw_buffer_lock->val &&
 	    asd->params.offline_parm.num_captures == 1) {
-		asd->pending_capture_request++;
-		dev_dbg(isp->dev, "Add one pending capture request.\n");
+	    if (asd->re_trigger_capture) {
+			ret = atomisp_css_offline_capture_configure(asd,
+				asd->params.offline_parm.num_captures,
+				asd->params.offline_parm.skip_frames,
+				asd->params.offline_parm.offset);
+			asd->re_trigger_capture = false;
+			dev_dbg(isp->dev, "%s Trigger capture again ret=%d\n",
+				__func__, ret);
+
+	    } else {
+			asd->pending_capture_request++;
+			asd->re_trigger_capture = false;
+			dev_dbg(isp->dev, "Add one pending capture request.\n");
+	    }
 	}
 	rt_mutex_unlock(&isp->mutex);
 
@@ -1737,6 +1749,7 @@ static int atomisp_streamon(struct file *file, void *fh,
 
 	/* Reset pending capture request count. */
 	asd->pending_capture_request = 0;
+	asd->re_trigger_capture = false;
 
 	if ((atomisp_subdev_streaming_count(asd) > sensor_start_stream) &&
 	    (!isp->inputs[asd->input_curr].camera_caps->multi_stream_ctrl)) {
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
index 9b2911e..aa84aa5 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
@@ -398,7 +398,7 @@ struct atomisp_sub_device {
 	struct atomisp_resolution sensor_array_res;
 	bool high_speed_mode; /* Indicate whether now is a high speed mode */
 	int pending_capture_request; /* Indicates the number of pending capture requests. */
-
+	bool re_trigger_capture;
 	unsigned int preview_exp_id;
 	unsigned int postview_exp_id;
 };
-- 
1.9.1

