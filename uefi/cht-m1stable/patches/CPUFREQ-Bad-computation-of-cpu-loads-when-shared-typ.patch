From 0954677db92f1e54bb9a44a6eb66a5bb91a517c7 Mon Sep 17 00:00:00 2001
From: Ananth Krishna <ananth.krishna.r@intel.com>
Date: Fri, 27 Feb 2015 12:11:18 +0530
Subject: [PATCH] [CPUFREQ]: Bad computation of cpu loads when shared type all

This patch fixes the bad loads in interactive governor when
in SHARED_TYPE_ALL. Those bad loads causes  higher pstates
to be selected and increase  energy used.

Also provides fix the ftrace log that could log a bad pstate
and fix the ftrace log so that the setspeed is trace only when
really speed is changed.

Acknowledgement: Stephane Gasparini <stephane.gasparini@intel.com>
original author of patch.

Change-Id: Ie7f711ff453ba590e3d7ff8592216f358a2145ab
Original-Commit-ID: Ifadffa5a7a0a9b778d4a9b6d5c3c5461504c4fb1
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-5644
Signed-off-by: Ananth Krishna <ananth.krishna.r@intel.com>
---
 drivers/cpufreq/cpufreq_interactive.c |   16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

Index: b/drivers/cpufreq/cpufreq_interactive.c
===================================================================
--- a/drivers/cpufreq/cpufreq_interactive.c	2015-11-16 11:40:49.288802509 -0800
+++ b/drivers/cpufreq/cpufreq_interactive.c	2015-11-16 11:45:46.221021886 -0800
@@ -371,7 +371,11 @@
 	spin_lock_irqsave(&pcpu->target_freq_lock, flags);
 	do_div(cputime_speedadj, delta_time);
 	loadadjfreq = (unsigned int)cputime_speedadj * 100;
+#ifdef CONFIG_INTEL_MODULE_CPU_FREQ
+	cpu_load = loadadjfreq / pcpu->policy->cur;
+#else
 	cpu_load = loadadjfreq / pcpu->target_freq;
+#endif
 	tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime;
 
 	if (cpu_load >= tunables->go_hispeed_load || tunables->boosted) {
@@ -556,6 +560,16 @@
 				pjcpu->pol_floor_val_time = fvt;
 			}
 
+#ifdef CONFIG_INTEL_MODULE_CPU_FREQ
+			if (max_freq != pcpu->policy->cur) {
+				__cpufreq_driver_target(pcpu->policy,
+							max_freq,
+							CPUFREQ_RELATION_H);
+				trace_cpufreq_interactive_setspeed(cpu,
+							     max_freq,
+							     pcpu->policy->cur);
+			}
+#else
 			if (max_freq != pcpu->policy->cur) {
 				__cpufreq_driver_target(pcpu->policy,
 							max_freq,
@@ -568,7 +582,7 @@
 			trace_cpufreq_interactive_setspeed(cpu,
 						     pcpu->target_freq,
 						     pcpu->policy->cur);
-
+#endif
 			up_read(&pcpu->enable_sem);
 		}
 	}
