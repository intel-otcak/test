From f21a569150d3ca3840bc6cab17939c09e97bd63a Mon Sep 17 00:00:00 2001
Message-Id: <f21a569150d3ca3840bc6cab17939c09e97bd63a.1428007496.git.feitong.yi@intel.com>
In-Reply-To: <96b4927b026b1cf56e9298f537d7ca517a5902b4.1428007496.git.feitong.yi@intel.com>
References: <96b4927b026b1cf56e9298f537d7ca517a5902b4.1428007496.git.feitong.yi@intel.com>
From: Deepak M <m.deepak@intel.com>
Date: Thu, 12 Mar 2015 14:26:06 +0530
Subject: [PATCH 4/6] REVERTME [VPG]: drm/i915: Adding the usb typeC fields in
 child structure

The new fields are added at the end of the child structure in the
VBT from the version 195 onwards so added the same in the kernel
to parse these fields.

REVERTME : The design discussion is going with OTC, once that is
finaliazed this patch will be reverted and replaced by the agreed
design.

Issue: GMINL-7184
Change-Id: I3d40f4731232ea2dac9ac7060e8565b03edd63b9
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-25621
Signed-off-by: Deepak M <m.deepak@intel.com>
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/intel_bios.c |   54 ++++++++++++++++++-------------------
 drivers/gpu/drm/i915/intel_bios.h |    8 ++++++
 2 files changed, 35 insertions(+), 27 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_bios.c b/drivers/gpu/drm/i915/intel_bios.c
index acc1450..ce48371 100644
--- a/drivers/gpu/drm/i915/intel_bios.c
+++ b/drivers/gpu/drm/i915/intel_bios.c
@@ -474,30 +474,25 @@ parse_sdvo_device_mapping(struct drm_i915_private *dev_priv,
 	union child_device_config *p_child;
 	int i, child_device_num, count;
 	u16	block_size;
+	size_t child_size;
 
 	p_defs = find_section(bdb, BDB_GENERAL_DEFINITIONS);
 	if (!p_defs) {
 		DRM_DEBUG_KMS("No general definition block is found, unable to construct sdvo mapping.\n");
 		return;
 	}
-	/* judge whether the size of child device meets the requirements.
-	 * If the child device size obtained from general definition block
-	 * is different with sizeof(struct child_device_config), skip the
-	 * parsing of sdvo device info
-	 */
-	if (p_defs->child_dev_size != sizeof(*p_child)) {
-		/* different child dev size . Ignore it */
-		DRM_DEBUG_KMS("different child size is found. Invalid.\n");
-		return;
-	}
+
 	/* get the block size of general definitions */
 	block_size = get_blocksize(p_defs);
 	/* get the number of child device */
 	child_device_num = (block_size - sizeof(*p_defs)) /
-				sizeof(*p_child);
+				p_defs->child_dev_size;
 	count = 0;
+
+	child_size = p_defs->child_dev_size;
 	for (i = 0; i < child_device_num; i++) {
-		p_child = &(p_defs->devices[i]);
+		p_child = (union child_device_config *)(
+				(char *)(p_defs->devices) + (child_size * i));
 		if (!p_child->old.device_type) {
 			/* skip the device block if device type is invalid */
 			continue;
@@ -1115,31 +1110,27 @@ parse_device_mapping(struct drm_i915_private *dev_priv,
 	union child_device_config *p_child, *child_dev_ptr;
 	int i, child_device_num, count;
 	u16	block_size;
+	size_t child_size, copy_bytes;
 
 	p_defs = find_section(bdb, BDB_GENERAL_DEFINITIONS);
 	if (!p_defs) {
 		DRM_DEBUG_KMS("No general definition block is found, no devices defined.\n");
 		return;
 	}
-	/* judge whether the size of child device meets the requirements.
-	 * If the child device size obtained from general definition block
-	 * is different with sizeof(struct child_device_config), skip the
-	 * parsing of sdvo device info
-	 */
-	if (p_defs->child_dev_size != sizeof(*p_child)) {
-		/* different child dev size . Ignore it */
-		DRM_DEBUG_KMS("different child size is found. Invalid.\n");
-		return;
-	}
+
 	/* get the block size of general definitions */
 	block_size = get_blocksize(p_defs);
 	/* get the number of child device */
 	child_device_num = (block_size - sizeof(*p_defs)) /
-				sizeof(*p_child);
+				p_defs->child_dev_size;
 	count = 0;
+
+	child_size = p_defs->child_dev_size;
 	/* get the number of child device that is present */
 	for (i = 0; i < child_device_num; i++) {
-		p_child = &(p_defs->devices[i]);
+		p_child = (union child_device_config *)(
+				(char *)(p_defs->devices) + (child_size * i));
+
 		if (!p_child->common.device_type) {
 			/* skip the device block if device type is invalid */
 			continue;
@@ -1150,16 +1141,25 @@ parse_device_mapping(struct drm_i915_private *dev_priv,
 		DRM_DEBUG_KMS("no child dev is parsed from VBT\n");
 		return;
 	}
+
 	dev_priv->vbt.child_dev = kcalloc(count, sizeof(*p_child), GFP_KERNEL);
+
 	if (!dev_priv->vbt.child_dev) {
 		DRM_DEBUG_KMS("No memory space for child device\n");
 		return;
 	}
 
 	dev_priv->vbt.child_dev_num = count;
+
+	copy_bytes = p_defs->child_dev_size;
+	if (copy_bytes > sizeof(union child_device_config))
+		copy_bytes = sizeof(union child_device_config);
+
 	count = 0;
 	for (i = 0; i < child_device_num; i++) {
-		p_child = &(p_defs->devices[i]);
+		p_child = (union child_device_config *)(
+				(char *)(p_defs->devices) + (child_size * i));
+
 		if (!p_child->common.device_type) {
 			/* skip the device block if device type is invalid */
 			continue;
@@ -1175,8 +1175,8 @@ parse_device_mapping(struct drm_i915_private *dev_priv,
 
 		child_dev_ptr = dev_priv->vbt.child_dev + count;
 		count++;
-		memcpy((void *)child_dev_ptr, (void *)p_child,
-					sizeof(*p_child));
+
+		memcpy((void *)child_dev_ptr, (void *)p_child, copy_bytes);
 	}
 	return;
 }
diff --git a/drivers/gpu/drm/i915/intel_bios.h b/drivers/gpu/drm/i915/intel_bios.h
index 7b1c64e..3b45a77 100644
--- a/drivers/gpu/drm/i915/intel_bios.h
+++ b/drivers/gpu/drm/i915/intel_bios.h
@@ -203,6 +203,13 @@ struct bdb_general_features {
 #define DEVICE_PORT_DVOB	0x01
 #define DEVICE_PORT_DVOC	0x02
 
+struct usb_typec_config {
+	u8  usb_typec_dongle_enabled:1;
+	u8  rsvd:7;
+	u8  dp2x_gpio_index;
+	u16 dp2x_gpio_number;
+} __packed;
+
 /* We used to keep this struct but without any version control. We should avoid
  * using it in the future, but it should be safe to keep using it in the old
  * code. */
@@ -226,6 +233,7 @@ struct old_child_dev_config {
 	u8  dvo2_wiring;
 	u16 extended_type;
 	u8  dvo_function;
+	struct usb_typec_config usb_typec;
 } __packed;
 
 /* This one contains field offsets that are known to be common for all BDB
-- 
1.7.9.5

