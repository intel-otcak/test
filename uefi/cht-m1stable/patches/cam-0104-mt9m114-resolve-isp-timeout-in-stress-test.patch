From fe7c2d4f76a273e10b4022e44cb6a55ba1e0993e Mon Sep 17 00:00:00 2001
From: "Tao, Jing" <jing.tao@intel.com>
Date: Fri, 17 Oct 2014 16:26:06 +0800
Subject: [PATCH 104/117] mt9m114: resolve isp timeout in stress test

ISP would get timeout in video start/stop stress test.

Root caused to be s_exposure function get called at sensor
stream off stage, which set the 15 bit of reset_register
causes sensor behavior abnormally.

Not know why set this bit as it is marked as reserved field,
so just delete this setting and the ISP time issue is gone.

Need to take more investigation on this.

Change-Id: Id743a2d94dc6f615f966bd2e916b03b49cec4a46
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-2446
Signed-off-by: Tao, Jing <jing.tao@intel.com>
---
 .../camera/drivers/media/i2c/mt9m114.c               | 20 --------------------
 1 file changed, 20 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
index daf5f50..e65388a 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
@@ -1173,7 +1173,6 @@ static long mt9m114_s_exposure(struct v4l2_subdev *sd,
     unsigned int AnalogGain, DigitalGain;
     u32 AnalogGainToWrite = 0;
     u16 exposure_local[3];
-    u32 RegSwResetData = 0;
 
     dev_dbg(&client->dev, "%s(0x%X 0x%X 0x%X)\n", __func__,
 		    exposure->integration_time[0], exposure->gain[0],
@@ -1193,12 +1192,6 @@ static long mt9m114_s_exposure(struct v4l2_subdev *sd,
 	}
     //DigitalGain = 0x400 * (((u16) DigitalGain) >> 8) + ((unsigned int)(0x400 * (((u16) DigitalGain) & 0xFF)) >>8);
 
-    //Hindden Register usage in REG_SW_RESET bit 15. set REG_SW_RESET bit 15 as 1 for group apply.
-    // sequence as below, set bit 15 as--> set gain line --> set bit 15 -->0
-    ret = mt9m114_read_reg(client, MISENSOR_16BIT, REG_SW_RESET, &RegSwResetData);
-    RegSwResetData |= 0x8000;
-    ret = mt9m114_write_reg(client, MISENSOR_16BIT, REG_SW_RESET, RegSwResetData);
-
     //set frame length
     if (FLines < coarse_integration + 6)
         FLines = coarse_integration + 6;
@@ -1210,9 +1203,6 @@ static long mt9m114_s_exposure(struct v4l2_subdev *sd,
 		return -EINVAL;
 	}
 
-	// Reset group apply as it will be cleared in bayer mode
-	ret = mt9m114_write_reg(client, MISENSOR_16BIT, REG_SW_RESET, RegSwResetData);
-
     //set coarse/fine integration
     exposure_local[0] = REG_EXPO_COARSE;
     exposure_local[1] = (u16)coarse_integration;
@@ -1224,9 +1214,6 @@ static long mt9m114_s_exposure(struct v4l2_subdev *sd,
 		 return -EINVAL;
     }
 
-	 // Reset group apply as it will be cleared in bayer mode
-	 ret = mt9m114_write_reg(client, MISENSOR_16BIT, REG_SW_RESET, RegSwResetData);
-
      /*
     // set analog/digital gain
     switch(AnalogGain)
@@ -1261,13 +1248,6 @@ static long mt9m114_s_exposure(struct v4l2_subdev *sd,
 		return -EINVAL;
    }
 
-   // Reset group apply as it will be cleared in bayer mode
-   ret = mt9m114_write_reg(client, MISENSOR_16BIT, REG_SW_RESET, RegSwResetData);
-
-   ret = mt9m114_read_reg(client, MISENSOR_16BIT, REG_SW_RESET, &RegSwResetData);
-   RegSwResetData &= 0x7FFF;
-   ret = mt9m114_write_reg(client, MISENSOR_16BIT, REG_SW_RESET, RegSwResetData);
-
     return ret;
 }
 
-- 
1.9.3

