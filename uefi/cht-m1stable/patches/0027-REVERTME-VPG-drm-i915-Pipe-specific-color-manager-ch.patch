From 79ca0f40cb034a5e95e07169c1085e9ca0454f1a Mon Sep 17 00:00:00 2001
Message-Id: <79ca0f40cb034a5e95e07169c1085e9ca0454f1a.1417780878.git.chang-joon.lee@intel.com>
In-Reply-To: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
References: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
From: amanna <animesh.manna@intel.com>
Date: Fri, 1 Aug 2014 19:19:08 +0530
Subject: [PATCH 27/34] REVERTME [VPG]: drm/i915: Pipe specific color manager
 change.

This patch contain all the changes required for pipe specific
color manager. CRTC_ID is passed through sysfs interface to
identify the pipe.

Known issue: Some HDMI panel is taking time to update the applied
gamma, csc.

REVERTME: IOCTL based interface will replace this implementation

Issue: GMINL-3630
Change-Id: I9ed5c1d10162cd193f2522e7bb867c493b5278b7
Signed-off-by: Animesh Manna <animesh.manna@intel.com>
Signed-off-by: Kumar, Mahesh <mahesh1.kumar@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h     |    4 +-
 drivers/gpu/drm/i915/i915_sysfs.c   |  264 ++++++++++++++++++++++++++---------
 drivers/gpu/drm/i915/intel_clrmgr.c |  219 ++++++++++++++++-------------
 drivers/gpu/drm/i915/intel_clrmgr.h |   61 ++++++--
 drivers/gpu/drm/i915/intel_hdmi.c   |    8 ++
 5 files changed, 386 insertions(+), 170 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index bd8a549..f91e6d6 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1695,8 +1695,8 @@ struct drm_i915_private {
 	bool is_first_modeset;
 	bool maxfifo_enabled;
 	bool is_tiled;
-	bool csc_enabled;
-	bool gamma_enabled;
+	bool gamma_enabled[I915_MAX_PIPES];
+	bool csc_enabled[I915_MAX_PIPES];
 	bool is_resuming;
 
 	/* Indicates currently enabled planes */
diff --git a/drivers/gpu/drm/i915/i915_sysfs.c b/drivers/gpu/drm/i915/i915_sysfs.c
index 3629f14..5a41320 100644
--- a/drivers/gpu/drm/i915/i915_sysfs.c
+++ b/drivers/gpu/drm/i915/i915_sysfs.c
@@ -552,8 +552,14 @@ static ssize_t gamma_adjust_store(struct device *kdev,
 {
 	int ret = 0;
 	int bytes_count = 0;
-	int bytes_read = 0;
 	char *buf = NULL;
+	int pipe = 0;
+	int crtc_id = -1;
+	int bytes_read = 0;
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_crtc *crtc = NULL;
+	struct drm_mode_object *obj;
 
 	/* Validate input */
 	if (!count) {
@@ -575,23 +581,44 @@ static ssize_t gamma_adjust_store(struct device *kdev,
 	}
 	bytes_count = count;
 
-	/* Parse data and load the gamma  table */
-	ret = parse_clrmgr_input(gamma_softlut, buf,
-		GAMMA_CORRECT_MAX_COUNT, &bytes_count);
-	if (ret < GAMMA_CORRECT_MAX_COUNT) {
-		DRM_ERROR("Gamma table loading failed\n");
+	/* Parse data and read the crtc_id */
+	ret = parse_clrmgr_input(&crtc_id, buf,
+		CRTC_ID_TOKEN_COUNT, &bytes_count);
+	if (ret < CRTC_ID_TOKEN_COUNT) {
+		DRM_ERROR("CRTC_ID loading failed\n");
 		goto EXIT;
 	} else
-		DRM_DEBUG("Gamma table loading done\n");
-
-	bytes_read = bytes_count;
-	if (bytes_count < count) {
+		DRM_DEBUG("CRTC_ID loading done\n");
 
-		/* Number of bytes remaining */
-		bytes_count = count - bytes_count;
+	obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
+	if (!obj) {
+		DRM_DEBUG_KMS("Unknown CRTC ID %d\n", crtc_id);
+		ret = -EINVAL;
+		goto EXIT;
+	}
+	crtc = obj_to_crtc(obj);
+	DRM_DEBUG_KMS("[CRTC:%d]\n", crtc->base.id);
+
+	pipe = to_intel_crtc(crtc)->pipe;
+	bytes_read += bytes_count;
+	bytes_count = count - bytes_read;
+	if (bytes_count > 0) {
+
+		/* Parse data and load the gamma  table */
+		ret = parse_clrmgr_input(gamma_softlut[pipe], buf+bytes_read,
+			GAMMA_CORRECT_MAX_COUNT, &bytes_count);
+		if (ret < GAMMA_CORRECT_MAX_COUNT) {
+			DRM_ERROR("Gamma table loading failed\n");
+			goto EXIT;
+		} else
+			DRM_DEBUG("Gamma table loading done\n");
+	}
+	bytes_read += bytes_count;
+	bytes_count = count - bytes_read;
+	if (bytes_count > 0) {
 
 		/* Parse data and load the gcmax table */
-		ret = parse_clrmgr_input(gcmax_softlut, buf+bytes_read,
+		ret = parse_clrmgr_input(gcmax_softlut[pipe], buf+bytes_read,
 				GC_MAX_COUNT, &bytes_count);
 
 		if (ret < GC_MAX_COUNT)
@@ -616,9 +643,9 @@ static ssize_t csc_enable_show(struct device *kdev,
 	struct drm_minor *minor = dev_to_drm_minor(kdev);
 	struct drm_device *dev = minor->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	len = scnprintf(ubuf, PAGE_SIZE, "%s\n",
-		dev_priv->csc_enabled ? "Enabled" : "Disabled");
+	len = scnprintf(ubuf, PAGE_SIZE, "Pipe 0: %s\nPipe 1: %s\n",
+		dev_priv->csc_enabled[0] ? "Enabled" : "Disabled",
+		dev_priv->csc_enabled[1] ? "Enabled" : "Disabled");
 
 	return len;
 }
@@ -628,11 +655,16 @@ static ssize_t csc_enable_store(struct device *kdev,
 				     const char *ubuf, size_t count)
 {
 	int ret = 0;
-	uint status = 0;
+	char *buf = NULL;
+	int pipe = 0;
+	int req_state = 0;
+	int bytes_read = 0;
+	int bytes_count = count;
+	int crtc_id = -1;
+	struct drm_mode_object *obj = NULL;
 	struct drm_crtc *crtc = NULL;
 	struct drm_minor *minor = dev_to_drm_minor(kdev);
 	struct drm_device *dev = minor->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
 
 	/* Validate input */
 	if (!count) {
@@ -640,34 +672,62 @@ static ssize_t csc_enable_store(struct device *kdev,
 		return -EINVAL;
 	}
 
-	/* Finally, get the status */
-	if (kstrtouint(ubuf, 10, &status)) {
-		DRM_ERROR("CSC enable: Invalid limit\n");
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
 		ret = -EINVAL;
 		goto EXIT;
 	}
 
-	dev_priv->csc_enabled = status;
+	/* Parse data and load the crtc_id */
+	ret = parse_clrmgr_input(&crtc_id, buf,
+		CRTC_ID_TOKEN_COUNT, &bytes_count);
+	if (ret < CRTC_ID_TOKEN_COUNT) {
+		DRM_ERROR("CRTC_ID_TOKEN loading failed\n");
+		goto EXIT;
+	} else
+		DRM_DEBUG("CRTC_ID_TOKEN loading done\n");
 
-	/* Search for a CRTC,
-	Assumption: Either MIPI or EDP is fix panel */
-	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
-		if ((intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) ||
-			(intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)))
-			break;
+	obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
+	if (!obj) {
+		DRM_DEBUG_KMS("Unknown CRTC ID %d\n", crtc_id);
+		ret = -EINVAL;
+		goto EXIT;
 	}
-
-	/* No CRTC */
-	if (!crtc) {
-		DRM_ERROR("CSC enable: No local panel found\n");
+	crtc = obj_to_crtc(obj);
+	DRM_DEBUG_KMS("[CRTC:%d]\n", crtc->base.id);
+
+	pipe = to_intel_crtc(crtc)->pipe;
+	bytes_read += bytes_count;
+	bytes_count = count - bytes_read;
+	if (bytes_count > 0) {
+
+		/* Parse data and load the gamma  table */
+		ret = parse_clrmgr_input(&req_state, buf+bytes_read,
+			ENABLE_TOKEN_MAX_COUNT, &bytes_count);
+		if (ret < ENABLE_TOKEN_MAX_COUNT) {
+			DRM_ERROR("Enable-token loading failed\n");
+			goto EXIT;
+		} else
+			DRM_DEBUG("Enable-token loading done\n");
+	} else {
+		DRM_ERROR("Enable-token loading failed\n");
 		ret = -EINVAL;
 		goto EXIT;
 	}
+	DRM_DEBUG_KMS("req_state:%d\n", req_state);
+
 
 	/* if CSC enabled, apply CSC correction */
-	if (dev_priv->csc_enabled) {
+	if (req_state) {
 		if (do_intel_enable_csc(dev,
-			(void *) csc_softlut, crtc)) {
+				(void *) csc_softlut[pipe], crtc)) {
 			DRM_ERROR("CSC correction failed\n");
 			ret = -EINVAL;
 		} else
@@ -679,7 +739,11 @@ static ssize_t csc_enable_store(struct device *kdev,
 	}
 
 EXIT:
-	return ret;
+	kfree(buf);
+	if (ret < 0)
+		return ret;
+
+	return count;
 }
 
 static ssize_t csc_adjust_store(struct device *kdev,
@@ -689,6 +753,13 @@ static ssize_t csc_adjust_store(struct device *kdev,
 	int bytes_count = count;
 	int ret = 0;
 	char *buf = NULL;
+	int bytes_read = 0;
+	int pipe = 0;
+	int crtc_id = -1;
+	struct drm_crtc *crtc = NULL;
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_mode_object *obj = NULL;
 
 	if (!count) {
 		DRM_ERROR("CSC adjust: insufficient data\n");
@@ -708,14 +779,37 @@ static ssize_t csc_adjust_store(struct device *kdev,
 		goto EXIT;
 	}
 
-	/* Parse data and load the csc  table */
-	ret = parse_clrmgr_input(csc_softlut, buf,
-		CSC_MAX_COEFF_COUNT, &bytes_count);
-	if (ret < CSC_MAX_COEFF_COUNT)
-		DRM_ERROR("CSC table loading failed\n");
-	else
-		DRM_DEBUG("CSC table loading done\n");
+	/* Parse data and load the crtc_id */
+	ret = parse_clrmgr_input(&crtc_id, buf,
+		CRTC_ID_TOKEN_COUNT, &bytes_count);
+	if (ret < CRTC_ID_TOKEN_COUNT) {
+		DRM_ERROR("CONNECTOR_TYPE_TOKEN loading failed\n");
+		goto EXIT;
+	} else
+		DRM_DEBUG("CONNECTOR_TYPE_TOKEN loading done\n");
 
+	obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
+	if (!obj) {
+		DRM_DEBUG_KMS("Unknown CRTC ID %d\n", crtc_id);
+		ret = -EINVAL;
+		goto EXIT;
+	}
+	crtc = obj_to_crtc(obj);
+	DRM_DEBUG_KMS("[CRTC:%d]\n", crtc->base.id);
+
+	pipe = to_intel_crtc(crtc)->pipe;
+	bytes_read += bytes_count;
+	bytes_count = count - bytes_read;
+	if (bytes_count > 0) {
+
+		/* Parse data and load the csc  table */
+		ret = parse_clrmgr_input(csc_softlut[pipe], buf+bytes_read,
+			CSC_MAX_COEFF_COUNT, &bytes_count);
+		if (ret < CSC_MAX_COEFF_COUNT)
+			DRM_ERROR("CSC table loading failed\n");
+		else
+			DRM_DEBUG("CSC table loading done\n");
+	}
 EXIT:
 	kfree(buf);
 	if (ret < 0)
@@ -732,8 +826,9 @@ static ssize_t gamma_enable_show(struct device *kdev,
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	int len = 0;
 
-	len = scnprintf(ubuf, PAGE_SIZE, "%s\n",
-		dev_priv->gamma_enabled ? "Enabled" : "Disabled");
+	len = scnprintf(ubuf, PAGE_SIZE, "Pipe 0: %s\nPipe 1: %s\n",
+		dev_priv->gamma_enabled[0] ? "Enabled" : "Disabled",
+		dev_priv->gamma_enabled[1] ? "Enabled" : "Disabled");
 
 	return len;
 }
@@ -744,10 +839,15 @@ static ssize_t gamma_enable_store(struct device *kdev,
 {
 	struct drm_minor *minor = dev_to_drm_minor(kdev);
 	struct drm_device *dev = minor->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
 	int ret = 0;
 	struct drm_crtc *crtc = NULL;
-	long unsigned int status = 0;
+	char *buf = NULL;
+	int bytes_read = 0;
+	int bytes_count = 0;
+	int crtc_id = -1;
+	int req_state = 0;
+	int pipe = 0;
+	struct drm_mode_object *obj;
 
 	/* Validate input */
 	if (!count) {
@@ -755,44 +855,80 @@ static ssize_t gamma_enable_store(struct device *kdev,
 		return -EINVAL;
 	}
 
-	/* Finally, get the status */
-	if (kstrtoul(ubuf, 10, &status)) {
-		DRM_ERROR("Gamma enable: Invalid limit\n");
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
 		ret = -EINVAL;
 		goto EXIT;
 	}
-	dev_priv->gamma_enabled = status;
-
-	/* Search for a CRTC,
-	Assumption: Either MIPI or EDP is fix panel */
-	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
-		if ((intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) ||
-			(intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)))
-			break;
+
+	bytes_count = count;
+
+	/* Parse data and load the crtc_id */
+	ret = parse_clrmgr_input(&crtc_id, buf,
+		CRTC_ID_TOKEN_COUNT, &bytes_count);
+	if (ret < CRTC_ID_TOKEN_COUNT) {
+		DRM_ERROR("CRTC_ID loading failed\n");
+		goto EXIT;
+	} else
+		DRM_DEBUG("CRTC_ID loading done\n");
+
+	obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
+	if (!obj) {
+		DRM_DEBUG_KMS("Unknown CRTC ID %d\n", crtc_id);
+		ret = -EINVAL;
+		goto EXIT;
 	}
 
-	/* No CRTC */
-	if (!crtc) {
-		DRM_ERROR("Gamma adjust: No local panel found\n");
+	crtc = obj_to_crtc(obj);
+	pipe = to_intel_crtc(crtc)->pipe;
+	DRM_DEBUG_KMS("[CRTC:%d]\n", crtc->base.id);
+
+	bytes_read += bytes_count;
+	bytes_count = count - bytes_read;
+	if (bytes_count > 0) {
+
+		/* Parse data and load the gamma  table */
+		ret = parse_clrmgr_input(&req_state, buf+bytes_read,
+			ENABLE_TOKEN_MAX_COUNT, &bytes_count);
+		if (ret < ENABLE_TOKEN_MAX_COUNT) {
+			DRM_ERROR("Enable-token loading failed\n");
+			goto EXIT;
+		} else
+			DRM_DEBUG("Enable-token loading done\n");
+	} else {
+		DRM_ERROR("Enable-token loading failed\n");
 		ret = -EINVAL;
 		goto EXIT;
 	}
 
 	/* if gamma enabled, apply gamma correction on PIPE */
-	if (dev_priv->gamma_enabled) {
-		if (intel_crtc_enable_gamma(crtc, PIPEA)) {
+	if (req_state) {
+		if (intel_crtc_enable_gamma(crtc,
+				pipe ? PIPEB : PIPEA)) {
 			DRM_ERROR("Apply gamma correction failed\n");
 			ret = -EINVAL;
 		} else
 			ret = count;
 	} else {
 		/* Disable gamma on this plane */
-		intel_crtc_disable_gamma(crtc, PIPEA);
+		intel_crtc_disable_gamma(crtc,
+				pipe ? PIPEB : PIPEA);
 		ret = count;
 	}
 
 EXIT:
-	return ret;
+	kfree(buf);
+	if (ret < 0)
+		return ret;
+
+	return count;
 }
 
 static ssize_t cb_adjust_store(struct device *kdev,
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.c b/drivers/gpu/drm/i915/intel_clrmgr.c
index 1bf59ca..e869953 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.c
+++ b/drivers/gpu/drm/i915/intel_clrmgr.c
@@ -39,44 +39,77 @@ u32 gamma_sprite_softlut[GAMMA_SP_MAX_COUNT] = {
 };
 
 /* Gamma soft lookup table for default gamma =1.0 */
-u32 gamma_softlut[GAMMA_CORRECT_MAX_COUNT] =  {
-	0x000000, 0x0, 0x020202, 0x0, 0x040404, 0x0, 0x060606, 0x0,
-	0x080808, 0x0, 0x0A0A0A, 0x0, 0x0C0C0C, 0x0, 0x0E0E0E, 0x0,
-	0x101010, 0x0, 0x121212, 0x0, 0x141414, 0x0, 0x161616, 0x0,
-	0x181818, 0x0, 0x1A1A1A, 0x0, 0x1C1C1C, 0x0, 0x1E1E1E, 0x0,
-	0x202020, 0x0, 0x222222, 0x0, 0x242424, 0x0, 0x262626, 0x0,
-	0x282828, 0x0, 0x2A2A2A, 0x0, 0x2C2C2C, 0x0, 0x2E2E2E, 0x0,
-	0x303030, 0x0, 0x323232, 0x0, 0x343434, 0x0, 0x363636, 0x0,
-	0x383838, 0x0, 0x3A3A3A, 0x0, 0x3C3C3C, 0x0, 0x3E3E3E, 0x0,
-	0x404040, 0x0, 0x424242, 0x0, 0x444444, 0x0, 0x464646, 0x0,
-	0x484848, 0x0, 0x4A4A4A, 0x0, 0x4C4C4C, 0x0, 0x4E4E4E, 0x0,
-	0x505050, 0x0, 0x525252, 0x0, 0x545454, 0x0, 0x565656, 0x0,
-	0x585858, 0x0, 0x5A5A5A, 0x0, 0x5C5C5C, 0x0, 0x5E5E5E, 0x0,
-	0x606060, 0x0, 0x626262, 0x0, 0x646464, 0x0, 0x666666, 0x0,
-	0x686868, 0x0, 0x6A6A6A, 0x0, 0x6C6C6C, 0x0, 0x6E6E6E, 0x0,
-	0x707070, 0x0, 0x727272, 0x0, 0x747474, 0x0, 0x767676, 0x0,
-	0x787878, 0x0, 0x7A7A7A, 0x0, 0x7C7C7C, 0x0, 0x7E7E7E, 0x0,
-	0x808080, 0x0, 0x828282, 0x0, 0x848484, 0x0, 0x868686, 0x0,
-	0x888888, 0x0, 0x8A8A8A, 0x0, 0x8C8C8C, 0x0, 0x8E8E8E, 0x0,
-	0x909090, 0x0, 0x929292, 0x0, 0x949494, 0x0, 0x969696, 0x0,
-	0x989898, 0x0, 0x9A9A9A, 0x0, 0x9C9C9C, 0x0, 0x9E9E9E, 0x0,
-	0xA0A0A0, 0x0, 0xA2A2A2, 0x0, 0xA4A4A4, 0x0, 0xA6A6A6, 0x0,
-	0xA8A8A8, 0x0, 0xAAAAAA, 0x0, 0xACACAC, 0x0, 0xAEAEAE, 0x0,
-	0xB0B0B0, 0x0, 0xB2B2B2, 0x0, 0xB4B4B4, 0x0, 0xB6B6B6, 0x0,
-	0xB8B8B8, 0x0, 0xBABABA, 0x0, 0xBCBCBC, 0x0, 0xBEBEBE, 0x0,
-	0xC0C0C0, 0x0, 0xC2C2C2, 0x0, 0xC4C4C4, 0x0, 0xC6C6C6, 0x0,
-	0xC8C8C8, 0x0, 0xCACACA, 0x0, 0xCCCCCC, 0x0, 0xCECECE, 0x0,
-	0xD0D0D0, 0x0, 0xD2D2D2, 0x0, 0xD4D4D4, 0x0, 0xD6D6D6, 0x0,
-	0xD8D8D8, 0x0, 0xDADADA, 0x0, 0xDCDCDC, 0x0, 0xDEDEDE, 0x0,
-	0xE0E0E0, 0x0, 0xE2E2E2, 0x0, 0xE4E4E4, 0x0, 0xE6E6E6, 0x0,
-	0xE8E8E8, 0x0, 0xEAEAEA, 0x0, 0xECECEC, 0x0, 0xEEEEEE, 0x0,
-	0xF0F0F0, 0x0, 0xF2F2F2, 0x0, 0xF4F4F4, 0x0, 0xF6F6F6, 0x0,
-	0xF8F8F8, 0x0, 0xFAFAFA, 0x0, 0xFCFCFC, 0x0, 0xFEFEFE, 0x0
+u32 gamma_softlut[MAX_PIPES_VLV][GAMMA_CORRECT_MAX_COUNT] =  {
+	{0x000000, 0x0, 0x020202, 0x0, 0x040404, 0x0, 0x060606, 0x0,
+	 0x080808, 0x0, 0x0A0A0A, 0x0, 0x0C0C0C, 0x0, 0x0E0E0E, 0x0,
+	 0x101010, 0x0, 0x121212, 0x0, 0x141414, 0x0, 0x161616, 0x0,
+	 0x181818, 0x0, 0x1A1A1A, 0x0, 0x1C1C1C, 0x0, 0x1E1E1E, 0x0,
+	 0x202020, 0x0, 0x222222, 0x0, 0x242424, 0x0, 0x262626, 0x0,
+	 0x282828, 0x0, 0x2A2A2A, 0x0, 0x2C2C2C, 0x0, 0x2E2E2E, 0x0,
+	 0x303030, 0x0, 0x323232, 0x0, 0x343434, 0x0, 0x363636, 0x0,
+	 0x383838, 0x0, 0x3A3A3A, 0x0, 0x3C3C3C, 0x0, 0x3E3E3E, 0x0,
+	 0x404040, 0x0, 0x424242, 0x0, 0x444444, 0x0, 0x464646, 0x0,
+	 0x484848, 0x0, 0x4A4A4A, 0x0, 0x4C4C4C, 0x0, 0x4E4E4E, 0x0,
+	 0x505050, 0x0, 0x525252, 0x0, 0x545454, 0x0, 0x565656, 0x0,
+	 0x585858, 0x0, 0x5A5A5A, 0x0, 0x5C5C5C, 0x0, 0x5E5E5E, 0x0,
+	 0x606060, 0x0, 0x626262, 0x0, 0x646464, 0x0, 0x666666, 0x0,
+	 0x686868, 0x0, 0x6A6A6A, 0x0, 0x6C6C6C, 0x0, 0x6E6E6E, 0x0,
+	 0x707070, 0x0, 0x727272, 0x0, 0x747474, 0x0, 0x767676, 0x0,
+	 0x787878, 0x0, 0x7A7A7A, 0x0, 0x7C7C7C, 0x0, 0x7E7E7E, 0x0,
+	 0x808080, 0x0, 0x828282, 0x0, 0x848484, 0x0, 0x868686, 0x0,
+	 0x888888, 0x0, 0x8A8A8A, 0x0, 0x8C8C8C, 0x0, 0x8E8E8E, 0x0,
+	 0x909090, 0x0, 0x929292, 0x0, 0x949494, 0x0, 0x969696, 0x0,
+	 0x989898, 0x0, 0x9A9A9A, 0x0, 0x9C9C9C, 0x0, 0x9E9E9E, 0x0,
+	 0xA0A0A0, 0x0, 0xA2A2A2, 0x0, 0xA4A4A4, 0x0, 0xA6A6A6, 0x0,
+	 0xA8A8A8, 0x0, 0xAAAAAA, 0x0, 0xACACAC, 0x0, 0xAEAEAE, 0x0,
+	 0xB0B0B0, 0x0, 0xB2B2B2, 0x0, 0xB4B4B4, 0x0, 0xB6B6B6, 0x0,
+	 0xB8B8B8, 0x0, 0xBABABA, 0x0, 0xBCBCBC, 0x0, 0xBEBEBE, 0x0,
+	 0xC0C0C0, 0x0, 0xC2C2C2, 0x0, 0xC4C4C4, 0x0, 0xC6C6C6, 0x0,
+	 0xC8C8C8, 0x0, 0xCACACA, 0x0, 0xCCCCCC, 0x0, 0xCECECE, 0x0,
+	 0xD0D0D0, 0x0, 0xD2D2D2, 0x0, 0xD4D4D4, 0x0, 0xD6D6D6, 0x0,
+	 0xD8D8D8, 0x0, 0xDADADA, 0x0, 0xDCDCDC, 0x0, 0xDEDEDE, 0x0,
+	 0xE0E0E0, 0x0, 0xE2E2E2, 0x0, 0xE4E4E4, 0x0, 0xE6E6E6, 0x0,
+	 0xE8E8E8, 0x0, 0xEAEAEA, 0x0, 0xECECEC, 0x0, 0xEEEEEE, 0x0,
+	 0xF0F0F0, 0x0, 0xF2F2F2, 0x0, 0xF4F4F4, 0x0, 0xF6F6F6, 0x0,
+	 0xF8F8F8, 0x0, 0xFAFAFA, 0x0, 0xFCFCFC, 0x0, 0xFEFEFE, 0x0},
+	{0x000000, 0x0, 0x020202, 0x0, 0x040404, 0x0, 0x060606, 0x0,
+	 0x080808, 0x0, 0x0A0A0A, 0x0, 0x0C0C0C, 0x0, 0x0E0E0E, 0x0,
+	 0x101010, 0x0, 0x121212, 0x0, 0x141414, 0x0, 0x161616, 0x0,
+	 0x181818, 0x0, 0x1A1A1A, 0x0, 0x1C1C1C, 0x0, 0x1E1E1E, 0x0,
+	 0x202020, 0x0, 0x222222, 0x0, 0x242424, 0x0, 0x262626, 0x0,
+	 0x282828, 0x0, 0x2A2A2A, 0x0, 0x2C2C2C, 0x0, 0x2E2E2E, 0x0,
+	 0x303030, 0x0, 0x323232, 0x0, 0x343434, 0x0, 0x363636, 0x0,
+	 0x383838, 0x0, 0x3A3A3A, 0x0, 0x3C3C3C, 0x0, 0x3E3E3E, 0x0,
+	 0x404040, 0x0, 0x424242, 0x0, 0x444444, 0x0, 0x464646, 0x0,
+	 0x484848, 0x0, 0x4A4A4A, 0x0, 0x4C4C4C, 0x0, 0x4E4E4E, 0x0,
+	 0x505050, 0x0, 0x525252, 0x0, 0x545454, 0x0, 0x565656, 0x0,
+	 0x585858, 0x0, 0x5A5A5A, 0x0, 0x5C5C5C, 0x0, 0x5E5E5E, 0x0,
+	 0x606060, 0x0, 0x626262, 0x0, 0x646464, 0x0, 0x666666, 0x0,
+	 0x686868, 0x0, 0x6A6A6A, 0x0, 0x6C6C6C, 0x0, 0x6E6E6E, 0x0,
+	 0x707070, 0x0, 0x727272, 0x0, 0x747474, 0x0, 0x767676, 0x0,
+	 0x787878, 0x0, 0x7A7A7A, 0x0, 0x7C7C7C, 0x0, 0x7E7E7E, 0x0,
+	 0x808080, 0x0, 0x828282, 0x0, 0x848484, 0x0, 0x868686, 0x0,
+	 0x888888, 0x0, 0x8A8A8A, 0x0, 0x8C8C8C, 0x0, 0x8E8E8E, 0x0,
+	 0x909090, 0x0, 0x929292, 0x0, 0x949494, 0x0, 0x969696, 0x0,
+	 0x989898, 0x0, 0x9A9A9A, 0x0, 0x9C9C9C, 0x0, 0x9E9E9E, 0x0,
+	 0xA0A0A0, 0x0, 0xA2A2A2, 0x0, 0xA4A4A4, 0x0, 0xA6A6A6, 0x0,
+	 0xA8A8A8, 0x0, 0xAAAAAA, 0x0, 0xACACAC, 0x0, 0xAEAEAE, 0x0,
+	 0xB0B0B0, 0x0, 0xB2B2B2, 0x0, 0xB4B4B4, 0x0, 0xB6B6B6, 0x0,
+	 0xB8B8B8, 0x0, 0xBABABA, 0x0, 0xBCBCBC, 0x0, 0xBEBEBE, 0x0,
+	 0xC0C0C0, 0x0, 0xC2C2C2, 0x0, 0xC4C4C4, 0x0, 0xC6C6C6, 0x0,
+	 0xC8C8C8, 0x0, 0xCACACA, 0x0, 0xCCCCCC, 0x0, 0xCECECE, 0x0,
+	 0xD0D0D0, 0x0, 0xD2D2D2, 0x0, 0xD4D4D4, 0x0, 0xD6D6D6, 0x0,
+	 0xD8D8D8, 0x0, 0xDADADA, 0x0, 0xDCDCDC, 0x0, 0xDEDEDE, 0x0,
+	 0xE0E0E0, 0x0, 0xE2E2E2, 0x0, 0xE4E4E4, 0x0, 0xE6E6E6, 0x0,
+	 0xE8E8E8, 0x0, 0xEAEAEA, 0x0, 0xECECEC, 0x0, 0xEEEEEE, 0x0,
+	 0xF0F0F0, 0x0, 0xF2F2F2, 0x0, 0xF4F4F4, 0x0, 0xF6F6F6, 0x0,
+	 0xF8F8F8, 0x0, 0xFAFAFA, 0x0, 0xFCFCFC, 0x0, 0xFEFEFE, 0x0}
 };
 
 /* GCMAX soft lookup table */
-u32 gcmax_softlut[GC_MAX_COUNT] =  {
-	0xFF00, 0xFF00, 0xFF00
+u32 gcmax_softlut[MAX_PIPES_VLV][GC_MAX_COUNT] =  {
+	{0x10000, 0x10000, 0x10000},
+	{0x10000, 0x10000, 0x10000}
 };
 
 /* Hue Saturation defaults */
@@ -96,8 +129,9 @@ struct cont_brightlut savedcbvalues[NO_SPRITE_REG] = {
 };
 
 /* Color space conversion coff's */
-u32 csc_softlut[CSC_MAX_COEFF_COUNT] = {
-	1024,	 0, 67108864, 0, 0, 1024
+u32 csc_softlut[MAX_PIPES_VLV][CSC_MAX_COEFF_COUNT] = {
+	{ 1024,	 0, 67108864, 0, 0, 1024 },
+	{ 1024,	 0, 67108864, 0, 0, 1024 }
 };
 
 /*
@@ -186,6 +220,7 @@ do_intel_enable_csc(struct drm_device *dev, void *data, struct drm_crtc *crtc)
 
 	/* Enable csc correction */
 	I915_WRITE(PIPECONF(pipe), pipeconf);
+	dev_priv->csc_enabled[pipe] = true;
 	POSTING_READ(PIPECONF(pipe));
 
 	/* Write csc coeff to csc regs */
@@ -204,7 +239,6 @@ do_intel_disable_csc(struct drm_device *dev, struct drm_crtc *crtc)
 	struct intel_crtc *intel_crtc = NULL;
 	u32 pipeconf = 0;
 	int pipe = 0;
-	dev_priv->csc_enabled = 0;
 
 	intel_crtc = to_intel_crtc(crtc);
 	pipe = intel_crtc->pipe;
@@ -213,6 +247,7 @@ do_intel_disable_csc(struct drm_device *dev, struct drm_crtc *crtc)
 
 	/* Disable CSC on PIPE */
 	I915_WRITE(PIPECONF(pipe), pipeconf);
+	dev_priv->csc_enabled[pipe] = false;
 	POSTING_READ(PIPECONF(pipe));
 	return;
 }
@@ -251,7 +286,6 @@ int parse_clrmgr_input(uint *dest, char *src, int max, int *num_bytes)
 		if (src == NULL || *src == '\0')
 			break;
 	}
-
 	/* Fill num_bytes with number of bytes read */
 	*num_bytes = bytes;
 
@@ -337,6 +371,7 @@ int intel_enable_primary_gamma(struct drm_crtc *crtc)
 	u32 count = 0;
 	u32 palreg = 0;
 	u32 status = 0;
+	u32 pipe = 0;
 	struct intel_crtc *intel_crtc;
 	struct drm_device *dev;
 	struct drm_i915_private *dev_priv;
@@ -348,15 +383,16 @@ int intel_enable_primary_gamma(struct drm_crtc *crtc)
 	}
 
 	intel_crtc = to_intel_crtc(crtc);
+	pipe = intel_crtc->pipe;
 	dev = crtc->dev;
 	dev_priv = dev->dev_private;
 
-	palreg = PALETTE(intel_crtc->pipe);
+	palreg = PALETTE(pipe);
 	 /* 10.6 mode Gamma Implementation */
 	while (count < GAMMA_CORRECT_MAX_COUNT) {
 		/* Get the gamma corrected value from table */
-		odd = gamma_softlut[count];
-		even = gamma_softlut[count + 1];
+		odd = gamma_softlut[pipe][count];
+		even = gamma_softlut[pipe][count + 1];
 
 		/* Write even and odd parts in palette regs*/
 		I915_WRITE(palreg + 4 * count, even);
@@ -365,14 +401,14 @@ int intel_enable_primary_gamma(struct drm_crtc *crtc)
 	}
 
 	/* Write max values in 11.6 format */
-	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, gcmax_softlut[0]);
-	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, gcmax_softlut[1]);
-	I915_WRITE(PIPEA_GAMMA_MAX_RED, gcmax_softlut[2]);
+	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, gcmax_softlut[pipe][0]);
+	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, gcmax_softlut[pipe][1]);
+	I915_WRITE(PIPEA_GAMMA_MAX_RED, gcmax_softlut[pipe][2]);
 
 	/* Enable gamma on PIPE  */
-	status = I915_READ(PIPECONF(intel_crtc->pipe));
+	status = I915_READ(PIPECONF(pipe));
 	status |= PIPECONF_GAMMA;
-	I915_WRITE(PIPECONF(intel_crtc->pipe), status);
+	I915_WRITE(PIPECONF(pipe), status);
 	DRM_DEBUG("Gamma enabled on Plane A\n");
 
 	return 0;
@@ -640,6 +676,7 @@ int intel_enable_pipe_gamma(struct drm_crtc *crtc)
 	u32 count = 0;
 	u32 palreg = 0;
 	u32 status = 0;
+	u32 pipe = 0;
 	struct intel_crtc *intel_crtc;
 	struct drm_device *dev;
 	struct drm_i915_private *dev_priv;
@@ -651,15 +688,17 @@ int intel_enable_pipe_gamma(struct drm_crtc *crtc)
 	}
 
 	intel_crtc = to_intel_crtc(crtc);
+	pipe = intel_crtc->pipe;
 	dev = crtc->dev;
 	dev_priv = dev->dev_private;
+	dev_priv->gamma_enabled[pipe] = true;
 
-	palreg = PALETTE(intel_crtc->pipe);
+	palreg = PALETTE(pipe);
 	 /* 10.6 mode Gamma Implementation */
 	while (count < GAMMA_CORRECT_MAX_COUNT) {
 		/* Get the gamma corrected value from table */
-		odd = gamma_softlut[count];
-		even = gamma_softlut[count + 1];
+		odd = gamma_softlut[pipe][count];
+		even = gamma_softlut[pipe][count + 1];
 
 		/* Write even and odd parts in palette regs*/
 		I915_WRITE(palreg + 4 * count, even);
@@ -668,24 +707,24 @@ int intel_enable_pipe_gamma(struct drm_crtc *crtc)
 	}
 
 	/* Write max values in 11.6 format */
-	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, gcmax_softlut[0]);
-	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, gcmax_softlut[1]);
-	I915_WRITE(PIPEA_GAMMA_MAX_RED, gcmax_softlut[2]);
+	I915_WRITE(PIPE_GAMMA_MAX_BLUE(pipe), gcmax_softlut[pipe][0]);
+	I915_WRITE(PIPE_GAMMA_MAX_GREEN(pipe), gcmax_softlut[pipe][1]);
+	I915_WRITE(PIPE_GAMMA_MAX_RED(pipe), gcmax_softlut[pipe][2]);
 
 	/* Enable gamma for Plane A  */
-	status = I915_READ(PIPECONF(intel_crtc->pipe));
+	status = I915_READ(PIPECONF(pipe));
 	status |= PIPECONF_GAMMA;
-	I915_WRITE(PIPECONF(intel_crtc->pipe), status);
+	I915_WRITE(PIPECONF(pipe), status);
 
 	/* Enable gamma on Sprite plane A*/
-	status = I915_READ(GAMMA_SPA_CNTRL);
+	status = I915_READ(GAMMA_SP1_CNTRL(pipe));
 	status |= GAMMA_ENABLE_SPR;
-	I915_WRITE(GAMMA_SPA_CNTRL, status);
+	I915_WRITE(GAMMA_SP1_CNTRL(pipe), status);
 
 	/* Enable gamma on Sprite plane B*/
-	status = I915_READ(GAMMA_SPB_CNTRL);
+	status = I915_READ(GAMMA_SP2_CNTRL(pipe));
 	status |= GAMMA_ENABLE_SPR;
-	I915_WRITE(GAMMA_SPB_CNTRL, status);
+	I915_WRITE(GAMMA_SP2_CNTRL(pipe), status);
 
 	DRM_DEBUG("Gamma enabled on Pipe A\n");
 	return 0;
@@ -698,9 +737,8 @@ int intel_crtc_enable_gamma(struct drm_crtc *crtc, u32 identifier)
 	switch (identifier) {
 	/* Whole pipe level correction */
 	case PIPEA:
-		return intel_enable_pipe_gamma(crtc);
 	case PIPEB:
-		return intel_enable_external_pipe_gamma(crtc);
+		return intel_enable_pipe_gamma(crtc);
 
 	/* Primary display planes */
 	case PLANEA:
@@ -909,13 +947,6 @@ bool intel_clrmgr_set_pipe_property(struct intel_crtc *intel_crtc,
 	return ret;
 }
 
-/* Disable gamma correction on Primary display */
-int intel_disable_external_pipe_gamma(struct drm_crtc *crtc)
-{
-	DRM_ERROR("This functionality is not implemented yet\n");
-	return -EINVAL;
-}
-
 /* Disable gamma correction for sprite planes on primary display */
 int intel_disable_sprite_gamma(struct drm_crtc *crtc, u32 planeid)
 {
@@ -1087,6 +1118,8 @@ int intel_disable_pipe_gamma(struct drm_crtc *crtc)
 	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 	struct drm_i915_private *dev_priv = dev->dev_private;
 
+	dev_priv->gamma_enabled[intel_crtc->pipe] = false;
+
 	/* Reset pal regs */
 	intel_crtc_load_lut(crtc);
 
@@ -1096,17 +1129,17 @@ int intel_disable_pipe_gamma(struct drm_crtc *crtc)
 	I915_WRITE(PIPECONF(intel_crtc->pipe), status);
 
 	/* Disable gamma on SpriteA  */
-	status = I915_READ(GAMMA_SPA_CNTRL);
+	status = I915_READ(GAMMA_SP1_CNTRL(intel_crtc->pipe));
 	status &= ~(GAMMA_ENABLE_SPR);
-	I915_WRITE(GAMMA_SPA_CNTRL, status);
+	I915_WRITE(GAMMA_SP1_CNTRL(intel_crtc->pipe), status);
 
 	/* Disable gamma on SpriteB  */
-	status = I915_READ(GAMMA_SPB_CNTRL);
+	status = I915_READ(GAMMA_SP2_CNTRL(intel_crtc->pipe));
 	status &= ~(GAMMA_ENABLE_SPR);
-	I915_WRITE(GAMMA_SPB_CNTRL, status);
+	I915_WRITE(GAMMA_SP2_CNTRL(intel_crtc->pipe), status);
 
 	/* TODO: Reset gamma table default */
-	DRM_DEBUG("Gamma disabled on Pipe\n");
+	DRM_DEBUG("Gamma disabled on Pipe %d\n", intel_crtc->pipe);
 	return 0;
 }
 
@@ -1148,9 +1181,8 @@ int intel_crtc_disable_gamma(struct drm_crtc *crtc, u32 identifier)
 	switch (identifier) {
 	/* Whole pipe level correction */
 	case PIPEA:
-		return intel_disable_pipe_gamma(crtc);
 	case PIPEB:
-		return intel_disable_external_pipe_gamma(crtc);
+		return intel_disable_pipe_gamma(crtc);
 	/* Primary planes */
 	case PLANEA:
 		return intel_disable_primary_gamma(crtc);
@@ -1351,6 +1383,7 @@ bool intel_restore_clr_mgr_status(struct drm_device *dev)
 {
 	struct drm_crtc *crtc = NULL;
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	int pipe = 0;
 
 	/* Validate input */
 	if (!dev_priv) {
@@ -1360,28 +1393,24 @@ bool intel_restore_clr_mgr_status(struct drm_device *dev)
 
 	/* Search for a CRTC */
 	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
-		if (intel_pipe_has_type(crtc, dev_priv->vbt.has_mipi ?
-					INTEL_OUTPUT_DSI : INTEL_OUTPUT_EDP))
-			break;
-	}
-
-	if (!crtc) {
-		DRM_ERROR("Color Restore: No local panel found\n");
-		return false;
-	}
-
-	/* If gamma enabled, restore gamma */
-	if (dev_priv->gamma_enabled) {
-		if (intel_crtc_enable_gamma(crtc, PIPEA)) {
-			DRM_ERROR("Color Restore: gamma failed\n");
-			return false;
+		pipe = to_intel_crtc(crtc)->pipe;
+
+		/* If gamma enabled, restore gamma */
+		if (dev_priv->gamma_enabled[pipe]) {
+			if (intel_crtc_enable_gamma(crtc,
+						pipe ? PIPEB : PIPEA)) {
+				DRM_ERROR("Color Restore: gamma failed\n");
+				return false;
+			}
 		}
-	}
 
-	/* If csc enabled, restore csc */
-	if (dev_priv->csc_enabled) {
-		if (do_intel_enable_csc(dev, (void *) csc_softlut, crtc)) {
-			DRM_ERROR("Color Restore: CSC failed\n");
+		/* If csc enabled, restore csc */
+		if (dev_priv->csc_enabled[pipe]) {
+			if (do_intel_enable_csc(dev,
+					(void *) csc_softlut[pipe], crtc)) {
+				DRM_ERROR("Color Restore: CSC failed\n");
+				return false;
+			}
 			return false;
 		}
 	}
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.h b/drivers/gpu/drm/i915/intel_clrmgr.h
index d64741e..a373476 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.h
+++ b/drivers/gpu/drm/i915/intel_clrmgr.h
@@ -50,10 +50,16 @@ struct hue_saturationlut {
 #define CLR_MGR_PARSE_MAX		128
 #define PIPECONF_GAMMA			(1<<24)
 #define GAMMA_CORRECT_MAX_COUNT 256
+#define CRTC_ID_TOKEN_COUNT	1
+#define ENABLE_TOKEN_MAX_COUNT	1
 #define GC_MAX_COUNT 3
 #define GAMMA_SP_MAX_COUNT		6
 #define CB_MAX_COEFF_COUNT      2
 #define HS_MAX_COEFF_COUNT      2
+#define UPDATE_GAMMA_PRIMARY	(1 << 0)
+#define UPDATE_GAMMA_SPRITE1	(1 << 1)
+#define UPDATE_GAMMA_SPRITE2	(1 << 2)
+
 /* Gamma correction defines */
 #define GAMMA_MAX_VAL			1024
 #define SHIFTBY6(val) (val<<6)
@@ -64,8 +70,20 @@ struct hue_saturationlut {
 #define EVEN(val)	(2*val)
 #define ODD(val)	((2*val)+1)
 #define PIPEA_GAMMA_MAX_RED	(dev_priv->info.display_mmio_offset + 0x70010)
+#define PIPEB_GAMMA_MAX_RED	(dev_priv->info.display_mmio_offset + 0x71010)
+#define PIPE_GAMMA_MAX_RED(pipe)    _PIPE(pipe, PIPEA_GAMMA_MAX_RED, \
+							PIPEB_GAMMA_MAX_RED)
+
 #define PIPEA_GAMMA_MAX_GREEN	(dev_priv->info.display_mmio_offset + 0x70014)
+#define PIPEB_GAMMA_MAX_GREEN	(dev_priv->info.display_mmio_offset + 0x71014)
+#define PIPE_GAMMA_MAX_GREEN(pipe)  _PIPE(pipe, PIPEA_GAMMA_MAX_GREEN, \
+							PIPEB_GAMMA_MAX_GREEN)
+
 #define PIPEA_GAMMA_MAX_BLUE	(dev_priv->info.display_mmio_offset + 0x70018)
+#define PIPEB_GAMMA_MAX_BLUE	(dev_priv->info.display_mmio_offset + 0x71018)
+#define PIPE_GAMMA_MAX_BLUE(pipe) _PIPE(pipe, PIPEA_GAMMA_MAX_BLUE, \
+							PIPEB_GAMMA_MAX_BLUE)
+
 /* Sprite gamma correction regs */
 #define GAMMA_SPA_GAMC0		(dev_priv->info.display_mmio_offset + 0x721F4)
 #define GAMMA_SPA_GAMC1		(dev_priv->info.display_mmio_offset + 0x721F0)
@@ -74,18 +92,43 @@ struct hue_saturationlut {
 #define GAMMA_SPA_GAMC4		(dev_priv->info.display_mmio_offset + 0x721E4)
 #define GAMMA_SPA_GAMC5		(dev_priv->info.display_mmio_offset + 0x721E0)
 
-#define GAMMA_SPB_GAMC0		(dev_priv->info.display_mmio_offset + 0x721F4)
-#define GAMMA_SPB_GAMC1		(dev_priv->info.display_mmio_offset + 0x721F0)
-#define GAMMA_SPB_GAMC2		(dev_priv->info.display_mmio_offset + 0x721EC)
-#define GAMMA_SPB_GAMC3		(dev_priv->info.display_mmio_offset + 0x721E8)
-#define GAMMA_SPB_GAMC4		(dev_priv->info.display_mmio_offset + 0x721E4)
-#define GAMMA_SPB_GAMC5		(dev_priv->info.display_mmio_offset + 0x721E0)
+#define GAMMA_SPB_GAMC0		(dev_priv->info.display_mmio_offset + 0x722F4)
+#define GAMMA_SPB_GAMC1		(dev_priv->info.display_mmio_offset + 0x722F0)
+#define GAMMA_SPB_GAMC2		(dev_priv->info.display_mmio_offset + 0x722EC)
+#define GAMMA_SPB_GAMC3		(dev_priv->info.display_mmio_offset + 0x722E8)
+#define GAMMA_SPB_GAMC4		(dev_priv->info.display_mmio_offset + 0x722E4)
+#define GAMMA_SPB_GAMC5		(dev_priv->info.display_mmio_offset + 0x722E0)
+
+#define GAMMA_SPC_GAMC0		(dev_priv->info.display_mmio_offset + 0x723F4)
+#define GAMMA_SPC_GAMC1		(dev_priv->info.display_mmio_offset + 0x723F0)
+#define GAMMA_SPC_GAMC2		(dev_priv->info.display_mmio_offset + 0x723EC)
+#define GAMMA_SPC_GAMC3		(dev_priv->info.display_mmio_offset + 0x723E8)
+#define GAMMA_SPC_GAMC4		(dev_priv->info.display_mmio_offset + 0x723E4)
+#define GAMMA_SPC_GAMC5		(dev_priv->info.display_mmio_offset + 0x723E0)
+
+#define GAMMA_SPD_GAMC0		(dev_priv->info.display_mmio_offset + 0x724F4)
+#define GAMMA_SPD_GAMC1		(dev_priv->info.display_mmio_offset + 0x724F0)
+#define GAMMA_SPD_GAMC2		(dev_priv->info.display_mmio_offset + 0x724EC)
+#define GAMMA_SPD_GAMC3		(dev_priv->info.display_mmio_offset + 0x724E8)
+#define GAMMA_SPD_GAMC4		(dev_priv->info.display_mmio_offset + 0x724E4)
+#define GAMMA_SPD_GAMC5		(dev_priv->info.display_mmio_offset + 0x724E0)
+
+#define GAMMA_SP1_GAMC0(pipe)	_PIPE(pipe, GAMMA_SPA_GAMC0, GAMMA_SPC_GAMC0)
+#define GAMMA_SP2_GAMC0(pipe)	_PIPE(pipe, GAMMA_SPB_GAMC0, GAMMA_SPD_GAMC0)
+
 
 #define GAMMA_SPA_CNTRL		(dev_priv->info.display_mmio_offset + 0x72180)
 #define GAMMA_SPB_CNTRL		(dev_priv->info.display_mmio_offset + 0x72280)
+#define GAMMA_SPC_CNTRL		(dev_priv->info.display_mmio_offset + 0x72380)
+#define GAMMA_SPD_CNTRL		(dev_priv->info.display_mmio_offset + 0x72480)
+#define GAMMA_SP1_CNTRL(pipe)	_PIPE(pipe, GAMMA_SPA_CNTRL, GAMMA_SPC_CNTRL)
+#define GAMMA_SP2_CNTRL(pipe)	_PIPE(pipe, GAMMA_SPB_CNTRL, GAMMA_SPD_CNTRL)
+
+
 #define GAMMA_ENABLE_SPR			(1<<30)
 #define GAMMA_SP_MAX_COUNT			6
 #define NO_SPRITE_REG				4
+#define MAX_PIPES_VLV				2
 #define PIPEA_CGM_CTRL      0x67A00
 #define PIPEB_CGM_CTRL      0x69A00
 #define PIPEC_CGM_CTRL      0x6BA00
@@ -187,9 +230,9 @@ struct clrmgr_status {
 	struct clrmgr_regd_prop *cp[CLRMGR_PROP_MAX];
 };
 /* Required for sysfs entry calls */
-extern u32 csc_softlut[CSC_MAX_COEFF_COUNT];
-extern u32 gamma_softlut[GAMMA_CORRECT_MAX_COUNT];
-extern u32 gcmax_softlut[GC_MAX_COUNT];
+extern u32 csc_softlut[MAX_PIPES_VLV][CSC_MAX_COEFF_COUNT];
+extern u32 gamma_softlut[MAX_PIPES_VLV][GAMMA_CORRECT_MAX_COUNT];
+extern u32 gcmax_softlut[MAX_PIPES_VLV][GC_MAX_COUNT];
 extern u32 gamma_sprite_softlut[GAMMA_SP_MAX_COUNT];
 
 /* Prototypes */
diff --git a/drivers/gpu/drm/i915/intel_hdmi.c b/drivers/gpu/drm/i915/intel_hdmi.c
index 472613e..1d3c808 100644
--- a/drivers/gpu/drm/i915/intel_hdmi.c
+++ b/drivers/gpu/drm/i915/intel_hdmi.c
@@ -1139,6 +1139,8 @@ void intel_hdmi_hot_plug(struct intel_encoder *intel_encoder)
 	struct drm_connector *connector = NULL;
 	struct edid *edid = NULL;
 	bool need_event = false;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	int pipe = 0;
 
 	connector = &intel_hdmi->attached_connector->base;
 
@@ -1155,6 +1157,12 @@ void intel_hdmi_hot_plug(struct intel_encoder *intel_encoder)
 	} else {
 		if (connector->status == connector_status_disconnected) {
 			DRM_DEBUG_DRIVER("Hdmi: Monitor disconnected\n");
+			if (intel_encoder->type == INTEL_OUTPUT_HDMI &&
+					to_intel_crtc(encoder->crtc)) {
+				pipe = to_intel_crtc(encoder->crtc)->pipe;
+				dev_priv->gamma_enabled[pipe] = false;
+				dev_priv->csc_enabled[pipe] = false;
+			}
 			need_event = true;
 		}
 	}
-- 
1.7.9.5

