From 2bb1904a7be328ca4215bba94cfaac85dec0dde3 Mon Sep 17 00:00:00 2001
From: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Date: Thu, 19 Feb 2015 11:13:42 +0100
Subject: [PATCH] Handle OTP burnt MAC address.

It is required to use MAC address comming from OTP
if it has been burnt during manufacturing.
Some platform and some AOBs has not been burnt.
In that case, it is required to use external mechanism.

Change-Id: Icb553a24f8196d44290fee6ea0edb65490f2a431
Signed-off-by: Jean Trivelly <jean.trivelly@intel.com>
Signed-off-by: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
---
 drivers/net/wireless/bcmdhd/dhd_linux.c         | 72 ++++++++++++++++---------
 drivers/net/wireless/bcmdhd/dhd_linux_platdev.c |  8 ++-
 2 files changed, 52 insertions(+), 28 deletions(-)

diff --git a/drivers/net/wireless/bcmdhd/dhd_linux.c b/drivers/net/wireless/bcmdhd/dhd_linux.c
index 2d735e7..af9b3d5 100644
--- a/drivers/net/wireless/bcmdhd/dhd_linux.c
+++ b/drivers/net/wireless/bcmdhd/dhd_linux.c
@@ -275,6 +275,14 @@ extern int dhd_write_macaddr(struct ether_addr *mac);
 static inline int dhd_write_macaddr(struct ether_addr *mac) { return 0; }
 #endif
 
+/*
+ * This default MAC address is defined into the NVM file.
+ * It is used to check if MAC address coming from FW
+ * is an OTP burnt one or the default one from NVM.
+ */
+#ifdef GET_CUSTOM_MAC_ENABLE
+struct ether_addr default_mac_addr = {.octet={0x00, 0x11, 0x22, 0x33, 0x44, 0x55}};
+#endif /* GET_CUSTOM_MAC_ENABLE */
 
 
 static int dhd_reboot_callback(struct notifier_block *this, unsigned long code, void *unused);
@@ -4489,9 +4497,6 @@ dhd_attach(osl_t *osh, struct dhd_bus *bus, uint bus_hdrlen)
 	dhd->pub.osh = osh;
 	dhd->adapter = adapter;
 
-#ifdef GET_CUSTOM_MAC_ENABLE
-	wifi_platform_get_mac_addr(dhd->adapter, dhd->pub.mac.octet);
-#endif /* GET_CUSTOM_MAC_ENABLE */
 #ifdef CUSTOM_FORCE_NODFS_FLAG
 	dhd->pub.dhd_cflags |= WLAN_PLAT_NODFS_FLAG;
 	dhd->pub.force_country_change = TRUE;
@@ -5277,34 +5282,49 @@ dhd_preinit_ioctls(dhd_pub_t *dhd)
 		dhd_os_set_ioctl_resp_timeout(IOCTL_RESP_TIMEOUT);
 		DHD_INFO(("%s : Set IOCTL response time.\n", __FUNCTION__));
 	}
-#ifdef GET_CUSTOM_MAC_ENABLE
-	ret = wifi_platform_get_mac_addr(dhd->info->adapter, ea_addr.octet);
-	if (!ret) {
-		memset(buf, 0, sizeof(buf));
-		bcm_mkiovar("cur_etheraddr", (void *)&ea_addr, ETHER_ADDR_LEN, buf, sizeof(buf));
-		ret = dhd_wl_ioctl_cmd(dhd, WLC_SET_VAR, buf, sizeof(buf), TRUE, 0);
-		if (ret < 0) {
-			DHD_ERROR(("%s: can't set MAC address , error=%d\n", __FUNCTION__, ret));
-			return BCME_NOTUP;
-		}
-		memcpy(dhd->mac.octet, ea_addr.octet, ETHER_ADDR_LEN);
-	} else {
-#endif /* GET_CUSTOM_MAC_ENABLE */
-		/* Get the default device MAC address directly from firmware */
-		memset(buf, 0, sizeof(buf));
-		bcm_mkiovar("cur_etheraddr", 0, 0, buf, sizeof(buf));
-		if ((ret = dhd_wl_ioctl_cmd(dhd, WLC_GET_VAR, buf, sizeof(buf),
-			FALSE, 0)) < 0) {
-			DHD_ERROR(("%s: can't get MAC address , error=%d\n", __FUNCTION__, ret));
-			return BCME_NOTUP;
-		}
-		/* Update public MAC address after reading from Firmware */
-		memcpy(dhd->mac.octet, buf, ETHER_ADDR_LEN);
+	/* Get the default device MAC address directly from firmware */
+	memset(buf, 0, sizeof(buf));
+	bcm_mkiovar("cur_etheraddr", 0, 0, buf, sizeof(buf));
+	if ((ret = dhd_wl_ioctl_cmd(dhd, WLC_GET_VAR, buf, sizeof(buf),
+				    FALSE, 0)) < 0) {
+		DHD_ERROR(("%s: can't get MAC address , error=%d\n", __FUNCTION__, ret));
+		ret = BCME_NOTUP;
+		goto done;
+	}
+	/* Update public MAC address after reading from Firmware */
+	memcpy(dhd->mac.octet, buf, ETHER_ADDR_LEN);
+
+	DHD_TRACE(("%s: Get MAC address from FW: "MACDBG"\n",
+		   __FUNCTION__, MAC2STRDBG(dhd->mac.octet)));
 
 #ifdef GET_CUSTOM_MAC_ENABLE
+	/*
+	 * Compare MAC@ get from FW and default NVM one.
+	 *  If they are identical, it means that chip has not been OTP burnt
+	 *  with a unique MAC@.
+	 *  In that case, it is required to use Custom MAC@ using
+	 *  Intel wlan provisioning mechanism.
+	 */
+	if (!memcmp(dhd->mac.octet, default_mac_addr.octet, ETHER_ADDR_LEN)) {
+		ret = wifi_platform_get_mac_addr(dhd->info->adapter, ea_addr.octet);
+		DHD_TRACE(("%s: Chip has not been OTP burnt.\n", __FUNCTION__));
+		if (!ret) {
+			memset(buf, 0, sizeof(buf));
+			bcm_mkiovar("cur_etheraddr", (void *)&ea_addr, ETHER_ADDR_LEN, buf, sizeof(buf));
+			ret = dhd_wl_ioctl_cmd(dhd, WLC_SET_VAR, buf, sizeof(buf), TRUE, 0);
+			if (ret < 0) {
+				DHD_ERROR(("%s: can't set MAC address , error=%d\n", __FUNCTION__, ret));
+				ret = BCME_NOTUP;
+				goto done;
+			}
+			memcpy(dhd->mac.octet, ea_addr.octet, ETHER_ADDR_LEN);
+		}
 	}
 #endif /* GET_CUSTOM_MAC_ENABLE */
 
+	DHD_TRACE(("%s: Final MAC address: "MACDBG"\n",
+		   __FUNCTION__, MAC2STRDBG(dhd->mac.octet)));
+
 	/* get a capabilities from firmware */
 	memset(dhd->fw_capabilities, 0, sizeof(dhd->fw_capabilities));
 	bcm_mkiovar("cap", 0, 0, dhd->fw_capabilities, sizeof(dhd->fw_capabilities));
diff --git a/drivers/net/wireless/bcmdhd/dhd_linux_platdev.c b/drivers/net/wireless/bcmdhd/dhd_linux_platdev.c
index cc46a50..471c8b6 100644
--- a/drivers/net/wireless/bcmdhd/dhd_linux_platdev.c
+++ b/drivers/net/wireless/bcmdhd/dhd_linux_platdev.c
@@ -196,10 +196,14 @@ int wifi_platform_get_mac_addr(wifi_adapter_info_t *adapter, unsigned char *buf)
 	struct wifi_platform_data *plat_data;
 
 	DHD_ERROR(("%s\n", __FUNCTION__));
-	if (!buf || !adapter || !adapter->wifi_plat_data)
+	if (!buf)
 		return -EINVAL;
+	if (!adapter)
+		return wifi_get_external_mac_addr(buf);
 	plat_data = adapter->wifi_plat_data;
-	if (plat_data->get_mac_addr) {
+	if (!plat_data)
+		return wifi_get_external_mac_addr(buf);
+	else if (plat_data->get_mac_addr) {
 		return plat_data->get_mac_addr(buf);
 	}
 	return -EOPNOTSUPP;
-- 
1.9.1

