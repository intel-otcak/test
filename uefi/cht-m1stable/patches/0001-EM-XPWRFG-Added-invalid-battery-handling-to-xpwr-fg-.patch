From efea70614d2fc57821b072b455c4fa127f9a3001 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Mon, 29 Dec 2014 16:08:13 +0530
Subject: [PATCH 1/1] EM/XPWRFG: Added invalid battery handling to xpwr fg
 driver.

BIOS will not populate the OEM0 table if it detects an invalid battery
during bootup. The pmic FG driver should report health and battid as UNKNOWN
for an invalid battery so that charging framework will not allow charging.

Tracked-On: https://jira01.devtools.intel.com/browse/AKP-815
Change-Id: Ie0bae11574715bd2a037c3b82fe6eccd146cf295
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
---
 drivers/mfd/intel_soc_pmic_dc.c  | 15 ++++++++++-----
 drivers/power/dc_xpwr_battery.c  |  5 +++++
 include/linux/power/battery_id.h |  1 +
 3 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/drivers/mfd/intel_soc_pmic_dc.c b/drivers/mfd/intel_soc_pmic_dc.c
index 72e6db0..0781fe9 100644
--- a/drivers/mfd/intel_soc_pmic_dc.c
+++ b/drivers/mfd/intel_soc_pmic_dc.c
@@ -28,6 +28,7 @@
 
 #include <asm/intel_em_config.h>
 #include <linux/extcon/extcon-dc-pwrsrc.h>
+#include <linux/power/battery_id.h>
 
 #include "intel_soc_pmic_core.h"
 
@@ -332,8 +333,10 @@ static void *platform_get_batt_charge_profile(void)
 	ret = get_batt_prop(&ps_batt_chrg_prof);
 	pse_mod_prof = (struct ps_pse_mod_prof *)
 					ps_batt_chrg_prof.batt_prof;
-	if (ret < 0 && pse_mod_prof)
-		strcpy(pse_mod_prof->batt_id, "UNKNOWNB");
+	if ((ret < 0 || ps_batt_chrg_prof.chrg_prof_type == CHRG_PROF_NONE)
+		&& pse_mod_prof)
+			snprintf(pse_mod_prof->batt_id, (BATTID_LEN+1),
+				"%s", BATTID_UNKNOWN);
 
 	return &ps_batt_chrg_prof;
 }
@@ -422,11 +425,13 @@ static void dc_xpwr_fg_pdata(void)
 	int i;
 	int scaled_capacity;
 
-	if (pse_mod_prof)
+	if (ps_batt_chrg_prof.chrg_prof_type == CHRG_PROF_NONE
+		|| (!pse_mod_prof))
+		snprintf(pdata.battid, (BATTID_LEN+1),
+			"%s", BATTID_UNKNOWN);
+	else
 		memcpy(pdata.battid, pse_mod_prof->batt_id,
 				strlen(pse_mod_prof->batt_id));
-	else
-		memcpy(pdata.battid, "INTN0001", strlen("INTN0001"));
 
 	platform_set_battery_data(&pdata, &ps_batt_chrg_prof);
 	pdata.max_temp = 55;
diff --git a/drivers/power/dc_xpwr_battery.c b/drivers/power/dc_xpwr_battery.c
index d26792c..48408e2 100644
--- a/drivers/power/dc_xpwr_battery.c
+++ b/drivers/power/dc_xpwr_battery.c
@@ -44,6 +44,7 @@
 #include <linux/iio/consumer.h>
 #include <linux/mfd/intel_soc_pmic.h>
 #include <linux/power/dc_xpwr_battery.h>
+#include <linux/power/battery_id.h>
 
 #define DC_PS_STAT_REG			0x00
 #define PS_STAT_VBUS_TRIGGER		(1 << 0)
@@ -500,6 +501,10 @@ static int pmic_fg_battery_health(struct pmic_fg_info *info)
 	int temp, vocv;
 	int ret, health = POWER_SUPPLY_HEALTH_UNKNOWN;
 
+	/* Health cannot be predicted for an unknown (invalid) battery. */
+	if (!strncmp(info->pdata->battid, BATTID_UNKNOWN, BATTID_STR_LEN))
+		goto health_read_fail;
+
 	ret = pmic_fg_get_btemp(info, &temp);
 	if (ret < 0)
 		goto health_read_fail;
diff --git a/include/linux/power/battery_id.h b/include/linux/power/battery_id.h
index d604acd..50f9993 100644
--- a/include/linux/power/battery_id.h
+++ b/include/linux/power/battery_id.h
@@ -39,6 +39,7 @@ struct ps_temp_chg_table {
 
 #define BATTID_STR_LEN		8
 #define BATT_TEMP_NR_RNG	6
+#define BATTID_UNKNOWN		"UNKNOWNB"
 /* Charging Profile */
 struct ps_pse_mod_prof {
 	/* battery id */
-- 
1.9.1

