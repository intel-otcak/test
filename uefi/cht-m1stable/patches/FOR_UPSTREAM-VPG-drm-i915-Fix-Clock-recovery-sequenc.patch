From 2a3aa8e7c4e79ee2d837e9e7dfa5dfec5d30fc95 Mon Sep 17 00:00:00 2001
From: "Thulasimani,Sivakumar" <sivakumar.thulasimani@intel.com>
Date: Sat, 10 Oct 2015 00:56:17 +0530
Subject: [PATCH 16/28] FOR_UPSTREAM [VPG]: drm/i915: Fix Clock recovery
 sequence

First step in training link for DP panels is clock recovery
where we program the lane count, link rate, TP1 along with
various vswing and preemp values and check if the panel
indicates clock recovery succeeded.

One of the steps in this process is to stop further processing
if we already reached max vswing on all lanes. This patch
performs this process by adding return variable to indicate CR
failure and exit CR immediately after CR failed at max vswing.

Change-Id: I0a6880bee1063a6746b111153e56ec402b679679
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-9749
Signed-off-by: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
Reviewed-on: https://android.intel.com:443/439689
---
 drivers/gpu/drm/i915/intel_dp.c  | 30 +++++++++++++-----------------
 drivers/gpu/drm/i915/intel_drv.h |  2 +-
 2 files changed, 14 insertions(+), 18 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index 50a676f..8e90d98 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -3863,16 +3863,17 @@ static void intel_dp_set_idle_link_train(struct intel_dp *intel_dp)
 }
 
 /* Enable corresponding port and start training pattern 1 */
-void
+bool
 intel_dp_start_link_train(struct intel_dp *intel_dp)
 {
 	struct drm_encoder *encoder = &dp_to_dig_port(intel_dp)->base.base;
 	struct drm_device *dev = encoder->dev;
 	int i;
 	uint8_t voltage;
-	int voltage_tries, loop_tries;
+	int voltage_tries;
 	uint32_t DP = intel_dp->DP;
 	uint8_t link_config[2];
+	bool ret = false;
 
 	intel_dp->do_fast_link_train = false;
 
@@ -3907,12 +3908,11 @@ intel_dp_start_link_train(struct intel_dp *intel_dp)
 				       DP_TRAINING_PATTERN_1 |
 				       DP_LINK_SCRAMBLING_DISABLE)) {
 		DRM_ERROR("failed to enable link training\n");
-		return;
+		return ret;
 	}
 
 	voltage = 0xff;
-	voltage_tries = 0;
-	loop_tries = 0;
+	voltage_tries = 1;
 	for (;;) {
 		uint8_t link_status[DP_LINK_STATUS_SIZE];
 
@@ -3923,7 +3923,8 @@ intel_dp_start_link_train(struct intel_dp *intel_dp)
 		}
 
 		if (drm_dp_clock_recovery_ok(link_status, intel_dp->lane_count)) {
-			DRM_DEBUG_KMS("clock recovery OK\n");
+			DRM_DEBUG_KMS("clock recovery Done\n");
+			ret = true;
 			break;
 		}
 
@@ -3931,17 +3932,10 @@ intel_dp_start_link_train(struct intel_dp *intel_dp)
 		for (i = 0; i < intel_dp->lane_count; i++)
 			if ((intel_dp->train_set[i] & DP_TRAIN_MAX_SWING_REACHED) == 0)
 				break;
+
 		if (i == intel_dp->lane_count) {
-			++loop_tries;
-			if (loop_tries == 5) {
-				DRM_ERROR("too many full retries, give up\n");
-				break;
-			}
-			intel_dp_reset_link_train(intel_dp, &DP,
-						  DP_TRAINING_PATTERN_1 |
-						  DP_LINK_SCRAMBLING_DISABLE);
-			voltage_tries = 0;
-			continue;
+			DRM_ERROR("Max voltage reached, exiting\n");
+			break;
 		}
 
 		/* Check to see if we've tried the same voltage 5 times */
@@ -3952,7 +3946,7 @@ intel_dp_start_link_train(struct intel_dp *intel_dp)
 				break;
 			}
 		} else
-			voltage_tries = 0;
+			voltage_tries = 1;
 		voltage = intel_dp->train_set[0] & DP_TRAIN_VOLTAGE_SWING_MASK;
 
 		/* Update training set as requested by target */
@@ -3963,6 +3957,8 @@ intel_dp_start_link_train(struct intel_dp *intel_dp)
 	}
 
 	intel_dp->DP = DP;
+
+	return ret;
 }
 
 void
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 004a3e1..d061a37 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -997,7 +997,7 @@ void chv_set_lpe_audio_reg_pipe(struct drm_device *dev,
 void intel_dp_init(struct drm_device *dev, int output_reg, enum port port);
 bool intel_dp_init_connector(struct intel_digital_port *intel_dig_port,
 			     struct intel_connector *intel_connector);
-void intel_dp_start_link_train(struct intel_dp *intel_dp);
+bool intel_dp_start_link_train(struct intel_dp *intel_dp);
 void intel_dp_complete_link_train(struct intel_dp *intel_dp);
 void intel_dp_stop_link_train(struct intel_dp *intel_dp);
 bool intel_dp_fast_link_train(struct intel_dp *intel_dp);
-- 
1.9.1

