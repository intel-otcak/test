From 594578ad1319be3b898cce862767cd6f63483a49 Mon Sep 17 00:00:00 2001
From: Mahesh Kumar P <mahesh.kumar.p@intel.com>
Date: Fri, 27 Feb 2015 16:10:21 +0530
Subject: [PATCH] pwm: Fix the suspend callback for PWM driver

PWM1 is used by backlight driver on CHT. Currently when the display-backlight
driver turns Off, the PWM also goes into D3. In the suspend path , the
driver reads the control register to make sure PWM is disabled. But as the PWM IP
is already in D3 at display OFF, the register read returns junk causing an error
and suspend abort. The PWM CTRL registers return 0xffffffff post PWM D3 transition
because of which the driver thinks the PWM is ON and aborts system suspend.

The patch also seperates the suspend-resume and runtime calls as we dont need to
check this during runtime calls.

Change-Id: I1969223facfa65a5ce103be4b5f57166016d23af
Tracked-On: https://jira01.devtools.intel.com/browse/GMIN-3671
Signed-off-by: Kumar P, Mahesh <mahesh.kumar.p@intel.com>
---
 drivers/misc/pwm/pwm_byt_core.c | 55 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 54 insertions(+), 1 deletion(-)

diff --git a/drivers/misc/pwm/pwm_byt_core.c b/drivers/misc/pwm/pwm_byt_core.c
index fc6d153..509e504 100644
--- a/drivers/misc/pwm/pwm_byt_core.c
+++ b/drivers/misc/pwm/pwm_byt_core.c
@@ -23,6 +23,7 @@
 #include <linux/pwm.h>
 #include "pwm_byt_core.h"
 #include <linux/dmi.h>
+#include <linux/acpi.h>
 
 /* PWM registers and bits definitions */
 
@@ -499,12 +500,63 @@ void pwm_byt_remove(struct device *dev)
 }
 EXPORT_SYMBOL(pwm_byt_remove);
 
+static int pwm_byt_runtime_suspend(struct device *dev)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+	uint32_t val;
+	int r = 0;
+
+	if (!mutex_trylock(&byt_pwm->lock)) {
+		dev_err(dev, "PWM suspend called! can't get lock\n");
+		return -EAGAIN;
+	}
+
+	val = ioread32(PWMCR(byt_pwm));
+	r = (val & PWMCR_EN) ? -EAGAIN : 0;
+
+	mutex_unlock(&byt_pwm->lock);
+	return r;
+}
 
+static int pwm_byt_runtime_resume(struct device *dev)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+
+	if (!mutex_trylock(&byt_pwm->lock)) {
+		dev_err(dev, "Can't get lock\n");
+		return -EAGAIN;
+	}
+
+	iowrite32(PWMRESET_EN, PWMRESET(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	return 0;
+}
 static int pwm_byt_suspend(struct device *dev)
 {
 	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
 	uint32_t val;
 	int r = 0;
+	struct acpi_device *adev;
+	acpi_handle handle;
+
+	handle = ACPI_HANDLE(dev);
+	if (!handle) {
+		pr_warn("Failed to acpi get handle in %s\n", __func__);
+		return r;
+	}
+
+	r = acpi_bus_get_device(handle, &adev);
+	if (r) {
+		pr_warn("Failed to acpi device in %s\n", __func__);
+		return r;
+	}
+
+	if (!adev->power.state) {
+		pr_info("Device %s is already in non D0 state\n",
+				dev_name(dev));
+		return r;
+	}
 
 	if (!mutex_trylock(&byt_pwm->lock)) {
 		dev_err(dev, "PWM suspend called! can't get lock\n");
@@ -536,6 +588,7 @@ static int pwm_byt_resume(struct device *dev)
 const struct dev_pm_ops pwm_byt_pm = {
 	.suspend_late = pwm_byt_suspend,
 	.resume_early = pwm_byt_resume,
-	SET_RUNTIME_PM_OPS(pwm_byt_suspend, pwm_byt_resume, NULL)
+	SET_RUNTIME_PM_OPS(pwm_byt_runtime_suspend,
+					pwm_byt_runtime_resume, NULL)
 };
 EXPORT_SYMBOL(pwm_byt_pm);
-- 
1.9.1

