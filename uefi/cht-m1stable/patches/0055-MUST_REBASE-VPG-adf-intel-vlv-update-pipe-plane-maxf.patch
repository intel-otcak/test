From e6eda922645fdecc262745941e00fcac696f6723 Mon Sep 17 00:00:00 2001
Message-Id: <e6eda922645fdecc262745941e00fcac696f6723.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Arun R Murthy <arun.r.murthy@intel.com>
Date: Wed, 28 Jan 2015 22:07:15 +0530
Subject: [PATCH 55/95] MUST_REBASE [VPG]: adf/intel/vlv: update
 pipe/plane/maxfifo status

Use global flag in dc_config struct to save pipe, plane and
maxfifo status. Fix the call flow from encoder to pm object.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5594
Change-Id: I620e6582dcfa766fc383ca4a1db24b08a772f91e
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
Signed-off-by: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
---
 .../video/adf/intel/core/common/dp/gen_dp_pipe.c   |   35 +++----
 .../video/adf/intel/core/common/dsi/gen_dsi_pipe.c |   49 +++-------
 .../adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c |   41 +++-----
 drivers/video/adf/intel/core/vlv/vlv_dc_config.c   |   23 +++++
 drivers/video/adf/intel/core/vlv/vlv_pipe.c        |   11 +++
 drivers/video/adf/intel/core/vlv/vlv_pm.c          |  100 +++++++++++++++++++-
 drivers/video/adf/intel/core/vlv/vlv_pri_plane.c   |   23 +++--
 drivers/video/adf/intel/core/vlv/vlv_sp_plane.c    |   36 ++++---
 .../video/adf/intel/include/core/intel_dc_config.h |    8 --
 .../adf/intel/include/core/intel_platform_config.h |    4 +-
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |   18 ++++
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |    9 ++
 drivers/video/adf/intel/include/core/vlv/vlv_pm.h  |    6 ++
 13 files changed, 248 insertions(+), 115 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
index 64dec1f..6e09e58 100644
--- a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
+++ b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
@@ -18,6 +18,10 @@
 #include <core/common/dp/gen_dp_pipe.h>
 #include <core/intel_platform_config.h>
 
+#include <core/vlv/vlv_dc_config.h>
+#include <core/vlv/vlv_dc_regs.h>
+#include <core/vlv/vlv_pm.h>
+
 #define  DATA_LINK_M_N_MASK     (0xffffff)
 #define  DATA_LINK_N_MAX        (0x800000)
 
@@ -388,18 +392,11 @@ static void dp_pipe_on_post(struct intel_pipe *pipe)
 {
 	struct dp_pipe *dp_pipe = to_dp_pipe(pipe);
 	struct intel_pipeline *pipeline = dp_pipe->pipeline;
-	struct drm_mode_modeinfo tmp;
-	int num_planes = 0;
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
-	num_planes = vlv_num_planes_enabled(pipeline);
+	vlv_pm_on_post(intel_config);
 
-	/* Enable maxfifo if required */
-	if (!pipe->status.maxfifo_enabled && (num_planes == 1)) {
-		vlv_update_maxfifo_status(pipeline, true);
-		pipe->status.maxfifo_enabled = true;
-	}
-	dp_pipe_get_current_mode(pipe, &tmp);
-	vlv_evade_vblank(pipeline, &tmp, &pipe->status.wait_vblank);
 }
 
 static void dp_pipe_pre_validate(struct intel_pipe *pipe,
@@ -407,26 +404,20 @@ static void dp_pipe_pre_validate(struct intel_pipe *pipe,
 {
 	struct dp_pipe *dp_pipe = to_dp_pipe(pipe);
 	struct intel_pipeline *pipeline = dp_pipe->pipeline;
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
-	if (custom->n_configs > 1 && pipe->status.maxfifo_enabled) {
-		vlv_update_maxfifo_status(pipeline, false);
-		pipe->status.maxfifo_enabled = false;
-		pipe->status.wait_vblank = true;
-		pipe->status.vsync_counter =
-				pipe->ops->get_vsync_counter(pipe, 0);
-	}
+	vlv_pm_pre_validate(intel_config, custom, pipeline, pipe);
 }
 
 static void dp_pipe_pre_post(struct intel_pipe *pipe)
 {
 	struct dp_pipe *dp_pipe = to_dp_pipe(pipe);
 	struct intel_pipeline *pipeline = dp_pipe->pipeline;
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
-	if (pipe->status.wait_vblank && pipe->status.vsync_counter ==
-			pipe->ops->get_vsync_counter(pipe, 0)) {
-		vlv_wait_for_vblank(pipeline);
-		pipe->status.wait_vblank = false;
-	}
+	vlv_pm_pre_post(intel_config, pipeline, pipe);
 }
 
 static u32 dp_pipe_get_supported_events(struct intel_pipe *pipe)
diff --git a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
index 8934978..7eb9f4f 100644
--- a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
+++ b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
@@ -24,6 +24,8 @@
 #include <core/common/intel_gen_backlight.h>
 /* FIXME: remove this once gpio calls are abstracted */
 #include <core/vlv/vlv_dc_config.h>
+#include <core/vlv/vlv_dc_regs.h>
+#include <core/vlv/vlv_pm.h>
 #include "dsi_vbt.h"
 #include "intel_dsi.h"
 #include "intel_dsi_cmd.h"
@@ -419,18 +421,13 @@ static void dsi_on_post(struct intel_pipe *pipe)
 {
 	struct dsi_pipe *dsi_pipe = to_dsi_pipe(pipe);
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	int num_planes = 0;
-
-	num_planes = vlv_num_planes_enabled(pipeline);
-
-	/* Enable maxfifo if required */
-	if (!pipe->status.maxfifo_enabled && (num_planes == 1)) {
-		vlv_update_maxfifo_status(pipeline, true);
-		pipe->status.maxfifo_enabled = true;
-	}
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
 	if (dsi_pipe->ops.on_post)
 		dsi_pipe->ops.on_post(dsi_pipe);
+
+	vlv_pm_on_post(intel_config);
 }
 
 static void dsi_pre_validate(struct intel_pipe *pipe,
@@ -438,42 +435,20 @@ static void dsi_pre_validate(struct intel_pipe *pipe,
 {
 	struct dsi_pipe *dsi_pipe = to_dsi_pipe(pipe);
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	struct intel_adf_config *custom_config;
-	u8 i = 0, planes_enabled = 0;
-
-	for (i = 0; i < custom->n_configs; i++) {
-		custom_config = &custom->configs[i];
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
-		/* Get the number of planes enabled */
-		if (custom_config->type == INTEL_ADF_CONFIG_PLANE)
-			planes_enabled++;
-	}
-
-	/* If we are moving to multiple plane then disable maxfifo */
-	if (planes_enabled > 1 && pipe->status.maxfifo_enabled) {
-		vlv_update_maxfifo_status(pipeline, false);
-		/* FIXME: move these variables out of intel_pipe */
-		pipe->status.maxfifo_enabled = false;
-		pipe->status.wait_vblank = true;
-		pipe->status.vsync_counter =
-				pipe->ops->get_vsync_counter(pipe, 0);
-	}
+	vlv_pm_pre_validate(intel_config, custom, pipeline, pipe);
 }
 
 static void dsi_pre_post(struct intel_pipe *pipe)
 {
 	struct dsi_pipe *dsi_pipe = to_dsi_pipe(pipe);
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	struct drm_mode_modeinfo mode;
-
-	if (pipe->status.wait_vblank && pipe->status.vsync_counter ==
-			pipe->ops->get_vsync_counter(pipe, 0)) {
-		vlv_wait_for_vblank(pipeline);
-		pipe->status.wait_vblank = false;
-	}
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
-	pipe->ops->get_current_mode(pipe, &mode);
-	vlv_evade_vblank(pipeline, &mode, &pipe->status.wait_vblank);
+	vlv_pm_pre_post(intel_config, pipeline, pipe);
 }
 
 static u32 dsi_get_supported_events(struct intel_pipe *pipe)
diff --git a/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
index 4739271..55c93219 100644
--- a/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
+++ b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
@@ -22,6 +22,7 @@
 #include <drm/drm_modes.h>
 #include <core/vlv/vlv_dc_config.h>
 #include <core/vlv/chv_dc_regs.h>
+#include <core/vlv/vlv_pm.h>
 #include <core/common/hdmi/gen_hdmi_pipe.h>
 
 /* Encoder options */
@@ -177,50 +178,38 @@ u32 hdmi_get_vsync_counter(struct intel_pipe *pipe, u32 interval)
 void hdmi_pre_validate(struct intel_pipe *pipe,
 			struct intel_adf_post_custom_data *custom)
 {
+	struct hdmi_pipe *hdmi_pipe = hdmi_pipe_from_intel_pipe(pipe);
+	struct intel_pipeline *pipeline = hdmi_pipe->base.pipeline;
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
 	pr_debug("ADF: HDMI: %s\n", __func__);
-	if (custom->n_configs > 1 && pipe->status.maxfifo_enabled) {
-		vlv_update_maxfifo_status(pipe->pipeline, false);
-
-		/* FIXME: move these variables out of intel_pipe */
-		pipe->status.maxfifo_enabled = false;
-		pipe->status.wait_vblank = true;
-		pipe->status.vsync_counter =
-			pipe->ops->get_vsync_counter(pipe, 0);
-	}
+	vlv_pm_pre_validate(intel_config, custom, pipeline, pipe);
 }
 
 void hdmi_pre_post(struct intel_pipe *pipe)
 {
+	struct hdmi_pipe *hdmi_pipe = hdmi_pipe_from_intel_pipe(pipe);
+	struct intel_pipeline *pipeline = hdmi_pipe->base.pipeline;
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
 	pr_debug("ADF: HDMI: %s\n", __func__);
-	if (pipe->status.wait_vblank && pipe->status.vsync_counter ==
-			pipe->ops->get_vsync_counter(pipe, 0)) {
-		vlv_wait_for_vblank(pipe->pipeline);
-		pipe->status.wait_vblank = false;
-	}
+	vlv_pm_pre_post(intel_config, pipeline, pipe);
 }
 
 void hdmi_on_post(struct intel_pipe *pipe)
 {
 	struct hdmi_pipe *hdmi_pipe = hdmi_pipe_from_intel_pipe(pipe);
 	struct intel_pipeline *pipeline = hdmi_pipe->base.pipeline;
-	struct drm_mode_modeinfo mode;
-	int num_planes = vlv_num_planes_enabled(pipeline);
-
-	pr_debug("ADF: HDMI: %s planes=%d\n", __func__, num_planes);
-
-	/* Enable maxfifo if required */
-	if (!pipe->status.maxfifo_enabled && (num_planes == 1)) {
-		vlv_update_maxfifo_status(pipeline, true);
-		pipe->status.maxfifo_enabled = true;
-	}
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
+	pr_debug("ADF: HDMI: %s\n", __func__);
 	if (hdmi_pipe->ops.on_post)
 		hdmi_pipe->ops.on_post(hdmi_pipe);
 
-	pipe->ops->get_current_mode(pipe, &mode);
-	vlv_evade_vblank(pipeline, &mode, &pipe->status.wait_vblank);
+	vlv_pm_on_post(intel_config);
 }
 
 /* Core modeset */
diff --git a/drivers/video/adf/intel/core/vlv/vlv_dc_config.c b/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
index be09aef..60e5d1a 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
@@ -131,6 +131,28 @@ static const struct intel_dc_attachment vlv_allowed_attachments[] = {
 	}
 };
 
+void vlv_update_pipe_status(struct intel_dc_config *config,
+		u8 pipe, bool enabled)
+{
+	struct vlv_dc_config *vlv_config = to_vlv_dc_config(config);
+
+	if (enabled)
+		vlv_config->status.pipe_plane_status |= (1 << (31 - pipe));
+	else
+		vlv_config->status.pipe_plane_status &= ~(1 << (31 - pipe));
+}
+
+void vlv_update_plane_status(struct intel_dc_config *config,
+		u8 plane, bool enabled)
+{
+	struct vlv_dc_config *vlv_config = to_vlv_dc_config(config);
+
+	if (enabled)
+		vlv_config->status.pipe_plane_status |= (1 << plane);
+	else
+		vlv_config->status.pipe_plane_status &= ~(1 << plane);
+}
+
 void vlv_dc_config_destroy(struct intel_dc_config *config)
 {
 	struct vlv_dc_config *vlv_config = to_vlv_dc_config(config);
@@ -311,6 +333,7 @@ static int vlv_initialize_disp(struct vlv_dc_config *vlv_config,
 
 	disp->type = type;
 	disp->disp_no = disp_no;
+	disp->config = vlv_config;
 
 	/* Initialising each pipeline stepping id */
 	disp->dc_stepping = stepping;
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipe.c b/drivers/video/adf/intel/core/vlv/vlv_pipe.c
index 4043d44..f395889 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipe.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipe.c
@@ -221,12 +221,17 @@ out:
 u32 vlv_pipe_enable(struct vlv_pipe *pipe,
 		struct drm_mode_modeinfo *mode)
 {
+	struct vlv_pipeline *vlv_pipeline = container_of(pipe,
+			struct vlv_pipeline, pipe);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
+
 	u32 val = 0;
 	u32 err = 0;
 
 	val = REG_READ(pipe->offset);
 	val |= PIPECONF_ENABLE;
 	REG_WRITE(pipe->offset, val);
+	vlv_update_pipe_status(intel_config, pipe->pipe_id, true);
 
 	/* temp to avoid unused variable error */
 	pr_info("ADF: %s:%d\n", __func__, mode->vdisplay);
@@ -237,6 +242,10 @@ u32 vlv_pipe_enable(struct vlv_pipe *pipe,
 
 u32 vlv_pipe_disable(struct vlv_pipe *pipe)
 {
+	struct vlv_pipeline *vlv_pipeline = container_of(pipe,
+			struct vlv_pipeline, pipe);
+	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
+
 	u32 val = 0;
 	u32 err = 0;
 
@@ -251,6 +260,8 @@ u32 vlv_pipe_disable(struct vlv_pipe *pipe)
 					PIPECONF_DITHERING);
 	REG_WRITE(pipe->offset, val);
 
+	vlv_update_pipe_status(intel_config, pipe->pipe_id, false);
+
 	/* Wait for the Pipe State to go off */
 	if (wait_for(!(REG_READ(pipe->offset) & I965_PIPECONF_ACTIVE), 100)) {
 		pr_err("ADF: %s: pipe_off wait timed out\n", __func__);
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pm.c b/drivers/video/adf/intel/core/vlv/vlv_pm.c
index da15c0e..c9f0dfa 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pm.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pm.c
@@ -17,12 +17,108 @@
 #include <core/vlv/vlv_dc_config.h>
 #include <core/vlv/vlv_pm.h>
 
+void vlv_pm_on_post(struct intel_dc_config *intel_config)
+{
+	struct vlv_dc_config *config = to_vlv_dc_config(intel_config);
+	u32 pipe_plane_stat = config->status.pipe_plane_status;
+	u32 plane_stat = pipe_plane_stat & 0x01FF;
+	u32 val = 0;
+
+	/* Enable maxfifo if required */
+	if (!config->status.maxfifo_enabled &&
+			((plane_stat == 1) ||
+			(single_plane_enabled(plane_stat)))) {
+		if  (intel_config->id == gen_cherryview) {
+			/*
+			 * In chv pipe-c should not be enabled for
+			 * maxfifo to be enabled
+			 */
+			if (pipe_plane_stat & (1 << (31 - PIPE_C)))
+				return;
+		}
+		REG_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
+		if  (intel_config->id == gen_cherryview) {
+			val = vlv_punit_read(CHV_DPASSC);
+			vlv_punit_write(CHV_DPASSC,
+					(val | CHV_PW_MAXFIFO_MASK));
+		}
+		config->status.maxfifo_enabled = true;
+	}
+}
+
+void vlv_pm_pre_validate(struct intel_dc_config *intel_config,
+		struct intel_adf_post_custom_data *custom,
+		struct intel_pipeline *intel_pipeline, struct intel_pipe *pipe)
+{
+	struct vlv_dc_config *config = to_vlv_dc_config(intel_config);
+	struct vlv_pipeline *pipeline = to_vlv_pipeline(intel_pipeline);
+	struct intel_adf_config *custom_config;
+	u32 pipe_plane_stat = config->status.pipe_plane_status;
+	u32 pipe_stat = pipe_plane_stat & 0xF0000000;
+	u8 i = 0, planes_enabled = 0;
+	u32 val = 0;
+
+	for (i = 0; i < custom->n_configs; i++) {
+		custom_config = &custom->configs[i];
+
+		/* Get the number of planes enabled */
+		if (custom_config->type == INTEL_ADF_CONFIG_PLANE)
+			planes_enabled++;
+	}
+
+	/* If we are moving to multiple plane then disable maxfifo */
+	if (((planes_enabled > 1) || !(single_pipe_enabled(pipe_stat))) &&
+			config->status.maxfifo_enabled) {
+		REG_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+		if  (intel_config->id == gen_cherryview) {
+			val = vlv_punit_read(CHV_DPASSC);
+			vlv_punit_write(CHV_DPASSC,
+					(val & ~CHV_PW_MAXFIFO_MASK));
+		}
+		/* FIXME: move these variables out of intel_pipe */
+		config->status.maxfifo_enabled = false;
+		pipeline->status.wait_vblank = true;
+		pipeline->status.vsync_counter =
+				pipe->ops->get_vsync_counter(pipe, 0);
+	}
+}
+
+void vlv_pm_pre_post(struct intel_dc_config *intel_config,
+		struct intel_pipeline *intel_pipeline, struct intel_pipe *pipe)
+{
+	struct vlv_pipeline *pipeline = to_vlv_pipeline(intel_pipeline);
+	struct drm_mode_modeinfo mode;
+
+	if (pipeline->status.wait_vblank && pipeline->status.vsync_counter ==
+			pipe->ops->get_vsync_counter(pipe, 0)) {
+		vlv_wait_for_vblank(intel_pipeline);
+		pipeline->status.wait_vblank = false;
+	}
+
+	pipe->ops->get_current_mode(pipe, &mode);
+	vlv_evade_vblank(intel_pipeline, &mode,
+				&pipeline->status.wait_vblank);
+}
+
 bool vlv_pm_update_maxfifo_status(struct vlv_pm *pm, bool enable)
 {
-	if (enable)
+#ifdef CONFIG_ADF_INTEL_CHV
+	u32 val = 0;
+#endif
+
+	if (enable) {
 		REG_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
-	else
+#ifdef CONFIG_ADF_INTEL_CHV
+		val = vlv_punit_read(CHV_DPASSC);
+		vlv_punit_write(CHV_DPASSC, (val | CHV_PW_MAXFIFO_MASK));
+#endif
+	} else {
 		REG_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+#ifdef CONFIG_ADF_INTEL_CHV
+		val = vlv_punit_read(CHV_DPASSC);
+		vlv_punit_write(CHV_DPASSC, (val & ~CHV_PW_MAXFIFO_MASK));
+#endif
+	}
 
 	return true;
 }
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
index 35ba8c8..ed18933 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
@@ -221,8 +221,9 @@ static int vlv_pri_calculate(struct intel_plane *plane,
 		struct intel_plane_config *config)
 {
 	struct vlv_pri_plane *pri_plane = to_vlv_pri_plane(plane);
-	struct vlv_pipeline *disp = to_vlv_pipeline_pri_plane(pri_plane);
-	struct vlv_pm *pm = &disp->pm;
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_pri_plane(pri_plane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
+	struct vlv_pm *pm = &pipeline->pm;
 	struct pri_plane_regs_value *regs = &pri_plane->ctx.regs;
 	struct intel_pipe *intel_pipe = config->pipe;
 	struct drm_mode_modeinfo mode;
@@ -290,11 +291,11 @@ static int vlv_pri_calculate(struct intel_plane *plane,
 		regs->dspcntr &= ~DISPPLANE_TILED;
 
 	/* when in maxfifo display control register cannot be modified */
-	if (intel_pipe->status.maxfifo_enabled && regs->dspcntr != dspcntr) {
+	if (vlv_config->status.maxfifo_enabled && regs->dspcntr != dspcntr) {
 		REG_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
-		intel_pipe->status.maxfifo_enabled = false;
-		intel_pipe->status.wait_vblank = true;
-		intel_pipe->status.vsync_counter =
+		vlv_config->status.maxfifo_enabled = false;
+		pipeline->status.wait_vblank = true;
+		pipeline->status.vsync_counter =
 			intel_pipe->ops->get_vsync_counter(intel_pipe, 0);
 	}
 
@@ -340,6 +341,8 @@ static void vlv_pri_flip(struct intel_plane *plane,
 {
 	struct vlv_pri_plane *pri_plane = to_vlv_pri_plane(plane);
 	struct pri_plane_regs_value *regs = &pri_plane->ctx.regs;
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_pri_plane(pri_plane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
 
 	REG_WRITE(pri_plane->stride_offset, regs->stride);
 	REG_WRITE(pri_plane->tiled_offset, regs->tileoff);
@@ -349,6 +352,7 @@ static void vlv_pri_flip(struct intel_plane *plane,
 	I915_MODIFY_DISPBASE(pri_plane->surf_offset, regs->surfaddr);
 	REG_POSTING_READ(pri_plane->surf_offset);
 	pri_plane->enabled = true;
+	vlv_update_plane_status(&vlv_config->base, plane->base.idx, true);
 
 	return;
 }
@@ -390,6 +394,8 @@ int vlv_pri_update_params(struct vlv_pri_plane *plane,
 static int vlv_pri_enable(struct intel_plane *intel_plane)
 {
 	struct vlv_pri_plane *plane = to_vlv_pri_plane(intel_plane);
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_pri_plane(plane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
 	u32 value;
 
 	value = REG_READ(plane->offset);
@@ -408,6 +414,7 @@ static int vlv_pri_enable(struct intel_plane *intel_plane)
 	plane->enabled = true;
 	REG_WRITE(plane->offset, value | DISPLAY_PLANE_ENABLE);
 	vlv_adf_flush_disp_plane(plane);
+	vlv_update_plane_status(&vlv_config->base, intel_plane->base.idx, true);
 
 	/*
 	 * TODO:No need to wait in case of mipi.
@@ -422,6 +429,8 @@ static int vlv_pri_enable(struct intel_plane *intel_plane)
 static int vlv_pri_disable(struct intel_plane *intel_plane)
 {
 	struct vlv_pri_plane *plane = to_vlv_pri_plane(intel_plane);
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_pri_plane(plane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
 	u32 value;
 	u32 mask = DDL_PLANEA_MASK;
 
@@ -435,6 +444,8 @@ static int vlv_pri_disable(struct intel_plane *intel_plane)
 	plane->enabled = false;
 	REG_WRITE(plane->offset, value & ~DISPLAY_PLANE_ENABLE);
 	vlv_adf_flush_disp_plane(plane);
+	vlv_update_plane_status(&vlv_config->base,
+					intel_plane->base.idx, false);
 	REG_WRITE_BITS(VLV_DDL(plane->base.base.idx), 0x00, mask);
 	return 0;
 }
diff --git a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
index b23f41e..3275d4d 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
@@ -201,9 +201,15 @@ static bool format_is_yuv(uint32_t format)
 }
 
 static inline struct vlv_pipeline *to_vlv_pipeline_sp1_plane(
-	struct vlv_sp_plane *plane)
+	struct vlv_sp_plane *splane)
 {
-	return container_of(plane, struct vlv_pipeline, splane[0]);
+	int plane = splane->ctx.plane;
+	struct vlv_sp_plane *tmp_plane = splane;
+
+	if (plane == 1)
+		tmp_plane -= 1;
+
+	return container_of(tmp_plane, struct vlv_pipeline, splane[0]);
 }
 
 static void vlv_sp_pane_save_ddl(struct vlv_sp_plane *splane, u32 ddl)
@@ -211,13 +217,8 @@ static void vlv_sp_pane_save_ddl(struct vlv_sp_plane *splane, u32 ddl)
 	int plane = splane->ctx.plane;
 	struct vlv_pipeline *disp = NULL;
 	struct vlv_pm *pm;
-	struct vlv_sp_plane *tmp_plane = splane;
-
-	/* FIXME: verify this works for both planes */
-	if (plane == 1)
-		tmp_plane -= 1;
 
-	disp = to_vlv_pipeline_sp1_plane(tmp_plane);
+	disp = to_vlv_pipeline_sp1_plane(splane);
 
 	pm = &disp->pm;
 	vlv_pm_save_values(pm, true, (plane ? false : true),
@@ -231,6 +232,8 @@ static int vlv_sp_calculate(struct intel_plane *planeptr,
 	struct vlv_sp_plane *splane = to_vlv_sp_plane(planeptr);
 	struct sp_plane_regs_value *regs = &splane->ctx.regs;
 	struct intel_pipe *intel_pipe = config->pipe;
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_sp1_plane(splane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
 	struct drm_mode_modeinfo mode;
 	unsigned long sprsurf_offset, linear_offset;
 	int sprite_ddl, prec_multi, sp_prec_multi;
@@ -352,12 +355,12 @@ static int vlv_sp_calculate(struct intel_plane *planeptr,
 	}
 
 	/* when in maxfifo display control register cannot be modified */
-	if (intel_pipe->status.maxfifo_enabled &&
+	if (vlv_config->status.maxfifo_enabled &&
 					regs->dspcntr != prev_sprctl) {
 		REG_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
-		intel_pipe->status.maxfifo_enabled = false;
-		intel_pipe->status.wait_vblank = true;
-		intel_pipe->status.vsync_counter =
+		vlv_config->status.maxfifo_enabled = false;
+		pipeline->status.wait_vblank = true;
+		pipeline->status.vsync_counter =
 			intel_pipe->ops->get_vsync_counter(intel_pipe, 0);
 	}
 
@@ -516,6 +519,8 @@ static void vlv_sp_flip(struct intel_plane *planeptr, struct intel_buffer *buf,
 {
 	struct vlv_sp_plane *splane = to_vlv_sp_plane(planeptr);
 	struct sp_plane_regs_value *regs = &splane->ctx.regs;
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_sp1_plane(splane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
 	int plane = splane->ctx.plane;
 	int pipe = splane->ctx.pipe;
 	u32 val = 0;
@@ -541,6 +546,7 @@ static void vlv_sp_flip(struct intel_plane *planeptr, struct intel_buffer *buf,
 		val &= ~PLANE_RESERVED_REG_BIT_2_ENABLE;
 		REG_WRITE(SPSURF(pipe, plane), val);
 	}
+	vlv_update_plane_status(&vlv_config->base, planeptr->base.idx, true);
 
 	return;
 }
@@ -553,6 +559,8 @@ bool vlv_sp_plane_is_enabled(struct vlv_sp_plane *splane)
 static int vlv_sp_enable(struct intel_plane *planeptr)
 {
 	struct vlv_sp_plane *splane = to_vlv_sp_plane(planeptr);
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_sp1_plane(splane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
 	u32 reg, value;
 	int plane = splane->ctx.plane;
 	int pipe = splane->ctx.pipe;
@@ -568,6 +576,7 @@ static int vlv_sp_enable(struct intel_plane *planeptr)
 	splane->enabled = true;
 	REG_WRITE(reg, value | DISPLAY_PLANE_ENABLE);
 	vlv_adf_flush_sp_plane(pipe, plane);
+	vlv_update_plane_status(&vlv_config->base, planeptr->base.idx, true);
 	/*
 	 * TODO:No need to wait in case of mipi.
 	 * Since data will flow only when port is enabled.
@@ -580,6 +589,8 @@ static int vlv_sp_enable(struct intel_plane *planeptr)
 static int vlv_sp_disable(struct intel_plane *planeptr)
 {
 	struct vlv_sp_plane *splane = to_vlv_sp_plane(planeptr);
+	struct vlv_pipeline *pipeline = to_vlv_pipeline_sp1_plane(splane);
+	struct vlv_dc_config *vlv_config = pipeline->config;
 	u32 value, mask;
 	int plane = splane->ctx.plane;
 	int pipe = splane->ctx.pipe;
@@ -594,6 +605,7 @@ static int vlv_sp_disable(struct intel_plane *planeptr)
 	splane->enabled = false;
 	REG_WRITE(splane->offset, value & ~DISPLAY_PLANE_ENABLE);
 	vlv_adf_flush_sp_plane(pipe, plane);
+	vlv_update_plane_status(&vlv_config->base, planeptr->base.idx, false);
 	/* While disabling plane reset the plane DDL value */
 	if (plane == 0)
 		mask = DDL_SPRITEA_MASK;
diff --git a/drivers/video/adf/intel/include/core/intel_dc_config.h b/drivers/video/adf/intel/include/core/intel_dc_config.h
index 7850026..66ac3e1 100644
--- a/drivers/video/adf/intel/include/core/intel_dc_config.h
+++ b/drivers/video/adf/intel/include/core/intel_dc_config.h
@@ -459,13 +459,6 @@ struct pri_plane_regs {
 	unsigned long surfaddr;
 };
 
-struct intel_global_status {
-	bool maxfifo_enabled;
-	bool wait_vblank;
-	u32 vsync_counter;
-	bool plane_status[2][6];
-};
-
 struct intel_clock {
 	/* given values */
 	u32 n;
@@ -494,7 +487,6 @@ struct intel_pipe {
 	 * one shot later in flip calls
 	 */
 	struct pri_plane_regs regs;
-	struct intel_global_status status;
 };
 
 struct intel_dc_attachment {
diff --git a/drivers/video/adf/intel/include/core/intel_platform_config.h b/drivers/video/adf/intel/include/core/intel_platform_config.h
index 75f84eb..dba1403 100644
--- a/drivers/video/adf/intel/include/core/intel_platform_config.h
+++ b/drivers/video/adf/intel/include/core/intel_platform_config.h
@@ -61,9 +61,9 @@ int vlv_validate_custom_format(struct intel_pipeline *pipeline,
 bool vlv_is_vid_mode(struct intel_pipeline *pipeline);
 void vlv_cmd_hs_mode_enable(struct intel_pipeline *pipeline, bool enable);
 int vlv_cmd_vc_dcs_write(struct intel_pipeline *pipeline, int channel,
-		const u8 *data, int len);
+		const u8 *data, int len, enum port port);
 int vlv_cmd_vc_generic_write(struct intel_pipeline *pipeline, int channel,
-		const u8 *data, int len);
+		const u8 *data, int len, enum port port);
 int vlv_cmd_vc_dcs_read(struct intel_pipeline *pipeline, int channel,
 		u8 dcs_cmd, u8 *buf, int buflen, enum port port);
 int vlv_cmd_vc_generic_read(struct intel_pipeline *pipeline, int channel,
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index 8153424..161d138 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -151,6 +151,11 @@ static inline void vlv_punit_write(u32 reg, u32 val)
 			reg, &val);
 }
 
+struct vlv_pipeline_status {
+	bool wait_vblank;
+	u32 vsync_counter;
+};
+
 struct vlv_pipeline {
 	struct intel_pipeline base;
 	struct vlv_dpst *dpst;
@@ -173,7 +178,13 @@ struct vlv_pipeline {
 		struct vlv_hdmi_port hdmi_port;
 		struct vlv_dp_port dp_port;
 	} port;
+	struct vlv_pipeline_status status;
+	struct vlv_dc_config *config;
+};
 
+struct vlv_global_status {
+	bool maxfifo_enabled;
+	u32 pipe_plane_status;
 };
 
 struct vlv_dc_config {
@@ -182,6 +193,7 @@ struct vlv_dc_config {
 	u32 max_planes;
 	struct vlv_dpst dpst;
 	struct mutex dpio_lock;
+	struct vlv_global_status status;
 	/*
 	 * FIXME: For other platforms the number of pipes may
 	 * vary, which has to be handeled in future
@@ -280,4 +292,10 @@ extern void REG_WRITE_BITS(u32 reg, u32 val, u32 mask);
 extern u32 vlv_dp_set_brightness(struct intel_pipeline *pipeline, int level);
 extern u32 vlv_dp_get_brightness(struct intel_pipeline *pipeline);
 
+/* pipe and plane status */
+void vlv_update_pipe_status(struct intel_dc_config *config,
+		u8 pipe, bool enabled);
+void vlv_update_plane_status(struct intel_dc_config *config,
+		u8 plane, bool enabled);
+
 #endif
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index 8743c08..9dbe4d0 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -5432,6 +5432,11 @@ extern int chv_cursor_offsets[];
 					VLV_AUD_CNTL_ST_B)
 #define VLV_AUD_CNTL_ST2		(VLV_DISPLAY_BASE + 0x620C0)
 
+/* Punit register */
+#define CHV_DPASSC				0x36
+/* Bit 6 of DPASSC indicates maxfifo enabling bit */
+#define CHV_PW_MAXFIFO_MASK		0x40
+
 /* These are the 4 32-bit write offset registers for each stream
  * output buffer.  It determines the offset from the
  * 3DSTATE_SO_BUFFERs that the next streamed vertex output goes to.
@@ -6363,6 +6368,10 @@ extern int chv_cursor_offsets[];
 #define wait_for_atomic(COND, MS) _wait_for(COND, MS, 0)
 #define wait_for_atomic_us(COND, US) _wait_for((COND), \
 					       DIV_ROUND_UP((US), 1000), 0)
+
+#define single_plane_enabled(plane_stat)       is_power_of_2(plane_stat)
+#define single_pipe_enabled(pipe_stat)         is_power_of_2(pipe_stat)
+
 #define vlv_calculate_ddl(clock, pixel_size, prec_multi, ddl) (	\
 {									\
 	int entries;							\
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pm.h b/drivers/video/adf/intel/include/core/vlv/vlv_pm.h
index 79f9236..e48a457 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pm.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pm.h
@@ -32,5 +32,11 @@ u32 vlv_pm_save_values(struct vlv_pm *pm, bool pri_plane,
 		bool sp1_plane, bool sp2_plane, u32 val);
 u32 vlv_pm_program_values(struct vlv_pm *pm, int num_planes);
 u32 vlv_pm_flush_values(struct vlv_pm *pm, u32 event);
+void vlv_pm_on_post(struct intel_dc_config *intel_config);
+void vlv_pm_pre_validate(struct intel_dc_config *intel_config,
+		struct intel_adf_post_custom_data *custom,
+		struct intel_pipeline *intel_pipeline, struct intel_pipe *pipe);
+void vlv_pm_pre_post(struct intel_dc_config *intel_config,
+		struct intel_pipeline *intel_pipeline, struct intel_pipe *pipe);
 
 #endif /*_VLV_WATERMARK_H_*/
-- 
1.7.9.5

