From d983c8b13bf2dadb343a0335b52ac3643845f65c Mon Sep 17 00:00:00 2001
Message-Id: <d983c8b13bf2dadb343a0335b52ac3643845f65c.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
Date: Thu, 24 Jul 2014 20:43:11 +0530
Subject: [PATCH 169/312] FOR_UPSTREAM [VPG]: drm/i915: Replacing switch class
 with exton switch class

MRD7 hangs and reboots whenever HDMI monitor is connected. Replacing
switch class driver notification with Exton class driver hdmi
notification.

Issue: GMIN-2409
Change-Id: I64344b230d3f5707782c87f83678b316a27130de
Signed-off-by: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
---
 drivers/gpu/drm/i915/intel_drv.h  |    6 ++--
 drivers/gpu/drm/i915/intel_hdmi.c |   60 +++++++++++++++++++------------------
 2 files changed, 34 insertions(+), 32 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 973694f..fddaf62 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -26,7 +26,7 @@
 #define __INTEL_DRV_H__
 
 #include <linux/i2c.h>
-#include <linux/switch.h>
+#include <linux/extcon.h>
 #include <linux/hdmi.h>
 #include <drm/i915_drm.h>
 #include "i915_drv.h"
@@ -187,9 +187,9 @@ struct intel_connector {
 	 */
 	struct intel_encoder *new_encoder;
 
-#ifdef CONFIG_SWITCH
+#ifdef CONFIG_EXTCON
 	/* Android uses switch to inform userspace about hotplug events. */
-	struct switch_dev hotplug_switch;
+	struct extcon_dev hotplug_switch;
 #endif
 
 	/* Reads out the current hw, returning true if the connector is enabled
diff --git a/drivers/gpu/drm/i915/intel_hdmi.c b/drivers/gpu/drm/i915/intel_hdmi.c
index 19ac8a5..a9b5163 100644
--- a/drivers/gpu/drm/i915/intel_hdmi.c
+++ b/drivers/gpu/drm/i915/intel_hdmi.c
@@ -30,6 +30,7 @@
 #include <linux/slab.h>
 #include <linux/delay.h>
 #include <linux/hdmi.h>
+#include <linux/string.h>
 #include <drm/drmP.h>
 #include <drm/drm_crtc.h>
 #include <drm/drm_edid.h>
@@ -1044,6 +1045,11 @@ intel_hdmi_detect(struct drm_connector *connector, bool force)
 	bool inform_audio = false;
 #endif
 
+#ifdef CONFIG_EXTCON
+	struct intel_connector *intel_connector =
+				to_intel_connector(connector);
+#endif
+
 	DRM_DEBUG_KMS("[CONNECTOR:%d:%s]\n",
 		      connector->base.id, connector->name);
 
@@ -1110,19 +1116,16 @@ intel_hdmi_detect(struct drm_connector *connector, bool force)
 #endif
 	}
 
-	if (IS_ENABLED(CONFIG_SWITCH)) {
-		struct intel_connector *intel_connector =
-				to_intel_connector(connector);
-		if (intel_connector->hotplug_switch.name &&
-                    *intel_connector->hotplug_switch.name) {
-			if (status == connector_status_connected)
-				switch_set_state(
-					&intel_connector->hotplug_switch, 1);
-			else
-				switch_set_state(
-					&intel_connector->hotplug_switch, 0);
-		}
+#ifdef CONFIG_EXTCON
+	if (strlen(intel_connector->hotplug_switch.name) != 0) {
+		if (status == connector_status_connected)
+			extcon_set_state(
+				&intel_connector->hotplug_switch, 1);
+		else
+			extcon_set_state(
+				&intel_connector->hotplug_switch, 0);
 	}
+#endif
 
 	intel_display_power_put(dev_priv, power_domain);
 
@@ -1526,12 +1529,12 @@ static void chv_hdmi_pre_enable(struct intel_encoder *encoder)
 
 static void intel_hdmi_destroy(struct drm_connector *connector)
 {
-	if (IS_ENABLED(CONFIG_SWITCH)) {
-		struct intel_connector *intel_connector =
-				to_intel_connector(connector);
-		switch_dev_unregister(&intel_connector->hotplug_switch);
-		kfree(intel_connector->hotplug_switch.name);
-	}
+#ifdef CONFIG_EXTCON
+	struct intel_connector *intel_connector =
+			to_intel_connector(connector);
+	extcon_dev_unregister(&intel_connector->hotplug_switch);
+	kfree(intel_connector->hotplug_switch.name);
+#endif
 	drm_connector_cleanup(connector);
 	kfree(connector);
 }
@@ -1633,23 +1636,22 @@ void intel_hdmi_init_connector(struct intel_digital_port *intel_dig_port,
 	intel_connector_attach_encoder(intel_connector, intel_encoder);
 	drm_connector_register(connector);
 
-	if (IS_ENABLED(CONFIG_SWITCH)) {
-		intel_connector->hotplug_switch.name =
-			kasprintf(GFP_KERNEL, "hdmi_%c", 'a' + port);
+#ifdef CONFIG_EXTCON
+	intel_connector->hotplug_switch.name =
+		kasprintf(GFP_KERNEL, "hdmi_%c", 'a' + port);
 #ifdef CONFIG_SUPPORT_LPDMA_HDMI_AUDIO
 		if (IS_VALLEYVIEW(dev))
 			intel_connector->hotplug_switch.name = "hdmi";
 #endif
-		if (!intel_connector->hotplug_switch.name) {
-			DRM_ERROR("%s failed to allocate memory", __func__);
-			kfree(intel_connector);
-			kfree(intel_dig_port);
-			return;
-		}
+	if (!intel_connector->hotplug_switch.name) {
+		DRM_ERROR("%s failed to allocate memory", __func__);
+		kfree(intel_connector);
+		kfree(intel_dig_port);
+		return;
 	}
 
-	if (IS_ENABLED(CONFIG_SWITCH))
-		switch_dev_register(&intel_connector->hotplug_switch);
+	extcon_dev_register(&intel_connector->hotplug_switch);
+#endif
 
 	/* For G4X desktop chip, PEG_BAND_GAP_DATA 3:0 must first be written
 	 * 0xd.  Failure to do so will result in spurious interrupts being
-- 
1.7.9.5

