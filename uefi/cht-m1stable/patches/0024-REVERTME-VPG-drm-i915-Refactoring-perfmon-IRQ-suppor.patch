From 0607d1cc9fbd6e37158990e2ddafe49125a98682 Mon Sep 17 00:00:00 2001
Message-Id: <0607d1cc9fbd6e37158990e2ddafe49125a98682.1417780177.git.chang-joon.lee@intel.com>
In-Reply-To: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
References: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
From: Adam Rutkowski <adam.j.rutkowski@intel.com>
Date: Mon, 8 Sep 2014 15:02:02 -0400
Subject: [PATCH 24/30] REVERTME [VPG]: drm/i915: Refactoring perfmon IRQ
 support

Refactoring perfmon IRQ code for Gen 7.

Patch is marked with REVERTME as Perfmon IOCTL will be removed
once OA couters are exposed via 'perf event' framework.

Issue: GMINL-3120
Change-Id: I33fcc622edd5c5321916e037521aaac025f42339
Signed-off-by: Adam Rutkowski <adam.j.rutkowski@intel.com>
Signed-off-by: Andrzej Datczuk <andrzej.datczuk@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c          |    4 ++++
 drivers/gpu/drm/i915/i915_drv.h          |   19 ++++++++++++++---
 drivers/gpu/drm/i915/i915_gem.c          |    3 ---
 drivers/gpu/drm/i915/i915_irq.c          |    4 ++--
 drivers/gpu/drm/i915/i915_perfmon.c      |   27 ++++++++++++++++--------
 drivers/gpu/drm/i915/i915_perfmon_defs.h |   33 ++++++++++++++++++++++++++++++
 6 files changed, 74 insertions(+), 16 deletions(-)
 create mode 100644 drivers/gpu/drm/i915/i915_perfmon_defs.h

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index e078c0f..d773aa0 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -1869,6 +1869,8 @@ int i915_driver_load(struct drm_device *dev, unsigned long flags)
 
 	intel_init_runtime_pm(dev_priv);
 
+	i915_perfmon_setup(dev_priv);
+
 	return 0;
 
 out_power_well:
@@ -2003,6 +2005,8 @@ int i915_driver_unload(struct drm_device *dev)
 	pci_dev_put(dev_priv->bridge_dev);
 	kfree(dev_priv);
 
+	i915_perfmon_cleanup(dev_priv);
+
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index a199f2e..88d361c 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -50,6 +50,7 @@
 #ifdef CONFIG_SUPPORT_LPDMA_HDMI_AUDIO
 	#include "hdmi_audio_if.h"
 #endif
+#include "i915_perfmon_defs.h"
 
 
 /* General customization:
@@ -1717,10 +1718,20 @@ struct drm_i915_private {
 
 	struct i915_workarounds workarounds;
 
-	/* perfmon interrupt support */
-	wait_queue_head_t perfmon_buffer_queue;
-	atomic_t perfmon_buffer_interrupts;
+	struct drm_i915_perfmon_device perfmon;
 
+	/*
+	 * workarounds are currently applied at different places and
+	 * changes are being done to consolidate them so exact count is
+	 * not clear at this point, use a max value for now.
+	 */
+#define I915_MAX_WA_REGS  16
+	struct {
+		u32 addr;
+		u32 value;
+		/* bitmask representing WA bits */
+		u32 mask;
+	} intel_wa_regs[I915_MAX_WA_REGS];
 	u32 num_wa_regs;
 
 	/* Reclocking support */
@@ -3004,6 +3015,8 @@ int vlv_freq_opcode(struct drm_i915_private *dev_priv, int val);
 /* i195_perfmon.c */
 int i915_perfmon_ioctl(struct drm_device *dev, void *data,
 	struct drm_file *file);
+void i915_perfmon_setup(struct drm_i915_private *dev_priv);
+void i915_perfmon_cleanup(struct drm_i915_private *dev_priv);
 
 extern void i915_write_bits32(struct drm_i915_private *dev_priv,
 	u32 reg, u32 val, u32 mask, bool trace);
diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index de74a73..1bba46c 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -5189,9 +5189,6 @@ i915_gem_load(struct drm_device *dev)
 	i915_gem_detect_bit_6_swizzle(dev);
 	init_waitqueue_head(&dev_priv->pending_flip_queue);
 
-	atomic_set(&dev_priv->perfmon_buffer_interrupts, 0);
-	init_waitqueue_head(&dev_priv->perfmon_buffer_queue);
-
 	dev_priv->mm.interruptible = true;
 
 	dev_priv->mm.shrinker.scan_objects = i915_gem_shrinker_scan;
diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index 4f8ee9b..e67719b 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -1679,8 +1679,8 @@ static void snb_gt_irq_handler(struct drm_device *dev,
 	}
 
 	if (gt_iir & GT_RENDER_PERFMON_BUFFER_INTERRUPT) {
-		atomic_inc(&dev_priv->perfmon_buffer_interrupts);
-		wake_up_all(&dev_priv->perfmon_buffer_queue);
+		atomic_inc(&dev_priv->perfmon.buffer_interrupts);
+		wake_up_all(&dev_priv->perfmon.buffer_queue);
 	}
 }
 
diff --git a/drivers/gpu/drm/i915/i915_perfmon.c b/drivers/gpu/drm/i915/i915_perfmon.c
index 01fb04c..38a69ba 100644
--- a/drivers/gpu/drm/i915/i915_perfmon.c
+++ b/drivers/gpu/drm/i915/i915_perfmon.c
@@ -65,26 +65,26 @@ static int intel_wait_perfmon_interrupt(struct drm_device *dev,
 						int timeout_ms)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	int counter = atomic_read(&dev_priv->perfmon_buffer_interrupts);
-	int retcode = I915_PERFMON_IRQ_WAIT_OK;
+	int counter = atomic_read(&dev_priv->perfmon.buffer_interrupts);
+	int ret = I915_PERFMON_IRQ_WAIT_OK;
 	int time_left = 0;
 
 	if (!(IS_GEN7(dev)))
 		return -EINVAL;
 
 	time_left = wait_event_interruptible_timeout(
-		dev_priv->perfmon_buffer_queue,
-		atomic_read(&dev_priv->perfmon_buffer_interrupts) != counter,
+		dev_priv->perfmon.buffer_queue,
+		atomic_read(&dev_priv->perfmon.buffer_interrupts) != counter,
 		timeout_ms * HZ / 1000);
 
 	if (time_left == 0)
-		retcode = I915_PERFMON_IRQ_WAIT_TIMEOUT;
+		ret = I915_PERFMON_IRQ_WAIT_TIMEOUT;
 	else if (time_left == -ERESTARTSYS)
-		retcode = I915_PERFMON_IRQ_WAIT_INTERRUPTED;
+		ret = I915_PERFMON_IRQ_WAIT_INTERRUPTED;
 	else if (time_left < 0)
-		retcode = I915_PERFMON_IRQ_WAIT_FAILED;
+		ret = I915_PERFMON_IRQ_WAIT_FAILED;
 
-	return retcode;
+	return ret;
 }
 
 /**
@@ -161,3 +161,14 @@ int i915_perfmon_ioctl(struct drm_device *dev, void *data,
 
 	return ret;
 }
+
+void i915_perfmon_setup(struct drm_i915_private *dev_priv)
+{
+	atomic_set(&dev_priv->perfmon.buffer_interrupts, 0);
+	init_waitqueue_head(&dev_priv->perfmon.buffer_queue);
+}
+
+void i915_perfmon_cleanup(struct drm_i915_private *dev_priv)
+{
+}
+
diff --git a/drivers/gpu/drm/i915/i915_perfmon_defs.h b/drivers/gpu/drm/i915/i915_perfmon_defs.h
new file mode 100644
index 0000000..6509aad
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_perfmon_defs.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright  2014 Intel Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+#ifndef _I915_PERFMON_DEFS_H_
+#define _I915_PERFMON_DEFS_H_
+
+struct drm_i915_perfmon_device {
+	/* perfmon interrupt support */
+	wait_queue_head_t	buffer_queue;
+	atomic_t		buffer_interrupts;
+};
+
+#endif	/* _I915_PERFMON_DEFS_H_ */
-- 
1.7.9.5

