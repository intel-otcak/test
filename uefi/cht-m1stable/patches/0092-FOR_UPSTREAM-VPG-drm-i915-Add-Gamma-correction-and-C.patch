From 9258ae7016ee79644dd32a9f0ac45f8f718e5241 Mon Sep 17 00:00:00 2001
Message-Id: <9258ae7016ee79644dd32a9f0ac45f8f718e5241.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Sat, 5 Jul 2014 01:24:17 +0530
Subject: [PATCH 092/312] FOR_UPSTREAM [VPG]: drm/i915: Add Gamma correction
 and ColorManager.

The following changes have been ported:
	1. Implementation of gamma correction on PIPE/PLANE level
	2. Color space conversion (Moved from from intel_display.c)
	and creates entries for gamma correction in sysfs nodes.

Issue: GMIN-1466
Change-Id: If09604a374774c0d4512fb6c3a9f3d27f768c077
Signed-off-by: Shashank Sharma <shashank.sharma@intel.com>
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Signed-off-by: Shobhit Kumar <skumar40@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c  |  175 +++++++++++++++
 drivers/gpu/drm/i915/i915_drv.h      |    1 +
 drivers/gpu/drm/i915/intel_clrmgr.c  |  400 ++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_clrmgr.h  |   35 +++
 drivers/gpu/drm/i915/intel_display.c |    2 +-
 drivers/gpu/drm/i915/intel_drv.h     |    1 +
 include/uapi/drm/i915_drm.h          |    2 +
 7 files changed, 615 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index 2d598df..be37cad 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -1790,6 +1790,168 @@ static int i915_emon_status(struct seq_file *m, void *unused)
 	return 0;
 }
 
+
+ssize_t i915_gamma_adjust_read(struct file *filp,
+		 char __user *ubuf,
+		 size_t max,
+		 loff_t *ppos)
+{
+	/* To do: Not implemented yet */
+	DRM_ERROR("Gamma adjust: Not implemented\n");
+	return -EINVAL;
+}
+
+ssize_t i915_gamma_adjust_write(struct file *filp,
+		  const char __user *ubuf,
+		  size_t count,
+		  loff_t *ppos)
+{
+	int ret = 0;
+	char *buf = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Gamma adjust: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (copy_from_user(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* Parse data and load the gamma  table */
+	ret = parse_clrmgr_input(gamma_softlut, buf,
+		GAMMA_CORRECT_MAX_COUNT, count);
+	if (ret < 0)
+		DRM_ERROR("Gamma table loading failed\n");
+	else
+		DRM_DEBUG("Gamma table loading done\n");
+EXIT:
+	kfree(buf);
+	/* If error, return error*/
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
+ssize_t i915_gamma_enable_read(struct file *filp,
+		 char __user *ubuf,
+		 size_t max,
+		 loff_t *ppos)
+{
+	int len = 0;
+	char buf[10] = {0,};
+	struct drm_device *dev = filp->private_data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	len = scnprintf(buf, sizeof(buf), "%s\n",
+		dev_priv->gamma_enabled ? "Enabled" : "Disabled");
+	return simple_read_from_buffer(ubuf, max, ppos,
+		(const void *) buf, len);
+}
+
+ssize_t i915_gamma_enable_write(struct file *filp,
+		  const char __user *ubuf,
+		  size_t count,
+		  loff_t *ppos)
+{
+	int ret = 0;
+	unsigned long status = 0;
+	struct drm_crtc *crtc = NULL;
+	struct drm_device *dev = filp->private_data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char *buf = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Gamma adjust: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma enable: Out of mem\n");
+		return  -ENOMEM;
+	}
+
+	/* Get the data */
+	if (copy_from_user(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* Finally, get the status */
+	if (kstrtoul((const char *)buf, 10,
+		&status)) {
+		DRM_ERROR("Gamma enable: Invalid limit\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+	dev_priv->gamma_enabled = status;
+
+	/* Search for a CRTC,
+	Assumption: Either MIPI or EDP is fix panel */
+	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
+		if ((intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) ||
+			(intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)))
+			break;
+	}
+
+	/* No CRTC */
+	if (!crtc) {
+		DRM_ERROR("Gamma adjust: No local panel found\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* if gamma enabled, apply gamma correction on PIPE */
+	if (dev_priv->gamma_enabled) {
+		if (intel_crtc_enable_gamma(crtc, PIPEA)) {
+			DRM_ERROR("Apply gamma correction failed\n");
+			ret = -EINVAL;
+		} else
+			ret = count;
+	} else {
+		/* Disable gamma on this plane */
+		intel_crtc_disable_gamma(crtc, PIPEA);
+		ret = count;
+	}
+
+EXIT:
+	kfree(buf);
+	return ret;
+}
+
+const struct file_operations i915_gamma_adjust_fops = {
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.read = i915_gamma_adjust_read,
+	.write = i915_gamma_adjust_write,
+	.llseek = default_llseek,
+};
+
+const struct file_operations i915_gamma_enable_fops = {
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.read = i915_gamma_enable_read,
+	.write = i915_gamma_enable_write,
+	.llseek = default_llseek,
+};
+
+
+
+
 ssize_t i915_csc_adjust_write(struct file *filp,
 		  const char __user *ubuf,
 		  size_t count,
@@ -4503,6 +4665,19 @@ int i915_debugfs_init(struct drm_minor *minor)
 	if (ret)
 		return ret;
 
+	ret = i915_debugfs_create(minor->debugfs_root, minor,
+					"gamma_adjust",
+					&i915_gamma_adjust_fops);
+	if (ret)
+		return ret;
+
+	ret = i915_debugfs_create(minor->debugfs_root, minor,
+					"gamma_enable",
+					&i915_gamma_enable_fops);
+	if (ret)
+		return ret;
+
+
 	return drm_debugfs_create_files(i915_debugfs_list,
 					I915_DEBUGFS_ENTRIES,
 					minor->debugfs_root, minor);
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 56af80a..03cb232 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1499,6 +1499,7 @@ struct drm_i915_private {
 	bool is_first_modeset;
 	bool maxfifo_enabled;
 	bool csc_enabled;
+	bool gamma_enabled;
 
 	/* PCH chipset type */
 	enum intel_pch pch_type;
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.c b/drivers/gpu/drm/i915/intel_clrmgr.c
index ce55b5a..76a8a46 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.c
+++ b/drivers/gpu/drm/i915/intel_clrmgr.c
@@ -32,6 +32,49 @@
 #include "i915_drv.h"
 #include "intel_clrmgr.h"
 
+/* Gamma lookup table for Sprite planes */
+u32 gamma_sprite_softlut[GAMMA_SP_MAX_COUNT] = {
+	0, 0, 0, 0, 0, 1023
+};
+
+/* Gamma soft lookup table for default gamma =1.0 */
+u32 gamma_softlut[GAMMA_CORRECT_MAX_COUNT] =  {
+	0x000000, 0x0, 0x020202, 0x0, 0x040404, 0x0, 0x060606, 0x0,
+	0x080808, 0x0, 0x0A0A0A, 0x0, 0x0C0C0C, 0x0, 0x0E0E0E, 0x0,
+	0x101010, 0x0, 0x121212, 0x0, 0x141414, 0x0, 0x161616, 0x0,
+	0x181818, 0x0, 0x1A1A1A, 0x0, 0x1C1C1C, 0x0, 0x1E1E1E, 0x0,
+	0x202020, 0x0, 0x222222, 0x0, 0x242424, 0x0, 0x262626, 0x0,
+	0x282828, 0x0, 0x2A2A2A, 0x0, 0x2C2C2C, 0x0, 0x2E2E2E, 0x0,
+	0x303030, 0x0, 0x323232, 0x0, 0x343434, 0x0, 0x363636, 0x0,
+	0x383838, 0x0, 0x3A3A3A, 0x0, 0x3C3C3C, 0x0, 0x3E3E3E, 0x0,
+	0x404040, 0x0, 0x424242, 0x0, 0x444444, 0x0, 0x464646, 0x0,
+	0x484848, 0x0, 0x4A4A4A, 0x0, 0x4C4C4C, 0x0, 0x4E4E4E, 0x0,
+	0x505050, 0x0, 0x525252, 0x0, 0x545454, 0x0, 0x565656, 0x0,
+	0x585858, 0x0, 0x5A5A5A, 0x0, 0x5C5C5C, 0x0, 0x5E5E5E, 0x0,
+	0x606060, 0x0, 0x626262, 0x0, 0x646464, 0x0, 0x666666, 0x0,
+	0x686868, 0x0, 0x6A6A6A, 0x0, 0x6C6C6C, 0x0, 0x6E6E6E, 0x0,
+	0x707070, 0x0, 0x727272, 0x0, 0x747474, 0x0, 0x767676, 0x0,
+	0x787878, 0x0, 0x7A7A7A, 0x0, 0x7C7C7C, 0x0, 0x7E7E7E, 0x0,
+	0x808080, 0x0, 0x828282, 0x0, 0x848484, 0x0, 0x868686, 0x0,
+	0x888888, 0x0, 0x8A8A8A, 0x0, 0x8C8C8C, 0x0, 0x8E8E8E, 0x0,
+	0x909090, 0x0, 0x929292, 0x0, 0x949494, 0x0, 0x969696, 0x0,
+	0x989898, 0x0, 0x9A9A9A, 0x0, 0x9C9C9C, 0x0, 0x9E9E9E, 0x0,
+	0xA0A0A0, 0x0, 0xA2A2A2, 0x0, 0xA4A4A4, 0x0, 0xA6A6A6, 0x0,
+	0xA8A8A8, 0x0, 0xAAAAAA, 0x0, 0xACACAC, 0x0, 0xAEAEAE, 0x0,
+	0xB0B0B0, 0x0, 0xB2B2B2, 0x0, 0xB4B4B4, 0x0, 0xB6B6B6, 0x0,
+	0xB8B8B8, 0x0, 0xBABABA, 0x0, 0xBCBCBC, 0x0, 0xBEBEBE, 0x0,
+	0xC0C0C0, 0x0, 0xC2C2C2, 0x0, 0xC4C4C4, 0x0, 0xC6C6C6, 0x0,
+	0xC8C8C8, 0x0, 0xCACACA, 0x0, 0xCCCCCC, 0x0, 0xCECECE, 0x0,
+	0xD0D0D0, 0x0, 0xD2D2D2, 0x0, 0xD4D4D4, 0x0, 0xD6D6D6, 0x0,
+	0xD8D8D8, 0x0, 0xDADADA, 0x0, 0xDCDCDC, 0x0, 0xDEDEDE, 0x0,
+	0xE0E0E0, 0x0, 0xE2E2E2, 0x0, 0xE4E4E4, 0x0, 0xE6E6E6, 0x0,
+	0xE8E8E8, 0x0, 0xEAEAEA, 0x0, 0xECECEC, 0x0, 0xEEEEEE, 0x0,
+	0xF0F0F0, 0x0, 0xF2F2F2, 0x0, 0xF4F4F4, 0x0, 0xF6F6F6, 0x0,
+	0xF8F8F8, 0x0, 0xFAFAFA, 0x0, 0xFCFCFC, 0x0, 0xFEFEFE, 0x0
+};
+
+
+
 /* Color space conversion coff's */
 u32 csc_softlut[CSC_MAX_COEFF_COUNT] = {
 	1024,	 0, 67108864, 0, 0, 1024
@@ -137,3 +180,360 @@ int parse_clrmgr_input(uint *dest, char *src, int max, int read)
 	}
 	return read;
 }
+
+/* Gamma correction for sprite planes on External display */
+int intel_enable_external_sprite_gamma(struct drm_crtc *crtc, int planeid)
+{
+	DRM_ERROR("This functionality is not implemented yet\n");
+	return -ENOSYS;
+}
+
+/* Gamma correction for External display plane*/
+int intel_enable_external_gamma(struct drm_crtc *crtc)
+{
+	DRM_ERROR("This functionality is not implemented yet\n");
+	return -ENOSYS;
+}
+
+/* Gamma correction for External pipe */
+int intel_enable_external_pipe_gamma(struct drm_crtc *crtc)
+{
+	DRM_ERROR("This functionality is not implemented yet\n");
+	return -ENOSYS;
+}
+
+/* Gamma correction for sprite planes on Primary display */
+int intel_enable_sprite_gamma(struct drm_crtc *crtc, int planeid)
+{
+	u32 count = 0;
+	u32 status = 0;
+	u32 controlreg = 0;
+	u32 correctreg = 0;
+
+	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	switch (planeid) {
+	case SPRITEA:
+		correctreg = GAMMA_SPA_GAMC0;
+		controlreg = GAMMA_SPA_CNTRL;
+		break;
+
+	case SPRITEB:
+		correctreg = GAMMA_SPB_GAMC0;
+		controlreg = GAMMA_SPB_CNTRL;
+		break;
+
+	case SPRITEC:
+	case SPRITED:
+		return intel_enable_external_sprite_gamma(crtc, planeid);
+
+	default:
+		DRM_ERROR("Invalid sprite object gamma enable\n");
+		return -EINVAL;
+	}
+
+	/* Write gamma cofficients in gamma regs*/
+	while (count < GAMMA_SP_MAX_COUNT) {
+		/* Write and read */
+		I915_WRITE(correctreg - 4 * count, gamma_sprite_softlut[count]);
+		status = I915_READ(correctreg - 4 * count++);
+	}
+
+	/* Enable gamma on plane */
+	status = I915_READ(controlreg);
+	status |= GAMMA_ENABLE_SPR;
+	I915_WRITE(controlreg, status);
+
+	DRM_DEBUG("Gamma applied on plane sprite%c\n",
+		(planeid == SPRITEA) ? 'A' : 'B');
+
+	return 0;
+}
+
+/*
+* Gamma correction at Plane level */
+int intel_enable_primary_gamma(struct drm_crtc *crtc)
+{
+	u32 odd = 0;
+	u32 even = 0;
+	u32 count = 0;
+	u32 palreg = 0;
+	u32 status = 0;
+	struct intel_crtc *intel_crtc;
+	struct drm_device *dev;
+	struct drm_i915_private *dev_priv;
+
+	/* Validate input */
+	if (!crtc) {
+		DRM_ERROR("Invalid CRTC object input to gamma enable\n");
+		return -EINVAL;
+	}
+
+	intel_crtc = to_intel_crtc(crtc);
+	dev = crtc->dev;
+	dev_priv = dev->dev_private;
+
+	palreg = PALETTE(intel_crtc->pipe);
+	 /* 10.6 mode Gamma Implementation */
+	while (count < GAMMA_CORRECT_MAX_COUNT) {
+		/* Get the gamma corrected value from table */
+		odd = gamma_softlut[count];
+		even = gamma_softlut[count + 1];
+
+		/* Write even and odd parts in palette regs*/
+		I915_WRITE(palreg + 4 * count, even);
+		I915_WRITE(palreg + 4 * ++count, odd);
+		count++;
+	}
+
+	/* Write max values in 11.6 format */
+	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, SHIFTBY6(GAMMA_MAX_VAL));
+	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, SHIFTBY6(GAMMA_MAX_VAL));
+	I915_WRITE(PIPEA_GAMMA_MAX_RED, SHIFTBY6(GAMMA_MAX_VAL));
+
+	/* Enable gamma on PIPE  */
+	status = I915_READ(PIPECONF(intel_crtc->pipe));
+	status |= PIPECONF_GAMMA;
+	I915_WRITE(PIPECONF(intel_crtc->pipe), status);
+	DRM_DEBUG("Gamma enabled on Plane A\n");
+
+	return 0;
+}
+
+/*
+* Gamma correction at PIPE level:
+* This function applies gamma correction Primary as well as Sprite planes
+* assosiated with this PIPE. Assumptions are:
+* Plane A is internal display primary panel.
+* Sprite A and B are interal display's sprite planes.
+*/
+int intel_enable_pipe_gamma(struct drm_crtc *crtc)
+{
+	u32 odd = 0;
+	u32 even = 0;
+	u32 count = 0;
+	u32 palreg = 0;
+	u32 status = 0;
+	struct intel_crtc *intel_crtc;
+	struct drm_device *dev;
+	struct drm_i915_private *dev_priv;
+
+	/* Validate input */
+	if (!crtc) {
+		DRM_ERROR("Invalid CRTC object input to gamma enable\n");
+		return -EINVAL;
+	}
+
+	intel_crtc = to_intel_crtc(crtc);
+	dev = crtc->dev;
+	dev_priv = dev->dev_private;
+
+	palreg = PALETTE(intel_crtc->pipe);
+	 /* 10.6 mode Gamma Implementation */
+	while (count < GAMMA_CORRECT_MAX_COUNT) {
+		/* Get the gamma corrected value from table */
+		odd = gamma_softlut[count];
+		even = gamma_softlut[count + 1];
+
+		/* Write even and odd parts in palette regs*/
+		I915_WRITE(palreg + 4 * count, even);
+		I915_WRITE(palreg + 4 * ++count, odd);
+		count++;
+	}
+
+	/* Write max values in 11.6 format */
+	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, SHIFTBY6(GAMMA_MAX_VAL));
+	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, SHIFTBY6(GAMMA_MAX_VAL));
+	I915_WRITE(PIPEA_GAMMA_MAX_RED, SHIFTBY6(GAMMA_MAX_VAL));
+
+	/* Enable gamma for Plane A  */
+	status = I915_READ(PIPECONF(intel_crtc->pipe));
+	status |= PIPECONF_GAMMA;
+	I915_WRITE(PIPECONF(intel_crtc->pipe), status);
+
+	/* Enable gamma on Sprite plane A*/
+	status = I915_READ(GAMMA_SPA_CNTRL);
+	status |= GAMMA_ENABLE_SPR;
+	I915_WRITE(GAMMA_SPA_CNTRL, status);
+
+	/* Enable gamma on Sprite plane B*/
+	status = I915_READ(GAMMA_SPB_CNTRL);
+	status |= GAMMA_ENABLE_SPR;
+	I915_WRITE(GAMMA_SPB_CNTRL, status);
+
+	DRM_DEBUG("Gamma enabled on Pipe A\n");
+	return 0;
+}
+
+/* Load gamma correction values corresponding to supplied
+gamma and program palette accordingly */
+int intel_crtc_enable_gamma(struct drm_crtc *crtc, u32 identifier)
+{
+	switch (identifier) {
+	/* Whole pipe level correction */
+	case PIPEA:
+		return intel_enable_pipe_gamma(crtc);
+	case PIPEB:
+		return intel_enable_external_pipe_gamma(crtc);
+
+	/* Primary display planes */
+	case PLANEA:
+		return intel_enable_primary_gamma(crtc);
+	case PLANEB:
+		return intel_enable_external_gamma(crtc);
+
+	/* Sprite planes */
+	case SPRITEA:
+	case SPRITEB:
+		return intel_enable_sprite_gamma(crtc, identifier);
+	case SPRITEC:
+	case SPRITED:
+		return intel_enable_external_sprite_gamma(crtc, identifier);
+
+	default:
+		DRM_ERROR("Invalid panel ID to Gamma enabled\n");
+		return -EINVAL;
+	}
+}
+
+int intel_disable_external_sprite_gamma(struct drm_crtc *crtc, u32 planeid)
+{
+	DRM_ERROR("This functionality is not implemented yet\n");
+	return -EINVAL;
+}
+
+/* Disable Gamma correction on external display */
+int intel_disable_external_gamma(struct drm_crtc *crtc)
+{
+	DRM_ERROR("This functionality is not implemented yet\n");
+	return -EINVAL;
+}
+
+/* Disable gamma correction on Primary display */
+int intel_disable_external_pipe_gamma(struct drm_crtc *crtc)
+{
+	DRM_ERROR("This functionality is not implemented yet\n");
+	return -EINVAL;
+}
+
+
+/* Disable gamma correction for sprite planes on primary display */
+int intel_disable_sprite_gamma(struct drm_crtc *crtc, u32 planeid)
+{
+	u32 status = 0;
+	u32 controlreg = 0;
+
+	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	switch (planeid) {
+	case SPRITEA:
+		controlreg = GAMMA_SPA_CNTRL;
+		break;
+
+	case SPRITEB:
+		controlreg = GAMMA_SPB_CNTRL;
+		break;
+
+	default:
+		DRM_ERROR("Invalid sprite object gamma enable\n");
+		return -EINVAL;
+	}
+
+	/* Reset pal regs */
+	intel_crtc_load_lut(crtc);
+
+	/* Disable gamma on PIPE config  */
+	status = I915_READ(controlreg);
+	status &= ~(GAMMA_ENABLE_SPR);
+	I915_WRITE(controlreg, status);
+
+	/* TODO: Reset gamma table default */
+	DRM_DEBUG("Gamma on Sprite %c disabled\n",
+		(planeid == SPRITEA) ? 'A' : 'B');
+
+	return 0;
+}
+
+/* Disable gamma correction on Primary display */
+int intel_disable_primary_gamma(struct drm_crtc *crtc)
+{
+	u32 status = 0;
+	struct drm_device *dev = crtc->dev;
+	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	/* Reset pal regs */
+	intel_crtc_load_lut(crtc);
+
+	/* Disable gamma on PIPE config  */
+	status = I915_READ(PIPECONF(intel_crtc->pipe));
+	status &= ~(PIPECONF_GAMMA);
+	I915_WRITE(PIPECONF(intel_crtc->pipe), status);
+
+	/* TODO: Reset gamma table default */
+	DRM_DEBUG("Gamma disabled on Pipe\n");
+	return 0;
+}
+
+
+/* Disable gamma correction on Primary display */
+int intel_disable_pipe_gamma(struct drm_crtc *crtc)
+{
+	u32 status = 0;
+	struct drm_device *dev = crtc->dev;
+	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	/* Reset pal regs */
+	intel_crtc_load_lut(crtc);
+
+	/* Disable gamma on PIPE config  */
+	status = I915_READ(PIPECONF(intel_crtc->pipe));
+	status &= ~(PIPECONF_GAMMA);
+	I915_WRITE(PIPECONF(intel_crtc->pipe), status);
+
+	/* Disable gamma on SpriteA  */
+	status = I915_READ(GAMMA_SPA_CNTRL);
+	status &= ~(GAMMA_ENABLE_SPR);
+	I915_WRITE(GAMMA_SPA_CNTRL, status);
+
+	/* Disable gamma on SpriteB  */
+	status = I915_READ(GAMMA_SPB_CNTRL);
+	status &= ~(GAMMA_ENABLE_SPR);
+	I915_WRITE(GAMMA_SPB_CNTRL, status);
+
+	/* TODO: Reset gamma table default */
+	DRM_DEBUG("Gamma disabled on Pipe\n");
+	return 0;
+}
+
+/* Load gamma correction values corresponding to supplied
+gamma and program palette accordingly */
+int intel_crtc_disable_gamma(struct drm_crtc *crtc, u32 identifier)
+{
+	switch (identifier) {
+	/* Whole pipe level correction */
+	case PIPEA:
+		return intel_disable_pipe_gamma(crtc);
+	case PIPEB:
+		return intel_disable_external_pipe_gamma(crtc);
+	/* Primary planes */
+	case PLANEA:
+		return intel_disable_primary_gamma(crtc);
+	case PLANEB:
+		return intel_disable_external_gamma(crtc);
+	/* Sprite plane */
+	case SPRITEA:
+	case SPRITEB:
+		return intel_disable_sprite_gamma(crtc, identifier);
+	case SPRITEC:
+	case SPRITED:
+		return intel_disable_external_sprite_gamma(crtc, identifier);
+	default:
+		DRM_ERROR("Invalid panel ID to Gamma enabled\n");
+		return -EINVAL;
+	}
+	return 0;
+}
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.h b/drivers/gpu/drm/i915/intel_clrmgr.h
index 350a6ed..5570fc4 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.h
+++ b/drivers/gpu/drm/i915/intel_clrmgr.h
@@ -32,6 +32,36 @@
 /* CSC correction */
 #define CSC_MAX_COEFF_COUNT		6
 #define CLR_MGR_PARSE_MAX		128
+#define PIPECONF_GAMMA			(1<<24)
+#define GAMMA_CORRECT_MAX_COUNT 256
+#define GAMMA_SP_MAX_COUNT		6
+/* Gamma correction defines */
+#define GAMMA_MAX_VAL			1024
+#define SHIFTBY6(val) (val<<6)
+#define PIPEA_GAMMA_MAX_RED	(dev_priv->info.display_mmio_offset + 0x70010)
+#define PIPEA_GAMMA_MAX_GREEN	(dev_priv->info.display_mmio_offset + 0x70014)
+#define PIPEA_GAMMA_MAX_BLUE	(dev_priv->info.display_mmio_offset + 0x70018)
+/* Sprite gamma correction regs */
+#define GAMMA_SPA_GAMC0		(dev_priv->info.display_mmio_offset + 0x721F4)
+#define GAMMA_SPA_GAMC1		(dev_priv->info.display_mmio_offset + 0x721F0)
+#define GAMMA_SPA_GAMC2		(dev_priv->info.display_mmio_offset + 0x721EC)
+#define GAMMA_SPA_GAMC3		(dev_priv->info.display_mmio_offset + 0x721E8)
+#define GAMMA_SPA_GAMC4		(dev_priv->info.display_mmio_offset + 0x721E4)
+#define GAMMA_SPA_GAMC5		(dev_priv->info.display_mmio_offset + 0x721E0)
+
+#define GAMMA_SPB_GAMC0		(dev_priv->info.display_mmio_offset + 0x721F4)
+#define GAMMA_SPB_GAMC1		(dev_priv->info.display_mmio_offset + 0x721F0)
+#define GAMMA_SPB_GAMC2		(dev_priv->info.display_mmio_offset + 0x721EC)
+#define GAMMA_SPB_GAMC3		(dev_priv->info.display_mmio_offset + 0x721E8)
+#define GAMMA_SPB_GAMC4		(dev_priv->info.display_mmio_offset + 0x721E4)
+#define GAMMA_SPB_GAMC5		(dev_priv->info.display_mmio_offset + 0x721E0)
+
+#define GAMMA_SPA_CNTRL		(dev_priv->info.display_mmio_offset + 0x72180)
+#define GAMMA_SPB_CNTRL		(dev_priv->info.display_mmio_offset + 0x72280)
+#define GAMMA_ENABLE_SPR			(1<<30)
+#define GAMMA_SP_MAX_COUNT			6
+#define NO_SPRITE_REG				4
+
 
 /* Color manager features */
 enum clrmgrfeatures {
@@ -43,10 +73,15 @@ enum clrmgrfeatures {
 
 /* Required for sysfs entry calls */
 extern u32 csc_softlut[CSC_MAX_COEFF_COUNT];
+extern u32 gamma_softlut[GAMMA_CORRECT_MAX_COUNT];
+extern u32 gamma_sprite_softlut[GAMMA_SP_MAX_COUNT];
 
 /* Prototypes */
 int parse_clrmgr_input(uint *dest, char *src, int max, int read);
 int do_intel_enable_csc(struct drm_device *dev, void *data,
 				struct drm_crtc *crtc);
 void do_intel_disable_csc(struct drm_device *dev, struct drm_crtc *crtc);
+int intel_crtc_enable_gamma(struct drm_crtc *crtc, u32 identifier);
+int intel_crtc_disable_gamma(struct drm_crtc *crtc, u32 identifier);
+
 #endif
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index c8ceacf..bc713cc 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -4301,7 +4301,7 @@ void hsw_disable_ips(struct intel_crtc *crtc)
 }
 
 /** Loads the palette/gamma unit for the CRTC with the prepared values */
-static void intel_crtc_load_lut(struct drm_crtc *crtc)
+void intel_crtc_load_lut(struct drm_crtc *crtc)
 {
 	struct drm_device *dev = crtc->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index b80a6a5..c388e69 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -775,6 +775,7 @@ void intel_mark_busy(struct drm_device *dev);
 void intel_mark_fb_busy(struct drm_i915_gem_object *obj,
 			struct intel_engine_cs *ring);
 void intel_mark_idle(struct drm_device *dev);
+extern void intel_crtc_load_lut(struct drm_crtc *crtc);
 void intel_crtc_restore_mode(struct drm_crtc *crtc);
 void intel_crtc_queue_unpin(struct intel_crtc *crtc,
 			    struct drm_i915_gem_object *obj);
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 6ff0270..15a1de1 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -73,6 +73,8 @@
 #define SPRITED		6
 #define CURSORA		7
 #define CURSORB		8
+#define PIPEA		9
+#define PIPEB		10
 
 struct drm_intel_csc_params {
 	float   m_CSCCoeff[MAX_CSC_COEFFICIENTS];
-- 
1.7.9.5

