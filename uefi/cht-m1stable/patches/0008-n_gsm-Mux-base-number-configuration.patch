From 63782179e7d15b266e29100aa1329a009bcb092b Mon Sep 17 00:00:00 2001
From: Mustapha Ben Zoubeir <mustaphax.ben.zoubeir@intel.com>
Date: Tue, 19 Aug 2014 12:00:08 +0200
Subject: [PATCH 8/8] n_gsm: Mux base number configuration

Configure mux behavior through mux_base_config parameter
expected format:
ttyName0,<base>
ttyName1,<base>

where base is an integer between 0 and < MAX_NUM (4)
if config has been provisioned, you will be unable to setup a mux
on a tty that is not present in the parameters
if two bases are identical, the second attach will fail.
you shouldn't configure the mux while there's a mux attached

Change-Id: I83f3ec8e5f05abef2929290eb7bf8098398073df
Orig-Change-Id: Ib9541aea21e9128ff84d8c2f907e8f9a5e995d27
Signed-off-by: Guillaume Ranquet <guillaumex.ranquet@intel.com>
Signed-off-by: Cesar DE OLIVEIRA <cesarx.de.oliveira@intel.com>
Signed-off-by: Mustapha Ben Zoubeir <mustaphax.ben.zoubeir@intel.com>
---
 drivers/tty/n_gsm.c | 88 ++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 81 insertions(+), 7 deletions(-)

diff --git a/drivers/tty/n_gsm.c b/drivers/tty/n_gsm.c
index d06f9f68bf5c..7fc64b4d7c39 100644
--- a/drivers/tty/n_gsm.c
+++ b/drivers/tty/n_gsm.c
@@ -65,9 +65,15 @@
 #include <linux/etherdevice.h>
 #include <linux/gsmmux.h>
 
+#define DRVNAME	"n_gsm"
 static int debug;
 module_param(debug, int, 0600);
 
+#define MAX_CONFIG_LEN 256
+static char mux_base_config[MAX_CONFIG_LEN];
+/* refcounting if mux is activated ... need to think of a better way */
+static int activated;
+
 #define GSMDBG_VERBOSE_PACKET_REPORT(x) ((x) &  1)
 #define GSMDBG_FORCE_CARRIER(x)         ((x) &  2)
 #define GSMDBG_DATA_FULL_REPORT(x)      ((x) &  4)
@@ -2129,6 +2135,7 @@ void gsm_cleanup_mux(struct gsm_mux *gsm)
 	for (i = NUM_DLCI-1; i >= 0; i--)
 		if (gsm->dlci[i])
 			gsm_dlci_release(gsm->dlci[i]);
+	activated--;
 	mutex_unlock(&gsm->mutex);
 
 	spin_lock_irqsave(&gsm->tx_lock, flags);
@@ -2152,6 +2159,7 @@ static int gsm_activate_mux(struct gsm_mux *gsm)
 {
 	struct gsm_dlci *dlci;
 	int i = 0;
+	char *p = NULL;
 
 	init_timer(&gsm->t2_timer);
 	gsm->t2_timer.function = gsm_control_retransmit;
@@ -2166,21 +2174,57 @@ static int gsm_activate_mux(struct gsm_mux *gsm)
 		gsm->receive = gsm1_receive;
 	gsm->error = gsm_error;
 
-	spin_lock(&gsm_mux_lock);
-	for (i = 0; i < MAX_MUX; i++) {
-		if (gsm_mux[i] == NULL) {
+	/*XXX: might want to clean that up ... and prolly move some checks*/
+	/* in mux_base_conf_set*/
+	if (mux_base_config[0]) {
+		pr_debug(DRVNAME": Config exists\n");
+		p = strstr(mux_base_config, gsm->tty->name);
+		if (p != NULL) {
+			if (sscanf(p+strlen(gsm->tty->name)+1, "%d", &i) != 1) {
+				pr_err(DRVNAME": Config not correct, abort : %s - %s - %s\n",
+						gsm->tty->name, p,
+						p+strlen(gsm->tty->name) + 1);
+				return -EINVAL;
+			}
+			if (i >= MAX_MUX) {
+				pr_err(DRVNAME": Base > MAX_MUX (%d)\n",
+						MAX_MUX);
+				return -EINVAL;
+			}
+			spin_lock(&gsm_mux_lock);
+			if (gsm_mux[i] != NULL) {
+				spin_unlock(&gsm_mux_lock);
+				pr_err(DRVNAME": Mux base %d already taken, abort\n",
+						i);
+				return -EBUSY;
+			}
 			gsm->num = i;
 			gsm_mux[i] = gsm;
-			break;
+			spin_unlock(&gsm_mux_lock);
+		} else {
+			pr_err(DRVNAME": Config doesn't exists for tty: %s\n",
+					gsm->tty->name);
+			return -EINVAL;
 		}
+	} else {
+		pr_debug(DRVNAME": No config, default behavior\n");
+		spin_lock(&gsm_mux_lock);
+		for (i = 0; i < MAX_MUX; i++) {
+			if (gsm_mux[i] == NULL) {
+				gsm->num = i;
+				gsm_mux[i] = gsm;
+				break;
+			}
+		}
+		spin_unlock(&gsm_mux_lock);
 	}
-	spin_unlock(&gsm_mux_lock);
 	if (i == MAX_MUX)
 		return -EBUSY;
 
 	dlci = gsm_dlci_alloc(gsm, 0);
 	if (dlci == NULL)
 		return -ENOMEM;
+	activated++;
 	gsm->dead = 0;		/* Tty opens are now permissible */
 	return 0;
 }
@@ -2338,11 +2382,13 @@ static int gsmld_output(struct gsm_mux *gsm, u8 *data, int len)
 static int gsmld_attach_gsm(struct tty_struct *tty, struct gsm_mux *gsm)
 {
 	int ret, i;
-	int base = gsm->num << 6; /* Base for this MUX */
+	int base; /* Base for this MUX */
+
 
 	gsm->tty = tty_kref_get(tty);
 	gsm->output = gsmld_output;
 	ret =  gsm_activate_mux(gsm);
+	base = gsm->num << 6;
 	if (ret != 0)
 		tty_kref_put(gsm->tty);
 	else {
@@ -3034,7 +3080,7 @@ static int gsm_create_network(struct gsm_dlci *dlci, struct gsm_netconfig *nc)
 struct tty_ldisc_ops tty_ldisc_packet = {
 	.owner		 = THIS_MODULE,
 	.magic           = TTY_LDISC_MAGIC,
-	.name            = "n_gsm",
+	.name            = DRVNAME,
 	.open            = gsmld_open,
 	.close           = gsmld_close,
 	.hangup          = gsmld_hangup,
@@ -3439,6 +3485,7 @@ static void gsmtty_throttle(struct tty_struct *tty)
 	if (tty->termios.c_cflag & CRTSCTS)
 		dlci->modem_tx &= ~TIOCM_DTR;
 	dlci->throttled = 1;
+	pr_err(DRVNAME ": > Throttled\n");
 	/* Send an MSC with DTR cleared */
 	gsmtty_modem_update(dlci, 0);
 }
@@ -3451,6 +3498,7 @@ static void gsmtty_unthrottle(struct tty_struct *tty)
 	if (tty->termios.c_cflag & CRTSCTS)
 		dlci->modem_tx |= TIOCM_DTR;
 	dlci->throttled = 0;
+	pr_err(DRVNAME ": < unThrottled\n");
 	/* Send an MSC with DTR set */
 	gsmtty_modem_update(dlci, 0);
 }
@@ -3569,6 +3617,32 @@ static void __exit gsm_exit(void)
 module_init(gsm_init);
 module_exit(gsm_exit);
 
+#define MAX_CONFIG_LEN 256
+static char mux_base_config[MAX_CONFIG_LEN];
+static struct kparam_string mux_conf = {
+	.string = mux_base_config,
+	.maxlen = MAX_CONFIG_LEN,
+};
+
+static int mux_base_conf_set(const char *kmessage, struct kernel_param *kp)
+{
+	int len = strlen(kmessage);
+	if (len >= MAX_CONFIG_LEN) {
+		pr_err(DRVNAME": Config string too long\n");
+		return -ENOSPC;
+	}
+	if (activated) {
+		pr_err(DRVNAME": Config is not possible while mux is activated\n");
+		return -EBUSY;
+	}
+
+	strcpy(mux_base_config, kmessage);
+	return 0;
+}
+
+module_param_call(mux_base_conf, mux_base_conf_set,
+				param_get_string, &mux_conf, 0644);
+
 
 MODULE_LICENSE("GPL");
 MODULE_ALIAS_LDISC(N_GSM0710);
-- 
1.9.1

