From b678415b381b09793bc39c77782064d0c4f883a6 Mon Sep 17 00:00:00 2001
From: Aubrey Li <aubrey.li@intel.com>
Date: Wed, 4 Jun 2014 01:44:22 -0500
Subject: [PATCH 144/152] Make the pm suspend debug message tunable more
 flexible

Add "pm_suspend_debug=0xABCD" will enable verbose message
during suspend/resume process.

	PM_SUSPEND_DBG_DEV_STATE        0x1
	PM_SUSPEND_DBG_SLP_STATE        0x2
	PM_SUSPEND_DBG_SUSPEND          0x4
	PM_SUSPEND_DBG_RESUME           0x8
	PM_SUSPEND_DBG_MISC             0x10

Signed-off-by: Aubrey Li <aubrey.li@intel.com>
---
 drivers/base/power/main.c          |   42 ++++++++++++++++++++++++------------
 drivers/pinctrl/pinctrl-baytrail.c |    3 ++-
 include/linux/suspend.h            |   13 +++++++----
 kernel/power/suspend.c             |   10 ++++-----
 4 files changed, 44 insertions(+), 24 deletions(-)

diff --git a/drivers/base/power/main.c b/drivers/base/power/main.c
index 4c558b6..b760c84 100644
--- a/drivers/base/power/main.c
+++ b/drivers/base/power/main.c
@@ -525,12 +525,14 @@ static void dpm_resume_noirq(pm_message_t state)
 		list_move_tail(&dev->power.entry, &dpm_late_early_list);
 		mutex_unlock(&dpm_list_mtx);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] resume noirq enter\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+			"PM: device[%s] driver[%s] resume noirq enter\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		error = device_resume_noirq(dev, state);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] resume noirq exit\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+			"PM: device[%s] driver[%s] resume noirq exit\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		if (error) {
@@ -613,12 +615,14 @@ static void dpm_resume_early(pm_message_t state)
 		list_move_tail(&dev->power.entry, &dpm_suspended_list);
 		mutex_unlock(&dpm_list_mtx);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] resume early enter\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+			"PM: device[%s] driver[%s] resume early enter\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		error = device_resume_early(dev, state);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] resume early exit\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+			"PM: device[%s] driver[%s] resume early exit\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		if (error) {
@@ -740,12 +744,14 @@ static void async_resume(void *data, async_cookie_t cookie)
 	struct device *dev = (struct device *)data;
 	int error;
 
-	pm_suspend_dbg("PM: device[%s] driver[%s] resume async enter\n",
+	pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+		"PM: device[%s] driver[%s] resume async enter\n",
 		dev_name(dev), dev_driver_string(dev));
 
 	error = device_resume(dev, pm_transition, true);
 
-	pm_suspend_dbg("PM: device[%s] driver[%s] resume async exit\n",
+	pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+		"PM: device[%s] driver[%s] resume async exit\n",
 		dev_name(dev), dev_driver_string(dev));
 
 	if (error)
@@ -793,12 +799,14 @@ void dpm_resume(pm_message_t state)
 
 			mutex_unlock(&dpm_list_mtx);
 
-			pm_suspend_dbg("PM: device[%s] driver[%s] resume enter\n",
+			pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+				"PM: device[%s] driver[%s] resume enter\n",
 				dev_name(dev), dev_driver_string(dev));
 
 			error = device_resume(dev, state, false);
 
-			pm_suspend_dbg("PM: device[%s] driver[%s] resume exit\n",
+			pm_suspend_dbg(PM_SUSPEND_DBG_RESUME,
+				"PM: device[%s] driver[%s] resume exit\n",
 				dev_name(dev), dev_driver_string(dev));
 
 			if (error) {
@@ -992,12 +1000,14 @@ static int dpm_suspend_noirq(pm_message_t state)
 		get_device(dev);
 		mutex_unlock(&dpm_list_mtx);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] suspend noirq enter\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_SUSPEND,
+			"PM: device[%s] driver[%s] suspend noirq enter\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		error = device_suspend_noirq(dev, state);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] suspend noirq exit\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_SUSPEND,
+			"PM: device[%s] driver[%s] suspend noirq exit\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		mutex_lock(&dpm_list_mtx);
@@ -1302,12 +1312,14 @@ int dpm_suspend(pm_message_t state)
 		get_device(dev);
 		mutex_unlock(&dpm_list_mtx);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] suspend enter\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_SUSPEND,
+			"PM: device[%s] driver[%s] suspend enter\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		error = device_suspend(dev);
 
-		pm_suspend_dbg("PM: device %s driver [%s] suspend exit\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_SUSPEND,
+			"PM: device %s driver [%s] suspend exit\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		mutex_lock(&dpm_list_mtx);
@@ -1415,12 +1427,14 @@ int dpm_prepare(pm_message_t state)
 		get_device(dev);
 		mutex_unlock(&dpm_list_mtx);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] suspend prepare enter\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_SUSPEND,
+			"PM: device[%s] driver[%s] suspend prepare enter\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		error = device_prepare(dev, state);
 
-		pm_suspend_dbg("PM: device[%s] driver[%s] suspend prepare exit\n",
+		pm_suspend_dbg(PM_SUSPEND_DBG_SUSPEND,
+			"PM: device[%s] driver[%s] suspend prepare exit\n",
 			dev_name(dev), dev_driver_string(dev));
 
 		mutex_lock(&dpm_list_mtx);
diff --git a/drivers/pinctrl/pinctrl-baytrail.c b/drivers/pinctrl/pinctrl-baytrail.c
index 7aed165..e335eea 100644
--- a/drivers/pinctrl/pinctrl-baytrail.c
+++ b/drivers/pinctrl/pinctrl-baytrail.c
@@ -328,7 +328,8 @@ static void byt_gpio_irq_handler(unsigned irq, struct irq_desc *desc)
 	unsigned virq;
 	int looplimit = 0;
 
-	pm_suspend_dbg("baytrail pinctrl irq occurs, num %d\n", irq);
+	pm_suspend_dbg(PM_SUSPEND_DBG_MISC,
+		"baytrail pinctrl irq occurs, num %d\n", irq);
 
 	/* check from GPIO controller which pin triggered the interrupt */
 	for (base = 0; base < vg->chip.ngpio; base += 32) {
diff --git a/include/linux/suspend.h b/include/linux/suspend.h
index a661b51..f8ab682 100644
--- a/include/linux/suspend.h
+++ b/include/linux/suspend.h
@@ -464,11 +464,16 @@ static inline void page_key_write(void *address) {}
 
 #endif /* !CONFIG_ARCH_SAVE_PAGE_KEYS */
 
-extern bool pm_suspend_debug;
+extern int pm_suspend_debug;
+#define	PM_SUSPEND_DBG_DEV_STATE	0x1
+#define	PM_SUSPEND_DBG_SLP_STATE	0x2
+#define	PM_SUSPEND_DBG_SUSPEND		0x4
+#define	PM_SUSPEND_DBG_RESUME		0x8
+#define	PM_SUSPEND_DBG_MISC		0x10
 extern void pm_suspend_dev_state(void);
-#define pm_suspend_dbg(fmt, arg...)                                     \
-do {                                                                    \
-        if (pm_suspend_debug)                                           \
+#define pm_suspend_dbg(flg, fmt, arg...)                                \
+do {									\
+        if (pm_suspend_debug & flg)                                     \
                 printk(KERN_INFO fmt, ##arg);				\
 } while (0)
 
diff --git a/kernel/power/suspend.c b/kernel/power/suspend.c
index 3cf9d59..77a8741 100644
--- a/kernel/power/suspend.c
+++ b/kernel/power/suspend.c
@@ -45,7 +45,7 @@ EXPORT_SYMBOL(nc_dev_state);
 
 void pm_suspend_dev_state(void)
 {
-	if (!pm_suspend_debug)
+	if (!(pm_suspend_debug & PM_SUSPEND_DBG_DEV_STATE))
 		return;
 	else {
 		if (sc_dev_state)
@@ -406,12 +406,12 @@ int pm_suspend(suspend_state_t state)
 }
 EXPORT_SYMBOL(pm_suspend);
 
-bool pm_suspend_debug = 0;
+int pm_suspend_debug = 0;
 EXPORT_SYMBOL(pm_suspend_debug);
 
-static int __init pm_suspend_debug_enable(char *str)
+static int __init pm_suspend_debug_setup(char *str)
 {
-        pm_suspend_debug = 1;
+	pm_suspend_debug = simple_strtoul(str, NULL, 0);
         return 1;
 }
-__setup("pm_suspend_debug", pm_suspend_debug_enable);
+__setup("pm_suspend_debug=", pm_suspend_debug_setup);
-- 
1.7.10.4

