From 25e43057d754bda0e7ba52fa8860a1b22e9b15e3 Mon Sep 17 00:00:00 2001
From: xiao jin <jin.xiao@intel.com>
Date: Thu, 14 May 2015 19:11:59 +0800
Subject: [PATCH] [REVERTME] dwc3 gadget.c: add dequeue_forced to avoid force
 END command

Dwc3 driver may send END command at dequeue if the req
has been START. But hardware can't process END command
clearly and usb component might stop working after END
command.

We can't send END command in this case. We add a callback
dequeue_forced. If parameter forced=0, dequeue_forced can
return -EBUSY and caller need wait for some time to make
sure hardware finishes the request.

Change-Id: I2c0f94b77d65fc8c8594ba7bc728d93c5fba3320
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1561
Signed-off-by: xiao jin <jin.xiao@intel.com>
---
 drivers/usb/dwc3/gadget.c | 24 +++++++++++++++++++-----
 1 file changed, 19 insertions(+), 5 deletions(-)

diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 7c5f4a49a06a..6ed374fdae91 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -1191,8 +1191,9 @@ static int dwc3_gadget_ep_queue(struct usb_ep *ep, struct usb_request *request,
 	return ret;
 }
 
-static int dwc3_gadget_ep_dequeue(struct usb_ep *ep,
-		struct usb_request *request)
+static int dwc3_gadget_ep_dequeue_forced(struct usb_ep *ep,
+		struct usb_request *request,
+		int forced)
 {
 	struct dwc3_request		*req = to_dwc3_request(request);
 	struct dwc3_request		*r = NULL;
@@ -1216,9 +1217,14 @@ static int dwc3_gadget_ep_dequeue(struct usb_ep *ep,
 				break;
 		}
 		if (r == req) {
-			/* wait until it is processed */
-			dwc3_stop_active_transfer(dwc, dep->number);
-			goto out1;
+			if (!forced) {
+				ret = -EBUSY;
+				goto out0;
+			} else {
+				/* wait until it is processed */
+				dwc3_stop_active_transfer(dwc, dep->number);
+				goto out1;
+			}
 		}
 		dev_err(dwc->dev, "request %p was not queued to %s\n",
 				request, ep->name);
@@ -1236,6 +1242,12 @@ out0:
 	return ret;
 }
 
+static int dwc3_gadget_ep_dequeue(struct usb_ep *ep,
+		struct usb_request *request)
+{
+	return dwc3_gadget_ep_dequeue_forced(ep, request, 1);
+}
+
 int __dwc3_gadget_ep_set_halt(struct dwc3_ep *dep, int value, int protocol)
 {
 	struct dwc3_gadget_ep_cmd_params	params;
@@ -1330,6 +1342,7 @@ static const struct usb_ep_ops dwc3_gadget_ep0_ops = {
 	.free_request	= dwc3_gadget_ep_free_request,
 	.queue		= dwc3_gadget_ep0_queue,
 	.dequeue	= dwc3_gadget_ep_dequeue,
+	.dequeue_forced	= dwc3_gadget_ep_dequeue_forced,
 	.set_halt	= dwc3_gadget_ep0_set_halt,
 	.set_wedge	= dwc3_gadget_ep_set_wedge,
 };
@@ -1341,6 +1354,7 @@ static const struct usb_ep_ops dwc3_gadget_ep_ops = {
 	.free_request	= dwc3_gadget_ep_free_request,
 	.queue		= dwc3_gadget_ep_queue,
 	.dequeue	= dwc3_gadget_ep_dequeue,
+	.dequeue_forced	= dwc3_gadget_ep_dequeue_forced,
 	.set_halt	= dwc3_gadget_ep_set_halt,
 	.set_wedge	= dwc3_gadget_ep_set_wedge,
 };
-- 
1.9.1

