From 101aac23e9d244d1526587a547216c981c1c53c3 Mon Sep 17 00:00:00 2001
Message-Id: <101aac23e9d244d1526587a547216c981c1c53c3.1417780177.git.chang-joon.lee@intel.com>
In-Reply-To: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
References: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
From: Arun Siluvery <arun.siluvery@linux.intel.com>
Date: Thu, 13 Nov 2014 17:58:42 +0000
Subject: [PATCH 09/30] Revert "FOR_UPSTREAM [VPG]: drm/i915: Initialize bdw
 workarounds in logical ring mode too"

WA framework is reworked in upstream and this is reworked based on
the new framework hence reverting this patch.

For: VIZ-4092
Change-Id: I93770fc0f91fa979dfd7ff2a291060cd32cb7284
Signed-off-by: Arun Siluvery <arun.siluvery@linux.intel.com>
---
 drivers/gpu/drm/i915/i915_gem_context.c |    2 +-
 drivers/gpu/drm/i915/intel_lrc.c        |   66 --------------------------
 drivers/gpu/drm/i915/intel_ringbuffer.c |   79 +++++++++++++------------------
 drivers/gpu/drm/i915/intel_ringbuffer.h |    6 +--
 4 files changed, 36 insertions(+), 117 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_context.c b/drivers/gpu/drm/i915/i915_gem_context.c
index 3fcad36..865e43b 100644
--- a/drivers/gpu/drm/i915/i915_gem_context.c
+++ b/drivers/gpu/drm/i915/i915_gem_context.c
@@ -709,7 +709,7 @@ done:
 
 	if (uninitialized) {
 		if (ring->init_context) {
-			ret = ring->init_context(ring->buffer);
+			ret = ring->init_context(ring);
 			if (ret)
 				DRM_ERROR("ring init context: %d\n", ret);
 		}
diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index 832d249..2711b54 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -1215,62 +1215,6 @@ int intel_logical_ring_begin(struct intel_ringbuffer *ringbuf, int num_dwords)
 	return 0;
 }
 
-static inline void intel_logical_ring_emit_wa(struct intel_ringbuffer *ringbuf,
-				       u32 addr, u32 value)
-{
-	struct intel_engine_cs *ring = ringbuf->ring;
-	struct drm_device *dev = ring->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	if (WARN_ON(dev_priv->num_wa_regs >= I915_MAX_WA_REGS))
-		return;
-
-	intel_logical_ring_emit(ringbuf, MI_LOAD_REGISTER_IMM(1));
-	intel_logical_ring_emit(ringbuf, addr);
-	intel_logical_ring_emit(ringbuf, value);
-
-	dev_priv->intel_wa_regs[dev_priv->num_wa_regs].addr = addr;
-	dev_priv->intel_wa_regs[dev_priv->num_wa_regs].mask = value & 0xFFFF;
-	/* value is updated with the status of remaining bits of this
-	 * register when it is read from debugfs file
-	 */
-	dev_priv->intel_wa_regs[dev_priv->num_wa_regs].value = value;
-	dev_priv->num_wa_regs++;
-}
-
-static int bdw_init_logical_workarounds(struct intel_ringbuffer *ringbuf)
-{
-	int ret;
-	struct intel_engine_cs *ring = ringbuf->ring;
-	struct drm_device *dev = ring->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	/*
-	 * workarounds applied in this fn are part of register state context,
-	 * they need to be re-initialized followed by gpu reset, suspend/resume,
-	 * module reload.
-	 */
-	dev_priv->num_wa_regs = 0;
-	memset(dev_priv->intel_wa_regs, 0, sizeof(dev_priv->intel_wa_regs));
-
-	/*
-	 * update the number of dwords required based on the
-	 * actual number of workarounds applied
-	 */
-	ret = intel_logical_ring_begin(ringbuf, 24);
-	if (ret)
-		return ret;
-
-	bdw_emit_workarounds(ringbuf);
-
-	intel_logical_ring_advance(ringbuf);
-
-	DRM_DEBUG_DRIVER("Number of Workarounds applied: %d\n",
-			 dev_priv->num_wa_regs);
-
-	return 0;
-}
-
 static int gen8_init_common_ring(struct intel_engine_cs *ring)
 {
 	struct drm_device *dev = ring->dev;
@@ -1571,10 +1515,6 @@ static int logical_render_ring_init(struct drm_device *dev)
 	if (HAS_L3_DPF(dev))
 		ring->irq_keep_mask |= GT_RENDER_L3_PARITY_ERROR_INTERRUPT;
 
-	if (IS_BROADWELL(dev))
-		ring->init_context = bdw_init_logical_workarounds;
-	ring->emit_wa = intel_logical_ring_emit_wa;
-
 	ring->init = gen8_init_render_ring;
 	ring->cleanup = intel_fini_pipe_control;
 	ring->get_seqno = gen8_get_seqno;
@@ -2043,12 +1983,6 @@ int intel_lr_context_deferred_create(struct intel_context *ctx,
 	}
 
 	if (ring->id == RCS && !ctx->rcs_initialized) {
-		if (ring->init_context) {
-			ret = ring->init_context(ringbuf);
-			if (ret)
-				DRM_ERROR("ring init context: %d\n", ret);
-		}
-
 		ret = intel_lr_context_render_state_init(ring, ctx);
 		if (ret) {
 			DRM_ERROR("Init render state failed: %d\n", ret);
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.c b/drivers/gpu/drm/i915/intel_ringbuffer.c
index 2512933..e8ee76e 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@ -1059,10 +1059,9 @@ get_pipe_control_scratch_addr(struct intel_engine_cs *ring)
 	return ring->scratch.gtt_offset;
 }
 
-static inline void intel_ring_emit_wa(struct intel_ringbuffer *ringbuf,
+static inline void intel_ring_emit_wa(struct intel_engine_cs *ring,
 				       u32 addr, u32 value)
 {
-	struct intel_engine_cs *ring = ringbuf->ring;
 	struct drm_device *dev = ring->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 
@@ -1084,44 +1083,62 @@ static inline void intel_ring_emit_wa(struct intel_ringbuffer *ringbuf,
 	return;
 }
 
-void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
+static int bdw_init_workarounds(struct intel_engine_cs *ring)
 {
-	struct intel_engine_cs *ring = ringbuf->ring;
+	int ret;
+	struct drm_device *dev = ring->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	/*
+	 * workarounds applied in this fn are part of register state context,
+	 * they need to be re-initialized followed by gpu reset, suspend/resume,
+	 * module reload.
+	 */
+	dev_priv->num_wa_regs = 0;
+	memset(dev_priv->intel_wa_regs, 0, sizeof(dev_priv->intel_wa_regs));
+
+	/*
+	 * update the number of dwords required based on the
+	 * actual number of workarounds applied
+	 */
+	ret = intel_ring_begin(ring, 24);
+	if (ret)
+		return ret;
 
 	/* WaDisablePartialInstShootdown:bdw */
 	/* WaDisableThreadStallDopClockGating:bdw */
 	/* FIXME: Unclear whether we really need this on production bdw. */
-	ring->emit_wa(ringbuf, GEN8_ROW_CHICKEN,
+	intel_ring_emit_wa(ring, GEN8_ROW_CHICKEN,
 			   _MASKED_BIT_ENABLE(PARTIAL_INSTRUCTION_SHOOTDOWN_DISABLE
 					     | STALL_DOP_GATING_DISABLE));
 
 	/* WaDisableDopClockGating:bdw May not be needed for production */
-	ring->emit_wa(ringbuf, GEN7_ROW_CHICKEN2,
+	intel_ring_emit_wa(ring, GEN7_ROW_CHICKEN2,
 			   _MASKED_BIT_ENABLE(DOP_CLOCK_GATING_DISABLE));
 
 	/*
 	 * This GEN8_CENTROID_PIXEL_OPT_DIS W/A is only needed for
 	 * pre-production hardware
 	 */
-	ring->emit_wa(ringbuf, HALF_SLICE_CHICKEN3,
+	intel_ring_emit_wa(ring, HALF_SLICE_CHICKEN3,
 			   _MASKED_BIT_ENABLE(GEN8_CENTROID_PIXEL_OPT_DIS
 					      | GEN8_SAMPLER_POWER_BYPASS_DIS));
 
-	ring->emit_wa(ringbuf, GEN7_HALF_SLICE_CHICKEN1,
+	intel_ring_emit_wa(ring, GEN7_HALF_SLICE_CHICKEN1,
 			   _MASKED_BIT_ENABLE(GEN7_SINGLE_SUBSCAN_DISPATCH_ENABLE));
 
-	ring->emit_wa(ringbuf, COMMON_SLICE_CHICKEN2,
+	intel_ring_emit_wa(ring, COMMON_SLICE_CHICKEN2,
 			   _MASKED_BIT_ENABLE(GEN8_CSC2_SBE_VUE_CACHE_CONSERVATIVE));
 
 	/* Use Force Non-Coherent whenever executing a 3D context. This is a
 	 * workaround for for a possible hang in the unlikely event a TLB
 	 * invalidation occurs during a PSD flush.
 	 */
-	ring->emit_wa(ringbuf, HDC_CHICKEN0,
+	intel_ring_emit_wa(ring, HDC_CHICKEN0,
 			   _MASKED_BIT_ENABLE(HDC_FORCE_NON_COHERENT));
 
 	/* Wa4x4STCOptimizationDisable:bdw */
-	ring->emit_wa(ringbuf, CACHE_MODE_1,
+	intel_ring_emit_wa(ring, CACHE_MODE_1,
 			   _MASKED_BIT_ENABLE(GEN8_4x4_STC_OPTIMIZATION_DISABLE));
 
 	/*
@@ -1132,34 +1149,8 @@ void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
 	 * disable bit, which we don't touch here, but it's good
 	 * to keep in mind (see 3DSTATE_PS and 3DSTATE_WM).
 	 */
-	ring->emit_wa(ringbuf, GEN7_GT_MODE,
+	intel_ring_emit_wa(ring, GEN7_GT_MODE,
 			   GEN6_WIZ_HASHING_MASK | GEN6_WIZ_HASHING_16x4);
-}
-
-static int bdw_init_workarounds(struct intel_ringbuffer *ringbuf)
-{
-	int ret;
-	struct intel_engine_cs *ring = ringbuf->ring;
-	struct drm_device *dev = ring->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	/*
-	 * workarounds applied in this fn are part of register state context,
-	 * they need to be re-initialized followed by gpu reset, suspend/resume,
-	 * module reload.
-	 */
-	dev_priv->num_wa_regs = 0;
-	memset(dev_priv->intel_wa_regs, 0, sizeof(dev_priv->intel_wa_regs));
-
-	/*
-	 * update the number of dwords required based on the
-	 * actual number of workarounds applied
-	 */
-	ret = intel_ring_begin(ring, 24);
-	if (ret)
-		return ret;
-
-	bdw_emit_workarounds(ringbuf);
 
 	intel_ring_advance(ring);
 
@@ -1169,10 +1160,9 @@ static int bdw_init_workarounds(struct intel_ringbuffer *ringbuf)
 	return 0;
 }
 
-static int chv_init_workarounds(struct intel_ringbuffer *ringbuf)
+static int chv_init_workarounds(struct intel_engine_cs *ring)
 {
 	int ret;
-	struct intel_engine_cs *ring = ringbuf->ring;
 	struct drm_device *dev = ring->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 
@@ -1189,19 +1179,19 @@ static int chv_init_workarounds(struct intel_ringbuffer *ringbuf)
 		return ret;
 
 	/* WaDisablePartialInstShootdown:chv */
-	intel_ring_emit_wa(ringbuf, GEN8_ROW_CHICKEN,
+	intel_ring_emit_wa(ring, GEN8_ROW_CHICKEN,
 			   _MASKED_BIT_ENABLE(PARTIAL_INSTRUCTION_SHOOTDOWN_DISABLE));
 
 	/* WaDisableThreadStallDopClockGating:chv */
-	intel_ring_emit_wa(ringbuf, GEN8_ROW_CHICKEN,
+	intel_ring_emit_wa(ring, GEN8_ROW_CHICKEN,
 			   _MASKED_BIT_ENABLE(STALL_DOP_GATING_DISABLE));
 
 	/* WaDisableDopClockGating:chv (pre-production hw) */
-	intel_ring_emit_wa(ringbuf, GEN7_ROW_CHICKEN2,
+	intel_ring_emit_wa(ring, GEN7_ROW_CHICKEN2,
 			   _MASKED_BIT_ENABLE(DOP_CLOCK_GATING_DISABLE));
 
 	/* WaDisableSamplerPowerBypass:chv (pre-production hw) */
-	intel_ring_emit_wa(ringbuf, HALF_SLICE_CHICKEN3,
+	intel_ring_emit_wa(ring, HALF_SLICE_CHICKEN3,
 			   _MASKED_BIT_ENABLE(GEN8_SAMPLER_POWER_BYPASS_DIS));
 
 	intel_ring_advance(ring);
@@ -2802,7 +2792,6 @@ int intel_init_render_ring_buffer(struct drm_device *dev)
 				ring->init_context = chv_init_workarounds;
 			else
 				ring->init_context = bdw_init_workarounds;
-			ring->emit_wa = intel_ring_emit_wa;
 			ring->flush = gen8_render_ring_flush;
 			ring->irq_get = gen8_ring_get_irq;
 			ring->irq_put = gen8_ring_put_irq;
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.h b/drivers/gpu/drm/i915/intel_ringbuffer.h
index 68d8919..c01afc6 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.h
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.h
@@ -187,10 +187,7 @@ struct intel_engine_cs {
 
 	int		(*init)(struct intel_engine_cs *ring);
 
-	int		(*init_context)(struct intel_ringbuffer *ringbuf);
-
-	void	(*emit_wa)(struct intel_ringbuffer *ringbuf,
-		       u32 addr, u32 value);
+	int		(*init_context)(struct intel_engine_cs *ring);
 
 	void		(*write_tail)(struct intel_engine_cs *ring,
 				      u32 value);
@@ -472,7 +469,6 @@ int intel_init_vebox_ring_buffer(struct drm_device *dev);
 u64 intel_ring_get_active_head(struct intel_engine_cs *ring);
 void intel_ring_setup_status_page(struct intel_engine_cs *ring);
 u32 get_pipe_control_scratch_addr(struct intel_engine_cs *ring);
-void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf);
 
 static inline u32 intel_ring_get_tail(struct intel_ringbuffer *ringbuf)
 {
-- 
1.7.9.5

