From 98baf5969471cdcfbf44ae7866ee930dd99e5557 Mon Sep 17 00:00:00 2001
Message-Id: <98baf5969471cdcfbf44ae7866ee930dd99e5557.1425610844.git.chang-joon.lee@intel.com>
In-Reply-To: <6fa2ab23adf6d7de781e906d04a0224410262d9b.1425610844.git.chang-joon.lee@intel.com>
References: <6fa2ab23adf6d7de781e906d04a0224410262d9b.1425610844.git.chang-joon.lee@intel.com>
From: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
Date: Wed, 31 Dec 2014 11:21:02 +0530
Subject: [PATCH 09/27] MUST_REBASE [VPG]: video/adf: Add support for CHT B0
 canvas color

This patch adds support for Cherryview display canvas color
(aka. background color). This feature is available on CHT B0+
onwards on pipe-B.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

Issue: GMINL-5605
Change-Id: I3f6798325d4f17f43be1aefdd6694dc57bf40a7e
Signed-off-by: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
---
 .../video/adf/intel/core/common/dp/gen_dp_pipe.c   |    1 +
 .../video/adf/intel/core/common/dsi/gen_dsi_pipe.c |    1 +
 .../adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c |    1 +
 drivers/video/adf/intel/core/vlv/vlv_pipe.c        |   26 ++++++++++++++++++++
 drivers/video/adf/intel/core/vlv/vlv_pri_plane.c   |   17 +++++++++++++
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |    2 ++
 .../video/adf/intel/include/core/vlv/vlv_pipe.h    |    2 ++
 .../adf/intel/include/core/vlv/vlv_pri_plane.h     |    4 ++-
 include/uapi/video/intel_adf.h                     |   12 ++++++++-
 9 files changed, 64 insertions(+), 2 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
index 5ec8080..98a8a2a 100644
--- a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
+++ b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
@@ -478,6 +478,7 @@ static void dp_pipe_pre_validate(struct intel_pipe *pipe,
 	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
 	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
+	vlv_pipe_pre_validate(pipe, custom);
 	vlv_pm_pre_validate(intel_config, custom, pipeline, pipe);
 }
 
diff --git a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
index 23c228a..964b524 100644
--- a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
+++ b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
@@ -458,6 +458,7 @@ static void dsi_pre_validate(struct intel_pipe *pipe,
 	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
 	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
+	vlv_pipe_pre_validate(pipe, custom);
 	vlv_pm_pre_validate(intel_config, custom, pipeline, pipe);
 }
 
diff --git a/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
index be9c08e..169a79b 100644
--- a/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
+++ b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
@@ -184,6 +184,7 @@ void hdmi_pre_validate(struct intel_pipe *pipe,
 	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
 	pr_debug("ADF: HDMI: %s\n", __func__);
+	vlv_pipe_pre_validate(pipe, custom);
 	vlv_pm_pre_validate(intel_config, custom, pipeline, pipe);
 }
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipe.c b/drivers/video/adf/intel/core/vlv/vlv_pipe.c
index 884cfd9..ef34cf2 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipe.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipe.c
@@ -454,3 +454,29 @@ bool vlv_pipe_destroy(struct vlv_pipe *pipe)
 
 	return true;
 }
+
+/*
+ * Take interface level configurations to pipe varibles
+ * to use them in flip time.
+ */
+void vlv_pipe_pre_validate(struct intel_pipe *pipe,
+		struct intel_adf_post_custom_data *custom)
+{
+	struct intel_pipeline *pipeline = pipe->pipeline;
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct intel_adf_config *custom_cfg;
+	int i;
+
+	for (i = 0; i < custom->n_configs; i++) {
+		custom_cfg = &custom->configs[i];
+
+		if ((custom_cfg->type == INTEL_ADF_CONFIG_COLOR) &&
+		    (pipe->base.idx == PIPE_B) &&
+		    (custom_cfg->color.flags & INTEL_ADF_COLOR_CANVAS)) {
+
+			vlv_pipeline->pplane.canvas_updated = true;
+			vlv_pipeline->pplane.canvas_col =
+				custom_cfg->color.color;
+		}
+	}
+}
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
index 507a8f5..884025f 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
@@ -327,6 +327,19 @@ static int vlv_pri_calculate(struct intel_plane *plane,
 			intel_pipe->ops->get_vsync_counter(intel_pipe, 0);
 	}
 
+	/* Setting Canvas Color */
+	if ((intel_adf_get_platform_id() == gen_cherryview) &&
+	    STEP_FROM(pipeline->dc_stepping, STEP_B0) && (pipe == PIPE_B) &&
+	    (pri_plane->canvas_updated == true)) {
+		uint64_t color = 0;
+
+		/* BGR 8bpc ==> RGB 10bpc */
+		for (i = 0; i < 3; i++)
+			color |= ((((pri_plane->canvas_col >> (i*8)) &
+				    0xFF) * 1023/255) << ((2-i)*10));
+		regs->canvas_col = color;
+	}
+
 	regs->stride = buf->stride;
 	regs->linearoff = src_y * regs->stride + src_x * bpp;
 	dspaddr_offset = vlv_compute_page_offset(&src_x, &src_y,
@@ -395,6 +408,10 @@ static void vlv_pri_flip(struct intel_plane *plane,
 	REG_WRITE(pri_plane->stride_offset, regs->stride);
 	REG_WRITE(pri_plane->tiled_offset, regs->tileoff);
 	REG_WRITE(pri_plane->linear_offset, regs->linearoff);
+	if (pri_plane->canvas_updated) {
+		REG_WRITE(CHT_PIPE_B_CANVAS_REG, regs->canvas_col);
+		pri_plane->canvas_updated = false;
+	}
 
 	REG_WRITE(pri_plane->offset, regs->dspcntr);
 	I915_MODIFY_DISPBASE(pri_plane->surf_offset, regs->surfaddr);
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index e133305..0c8adc7 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -4261,6 +4261,8 @@ extern int chv_cursor_offsets[];
 #define SPCONSTALPHA(pipe, plane) _PIPE(pipe * 2 + plane, _SPACONSTALPHA, _SPBCONSTALPHA)
 #define SPGAMC(pipe, plane) _PIPE(pipe * 2 + plane, _SPAGAMC, _SPBGAMC)
 
+#define CHT_PIPE_B_CANVAS_REG	(VLV_DISPLAY_BASE + 0x61A04)
+
 #define	  PLANE_RESERVED_REG_BIT_2_ENABLE	(1 << 2)
 #define	SPRITE_FORCE_BOTTOM	(1<<2)
 #define	SPRITE_ZORDER_ENABLE	(1<<0)
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h b/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h
index 9cb640b..aa232fe 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h
@@ -71,6 +71,8 @@ u32 vlv_pipe_set_event(struct vlv_pipe *pipe, u32 event, bool enabled);
 u32 vlv_pipe_get_event(struct vlv_pipe *pipe, u32 *event);
 void vlv_pipe_evade_vblank(struct vlv_pipe *pipe,
 		struct drm_mode_modeinfo *mode, bool *wait_for_vblank);
+void vlv_pipe_pre_validate(struct intel_pipe *pipe,
+		struct intel_adf_post_custom_data *custom);
 bool vlv_pipe_init(struct vlv_pipe *pipe, enum pipe enum_pipe);
 bool vlv_pipe_destroy(struct vlv_pipe *pipe);
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
index 41256dd..3c063fa 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
@@ -25,6 +25,7 @@ enum {
 struct pri_plane_regs_value {
 	u32 dspcntr;
 	u32 stride;
+	u32 canvas_col;
 	unsigned long linearoff;
 	unsigned long tileoff;
 	unsigned long surfaddr;
@@ -55,7 +56,8 @@ struct vlv_pri_plane {
 	u32 tiled_offset;
 	u32 linear_offset;
 	bool enabled;
-
+	bool canvas_updated;
+	u32 canvas_col;
 	struct vlv_pri_plane_context ctx;
 };
 
diff --git a/include/uapi/video/intel_adf.h b/include/uapi/video/intel_adf.h
index 61cedab..ac76bee 100644
--- a/include/uapi/video/intel_adf.h
+++ b/include/uapi/video/intel_adf.h
@@ -125,9 +125,19 @@ struct intel_adf_plane {
 	enum intel_adf_colorspace colorspace:8;
 };
 
+enum intel_adf_color_flags {
+	INTEL_ADF_COLOR_NONE		= 0x00000000,
+
+	/* Canvas color tob used by planes. */
+	INTEL_ADF_COLOR_CANVAS		= 0x00000001,
+
+	/* For future use  */
+	INTEL_ADF_COLOR_PRIVATE_1	= 0x00000002,
+};
+
 /* Configuration for describing a constant color plane */
 struct intel_adf_color {
-	/* Placeholder for future flags. Set to 0 */
+	/* Combination of flags from the intel_adf_color_flags enum */
 	__u32 flags;
 
 	/* device specific color format */
-- 
1.7.9.5

