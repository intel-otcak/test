From 18acc97c37c244bc31fcb1c6f02ee3dda7b37d8c Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Fri, 11 Dec 2015 16:01:54 +0530
Subject: [PATCH 4/8] USBC/PHY: Add CC float in addition to pull-up and
 pull-down

The pull-up or pull-down on cc line should made floating before enable
toggling to re detect the port connected on error conditions.

Change-Id: I14e0437af450d7cb0e96504ba2e159e0cf6715c7
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-12097
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/447411
---
 drivers/usb/typec/phy-fusb300.c | 23 +++++++++++++++--------
 include/linux/usb_typec_phy.h   |  8 +++++++-
 2 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/drivers/usb/typec/phy-fusb300.c b/drivers/usb/typec/phy-fusb300.c
index aaa3cbd..dab1970 100644
--- a/drivers/usb/typec/phy-fusb300.c
+++ b/drivers/usb/typec/phy-fusb300.c
@@ -490,7 +490,8 @@ static int fusb300_switch_mode(struct typec_phy *phy, enum typec_mode mode)
 	return 0;
 }
 
-static int fusb300_set_pu_pd(struct typec_phy *phy, bool pu_pd)
+static int fusb300_set_pu_pd(struct typec_phy *phy,
+					enum typec_cc_pull pull)
 {
 	struct fusb300_chip *chip;
 	u8 val = 0;
@@ -500,13 +501,13 @@ static int fusb300_set_pu_pd(struct typec_phy *phy, bool pu_pd)
 	chip = dev_get_drvdata(phy->dev);
 
 	dev_dbg(phy->dev, "%s cc:%d, pi_pd:%d\n", __func__,
-				phy->valid_cc, pu_pd);
+				phy->valid_cc, pull);
 
 	mutex_lock(&chip->lock);
 	if (phy->valid_cc == TYPEC_PIN_CC1) {
-		if (pu_pd)
+		if (pull == TYPEC_CC_PULL_UP)
 			val |= FUSB300_SWITCH0_PU_CC1_EN;
-		else
+		else if (pull == TYPEC_CC_PULL_DOWN)
 			val |= FUSB300_SWITCH0_PD_CC1_EN;
 
 		regmap_update_bits(chip->map, FUSB300_SWITCH0_REG,
@@ -514,28 +515,34 @@ static int fusb300_set_pu_pd(struct typec_phy *phy, bool pu_pd)
 			val);
 
 	} else if (phy->valid_cc == TYPEC_PIN_CC2) {
-		if (pu_pd)
+		if (pull == TYPEC_CC_PULL_UP)
 			val |= FUSB300_SWITCH0_PU_CC2_EN;
-		else
+		else if (pull == TYPEC_CC_PULL_DOWN)
 			val |= FUSB300_SWITCH0_PD_CC2_EN;
 
 		regmap_update_bits(chip->map, FUSB300_SWITCH0_REG,
 			FUSB300_SWITCH0_PU_CC2_EN | FUSB300_SWITCH0_PD_CC2_EN,
 			val);
+	} else {
+		dev_warn(phy->dev, "%s: Invalid CC\n", __func__);
+		goto pu_pd_error;
 	}
 
 	/* If cc pulled up in UFP state, this pull-up is for pr swap.
 	 * Change the state to TYPEC_STATE_PD_PU_SWAP.
 	 */
-	if (pu_pd && phy->state == TYPEC_STATE_ATTACHED_UFP)
+	if (pull == TYPEC_CC_PULL_UP
+			&& phy->state == TYPEC_STATE_ATTACHED_UFP)
 		phy->state = TYPEC_STATE_PD_PU_SWAP;
 
 	/* If cc pulled down in DFP state, this pull-down is for pr swap.
 	 * Change the state to TYPEC_STATE_PU_PD_SWAP.
 	 */
-	if ((!pu_pd) && (phy->state == TYPEC_STATE_ATTACHED_DFP))
+	if (pull == TYPEC_CC_PULL_DOWN
+			&& phy->state == TYPEC_STATE_ATTACHED_DFP)
 		phy->state = TYPEC_STATE_PU_PD_SWAP;
 
+pu_pd_error:
 	mutex_unlock(&chip->lock);
 	return 0;
 }
diff --git a/include/linux/usb_typec_phy.h b/include/linux/usb_typec_phy.h
index 03c1575..a4ec743 100644
--- a/include/linux/usb_typec_phy.h
+++ b/include/linux/usb_typec_phy.h
@@ -42,6 +42,12 @@ enum typec_state {
 	TYPEC_STATE_PU_PD_SWAP,
 };
 
+enum typec_cc_pull {
+	TYPEC_CC_PULL_NONE,
+	TYPEC_CC_PULL_UP,
+	TYPEC_CC_PULL_DOWN,
+};
+
 enum typec_cc_pin {
 	TYPEC_PIN_CC1 = 1,
 	TYPEC_PIN_CC2 = 2,
@@ -208,7 +214,7 @@ struct typec_phy {
 	void (*notify_protocol)(struct typec_phy *phy, unsigned long event);
 	bool (*is_pd_capable)(struct typec_phy *phy);
 	int (*enable_autocrc)(struct typec_phy *phy, bool en);
-	int (*set_pu_pd)(struct typec_phy *phy, bool pu_pd);
+	int (*set_pu_pd)(struct typec_phy *phy, enum typec_cc_pull pull);
 	int (*enable_detection)(struct typec_phy *phy, bool en);
 	bool (*is_vbus_on)(struct typec_phy *phy);
 	bool (*is_vconn_enabled)(struct typec_phy *phy);
-- 
1.9.1

