From 9933d1f6fd341e1889580f29b380932a764434a2 Mon Sep 17 00:00:00 2001
From: dcashman <dcashman@google.com>
Date: Tue, 29 Dec 2015 13:26:42 -0800
Subject: [PATCH 661/687] Revert "arm: mm: support ARCH_MMAP_RND_BITS."

This reverts commit 04363a1317dae5d90078d69b5b240710149f7f92.

Bug: 25973686
Signed-off-by: Daniel Cashman <dcashman@google.com>
Change-Id: Idb56805fc7f14dd144f18a7c602fe78ab804cd8e
---
 arch/arm/Kconfig   | 24 ------------------------
 arch/arm/mm/mmap.c |  7 ++-----
 2 files changed, 2 insertions(+), 29 deletions(-)

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index f4093b7..f3b988e 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -294,30 +294,6 @@ config MMU
 	  Select if you want MMU-based virtualised addressing space
 	  support by paged memory management. If unsure, say 'Y'.
 
-config ARCH_MMAP_RND_BITS_MIN
-	int
-	default 8
-
-config ARCH_MMAP_RND_BITS_MAX
-	int
-	default 14 if MMU && PAGE_OFFSET=0x40000000
-	default 15 if MMU && PAGE_OFFSET=0x80000000
-	default 16 if MMU
-	default 8
-
-config ARCH_MMAP_RND_BITS
-	int "Number of bits to use for ASLR of mmap base address" if EXPERT
-	range ARCH_MMAP_RND_BITS_MIN ARCH_MMAP_RND_BITS_MAX
-	default ARCH_MMAP_RND_BITS_MIN
-	help
-	  This value can be used to select the number of bits to use to
-	  determine the random offset to the base address of vma regions
-	  resulting from mmap allocations. This value will be bounded
-	  by the architecture's minimum and maximum supported values.
-
-	  This value can be changed after boot using the
-	  /proc/sys/kernel/mmap_rnd_bits tunable
-
 #
 # The "ARM system type" choice list is ordered alphabetically by option
 # text.  Please add new entries in the option alphabetic order.
diff --git a/arch/arm/mm/mmap.c b/arch/arm/mm/mmap.c
index 290cbb3..5e85ed3 100644
--- a/arch/arm/mm/mmap.c
+++ b/arch/arm/mm/mmap.c
@@ -11,10 +11,6 @@
 #include <linux/random.h>
 #include <asm/cachetype.h>
 
-int mmap_rnd_bits_min = CONFIG_ARCH_MMAP_RND_BITS_MIN;
-int mmap_rnd_bits_max = CONFIG_ARCH_MMAP_RND_BITS_MAX;
-int mmap_rnd_bits = CONFIG_ARCH_MMAP_RND_BITS;
-
 #define COLOUR_ALIGN(addr,pgoff)		\
 	((((addr)+SHMLBA-1)&~(SHMLBA-1)) +	\
 	 (((pgoff)<<PAGE_SHIFT) & (SHMLBA-1)))
@@ -177,9 +173,10 @@ void arch_pick_mmap_layout(struct mm_struct *mm)
 {
 	unsigned long random_factor = 0UL;
 
+	/* 8 bits of randomness in 20 address space bits */
 	if ((current->flags & PF_RANDOMIZE) &&
 	    !(current->personality & ADDR_NO_RANDOMIZE))
-		random_factor = (get_random_int() % (1 << mmap_rnd_bits)) << PAGE_SHIFT;
+		random_factor = (get_random_int() % (1 << 8)) << PAGE_SHIFT;
 
 	if (mmap_is_legacy()) {
 		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;
-- 
1.9.1

