From e587d607fa7735b9a54a9eea66d41953cfabe7a2 Mon Sep 17 00:00:00 2001
Message-Id: <e587d607fa7735b9a54a9eea66d41953cfabe7a2.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Deepak S <deepak.s@intel.com>
Date: Fri, 7 Mar 2014 14:01:05 +0530
Subject: [PATCH 107/312] FOR_UPSTREAM [VPG]: drm/i915: Add Punit/Fuse
 SideBand debugfs read.

This patch exposes 2 new debugfs interfaces
1. i915_punit_read
2. i915_fuse_read

These interfaces provide capabilty to access Punit registers through
IOSF ports, which is helpful in validating turbo/rps freq change/algo
at runtime.

Issue: VIZ-3646
Change-Id: I40be250f450637d8a5f756ffce9c15dee0f2e87d
Signed-off-by: Deepak S <deepak.s@intel.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c |  139 +++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_drv.h     |   11 +++
 2 files changed, 150 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index dcb59f6..becb9c9 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -3979,6 +3979,143 @@ static const struct file_operations i915_cur_wm_latency_fops = {
 	.write = cur_wm_latency_write
 };
 
+static ssize_t
+i915_sb_punit_read(struct file *filp, char __user *ubuf, size_t max,
+		   loff_t *ppos)
+{
+	struct drm_device *dev = filp->private_data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char buf[] = "punit read is not defined";
+	u32 rval, len;
+
+	if (!(IS_VALLEYVIEW(dev)))
+		return -ENODEV;
+
+	if (!dev_priv->debug.punit_read)
+		return 0;
+
+	flush_delayed_work(&dev_priv->rps.delayed_resume_work);
+
+	mutex_lock(&dev_priv->rps.hw_lock);
+	rval = vlv_punit_read(dev_priv, dev_priv->debug.punit_read);
+	mutex_unlock(&dev_priv->rps.hw_lock);
+
+	len = snprintf(buf, sizeof(buf),
+			"0x%x: 0x%x\n", dev_priv->debug.punit_read, rval);
+	if (len > sizeof(buf))
+		len = sizeof(buf);
+
+	dev_priv->debug.punit_read = 0;
+	return simple_read_from_buffer(ubuf, max, ppos, buf, len);
+}
+
+
+static ssize_t
+i915_sb_punit_write(struct file *filp, const char __user *ubuf, size_t cnt,
+		    loff_t *ppos)
+{
+	struct drm_device *dev = filp->private_data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char buf[20];
+	int ret;
+
+	if (!(IS_VALLEYVIEW(dev)))
+		return -ENODEV;
+
+	if (cnt > 0) {
+		if (cnt > sizeof(buf) - 1)
+			return -EINVAL;
+
+		if (copy_from_user(buf, ubuf, cnt))
+			return -EFAULT;
+
+		buf[cnt] = 0;
+
+		ret = kstrtoul(buf, 0,
+				(unsigned long *)&dev_priv->debug.punit_read);
+		if (ret)
+			return -EINVAL;
+	}
+
+	return cnt;
+}
+
+static const struct file_operations i915_punit_read_fops = {
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.read = i915_sb_punit_read,
+	.write = i915_sb_punit_write,
+	.llseek = default_llseek,
+};
+
+static ssize_t
+i915_sb_fuse_read(struct file *filp, char __user *ubuf, size_t max,
+		   loff_t *ppos)
+{
+	struct drm_device *dev = filp->private_data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char buf[] = "punit read is not defined";
+	u32 rval, len;
+
+	if (!(IS_VALLEYVIEW(dev)))
+		return -ENODEV;
+
+	if (!dev_priv->debug.fuse_read)
+		return 0;
+
+	flush_delayed_work(&dev_priv->rps.delayed_resume_work);
+
+	mutex_lock(&dev_priv->rps.hw_lock);
+	rval = vlv_nc_read(dev_priv, dev_priv->debug.fuse_read);
+	mutex_unlock(&dev_priv->rps.hw_lock);
+
+	len = snprintf(buf, sizeof(buf),
+			"0x%x: 0x%x\n", dev_priv->debug.fuse_read, rval);
+	if (len > sizeof(buf))
+		len = sizeof(buf);
+
+	dev_priv->debug.fuse_read = 0;
+	return simple_read_from_buffer(ubuf, max, ppos, buf, len);
+}
+
+static ssize_t
+i915_sb_fuse_write(struct file *filp, const char __user *ubuf, size_t cnt,
+		    loff_t *ppos)
+{
+	struct drm_device *dev = filp->private_data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char buf[20];
+	int ret;
+
+	if (!(IS_VALLEYVIEW(dev)))
+		return -ENODEV;
+
+	if (cnt > 0) {
+		if (cnt > sizeof(buf) - 1)
+			return -EINVAL;
+
+		if (copy_from_user(buf, ubuf, cnt))
+			return -EFAULT;
+
+		buf[cnt] = 0;
+
+		ret = kstrtoul(buf, 0,
+				(unsigned long *)&dev_priv->debug.fuse_read);
+		if (ret)
+			return -EINVAL;
+	}
+
+	return cnt;
+}
+
+static const struct file_operations i915_fuse_read_fops = {
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.read = i915_sb_fuse_read,
+	.write = i915_sb_fuse_write,
+	.llseek = default_llseek,
+};
+
 static int
 i915_wedged_get(void *data, u64 *val)
 {
@@ -4780,6 +4917,8 @@ static const struct i915_debugfs_files {
 	{"i915_spr_wm_latency", &i915_spr_wm_latency_fops},
 	{"i915_cur_wm_latency", &i915_cur_wm_latency_fops},
 	{"i915_timestamp", &i915_timestamp_fops},
+	{"i915_punit_read", &i915_punit_read_fops},
+	{"i915_fuse_read", &i915_fuse_read_fops},
 };
 
 void intel_display_crc_init(struct drm_device *dev)
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 5ad2192..fab0270 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -904,6 +904,13 @@ struct vlv_s0ix_state {
 	u32 clock_gate_dis2;
 };
 
+#ifdef CONFIG_DEBUG_FS
+struct debugfs_vars {
+	u32 punit_read;
+	u32 fuse_read;
+};
+#endif
+
 struct intel_gen6_power_mgmt {
 	/* work and pm_iir are protected by dev_priv->irq_lock */
 	struct work_struct work;
@@ -1571,6 +1578,10 @@ struct drm_i915_private {
 	/* Cannot be determined by PCIID. You must always read a register. */
 	size_t ellc_size;
 
+#ifdef CONFIG_DEBUG_FS
+	struct debugfs_vars debug;
+#endif
+
 	/* gen6+ rps state */
 	struct intel_gen6_power_mgmt rps;
 
-- 
1.7.9.5

