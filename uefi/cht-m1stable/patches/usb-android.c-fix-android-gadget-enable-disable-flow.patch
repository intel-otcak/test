From c789a6f8965b5df5852c13bfa0d76d6f08c67ace Mon Sep 17 00:00:00 2001
From: "Du, Changbin" <changbin.du@intel.com>
Date: Mon, 18 May 2015 19:00:07 +0800
Subject: [PATCH] usb/android.c: fix android gadget enable/disable flow

The function usb_add_config() may fail in some cases. On this scenario,
android gadget cannot enable and should stop futher processing. And it
cannot call usb_remove_config() since the android gadget driver is not
added to udc core, else panic would happen.

This patch fix this issue with below modification:
1) get rid of variable 'disable_depth'. Since userspace doesn't check
the result of enable operation, the disable_depth may get unbalanced if
encounter error.
2) add a new flag 'wait_ffs' to android_dev. We wait adbd become ready
then enable gadget. If adb is not enabled, enable gadget immediately.
3) avoid disabling gadget when it has not been enabled yet.

Change-Id: Ibc5d76b3bc7473a9a26e86553453dd948977d2eb
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-36607
Signed-off-by: Du, Changbin <changbin.du@intel.com>
---
 drivers/usb/gadget/android.c | 79 ++++++++++++++++++++++++--------------------
 1 file changed, 44 insertions(+), 35 deletions(-)

diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index bd33ebad738e..94cb09ab22c9 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -94,8 +94,9 @@ struct android_dev {
 	void (*setup_complete)(struct usb_ep *ep,
 				struct usb_request *req);
 
+	/* if ffs is enabled, enable gadget until ffs is ready */
+	bool wait_ffs;
 	bool enabled;
-	int disable_depth;
 	struct mutex mutex;
 	bool connected;
 	bool sw_connected;
@@ -193,30 +194,38 @@ static void android_work(struct work_struct *data)
 	}
 }
 
-static void android_enable(struct android_dev *dev)
+static int android_enable(struct android_dev *dev)
 {
 	struct usb_composite_dev *cdev = dev->cdev;
+	int ret = 0;
 
-	if (WARN_ON(!dev->disable_depth))
-		return;
+	if (dev->enabled)
+		return 0;
 
-	if (--dev->disable_depth == 0) {
-		usb_add_config(cdev, &android_config_driver,
-					android_bind_config);
-		usb_gadget_connect(cdev->gadget);
+	ret = usb_add_config(cdev, &android_config_driver,
+			android_bind_config);
+	if (ret) {
+		pr_err("android_usb: failed to enable %d\n", ret);
+		return ret;
 	}
+	usb_gadget_connect(cdev->gadget);
+	dev->enabled = true;
+
+	return 0;
 }
 
 static void android_disable(struct android_dev *dev)
 {
 	struct usb_composite_dev *cdev = dev->cdev;
 
-	if (dev->disable_depth++ == 0) {
-		usb_gadget_disconnect(cdev->gadget);
-		/* Cancel pending control requests */
-		usb_ep_dequeue(cdev->gadget->ep0, cdev->req);
-		usb_remove_config(cdev, &android_config_driver);
-	}
+	if (!dev->enabled)
+		return;
+
+	usb_gadget_disconnect(cdev->gadget);
+	/* Cancel pending control requests */
+	usb_ep_dequeue(cdev->gadget->ep0, cdev->req);
+	usb_remove_config(cdev, &android_config_driver);
+	dev->enabled = false;
 }
 
 /*-------------------------------------------------------------------------*/
@@ -229,7 +238,6 @@ static void functionfs_release_dev_callback(struct ffs_dev *dev);
 
 #define MAX_FFS_INSTANCES 1
 struct functionfs_config {
-	bool opened;
 	bool enabled;
 	int instances;
 	int instances_on;
@@ -302,10 +310,7 @@ static void ffs_function_enable(struct android_usb_function *f)
 	struct functionfs_config *config = f->config;
 
 	config->enabled = true;
-
-	/* Disable the gadget until the function is ready */
-	if (!config->opened)
-		android_disable(dev);
+	dev->wait_ffs = true;
 }
 
 static void ffs_function_disable(struct android_usb_function *f)
@@ -314,10 +319,7 @@ static void ffs_function_disable(struct android_usb_function *f)
 	struct functionfs_config *config = f->config;
 
 	config->enabled = false;
-
-	/* Balance the disable that was called in closed_callback */
-	if (!config->opened)
-		android_enable(dev);
+	dev->wait_ffs = false;
 }
 
 static int ffs_function_bind_config(struct android_usb_function *f,
@@ -434,10 +436,10 @@ static int functionfs_ready_callback(struct ffs_data *ffs)
 
 	config->instances++;
 	config->data = ffs;
-	config->opened = true;
+	dev->wait_ffs = false;
 
-	if (config->enabled)
-		android_enable(dev);
+	if (config->enabled && !dev->enabled)
+		ret = android_enable(dev);
 
 	mutex_unlock(&dev->mutex);
 	return ret;
@@ -450,13 +452,15 @@ static void functionfs_closed_callback(struct ffs_data *ffs)
 
 	mutex_lock(&dev->mutex);
 
-	if (config->enabled)
-		android_disable(dev);
-
 	--config->instances;
-	config->opened = false;
 	config->data = NULL;
 
+	if (config->enabled) {
+		if (dev->enabled)
+			android_disable(dev);
+		dev->wait_ffs = true;
+	}
+
 	mutex_unlock(&dev->mutex);
 }
 
@@ -1343,7 +1347,7 @@ static ssize_t enable_store(struct device *pdev, struct device_attribute *attr,
 	struct usb_composite_dev *cdev = dev->cdev;
 	struct android_usb_function *f;
 	int enabled = 0;
-
+	int ret;
 
 	if (!cdev)
 		return -ENODEV;
@@ -1373,8 +1377,14 @@ static ssize_t enable_store(struct device *pdev, struct device_attribute *attr,
 			if (f->enable)
 				f->enable(f);
 		}
-		android_enable(dev);
-		dev->enabled = true;
+		/* if ffs enabled, we enable gadget on ffs_ready_callback */
+		if (!dev->wait_ffs) {
+			ret = android_enable(dev);
+			if (!ret) {
+				mutex_unlock(&dev->mutex);
+				return ret;
+			}
+		}
 	} else if (!enabled && dev->enabled) {
 		android_disable(dev);
 		list_for_each_entry(f, &dev->enabled_functions, enabled_list) {
@@ -1382,7 +1392,6 @@ static ssize_t enable_store(struct device *pdev, struct device_attribute *attr,
 			if (f->disable)
 				f->disable(f);
 		}
-		dev->enabled = false;
 	} else {
 		pr_err("android_usb: already %s\n",
 				dev->enabled ? "enabled" : "disabled");
@@ -1689,7 +1698,7 @@ static int __init init(void)
 		goto err_dev;
 	}
 
-	dev->disable_depth = 1;
+	dev->wait_ffs = false;
 	dev->functions = supported_functions;
 	INIT_LIST_HEAD(&dev->enabled_functions);
 	INIT_WORK(&dev->work, android_work);
-- 
1.9.1

