From c129ffbe0037aa16d1ebff441c7dbd424279c90d Mon Sep 17 00:00:00 2001
From: Pengpeng Cui <pengpengx.cui@intel.com>
Date: Thu, 30 Jul 2015 13:49:16 +0800
Subject: [PATCH 456/462] atomisp2: css2401 and
 2401_legacy-irci_master_20150729_0209

Merge CSS2.1 for css2401 and 2401_legacy
for irci_master_20150729_0209 firmware tag

Change-Id: I32447ff1f2d89d73679330db648abec4bce4cb7c
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-42337
Signed-off-by: Pengpeng Cui <pengpengx.cui@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/67229
Build: IMIN (SC)
Approver: WeiX Meng <weix.meng@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Build: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Maintainer: WeiX Meng <weix.meng@intel.com>
---
 .../media/pci/atomisp2/css/css_api_version.h       | 134 +++---
 .../drivers/media/pci/atomisp2/css/css_trace.h     |  10 +
 .../atomisp2/css/hive_isp_css_common/gpio_global.h |   2 +
 .../camera/drivers/media/pci/atomisp2/css/ia_css.h |   2 +-
 .../media/pci/atomisp2/css/ia_css_host_data.h      |   2 +-
 .../media/pci/atomisp2/css/ia_css_mmu_private.h    |  39 ++
 .../media/pci/atomisp2/css/ia_css_system_ctrl.c    | 483 +++++++++++++++++++++
 .../media/pci/atomisp2/css/ia_css_system_ctrl.h    |  80 ++++
 .../drivers/media/pci/atomisp2/css/ia_css_types.h  |   2 +-
 .../media/pci/atomisp2/css/ia_css_version_data.h   |   2 +-
 .../atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.c |   2 +-
 .../atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.h |   2 +-
 .../css/isp/kernels/hdr/ia_css_hdr_param.h         |   2 +-
 .../css/isp/kernels/hdr/ia_css_hdr_types.h         |   2 +-
 .../atomisp2/css/runtime/debug/src/ia_css_debug.c  |   1 +
 .../camera/drivers/media/pci/atomisp2/css/sh_css.c | 444 +------------------
 .../media/pci/atomisp2/css/sh_css_firmware.c       |   4 +-
 .../media/pci/atomisp2/css/sh_css_internal.h       |   3 -
 .../drivers/media/pci/atomisp2/css/sh_css_mmu.c    |  16 +
 .../drivers/media/pci/atomisp2/css/sh_css_params.c |   6 +-
 .../css2400b0_v21_build/css/ia_css_mmu_private.h   |   1 +
 .../css2400b0_v21_build/css/ia_css_system_ctrl.c   |   1 +
 .../css2400b0_v21_build/css/ia_css_system_ctrl.h   |   1 +
 .../css/ia_css_mmu_private.h                       |   1 +
 .../css/ia_css_system_ctrl.c                       |   1 +
 .../css/ia_css_system_ctrl.h                       |   1 +
 .../css2401a0_v21_build/css/ia_css_mmu_private.h   |   1 +
 .../css2401a0_v21_build/css/ia_css_system_ctrl.c   |   1 +
 .../css2401a0_v21_build/css/ia_css_system_ctrl.h   |   1 +
 29 files changed, 739 insertions(+), 508 deletions(-)
 create mode 100644 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_mmu_private.h
 create mode 100644 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.c
 create mode 100644 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.h
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_mmu_private.h
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.c
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.h
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_mmu_private.h
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.c
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.h
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_mmu_private.h
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.c
 create mode 120000 drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.h

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_api_version.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_api_version.h
index b32610d..f2eac14 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_api_version.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_api_version.h
@@ -34,7 +34,7 @@ The version string has four dot-separated numbers, read left to right:
 
 */
 
-#define CSS_API_VERSION_STRING	"2.1.20.7"
+#define CSS_API_VERSION_STRING	"2.1.20.8"
 
 /*
 Change log
@@ -139,11 +139,6 @@ v2.1.4.0, default pipe config change
 v2.1.5.0
 - removed mix_range field from yuvp1_y_ee_nr_frng_public_config
 
-v2.1.5.1, Add parameters to CPU routines via a macro.
-- Replaced CPU memory allocation functions with macros to add caller func name + line number.
-- This is done to help debug memory access issues, allocation issues, etc.
-- Changed API: only ia_css_env.h
-
 v2.1.5.1, exposure IDs per stream
 - added MIN/MAX exposure ID macros
 - made exposure ID sequence per-stream instead of global (across all streams)
@@ -156,23 +151,23 @@ v2.1.6.0, Interface for vertical output flip
 - add new interface to enable vertical output flipping
 - rename ia_css_output_config.enable_mirror
 
-v2.1.6.1 (2 changes parallel), Effective res on pipe
+v2.1.6.2 (2 changes parallel), Effective res on pipe
 - Added input_effective_res to struct ia_css_pipe_config in ia_css_pipe_public.h.
 
-v2.1.6.2 (2 changes parallel), CSS-API version file generated from individual changes
+v2.1.6.3 (2 changes parallel), CSS-API version file generated from individual changes
 - Avoid merge-conflicts by generating version file from individual CSS-API changes.
 - Parallel CSS-API changes can map to the same version number after this change.
 - Version numbers for a change could increase due to parallel changes being merged.
 - The version number would not decrease for a change.
 
-v2.1.6.5 (4 changes parallel), Add SP FW error event
+v2.1.6.6 (4 changes parallel), Add SP FW error event
 - Added FW error event. This gets raised when the SP FW runs into an
 - error situation from which it cannot recover.
 
-v2.1.6.5 (4 changes parallel), expose bnr FF enable bits in bnr public API
+v2.1.6.6 (4 changes parallel), expose bnr FF enable bits in bnr public API
 - Added ff enable bits to bnr_public_config_dn_detect_ctrl_config_t struct
 
-v2.1.6.5 (4 changes parallel), ISP configuration per pipe 
+v2.1.6.6 (4 changes parallel), ISP configuration per pipe 
 - Added ISP configuration per pipe support: p_isp_config field in
 - struct ia_css_pipe_config and ia_css_pipe_set_isp_config_on_pipe
 - and ia_css_pipe_set_isp_config functions
@@ -180,10 +175,10 @@ v2.1.6.5 (4 changes parallel), ISP configuration per pipe
 v2.1.7.0 (2 changes parallel), removed css_version.h
 - Removed css_version.h that was used for versioning in manual (non-CI) releases.
 
-v2.1.7.1 (2 changes parallel), Add helpers (get and set) for ISP cfg per pipe
+v2.1.7.2 (2 changes parallel), Add helpers (get and set) for ISP cfg per pipe
 - Add helpers (get and set) for ISP configuration per pipe
 
-v2.1.7.2 (2 changes parallel), Add feature to lock all RAW buffers
+v2.1.7.3 (2 changes parallel), Add feature to lock all RAW buffers
 - This API change adds a boolean flag (lock_all) in the stream_config struct.
 - If this flag is set to true, then all frames will be locked if locking is
 - enabled. By default this flag is set to false.
@@ -200,44 +195,44 @@ v2.1.8.0 (4 changes parallel), Various changes to support ACC configuration per
 - Remove ia_css_pipe_isp_config_set()
 - Remove ia_css_pipe_isp_config_get()
 
-v2.1.8.2 (4 changes parallel), Added member num_invalid_frames to ia_css_pipe_info structure.
+v2.1.8.3 (4 changes parallel), Added member num_invalid_frames to ia_css_pipe_info structure.
 - Added member num_invalid_frames to ia_css_pipe_info structure.
 - This helps the driver make sure that the first valid output
 - frame goes into the first user-supplied output buffer.
 
-v2.1.8.4 (4 changes parallel), ISYS EOF timestamp for output buffers
+v2.1.8.5 (4 changes parallel), ISYS EOF timestamp for output buffers
 - driver gets EOF timer to every out frame . ia_css_buffer modified to accomodate same.
 
-v2.1.8.4 (6 changes parallel), display_config
+v2.1.8.5 (6 changes parallel), display_config
 - Added formats- and output config parameters for configuration of the (optional) display output.
 
-v2.1.8.4 (4 changes parallel), Adding zoom region parameters to CSS API
+v2.1.8.5 (4 changes parallel), Adding zoom region parameters to CSS API
 - Adding ia_css_point and ia_css_region structures to css-api.
 - Adding zoom_region(type ia_css_region) parameter to ia_css_dz_config structure.
 - By using this user can do the zoom based on zoom region and
 - the center of the zoom region is not restricted at the center of the input frame.
 
-v2.1.8.6 (3 changes parallel), Add new ia_css_fw_warning type
+v2.1.8.7 (3 changes parallel), Add new ia_css_fw_warning type
 - Add IA_CSS_FW_WARNING_TAG_EXP_ID_FAILED enum to ia_css_fw_warning type
 - Extend sp_warning() with exp_id parameter
 
-v2.1.8.6 (3 changes parallel), Add includes in GC, GC2 kernel interface files
+v2.1.8.7 (3 changes parallel), Add includes in GC, GC2 kernel interface files
 - add ia_css_ctc_types.h includes in ia_css_gc_types.h and ia_css_gc2_types.h. Needed to get ia_css_vamem_type.
 
 v2.1.9.0 (3 changes parallel), Introduce sp assert event.
 - Add IA_CSS_EVENT_TYPE_FW_ASSERT. The FW sends the event in case an assert goes off.
 
-v2.1.9.1 (3 changes parallel), Exclude driver part from ia_css_buffer.h as it is also used by SP
+v2.1.9.2 (3 changes parallel), Exclude driver part from ia_css_buffer.h as it is also used by SP
 - Excluded driver part of the interface from SP/ISP code
 - Driver I/F is not affected
 
-v2.1.9.2 (2 changes parallel), added IA_CSS_EVENT_TYPE_TIMER
+v2.1.9.3 (2 changes parallel), added IA_CSS_EVENT_TYPE_TIMER
 - Added a new event called IA_CSS_EVENT_TYPE_TIMER
 
 v2.1.10.0 (6 changes parallel), Add a flag "enable_dpc" to "struct ia_css_pipe_config"
 - Add a flag "enable_dpc" to "struct ia_css_pipe_config"
 
-v2.1.10.7 (9 changes parallel), change the pipe version type from integer to enum
+v2.1.10.8 (9 changes parallel), change the pipe version type from integer to enum
 - add new enum to enumerate ISP pipe version
 - change the pipe version type in pipe_config from integer to enum
 
@@ -254,13 +249,13 @@ v2.1.15.0 (17 changes parallel), expose_gamma_enable_option
 v2.1.15.0 (16 changes parallel), Remove deprecated FW_ERROR event.
 - Remove code for deprecated FW_ERROR event.
 
-v2.1.15.4 (8 changes parallel), fix IEFD's puclic API types
+v2.1.15.5 (8 changes parallel), fix IEFD's puclic API types
 - fix IEFD public API members types: rad_cu6_x1,rad_cu_unsharp_x1 & unsharp_amount
 
-v2.1.15.4 (8 changes parallel), Add IA_CSS_FW_WARNING_FRAME_PARAM_MISMATCH
+v2.1.15.5 (8 changes parallel), Add IA_CSS_FW_WARNING_FRAME_PARAM_MISMATCH
 - Add IA_CSS_FW_WARNING_FRAME_PARAM_MISMATCH enum to ia_css_fw_warning type
 
-v2.1.15.7 (11 changes parallel), add_flag_to_disable_continous_viewfinder
+v2.1.15.8 (11 changes parallel), add_flag_to_disable_continous_viewfinder
 - add a new flag in stream_config to disable continuous viewfinder
 - in ZSL use case.
 
@@ -273,125 +268,125 @@ v2.1.17.0 (7 changes parallel), change CSS API to fix the shading correction off
 v2.1.17.0 (32 changes parallel), add_flag_to_disable_continous_viewfinder_part2
 - remove the old interfaces
 
-v2.1.17.3 (8 changes parallel), Added public interface for setting the scaler LUT.
+v2.1.17.4 (8 changes parallel), Added public interface for setting the scaler LUT.
 - Added the public struct to output system and modified the global config struct.
 
-v2.1.17.4 (7 changes parallel), Add parameters for new TNR3 component
+v2.1.17.5 (7 changes parallel), Add parameters for new TNR3 component
 - Add new parameters for new TNR3 component
 
-v2.1.17.5 (9 changes parallel), Update skycam DPC_MAX_NUMBER_OF_DP
+v2.1.17.6 (9 changes parallel), Update skycam DPC_MAX_NUMBER_OF_DP
 - Automated tooling requires an API change request
 - This change changes the implementation of #define DPC_MAX_NUMBER_OF_DP
 - it now returns a different number
 
-v2.1.17.5 (8 changes parallel), Return an error when both DPC and BDS are enabled in a pipe config
+v2.1.17.6 (8 changes parallel), Return an error when both DPC and BDS are enabled in a pipe config
 - Return an error when both DPC and BDS are enabled in a pipe config
 
-v2.1.17.5 (9 changes parallel), new API getter functions for gdc in buffer information
+v2.1.17.6 (9 changes parallel), new API getter functions for gdc in buffer information
 - ia_css_pipe_get_dvs_filter() added
 - ia_css_pipe_get_gdc_in_buffer_info() added
 
-v2.1.17.6 (12 changes parallel), Update CNR2 ineffective values
+v2.1.17.7 (12 changes parallel), Update CNR2 ineffective values
 - Fixed Incorrect ineffective values listed in ia_css_cnr_config
 - Correct Ineffective value is 8191
 
-v2.1.17.6 (12 changes parallel), af_roi_api
+v2.1.17.7 (12 changes parallel), af_roi_api
 - added a new function to set AF ROI ia_css_set_af_roi
 - added a new struct ia_css_s3a_roi_offset
 
-v2.1.17.6 (12 changes parallel), Enlarge AF AWB_FR stats buffers
+v2.1.17.7 (12 changes parallel), Enlarge AF AWB_FR stats buffers
 - Enlarge AF and AWB_FR stats buffers to support max grid width per stripe as oppose to per frame
 
-v2.1.17.6 (12 changes parallel), remove x_y_end_from_ae_and_awb
+v2.1.17.7 (12 changes parallel), remove x_y_end_from_ae_and_awb
 - added a flag to prepare removal of x_end and y_end from ae grid public config
 - added a flag to prepare removal of x_end and y_end from awb grid public config
 
-v2.1.17.7 (5 changes parallel)
+v2.1.17.8 (5 changes parallel)
 - added input_yuv , input_raw to ia_css_binary_info.enable 
 - struct, these attributes were always there but not saved
 - in the binary_info struct
 
-v2.1.17.8 (6 changes parallel), cleanup_awb_ae_rgb_integration_flags
+v2.1.17.9 (6 changes parallel), cleanup_awb_ae_rgb_integration_flags
 - this change only cleans up an approved api CR see wikis below
 
-v2.1.17.9 (6 changes parallel), output_system_input_resolution
+v2.1.17.10 (6 changes parallel), output_system_input_resolution
 - adedd gdc_output_system_in_resolution to pipe config struct
 
-v2.1.17.9 (5 changes parallel), Per pipe DPC configuration is added to ia_css_isp_parameters
+v2.1.17.10 (5 changes parallel), Per pipe DPC configuration is added to ia_css_isp_parameters
 - Per pipe DPC configuration is added to ia_css_isp_parameters 
 
-v2.1.17.9 (10 changes parallel), pipe config option for vf output bci mode downscaling
+v2.1.17.10 (10 changes parallel), pipe config option for vf output bci mode downscaling
 - vf downscaling using yuv_scale binary.
 
-v2.1.17.11 (11 changes parallel), Add scale mode GDC V2 LUT to CSS API
+v2.1.17.12 (11 changes parallel), Add scale mode GDC V2 LUT to CSS API
 - Allow client to set global LUT for gdc v2 (First step in this change. See wiki page for more details)
 
-v2.1.17.11 (12 changes parallel), Include added to type-support.h.
+v2.1.17.12 (12 changes parallel), Include added to type-support.h.
 - Include of hive/cell_support.h was added to type-support.h, in order to
 - have access to define HAVE_STDINT.
 
-v2.1.17.12 (11 changes parallel), Pipe configuration to enable BLI mode downscaling for
+v2.1.17.13 (11 changes parallel), Pipe configuration to enable BLI mode downscaling for
 - BLI mode downscaling for capture post-processing
 
-v2.1.17.14 (8 changes parallel), Add copyright headers to css files
+v2.1.17.15 (8 changes parallel), Add copyright headers to css files
 - Add copyright headers to css API files
 
-v2.1.17.14 (8 changes parallel), add copyright header to include files
+v2.1.17.15 (8 changes parallel), add copyright header to include files
 - add copyright header to include files
 
-v2.1.17.14 (8 changes parallel), add copyright header to isp files
+v2.1.17.15 (8 changes parallel), add copyright header to isp files
 - add copyright header to isp files
 
-v2.1.17.14 (8 changes parallel), add copyright header to refactored code
+v2.1.17.15 (8 changes parallel), add copyright header to refactored code
 - add copyright header to refactored code
 - (base, camera, runtime directories)
 
-v2.1.17.15 (13 changes parallel), Fix copyright headers (no functional change)
+v2.1.17.16 (13 changes parallel), Fix copyright headers (no functional change)
 - No functional change; only fixes copyright headers
 
-v2.1.17.15 (10 changes parallel), Remove continuous mode special case handling in ia_css_pipe_set_isp_config
+v2.1.17.16 (10 changes parallel), Remove continuous mode special case handling in ia_css_pipe_set_isp_config
 - For continuous mode isp_config was being send to all pipes,
 - even though API ia_css_pipe_set_isp_config is for single pipe
 - Removed incorrect case
 
-v2.1.17.15 (5 changes parallel), Added documentation to formats_config header file
+v2.1.17.16 (5 changes parallel), Added documentation to formats_config header file
 - Added description of ranges for full-range flag
 
-v2.1.17.15 (10 changes parallel), DVS statistics grid produced by accelerator
+v2.1.17.16 (10 changes parallel), DVS statistics grid produced by accelerator
 - Add DVS statistics produced by accelerator grid to pipe info
 - Add ia_css_pipe_has_dvs_stats function
 
-v2.1.17.16 (5 changes parallel), Provide the CSS interface to select the luma only binaries
+v2.1.17.17 (5 changes parallel), Provide the CSS interface to select the luma only binaries
 - Add a flag "enable_luma_only" to "struct ia_css_pipe_config"
 
-v2.1.17.16 (11 changes parallel), cont_remove_x_y_end_from_ae_and_awb
+v2.1.17.17 (11 changes parallel), cont_remove_x_y_end_from_ae_and_awb
 - this patch doesn't introduce any new api change, it only fixes a recent
 - api merged change (#31938) , in order to have success CI i had to upload an api change request
 
-v2.1.17.16 (10 changes parallel), GAC state dump for debug
+v2.1.17.17 (10 changes parallel), GAC state dump for debug
 - added ia_css_dump_gac_state function
 
-v2.1.17.17 (23 changes parallel), output_format_nv12_16
+v2.1.17.18 (23 changes parallel), output_format_nv12_16
 - added new output fromat nv12_16
 
-v2.1.17.17 (4 changes parallel), Remove author details from SKC src code
+v2.1.17.18 (4 changes parallel), Remove author details from SKC src code
 - remove author details from skc src code
 
-v2.1.17.18 (26 changes parallel), eliminate two_pixels_per_clock field
+v2.1.17.19 (26 changes parallel), eliminate two_pixels_per_clock field
 - remove obsolete field two_pixels_per_clock
 
-v2.1.17.19 (7 changes parallel), Fix copyright headers (no functional change)
+v2.1.17.20 (7 changes parallel), Fix copyright headers (no functional change)
 - No functional change; only fixes copyright headers
 
-v2.1.17.19 (11 changes parallel), Add XNR3 blending strength to kernel interface
+v2.1.17.20 (11 changes parallel), Add XNR3 blending strength to kernel interface
 - Added a blending strength field to the XNR3 kernel interface to add
 - support for blending.
 
-v2.1.17.20 (24 changes parallel), Add N_CSS_PRBS_IDS and N_CSS_TPG_IDS
+v2.1.17.21 (24 changes parallel), Add N_CSS_PRBS_IDS and N_CSS_TPG_IDS
 - Add N_CSS_PRBS_IDS to reflect the number of ia_css_prbs_id enum
 - Add N_CSS_TPG_IDS to reflect the number of ia_css_tpg_id enum
 
-v2.1.17.22 (8 changes parallel), ia_css_skc_dvs_statistics field size change
+v2.1.17.23 (8 changes parallel), ia_css_skc_dvs_statistics field size change
 - ia_css_skc_dvs_statistics field size change
 
 v2.1.19.0 (6 changes parallel)
@@ -404,31 +399,36 @@ v2.1.20.0 (6 changes parallel), OSYS & GDC Debug dump function addition
 - add GDC state dump function
 - add OSYS state dump function
 
-v2.1.20.3 (7 changes parallel), Add ref_buf_select parameter for TNR3 to kernel interface
+v2.1.20.4 (7 changes parallel), Add ref_buf_select parameter for TNR3 to kernel interface
 - Added a ref_buf_select parameter to the TNR3 kernel interface to add
 - support for multiple reference buffers.
 
-v2.1.20.3 (6 changes parallel), DVS MAX grid dimensions to cover maximal resolution
+v2.1.20.4 (6 changes parallel), DVS MAX grid dimensions to cover maximal resolution
 - rename DVS_TABLE_HEIGHT/WIDTH to MAX_DVS_COORDS_TABLE_HEIGHT/WIDTH
 - modify value of the above macros to cover max resolution
 
-v2.1.20.4 (54 changes parallel), add input feeder calculations getter
+v2.1.20.5 (54 changes parallel), add input feeder calculations getter
 - add input_feeder_config public struct
 - add get_input_feeder_config getter
 
-v2.1.20.4 (4 changes parallel), Enable runtime updating mapped args for QoS extension pipe
+v2.1.20.5 (4 changes parallel), Enable runtime updating mapped args for QoS extension pipe
 - added ia_css_pipe_update_qos_ext_mapped_arg()
 
-v2.1.20.6 (2 changes parallel), Frame format override
+v2.1.20.7 (77 changes parallel), Add parameters to CPU routines via a macro.
+- Replaced CPU memory allocation functions with macros to add caller func name + line number.
+- This is done to help debug memory access issues, allocation issues, etc.
+- Changed API: only ia_css_env.h
+
+v2.1.20.7 (2 changes parallel), Frame format override
 - Added a function call to the pipe interface for overriding
 - the frame format as set in the pipe.
 - This is an optional interface that can be used under
 - some strict conditions.
 
-v2.1.20.6 (2 changes parallel), Output_system_in_res Information
+v2.1.20.7 (2 changes parallel), Output_system_in_res Information
 - Output_system_in_res_info field added to pipe_info struct 
 
-v2.1.20.7, Temprarily disable memory debug features for SVOS.
+v2.1.20.8, Temprarily disable memory debug features for SVOS.
 - Temporary commented out the additions to allow SKC testing till root cause found
 - Changed files ia_css_env.h and sh_css.c.
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_trace.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_trace.h
index d047ee6..77fcacd 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_trace.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/css_trace.h
@@ -180,10 +180,20 @@ enum TRACE_DUMP_FORMAT {
 
 
 /* common majors */
+/* SP0 */
 #define MAJOR_MAIN              1
 #define MAJOR_ISP_STAGE_ENTRY   2
 #define MAJOR_DMA_PRXY          3
 #define MAJOR_START_ISP         4
+/* SP1 */
+#define MAJOR_OBSERVER_ISP0_EVENT          21
+#define MAJOR_OBSERVER_OUTPUT_FORM_EVENT   22
+#define MAJOR_OBSERVER_OUTPUT_SCAL_EVENT   23
+#define MAJOR_OBSERVER_IF_ACK              24
+#define MAJOR_OBSERVER_SP0_EVENT           25
+#define MAJOR_OBSERVER_SP_TERMINATE_EVENT  26
+#define MAJOR_OBSERVER_DMA_ACK             27
+#define MAJOR_OBSERVER_ACC_ACK             28
 
 #define DEBUG_PTR_SIGNATURE     0xABCD	/* signature for the debug parameter pointer */
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/hive_isp_css_common/gpio_global.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/hive_isp_css_common/gpio_global.h
index 834a2b0..130c49a 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/hive_isp_css_common/gpio_global.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/hive_isp_css_common/gpio_global.h
@@ -42,4 +42,6 @@ more details.
 
 #define HIVE_GPIO_STROBE_TRIGGER_PIN						2
 
+#define GPIO_FLASH_PIN_MASK (1 << HIVE_GPIO_STROBE_TRIGGER_PIN)
+
 #endif /* __GPIO_GLOBAL_H_INCLUDED__ */
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h
index 99429c3..6565e5e 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_master_20150722_1500 */
+/* Release Version: irci_master_20150729_0209 */
 /*
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_host_data.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_host_data.h
index ee1f774..d37ac5a 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_host_data.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_host_data.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_master_20150722_1500 */
+/* Release Version: irci_master_20150729_0209 */
 /*
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_mmu_private.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_mmu_private.h
new file mode 100644
index 0000000..5833809
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_mmu_private.h
@@ -0,0 +1,39 @@
+/*
+ * INTEL CONFIDENTIAL
+ *
+ * Copyright (C) 2010 - 2015 Intel Corporation.
+ * All Rights Reserved.
+ *
+ * The source code contained or described herein and all documents
+ * related to the source code ("Material") are owned by Intel Corporation
+ * or licensors. Title to the Material remains with Intel
+ * Corporation or its licensors. The Material contains trade
+ * secrets and proprietary and confidential information of Intel or its
+ * licensors. The Material is protected by worldwide copyright
+ * and trade secret laws and treaty provisions. No part of the Material may
+ * be used, copied, reproduced, modified, published, uploaded, posted,
+ * transmitted, distributed, or disclosed in any way without Intel's prior
+ * express written permission.
+ *
+ * No License under any patent, copyright, trade secret or other intellectual
+ * property right is granted to or conferred upon you by disclosure or
+ * delivery of the Materials, either expressly, by implication, inducement,
+ * estoppel or otherwise. Any license under such intellectual property rights
+ * must be express and approved by Intel in writing.
+ */
+
+#ifndef __IA_CSS_MMU_PRIVATE_H
+#define __IA_CSS_MMU_PRIVATE_H
+
+#include "system_local.h"
+
+/*
+ * This function sets the L1 pagetable address.
+ * After power-up of the ISP the L1 pagetable can be set.
+ * Once being set the L1 pagetable is protected against
+ * further modifications.
+ */
+void
+sh_css_mmu_set_page_table_base_index(hrt_data base_index);
+
+#endif /* __IA_CSS_MMU_PRIVATE_H */
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.c
new file mode 100644
index 0000000..04ce13e
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.c
@@ -0,0 +1,483 @@
+/*
+ * INTEL CONFIDENTIAL
+ *
+ * Copyright (C) 2015 Intel Corporation.
+ * All Rights Reserved.
+ *
+ * The source code contained or described herein and all documents
+ * related to the source code ("Material") are owned by Intel Corporation
+ * or licensors. Title to the Material remains with Intel
+ * Corporation or its licensors. The Material contains trade
+ * secrets and proprietary and confidential information of Intel or its
+ * licensors. The Material is protected by worldwide copyright
+ * and trade secret laws and treaty provisions. No part of the Material may
+ * be used, copied, reproduced, modified, published, uploaded, posted,
+ * transmitted, distributed, or disclosed in any way without Intel's prior
+ * express written permission.
+ *
+ * No License under any patent, copyright, trade secret or other intellectual
+ * property right is granted to or conferred upon you by disclosure or
+ * delivery of the Materials, either expressly, by implication, inducement,
+ * estoppel or otherwise. Any license under such intellectual property rights
+ * must be express and approved by Intel in writing.
+ */
+
+#include "ia_css_system_ctrl.h"
+#include "ia_css_err.h"
+#include "ia_css_debug.h"
+#include "sh_css_internal.h"
+#include "sw_event_global.h"
+#include "ia_css_stream.h"
+#include "ia_css_pipe.h"
+#include "ia_css_control.h"
+#include "ia_css_spctrl.h"
+#include "sh_css_hrt.h"
+#include "sh_css_sp.h"
+#include "irq.h"
+#include "ia_css_mmu_private.h"
+#include "gp_device.h"
+#if defined(HAS_BL)
+#include "support/bootloader/interface/ia_css_blctrl.h"
+#endif
+#if !defined(HAS_NO_GPIO)
+#define __INLINE_GPIO__
+#include "gpio.h"
+#endif
+#if !defined(HAS_NO_INPUT_SYSTEM)
+#include "ia_css_isys.h"
+#endif
+
+
+static enum ia_css_err
+ia_css_resume_init(void);
+
+static enum ia_css_err
+ia_css_resume_stream_start(struct ia_css_stream *stream);
+
+static enum ia_css_err
+ia_css_pipe_enqueue_latest_param_buffer(struct ia_css_pipe *pipe, hrt_vaddress paramset_ptr);
+
+static bool my_css_save_initialized;	/* if my_css_save was initialized */
+static struct sh_css_save my_css_save;
+
+
+void ia_css_set_system_mode(enum ia_css_sys_mode mode)
+{
+	IA_CSS_ENTER_LEAVE_PRIVATE("void");
+	my_css_save.mode = mode;
+}
+
+enum ia_css_sys_mode
+ia_css_get_system_mode(void)
+{
+	IA_CSS_ENTER_LEAVE_PRIVATE("void");
+	return my_css_save.mode;
+}
+
+bool ia_css_is_system_mode_suspend_or_resume(void)
+{
+	if (my_css_save.mode == IA_CSS_SYS_MODE_SUSPEND ||
+	    my_css_save.mode == IA_CSS_SYS_MODE_RESUME)
+		return true;
+	return false;
+}
+
+enum ia_css_err
+ia_css_save_stream(struct ia_css_stream *stream)
+{
+	int i;
+	enum ia_css_err err = IA_CSS_SUCCESS;
+
+	IA_CSS_ENTER_PRIVATE("stream = %p", stream);
+	for (i = 0; i < MAX_ACTIVE_STREAMS; i++) {
+		if (my_css_save.streams[i] == NULL) {
+			IA_CSS_LOG("entered stream into loc=%d", i);
+			my_css_save.streams[i] = stream;
+			break;
+		}
+	}
+	if (i == MAX_ACTIVE_STREAMS) {
+		IA_CSS_ERROR("no space left for storing stream = %p", stream);
+		err = IA_CSS_ERR_INTERNAL_ERROR;
+	}
+	IA_CSS_LEAVE_ERR_PRIVATE(err);
+	return err;
+}
+
+enum ia_css_err
+ia_css_save_restore_remove_stream(struct ia_css_stream *stream)
+{
+	int i;
+	enum ia_css_err err = IA_CSS_SUCCESS;
+	IA_CSS_ENTER_PRIVATE("stream = %p", stream);
+
+	for (i = 0; i < MAX_ACTIVE_STREAMS; i++) {
+		if (my_css_save.streams[i] == stream) {
+				IA_CSS_LOG("took out stream %d", i);
+				my_css_save.streams[i]  = NULL;
+				break;
+		}
+	}
+	if (i == MAX_ACTIVE_STREAMS) {
+		IA_CSS_ERROR("stream = %p could not be found in save/restore data" , stream);
+		err = IA_CSS_ERR_INTERNAL_ERROR;
+	}
+	IA_CSS_LEAVE_ERR_PRIVATE(err);
+	return err;
+}
+
+void ia_css_save_restore_data_init(void)
+{
+	int i;
+	IA_CSS_ENTER_PRIVATE("void");
+	IA_CSS_LOG("init: %d", my_css_save_initialized);
+
+	if (!my_css_save_initialized) {
+		my_css_save_initialized = true;
+		ia_css_set_system_mode(IA_CSS_SYS_MODE_INIT);
+		for (i = 0; i < MAX_ACTIVE_STREAMS ; i++) {
+			my_css_save.streams[i] = NULL;
+		}
+	}
+	IA_CSS_LEAVE_PRIVATE("");
+}
+
+void ia_css_save_mmu_base_addr(uint32_t mmu_base_addr)
+{
+	IA_CSS_ENTER_LEAVE_PRIVATE("void");
+	my_css_save.mmu_base = mmu_base_addr;
+}
+
+void ia_css_save_irq_type(enum ia_css_irq_type irq_type)
+{
+	IA_CSS_ENTER_LEAVE_PRIVATE("void");
+	my_css_save.irq_type = irq_type;
+}
+
+/* ia_css_resume_init is used upon css resume to initialize css,
+   corresponds to ia_css_init */
+static enum ia_css_err
+ia_css_resume_init(void)
+{
+	enum ia_css_err err = IA_CSS_SUCCESS;
+#if !defined(HAS_NO_GPIO)
+	hrt_data select, enable;
+#endif
+
+	IA_CSS_ENTER_PRIVATE("void");
+
+#if !defined(HAS_NO_GPIO)
+	select = gpio_reg_load(GPIO0_ID, _gpio_block_reg_do_select)
+	  & (~GPIO_FLASH_PIN_MASK);
+	enable = gpio_reg_load(GPIO0_ID, _gpio_block_reg_do_e)
+	  | GPIO_FLASH_PIN_MASK;
+#endif
+	sh_css_mmu_set_page_table_base_index(my_css_save.mmu_base);
+	enable_interrupts(my_css_save.irq_type);
+
+#if !defined(HAS_NO_GPIO)
+	/* configure GPIO to output mode */
+	gpio_reg_store(GPIO0_ID, _gpio_block_reg_do_select, select);
+	gpio_reg_store(GPIO0_ID, _gpio_block_reg_do_e, enable);
+	gpio_reg_store(GPIO0_ID, _gpio_block_reg_do_0, 0);
+#endif
+
+	sh_css_spctrl_reload_fw(SP0_ID);
+#if defined(HAS_SEC_SP)
+	sh_css_spctrl_reload_fw(SP1_ID);
+#endif
+#if defined(HAS_BL)
+	ia_css_blctrl_reload_fw();
+#endif
+
+#if defined(HRT_CSIM)
+	/**
+	 * In compiled simulator context include debug support by default.
+	 * In all other cases (e.g. Android phone), the user (e.g. driver)
+	 * must explicitly enable debug support by calling this function.
+	 */
+	if (!ia_css_debug_mode_init()) {
+		IA_CSS_LEAVE_ERR(IA_CSS_ERR_INTERNAL_ERROR);
+		return IA_CSS_ERR_INTERNAL_ERROR;
+	}
+#endif
+	if (!sh_css_hrt_system_is_idle()) {
+		IA_CSS_LEAVE_ERR(IA_CSS_ERR_SYSTEM_NOT_IDLE);
+		return IA_CSS_ERR_SYSTEM_NOT_IDLE;
+	}
+
+#if defined(HAS_INPUT_SYSTEM_VERSION_2) && defined(HAS_INPUT_SYSTEM_VERSION_2401)
+#if    defined(USE_INPUT_SYSTEM_VERSION_2)
+	gp_device_reg_store(GP_DEVICE0_ID, _REG_GP_SWITCH_ISYS2401_ADDR, 0);
+#elif defined(USE_INPUT_SYSTEM_VERSION_2401)
+	gp_device_reg_store(GP_DEVICE0_ID, _REG_GP_SWITCH_ISYS2401_ADDR, 1);
+#endif
+#endif
+
+	IA_CSS_LEAVE_ERR(err);
+	return err;
+}
+
+/* ia_css_resume_stream_start is used upon CSS resume, function enqueues
+   latest paramset and sends a "start_stream" event to SP */
+static enum ia_css_err
+ia_css_resume_stream_start(struct ia_css_stream *stream)
+{
+	unsigned int thread_id, pipe_num;
+	int i;
+	hrt_vaddress paramset_ptr;
+	struct ia_css_pipe *pipe;
+	enum ia_css_err err = IA_CSS_SUCCESS;
+
+	IA_CSS_ENTER_PRIVATE("stream = %p", stream);
+	if (stream == NULL) {
+		IA_CSS_LEAVE_ERR(IA_CSS_ERR_INVALID_ARGUMENTS);
+		return IA_CSS_ERR_INVALID_ARGUMENTS;
+	}
+
+	if (sh_css_sp_is_running() == false) {
+		IA_CSS_ERROR("sp is not runnning");
+		IA_CSS_LEAVE_ERR(IA_CSS_ERR_INTERNAL_ERROR);
+		return IA_CSS_ERR_INTERNAL_ERROR;
+	}
+
+	for (i = 0; i < stream->num_pipes ; i++) {
+		stream->pipes[i]->stop_requested = false;
+		pipe = stream->pipes[i];
+		pipe_num = ia_css_pipe_get_pipe_num(pipe);
+		ia_css_pipeline_get_sp_thread_id(pipe_num,
+						 &thread_id);
+		paramset_ptr = my_css_save.latest_params_ptr[pipe_num];
+		if (paramset_ptr == (hrt_vaddress)0) { /* should never reach here, in case we do return error */
+			IA_CSS_ERROR("no params stored for pipe = %p, pipe_num = %d", pipe, pipe_num);
+			err = IA_CSS_ERR_INTERNAL_ERROR;
+			goto ERR;
+		}
+		err = ia_css_pipe_enqueue_latest_param_buffer(pipe, paramset_ptr);
+		if (err != IA_CSS_SUCCESS)
+			goto ERR;
+		ia_css_bufq_enqueue_psys_event(IA_CSS_PSYS_SW_EVENT_START_STREAM,
+					       (uint8_t)thread_id, 0, 0);
+	}
+	stream->started = true;
+ERR:
+	IA_CSS_LEAVE_ERR_PRIVATE(err);
+	return err;
+}
+
+static enum ia_css_err
+ia_css_pipe_enqueue_latest_param_buffer(struct ia_css_pipe *pipe, hrt_vaddress paramset_ptr)
+{
+	unsigned int thread_id, pipe_num;
+	enum sh_css_queue_id queue_id;
+	enum ia_css_err err = IA_CSS_SUCCESS;
+
+	IA_CSS_ENTER_PRIVATE("pipe = %p, paramset = %x", pipe, paramset_ptr);
+
+	if (pipe == NULL || paramset_ptr == (hrt_vaddress)0) {
+		IA_CSS_ERROR("invalid arguments");
+		err = IA_CSS_ERR_INVALID_ARGUMENTS;
+		goto ERR;
+	}
+
+	pipe_num = ia_css_pipe_get_pipe_num(pipe);
+	ia_css_pipeline_get_sp_thread_id(pipe_num, &thread_id);
+
+	ia_css_query_internal_queue_id(IA_CSS_BUFFER_TYPE_PARAMETER_SET,
+				       thread_id,
+				       &queue_id);
+
+	err = ia_css_bufq_enqueue_buffer(thread_id, queue_id, (uint32_t)paramset_ptr);
+	if (err != IA_CSS_SUCCESS) {
+		IA_CSS_ERROR("failed to enqueue param set %x to %d, error = %d", paramset_ptr, thread_id, err);
+		goto ERR;
+	}
+
+	ia_css_bufq_enqueue_psys_event(IA_CSS_PSYS_SW_EVENT_BUFFER_ENQUEUED,
+				       (uint8_t)thread_id,
+				       (uint8_t)queue_id,
+				       0);
+	IA_CSS_LOG("enqueued param set %x to %d", paramset_ptr, thread_id);
+ERR:
+	IA_CSS_LEAVE_ERR_PRIVATE(err);
+	return err;
+}
+
+enum ia_css_err
+ia_css_save_latest_paramset_ptr(struct ia_css_pipe *pipe, hrt_vaddress ptr)
+{
+	unsigned int pipe_num, thread_id;
+
+	IA_CSS_ENTER_PRIVATE("pipe = %p, ptr = %x", pipe, ptr);
+	if (ia_css_is_system_mode_suspend_or_resume() == true) {
+		IA_CSS_ERROR("system mode is suspend or resume");
+		IA_CSS_LEAVE_ERR_PRIVATE(IA_CSS_ERR_INTERNAL_ERROR);
+		return IA_CSS_ERR_INTERNAL_ERROR;
+	}
+
+	pipe_num = ia_css_pipe_get_pipe_num(pipe);
+	ia_css_pipeline_get_sp_thread_id(pipe_num,
+					 &thread_id);
+
+	if (pipe_num >= IA_CSS_PIPELINE_NUM_MAX) {
+		IA_CSS_ERROR("pipe_num = %d is grater than %d", pipe_num, IA_CSS_PIPELINE_NUM_MAX);
+		IA_CSS_LEAVE_ERR_PRIVATE(IA_CSS_ERR_INTERNAL_ERROR);
+		return IA_CSS_ERR_INTERNAL_ERROR;
+	} else {
+		my_css_save.latest_params_ptr[pipe_num] = ptr;
+	}
+
+	IA_CSS_LEAVE_ERR_PRIVATE(IA_CSS_SUCCESS);
+	return IA_CSS_SUCCESS;
+}
+
+enum ia_css_err
+ia_css_suspend(void)
+{
+	enum ia_css_err err = IA_CSS_SUCCESS;
+
+	IA_CSS_ENTER("void");
+
+	/* customer (i.e driver) might suspend after css init prior to starting css */
+	if (ia_css_get_system_mode() == IA_CSS_SYS_MODE_INIT) {
+		IA_CSS_LOG("system was initalized but not started, skipping save stage");
+		IA_CSS_LEAVE_ERR(err);
+		return err;
+	}
+
+	ia_css_set_system_mode(IA_CSS_SYS_MODE_SUSPEND);
+
+	ia_css_dequeue_param_buffers();
+
+	err = ia_css_stop_sp();
+	if (err != IA_CSS_SUCCESS) {
+		goto ERR; /* currently redundant - but added in case new code will be added after this block */
+	}
+
+ERR:
+	ia_css_set_system_mode(IA_CSS_SYS_MODE_WORKING);
+	IA_CSS_LEAVE_ERR(err);
+	return err;
+}
+
+enum ia_css_err
+ia_css_resume(void)
+{
+	int i;
+	enum ia_css_err err = IA_CSS_SUCCESS;
+	enum ia_css_sys_mode orig_mode;
+
+	IA_CSS_ENTER("void");
+
+	orig_mode = ia_css_get_system_mode(); /* save current system mode */
+	ia_css_set_system_mode(IA_CSS_SYS_MODE_RESUME);
+
+	err = ia_css_resume_init();
+	if (err != IA_CSS_SUCCESS) {
+		goto ERR;
+	}
+
+	if (orig_mode == IA_CSS_SYS_MODE_INIT) {
+		IA_CSS_LOG("system was initalized but not started, skipping rest of resume");
+		goto ERR;
+	}
+
+	err = ia_css_start_sp();
+	if (err != IA_CSS_SUCCESS) {
+		goto ERR;
+	}
+
+	for (i = 0; i < MAX_ACTIVE_STREAMS; i++) {
+		if (my_css_save.streams[i] != NULL) {
+			IA_CSS_LOG("resuming stream = %p", my_css_save.streams[i]);
+			err = ia_css_resume_stream_start(my_css_save.streams[i]);
+			if (err != IA_CSS_SUCCESS) {
+				goto ERR;
+			}
+		}
+	}
+ERR:
+	ia_css_set_system_mode(orig_mode);
+	IA_CSS_LEAVE_ERR(err);
+	return err;
+}
+
+void enable_interrupts(enum ia_css_irq_type irq_type)
+{
+#ifdef USE_INPUT_SYSTEM_VERSION_2
+	mipi_port_ID_t port;
+#endif
+	bool enable_pulse = irq_type != IA_CSS_IRQ_TYPE_EDGE;
+	IA_CSS_ENTER_PRIVATE("");
+	/* Enable IRQ on the SP which signals that SP goes to idle
+	 * (aka ready state) */
+	cnd_sp_irq_enable(SP0_ID, true);
+	/* Set the IRQ device 0 to either level or pulse */
+	irq_enable_pulse(IRQ0_ID, enable_pulse);
+
+#if defined(IS_ISP_2500_SYSTEM)
+	cnd_virq_enable_channel(virq_sp0, true);
+	cnd_virq_enable_channel(virq_sp1, true);
+#else
+	cnd_virq_enable_channel(virq_sp, true);
+#endif
+
+	/* Enable SW interrupt 0, this is used to signal ISYS events */
+	cnd_virq_enable_channel(
+			(virq_id_t)(IRQ_SW_CHANNEL0_ID + IRQ_SW_CHANNEL_OFFSET),
+			true);
+	/* Enable SW interrupt 1, this is used to signal PSYS events */
+	cnd_virq_enable_channel(
+			(virq_id_t)(IRQ_SW_CHANNEL1_ID + IRQ_SW_CHANNEL_OFFSET),
+			true);
+#if !defined(HAS_IRQ_MAP_VERSION_2)
+	/* IRQ_SW_CHANNEL2_ID does not exist on 240x systems */
+	cnd_virq_enable_channel(
+			(virq_id_t)(IRQ_SW_CHANNEL2_ID + IRQ_SW_CHANNEL_OFFSET),
+			true);
+	virq_clear_all();
+#endif
+
+#ifdef USE_INPUT_SYSTEM_VERSION_2
+	for (port = 0; port < N_MIPI_PORT_ID; port++)
+		ia_css_isys_rx_enable_all_interrupts(port);
+#endif
+
+#if defined(HRT_CSIM)
+	/*
+	 * Enable IRQ on the SP which signals that SP goes to idle
+	 * to get statistics for each binary
+	 */
+	cnd_isp_irq_enable(ISP0_ID, true);
+	cnd_virq_enable_channel(virq_isp, true);
+#endif
+	IA_CSS_LEAVE_PRIVATE("");
+}
+
+struct ia_css_pipe* sh_css_get_next_saved_pipe(unsigned int *curr_stream_num,
+		unsigned int *curr_pipe_num)
+{
+	int i;
+	int j;
+	struct ia_css_pipe *curr_pipe = NULL;
+
+	for (i = *curr_stream_num; i < MAX_ACTIVE_STREAMS; i++) {
+		if (my_css_save.streams[i] == NULL) {
+			continue;
+		}
+		for (j = *curr_pipe_num; j < my_css_save.streams[i]->num_pipes; j++) {
+			curr_pipe = my_css_save.streams[i]->pipes[j];
+			if (curr_pipe != NULL) {
+				if ((j + 1) < my_css_save.streams[i]->num_pipes) {
+					*curr_pipe_num = j + 1;
+				} else {
+					*curr_stream_num = i + 1;
+					*curr_pipe_num = 0;
+				}
+				return curr_pipe;
+			}
+		}
+		*curr_pipe_num = 0;
+	}
+	return NULL;
+}
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.h
new file mode 100644
index 0000000..433c193
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_system_ctrl.h
@@ -0,0 +1,80 @@
+/*
+ * INTEL CONFIDENTIAL
+ *
+ * Copyright (C) 2015 Intel Corporation.
+ * All Rights Reserved.
+ *
+ * The source code contained or described herein and all documents
+ * related to the source code ("Material") are owned by Intel Corporation
+ * or licensors. Title to the Material remains with Intel
+ * Corporation or its licensors. The Material contains trade
+ * secrets and proprietary and confidential information of Intel or its
+ * licensors. The Material is protected by worldwide copyright
+ * and trade secret laws and treaty provisions. No part of the Material may
+ * be used, copied, reproduced, modified, published, uploaded, posted,
+ * transmitted, distributed, or disclosed in any way without Intel's prior
+ * express written permission.
+ *
+ * No License under any patent, copyright, trade secret or other intellectual
+ * property right is granted to or conferred upon you by disclosure or
+ * delivery of the Materials, either expressly, by implication, inducement,
+ * estoppel or otherwise. Any license under such intellectual property rights
+ * must be express and approved by Intel in writing.
+ */
+
+#ifndef _IA_CSS_SYSTEM_CTRL_H
+#define _IA_CSS_SYSTEM_CTRL_H
+
+#include "ia_css_pipeline.h"
+#include "ia_css_irq.h"
+#include "ia_css_stream.h"
+
+enum ia_css_sys_mode {
+	IA_CSS_SYS_MODE_NONE = 0,
+	IA_CSS_SYS_MODE_INIT,	     /* css initialized but not started */
+	IA_CSS_SYS_MODE_WORKING,     /* css initialized, and started */
+	IA_CSS_SYS_MODE_SUSPEND,     /* css is suspending the system */
+	IA_CSS_SYS_MODE_RESUME	     /* css is resuming the system */
+};
+
+#define MAX_ACTIVE_STREAMS	5
+
+/* internal struct for save/restore to hold all the data that should sustain power-down:
+   MMU base, IRQ type, pointers to streams and param-sets
+*/
+struct sh_css_save {
+	enum ia_css_sys_mode	      mode;
+	uint32_t                      mmu_base;
+	enum ia_css_irq_type          irq_type;
+	struct ia_css_stream	      *streams[MAX_ACTIVE_STREAMS];
+	hrt_vaddress                  latest_params_ptr[IA_CSS_PIPELINE_NUM_MAX];
+};
+
+void ia_css_set_system_mode(enum ia_css_sys_mode mode);
+
+enum ia_css_sys_mode
+ia_css_get_system_mode(void);
+
+bool ia_css_is_system_mode_suspend_or_resume(void);
+
+void ia_css_save_restore_data_init(void);
+
+void ia_css_save_irq_type(enum ia_css_irq_type irq_type);
+
+void ia_css_save_mmu_base_addr(uint32_t mmu_base_addr);
+
+enum ia_css_err
+ia_css_save_stream(struct ia_css_stream *stream);
+
+enum ia_css_err
+ia_css_save_restore_remove_stream(struct ia_css_stream *stream);
+
+enum ia_css_err
+ia_css_save_latest_paramset_ptr(struct ia_css_pipe *pipe, hrt_vaddress ptr);
+
+void enable_interrupts(enum ia_css_irq_type irq_type);
+
+struct ia_css_pipe* sh_css_get_next_saved_pipe(unsigned int *curr_stream_num,
+					       unsigned int *curr_pipe_num);
+
+#endif /* _IA_CSS_SYSTEM_CTRL_H */
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h
index 63d2cb7..31938ce 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_types.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_master_20150722_1500 */
+/* Release Version: irci_master_20150729_0209 */
 /*
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h
index 0f0de4c..56eeab4 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/ia_css_version_data.h
@@ -22,7 +22,7 @@ more details.
 #define __IA_CSS_VERSION_DATA_H
 
 
-#define CSS_VERSION_STRING "REL:20150722_30.3_2047; API:2.1.20.7; GIT:scci_20150721_1800__cc540b#cc540b0aaea35d2861d813960bb98d557e40153f; SDK:; USER:viedifw; "
+#define CSS_VERSION_STRING "REL:20150729_31.3_0841; API:2.1.20.8; GIT:irci_20150728_0555_#7cb14355085d6aa7ee14eb7bc1d5aec3f87f7228; SDK:; USER:viedifw; "
 
 
 #endif
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.c
index 301d9dd..0bc9574 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.c
@@ -1,4 +1,4 @@
-/* Release Version: irci_master_20150722_1500 */
+/* Release Version: irci_master_20150729_0209 */
 /*
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.h
index ee3c19d..1806091 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr.host.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_master_20150722_1500 */
+/* Release Version: irci_master_20150729_0209 */
 /*
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_param.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_param.h
index 0788198..71d888d 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_param.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_param.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_master_20150722_1500 */
+/* Release Version: irci_master_20150729_0209 */
 /*
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_types.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_types.h
index 8fbb3d2..f323442 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_types.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/isp/kernels/hdr/ia_css_hdr_types.h
@@ -1,4 +1,4 @@
-/* Release Version: irci_master_20150722_1500 */
+/* Release Version: irci_master_20150729_0209 */
 /*
 Support for Intel Camera Imaging ISP subsystem.
 Copyright (c) 2010 - 2015, Intel Corporation.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/debug/src/ia_css_debug.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/debug/src/ia_css_debug.c
index 36a64d7..a1f553e 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/debug/src/ia_css_debug.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/runtime/debug/src/ia_css_debug.c
@@ -47,6 +47,7 @@ more details.
 #include "assert_support.h"
 #include "print_support.h"
 #include "string_support.h"
+#include "ia_css_system_ctrl.h"
 
 #include "fifo_monitor.h"
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c
index 887cc1d..f78f9a9 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css.c
@@ -19,6 +19,7 @@ more details.
 #include "sh_css_internal.h"
 #include "sh_css_mipi.h"
 #include "sh_css_sp.h"		/* sh_css_sp_group */
+#include "ia_css_system_ctrl.h"
 #if !defined(HAS_NO_INPUT_SYSTEM)
 #include "ia_css_isys.h"
 #endif
@@ -60,6 +61,7 @@ more details.
 #include "input_system.h"
 #endif
 #include "mmu_device.h"		/* mmu_set_page_table_base_index(), ... */
+#include "ia_css_mmu_private.h" /* sh_css_mmu_set_page_table_base_index() */
 #include "gdc_device.h"		/* HRT_GDC_N */
 #include "dma.h"		/* dma_set_max_burst_size() */
 #include "irq.h"			/* virq */
@@ -138,31 +140,6 @@ struct sh_css my_css;
 
 int (*sh_css_printf) (const char *fmt, va_list args) = NULL;
 
-/* modes of work: stream_create and stream_destroy will update the save/restore data
-   only when in working mode, not suspend/resume
-*/
-enum ia_sh_css_modes {
-	sh_css_mode_none = 0,
-	sh_css_mode_working,
-	sh_css_mode_suspend,
-	sh_css_mode_resume
-};
-
-#define MAX_ACTIVE_STREAMS	5
-/* A global struct for save/restore to hold all the data that should sustain power-down:
-   MMU base, IRQ type, env for routines, binary loaded FW and the stream seeds.
-*/
-struct sh_css_save {
-	enum ia_sh_css_modes	      mode;
-	uint32_t                      mmu_base; /* mmu_base address */
-	enum ia_css_irq_type          irq_type;
-	struct ia_css_stream	      *streams[MAX_ACTIVE_STREAMS];
-	hrt_vaddress                  latest_params_ptr[IA_CSS_PIPELINE_NUM_MAX];
-};
-
-static bool my_css_save_initialized;	/* if my_css_save was initialized */
-static struct sh_css_save my_css_save;
-
 /* pqiao NOTICE: this is for css internal buffer recycling when stopping pipeline,
    this array is temporary and will be replaced by resource manager*/
 /* Taking the biggest Size for number of Elements */
@@ -178,9 +155,6 @@ struct sh_css_hmm_buffer_record {
 
 static struct sh_css_hmm_buffer_record hmm_buffer_record[MAX_HMM_BUFFER_NUM];
 
-
-#define GPIO_FLASH_PIN_MASK (1 << HIVE_GPIO_STROBE_TRIGGER_PIN)
-
 static bool fw_explicitly_loaded = false;
 
 /**
@@ -188,18 +162,6 @@ static bool fw_explicitly_loaded = false;
  */
 
 static enum ia_css_err
-ia_css_resume_init(void);
-
-static enum ia_css_err
-ia_css_resume_stream_start(struct ia_css_stream *stream);
-
-static enum ia_css_err
-ia_css_pipe_enqueue_latest_param_buffer(struct ia_css_pipe *pipe, hrt_vaddress paramset_ptr);
-
-enum ia_css_err
-store_latest_paramset_ptr(struct ia_css_pipe *pipe, hrt_vaddress ptr);
-
-static enum ia_css_err
 allocate_delay_frames(struct ia_css_pipe *pipe);
 
 static enum ia_css_err
@@ -256,9 +218,6 @@ ia_css_reset_defaults(struct sh_css* css);
 static void
 sh_css_init_host_sp_control_vars(void);
 
-static void
-sh_css_mmu_set_page_table_base_index(hrt_data base_index);
-
 static enum ia_css_err set_num_primary_stages(unsigned int *num, enum ia_css_pipe_version version);
 
 static bool
@@ -1519,59 +1478,6 @@ sh_css_invalidate_shading_tables(struct ia_css_stream *stream)
 		"sh_css_invalidate_shading_tables() leave: return_void\n");
 }
 
-static void
-enable_interrupts(enum ia_css_irq_type irq_type)
-{
-#ifdef USE_INPUT_SYSTEM_VERSION_2
-	mipi_port_ID_t port;
-#endif
-	bool enable_pulse = irq_type != IA_CSS_IRQ_TYPE_EDGE;
-	IA_CSS_ENTER_PRIVATE("");
-	/* Enable IRQ on the SP which signals that SP goes to idle
-	 * (aka ready state) */
-	cnd_sp_irq_enable(SP0_ID, true);
-	/* Set the IRQ device 0 to either level or pulse */
-	irq_enable_pulse(IRQ0_ID, enable_pulse);
-
-#if defined(IS_ISP_2500_SYSTEM)
-	cnd_virq_enable_channel(virq_sp0, true);
-	cnd_virq_enable_channel(virq_sp1, true);
-#else
-	cnd_virq_enable_channel(virq_sp, true);
-#endif
-
-	/* Enable SW interrupt 0, this is used to signal ISYS events */
-	cnd_virq_enable_channel(
-			(virq_id_t)(IRQ_SW_CHANNEL0_ID + IRQ_SW_CHANNEL_OFFSET),
-			true);
-	/* Enable SW interrupt 1, this is used to signal PSYS events */
-	cnd_virq_enable_channel(
-			(virq_id_t)(IRQ_SW_CHANNEL1_ID + IRQ_SW_CHANNEL_OFFSET),
-			true);
-#if !defined(HAS_IRQ_MAP_VERSION_2)
-	/* IRQ_SW_CHANNEL2_ID does not exist on 240x systems */
-	cnd_virq_enable_channel(
-			(virq_id_t)(IRQ_SW_CHANNEL2_ID + IRQ_SW_CHANNEL_OFFSET),
-			true);
-	virq_clear_all();
-#endif
-
-#ifdef USE_INPUT_SYSTEM_VERSION_2
-	for (port = 0; port < N_MIPI_PORT_ID; port++)
-		ia_css_isys_rx_enable_all_interrupts(port);
-#endif
-
-#if defined(HRT_CSIM)
-	/*
-	 * Enable IRQ on the SP which signals that SP goes to idle
-	 * to get statistics for each binary
-	 */
-	cnd_isp_irq_enable(ISP0_ID, true);
-	cnd_virq_enable_channel(virq_isp, true);
-#endif
-	IA_CSS_LEAVE_PRIVATE("");
-}
-
 #if defined(HAS_BL)
 static bool sh_css_setup_blctrl_config(const struct ia_css_fw_info *fw,
 							const char *program,
@@ -1659,34 +1565,6 @@ ia_css_reset_defaults(struct sh_css* css)
 	*css = default_css;
 }
 
-struct ia_css_pipe* sh_css_get_next_saved_pipe(unsigned int *curr_stream_num,
-		unsigned int *curr_pipe_num)
-{
-	int i;
-	int j;
-	struct ia_css_pipe *curr_pipe = NULL;
-
-	for (i = *curr_stream_num; i < MAX_ACTIVE_STREAMS; i++) {
-		if (my_css_save.streams[i] == NULL) {
-			continue;
-		}
-		for (j = *curr_pipe_num; j < my_css_save.streams[i]->num_pipes; j++) {
-			curr_pipe = my_css_save.streams[i]->pipes[j];
-			if (curr_pipe != NULL) {
-				if ((j + 1) < my_css_save.streams[i]->num_pipes) {
-					*curr_pipe_num = j + 1;
-				} else {
-					*curr_stream_num = i + 1;
-					*curr_pipe_num = 0;
-				}
-				return curr_pipe;
-			}
-		}
-		*curr_pipe_num = 0;
-	}
-	return NULL;
-}
-
 bool
 ia_css_check_firmware_version(const struct ia_css_fw  *fw)
 {
@@ -1753,7 +1631,6 @@ ia_css_init(const struct ia_css_env *env,
 	    enum ia_css_irq_type     irq_type)
 {
 	enum ia_css_err err;
-	int i;
 	ia_css_spctrl_cfg spctrl_cfg;
 #if defined(HAS_BL)
 	ia_css_blctrl_cfg blctrl_cfg;
@@ -1840,7 +1717,7 @@ ia_css_init(const struct ia_css_env *env,
 							| GPIO_FLASH_PIN_MASK;
 #endif
 	sh_css_mmu_set_page_table_base_index(mmu_l1_base);
-	my_css_save.mmu_base = mmu_l1_base;
+	ia_css_save_mmu_base_addr(mmu_l1_base);
 
 	if (malloc_func == NULL || free_func == NULL) {
 		IA_CSS_LEAVE_ERR(IA_CSS_ERR_INVALID_ARGUMENTS);
@@ -1861,25 +1738,12 @@ ia_css_init(const struct ia_css_env *env,
 		return err;
 	}
 
-	IA_CSS_LOG("init: %d", my_css_save_initialized);
+	ia_css_save_restore_data_init();
 
-	if (!my_css_save_initialized)
-	{
-		my_css_save_initialized = true;
-		my_css_save.mode = sh_css_mode_working;
-		for (i = 0; i < MAX_ACTIVE_STREAMS ; i++)
-		{
-			my_css_save.streams[i] = NULL;
-		}
-	}
 	mipi_init();
 
-	/* In case this has been programmed already, update internal
-	   data structure ... DEPRECATED */
-	my_css.page_table_base_index = mmu_get_page_table_base_index(MMU0_ID);
-
 	my_css.irq_type = irq_type;
-	my_css_save.irq_type = irq_type;
+	ia_css_save_irq_type(irq_type);
 	enable_interrupts(my_css.irq_type);
 
 #if !defined(HAS_NO_GPIO)
@@ -2013,248 +1877,6 @@ ia_css_init(const struct ia_css_env *env,
 	return err;
 }
 
-/* ia_css_resume_init is used upon css resume to initialize css,
-   corresponds to ia_css_init */
-static enum ia_css_err
-ia_css_resume_init(void)
-{
-	enum ia_css_err err = IA_CSS_SUCCESS;
-#if !defined(HAS_NO_GPIO)
-	hrt_data select, enable;
-#endif
-
-	IA_CSS_ENTER_PRIVATE("void");
-
-#if !defined(HAS_NO_GPIO)
-	select = gpio_reg_load(GPIO0_ID, _gpio_block_reg_do_select)
-	  & (~GPIO_FLASH_PIN_MASK);
-	enable = gpio_reg_load(GPIO0_ID, _gpio_block_reg_do_e)
-	  | GPIO_FLASH_PIN_MASK;
-#endif
-	sh_css_mmu_set_page_table_base_index(my_css_save.mmu_base);
-	/* In case this has been programmed already, update internal
-	   data structure ... DEPRECATED
-	   my_css.page_table_base_index = mmu_get_page_table_base_index(MMU0_ID);
-	*/
-
-	enable_interrupts(my_css.irq_type);
-
-#if !defined(HAS_NO_GPIO)
-	/* configure GPIO to output mode */
-	gpio_reg_store(GPIO0_ID, _gpio_block_reg_do_select, select);
-	gpio_reg_store(GPIO0_ID, _gpio_block_reg_do_e, enable);
-	gpio_reg_store(GPIO0_ID, _gpio_block_reg_do_0, 0);
-#endif
-
-	sh_css_spctrl_reload_fw(SP0_ID);
-#if defined(HAS_SEC_SP)
-	sh_css_spctrl_reload_fw(SP1_ID);
-#endif
-#if defined(HAS_BL)
-	ia_css_blctrl_reload_fw();
-#endif
-
-#if defined(HRT_CSIM)
-	/**
-	 * In compiled simulator context include debug support by default.
-	 * In all other cases (e.g. Android phone), the user (e.g. driver)
-	 * must explicitly enable debug support by calling this function.
-	 */
-	if (!ia_css_debug_mode_init()) {
-		IA_CSS_LEAVE_ERR(IA_CSS_ERR_INTERNAL_ERROR);
-		return IA_CSS_ERR_INTERNAL_ERROR;
-	}
-#endif
-	if (!sh_css_hrt_system_is_idle()) {
-		IA_CSS_LEAVE_ERR(IA_CSS_ERR_SYSTEM_NOT_IDLE);
-		return IA_CSS_ERR_SYSTEM_NOT_IDLE;
-	}
-
-#if defined(HAS_INPUT_SYSTEM_VERSION_2) && defined(HAS_INPUT_SYSTEM_VERSION_2401)
-#if    defined(USE_INPUT_SYSTEM_VERSION_2)
-	gp_device_reg_store(GP_DEVICE0_ID, _REG_GP_SWITCH_ISYS2401_ADDR, 0);
-#elif defined (USE_INPUT_SYSTEM_VERSION_2401)
-	gp_device_reg_store(GP_DEVICE0_ID, _REG_GP_SWITCH_ISYS2401_ADDR, 1);
-#endif
-#endif
-
-	IA_CSS_LEAVE_ERR(err);
-	return err;
-}
-
-/* ia_css_resume_stream_start is used upon CSS resume, function enqueues
-   latest paramset and sends a "start_stream" event to SP */
-static enum ia_css_err
-ia_css_resume_stream_start(struct ia_css_stream *stream)
-{
-	unsigned int thread_id, pipe_num;
-	int i;
-	hrt_vaddress paramset_ptr;
-	struct ia_css_pipe *pipe;
-	enum ia_css_err err = IA_CSS_SUCCESS;
-
-	IA_CSS_ENTER_PRIVATE("stream = %p", stream);
-	if (stream == NULL) {
-		IA_CSS_LEAVE_ERR(IA_CSS_ERR_INVALID_ARGUMENTS);
-		return IA_CSS_ERR_INVALID_ARGUMENTS;
-	}
-
-	if (sh_css_sp_is_running() == false) {
-		IA_CSS_ERROR("sp is not runnning");
-		IA_CSS_LEAVE_ERR(IA_CSS_ERR_INTERNAL_ERROR);
-		return IA_CSS_ERR_INTERNAL_ERROR;
-	}
-
-	for (i = 0; i < stream->num_pipes ; i++) {
-		stream->pipes[i]->stop_requested = false;
-		pipe = stream->pipes[i];
-		pipe_num = ia_css_pipe_get_pipe_num(pipe);
-		ia_css_pipeline_get_sp_thread_id(pipe_num,
-						 &thread_id);
-		paramset_ptr = my_css_save.latest_params_ptr[pipe_num];
-		if (paramset_ptr == (hrt_vaddress)0) { /* should never reach here, in case we do return error */
-			IA_CSS_ERROR("no params stored for pipe = %p, pipe_num = %d", pipe, pipe_num);
-			err = IA_CSS_ERR_INTERNAL_ERROR;
-			goto ERR;
-		}
-		err = ia_css_pipe_enqueue_latest_param_buffer(pipe, paramset_ptr);
-		if (err != IA_CSS_SUCCESS)
-			goto ERR;
-		ia_css_bufq_enqueue_psys_event(IA_CSS_PSYS_SW_EVENT_START_STREAM,
-					       (uint8_t)thread_id, 0, 0);
-	}
-	stream->started = true;
-ERR:
-	IA_CSS_LEAVE_ERR_PRIVATE(err);
-	return err;
-}
-
-
-static enum ia_css_err
-ia_css_pipe_enqueue_latest_param_buffer(struct ia_css_pipe *pipe, hrt_vaddress paramset_ptr)
-{
-	unsigned int thread_id, pipe_num;
-	enum sh_css_queue_id queue_id;
-	enum ia_css_err err = IA_CSS_SUCCESS;
-
-	IA_CSS_ENTER_PRIVATE("pipe = %p, paramset = %x", pipe, paramset_ptr);
-
-	if (pipe == NULL || paramset_ptr == (hrt_vaddress)0) {
-		IA_CSS_ERROR("invalid arguments");
-		err = IA_CSS_ERR_INVALID_ARGUMENTS;
-		goto ERR;
-	}
-
-	pipe_num = ia_css_pipe_get_pipe_num(pipe);
-	ia_css_pipeline_get_sp_thread_id(pipe_num, &thread_id);
-
-	ia_css_query_internal_queue_id(IA_CSS_BUFFER_TYPE_PARAMETER_SET,
-				       thread_id,
-				       &queue_id);
-
-	err = ia_css_bufq_enqueue_buffer(thread_id, queue_id, (uint32_t)paramset_ptr);
-	if (err != IA_CSS_SUCCESS) {
-		IA_CSS_ERROR("failed to enqueue param set %x to %d, error = %d", paramset_ptr, thread_id, err);
-		goto ERR;
-	}
-
-	ia_css_bufq_enqueue_psys_event(IA_CSS_PSYS_SW_EVENT_BUFFER_ENQUEUED,
-				       (uint8_t)thread_id,
-				       (uint8_t)queue_id,
-				       0);
-	IA_CSS_LOG("enqueued param set %x to %d", paramset_ptr, thread_id);
-ERR:
-	IA_CSS_LEAVE_ERR_PRIVATE(err);
-	return err;
-}
-
-enum ia_css_err
-store_latest_paramset_ptr(struct ia_css_pipe *pipe, hrt_vaddress ptr)
-{
-	unsigned int pipe_num, thread_id;
-
-	IA_CSS_ENTER_PRIVATE("pipe = %p, ptr = %x", pipe, ptr);
-	if (my_css_save.mode != sh_css_mode_working) {
-		IA_CSS_ERROR("mode is not working mode");
-		IA_CSS_LEAVE_ERR_PRIVATE(IA_CSS_ERR_INTERNAL_ERROR);
-		return IA_CSS_ERR_INTERNAL_ERROR;
-	}
-
-	pipe_num = ia_css_pipe_get_pipe_num(pipe);
-	ia_css_pipeline_get_sp_thread_id(pipe_num,
-					 &thread_id);
-
-	if (pipe_num >= IA_CSS_PIPELINE_NUM_MAX) {
-		IA_CSS_ERROR("pipe_num = %d is grater than %d", pipe_num, IA_CSS_PIPELINE_NUM_MAX);
-		IA_CSS_LEAVE_ERR_PRIVATE(IA_CSS_ERR_INTERNAL_ERROR);
-		return IA_CSS_ERR_INTERNAL_ERROR;
-	} else {
-		my_css_save.latest_params_ptr[pipe_num] = ptr;
-	}
-
-	IA_CSS_LEAVE_ERR_PRIVATE(IA_CSS_SUCCESS);
-	return IA_CSS_SUCCESS;
-}
-
-enum ia_css_err
-ia_css_suspend(void)
-{
-	enum ia_css_err err = IA_CSS_SUCCESS;
-
-	IA_CSS_ENTER("void");
-
-	my_css_save.mode = sh_css_mode_suspend;
-
-	ia_css_dequeue_param_buffers();
-
-	err = ia_css_stop_sp();
-	if (err != IA_CSS_SUCCESS) {
-		goto ERR; /* currently redundant - but added in case new code will be added after this block */
-	}
-
-ERR:
-	my_css_save.mode = sh_css_mode_working;
-	IA_CSS_LEAVE_ERR(err);
-	return err;
-}
-
-enum ia_css_err
-ia_css_resume(void)
-{
-	int i;
-	enum ia_css_err err = IA_CSS_SUCCESS;
-
-	IA_CSS_ENTER("void");
-
-	my_css_save.mode = sh_css_mode_resume;
-
-	err = ia_css_resume_init();
-	if (err != IA_CSS_SUCCESS) {
-		goto ERR;
-	}
-
-	err = ia_css_start_sp();
-	if (err != IA_CSS_SUCCESS) {
-		goto ERR;
-	}
-
-	for (i = 0; i < MAX_ACTIVE_STREAMS; i++)
-	{
-		if (my_css_save.streams[i] != NULL) {
-			IA_CSS_LOG("resuming stream = %p", my_css_save.streams[i]);
-			err = ia_css_resume_stream_start(my_css_save.streams[i]);
-			if (err != IA_CSS_SUCCESS) {
-				goto ERR;
-			}
-		}
-	}
-ERR:
-	my_css_save.mode = sh_css_mode_working;
-	IA_CSS_LEAVE_ERR(err);
-	return err;
-
-}
-
 enum ia_css_err
 ia_css_enable_isys_event_queue(bool enable)
 {
@@ -2967,21 +2589,6 @@ ia_css_uninit(void)
 	ia_css_debug_dtrace(IA_CSS_DEBUG_TRACE, "ia_css_uninit() leave: return_void\n");
 }
 
-/* Deprecated, this is an HRT backend function (memory_access.h) */
-static void
-sh_css_mmu_set_page_table_base_index(hrt_data base_index)
-{
-	int i;
-	ia_css_debug_dtrace(IA_CSS_DEBUG_TRACE_PRIVATE, "sh_css_mmu_set_page_table_base_index() enter: base_index=0x%08x\n",base_index);
-	my_css.page_table_base_index = base_index;
-	for (i = 0; i < (int)N_MMU_ID; i++) {
-		mmu_ID_t mmu_id = (mmu_ID_t)i;
-		mmu_set_page_table_base_index(mmu_id, base_index);
-		mmu_invalidate_cache(mmu_id);
-	}
-	ia_css_debug_dtrace(IA_CSS_DEBUG_TRACE_PRIVATE, "sh_css_mmu_set_page_table_base_index() leave: return_void\n");
-}
-
 #if defined(HAS_IRQ_MAP_VERSION_2)
 enum ia_css_err ia_css_irq_translate(
 	unsigned int *irq_infos)
@@ -10176,21 +9783,12 @@ ia_css_stream_create(const struct ia_css_stream_config *stream_config,
 	*stream = curr_stream;
 
 ERR:
-	if (err == IA_CSS_SUCCESS)
-	{
-		/* working mode: enter into the seed list */
-		if (my_css_save.mode == sh_css_mode_working)
-		for(i = 0; i < MAX_ACTIVE_STREAMS; i++)
-			if (my_css_save.streams[i] == NULL)
-			{
-				IA_CSS_LOG("entered stream into loc=%d", i);
-				my_css_save.streams[i] = curr_stream;
-				break;
-			}
+	if (err == IA_CSS_SUCCESS) {
+		err = ia_css_save_stream(curr_stream);
 	} else {
 		ia_css_stream_destroy(curr_stream);
 	}
-	IA_CSS_LEAVE("return_err=%d mode=%d", err, my_css_save.mode);
+	IA_CSS_LEAVE("return_err=%d", err);
 	return err;
 }
 
@@ -10199,6 +9797,8 @@ ia_css_stream_destroy(struct ia_css_stream *stream)
 {
 	int i;
 	enum ia_css_err err = IA_CSS_SUCCESS;
+	enum ia_css_err err1 = IA_CSS_SUCCESS;
+	enum ia_css_err err2 = IA_CSS_SUCCESS;
 
 	IA_CSS_ENTER_PRIVATE("stream = %p", stream);
 	if (stream == NULL) {
@@ -10289,20 +9889,13 @@ ia_css_stream_destroy(struct ia_css_stream *stream)
 	sh_css_free(stream->pipes);
 	stream->pipes = NULL;
 	stream->num_pipes = 0;
-	/* working mode: take out of the seed list */
-	if (my_css_save.mode == sh_css_mode_working) {
-		for (i = 0; i < MAX_ACTIVE_STREAMS; i++)
-			if (my_css_save.streams[i] == stream)
-			{
-				IA_CSS_LOG("took out stream %d", i);
-				my_css_save.streams[i]  = NULL;
-				break;
-			}
-	}
+	err2 = ia_css_save_restore_remove_stream(stream);
+
+	err1 = (err != IA_CSS_SUCCESS) ? err : err2;
 	sh_css_free(stream);
-	IA_CSS_LEAVE_ERR(err);
+	IA_CSS_LEAVE_ERR(err1);
 
-	return err;
+	return err1;
 }
 
 enum ia_css_err
@@ -10381,6 +9974,7 @@ ia_css_stream_start(struct ia_css_stream *stream)
 #endif /* !HAS_NO_INPUT_SYSTEM */
 
 	err = sh_css_pipe_start(stream);
+	ia_css_set_system_mode(IA_CSS_SYS_MODE_WORKING);
 	IA_CSS_LEAVE_ERR(err);
 	return err;
 }
@@ -10966,7 +10560,7 @@ ia_css_stop_sp(void)
 
 	sh_css_hmm_buffer_record_uninit();
 
-	if (my_css_save.mode == sh_css_mode_working) /* skip in suspend/resume flow */ {
+	if (ia_css_is_system_mode_suspend_or_resume() == false) { /* skip in suspend/resume flow */
 		/* clear pending param sets from refcount */
 		sh_css_param_clear_param_sets();
 	}
@@ -11487,7 +11081,7 @@ sh_css_hmm_buffer_record_init(void)
 {
 	int i;
 
-	if (my_css_save.mode == sh_css_mode_working) {	/* skip in suspend/resume flow */
+	if (ia_css_is_system_mode_suspend_or_resume() == false) { /* skip in suspend/resume flow */
 		for (i = 0; i < MAX_HMM_BUFFER_NUM; i++) {
 			sh_css_hmm_buffer_record_reset(&hmm_buffer_record[i]);
 		}
@@ -11500,7 +11094,7 @@ sh_css_hmm_buffer_record_uninit(void)
 	int i;
 	struct sh_css_hmm_buffer_record *buffer_record = NULL;
 
-	if (my_css_save.mode == sh_css_mode_working) {		/* skip in suspend/resume flow */
+	if (ia_css_is_system_mode_suspend_or_resume() == false) { /* skip in suspend/resume flow */
 		buffer_record = &hmm_buffer_record[0];
 		for (i = 0; i < MAX_HMM_BUFFER_NUM; i++) {
 			if (buffer_record->in_use) {
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c
index 260ce77..7eeb6cd 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_firmware.c
@@ -47,10 +47,10 @@ struct fw_param {
 /* Warning: same order as SH_CSS_BINARY_ID_* */
 static struct firmware_header *firmware_header;
 
-/* The string STR(irci_master_20150722_1500) is a place holder
+/* The string STR(irci_master_20150729_0209) is a place holder
  * which will be replaced with the actual RELEASE_VERSION
  * during package generation. Please do not modify  */
-static const char *release_version = STR(irci_master_20150722_1500);
+static const char *release_version = STR(irci_master_20150729_0209);
 
 #define MAX_FW_REL_VER_NAME	300
 static char FW_rel_ver_name[MAX_FW_REL_VER_NAME] = "---";
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_internal.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_internal.h
index 285548c..19d380d 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_internal.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_internal.h
@@ -1167,7 +1167,4 @@ ia_css_get_crop_offsets(
 #endif
 #endif /* !defined(__ISP) && !defined(__SP) */
 
-struct ia_css_pipe* sh_css_get_next_saved_pipe(unsigned int *curr_stream_num,
-		unsigned int *curr_pipe_num);
-
 #endif /* _SH_CSS_INTERNAL_H_ */
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_mmu.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_mmu.c
index 97eeff1..3040f69 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_mmu.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_mmu.c
@@ -13,10 +13,12 @@ more details.
 */
 
 #include "ia_css_mmu.h"
+#include "ia_css_mmu_private.h"
 #include <ia_css_debug.h>
 #include "sh_css_sp.h"
 #include "sh_css_firmware.h"
 #include "sp.h"
+#include "mmu_device.h"
 
 void
 ia_css_mmu_invalidate_cache(void)
@@ -38,3 +40,17 @@ ia_css_mmu_invalidate_cache(void)
 	}
 	ia_css_debug_dtrace(IA_CSS_DEBUG_TRACE, "ia_css_mmu_invalidate_cache() leave\n");
 }
+
+/* Deprecated, this is an HRT backend function (memory_access.h) */
+void
+sh_css_mmu_set_page_table_base_index(hrt_data base_index)
+{
+	int i;
+	IA_CSS_ENTER_PRIVATE("base_index=0x%08x\n", base_index);
+	for (i = 0; i < N_MMU_ID; i++) {
+		mmu_ID_t mmu_id = i;
+		mmu_set_page_table_base_index(mmu_id, base_index);
+		mmu_invalidate_cache(mmu_id);
+	}
+	IA_CSS_LEAVE_PRIVATE("");
+}
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_params.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_params.c
index 3f0472e..62ca56d 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_params.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css/sh_css_params.c
@@ -54,6 +54,7 @@ more details.
 #include "ia_css_host_data.h"
 #include "ia_css_pipe.h"
 #include "ia_css_pipe_binarydesc.h"
+#include "ia_css_system_ctrl.h"
 
 #if !defined(IS_ISP_2500_SYSTEM)
 /* Include all kernel host interfaces for ISP1 */
@@ -1285,8 +1286,7 @@ sh_css_set_global_isp_config_on_pipe(
 	const struct ia_css_isp_config *config,
 	struct ia_css_pipe *pipe);
 
-extern enum ia_css_err
-store_latest_paramset_ptr(struct ia_css_pipe *pipe, hrt_vaddress ptr);
+
 
 #if defined(SH_CSS_ENABLE_PER_FRAME_PARAMS)
 static enum ia_css_err
@@ -4288,7 +4288,7 @@ sh_css_param_update_isp_params(struct ia_css_pipe *curr_pipe,
 			 */
 			g_param_buffer_enqueue_count++;
 			assert(g_param_buffer_enqueue_count < g_param_buffer_dequeue_count+50);
-			store_latest_paramset_ptr(pipe, cpy);
+			ia_css_save_latest_paramset_ptr(pipe, cpy);
 			/*
 			 * Tell the SP which queues are not empty,
 			 * by sending the software event.
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_mmu_private.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_mmu_private.h
new file mode 120000
index 0000000..75a5b7f
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_mmu_private.h
@@ -0,0 +1 @@
+../../css/ia_css_mmu_private.h
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.c
new file mode 120000
index 0000000..c373c9a
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.c
@@ -0,0 +1 @@
+../../css/ia_css_system_ctrl.c
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.h
new file mode 120000
index 0000000..8fa3649
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2400b0_v21_build/css/ia_css_system_ctrl.h
@@ -0,0 +1 @@
+../../css/ia_css_system_ctrl.h
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_mmu_private.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_mmu_private.h
new file mode 120000
index 0000000..75a5b7f
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_mmu_private.h
@@ -0,0 +1 @@
+../../css/ia_css_mmu_private.h
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.c
new file mode 120000
index 0000000..c373c9a
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.c
@@ -0,0 +1 @@
+../../css/ia_css_system_ctrl.c
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.h
new file mode 120000
index 0000000..8fa3649
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_legacy_v21_build/css/ia_css_system_ctrl.h
@@ -0,0 +1 @@
+../../css/ia_css_system_ctrl.h
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_mmu_private.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_mmu_private.h
new file mode 120000
index 0000000..75a5b7f
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_mmu_private.h
@@ -0,0 +1 @@
+../../css/ia_css_mmu_private.h
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.c
new file mode 120000
index 0000000..c373c9a
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.c
@@ -0,0 +1 @@
+../../css/ia_css_system_ctrl.c
\ No newline at end of file
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.h
new file mode 120000
index 0000000..8fa3649
--- /dev/null
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/css2401a0_v21_build/css/ia_css_system_ctrl.h
@@ -0,0 +1 @@
+../../css/ia_css_system_ctrl.h
\ No newline at end of file
-- 
1.9.1

