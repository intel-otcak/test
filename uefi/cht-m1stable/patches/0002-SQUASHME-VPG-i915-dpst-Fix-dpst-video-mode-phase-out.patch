From bbe2e9c94102fd9e7562b8e967a8d86905cc3018 Mon Sep 17 00:00:00 2001
Message-Id: <bbe2e9c94102fd9e7562b8e967a8d86905cc3018.1440053504.git.chang-joon.lee@intel.com>
In-Reply-To: <6008ee84d5599bc5fa55865b2ba0bb03e982c7b7.1440053504.git.chang-joon.lee@intel.com>
References: <6008ee84d5599bc5fa55865b2ba0bb03e982c7b7.1440053504.git.chang-joon.lee@intel.com>
From: Praveen Paneri <praveen.paneri@intel.com>
Date: Wed, 15 Jul 2015 19:41:20 +0530
Subject: [PATCH 2/5] SQUASHME! [VPG]: i915/dpst: Fix dpst video mode phase out

When we want to phase out dpst changes gradually, we must not restore
actual backlight value in one shot. Instead let it happen through
userspace calls to apply adjustments. This patch fixes this by
removing a call to intel_panel_actually_set_backlight() function.
Also allow the backlight adjustments to happen even when DPST is
disabled in such a scenario.

v2: Adding backlight adjustment restore code to DPST disable path
from debugfs.

SQUASHME! - This patch should be squashed into the following patch:
Author: sudheer gurram <sudheer.gurram@intel.com>
Change-Id: I30a18d01f5735546c80ac5660b45c0419771ed98
MUST_REBASE [VPG]: drm/i915: Fix for the gamma curve issue

Change-Id: I5acc56950498f9d92d1736b20fed4582c16a3f79
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-13781
Signed-off-by: Praveen Paneri <praveen.paneri@intel.com>
---
 drivers/gpu/drm/i915/i915_dpst.c | 21 ++++++++++++---------
 1 file changed, 12 insertions(+), 9 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dpst.c b/drivers/gpu/drm/i915/i915_dpst.c
index 5c114d5..6c4524f 100644
--- a/drivers/gpu/drm/i915/i915_dpst.c
+++ b/drivers/gpu/drm/i915/i915_dpst.c
@@ -129,12 +129,10 @@ static int
 i915_dpst_disable_hist_interrupt(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct intel_panel *panel = &dev_priv->dpst.connector->panel;
 
 	u32 blm_hist_guard, blm_hist_ctl;
 
 	dev_priv->dpst.enabled = false;
-	dev_priv->dpst.blc_adjustment = DPST_MAX_FACTOR;
 
 	/* Disable histogram interrupts. It is OK to clear pending interrupts
 	 * and disable interrupts at the same time. */
@@ -151,12 +149,6 @@ i915_dpst_disable_hist_interrupt(struct drm_device *dev)
 
 	/* DPST interrupt in DE_IER register is disabled in irq_uninstall */
 
-	/* Setting blc level to what it would be without dpst adjustment */
-	mutex_lock(&dev_priv->backlight_lock);
-	intel_panel_actually_set_backlight(dev_priv->dpst.connector
-			, panel->backlight.level);
-	mutex_unlock(&dev_priv->backlight_lock);
-
 	return 0;
 }
 
@@ -540,7 +532,11 @@ i915_dpst_set_brightness(struct drm_device *dev, u32 brightness_val)
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	u32 backlight_level = brightness_val;
 
-	if (!dev_priv->dpst.enabled)
+	/*
+	 * When DPST is enabled only for video mode, we want to phase out when
+	 * video ends even though DPST is disabled.
+	 */
+	if (!(dev_priv->dpst.enabled || dev_priv->dpst.is_video_mode_enabled))
 		return;
 
 	/* Calculate the backlight after it has been reduced by "dpst
@@ -660,6 +656,7 @@ int
 i915_dpst_set_kernel_disable(struct drm_device *dev, bool disable)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct intel_panel *panel = &dev_priv->dpst.connector->panel;
 	int ret = 0;
 
 	if (!I915_HAS_DPST(dev))
@@ -673,6 +670,12 @@ i915_dpst_set_kernel_disable(struct drm_device *dev, bool disable)
 	if (disable && dev_priv->dpst.enabled) {
 		i915_dpst_save_luma(dev);
 		ret = i915_dpst_disable_hist_interrupt(dev);
+		/* Setting blc level to default */
+		dev_priv->dpst.blc_adjustment = DPST_MAX_FACTOR;
+		mutex_lock(&dev_priv->backlight_lock);
+		intel_panel_actually_set_backlight(dev_priv->dpst.connector,
+				panel->backlight.level);
+		mutex_unlock(&dev_priv->backlight_lock);
 	} else if (!disable && dev_priv->dpst.user_enable) {
 		ret = i915_dpst_enable_hist_interrupt(dev);
 		if (!ret)
-- 
1.9.1

