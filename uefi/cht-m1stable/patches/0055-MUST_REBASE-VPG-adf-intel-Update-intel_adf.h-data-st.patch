From 7d6216bc7129dfd8e5d8d475b8a7d0043be51cd9 Mon Sep 17 00:00:00 2001
Message-Id: <7d6216bc7129dfd8e5d8d475b8a7d0043be51cd9.1421709247.git.chang-joon.lee@intel.com>
In-Reply-To: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
References: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
From: Gajanan Bhat <gajanan.bhat@intel.com>
Date: Thu, 9 Oct 2014 17:39:21 +0530
Subject: [PATCH 55/75] MUST_REBASE [VPG]: adf/intel: Update intel_adf.h data
 structures

Fix alignment issues in intel_adf.h.
Redfine data structures as per the new design.

v2: adf/intel/include: Moved intel_adf.h to uapi header location

v3: Resolve checkpatch errors/warnings

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-3547
Change-Id: Ic4e2076ff65852013fa894a267f65f44b3a37771
Signed-off-by: Peter Collins <peter.collins@intel.com>
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
---
 drivers/video/adf/intel/include/intel_adf.h      |    2 +-
 drivers/video/adf/intel/include/uapi/intel_adf.h |  218 --------------------
 drivers/video/adf/intel/intel_adf_device.c       |    4 +-
 drivers/video/adf/intel/intel_adf_interface.c    |    2 +-
 include/uapi/video/intel_adf.h                   |  237 ++++++++++++++++++++++
 5 files changed, 241 insertions(+), 222 deletions(-)
 delete mode 100644 drivers/video/adf/intel/include/uapi/intel_adf.h
 create mode 100644 include/uapi/video/intel_adf.h

diff --git a/drivers/video/adf/intel/include/intel_adf.h b/drivers/video/adf/intel/include/intel_adf.h
index b1ff070..de142e7 100644
--- a/drivers/video/adf/intel/include/intel_adf.h
+++ b/drivers/video/adf/intel/include/intel_adf.h
@@ -25,7 +25,7 @@
 #if defined(CONFIG_ADF_FBDEV)
 #include "intel_adf_fbdev.h"
 #endif
-#include "uapi/intel_adf.h"
+#include <video/intel_adf.h>
 
 /* Custom IOCTL for Intel platforms */
 #define INTEL_ADF_DPST_CONTEXT		ADF_IOCTL_NR_CUSTOM
diff --git a/drivers/video/adf/intel/include/uapi/intel_adf.h b/drivers/video/adf/intel/include/uapi/intel_adf.h
deleted file mode 100644
index 64d862a..0000000
--- a/drivers/video/adf/intel/include/uapi/intel_adf.h
+++ /dev/null
@@ -1,218 +0,0 @@
-/*
- * INTEL CONFIDENTIAL
- *
- * Copyright 2014
- * Intel Corporation All Rights Reserved.
- *
- * The source code contained or described herein and all documents related to
- * the source code ("Material") are owned by Intel Corporation or its suppliers
- * or licensors. Title to the Material remains with Intel Corporation or its
- * suppliers and licensors. The Material contains trade secrets and proprietary
- * and confidential information of Intel or its suppliers and licensors. The
- * Material is protected by worldwide copyright and trade secret laws and treaty
- * provisions. No part of the Material may be used, copied, reproduced,
- * modified, published, uploaded, posted, transmitted, distributed, or disclosed
- * in any way without Intels prior express written permission.
- *
- * No license under any patent, copyright, trade secret or other intellectual
- * property right is granted to or conferred upon you by disclosure or delivery
- * of the Materials, either expressly, by implication, inducement, estoppel
- * or otherwise. Any license under such intellectual property rights must be
- * express and approved by Intel in writing.
- */
-
-#ifndef _VIDEO_INTEL_ADF_H_
-#define _VIDEO_INTEL_ADF_H_
-
-/*
- * This identifier should be increased every time the contents of the this file
- * change in any manner that could require detection from the client. This
- * enables a kernel to reject any clients that are too old. Note that a failure
- * to match compatible versions should result in the user mode falling back to
- * the baseline simple post.
- */
-#define INTEL_ADF_VERSION 1
-
-enum intel_adf_compression {
-	INTEL_ADF_UNCOMPRESSED,
-	INTEL_ADF_COMPRESSED,
-};
-
-enum intel_adf_blending {
-	INTEL_ADF_BLENDING_NONE,
-	INTEL_ADF_BLENDING_PREMULT,
-	INTEL_ADF_BLENDING_COVERAGE,
-};
-
-enum intel_adf_transform {
-	INTEL_ADF_TRANSFORM_NONE	= 0,
-	INTEL_ADF_TRANSFORM_FLIPH	= 1,
-	INTEL_ADF_TRANSFORM_FLIPV	= 2,
-	INTEL_ADF_TRANSFORM_ROT90	= 4,
-	/* INTEL_ADF_TRANSFORM_FLIPH | INTEL_ADF_TRANSFORM_FLIPV; */
-	INTEL_ADF_TRANSFORM_ROT180	= 3,
-	/*
-	 * INTEL_ADF_TRANSFORM_FLIPH | INTEL_ADF_TRANSFORM_FLIPV |
-	 * INTEL_ADF_TRANSFORM_ROT90;
-	 */
-	INTEL_ADF_TRANSFORM_ROT270	= 7,
-};
-
-/**
- * intel_adf_color
- * overlay_id:	index of the overlay engine
- * zorder:	depth of the layer ion screen, lower is further back
- * reserved:	set reserved bit
- * color:	color
- */
-struct intel_adf_color {
-	__u8	overlay_id;
-	__u8	zorder;
-	__u16	reserved;
-	__u32	color;
-};
-
-enum intel_adf_plane_flags {
-	INTEL_ADF_PLANE_DISABLE		= 0x0001,
-	/* User indication that this plane is unchanged since the last post */
-	INTEL_ADF_PLANE_UNCHANGED	= 0x0002,
-	/* Flags for any undefined HW specific usage */
-	INTEL_ADF_PLANE_HWSPECIFIC1	= 0x1000,
-	INTEL_ADF_PLANE_HWSPECIFIC2	= 0x2000,
-	INTEL_ADF_PLANE_HWSPECIFIC3	= 0x4000,
-	INTEL_ADF_PLANE_HWSPECIFIC4	= 0x8000,
-};
-
-/**
- * struct intel_adf_plane - intel plane structure for adf
- * overlay_id:	index of the overlay engine for this plane
- * interface_id:index of interface
- * buffer_id:	Index of the buffer to put on this plane
- *		(within adf_post_config.bufs array)
- * flags:	flags
- * dst_x:	destination left
- * dst_y:	destination top
- * dst_w:	destination width
- * dst_h:	destination_height
- * src_x:	16.16 fixed point source left
- * src_y:	16.16 fixed point source top
- * src_w:	16.16 fixed point source width
- * src_h:	16.16 fixed point source height
- * alpha:	constant alpha value
- * compression:	compiression mode
- * blending:	blending mode
- * transform:	transform mode
- * pad:		struct padding, value is always zero.
- */
-struct intel_adf_plane {
-	/*
-	 * NOTE: this field might be useless, already have
-	 * overlay engine assigned to adf_buffer
-	 **/
-	__u8	overlay_id;
-	__u8	inteface_id;
-	__u8	buffer_id;
-	__u16	flags;
-	__s16	dst_x;
-	__s16	dst_y;
-	__u16	dst_w;
-	__u16	dst_h;
-	__s32	src_x;
-	__s32	src_y;
-	__u32	src_w;
-	__u32	src_h;
-	__u8	alpha;
-	enum intel_adf_compression	compression:4;
-	enum intel_adf_blending		blending:4;
-	enum intel_adf_transform	transform:4;
-	__u8	pad:4;
-};
-
-enum intel_adf_pfitter_flags {
-	INTEL_ADF_PFIT_DISABLE		= 0x0001,
-	INTEL_ADF_PFIT_AUTO		= 0x0002,
-	INTEL_ADF_PFIT_LETTERBOX	= 0x0004,
-	INTEL_ADF_PFIT_PILLARBOX	= 0x0008,
-	/* Flags for any undefined HW specific usage */
-	INTEL_ADF_PFIT_HWSPECIFIC1	= 0x1000,
-	INTEL_ADF_PFIT_HWSPECIFIC2	= 0x2000,
-	INTEL_ADF_PFIT_HWSPECIFIC3	= 0x4000,
-	INTEL_ADF_PFIT_HWSPECIFIC4	= 0x8000,
-};
-
-/**
- * struct intel_adf_panelfitter
- * overlay_id:	index of the overlay engine for panel fitter
- * pad:		for structure padding, should be zero
- * flags:	flags
- * dst_x:	destination left
- * dst_y:	destination top
- * dst_w:	destination width
- * dst_h:	destination height
- * src_x:	source left
- * src_y:	source top
- * src_w:	source width
- * src_h:	source height
- */
-struct intel_adf_panelfitter {
-	__u8	verlay_id;
-	__u8	pad;
-	__u16	flags;
-	__s16	dst_x;
-	__s16	dst_y;
-	__u16	dst_w;
-	__u16	dst_h;
-	__s16	src_x;
-	__s16	src_y;
-	__u16	src_w;
-	__u16	src_h;
-};
-
-/*
- * All the overlay structures begin with a _u8 overlay_id element.
- * The type of the specified overlay_engine will determine the type
- * of this union
- */
-struct intel_adf_overlay {
-	union {
-		__u8	overlay_id;
-		struct intel_adf_color		color;
-		struct intel_adf_plane		plane;
-		struct intel_adf_panelfitter	panelfitter;
-	};
-};
-
-enum intel_adf_post_flags {
-	/* Call the custom page flip handler when this flip has completed */
-	INTEL_ADF_POST_FLIPCALLBACK	= 0x0001,
-	/* Apply this immediately, without waiting for vsyn c*/
-	INTEL_ADF_POST_IMMEDIATE	= 0x0002,
-	/*
-	 * Discard anything currently queued and make this flip happen on
-	 * the next vsync
-	 */
-	INTEL_ADF_POST_DISCARDQUEUE	= 0x0004,
-	/* Flags for any undefined HW specific usage */
-	INTEL_ADF_POST_HWSPECIFIC	= 0xF000,
-};
-
-/**
- * intel_adf_post_custom_data
- * version:	INTEL_ADF_VERSION for backward compatibility support
- * flags:	adf post flags
- * num_overlays:number of overlays
- * overlays:	overlay entried will follow this structure in memory
- */
-struct intel_adf_post_custom_data {
-	__u32				version;
-	enum intel_adf_post_flags	flags;
-	__u32				num_overlays;
-
-	/* Z order (on hardware that supports it) is defined by the order of
-	 * these planes entry [0] is backmost, entry [num_overlays-1] is
-	 * frontmost
-	 */
-	struct intel_adf_overlay	overlays[0];
-};
-
-#endif /* _VIDEO_INTEL_ADF_H_ */
diff --git a/drivers/video/adf/intel/intel_adf_device.c b/drivers/video/adf/intel/intel_adf_device.c
index bfcc008..8e3dfda 100644
--- a/drivers/video/adf/intel/intel_adf_device.c
+++ b/drivers/video/adf/intel/intel_adf_device.c
@@ -355,10 +355,10 @@ static int intel_adf_device_validate(struct adf_device *dev,
 		}
 		/*verify interface id set in plane*/
 		intf = idr_find(&dev->interfaces,
-			custom_overlay->plane.inteface_id);
+			custom_overlay->plane.interface_id);
 		if (!intf) {
 			dev_err(dev->dev, "%s: invalid interface id %d\n",
-				__func__, custom_overlay->plane.inteface_id);
+				__func__, custom_overlay->plane.interface_id);
 			err = -EINVAL;
 			goto err;
 		}
diff --git a/drivers/video/adf/intel/intel_adf_interface.c b/drivers/video/adf/intel/intel_adf_interface.c
index a0a3ee4..f7848f4 100644
--- a/drivers/video/adf/intel/intel_adf_interface.c
+++ b/drivers/video/adf/intel/intel_adf_interface.c
@@ -162,7 +162,7 @@ static int intel_interface_describe_simple_post(
 	custom_data->flags = 0;
 	custom_data->num_overlays = 1;
 	custom_data->overlays[0].plane.overlay_id = -1;
-	custom_data->overlays[0].plane.inteface_id = intf->idx;
+	custom_data->overlays[0].plane.interface_id = intf->idx;
 	custom_data->overlays[0].plane.buffer_id = 0;
 	custom_data->overlays[0].plane.flags = 0;
 	custom_data->overlays[0].plane.dst_x = 0;
diff --git a/include/uapi/video/intel_adf.h b/include/uapi/video/intel_adf.h
new file mode 100644
index 0000000..f6f8040
--- /dev/null
+++ b/include/uapi/video/intel_adf.h
@@ -0,0 +1,237 @@
+/*
+ * INTEL CONFIDENTIAL
+ *
+ * Copyright 2014
+ * Intel Corporation All Rights Reserved.
+ *
+ * The source code contained or described herein and all documents related to
+ * the source code ("Material") are owned by Intel Corporation or its suppliers
+ * or licensors. Title to the Material remains with Intel Corporation or its
+ * suppliers and licensors. The Material contains trade secrets and proprietary
+ * and confidential information of Intel or its suppliers and licensors. The
+ * Material is protected by worldwide copyright and trade secret laws and treaty
+ * provisions. No part of the Material may be used, copied, reproduced,
+ * modified, published, uploaded, posted, transmitted, distributed, or disclosed
+ * in any way without Intels prior express written permission.
+ *
+ * No license under any patent, copyright, trade secret or other intellectual
+ * property right is granted to or conferred upon you by disclosure or delivery
+ * of the Materials, either expressly, by implication, inducement, estoppel
+ * or otherwise. Any license under such intellectual property rights must be
+ * express and approved by Intel in writing.
+ *
+ */
+
+#ifndef _VIDEO_INTEL_ADF_H_
+#define _VIDEO_INTEL_ADF_H_
+
+/*
+ * This identifier should be increased every time the contents of the this file
+ * change in any manner that could require detection from the client. This
+ * enables a kernel to reject any clients that are too old. Note that a failure
+ * to match compatible versions should result in the user mode falling back to
+ * the baseline simple post.
+ */
+#define INTEL_ADF_VERSION 2
+
+enum intel_adf_compression {
+	INTEL_ADF_UNCOMPRESSED,
+	INTEL_ADF_COMPRESSED,
+};
+
+enum intel_adf_blending {
+	INTEL_ADF_BLENDING_NONE,
+	INTEL_ADF_BLENDING_PREMULT,
+	INTEL_ADF_BLENDING_COVERAGE,
+};
+
+enum intel_adf_transform {
+	INTEL_ADF_TRANSFORM_NONE	= 0,
+	INTEL_ADF_TRANSFORM_FLIPH	= 1,
+	INTEL_ADF_TRANSFORM_FLIPV	= 2,
+	INTEL_ADF_TRANSFORM_ROT90	= 4,
+	/* INTEL_ADF_TRANSFORM_FLIPH | INTEL_ADF_TRANSFORM_FLIPV; */
+	INTEL_ADF_TRANSFORM_ROT180	= 3,
+	/*
+	 * INTEL_ADF_TRANSFORM_FLIPH | INTEL_ADF_TRANSFORM_FLIPV |
+	 * INTEL_ADF_TRANSFORM_ROT90;
+	 */
+	INTEL_ADF_TRANSFORM_ROT270	= 7,
+};
+
+/**
+ * intel_adf_color
+ * overlay_id:	index of the overlay engine
+ * zorder:	depth of the layer ion screen, lower is further back
+ * reserved:	set reserved bit
+ * color:	color
+ */
+struct intel_adf_color {
+	__u8	overlay_id;
+	__u8	zorder;
+	__u16	reserved;
+	__u32	color;
+};
+
+enum intel_adf_colorspace {
+	INTEL_ADF_COLORSPACE_ARBITRARY,
+	INTEL_ADF_COLORSPACE_JFIF,
+	INTEL_ADF_COLORSPACE_BT601_625,
+	INTEL_ADF_COLORSPACE_BT601_525,
+	INTEL_ADF_COLORSPACE_BT709,
+};
+
+enum intel_adf_plane_flags {
+	INTEL_ADF_PLANE_DISABLE		= 0x0001,
+	/* User indication that this plane is unchanged since the last post */
+	INTEL_ADF_PLANE_UNCHANGED	= 0x0002,
+	/* Flags for any undefined HW specific usage */
+	INTEL_ADF_PLANE_HWSPECIFIC1	= 0x1000,
+	INTEL_ADF_PLANE_HWSPECIFIC2	= 0x2000,
+	INTEL_ADF_PLANE_HWSPECIFIC3	= 0x4000,
+	INTEL_ADF_PLANE_HWSPECIFIC4	= 0x8000,
+};
+
+/**
+ * struct intel_adf_plane - intel plane structure for adf
+ * overlay_id:	index of the overlay engine for this plane
+ * interface_id:index of interface
+ * buffer_id:	Index of the buffer to put on this plane
+ *		(within adf_post_config.bufs array)
+ * flags:	flags
+ * dst_x:	destination left
+ * dst_y:	destination top
+ * dst_w:	destination width
+ * dst_h:	destination_height
+ * src_x:	16.16 fixed point source left
+ * src_y:	16.16 fixed point source top
+ * src_w:	16.16 fixed point source width
+ * src_h:	16.16 fixed point source height
+ * alpha:	constant alpha value
+ * compression:	compiression mode
+ * blending:	blending mode
+ * transform:	transform mode
+ * pad:		struct padding, value is always zero.
+ */
+struct intel_adf_plane {
+	/*
+	 * NOTE: this field might be useless, already have
+	 * overlay engine assigned to adf_buffer
+	 **/
+	__u8	overlay_id;
+	__u8	interface_id;
+	__u8	buffer_id;
+	__u8	alpha;
+	__s16	dst_x;
+	__s16	dst_y;
+	__u16	dst_w;
+	__u16	dst_h;
+	__s32	src_x;
+	__s32	src_y;
+	__u32	src_w;
+	__u32	src_h;
+	__u16	flags;
+	enum intel_adf_blending		blending:2;
+	enum intel_adf_transform	transform:3;
+	enum intel_adf_compression	compression:3;
+	enum intel_adf_colorspace       colorspace:4;   /* Buffer Colorspace */
+	__u8	pad:4;
+};
+
+enum intel_adf_pfitter_flags {
+	INTEL_ADF_PFIT_DISABLE		= 0x0001,
+	INTEL_ADF_PFIT_AUTO		= 0x0002,
+	INTEL_ADF_PFIT_LETTERBOX	= 0x0004,
+	INTEL_ADF_PFIT_PILLARBOX	= 0x0008,
+	/* Flags for any undefined HW specific usage */
+	INTEL_ADF_PFIT_HWSPECIFIC1	= 0x1000,
+	INTEL_ADF_PFIT_HWSPECIFIC2	= 0x2000,
+	INTEL_ADF_PFIT_HWSPECIFIC3	= 0x4000,
+	INTEL_ADF_PFIT_HWSPECIFIC4	= 0x8000,
+};
+
+/**
+ * struct intel_adf_panelfitter
+ * overlay_id:	index of the overlay engine for panel fitter
+ * pad:		for structure padding, should be zero
+ * flags:	flags
+ * dst_x:	destination left
+ * dst_y:	destination top
+ * dst_w:	destination width
+ * dst_h:	destination height
+ * src_x:	source left
+ * src_y:	source top
+ * src_w:	source width
+ * src_h:	source height
+ */
+struct intel_adf_panelfitter {
+	__u8	interface_id;
+	__u8	overlay_id;
+	__u8	pad;
+	__u16	flags;
+	__s16	dst_x;
+	__s16	dst_y;
+	__u16	dst_w;
+	__u16	dst_h;
+	__s16	src_x;
+	__s16	src_y;
+	__u16	src_w;
+	__u16	src_h;
+};
+
+/*
+ * All the overlay structures begin with a _u8 overlay_id element.
+ * The type of the specified overlay_engine will determine the type
+ * of this union
+ */
+struct intel_adf_overlay {
+	union {
+		/* Common overlay header for all overlay types */
+		struct {
+			/* index of the interface for this plane */
+			__u8	interface_id;
+			/* index of the overlay engine for this panel fitter */
+			__u8    overlay_id;
+		};
+
+		struct intel_adf_color		color;
+		struct intel_adf_plane		plane;
+		struct intel_adf_panelfitter	panelfitter;
+	};
+};
+
+enum intel_adf_post_flags {
+	/* Call the custom page flip handler when this flip has completed */
+	INTEL_ADF_POST_FLIPCALLBACK	= 0x0001,
+	/* Apply this immediately, without waiting for vsyn c*/
+	INTEL_ADF_POST_IMMEDIATE	= 0x0002,
+	/*
+	 * Discard anything currently queued and make this flip happen on
+	 * the next vsync
+	 */
+	INTEL_ADF_POST_DISCARDQUEUE	= 0x0004,
+	/* Flags for any undefined HW specific usage */
+	INTEL_ADF_POST_HWSPECIFIC	= 0xF000,
+};
+
+/**
+ * intel_adf_post_custom_data
+ * version:	INTEL_ADF_VERSION for backward compatibility support
+ * flags:	adf post flags
+ * num_overlays:number of overlays
+ * overlays:	overlay entried will follow this structure in memory
+ */
+struct intel_adf_post_custom_data {
+	__u32				version;
+	__u32				flags;
+	__u32				num_overlays;
+	__u32				zorder;
+
+	/* Z order (on hardware that supports it) is defined by the order of
+	 * these planes entry [0] is backmost, entry [num_overlays-1] is
+	 * frontmost
+	 */
+	struct intel_adf_overlay	overlays[0];
+};
+
+#endif /* _VIDEO_INTEL_ADF_H_ */
-- 
1.7.9.5

