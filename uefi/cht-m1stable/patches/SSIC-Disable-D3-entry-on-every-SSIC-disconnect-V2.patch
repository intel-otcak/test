From b8bb1f48a0a291cabf410a7dd333a4bb8b44b52f Mon Sep 17 00:00:00 2001
From: LongX Zhang <longx.zhang@intel.com>
Date: Thu, 14 Apr 2016 16:08:41 +0800
Subject: [PATCH 3/3] SSIC: Disable D3 entry on every SSIC disconnect V2

This patch is a WA to disable D3 entry on every SSIC disconnect.
It was observed that the xHCI enters the D0i3 state before
the SSIC device (Intel modem) has a chance to fully enumerate,
as a consequence the enumeration fails.

The patch fixes it by blocking xhci runtime pm between disconnect
and enumeration end.

Comparing with the original patch, this patch has below improvement.
1) With the original patch, FFD still hits SWWDT related to xhci;
2) The new patch doesn't touch codes around did_runtime_put, which
looks quite like a workaround.
3) The new patch blocks runtime of bus->controller device (it's xhci)
instead of port_dev.
4) The original patch doesn't block s3. This new patch blocks s3
till modem enumeration finishes.
5) The new patch simplifies coding by removing 2 files.

Change-Id: I2ad04f61646c7391fbdd2a8640eb37dc51d83c20
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-29146
Signed-off-by: Zhong Yang <yang.zhong@intel.com>
Signed-off-by: Zhang Yanmin <yanmin.zhang@intel.com>
Reviewed-on: https://android.intel.com:443/494503
---
 drivers/usb/core/hub.c            |  4 ++++
 drivers/usb/host/xhci-intel-cap.c | 45 +++++++++++++++++++++++++++++++++++++++
 drivers/usb/host/xhci-intel-cap.h |  5 +++++
 drivers/usb/host/xhci.c           |  6 ++++++
 drivers/usb/host/xhci.h           |  7 ++++++
 5 files changed, 67 insertions(+)

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 5fd57b0..b2f039e 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -32,6 +32,7 @@
 #include <asm/byteorder.h>
 
 #include "hub.h"
+#include "../host/xhci-intel-cap.h"
 
 #define USB_VENDOR_GENESYS_LOGIC		0x05e3
 #define HUB_QUIRK_CHECK_PORT_AUTOSUSPEND	0x01
@@ -2118,6 +2119,8 @@ void usb_disconnect(struct usb_device **pdev)
 		sysfs_remove_link(&udev->dev.kobj, "port");
 		sysfs_remove_link(&port_dev->dev.kobj, "device");
 
+		hub_intel_ssic_check_block_runtime(udev);
+
 		if (!port_dev->did_runtime_put)
 			pm_runtime_put(&port_dev->dev);
 		else
@@ -2435,6 +2438,7 @@ int usb_new_device(struct usb_device *udev)
 		}
 
 		pm_runtime_get_sync(&port_dev->dev);
+		hub_intel_ssic_check_unblock_runtime(udev);
 	}
 
 	(void) usb_create_ep_devs(&udev->dev, &udev->ep0, udev);
diff --git a/drivers/usb/host/xhci-intel-cap.c b/drivers/usb/host/xhci-intel-cap.c
index fcfee41..e7eb5b6 100644
--- a/drivers/usb/host/xhci-intel-cap.c
+++ b/drivers/usb/host/xhci-intel-cap.c
@@ -83,7 +83,10 @@ int xhci_intel_need_disable_stall(struct xhci_hcd *xhci)
 
 	/* Assign the values */
 	modem_present = modem_data->package.elements[0].integer.value;
+	xhci->ssic_device_present = modem_present;
 	xhci->ssic_port_number = modem_data->package.elements[1].integer.value;
+	xhci_warn(xhci, "ssic_device_present[%d] ssic_port_number[%d]\n",
+		xhci->ssic_device_present, xhci->ssic_port_number);
 	modem_type = modem_data->package.elements[2].integer.value;
 
 	/* Evaluate the values from ACPI */
@@ -294,6 +297,48 @@ void xhci_intel_ssic_port_unused(struct xhci_hcd *xhci, bool unused)
 }
 EXPORT_SYMBOL_GPL(xhci_intel_ssic_port_unused);
 
+void hub_intel_ssic_check_block_runtime(struct usb_device *udev)
+{
+	struct usb_hcd *hcd = bus_to_hcd(udev->bus);
+	struct xhci_hcd *xhci = hcd_to_xhci(hcd);
+
+	xhci_warn(xhci, "udev[%s]: Check if need block ssic runtime, "
+			"portnum[%d] ssic_runtime_blocked[%d]\n",
+			dev_name(&udev->dev),
+			udev->portnum,
+			xhci->ssic_runtime_blocked);
+
+	if (xhci_intel_ssic_port_check(xhci, udev->portnum)) {
+		if (!xhci->ssic_runtime_blocked) {
+			xhci_warn(xhci, "block runtime\n");
+			wake_lock(&xhci->ssic_wake_lock);
+			xhci->ssic_runtime_blocked = 1;
+			pm_runtime_get(hcd->self.controller);
+		}
+	}
+}
+
+void hub_intel_ssic_check_unblock_runtime(struct usb_device *udev)
+{
+	struct usb_hcd *hcd = bus_to_hcd(udev->bus);
+	struct xhci_hcd *xhci = hcd_to_xhci(hcd);
+
+	xhci_warn(xhci, "udev[%s]: Check if need unblock ssic runtime, "
+			"portnum[%d] ssic_runtime_blocked[%d]\n",
+			dev_name(&udev->dev),
+			udev->portnum,
+			xhci->ssic_runtime_blocked);
+
+	if (xhci_intel_ssic_port_check(xhci, udev->portnum)) {
+		if (xhci->ssic_runtime_blocked) {
+			xhci_warn(xhci, "unblock runtime\n");
+			xhci->ssic_runtime_blocked = 0;
+			pm_runtime_put(hcd->self.controller);
+			wake_unlock(&xhci->ssic_wake_lock);
+		}
+	}
+}
+
 /*
  * This function enables/disables the PIPE 4.1 synchronous phystatus.
  */
diff --git a/drivers/usb/host/xhci-intel-cap.h b/drivers/usb/host/xhci-intel-cap.h
index b90caee..2cc5a2c 100644
--- a/drivers/usb/host/xhci-intel-cap.h
+++ b/drivers/usb/host/xhci-intel-cap.h
@@ -15,6 +15,9 @@
  */
 
 /* Extended capability IDs for Intel Vendor Defined */
+
+#include "xhci.h"
+
 #define XHCI_EXT_CAPS_INTEL_HOST_CAP	192
 #define XHCI_EXT_CAPS_INTEL_SSIC	196
 #define XHCI_EXT_CAPS_INTEL_SSIC_PROFILE	197
@@ -74,5 +77,7 @@ extern void xhci_intel_ssic_port_unused(struct xhci_hcd *xhci, bool unused);
 extern void xhci_change_ssic_regs(struct xhci_hcd *xhci, bool enable);
 extern bool xhci_intel_ssic_port_check(struct xhci_hcd *xhci, int port);
 extern int xhci_intel_need_disable_stall(struct xhci_hcd *xhci);
+extern void hub_intel_ssic_check_block_runtime(struct usb_device *udev);
+extern void hub_intel_ssic_check_unblock_runtime(struct usb_device *udev);
 extern void xhci_intel_pipe_sync_phystatus_quirk(struct xhci_hcd *xhci,
 						 bool enable);
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index 89a6b9f..a7db1e3 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -4858,6 +4858,12 @@ int xhci_gen_setup(struct usb_hcd *hcd, xhci_get_quirks_t get_quirks)
 
 	xhci->quirks = quirks;
 
+	wake_lock_init(&xhci->ssic_wake_lock,
+			WAKE_LOCK_SUSPEND,
+			"xhci_enumeration");
+	/* In case ACPI doesn't provide info */
+	xhci->ssic_device_present = -1;
+
 	get_quirks(dev, xhci);
 
 	/* In xhci controllers which follow xhci 1.0 spec gives a spurious
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index 5767d84..4868a35 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -28,6 +28,7 @@
 #include <linux/timer.h>
 #include <linux/kernel.h>
 #include <linux/usb/hcd.h>
+#include <linux/wakelock.h>
 
 /* Code sharing between pci-quirks and xhci hcd */
 #include	"xhci-ext-caps.h"
@@ -1592,6 +1593,12 @@ struct xhci_hcd {
 	u32			port_status_u0;
 /* Compliance Mode Timer Triggered every 2 seconds */
 #define COMP_MODE_RCVRY_MSECS 2000
+	/* SSIC device present */
+	int ssic_device_present;
+	/* SSIC runtime is blocked */
+	bool ssic_runtime_blocked;
+	struct wake_lock ssic_wake_lock;
+
 	/* SSIC port number */
 	int ssic_port_number;
 };
-- 
1.9.1

