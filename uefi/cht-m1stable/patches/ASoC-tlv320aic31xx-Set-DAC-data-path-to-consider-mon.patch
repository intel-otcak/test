From 77f2dbd71ed1efae8cda27081fa1b24e8b735dad Mon Sep 17 00:00:00 2001
From: Anthony Loeppert <anthony.loeppert@intel.com>
Date: Mon, 31 Aug 2015 15:59:26 -0700
Subject: [PATCH] ASoC: tlv320aic31xx: Set DAC data path to consider mono
 speaker

It adds support for mono speaker configuration based on
the device data path. Output stream will take into account
signal average of left and right data.

Change-Id: I56b6a3406f2a161d2f9436b7b3ef219a374a21b1
Depends-Change-Id: I0441e638abebb70a88437b635d0d4d59278a17cb
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-11063
Signed-off-by: Anthony Loeppert <anthony.loeppert@intel.com>
---
 sound/soc/codecs/tlv320aic31xx.c | 45 +++++++++++++++++++++++++++++++++++++++-
 sound/soc/codecs/tlv320aic31xx.h |  7 ++++++-
 2 files changed, 50 insertions(+), 2 deletions(-)

diff --git a/sound/soc/codecs/tlv320aic31xx.c b/sound/soc/codecs/tlv320aic31xx.c
index ce8cc3a0d374..35ec0484ea34 100644
--- a/sound/soc/codecs/tlv320aic31xx.c
+++ b/sound/soc/codecs/tlv320aic31xx.c
@@ -60,7 +60,7 @@ struct regmap_config aicxxx_i2c_regmap = {
 	.cache_type = REGCACHE_NONE,
 	.ranges = aic31xx_ranges,
 	.num_ranges = ARRAY_SIZE(aic31xx_ranges),
-	.max_register =  13 * 128,
+	.max_register =	13 * 128,
 };
 struct aic31xx_driver_data aic31xx_acpi_data = {
 	.acpi_device = 1,
@@ -709,6 +709,47 @@ aic310x_audio_map[] = {
 };
 
 /*
+  aic31xx_config_data_path
+  If there isn't a headset or headphone plugged in (jack_state == 0),
+  set the speaker data path (left channel) to be the average
+  of both left and right data to account for the mono configuration.
+
+  If jack_state is not zero, set L/R Channel configuration to default.
+ */
+static void aic31xx_config_data_path(struct snd_soc_codec *codec,
+			int jack_state)
+{
+	int value, cur_dpath_config, do_write = 0;
+	const int mono_config   = 0x30;
+	const int stereo_config = 0x14;
+
+	value = snd_soc_read(codec, AIC31XX_DACSETUP);
+
+	cur_dpath_config = value & (AIC31XX_R_DATAPATH_MASK |
+						AIC31XX_L_DATAPATH_MASK);
+
+	/* clear the data path settings */
+	value &= ~(AIC31XX_R_DATAPATH_MASK | AIC31XX_L_DATAPATH_MASK);
+
+	if ((jack_state == 0) && (cur_dpath_config == stereo_config)) {
+		/* left channel dac data path = average(left & right data) */
+		value |= mono_config;
+		pr_debug("%s mono\n", __func__);
+		do_write = 1;
+	} else if ((jack_state != 0) && (cur_dpath_config == mono_config)) {
+		/* default, left chan is left data, right chan is right data */
+		value |= stereo_config;
+		pr_debug("%s stereo\n", __func__);
+		do_write = 1;
+	}
+
+	if (do_write)
+		snd_soc_write(codec, AIC31XX_DACSETUP, value);
+
+	return;
+}
+
+/*
  * aic31xx_add_controls - add non dapm kcontrols.
  *
  * The different controls are in "aic31xx_snd_controls" table. The following
@@ -1169,6 +1210,7 @@ static void aic31xx_hs_jack_report(struct snd_soc_codec *codec,
 	default:
 		break;
 	}
+
 	mutex_unlock(&aic31xx->mutex);
 	snd_soc_jack_report(jack, state, report);
 	if ((state & SND_JACK_HEADSET) == SND_JACK_HEADSET)
@@ -1217,6 +1259,7 @@ int aic31xx_query_jack_status(struct snd_soc_codec *codec)
 	dev_dbg(codec->dev,
 			"AIC31XX_HSDETECT=0x%X,Jack Status returned is %x\n",
 								 status, state);
+	aic31xx_config_data_path(codec, state);
 	return state;
 }
 EXPORT_SYMBOL_GPL(aic31xx_query_jack_status);
diff --git a/sound/soc/codecs/tlv320aic31xx.h b/sound/soc/codecs/tlv320aic31xx.h
index 251b94f76d8c..44d007eaf848 100644
--- a/sound/soc/codecs/tlv320aic31xx.h
+++ b/sound/soc/codecs/tlv320aic31xx.h
@@ -197,7 +197,6 @@ int aic31xx_query_btn_press(struct snd_soc_codec *codec);
 void aic31xx_btn_press_intr_enable(struct snd_soc_codec *codec,
 		int enable);
 
-
 /* ****************** Book 0 Registers **************************************/
 /* ****************** AIC31XX has one book only *****************************/
 
@@ -319,9 +318,15 @@ void aic31xx_btn_press_intr_enable(struct snd_soc_codec *codec,
 #define AIC31XX_DACPRB					0xBC
 /*ADC Instruction Set Register*/
 #define AIC31XX_ADCPRB					0xBD
+
 /*DAC channel setup register*/
 #define AIC31XX_DACSETUP				0xBF
+#define AIC31XX_L_POWER_MASK                            0x80
+#define AIC31XX_R_POWER_MASK                            0x40
+#define AIC31XX_L_DATAPATH_MASK                         0x30
+#define AIC31XX_R_DATAPATH_MASK                         0x0C
 #define AIC31XX_SOFTSTEP_MASK				0x03
+
 /*DAC Mute and volume control register*/
 #define AIC31XX_DACMUTE					0xC0
 #define AIC31XX_DACMUTE_MASK				0x0C
-- 
2.6.0.rc0.2.g7662973

