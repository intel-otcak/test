From 0bf6c9ed35a7a7bd045d1076b5b4f2d4a3e624f3 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Mon, 5 Oct 2015 15:26:54 +0530
Subject: [PATCH] USBC: Respond with WAIT for DR and PR swap as appropriate.

Being a dual data and power port, if device is not ready to accept
the DR and PR swap request by port partner then the request should
be replied with WAIT as appropriate instead of REJECT.

Change-Id: Iba20e7d1099c8470e4ef7c56136c6ebf19046de6
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-6025
Reviewed-on: https://android.intel.com:443/419674
---
 drivers/usb/typec/pd/sink_port_pe.c |   66 +++++++++++++++++----------------
 drivers/usb/typec/pd/src_port_pe.c  |   71 ++++++++++++++++++++++--------------
 2 files changed, 80 insertions(+), 57 deletions(-)

Index: b/drivers/usb/typec/pd/sink_port_pe.c
===================================================================
--- a/drivers/usb/typec/pd/sink_port_pe.c	2016-03-08 10:59:00.019050249 -0800
+++ b/drivers/usb/typec/pd/sink_port_pe.c	2016-03-08 10:59:08.799142975 -0800
@@ -168,43 +168,38 @@
 	return ret;
 }
 
-static int snkpe_send_pr_swap_accept(struct sink_port_pe *sink)
-{
-	snkpe_update_state(sink, PE_PRS_SNK_SRC_ACCEPT_PR_SWAP);
-	return policy_send_packet(&sink->p, NULL, 0,
-					PD_CTRL_MSG_ACCEPT, PE_EVT_SEND_ACCEPT);
-}
-
-static int snkpe_send_pr_swap_reject(struct sink_port_pe *sink)
-{
-	snkpe_update_state(sink, PE_SNK_READY);
-	return policy_send_packet(&sink->p, NULL, 0,
-				PD_CTRL_MSG_REJECT, PE_EVT_SEND_REJECT);
-}
-
-static int snkpe_handle_pr_swap(struct sink_port_pe *sink)
+static int snkpe_handle_rcv_pr_swap(struct sink_port_pe *sink)
 {
 	enum pwr_role prole;
 	int ret = 0;
 
-	snkpe_update_state(sink, PE_PRS_SNK_SRC_EVALUATE_PR_SWAP);
+	/* If not SNK_READY dont send accept or wait*/
+	if (sink->cur_state != PE_SNK_READY) {
+		pr_debug("SNKPE:%s: PR_Swap rcvd in worng state=%d\n",
+					__func__, sink->cur_state);
+		goto pr_swap_wait;
+	}
+
 	/* If port partner is externally powered, power role swap from
 	 * sink to source can be rejected.
 	 */
-	if (sink->pp_is_ext_pwrd || (!sink->pp_is_dual_prole)) {
-		pr_info("SNKPE:%s: Not processing PR_SWAP Req\n",
+	if (sink->pp_is_ext_pwrd) {
+		pr_info("SNKPE:%s: Port partner is ext pwrd\n",
 				__func__);
 		goto pr_swap_reject;
 	}
+
+	snkpe_update_state(sink, PE_PRS_SNK_SRC_EVALUATE_PR_SWAP);
+
 	prole = policy_get_power_role(&sink->p);
 	if (prole <= 0) {
 		pr_err("SINKPE: Error in getting power role\n");
-		goto pr_swap_reject;
+		goto pr_swap_reject_state_chng;
 	}
 
 	if (prole != POWER_ROLE_SINK) {
 		pr_warn("SNKPE: Current Power Role - %d\n", prole);
-		goto pr_swap_reject;
+		goto pr_swap_reject_state_chng;
 	}
 	/* As the request to transition to provider mode, It
 	 * will be accepted only if VBAT >= 50% else reject.
@@ -213,15 +208,25 @@
 	ret = policy_is_pr_swap_support(&sink->p, prole);
 	if (ret == 0) {
 		pr_warn("SNKPE: Batt cap < 50\n");
-		goto pr_swap_reject;
+		goto pr_swap_reject_state_chng;
 	}
 
 	pr_debug("SNKPE:%s: Accepting pr_swap\n", __func__);
-	return snkpe_send_pr_swap_accept(sink);
+	snkpe_update_state(sink, PE_PRS_SNK_SRC_ACCEPT_PR_SWAP);
+	return policy_send_packet(&sink->p, NULL, 0,
+					PD_CTRL_MSG_ACCEPT, PE_EVT_SEND_ACCEPT);
 
+pr_swap_reject_state_chng:
+	snkpe_update_state(sink, PE_SNK_READY);
 pr_swap_reject:
 	pr_debug("SNKPE:%s: Rejecting pr_swap\n", __func__);
-	return snkpe_send_pr_swap_reject(sink);
+	return policy_send_packet(&sink->p, NULL, 0,
+				PD_CTRL_MSG_REJECT, PE_EVT_SEND_REJECT);
+
+pr_swap_wait:
+	pr_debug("SNKPE:%s: Wait pr_swap\n", __func__);
+	return policy_send_packet(&sink->p, NULL, 0,
+				PD_CTRL_MSG_WAIT, PE_EVT_SEND_WAIT);
 }
 
 static inline int snkpe_do_prot_reset(struct sink_port_pe *sink)
@@ -369,7 +374,8 @@
 	drole = policy_get_data_role(&sink->p);
 
 	if (sink->cur_state != PE_SNK_READY
-		|| (drole != DATA_ROLE_UFP && drole != DATA_ROLE_DFP)) {
+		|| (drole != DATA_ROLE_UFP && drole != DATA_ROLE_DFP)
+		|| !sink->pp_is_dual_drole) {
 		pr_warn("SNKPE:%s:Not processing DR_SWAP request in state=%d",
 				__func__, sink->cur_state);
 		return -EINVAL;
@@ -428,8 +434,11 @@
 		|| (drole != DATA_ROLE_UFP && drole != DATA_ROLE_DFP)) {
 		pr_debug("SNKPE:%s:Not processing DR_SWAP request in state=%d",
 				__func__, sink->cur_state);
+		/* As platform supports dual data role, sending wait will be
+		 * more appropriate than sending reject.
+		 */
 		policy_send_packet(&sink->p, NULL, 0,
-			PD_CTRL_MSG_REJECT, PE_EVT_SEND_REJECT);
+			PD_CTRL_MSG_WAIT, PE_EVT_SEND_WAIT);
 		return;
 	}
 
@@ -1056,12 +1065,7 @@
 		snkpe_received_msg_good_crc(sink);
 		break;
 	case PE_EVT_RCVD_PR_SWAP:
-		/* If not SNK_READY dont send accept or reject*/
-		if (sink->cur_state == PE_SNK_READY)
-			snkpe_handle_pr_swap(sink);
-		else
-			pr_debug("SNKPE:%s: PR_Swap rcvd in worng state=%d\n",
-					__func__, sink->cur_state);
+		snkpe_handle_rcv_pr_swap(sink);
 		break;
 	case PE_EVT_RCVD_DR_SWAP:
 		snkpe_handle_rcv_dr_swap(sink);
Index: b/drivers/usb/typec/pd/src_port_pe.c
===================================================================
--- a/drivers/usb/typec/pd/src_port_pe.c	2016-03-08 10:59:00.019050249 -0800
+++ b/drivers/usb/typec/pd/src_port_pe.c	2016-03-08 10:59:44.015515069 -0800
@@ -84,6 +84,15 @@
 	return policy_get_srcpwr_cap(&src_pe->p, pcap);
 }
 
+static void src_pe_reset_timers(struct src_port_pe *src_pe)
+{
+	complete(&src_pe->srt_complete);
+	complete(&src_pe->psso_complete);
+	reinit_completion(&src_pe->srt_complete);
+	reinit_completion(&src_pe->psso_complete);
+
+}
+
 static void src_pe_reset_policy_engine(struct src_port_pe *src_pe)
 {
 	src_pe->state = SRC_PE_STATE_NONE;
@@ -97,6 +106,7 @@
 	src_pe->pp_is_ext_pwrd = 0;
 	src_pe->got_snk_caps = 0;
 	src_pe->is_pd_configured = 0;
+	src_pe_reset_timers(src_pe);
 }
 
 static void src_pe_do_pe_reset_on_error(struct src_port_pe *src_pe)
@@ -315,11 +325,15 @@
 {
 	enum data_role drole;
 
+	if (!src_pe->pp_is_dual_drole) {
+		log_dbg("Port partner doesn't support dual data role");
+		return -EINVAL;
+	}
+
 	drole = policy_get_data_role(&src_pe->p);
 
 	if ((src_pe->state != SRC_PE_STATE_PD_CONFIGURED)
-		|| ((drole != DATA_ROLE_UFP)
-		&& (drole != DATA_ROLE_DFP))) {
+		|| (drole != DATA_ROLE_UFP && drole != DATA_ROLE_DFP)) {
 		log_dbg("Not processing DR_SWAP request in state=%d",
 				src_pe->state);
 		return -EINVAL;
@@ -381,10 +395,13 @@
 	if ((src_pe->state != SRC_PE_STATE_PD_CONFIGURED)
 		|| ((drole != DATA_ROLE_UFP)
 		&& (drole != DATA_ROLE_DFP))) {
-		log_dbg("Not processing DR_SWAP request in state=%d",
+		log_dbg("Not accepting DR_SWAP request in state=%d",
 				src_pe->state);
+		/* As we are dual data role, donot reject the dr_swap
+		 * request but send wait.
+		 */
 		policy_send_packet(&src_pe->p, NULL, 0,
-			PD_CTRL_MSG_REJECT, PE_EVT_SEND_REJECT);
+			PD_CTRL_MSG_WAIT, PE_EVT_SEND_WAIT);
 		return;
 	}
 
@@ -492,28 +509,37 @@
 static int src_pe_handle_pr_swap(struct src_port_pe *src_pe)
 {
 	enum pwr_role prole;
-	int ret;
 
+	if (src_pe->state != SRC_PE_STATE_PD_CONFIGURED) {
+		log_err("PR_SWAP cannot process in state =%d",
+					src_pe->state);
+		goto pr_swap_wait;
+	}
 	prole = policy_get_power_role(&src_pe->p);
 	if (prole <= 0) {
 		log_err("Error in getting power role\n");
-		return -EINVAL;
+		goto pr_swap_wait;
 	}
 
-	if (prole == POWER_ROLE_SOURCE) {
-		/* As the request is to transition into consumer mode
-		 * should be accepted by default.
-		 */
-		mutex_lock(&src_pe->pe_lock);
-		src_pe->state = PE_PRS_SRC_SNK_EVALUATE_PR_SWAP;
-		mutex_unlock(&src_pe->pe_lock);
-		ret = src_pe_pr_swap_ok(src_pe);
-	} else {
+	if (prole != POWER_ROLE_SOURCE) {
 		log_info("Current Power Role - %d\n", prole);
-		ret = -ENOTSUPP;
+		goto pr_swap_wait;
 	}
+	/* As the request is to transition into consumer mode
+	 * should be accepted by default.
+	 */
+	mutex_lock(&src_pe->pe_lock);
+	src_pe->state = PE_PRS_SRC_SNK_EVALUATE_PR_SWAP;
+	mutex_unlock(&src_pe->pe_lock);
+	return src_pe_pr_swap_ok(src_pe);
+
+	/* Wait will be more appropriate than rejecting the pr_swap
+	 * as the current power role is source.
+	 */
+pr_swap_wait:
+	return policy_send_packet(&src_pe->p, NULL, 0,
+				PD_CTRL_MSG_WAIT, PE_EVT_SEND_WAIT);
 
-	return ret;
 }
 
 static int src_pe_rcv_request(struct policy *srcp, enum pe_event evt)
@@ -591,16 +617,11 @@
 		ret = src_pe_handle_request_cmd(src_pe);
 		break;
 	case PE_EVT_RCVD_PR_SWAP:
-		if (src_pe->state == SRC_PE_STATE_PD_CONFIGURED) {
-			ret = src_pe_handle_pr_swap(src_pe);
-		} else {
-			log_err("PR_SWAP cannot process in state =%d",
-					src_pe->state);
-			ret = -EINVAL;
-		}
+		ret = src_pe_handle_pr_swap(src_pe);
 		break;
 	case PE_EVT_RCVD_ACCEPT:
 	case PE_EVT_RCVD_REJECT:
+	case PE_EVT_RCVD_WAIT:
 		if ((src_pe->state == PE_PRS_SRC_SNK_SEND_PR_SWAP)
 			|| (src_pe->state == PE_DRS_UFP_DFP_SEND_DR_SWAP)
 			|| (src_pe->state == PE_DRS_DFP_UFP_SEND_DR_SWAP)) {
@@ -869,8 +890,6 @@
 	p->status = POLICY_STATUS_UNKNOWN;
 	src_pe_reset_policy_engine(src_pe);
 	cancel_delayed_work_sync(&src_pe->start_comm);
-	reinit_completion(&src_pe->srt_complete);
-	reinit_completion(&src_pe->psso_complete);
 	policy_set_pd_state(p, false);
 	src_pe->cmd_retry = 0;
 	src_pe->got_snk_caps = 0;
