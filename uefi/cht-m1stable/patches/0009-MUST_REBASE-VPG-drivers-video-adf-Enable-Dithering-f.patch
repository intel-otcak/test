From eface663be2769644eba9ddb94d0d87c7cd81f1a Mon Sep 17 00:00:00 2001
Message-Id: <eface663be2769644eba9ddb94d0d87c7cd81f1a.1424394676.git.feitong.yi@intel.com>
In-Reply-To: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
References: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
From: Gaurav K Singh <gaurav.k.singh@intel.com>
Date: Mon, 2 Feb 2015 14:47:52 +0530
Subject: [PATCH 09/61] MUST_REBASE [VPG]: drivers/video/adf: Enable Dithering
 for MIPI DSI

This patch enables dithering for 18 BPP MIPI panels. Dithering should
to be enabled, if fb pixel format and BPP is supported by panel. This
will allow the 24 bit video stream to 18 bit color for 18 bpp panels.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5525
Change-Id: I52f6a9414c3e591ae5f31a3fb6c4b17de04de2e1
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
---
 .../video/adf/intel/core/common/dsi/gen_dsi_pipe.c |   20 ++++++++++++++++++++
 drivers/video/adf/intel/core/vlv/vlv_pri_plane.c   |    4 ++++
 .../adf/intel/include/core/common/dsi/dsi_pipe.h   |    1 +
 .../adf/intel/include/core/vlv/vlv_pri_plane.h     |    1 +
 4 files changed, 26 insertions(+)

diff --git a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
index dbecc71..78075e43 100644
--- a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
+++ b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
@@ -423,6 +423,26 @@ static void dsi_on_post(struct intel_pipe *pipe)
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
 	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
 	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
+	struct dsi_context *dsi_ctx = &dsi_pipe->config.ctx;
+	struct vlv_pri_plane *vlv_p_plane = &vlv_pipeline->pplane;
+	struct vlv_dsi_port *dsi_port = NULL;
+	enum port port;
+	u32 temp;
+
+	if ((vlv_p_plane->ctx.pri_plane_bpp == 24) && ((dsi_ctx->pixel_format ==
+			VID_MODE_FORMAT_RGB666) || (dsi_ctx->pixel_format ==
+			VID_MODE_FORMAT_RGB666_LOOSE)))
+		dsi_pipe->dither_enable = true;
+
+	if (dsi_pipe->dither_enable) {
+		for_each_dsi_port(port, dsi_ctx->ports) {
+			dsi_port = &vlv_pipeline->port.dsi_port[port];
+			temp = REG_READ(dsi_port->offset);
+			temp |= DITHERING_ENABLE;
+			REG_WRITE(dsi_port->offset, temp);
+			REG_POSTING_READ(dsi_port->offset);
+		}
+	}
 
 	if (dsi_pipe->ops.on_post)
 		dsi_pipe->ops.on_post(dsi_pipe);
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
index f1af819..e7536f5 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
@@ -242,6 +242,10 @@ static int vlv_pri_calculate(struct intel_plane *plane,
 	get_format_config(buf->format, &format_config, &bpp,
 			config->alpha);
 
+	if ((buf->format == DRM_FORMAT_XRGB8888) ||
+				(buf->format == DRM_FORMAT_ARGB8888))
+		pri_plane->ctx.pri_plane_bpp = 24;
+
 	src_x = config->src_x;
 	src_y = config->src_y;
 
diff --git a/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h b/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
index 762dd89..d49ac0e 100644
--- a/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
+++ b/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
@@ -70,6 +70,7 @@ struct dsi_pipe {
 #endif
 	struct dsi_panel *panel;
 	u8 dpms_state;
+	bool dither_enable;
 };
 
 static inline struct dsi_pipe *to_dsi_pipe(struct intel_pipe *pipe)
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
index 921cda8..41256dd 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
@@ -33,6 +33,7 @@ struct pri_plane_regs_value {
 struct vlv_pri_plane_context {
 	struct pri_plane_regs_value regs;
 	u32 plane;
+	u8 pri_plane_bpp;
 };
 
 struct vlv_pri_plane;
-- 
1.7.9.5

