From 2ea90cb1356f0c6cbc75a1ec67295a5c667761dd Mon Sep 17 00:00:00 2001
From: John Stultz <john.stultz@linaro.org>
Date: Fri, 28 Mar 2014 16:32:33 -0700
Subject: [PATCH] gadget: Numerous build fixes

Here are some of the build fixes we're using at Linaro.

I suspect much of this is incorrect, but wanted to submit it
as a starting place to get things fixed.

Change-Id: Id471d3004eef2aa2a6317950f434ad2b549b9dfc
Signed-off-by: John Stultz <john.stultz@linaro.org>
[hashcode0f@gmail.com: removed changes to f_fs.c and reimplemented functionfs
as instance-based similar to mass_storage.  Fix compiler warning by adding
missing unbind_config function to mass_storage_function]
Signed-off-by: Michael Scott <hashcode0f@gmail.com>
---
 drivers/usb/gadget/Kconfig   |   3 +
 drivers/usb/gadget/android.c | 231 ++++++++++++++++++++++++++++++++++---------
 drivers/usb/gadget/f_rndis.c |  56 +++++++++++
 3 files changed, 246 insertions(+), 44 deletions(-)

diff --git a/drivers/usb/gadget/Kconfig b/drivers/usb/gadget/Kconfig
index e272b648d329..eb0b6c1d4eaa 100644
--- a/drivers/usb/gadget/Kconfig
+++ b/drivers/usb/gadget/Kconfig
@@ -1024,6 +1024,9 @@ config USB_G_ANDROID
 	select USB_F_ACM
 	select USB_LIBCOMPOSITE
 	select USB_U_SERIAL
+	select USB_F_MASS_STORAGE
+	select USB_F_FS
+	select SND_PCM
 	help
 	  The Android Composite Gadget supports multiple USB
 	  functions: adb, acm, mass storage, mtp, accessory
diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index a74ae6b26ea9..8be314423f14 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -29,10 +29,9 @@
 #include <linux/usb/gadget.h>
 
 #include "gadget_chips.h"
+#include "u_fs.h"
 
-#include "f_fs.c"
 #include "f_audio_source.c"
-#include "f_mass_storage.c"
 #include "f_mtp.c"
 #include "f_accessory.c"
 #define USB_ETH_RNDIS y
@@ -40,6 +39,8 @@
 #include "rndis.c"
 #include "u_ether.c"
 
+USB_ETHERNET_MODULE_PARAMETERS();
+
 MODULE_AUTHOR("Mike Lockwood");
 MODULE_DESCRIPTION("Android Composite USB Driver");
 MODULE_LICENSE("GPL");
@@ -206,26 +207,78 @@ static void android_disable(struct android_dev *dev)
 /*-------------------------------------------------------------------------*/
 /* Supported functions initialization */
 
+static int functionfs_ready_callback(struct ffs_data *ffs);
+static void functionfs_closed_callback(struct ffs_data *ffs);
+static void *functionfs_acquire_dev_callback(struct ffs_dev *dev);
+static void functionfs_release_dev_callback(struct ffs_dev *dev);
+
+#define MAX_FFS_INSTANCES 1
 struct functionfs_config {
 	bool opened;
 	bool enabled;
+	int instances;
+	int instances_on;
 	struct ffs_data *data;
+	struct usb_function *f_ffs[MAX_FFS_INSTANCES];
+	struct usb_function_instance *f_ffs_inst[MAX_FFS_INSTANCES];
 };
 
 static int ffs_function_init(struct android_usb_function *f,
 			     struct usb_composite_dev *cdev)
 {
-	f->config = kzalloc(sizeof(struct functionfs_config), GFP_KERNEL);
-	if (!f->config)
+	int i;
+	int ret;
+	struct functionfs_config *config;
+	struct f_fs_opts *opts;
+
+	config = kzalloc(sizeof(struct functionfs_config), GFP_KERNEL);
+	if (!config)
 		return -ENOMEM;
+	f->config = config;
 
-	return functionfs_init();
+	for (i = 0; i < MAX_FFS_INSTANCES; i++) {
+		config->f_ffs_inst[i] = usb_get_function_instance("ffs");
+		if (IS_ERR(config->f_ffs_inst[i])) {
+			ret = PTR_ERR(config->f_ffs_inst[i]);
+			goto err_usb_get_function_instance;
+		}
+		config->f_ffs[i] = usb_get_function(config->f_ffs_inst[i]);
+		if (IS_ERR(config->f_ffs[i])) {
+			ret = PTR_ERR(config->f_ffs[i]);
+			goto err_usb_get_function;
+		}
+		/* set ops */
+		opts = to_f_fs_opts(config->f_ffs_inst[i]);
+		ret = ffs_single_dev(opts->dev);
+		if (ret)
+			goto err_usb_get_function;
+		opts->dev->ffs_ready_callback = functionfs_ready_callback;
+		opts->dev->ffs_closed_callback = functionfs_closed_callback;
+		opts->dev->ffs_acquire_dev_callback = functionfs_acquire_dev_callback;
+		opts->dev->ffs_release_dev_callback = functionfs_release_dev_callback;
+		opts->no_configfs = true;
+	}
+	return 0;
+err_usb_get_function_instance:
+	while (i-- > 0) {
+		usb_put_function(config->f_ffs[i]);
+err_usb_get_function:
+		usb_put_function_instance(config->f_ffs_inst[i]);
+	}
+	return ret;
 }
 
 static void ffs_function_cleanup(struct android_usb_function *f)
 {
-	functionfs_cleanup();
+	int i;
+	struct functionfs_config *config = f->config;
+
+	for (i = 0; i < MAX_FFS_INSTANCES; i++) {
+		usb_put_function(config->f_ffs[i]);
+		usb_put_function_instance(config->f_ffs_inst[i]);
+	}
 	kfree(f->config);
+	f->config = NULL;
 }
 
 static void ffs_function_enable(struct android_usb_function *f)
@@ -255,8 +308,35 @@ static void ffs_function_disable(struct android_usb_function *f)
 static int ffs_function_bind_config(struct android_usb_function *f,
 				    struct usb_configuration *c)
 {
+	int i;
+	int ret = 0;
 	struct functionfs_config *config = f->config;
-	return functionfs_bind_config(c->cdev, c, config->data);
+
+	config->instances_on = config->instances;
+	for (i = 0; i < config->instances_on; i++) {
+		ret = usb_add_function(c, config->f_ffs[i]);
+		if (ret) {
+			pr_err("Could not bind ffs%u config\n", i);
+			goto err_usb_add_function;
+		}
+	}
+
+	return 0;
+
+err_usb_add_function:
+	while (i-- > 0)
+		usb_remove_function(c, config->f_ffs[i]);
+	return ret;
+}
+
+static void ffs_function_unbind_config(struct android_usb_function *f,
+				       struct usb_configuration *c)
+{
+	int i;
+	struct functionfs_config *config = f->config;
+
+	for (i = 0; i < config->instances_on; i++)
+		usb_remove_function(c, config->f_ffs[i]);
 }
 
 static ssize_t
@@ -294,10 +374,35 @@ ffs_aliases_store(struct device *pdev, struct device_attribute *attr,
 	return size;
 }
 
+static ssize_t ffs_instances_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct android_usb_function *f = dev_get_drvdata(dev);
+	struct functionfs_config *config = f->config;
+	return sprintf(buf, "%d\n", config->instances);
+}
+
+static ssize_t ffs_instances_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct android_usb_function *f = dev_get_drvdata(dev);
+	struct functionfs_config *config = f->config;
+	int value;
+
+	sscanf(buf, "%d", &value);
+	if (value > MAX_FFS_INSTANCES)
+		value = MAX_FFS_INSTANCES;
+	config->instances = value;
+	return size;
+}
+
 static DEVICE_ATTR(aliases, S_IRUGO | S_IWUSR, ffs_aliases_show,
 					       ffs_aliases_store);
+static DEVICE_ATTR(ffs_instances, S_IRUGO | S_IWUSR, ffs_instances_show,
+						 ffs_instances_store);
 static struct device_attribute *ffs_function_attributes[] = {
 	&dev_attr_aliases,
+	&dev_attr_ffs_instances,
 	NULL
 };
 
@@ -308,6 +413,7 @@ static struct android_usb_function ffs_function = {
 	.disable	= ffs_function_disable,
 	.cleanup	= ffs_function_cleanup,
 	.bind_config	= ffs_function_bind_config,
+	.unbind_config	= ffs_function_unbind_config,
 	.attributes	= ffs_function_attributes,
 };
 
@@ -319,10 +425,7 @@ static int functionfs_ready_callback(struct ffs_data *ffs)
 
 	mutex_lock(&dev->mutex);
 
-	ret = functionfs_bind(ffs, dev->cdev);
-	if (ret)
-		goto err;
-
+	config->instances++;
 	config->data = ffs;
 	config->opened = true;
 
@@ -344,20 +447,19 @@ static void functionfs_closed_callback(struct ffs_data *ffs)
 	if (config->enabled)
 		android_disable(dev);
 
+	--config->instances;
 	config->opened = false;
 	config->data = NULL;
 
-	functionfs_unbind(ffs);
-
 	mutex_unlock(&dev->mutex);
 }
 
-static void *functionfs_acquire_dev_callback(const char *dev_name)
+static void *functionfs_acquire_dev_callback(struct ffs_dev *dev)
 {
 	return 0;
 }
 
-static void functionfs_release_dev_callback(struct ffs_data *ffs_data)
+static void functionfs_release_dev_callback(struct ffs_dev *dev)
 {
 }
 
@@ -596,7 +698,7 @@ rndis_function_bind_config(struct android_usb_function *f,
 		rndis->ethaddr[0], rndis->ethaddr[1], rndis->ethaddr[2],
 		rndis->ethaddr[3], rndis->ethaddr[4], rndis->ethaddr[5]);
 
-	dev = gether_setup_name(c->cdev->gadget, rndis->ethaddr, "rndis");
+	dev = gether_setup_name(c->cdev->gadget,dev_addr, host_addr, rndis->ethaddr, qmult, "rndis");
 	if (IS_ERR(dev)) {
 		ret = PTR_ERR(dev);
 		pr_err("%s: gether_setup failed\n", __func__);
@@ -746,47 +848,58 @@ static struct android_usb_function rndis_function = {
 };
 
 
+#define MAX_MS_INSTANCES 1
 struct mass_storage_function_config {
-	struct fsg_config fsg;
-	struct fsg_common *common;
+	int instances;
+	int instances_on;
+	struct usb_function *f_ms[MAX_MS_INSTANCES];
+	struct usb_function_instance *f_ms_inst[MAX_MS_INSTANCES];
 };
 
 static int mass_storage_function_init(struct android_usb_function *f,
 					struct usb_composite_dev *cdev)
 {
 	struct mass_storage_function_config *config;
-	struct fsg_common *common;
-	int err;
+	int i;
+	int ret;
 
 	config = kzalloc(sizeof(struct mass_storage_function_config),
 								GFP_KERNEL);
 	if (!config)
 		return -ENOMEM;
+	f->config = config;
 
-	config->fsg.nluns = 1;
-	config->fsg.luns[0].removable = 1;
-
-	common = fsg_common_init(NULL, cdev, &config->fsg);
-	if (IS_ERR(common)) {
-		kfree(config);
-		return PTR_ERR(common);
-	}
-
-	err = sysfs_create_link(&f->dev->kobj,
-				&common->luns[0].dev.kobj,
-				"lun");
-	if (err) {
-		kfree(config);
-		return err;
+	for (i = 0; i < MAX_MS_INSTANCES; i++) {
+		config->f_ms_inst[i] = usb_get_function_instance("mass_storage");
+		if (IS_ERR(config->f_ms_inst[i])) {
+			ret = PTR_ERR(config->f_ms_inst[i]);
+			goto err_usb_get_function_instance;
+		}
+		config->f_ms[i] = usb_get_function(config->f_ms_inst[i]);
+		if (IS_ERR(config->f_ms[i])) {
+			ret = PTR_ERR(config->f_ms[i]);
+			goto err_usb_get_function;
+		}
 	}
-
-	config->common = common;
-	f->config = config;
 	return 0;
+err_usb_get_function_instance:
+	while (i-- > 0) {
+		usb_put_function(config->f_ms[i]);
+err_usb_get_function:
+		usb_put_function_instance(config->f_ms_inst[i]);
+	}
+	return ret;
 }
 
 static void mass_storage_function_cleanup(struct android_usb_function *f)
 {
+	struct mass_storage_function_config *config = f->config;
+	int i;
+
+	for (i = 0; i < MAX_MS_INSTANCES; i++) {
+		usb_put_function(config->f_ms[i]);
+		usb_put_function_instance(config->f_ms_inst[i]);
+	}
 	kfree(f->config);
 	f->config = NULL;
 }
@@ -795,7 +908,34 @@ static int mass_storage_function_bind_config(struct android_usb_function *f,
 						struct usb_configuration *c)
 {
 	struct mass_storage_function_config *config = f->config;
-	return fsg_bind_config(c->cdev, c, config->common);
+	int ret = 0;
+	int i;
+
+	config->instances_on = config->instances;
+	for (i = 0; i < config->instances_on; i++) {
+		ret = usb_add_function(c, config->f_ms[i]);
+		if (ret) {
+			pr_err("Could not bind ms%u config\n", i);
+			goto err_usb_add_function;
+		}
+	}
+
+	return 0;
+
+err_usb_add_function:
+	while (i-- > 0)
+		usb_remove_function(c, config->f_ms[i]);
+	return ret;
+}
+
+static void mass_storage_function_unbind_config(struct android_usb_function *f,
+					       struct usb_configuration *c)
+{
+	int i;
+	struct mass_storage_function_config *config = f->config;
+
+	for (i = 0; i < config->instances_on; i++)
+		usb_remove_function(c, config->f_ms[i]);
 }
 
 static ssize_t mass_storage_inquiry_show(struct device *dev,
@@ -803,7 +943,7 @@ static ssize_t mass_storage_inquiry_show(struct device *dev,
 {
 	struct android_usb_function *f = dev_get_drvdata(dev);
 	struct mass_storage_function_config *config = f->config;
-	return sprintf(buf, "%s\n", config->common->inquiry_string);
+	return sprintf(buf, "%d\n", config->instances);
 }
 
 static ssize_t mass_storage_inquiry_store(struct device *dev,
@@ -811,10 +951,12 @@ static ssize_t mass_storage_inquiry_store(struct device *dev,
 {
 	struct android_usb_function *f = dev_get_drvdata(dev);
 	struct mass_storage_function_config *config = f->config;
-	if (size >= sizeof(config->common->inquiry_string))
-		return -EINVAL;
-	if (sscanf(buf, "%s", config->common->inquiry_string) != 1)
-		return -EINVAL;
+	int value;
+
+	sscanf(buf, "%d", &value);
+	if (value > MAX_MS_INSTANCES)
+		value = MAX_MS_INSTANCES;
+	config->instances = value;
 	return size;
 }
 
@@ -832,6 +974,7 @@ static struct android_usb_function mass_storage_function = {
 	.init		= mass_storage_function_init,
 	.cleanup	= mass_storage_function_cleanup,
 	.bind_config	= mass_storage_function_bind_config,
+	.unbind_config	= mass_storage_function_unbind_config,
 	.attributes	= mass_storage_function_attributes,
 };
 
diff --git a/drivers/usb/gadget/f_rndis.c b/drivers/usb/gadget/f_rndis.c
index c11761ce5113..a3a220890b58 100644
--- a/drivers/usb/gadget/f_rndis.c
+++ b/drivers/usb/gadget/f_rndis.c
@@ -822,6 +822,62 @@ fail:
 	return status;
 }
 
+static void
+rndis_old_unbind(struct usb_configuration *c, struct usb_function *f)
+{
+	struct f_rndis		*rndis = func_to_rndis(f);
+
+	rndis_deregister(rndis->config);
+
+	usb_free_all_descriptors(f);
+
+	kfree(rndis->notify_req->buf);
+	usb_ep_free_request(rndis->notify, rndis->notify_req);
+
+	kfree(rndis);
+}
+
+int
+rndis_bind_config_vendor(struct usb_configuration *c, u8 ethaddr[ETH_ALEN],
+		u32 vendorID, const char *manufacturer, struct eth_dev *dev)
+{
+	struct f_rndis	*rndis;
+	int		status;
+
+	/* allocate and initialize one new instance */
+	status = -ENOMEM;
+	rndis = kzalloc(sizeof *rndis, GFP_KERNEL);
+	if (!rndis)
+		goto fail;
+
+	memcpy(rndis->ethaddr, ethaddr, ETH_ALEN);
+	rndis->vendorID = vendorID;
+	rndis->manufacturer = manufacturer;
+
+	rndis->port.ioport = dev;
+	/* RNDIS activates when the host changes this filter */
+	rndis->port.cdc_filter = 0;
+
+	/* RNDIS has special (and complex) framing */
+	rndis->port.header_len = sizeof(struct rndis_packet_msg_type);
+	rndis->port.wrap = rndis_add_header;
+	rndis->port.unwrap = rndis_rm_hdr;
+
+	rndis->port.func.name = "rndis";
+	/* descriptors are per-instance copies */
+	rndis->port.func.bind = rndis_bind;
+	rndis->port.func.unbind = rndis_old_unbind;
+	rndis->port.func.set_alt = rndis_set_alt;
+	rndis->port.func.setup = rndis_setup;
+	rndis->port.func.disable = rndis_disable;
+
+	status = usb_add_function(c, &rndis->port.func);
+	if (status)
+		kfree(rndis);
+fail:
+	return status;
+}
+
 void rndis_borrow_net(struct usb_function_instance *f, struct net_device *net)
 {
 	struct f_rndis_opts *opts;
-- 
1.9.1

