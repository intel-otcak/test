From 1b1148eca39ae8822981f194e64059bb01fe27d9 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Mon, 12 May 2014 13:41:19 -0700
Subject: [PATCH 020/117] ov2722: Enable ov2722 camera sensor in gmin

Minor porting to G-Min: remove unused upstream API usage, register
sensor device at probe time.  No firmware autoconfig has been added
yet.

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 arch/x86/platform/intel-mid/Makefile               |  1 +
 arch/x86/platform/intel-mid/platform_ov2722.c      | 72 ++++++++++++----------
 .../camera/drivers/media/i2c/ov2722.c              | 54 ++++++++++++++--
 3 files changed, 90 insertions(+), 37 deletions(-)

diff --git a/arch/x86/platform/intel-mid/Makefile b/arch/x86/platform/intel-mid/Makefile
index cf20bee..b18f580 100644
--- a/arch/x86/platform/intel-mid/Makefile
+++ b/arch/x86/platform/intel-mid/Makefile
@@ -2,6 +2,7 @@ obj-$(CONFIG_X86_INTEL_MID) += intel-mid.o intel_mid_vrtc.o mfld.o mrfl.o
 obj-$(CONFIG_EARLY_PRINTK_INTEL_MID) += early_printk_intel_mid.o
 
 obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o platform_imx134.o atomisp_gmin_platform.o
+obj-$(CONFIG_GMIN_INTEL_MID) += platform_ov2722.o
 obj-$(CONFIG_GMIN_INTEL_MID) += platform_byt_regulator.o
 
 # SFI specific code
diff --git a/arch/x86/platform/intel-mid/platform_ov2722.c b/arch/x86/platform/intel-mid/platform_ov2722.c
index c5ac7f2..90b6a08 100644
--- a/arch/x86/platform/intel-mid/platform_ov2722.c
+++ b/arch/x86/platform/intel-mid/platform_ov2722.c
@@ -15,7 +15,6 @@
 #include <linux/i2c.h>
 #include <linux/atomisp_platform.h>
 #include <linux/regulator/consumer.h>
-#include <asm/intel_scu_ipcutil.h>
 #include <asm/intel-mid.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_mid_pmic.h>
@@ -24,9 +23,6 @@
 #include <linux/vlv2_plat_clock.h>
 #endif
 
-#include "platform_camera.h"
-#include "platform_ov2722.h"
-
 /* workround - pin defined for byt */
 #define CAMERA_1_RESET 127
 #define CAMERA_1_RESET_CHT 148
@@ -99,12 +95,11 @@ static struct i2c_client *i2c_find_client_by_name(char *name)
 	return dev ? to_i2c_client(dev) : NULL;
 }
 
-static enum pmic_ids camera_pmic_probe()
+static enum pmic_ids camera_pmic_probe(void)
 {
 	/* search by client name */
 	struct i2c_client *client;
-	if (spid.hardware_id != BYT_TABLET_BLK_CRV2 ||
-		i2c_find_client_by_name(PMIC_HID_ROHM))
+	if (i2c_find_client_by_name(PMIC_HID_ROHM))
 		return PMIC_ROHM;
 
 	client = i2c_find_client_by_name(PMIC_HID_XPOWER);
@@ -219,6 +214,7 @@ static int ov2722_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 	int pin;
 
 	if (!IS_BYT && !IS_CHT) {
+#ifndef CONFIG_GMIN_INTEL_MID
 		if (gp_camera1_power_down < 0) {
 			ret = camera_sensor_gpio(-1, GP_CAMERA_1_POWER_DOWN,
 					GPIOF_DIR_OUT, 1);
@@ -234,15 +230,14 @@ static int ov2722_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 				return ret;
 			gp_camera1_reset = ret;
 		}
+#endif
 	} else {
 		/*
 		 * FIXME: WA using hardcoded GPIO value here.
 		 * The GPIO value would be provided by ACPI table, which is
 		 * not implemented currently.
 		 */
-		if (spid.hardware_id == BYT_TABLET_BLK_CRV2)
-			pin = CAMERA_1_RESET_CRV2;
-		else if (IS_CHT)
+		if (IS_CHT)
 			pin = CAMERA_1_RESET_CHT;
 		else
 			pin = CAMERA_1_RESET;
@@ -283,12 +278,7 @@ static int ov2722_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 		}
 		gp_camera1_power_down = pin;
 
-		if (spid.hardware_id == BYT_TABLET_BLK_8PR0 ||
-		    spid.hardware_id == BYT_TABLET_BLK_8PR1 ||
-		    spid.hardware_id == BYT_TABLET_BLK_CRV2)
-			ret = gpio_direction_output(pin, 0);
-		else
-			ret = gpio_direction_output(pin, 1);
+		ret = gpio_direction_output(pin, 0);
 
 		if (ret) {
 			pr_err("%s: failed to set gpio(pin %d) direction\n",
@@ -298,24 +288,13 @@ static int ov2722_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 		}
 	}
 	if (flag) {
-		if (spid.hardware_id == BYT_TABLET_BLK_8PR0 ||
-		    spid.hardware_id == BYT_TABLET_BLK_8PR1 ||
-		    spid.hardware_id == BYT_TABLET_BLK_CRV2)
-			gpio_set_value(gp_camera1_power_down, 0);
-		else
-			gpio_set_value(gp_camera1_power_down, 1);
-
+		gpio_set_value(gp_camera1_power_down, 0);
 		gpio_set_value(gp_camera1_reset, 0);
 		msleep(20);
 		gpio_set_value(gp_camera1_reset, 1);
 	} else {
 		gpio_set_value(gp_camera1_reset, 0);
-		if (spid.hardware_id == BYT_TABLET_BLK_8PR0 ||
-		    spid.hardware_id == BYT_TABLET_BLK_8PR1 ||
-		    spid.hardware_id == BYT_TABLET_BLK_CRV2)
-			gpio_set_value(gp_camera1_power_down, 1);
-		else
-			gpio_set_value(gp_camera1_power_down, 0);
+		gpio_set_value(gp_camera1_power_down, 1);
 	}
 
 	return 0;
@@ -358,6 +337,8 @@ static int ov2722_power_ctrl(struct v4l2_subdev *sd, int flag)
 	 * remove pmic power control when VRF is ready.
 	 */
 #ifdef CONFIG_CRYSTAL_COVE
+	/* Disabled for BYT-based G-Min currently pending upstream fixup */
+#ifndef CONFIG_GMIN_INTEL_MID
 	if (IS_CHT) {
 		if (flag) {
 			if (!camera_vprog1_on) {
@@ -390,6 +371,7 @@ static int ov2722_power_ctrl(struct v4l2_subdev *sd, int flag)
 		return ret;
 	}
 #endif
+#endif
 	if (flag) {
 		if (!camera_vprog1_on) {
 #ifdef CONFIG_CRYSTAL_COVE
@@ -433,8 +415,35 @@ static int ov2722_power_ctrl(struct v4l2_subdev *sd, int flag)
 
 static int ov2722_csi_configure(struct v4l2_subdev *sd, int flag)
 {
-	return camera_sensor_csi(sd, ATOMISP_CAMERA_PORT_SECONDARY, 1,
-		ATOMISP_INPUT_FORMAT_RAW_10, atomisp_bayer_order_grbg, flag);
+        struct i2c_client *client = v4l2_get_subdevdata(sd);
+	u32 port = ATOMISP_CAMERA_PORT_SECONDARY;
+	u32 lanes = 1;
+	u32 format = ATOMISP_INPUT_FORMAT_RAW_10;
+	u32 bayer_order = atomisp_bayer_order_grbg;
+        struct camera_mipi_info *csi = NULL;
+
+        if (flag) {
+                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
+                if (!csi) {
+                        dev_err(&client->dev, "out of memory\n");
+                        return -ENOMEM;
+                }
+                csi->port = port;
+                csi->num_lanes = lanes;
+                csi->input_format = format;
+                csi->raw_bayer_order = bayer_order;
+                v4l2_set_subdev_hostdata(sd, (void *)csi);
+                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
+                csi->metadata_effective_width = NULL;
+                dev_info(&client->dev,
+                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
+                         port, lanes, bayer_order);
+        } else {
+                csi = v4l2_get_subdev_hostdata(sd);
+                kfree(csi);
+        }
+
+        return 0;
 }
 
 #ifdef CONFIG_CRYSTAL_COVE
@@ -497,3 +506,4 @@ void *ov2722_platform_data(void *info)
 #endif
 	return &ov2722_sensor_platform_data;
 }
+EXPORT_SYMBOL_GPL(ov2722_platform_data);
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
index 79ddfd1..d368897 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
@@ -36,9 +36,12 @@
 #include <media/v4l2-device.h>
 #include <media/v4l2-chip-ident.h>
 #include <linux/io.h>
+#include <linux/acpi.h>
 
 #include "ov2722.h"
 
+void *ov2722_platform_data(void *info);
+
 /* i2c read/write stuff */
 static int ov2722_read_reg(struct i2c_client *client,
 			   u16 data_length, u16 reg, u16 *val)
@@ -1371,12 +1374,31 @@ static int __ov2722_init_ctrl_handler(struct ov2722_device *dev)
 
 	return 0;
 }
+
+static int getvar_int(struct device *dev, const char *var, int def)
+{
+	char val[16];
+	size_t len = sizeof(val);
+	long result;
+	int ret;
+
+	ret = gmin_get_config_var(dev, var, val, &len);
+	val[len] = 0;
+	if (!ret)
+		ret = kstrtol(val, 0, &result);
+
+	return ret ? def : result;
+}
+
 static int ov2722_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
 	struct ov2722_device *dev;
+	void *ovpdev;
 	int ret;
 
+	printk("\0010ANDY %s:%d\n", __func__, __LINE__);
+
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
 		dev_err(&client->dev, "out of memory\n");
@@ -1388,12 +1410,14 @@ static int ov2722_probe(struct i2c_client *client,
 	dev->fmt_idx = 0;
 	v4l2_i2c_subdev_init(&(dev->sd), client, &ov2722_ops);
 
-	if (client->dev.platform_data) {
-		ret = ov2722_s_config(&dev->sd, client->irq,
-				       client->dev.platform_data);
-		if (ret)
-			goto out_free;
-	}
+	ovpdev = client->dev.platform_data;
+	if (config_enabled(CONFIG_GMIN_INTEL_MID) &&
+	    ACPI_COMPANION(&client->dev))
+		ovpdev = ov2722_platform_data(NULL);
+
+	ret = ov2722_s_config(&dev->sd, client->irq, ovpdev);
+	if (ret)
+		goto out_free;
 
 	ret = __ov2722_init_ctrl_handler(dev);
 	if (ret)
@@ -1408,6 +1432,14 @@ static int ov2722_probe(struct i2c_client *client,
 	if (ret)
 		ov2722_remove(client);
 
+	ret = atomisp_register_i2c_module(&dev->sd, client,
+					  getvar_int(&client->dev, "CamType",
+						     RAW_CAMERA),
+					  getvar_int(&client->dev, "CsiPort",
+						     ATOMISP_CAMERA_PORT_SECONDARY));
+
+	printk("\0010ANDY %s:%d\n", __func__, __LINE__);
+
 	return ret;
 
 out_ctrl_handler_free:
@@ -1420,10 +1452,20 @@ out_free:
 }
 
 MODULE_DEVICE_TABLE(i2c, ov2722_id);
+
+static struct acpi_device_id ov2722_acpi_match[] = {
+	{ "INT33FB" },
+	{},
+};
+
+MODULE_DEVICE_TABLE(acpi, ov2722_acpi_match);
+
+
 static struct i2c_driver ov2722_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = OV2722_NAME,
+		.acpi_match_table = ACPI_PTR(ov2722_acpi_match),
 	},
 	.probe = ov2722_probe,
 	.remove = ov2722_remove,
-- 
1.9.3

