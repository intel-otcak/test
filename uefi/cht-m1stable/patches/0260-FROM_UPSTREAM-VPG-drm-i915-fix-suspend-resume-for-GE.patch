From d169f851a96cd3f45ca466d7ba9c03c5fd8e94ac Mon Sep 17 00:00:00 2001
Message-Id: <d169f851a96cd3f45ca466d7ba9c03c5fd8e94ac.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Imre Deak <imre.deak@intel.com>
Date: Tue, 26 Aug 2014 13:26:56 +0300
Subject: [PATCH 260/312] FROM_UPSTREAM [VPG]: drm/i915: fix suspend/resume
 for GENs w/o runtime PM support

Before sharing common parts between the system and runtime s/r
handlers we WARNed if the runtime s/r handlers were called on GENs that
didn't support RPM. But this WARN is not correct if the same handler is
called from the system s/r path, since that can happen on any platform.
This also broke system s/r on old platforms.

The issue was introduced in

commit 016970beb05da6285c2f3ed2bee1c676cb75972e
Author: Sagar Kamble <sagar.a.kamble@intel.com>
Date:   Wed Aug 13 23:07:06 2014 +0530

v2:
- remove the WARN and depend on the HAS_RUNTIME_PM check in
  rutime_suspend/resume instead (Daniel)

Issue: GMIN-2507
Change-Id: I315a2d8ba929c3c073a78ac59b181bb2a571d9e6
Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=82751
Signed-off-by: Imre Deak <imre.deak@intel.com>
Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Upstream-repo: git://anongit.freedesktop.org/drm-intel
Upstream-commit: d65af1ce275b4f6fcf5d5ae783d6c49609c14d9c
Upstream-as-of-tag: <not available>
---
 drivers/gpu/drm/i915/i915_drv.c |   31 ++++++++++++++-----------------
 1 file changed, 14 insertions(+), 17 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 3159a0d..1e3b520 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -1427,7 +1427,9 @@ static int intel_runtime_suspend(struct device *device)
 	if (WARN_ON_ONCE(!(dev_priv->rps.enabled && intel_enable_rc6(dev))))
 		return -ENODEV;
 
-	WARN_ON(!HAS_RUNTIME_PM(dev));
+	if (WARN_ON_ONCE(!HAS_RUNTIME_PM(dev)))
+		return -ENODEV;
+
 	assert_force_wake_inactive(dev_priv);
 
 	DRM_DEBUG_KMS("Suspending device\n");
@@ -1495,7 +1497,8 @@ static int intel_runtime_resume(struct device *device)
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	int ret;
 
-	WARN_ON(!HAS_RUNTIME_PM(dev));
+	if (WARN_ON_ONCE(!HAS_RUNTIME_PM(dev)))
+		return -ENODEV;
 
 	DRM_DEBUG_KMS("Resuming device\n");
 
@@ -1530,16 +1533,12 @@ static int intel_suspend_complete(struct drm_i915_private *dev_priv)
 	struct drm_device *dev = dev_priv->dev;
 	int ret;
 
-	if (IS_GEN6(dev)) {
-		ret = 0;
-	} else if (IS_HASWELL(dev) || IS_BROADWELL(dev)) {
+	if (IS_HASWELL(dev) || IS_BROADWELL(dev))
 		ret = hsw_suspend_complete(dev_priv);
-	} else if (IS_VALLEYVIEW(dev)) {
+	else if (IS_VALLEYVIEW(dev))
 		ret = vlv_suspend_complete(dev_priv);
-	} else {
-		ret = -ENODEV;
-		WARN_ON(1);
-	}
+	else
+		ret = 0;
 
 	return ret;
 }
@@ -1555,16 +1554,14 @@ static int intel_resume_prepare(struct drm_i915_private *dev_priv,
 	struct drm_device *dev = dev_priv->dev;
 	int ret;
 
-	if (IS_GEN6(dev)) {
+	if (IS_GEN6(dev))
 		ret = snb_resume_prepare(dev_priv, rpm_resume);
-	} else if (IS_HASWELL(dev) || IS_BROADWELL(dev)) {
+	else if (IS_HASWELL(dev) || IS_BROADWELL(dev))
 		ret = hsw_resume_prepare(dev_priv, rpm_resume);
-	} else if (IS_VALLEYVIEW(dev)) {
+	else if (IS_VALLEYVIEW(dev))
 		ret = vlv_resume_prepare(dev_priv, rpm_resume);
-	} else {
-		WARN_ON(1);
-		ret = -ENODEV;
-	}
+	else
+		ret = 0;
 
 	return ret;
 }
-- 
1.7.9.5

