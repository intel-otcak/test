From 9c9fcc1be71a2b467e6e12168815c6fc37250b7a Mon Sep 17 00:00:00 2001
Message-Id: <9c9fcc1be71a2b467e6e12168815c6fc37250b7a.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Gaurav K Singh <gaurav.k.singh@intel.com>
Date: Wed, 28 Jan 2015 20:12:27 +0530
Subject: [PATCH 46/95] MUST_REBASE [VPG]: drivers/video/adf: Add port as
 parameter to the DSI controller read/write functions

This patch is in preparation of DSI dual link panels. For dual link
panels, few packets needs to be sent to Port A or Port C or both. Based
on the portno from MIPI Sequence Block#53, these sequences needs to be
sent accordingly.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-5276
Change-Id: I325d7205cebac3ad93d8a51a5565c3fc07d97a77
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
---
 .../video/adf/intel/core/common/dsi/dsi_pipe_ops.c |   48 ++++++++++----------
 .../adf/intel/core/common/dsi/intel_dsi_cmd.c      |    2 +-
 .../adf/intel/core/common/dsi/intel_dsi_cmd.h      |   21 +++++----
 .../core/common/dsi/panels/intel_dsi_panel_vbt.c   |   26 +++++++----
 drivers/video/adf/intel/core/vlv/vlv_pipeline.c    |   20 ++++----
 .../adf/intel/include/core/intel_platform_config.h |    4 +-
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |    9 ++--
 7 files changed, 69 insertions(+), 61 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c b/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c
index 6a6c66a..88d861b 100644
--- a/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c
+++ b/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c
@@ -146,61 +146,61 @@ void adf_dsi_hs_mode_enable(struct dsi_pipe *dsi_pipe, bool enable)
 
 /* XXX: questionable write helpers */
 int adf_dsi_vc_dcs_write(struct dsi_pipe *dsi_pipe, int channel,
-		const u8 *data, int len)
+		const u8 *data, int len, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	return vlv_cmd_vc_dcs_write(pipeline, channel, data, len);
+	return vlv_cmd_vc_dcs_write(pipeline, channel, data, len, port);
 }
 
 int adf_dsi_vc_generic_write(struct dsi_pipe *dsi_pipe, int channel,
-		const u8 *data, int len)
+		const u8 *data, int len, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	return vlv_cmd_vc_generic_write(pipeline, channel, data, len);
+	return vlv_cmd_vc_generic_write(pipeline, channel, data, len, port);
 }
 
 /* XXX: questionable read helpers */
 int adf_dsi_vc_dcs_read(struct dsi_pipe *dsi_pipe, int channel, u8 dcs_cmd,
-		u8 *buf, int buflen)
+		u8 *buf, int buflen, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
 	return vlv_cmd_vc_dcs_read(pipeline, channel, dcs_cmd,
-		buf, buflen);
+		buf, buflen, port);
 }
 
 int adf_dsi_vc_generic_read(struct dsi_pipe *dsi_pipe, int channel,
-		u8 *reqdata, int reqlen, u8 *buf, int buflen)
+		u8 *reqdata, int reqlen, u8 *buf, int buflen, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
 	return vlv_cmd_vc_generic_read(pipeline, channel, reqdata,
-		reqlen, buf, buflen);
+		reqlen, buf, buflen, port);
 }
 
 static inline int adf_dsi_vc_generic_read_0(struct dsi_pipe *dsi_pipe,
-		int channel, u8 *buf, int buflen)
+		int channel, u8 *buf, int buflen, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
 	return vlv_cmd_vc_generic_read(pipeline, channel, NULL, 0,
-		buf, buflen);
+		buf, buflen, port);
 }
 
 static inline int adf_dsi_vc_generic_read_1(struct dsi_pipe *dsi_pipe,
 					int channel, u8 param, u8 *buf,
-					int buflen)
+					int buflen, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
 	return vlv_cmd_vc_generic_read(pipeline, channel, &param, 1,
-		buf, buflen);
+		buf, buflen, port);
 }
 
 static inline int adf_dsi_vc_generic_read_2(struct dsi_pipe *dsi_pipe,
 					int channel, u8 param1, u8 param2,
-					u8 *buf, int buflen)
+					u8 *buf, int buflen, enum port port)
 {
 	u8 req[2] = { param1, param2 };
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
 	return vlv_cmd_vc_generic_read(pipeline, channel, req, 2,
-		buf, buflen);
+		buf, buflen, port);
 }
 
 int adf_dpi_send_cmd(struct dsi_pipe *dsi_pipe, u32 cmd, bool hs)
@@ -210,38 +210,38 @@ int adf_dpi_send_cmd(struct dsi_pipe *dsi_pipe, u32 cmd, bool hs)
 }
 
 inline int adf_dsi_vc_dcs_write_0(struct dsi_pipe *dsi_pipe,
-				int channel, u8 dcs_cmd)
+				int channel, u8 dcs_cmd, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	return vlv_cmd_vc_dcs_write(pipeline, channel, &dcs_cmd, 1);
+	return vlv_cmd_vc_dcs_write(pipeline, channel, &dcs_cmd, 1, port);
 }
 
 inline int adf_dsi_vc_dcs_write_1(struct dsi_pipe *dsi_pipe,
-				int channel, u8 dcs_cmd, u8 param)
+			int channel, u8 dcs_cmd, u8 param, enum port port)
 {
 	u8 buf[2] = { dcs_cmd, param };
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	return vlv_cmd_vc_dcs_write(pipeline, channel, buf, 2);
+	return vlv_cmd_vc_dcs_write(pipeline, channel, buf, 2, port);
 }
 
 inline int adf_dsi_vc_generic_write_0(struct dsi_pipe *dsi_pipe,
-				int channel)
+				int channel, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	return vlv_cmd_vc_generic_write(pipeline, channel, NULL, 0);
+	return vlv_cmd_vc_generic_write(pipeline, channel, NULL, 0, port);
 }
 
 inline int adf_dsi_vc_generic_write_1(struct dsi_pipe *dsi_pipe,
-					int channel, u8 param)
+					int channel, u8 param, enum port port)
 {
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	return vlv_cmd_vc_generic_write(pipeline, channel, &param, 1);
+	return vlv_cmd_vc_generic_write(pipeline, channel, &param, 1, port);
 }
 
 inline int adf_dsi_vc_generic_write_2(struct dsi_pipe *dsi_pipe,
-					int channel, u8 param1, u8 param2)
+			int channel, u8 param1, u8 param2, enum port port)
 {
 	u8 buf[2] = { param1, param2 };
 	struct intel_pipeline *pipeline = dsi_pipe->base.pipeline;
-	return vlv_cmd_vc_generic_write(pipeline, channel, buf, 2);
+	return vlv_cmd_vc_generic_write(pipeline, channel, buf, 2, port);
 }
diff --git a/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.c b/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.c
index 1b87893..29554057 100644
--- a/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.c
+++ b/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.c
@@ -300,7 +300,7 @@ static int adf_dsi_read_data_return(struct dsi_pipe *dsi_pipe,
 }
 
 int adf_dsi_vc_dcs_read(struct dsi_pipe *dsi_pipe, int channel, u8 dcs_cmd,
-		    u8 *buf, int buflen)
+					u8 *buf, int buflen, enum port port)
 {
 	struct dsi_config *config = &dsi_pipe->config;
 	int pipe = config->pipe;
diff --git a/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.h b/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.h
index a07b3ed..a8882bb 100644
--- a/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.h
+++ b/drivers/video/adf/intel/core/common/dsi/intel_dsi_cmd.h
@@ -40,29 +40,32 @@ void band_gap_reset(struct dsi_pipe *dsi_pipe);
 void adf_dsi_hs_mode_enable(struct dsi_pipe *dsi_pipe, bool enable);
 
 int adf_dsi_vc_dcs_write(struct dsi_pipe *dsi_pipe, int channel,
-		const u8 *data, int len);
+		const u8 *data, int len, enum port port);
 
 int adf_dsi_vc_generic_write(struct dsi_pipe *dsi_pipe, int channel,
-			const u8 *data, int len);
+			const u8 *data, int len, enum port port);
 
 int adf_dsi_vc_dcs_read(struct dsi_pipe *dsi_pipe, int channel, u8 dcs_cmd,
-		u8 *buf, int buflen);
+		u8 *buf, int buflen, enum port port);
 
 int adf_dsi_vc_generic_read(struct dsi_pipe *dsi_pipe, int channel,
-			u8 *reqdata, int reqlen, u8 *buf, int buflen);
+		u8 *reqdata, int reqlen, u8 *buf, int buflen, enum port port);
 
 int adf_dpi_send_cmd(struct dsi_pipe *dsi_pipe, u32 cmd, bool hs);
 
 
 inline int adf_dsi_vc_dcs_write_0(struct dsi_pipe *dsi_pipe,
-					int channel, u8 dcs_cmd);
+				  int channel, u8 dcs_cmd,
+				  enum port port);
 inline int adf_dsi_vc_dcs_write_1(struct dsi_pipe *dsi_pipe,
-					int channel, u8 dcs_cmd, u8 param);
+				  int channel, u8 dcs_cmd, u8 param,
+				  enum port port);
 inline int adf_dsi_vc_generic_write_0(struct dsi_pipe *dsi_pipe,
-					int channel);
+				      int channel, enum port port);
 inline int adf_dsi_vc_generic_write_1(struct dsi_pipe *dsi_pipe,
-					int channel, u8 param);
+				      int channel, u8 param, enum port port);
 inline int adf_dsi_vc_generic_write_2(struct dsi_pipe *dsi_pipe,
-					int channel, u8 param1, u8 param2);
+				      int channel, u8 param1, u8 param2,
+				      enum port port);
 
 #endif /* _INTEL_DSI_DSI_H */
diff --git a/drivers/video/adf/intel/core/common/dsi/panels/intel_dsi_panel_vbt.c b/drivers/video/adf/intel/core/common/dsi/panels/intel_dsi_panel_vbt.c
index 48d6da40..11a7142 100644
--- a/drivers/video/adf/intel/core/common/dsi/panels/intel_dsi_panel_vbt.c
+++ b/drivers/video/adf/intel/core/common/dsi/panels/intel_dsi_panel_vbt.c
@@ -236,17 +236,24 @@ static struct gpio_table gtable[] = {
 	{USB_ULPI_0_REFCLK_GPIOS_43_PCONF0, USB_ULPI_0_REFCLK_GPIOS_43_PAD, 0}
 };
 
+static inline enum port intel_dsi_seq_port_to_port(u8 port)
+{
+	return port ? PORT_C : PORT_A;
+}
+
 static u8 *mipi_exec_send_packet(struct dsi_pipe *dsi_pipe, u8 *data)
 {
 	struct dsi_context *intel_dsi = &dsi_pipe->config.ctx;
-	u8 type, byte, mode, vc, port;
+	u8 type, byte, mode, vc, seq_port;
 	u16 len;
+	enum port port;
 
 	byte = *data++;
 	mode = (byte >> MIPI_TRANSFER_MODE_SHIFT) & 0x1;
 	vc = (byte >> MIPI_VIRTUAL_CHANNEL_SHIFT) & 0x3;
-	port = (byte >> MIPI_PORT_SHIFT) & 0x3;
+	seq_port = (byte >> MIPI_PORT_SHIFT) & 0x3;
 
+	port = intel_dsi_seq_port_to_port(seq_port);
 	/* LP or HS mode */
 	intel_dsi->hs = mode;
 
@@ -258,13 +265,14 @@ static u8 *mipi_exec_send_packet(struct dsi_pipe *dsi_pipe, u8 *data)
 
 	switch (type) {
 	case MIPI_DSI_GENERIC_SHORT_WRITE_0_PARAM:
-		adf_dsi_vc_generic_write_0(dsi_pipe, vc);
+		adf_dsi_vc_generic_write_0(dsi_pipe, vc, port);
 		break;
 	case MIPI_DSI_GENERIC_SHORT_WRITE_1_PARAM:
-		adf_dsi_vc_generic_write_1(dsi_pipe, vc, *data);
+		adf_dsi_vc_generic_write_1(dsi_pipe, vc, *data, port);
 		break;
 	case MIPI_DSI_GENERIC_SHORT_WRITE_2_PARAM:
-		adf_dsi_vc_generic_write_2(dsi_pipe, vc, *data, *(data + 1));
+		adf_dsi_vc_generic_write_2(dsi_pipe, vc, *data, *(data + 1),
+					   port);
 		break;
 	case MIPI_DSI_GENERIC_READ_REQUEST_0_PARAM:
 	case MIPI_DSI_GENERIC_READ_REQUEST_1_PARAM:
@@ -272,19 +280,19 @@ static u8 *mipi_exec_send_packet(struct dsi_pipe *dsi_pipe, u8 *data)
 		pr_debug("Generic Read not yet implemented or used\n");
 		break;
 	case MIPI_DSI_GENERIC_LONG_WRITE:
-		adf_dsi_vc_generic_write(dsi_pipe, vc, data, len);
+		adf_dsi_vc_generic_write(dsi_pipe, vc, data, len, port);
 		break;
 	case MIPI_DSI_DCS_SHORT_WRITE:
-		adf_dsi_vc_dcs_write_0(dsi_pipe, vc, *data);
+		adf_dsi_vc_dcs_write_0(dsi_pipe, vc, *data, port);
 		break;
 	case MIPI_DSI_DCS_SHORT_WRITE_PARAM:
-		adf_dsi_vc_dcs_write_1(dsi_pipe, vc, *data, *(data + 1));
+		adf_dsi_vc_dcs_write_1(dsi_pipe, vc, *data, *(data + 1), port);
 		break;
 	case MIPI_DSI_DCS_READ:
 		pr_debug("DCS Read not yet implemented or used\n");
 		break;
 	case MIPI_DSI_DCS_LONG_WRITE:
-		adf_dsi_vc_dcs_write(dsi_pipe, vc, data, len);
+		adf_dsi_vc_dcs_write(dsi_pipe, vc, data, len, port);
 		break;
 	}
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
index cd22c29..f3b3fdc 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
@@ -590,15 +590,14 @@ void vlv_cmd_hs_mode_enable(struct intel_pipeline *pipeline, bool enable)
 }
 
 int vlv_cmd_vc_dcs_write(struct intel_pipeline *pipeline, int channel,
-		const u8 *data, int len)
+		const u8 *data, int len, enum port port)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
-	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port[pll->port_id];
+		dsi_port = &disp->port.dsi_port[port];
 		err = vlv_dsi_port_cmd_vc_dcs_write(dsi_port,
 			channel, data, len);
 	}
@@ -607,15 +606,14 @@ int vlv_cmd_vc_dcs_write(struct intel_pipeline *pipeline, int channel,
 }
 
 int vlv_cmd_vc_generic_write(struct intel_pipeline *pipeline, int channel,
-			const u8 *data, int len)
+			const u8 *data, int len, enum port port)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
-	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port[pll->port_id];
+		dsi_port = &disp->port.dsi_port[port];
 		err = vlv_dsi_port_cmd_vc_generic_write(dsi_port,
 			channel, data, len);
 	}
@@ -624,15 +622,14 @@ int vlv_cmd_vc_generic_write(struct intel_pipeline *pipeline, int channel,
 }
 
 int vlv_cmd_vc_dcs_read(struct intel_pipeline *pipeline, int channel,
-		u8 dcs_cmd, u8 *buf, int buflen)
+		u8 dcs_cmd, u8 *buf, int buflen, enum port port)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
-	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port[pll->port_id];
+		dsi_port = &disp->port.dsi_port[port];
 		err = vlv_dsi_port_cmd_vc_dcs_read(dsi_port, channel,
 			dcs_cmd, buf, buflen);
 	}
@@ -641,15 +638,14 @@ int vlv_cmd_vc_dcs_read(struct intel_pipeline *pipeline, int channel,
 }
 
 int vlv_cmd_vc_generic_read(struct intel_pipeline *pipeline, int channel,
-		u8 *reqdata, int reqlen, u8 *buf, int buflen)
+		u8 *reqdata, int reqlen, u8 *buf, int buflen, enum port port)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
-	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port[pll->port_id];
+		dsi_port = &disp->port.dsi_port[port];
 		err = vlv_dsi_port_cmd_vc_generic_read(dsi_port, channel,
 			reqdata, reqlen, buf, buflen);
 	}
diff --git a/drivers/video/adf/intel/include/core/intel_platform_config.h b/drivers/video/adf/intel/include/core/intel_platform_config.h
index 5c0acd3..13f567e 100644
--- a/drivers/video/adf/intel/include/core/intel_platform_config.h
+++ b/drivers/video/adf/intel/include/core/intel_platform_config.h
@@ -64,9 +64,9 @@ int vlv_cmd_vc_dcs_write(struct intel_pipeline *pipeline, int channel,
 int vlv_cmd_vc_generic_write(struct intel_pipeline *pipeline, int channel,
 		const u8 *data, int len);
 int vlv_cmd_vc_dcs_read(struct intel_pipeline *pipeline, int channel,
-		u8 dcs_cmd, u8 *buf, int buflen);
+		u8 dcs_cmd, u8 *buf, int buflen, enum port port);
 int vlv_cmd_vc_generic_read(struct intel_pipeline *pipeline, int channel,
-		u8 *reqdata, int reqlen, u8 *buf, int buflen);
+		u8 *reqdata, int reqlen, u8 *buf, int buflen, enum port port);
 int vlv_cmd_dpi_send_cmd(struct intel_pipeline *pipeline, u32 cmd, bool hs);
 
 /*
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index 3e58d40..d5523d3 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -207,13 +207,14 @@ extern bool vlv_update_maxfifo_status(struct intel_pipeline *pipeline,
 extern int vlv_cmd_dpi_send_cmd(struct intel_pipeline *pipeline, u32 cmd,
 		bool hs);
 extern int vlv_cmd_vc_generic_read(struct intel_pipeline *pipeline,
-		int channel, u8 *reqdata, int reqlen, u8 *buf, int buflen);
+		int channel, u8 *reqdata, int reqlen, u8 *buf, int buflen,
+		enum port port);
 extern int vlv_cmd_vc_dcs_read(struct intel_pipeline *pipeline, int channel,
-		u8 dcs_cmd, u8 *buf, int buflen);
+		u8 dcs_cmd, u8 *buf, int buflen, enum port port);
 extern int vlv_cmd_vc_generic_write(struct intel_pipeline *pipeline,
-		int channel, const u8 *data, int len);
+		int channel, const u8 *data, int len, enum port port);
 extern int vlv_cmd_vc_dcs_write(struct intel_pipeline *pipeline, int channel,
-		const u8 *data, int len);
+		const u8 *data, int len, enum port port);
 extern void vlv_cmd_hs_mode_enable(struct intel_pipeline *pipeline,
 		bool enable);
 
-- 
1.7.9.5

