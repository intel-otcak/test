From cfc150dac0b10a78abf16a27dda41718e9466409 Mon Sep 17 00:00:00 2001
Message-Id: <cfc150dac0b10a78abf16a27dda41718e9466409.1413836944.git.chang-joon.lee@intel.com>
In-Reply-To: <5d8aa9994fff43965a6fab8c9a528b8b47a9d624.1413836944.git.chang-joon.lee@intel.com>
References: <5d8aa9994fff43965a6fab8c9a528b8b47a9d624.1413836944.git.chang-joon.lee@intel.com>
From: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date: Thu, 5 Jun 2014 15:57:53 +0100
Subject: [PATCH 51/71] REVERTME [VPG]: drm/i915: Export ring data on native
 sync points

To enable wait optimisation in libdrm userspace we need to export the
ring associated which each sync point as driver private data.

For: GMIN-1318
Tracked-On: https://jira01.devtools.intel.com/browse/GMIN-854
Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
(cherry picked from commit 18e71ef1162b12dfac15dfb4c23a1a996cddef16)

Change-Id: I525d9327b6808c16bb5f57ffb7dfd8f15ee2b51f
---
 drivers/gpu/drm/i915/intel_sync.c |   11 +++++++----
 drivers/gpu/drm/i915/intel_sync.h |    5 +----
 include/uapi/drm/i915_drm.h       |    6 ++++++
 3 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_sync.c b/drivers/gpu/drm/i915/intel_sync.c
index 1c19e0b..687cfb3 100644
--- a/drivers/gpu/drm/i915/intel_sync.c
+++ b/drivers/gpu/drm/i915/intel_sync.c
@@ -99,7 +99,7 @@ static int i915_sync_fill_driver_data(struct sync_pt *sync_pt,
 
 static
 struct sync_pt *i915_sync_pt_create(struct i915_sync_timeline *obj,
-						u32 value, u32 cycle)
+					u32 value, u32 cycle, u64 flags)
 {
 	struct i915_sync_pt *pt;
 	struct intel_engine_cs *ring;
@@ -119,6 +119,7 @@ struct sync_pt *i915_sync_pt_create(struct i915_sync_timeline *obj,
 	if (pt) {
 		pt->pvt.value = value;
 		pt->pvt.cycle = cycle;
+		pt->pvt.flags = flags & I915_EXEC_RING_MASK;
 	} else
 		ring->irq_put(ring);
 
@@ -134,7 +135,7 @@ static struct sync_pt *i915_sync_pt_dup(struct sync_pt *sync_pt)
 		(struct i915_sync_timeline *)sync_pt->parent;
 
 	new_pt = (struct sync_pt *)i915_sync_pt_create(obj, pt->pvt.value,
-								pt->pvt.cycle);
+					pt->pvt.cycle, pt->pvt.flags);
 	return new_pt;
 }
 
@@ -261,7 +262,8 @@ void *i915_sync_prepare_request(struct drm_i915_gem_execbuffer2 *args,
 	 * the timeline is signalled on completion.
 	 */
 	pt = i915_sync_pt_create(ring->timeline, seqno,
-				ring->timeline->pvt.cycle);
+				 ring->timeline->pvt.cycle,
+				 args->flags);
 	if (!pt)
 		DRM_DEBUG_DRIVER("Failed to create sync point for %d/%u\n",
 					ring->id, seqno);
@@ -319,7 +321,8 @@ void *gen8_sync_prepare_request(struct drm_i915_gem_execbuffer2 *args,
 	 * the timeline is signalled on completion.
 	 */
 	pt = i915_sync_pt_create(ring->timeline, seqno,
-				ring->timeline->pvt.cycle);
+				 ring->timeline->pvt.cycle,
+				 args->flags);
 	if (!pt)
 		DRM_DEBUG_DRIVER("Failed to create sync point for %d/%u\n",
 					ring->id, seqno);
diff --git a/drivers/gpu/drm/i915/intel_sync.h b/drivers/gpu/drm/i915/intel_sync.h
index 295216e..5813dbc 100644
--- a/drivers/gpu/drm/i915/intel_sync.h
+++ b/drivers/gpu/drm/i915/intel_sync.h
@@ -55,10 +55,7 @@ struct i915_sync_timeline {
 struct i915_sync_pt {
 	struct sync_pt		pt;
 
-	struct {
-		u32		value;
-		u32		cycle;
-	} pvt;
+	struct drm_i915_gem_syncpt_driver_data pvt;
 };
 
 #ifdef CONFIG_DRM_I915_SYNC
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 0a820aa..6aa7957 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -839,6 +839,12 @@ struct drm_i915_gem_execbuffer2 {
 #define i915_execbuffer2_get_context_id(eb2) \
 	((eb2).rsvd1 & I915_EXEC_CONTEXT_ID_MASK)
 
+struct drm_i915_gem_syncpt_driver_data {
+	__u32 value;
+	__u32 cycle;
+	__u64 flags;
+};
+
 struct drm_i915_gem_pin {
 	/** Handle of the buffer to be pinned. */
 	__u32 handle;
-- 
1.7.9.5

