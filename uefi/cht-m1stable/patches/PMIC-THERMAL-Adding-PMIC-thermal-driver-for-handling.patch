From de14c67c74e5a9b06d395e4bdbe908180c217687 Mon Sep 17 00:00:00 2001
From: ysiyer <yegnesh.s.iyer@intel.com>
Date: Wed, 15 Apr 2015 12:01:59 +0530
Subject: [PATCH] PMIC THERMAL: Adding PMIC thermal driver for handling
 systherm alerts

Issue description: Whiskey Cove and Crystal Cove PMICs support alert
interrupts for SYSTHERM channels. Previously, these thermal interrupts
were unhandled. As a result, user space thermal management had to poll
for the temperature continuously for a trip point cross over and caused
system wake every 30 seconds.

Solution: Added the pmic thermal driver for handling the alert interrupts
and notify the thermal zone appropriately. For handling the interrupts,
the driver needs a mapping of the systherm channel to the corresponding
thermal zone device, which is expected to be created in the pmic mfd driver
and the mapping should be passed as the platform data for the mfd cell.
Upon resolving the interrupt, the pmic thermal driver will update the zone
variables crossed trip and event of the relevant zone.

Change-Id: I22a2223ceabb84517a50e1ae006736b06138779e
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1411
Signed-off-by: ysiyer <yegnesh.s.iyer@intel.com>
---
 drivers/thermal/Kconfig            |   7 ++
 drivers/thermal/Makefile           |   1 +
 drivers/thermal/pmic_thermal.c     | 167 +++++++++++++++++++++++++++++++++++++
 include/linux/mfd/intel_soc_pmic.h |  21 +++++
 4 files changed, 196 insertions(+)
 create mode 100644 drivers/thermal/pmic_thermal.c

diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index c2dce4d..5fde9ae 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -230,6 +230,13 @@ config INTEL_THERMAL
 	  They are exposed for the OS to use via an INT3400 ACPI device object
 	  as the master, and INT3401~INT340B ACPI device objects as the slaves.
 
+config INTEL_PMIC_THERMAL
+	tristate "PMIC thermal driver"
+	depends on X86 && INTEL_SOC_PMIC
+	help
+	  Select this if the PMIC controls the ADC channels for system temperature
+	  measurements and alerts.
+
 menu "Texas Instruments thermal drivers"
 source "drivers/thermal/ti-soc-thermal/Kconfig"
 endmenu
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index 027dff8..893688e 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -32,3 +32,4 @@ obj-$(CONFIG_X86_PKG_TEMP_THERMAL)	+= x86_pkg_temp_thermal.o
 obj-$(CONFIG_INTEL_BYT_AUX_DTS_THERMAL)	+= intel_byt_dts_thermal.o
 obj-$(CONFIG_TI_SOC_THERMAL)	+= ti-soc-thermal/
 obj-$(CONFIG_INTEL_THERMAL)	+= intel_thermal/
+obj-$(CONFIG_INTEL_PMIC_THERMAL)	+= pmic_thermal.o
diff --git a/drivers/thermal/pmic_thermal.c b/drivers/thermal/pmic_thermal.c
new file mode 100644
index 0000000..5bfcf6c
--- /dev/null
+++ b/drivers/thermal/pmic_thermal.c
@@ -0,0 +1,167 @@
+/*
+ * pmic_thermal.c - PMIC thermal driver
+ *
+ * Copyright (C) 2012-2015 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Author: Iyer, Yegnesh S <yegnesh.s.iyer@intel.com>
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/thermal.h>
+#include <linux/platform_device.h>
+#include <linux/sched.h>
+#include <linux/mfd/intel_soc_pmic.h>
+
+static int pmic_irq_count;
+
+static irqreturn_t pmic_thermal_irq_handler(int irq, void *data)
+{
+	struct pmic_thermal_data *td = data;
+	struct thermal_zone_device *tzd;
+	int i, j;
+	int ret;
+	u16 reg;
+	u16 evt_stat_reg;
+	u8 mask;
+	u8 evt_mask;
+	u8 irq_stat;
+	u8 trip;
+	u8 event;
+
+	/* Resolve thermal irqs */
+	for (i = 0; i < td->num_maps; i++) {
+		for (j = 0; j < td->maps[i].num_trips; j++) {
+			reg = td->maps[i].trip_config[j].irq_reg;
+			mask = td->maps[i].trip_config[j].irq_mask;
+			/* Read the irq register to resolve whether the
+			interrupt was triggered for this sensor */
+			ret = intel_soc_pmic_readb(reg);
+			if (ret < 0)
+				return IRQ_HANDLED;
+			irq_stat = ((u8)ret & mask);
+			if (irq_stat) {
+				/* Read the status register to find out what
+				event occured i.e a high or a low */
+				evt_stat_reg =
+					td->maps[i].trip_config[j].evt_stat;
+				evt_mask =
+					td->maps[i].trip_config[j].evt_mask;
+				ret = intel_soc_pmic_readb(evt_stat_reg);
+				if (ret < 0)
+					return IRQ_HANDLED;
+
+				event = ((u8)ret & evt_mask);
+				trip = td->maps[i].trip_config[j].trip_num;
+				tzd = thermal_zone_get_zone_by_name(
+						td->maps[i].handle);
+				if (!IS_ERR(tzd))
+					thermal_zone_device_update(tzd);
+			}
+		}
+	}
+
+	return IRQ_HANDLED;
+}
+
+static void pmic_thermal_free_irqs(struct platform_device *pdev)
+{
+	struct pmic_thermal_data *thermal_data =
+			(struct pmic_thermal_data *)pdev->dev.platform_data;
+	int irq;
+
+	while  (pmic_irq_count >= 0) {
+		irq = platform_get_irq(pdev, (pmic_irq_count));
+		free_irq(irq, thermal_data);
+		pmic_irq_count--;
+	}
+}
+
+static int pmic_thermal_probe(struct platform_device *pdev)
+{
+	struct pmic_thermal_data *thermal_data;
+	int irq;
+	int ret;
+	int i, j;
+	u16 reg;
+	u8 mask;
+
+	thermal_data = (struct pmic_thermal_data *)pdev->dev.platform_data;
+	if (thermal_data == NULL) {
+		dev_err(&pdev->dev, "No thermal data initialized!!\n");
+		return -ENODEV;
+	}
+
+	pmic_irq_count = 0;
+	while ((irq = platform_get_irq(pdev, pmic_irq_count)) != -ENXIO) {
+		ret = request_threaded_irq(irq, NULL, pmic_thermal_irq_handler,
+			      IRQF_ONESHOT, "pmic_thermal", thermal_data);
+		if (ret) {
+			dev_err(&pdev->dev, "request irq failed: %d\n",
+				ret);
+			pmic_irq_count--;
+			pmic_thermal_free_irqs(pdev);
+			return ret;
+		}
+		pmic_irq_count++;
+	}
+	pmic_irq_count--;
+
+	/* Enable thermal interrupts */
+	for (i = 0; i < thermal_data->num_maps; i++) {
+		for (j = 0; j < thermal_data->maps[i].num_trips; j++) {
+			reg = thermal_data->maps[i].trip_config[j].irq_en;
+			mask = thermal_data->maps[i].trip_config[j].irq_en_mask;
+			ret = intel_soc_pmic_update(reg, 0x00, mask);
+			if (ret < 0) {
+				pmic_thermal_free_irqs(pdev);
+				return ret;
+			}
+		}
+	}
+
+	return 0;
+}
+
+static int pmic_thermal_remove(struct platform_device *pdev)
+{
+
+	pmic_thermal_free_irqs(pdev);
+
+	return 0;
+}
+
+static struct platform_device_id pmic_thermal_id_table[] = {
+	{ .name = "crystal_cove_thermal" },
+	{ .name = "whiskey_cove_thermal" },
+	{},
+};
+
+static struct platform_driver pmic_thermal_driver = {
+	.probe = pmic_thermal_probe,
+	.remove = pmic_thermal_remove,
+	.driver = {
+		.name = "pmic_thermal",
+	},
+	.id_table = pmic_thermal_id_table,
+};
+
+MODULE_DEVICE_TABLE(platform, pmic_thermal_id_table);
+module_platform_driver(pmic_thermal_driver);
+
+MODULE_AUTHOR("Iyer, Yegnesh S <yegnesh.s.iyer@intel.com>");
+MODULE_DESCRIPTION("PMIC thermal Driver");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/mfd/intel_soc_pmic.h b/include/linux/mfd/intel_soc_pmic.h
index cf70fd6..9dc9e4a 100644
--- a/include/linux/mfd/intel_soc_pmic.h
+++ b/include/linux/mfd/intel_soc_pmic.h
@@ -58,6 +58,27 @@
 #define WHISKEY_COVE 0x1
 #define DOLLAR_COVE 0x2
 
+struct trip_config_map {
+	u16 irq_reg;
+	u16 irq_en;
+	u16 evt_stat;
+	u8 irq_mask;
+	u8 irq_en_mask;
+	u8 evt_mask;
+	u8 trip_num;
+};
+
+struct thermal_irq_map {
+	char handle[20];
+	int num_trips;
+	struct trip_config_map *trip_config;
+};
+
+struct pmic_thermal_data {
+	struct thermal_irq_map *maps;
+	int num_maps;
+};
+
 struct pmic_gpio_data {
 	int type;
 	int num_gpio;
-- 
1.9.1

