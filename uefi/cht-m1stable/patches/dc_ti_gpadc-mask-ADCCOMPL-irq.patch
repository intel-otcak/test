From 45b886b71c53d23150f337a58db55fc47f3b67ea Mon Sep 17 00:00:00 2001
From: Zhang Yanmin <yanmin.zhang@intel.com>
Date: Mon, 18 Jan 2016 01:23:45 +0800
Subject: [PATCH 4/5] dc_ti_gpadc: mask ADCCOMPL irq

With TI PMIC, CR board often be woken up after sleeping
for less than 3 seconds at s3. New ish firmware has
a 'cool down' feature, which might wake up PMC at s3.
However, such operation shouldn't wake up the whole board.
Debug shows ADCCOMPL bit is set in PMIC IRQ register, and PMIC
INT is sent to IO-APIC, then whole board exits from s3.
Before entering sleep, kernel already clears this IRQ bit.

Basically,TI PMIC will set the ADCCOMPL bit after the SoC
de-asserts SLP_S0iX# because upon sleep exit the PMIC
performs a GPADC conversion to check battery. Hence,
drivers/OSes need to make sure MADCCOMPL is masked before
S0IX entry.

The patch fixes it by mask/unmasking ADCCOMPL bit of reg MIRQ
in dc_ti_gpadc's suspend/resume callback.

Change-Id: I9d548a9a83e0a25fa22ed81b91b39d8280603ad1
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-17024
Signed-off-by: Haithem Salah <haithem.salah@intel.com>
Signed-off-by: Pargada, Carlos <carlos.pargada@intel.com>
Signed-off-by: Xiao Jin <jin.xiao@intel.com>
Signed-off-by: Zhang Yanmin <yanmin.zhang@intel.com>
Reviewed-on: https://android.intel.com:443/457659
---
 drivers/iio/adc/dc_ti_gpadc.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/drivers/iio/adc/dc_ti_gpadc.c b/drivers/iio/adc/dc_ti_gpadc.c
index 1933494..ddee24e 100644
--- a/drivers/iio/adc/dc_ti_gpadc.c
+++ b/drivers/iio/adc/dc_ti_gpadc.c
@@ -483,6 +483,9 @@ static int dc_ti_gpadc_suspend(struct device *dev)
 	struct gpadc_info *info = iio_priv(indio_dev);
 
 	mutex_lock(&info->lock);
+
+	/* Set MIRQ Register */
+	intel_soc_pmic_setb(DC_ADC_IRQ_MASK_REG, IRQ_MASK_ADC);
 	return 0;
 }
 
@@ -491,6 +494,9 @@ static int dc_ti_gpadc_resume(struct device *dev)
 	struct iio_dev *indio_dev = dev_get_drvdata(dev);
 	struct gpadc_info *info = iio_priv(indio_dev);
 
+	/* Clear MIRQ Register */
+	intel_soc_pmic_clearb(DC_ADC_IRQ_MASK_REG, IRQ_MASK_ADC);
+
 	mutex_unlock(&info->lock);
 	return 0;
 }
-- 
1.9.1

