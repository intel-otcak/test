From 826bf085977b74fd81d51b5e40d6cebdd7c0c8f5 Mon Sep 17 00:00:00 2001
From: Bin Han <bin.b.han@intel.com>
Date: Tue, 16 Sep 2014 14:19:00 +0800
Subject: [PATCH 150/164] atomisp2: add per_frame_setting flag for
 atomisp_parameters

In the past, HAL uses the isp_config_id == 0 to indicate this is a global
setting, but this is not true with a new change request, that HAL wants to set
>0 isp_config_id for global setting. In such way, HAL can know the 3A
statistics comes from which parameter.

Therefore we add a new flag per_frame_setting to indicate if this setting is
for global or per_frame.

Change-Id: I6088a9e4826bfbc698e71793faf140b670f0b849
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-8929
Signed-off-by: Bin Han <bin.b.han@intel.com>
Reviewed-on: https://android.intel.com:443/260890
Reviewed-on: https://icggerrit.ir.intel.com/29097
Approver: Wei Tao <wei.tao@intel.com>
Build: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
Maintainer: Wei Tao <wei.tao@intel.com>
---
 .../pci/atomisp2/atomisp_driver/atomisp_cmd.c      |    9 +++++----
 .../atomisp_driver/atomisp_compat_ioctl32.c        |    3 ++-
 .../atomisp_driver/atomisp_compat_ioctl32.h        |    1 +
 .../pci/atomisp2/atomisp_driver/atomisp_ioctl.c    |    7 +++++--
 4 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index d26e080..85860a2 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -3338,10 +3338,11 @@ int atomisp_set_parameters(struct video_device *vdev,
 		return -EINVAL;
 	}
 
-	dev_dbg(asd->isp->dev, "%s: set parameter with isp_config_id %d of %s\n",
-		__func__, arg->isp_config_id, vdev->name);
+	dev_dbg(asd->isp->dev, "%s: set parameter(per_frame_setting %d) with isp_config_id %d of %s\n",
+		__func__, arg->per_frame_setting, arg->isp_config_id,
+	        vdev->name);
 
-	if (arg->isp_config_id && !atomisp_is_vf_pipe(pipe)) {
+	if (arg->per_frame_setting && !atomisp_is_vf_pipe(pipe)) {
 		/*
 		 * Per-frame setting enabled, we allocate a new paramter
 		 * buffer to cache the parameters and only when frame buffers
@@ -3381,7 +3382,7 @@ int atomisp_set_parameters(struct video_device *vdev,
 	if (ret)
 		goto apply_parameter_failed;
 
-	if (!(arg->isp_config_id && !atomisp_is_vf_pipe(pipe))) {
+	if (!(arg->per_frame_setting && !atomisp_is_vf_pipe(pipe))) {
 		atomisp_apply_css_parameters(asd, arg, css_param);
 		/* indicate to CSS that we have parameters to be updated */
 		asd->params.css_update_params_needed = true;
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c
index db55b4b..2e0abd1 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c
@@ -704,7 +704,8 @@ static int get_atomisp_parameters32(struct atomisp_parameters *kp,
 		if (get_user((*dst), src))
 			return -EFAULT;
 	}
-	if (get_user(kp->isp_config_id, &up->isp_config_id))
+	if (get_user(kp->isp_config_id, &up->isp_config_id) ||
+	    get_user(kp->per_frame_setting, &up->per_frame_setting))
 		return -EFAULT;
 
 	{
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.h
index f9d3cd4..35983dc 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.h
@@ -263,6 +263,7 @@ struct atomisp_parameters32 {
 	 * frame, driver will send this id back with output frame together.
 	 */
 	uint32_t	isp_config_id;
+	uint32_t	per_frame_setting;
 };
 
 struct atomisp_acc_fw_load_to_pipe32 {
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index 098f0d0..583b0d1 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -1304,12 +1304,15 @@ done:
 		wbinvd();
 
 	if (!atomisp_is_vf_pipe(pipe) &&
-	    (buf->reserved2 & ATOMISP_BUFFER_HAS_PER_FRAME_SETTING))
+	    (buf->reserved2 & ATOMISP_BUFFER_HAS_PER_FRAME_SETTING)) {
 		/* this buffer will have a per-frame parameter */
 		pipe->frame_request_config_id[buf->index] = buf->reserved2 &
 					~ATOMISP_BUFFER_HAS_PER_FRAME_SETTING;
-	else
+		dev_dbg(isp->dev, "This buffer requires per_frame setting which has isp_config_id %d\n",
+		        pipe->frame_request_config_id[buf->index]);
+	} else {
 		pipe->frame_request_config_id[buf->index] = 0;
+	}
 
 	pipe->frame_params[buf->index] = NULL;
 
-- 
1.7.9.5

