From 1fe871fc58c2c9c220d4ddba5e956ccc9b68fb4a Mon Sep 17 00:00:00 2001
From: Zhang Rui <rui.zhang@intel.com>
Date: Fri, 14 Mar 2014 00:34:05 +0800
Subject: [PATCH 04/23] ACPI: introduce ACPI Intel thermal scan handler

Newer laptops and tablets that use ACPI for thermal control
outside the core CPU/SOC for thermal safety reasons.
They are exposed for the OS to use via
1) INT3400 ACPI device object as the master.
2) INT3401 ~ INT340B ACPI device objects as the slaves.

This patch introduces a scan handler to enumerate the INT3400
ACPI device object to platform bus, and prevent its slaves
from being exposed to platform bus before the controller
driver is probed.

Change-Id: I304b689e936308e2cfbcd646f0fc6c57a4ce6565
Signed-off-by: Zhang Rui <rui.zhang@intel.com>
---
 drivers/acpi/Makefile        |    1 +
 drivers/acpi/intel_thermal.c |   51 ++++++++++++++++++++++++++++++++++++++++++
 drivers/acpi/internal.h      |    1 +
 drivers/acpi/scan.c          |    1 +
 drivers/thermal/Kconfig      |    9 ++++++++
 5 files changed, 63 insertions(+)
 create mode 100644 drivers/acpi/intel_thermal.c

diff --git a/drivers/acpi/Makefile b/drivers/acpi/Makefile
index 0331f91..60804c0 100644
--- a/drivers/acpi/Makefile
+++ b/drivers/acpi/Makefile
@@ -41,6 +41,7 @@ acpi-$(CONFIG_ACPI_DOCK)	+= dock.o
 acpi-y				+= pci_root.o pci_link.o pci_irq.o
 acpi-$(CONFIG_X86_INTEL_LPSS)	+= acpi_lpss.o
 acpi-y				+= acpi_platform.o
+acpi-y				+= intel_thermal.o
 acpi-y				+= power.o
 acpi-y				+= event.o
 acpi-y				+= sysfs.o
diff --git a/drivers/acpi/intel_thermal.c b/drivers/acpi/intel_thermal.c
new file mode 100644
index 0000000..7332927
--- /dev/null
+++ b/drivers/acpi/intel_thermal.c
@@ -0,0 +1,51 @@
+/*
+ * ACPI support for intel thermal drivers
+ *
+ * Copyright (C) 2014, Intel Corporation
+ * Authors: Zhang Rui <rui.zhang@intel.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/acpi.h>
+#include <linux/module.h>
+
+#include "internal.h"
+
+#define DO_ENUMERATION 0x01
+static const struct acpi_device_id intel_thermal_device_ids[]= {
+	{"INT3400", DO_ENUMERATION },
+	{"INT3401"},
+	{"INT3402"},
+	{"INT3403"},
+	{"INT3404"},
+	{"INT3406"},
+	{"INT3407"},
+	{"INT3408"},
+	{"INT3409"},
+	{"INT340A"},
+	{"INT340B"},
+	{""},
+};
+
+static int intel_thermal_handler_attach(struct acpi_device *adev,
+                                   const struct acpi_device_id *id)
+{
+#ifdef CONFIG_INTEL_THERMAL
+	if (id->driver_data == DO_ENUMERATION)
+		acpi_create_platform_device(adev, NULL);
+#endif
+	return 1;
+}
+
+static struct acpi_scan_handler intel_thermal_handler = {
+	.ids = intel_thermal_device_ids,
+	.attach = intel_thermal_handler_attach,
+};
+
+void __init acpi_intel_thermal_init(void)
+{
+	acpi_scan_add_handler(&intel_thermal_handler);
+}
diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index dedbb2d..1c75550 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -30,6 +30,7 @@ void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);
 void acpi_processor_init(void);
 void acpi_platform_init(void);
+void acpi_intel_thermal_init(void);
 int acpi_sysfs_init(void);
 #ifdef CONFIG_ACPI_CONTAINER
 void acpi_container_init(void);
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 5f1c5c1..8937f0e 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -2249,6 +2249,7 @@ int __init acpi_scan_init(void)
 	acpi_cmos_rtc_init();
 	acpi_container_init();
 	acpi_memory_hotplug_init();
+	acpi_intel_thermal_init();
 	acpi_dock_init();
 
 	mutex_lock(&acpi_scan_lock);
diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index 5dd9490..3e5f22c 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -235,6 +235,15 @@ config INTEL_BYT_AUX_DTS_THERMAL
 	  a critical trip point, which was set by the driver based on the TJ
 	  MAX temperature.
 
+config INTEL_THERMAL
+	bool
+	depends on X86 && ACPI
+	help
+	  Newer laptops and tablets that use ACPI for thermal control
+	  outside the core CPU/SOC for thermal safety reasons.
+	  They are exposed for the OS to use via an INT3400 ACPI device object
+	  as the master, and INT3401~INT340B ACPI device objects as the slaves.
+
 menu "Texas Instruments thermal drivers"
 source "drivers/thermal/ti-soc-thermal/Kconfig"
 endmenu
-- 
1.7.9.5

