From ede667a1b02de72e42df6da92d72830f6786c734 Mon Sep 17 00:00:00 2001
From: b883 <b883@borqs.com>
Date: Wed, 21 Oct 2015 09:54:03 +0800
Subject: [PATCH 2/4] [BT] Check wake lock status

Check wake_lock_status before call
wake_lock() or wake_unlock()

Change-Id: I670afb4488070b575055c9d1890ddb28c39458fe
Borig-Change-Id: Ifa566e6dd4d0e1643d8f176d213cef91a9feda16
Reviewed-on: http://192.168.1.79/gerrit/14407
Reviewed-by: b927 <b927@borqs.com>
Reviewed-on: https://android.intel.com:443/430942
Signed-off-by: Marco Chiotti <marcox.chiotti@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-20208
Reviewed-on: https://android.intel.com:443/471653
---
 drivers/misc/bt_lpm/bt_lpm.c | 23 ++++++++++++++++++-----
 1 file changed, 18 insertions(+), 5 deletions(-)

diff --git a/drivers/misc/bt_lpm/bt_lpm.c b/drivers/misc/bt_lpm/bt_lpm.c
index 6a6074b..9a6ba14 100644
--- a/drivers/misc/bt_lpm/bt_lpm.c
+++ b/drivers/misc/bt_lpm/bt_lpm.c
@@ -70,6 +70,7 @@ struct bluetooth_low_power_mode {
 
 	struct device *tty_dev;
 #ifndef DBG_DISABLE_BT_LOW_POWER
+	int wake_lock_status;
 	struct wake_lock wake_lock;
 	char wake_lock_name[100];
 #endif /* !DBG_DISABLE_BT_LOW_POWER */
@@ -205,8 +206,12 @@ static void set_wake_locked(int wake)
 {
 	bt_lpm.wake = wake;
 
-	if (!wake)
-		wake_unlock(&bt_lpm.wake_lock);
+	if (!wake) {
+		if (bt_lpm.wake_lock_status != wake) {
+			wake_unlock(&bt_lpm.wake_lock);
+			bt_lpm.wake_lock_status = wake;
+		}
+	}
 
 	if (!wake_uart_enabled && wake) {
 		WARN_ON(!bt_lpm.tty_dev);
@@ -238,7 +243,10 @@ static void update_host_wake_locked(int host_wake)
 	bt_lpm.host_wake = host_wake;
 
 	if (host_wake) {
-		wake_lock(&bt_lpm.wake_lock);
+		if (host_wake != bt_lpm.wake_lock_status) {
+			bt_lpm.wake_lock_status = host_wake;
+			wake_lock(&bt_lpm.wake_lock);
+		}
 		if (!host_wake_uart_enabled) {
 			WARN_ON(!bt_lpm.tty_dev);
 			uart_enable(bt_lpm.tty_dev);
@@ -252,8 +260,11 @@ static void update_host_wake_locked(int host_wake)
 		 * Take a timed wakelock, so that upper layers can take it.
 		 * The chipset deasserts the hostwake lock, when there is no
 		 * more data to send.
-		 */
-		wake_lock_timeout(&bt_lpm.wake_lock, HZ/2);
+		*/
+		if (host_wake != bt_lpm.wake_lock_status) {
+			bt_lpm.wake_lock_status = host_wake;
+			wake_lock_timeout(&bt_lpm.wake_lock, HZ/2);
+		}
 	}
 
 	host_wake_uart_enabled = host_wake;
@@ -365,6 +376,7 @@ static int bluetooth_lpm_init(struct platform_device *pdev)
 			"BTLowPower");
 	wake_lock_init(&bt_lpm.wake_lock, WAKE_LOCK_SUSPEND,
 			 bt_lpm.wake_lock_name);
+	bt_lpm.wake_lock_status = 0;
 
 	bt_lpm_wake_peer(tty_dev);
 	return 0;
@@ -526,6 +538,7 @@ static int bt_lpm_remove(struct platform_device *pdev)
 	gpio_free(bt_lpm.gpio_wake);
 	gpio_free(bt_lpm.gpio_host_wake);
 	wake_lock_destroy(&bt_lpm.wake_lock);
+	bt_lpm.wake_lock_status = 0;
 #endif /* !DBG_DISABLE_BT_LOW_POWER */
 	gpiod_put(bt_lpm_gpiod);
 	return 0;
-- 
1.9.1

