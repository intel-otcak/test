From db1394675139363ce61dfe50feb720d184432a33 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 14 May 2014 13:55:10 -0700
Subject: [PATCH 036/117] gmin camera: Add platform data to registered info

The atomisp driver needs access to the per-module platform data.  Add
that to the registration API and update drivers.

Also cleanup: remove some redundant getvar_int's after Ilkka's making
this function part of the gmin platform code.  Remove older
declarations from the atomisp_platform.h file now that the functions
are in their own header.

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 .../x86/platform/intel-mid/atomisp_gmin_platform.c |  1 +
 .../camera/drivers/media/i2c/gc0339.c              | 20 +-------
 .../camera/drivers/media/i2c/gc2235.c              | 18 +-------
 .../camera/drivers/media/i2c/imx/imx.c             | 54 ++++++++--------------
 .../camera/drivers/media/i2c/ov2722.c              | 18 +-------
 include/linux/atomisp_gmin_platform.h              | 10 ++--
 6 files changed, 32 insertions(+), 89 deletions(-)

diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
index 64208cc..a79b486 100644
--- a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -120,6 +120,7 @@ int atomisp_register_i2c_module(struct i2c_client *client,
 	bi->comp_addr_count = client->comp_addr_count;
 	bi->comp_addrs = client->comp_addrs;
 	bi->irq_flags = client->irq_flags;
+	bi->platform_data = plat_data;
 
 	return 0;
 }
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c b/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c
index 151ba9f..639c5c6 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c
@@ -35,6 +35,7 @@
 #include <linux/moduleparam.h>
 #include <media/v4l2-device.h>
 #include <linux/io.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #include "gc0339.h"
 
@@ -1145,21 +1146,6 @@ static int gc0339_enum_mbus_fmt(struct v4l2_subdev *sd,
 	return 0;
 }
 
-static int getvar_int(struct device *dev, const char *var, int def)
-{
-	char val[16];
-	size_t len = sizeof(val);
-	long result;
-	int ret;
-
-	ret = gmin_get_config_var(dev, var, val, &len);
-	val[len] = 0;
-	if (!ret)
-		ret = kstrtol(val, 0, &result);
-
-	return ret ? def : result;
-}
-
 static int gc0339_s_config(struct v4l2_subdev *sd,
 			   int irq, void *platform_data)
 {
@@ -1216,9 +1202,7 @@ static int gc0339_s_config(struct v4l2_subdev *sd,
 	/* Register the atomisp platform data prior to the ISP module
 	 * load.  Ideally this would be stored as data on the
 	 * subdevices, but this API matches upstream better. */
-	/* FIXME: type and port need to come from ACPI/EFI config,
-	 * this is hard coded to FFRD8 */
-	ret = atomisp_register_i2c_module(sd, client,
+	ret = atomisp_register_i2c_module(sd, client, platform_data,
 					  getvar_int(&client->dev, "CamType",
 						     RAW_CAMERA),
 					  getvar_int(&client->dev, "CsiPort",
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
index bedd420..208e943 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
@@ -37,6 +37,7 @@
 #include <media/v4l2-device.h>
 #include <media/v4l2-chip-ident.h>
 #include <linux/io.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #include "gc2235.h"
 
@@ -934,21 +935,6 @@ static int gc2235_enum_mbus_fmt(struct v4l2_subdev *sd,
 	return 0;
 }
 
-static int getvar_int(struct device *dev, const char *var, int def)
-{
-	char val[16];
-	size_t len = sizeof(val);
-	long result;
-	int ret;
-
-	ret = gmin_get_config_var(dev, var, val, &len);
-	val[len] = 0;
-	if (!ret)
-		ret = kstrtol(val, 0, &result);
-
-	return ret ? def : result;
-}
-
 static int gc2235_s_config(struct v4l2_subdev *sd,
 			   int irq, void *platform_data)
 {
@@ -1009,7 +995,7 @@ static int gc2235_s_config(struct v4l2_subdev *sd,
 	 * subdevices, but this API matches upstream better. */
 	/* FIXME: type and port need to come from ACPI/EFI config,
 	 * this is hard coded to FFRD8 */
-	ret = atomisp_register_i2c_module(sd, client,
+	ret = atomisp_register_i2c_module(sd, client, platform_data,
 					  getvar_int(&client->dev, "CamType",
 						     RAW_CAMERA),
 					  getvar_int(&client->dev, "CsiPort",
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
index a89cf9f..4c859b7 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
@@ -19,7 +19,6 @@
  *
  */
 #include <asm/intel-mid.h>
-#include <linux/atomisp_platform.h>
 #include <linux/bitops.h>
 #include <linux/device.h>
 #include <linux/delay.h>
@@ -42,6 +41,7 @@
 #include <media/v4l2-chip-ident.h>
 #include <media/v4l2-ctrls.h>
 #include <media/v4l2-device.h>
+#include <linux/atomisp_gmin_platform.h>
 #include "imx.h"
 
 void *imx134_platform_data(void *info); /* From platform_imx134.c */
@@ -2228,21 +2228,6 @@ static int __imx_init_ctrl_handler(struct imx_device *dev)
 	return 0;
 }
 
-static int getvar_int(struct device *dev, const char *var, int def)
-{
-	char val[16];
-	size_t len = sizeof(val);
-	long result;
-	int ret;
-
-	ret = gmin_get_config_var(dev, var, val, &len);
-	val[len] = 0;
-	if (!ret)
-		ret = kstrtol(val, 0, &result);
-
-	return ret ? def : result;
-}
-
 static int imx_probe(struct i2c_client *client,
 			 const struct i2c_device_id *id)
 {
@@ -2250,11 +2235,9 @@ static int imx_probe(struct i2c_client *client,
 	struct camera_mipi_info *imx_info = NULL;
 	int ret;
 	char *msr_file_name = NULL;
+	struct camera_sensor_platform_data *pdata = NULL;
+
 
-	/* DEBUG */
-	dev_info(&client->dev, "imx_probe adapter %d addr 0x%x acpi %s\n",
-		 client->adapter->nr, client->addr,
-		 dev_name(&ACPI_COMPANION(&client->dev)->dev));
 
 	/* allocate sensor device & init sub device */
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
@@ -2276,21 +2259,20 @@ static int imx_probe(struct i2c_client *client,
 
 	v4l2_i2c_subdev_init(&(dev->sd), client, &imx_ops);
 
-	if (client->dev.platform_data) {
-		ret = imx_s_config(&dev->sd, client->irq,
-				       client->dev.platform_data);
-		if (ret)
-			goto out_free;
-	} else if (ACPI_COMPANION(&client->dev)) {
-		// If no SFI firmware, grab the platform struct
-		// directly and configure via ACPI/EFIvars instead.
-		//
-		// Works only with IMX134 for now.
-		ret = imx_s_config(&dev->sd, client->irq,
-				   imx134_platform_data(NULL));
-		if (ret)
-			goto out_free;
+	pdata = client->dev.platform_data;
+	if (!pdata || ACPI_COMPANION(&client->dev))
+		pdata = imx134_platform_data(NULL);
+
+	if (!pdata) {
+		v4l2_err(client, "No imx platform data\n");
+		ret = -EINVAL;
+		goto out_free;
 	}
+
+	ret = imx_s_config(&dev->sd, client->irq, pdata);
+	if (ret)
+		goto out_free;
+
 	imx_info = v4l2_get_subdev_hostdata(&dev->sd);
 
 	/*
@@ -2320,8 +2302,8 @@ static int imx_probe(struct i2c_client *client,
 
 	/* Load the Noise reduction, Dead pixel registers from cpf file*/
 	/* FIXME: msr_file_name needs to come from ACPI/EFI config too */
-	if (dev->platform_data->msr_file_name != NULL)
-		msr_file_name = dev->platform_data->msr_file_name();
+	if (pdata->msr_file_name != NULL)
+		msr_file_name = pdata->msr_file_name();
 	if (msr_file_name) {
 		ret = load_msr_list(client, msr_file_name, &dev->fw);
 		if (ret) {
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
index d368897..bd7fe98 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
@@ -37,6 +37,7 @@
 #include <media/v4l2-chip-ident.h>
 #include <linux/io.h>
 #include <linux/acpi.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #include "ov2722.h"
 
@@ -1375,21 +1376,6 @@ static int __ov2722_init_ctrl_handler(struct ov2722_device *dev)
 	return 0;
 }
 
-static int getvar_int(struct device *dev, const char *var, int def)
-{
-	char val[16];
-	size_t len = sizeof(val);
-	long result;
-	int ret;
-
-	ret = gmin_get_config_var(dev, var, val, &len);
-	val[len] = 0;
-	if (!ret)
-		ret = kstrtol(val, 0, &result);
-
-	return ret ? def : result;
-}
-
 static int ov2722_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
@@ -1432,7 +1418,7 @@ static int ov2722_probe(struct i2c_client *client,
 	if (ret)
 		ov2722_remove(client);
 
-	ret = atomisp_register_i2c_module(&dev->sd, client,
+	ret = atomisp_register_i2c_module(&dev->sd, client, ovpdev,
 					  getvar_int(&client->dev, "CamType",
 						     RAW_CAMERA),
 					  getvar_int(&client->dev, "CsiPort",
diff --git a/include/linux/atomisp_gmin_platform.h b/include/linux/atomisp_gmin_platform.h
index 1c89a08..5d74743 100644
--- a/include/linux/atomisp_gmin_platform.h
+++ b/include/linux/atomisp_gmin_platform.h
@@ -1,7 +1,7 @@
 /*
- * Support for Medifield PNW Camera Imaging ISP subsystem.
+ * Support for Intel MID SoC Camera Imaging ISP subsystem.
  *
- * Copyright (c) 2010 Intel Corporation. All Rights Reserved.
+ * Copyright (c) 2014 Intel Corporation. All Rights Reserved.
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License version
@@ -15,11 +15,14 @@
 #ifndef ATOMISP_GMIN_PLATFORM_H_
 #define ATOMISP_GMIN_PLATFORM_H_
 
+#include <linux/atomisp_platform.h>
+
 const struct atomisp_camera_caps *atomisp_get_default_camera_caps(void);
 const struct atomisp_platform_data *atomisp_get_platform_data(void);
 const struct camera_af_platform_data *camera_get_af_platform_data(void);
 int atomisp_register_i2c_module(struct v4l2_subdev *subdev,
-				struct i2c_client *client,
+                                struct i2c_client *client,
+                                struct camera_sensor_platform_data *plat_data,
                                 enum intel_v4l2_subdev_type type,
                                 enum atomisp_camera_port port);
 struct v4l2_subdev *atomisp_gmin_find_subdev(struct i2c_adapter *adapter,
@@ -28,4 +31,5 @@ int gmin_get_config_var(struct device *dev, const char *var, char *out, size_t *
 int getvar_int(struct device *dev, const char *var, int def);
 int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
 		      u32 lanes, u32 format, u32 bayer_order, int flag);
+
 #endif
-- 
1.9.3

