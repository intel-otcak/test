From 4cf4dd179a63e4ce0c907a3ba45325da0461b86e Mon Sep 17 00:00:00 2001
Message-Id: <4cf4dd179a63e4ce0c907a3ba45325da0461b86e.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Arun R Murthy <arun.r.murthy@intel.com>
Date: Wed, 28 Jan 2015 22:32:45 +0530
Subject: [PATCH 57/95] MUST_REBASE [VPG]: adf/intel/vlv: update wm, arbiter
 and PFI credits

Update wm, arbiter based on maxfifo and DDR DVFS enable status.
Also update the PFI credits.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5594
Change-Id: I4f3e16152a9f2c1d76ede752e5b27237e94129b9
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
Signed-off-by: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
---
 .../video/adf/intel/core/common/dp/gen_dp_pipe.c   |    3 +-
 .../video/adf/intel/core/common/dsi/gen_dsi_pipe.c |    2 +-
 .../adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c |    2 +-
 drivers/video/adf/intel/core/vlv/Makefile          |    2 +-
 drivers/video/adf/intel/core/vlv/vlv_pipeline.c    |    4 +
 drivers/video/adf/intel/core/vlv/vlv_pm.c          |  167 ++++++++++++++++++--
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |   11 ++
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |   33 +++-
 drivers/video/adf/intel/include/core/vlv/vlv_pm.h  |    4 +-
 9 files changed, 207 insertions(+), 21 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
index 6e09e58..abd49f9 100644
--- a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
+++ b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
@@ -395,8 +395,7 @@ static void dp_pipe_on_post(struct intel_pipe *pipe)
 	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
 	struct intel_dc_config *intel_config = &vlv_pipeline->config->base;
 
-	vlv_pm_on_post(intel_config);
-
+	vlv_pm_on_post(intel_config, pipe);
 }
 
 static void dp_pipe_pre_validate(struct intel_pipe *pipe,
diff --git a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
index 7eb9f4f..c4dd5a0 100644
--- a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
+++ b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
@@ -427,7 +427,7 @@ static void dsi_on_post(struct intel_pipe *pipe)
 	if (dsi_pipe->ops.on_post)
 		dsi_pipe->ops.on_post(dsi_pipe);
 
-	vlv_pm_on_post(intel_config);
+	vlv_pm_on_post(intel_config, pipe);
 }
 
 static void dsi_pre_validate(struct intel_pipe *pipe,
diff --git a/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
index 55c93219..46b41c4 100644
--- a/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
+++ b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_pipe_ops.c
@@ -209,7 +209,7 @@ void hdmi_on_post(struct intel_pipe *pipe)
 	if (hdmi_pipe->ops.on_post)
 		hdmi_pipe->ops.on_post(hdmi_pipe);
 
-	vlv_pm_on_post(intel_config);
+	vlv_pm_on_post(intel_config, pipe);
 }
 
 /* Core modeset */
diff --git a/drivers/video/adf/intel/core/vlv/Makefile b/drivers/video/adf/intel/core/vlv/Makefile
index fe0f05b..5c2eb15 100644
--- a/drivers/video/adf/intel/core/vlv/Makefile
+++ b/drivers/video/adf/intel/core/vlv/Makefile
@@ -1,6 +1,6 @@
 # Makefile for intel vlv display driver
 
-ccflags-y := -Idrivers/staging/ -Iinclude/adf -Iinclude/uapi/adf -Idrivers/video/adf/intel/include -Werror
+ccflags-y := -Iarch/ia64/ -Idrivers/staging/ -Iinclude/adf -Iinclude/uapi/adf -Idrivers/video/adf/intel/include -Werror
 
 obj-y := vlv_dc_config.o \
 	vlv_pri_plane.o \
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
index cbb97a3..c323886 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
@@ -262,6 +262,7 @@ u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 		struct drm_mode_modeinfo *mode)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
+	struct intel_dc_config *intel_config = &disp->config->base;
 	struct vlv_pri_plane *pplane = &disp->pplane;
 	struct vlv_pipe *pipe = &disp->pipe;
 	struct vlv_plane_params plane_params;
@@ -344,6 +345,9 @@ u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 	if (err)
 		pr_err("ADF: %s: program pipe failed\n", __func__);
 
+	/* program PFI credits before pipe is enabled */
+	vlv_pm_update_pfi_credits(intel_config);
+
 	/* pipe enable */
 	err = vlv_pipe_enable(pipe, mode);
 	if (err)
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pm.c b/drivers/video/adf/intel/core/vlv/vlv_pm.c
index f6d0c3f..d3847fd 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pm.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pm.c
@@ -16,10 +16,138 @@
 #include <core/vlv/vlv_dc_regs.h>
 #include <core/vlv/vlv_dc_config.h>
 #include <core/vlv/vlv_pm.h>
+#include <linux/bitops.h>
 
-void vlv_pm_on_post(struct intel_dc_config *intel_config)
+#define PRI_SA	(0x1 << PRIMARY_PLANE | 0x1 << SPRITE_A)
+#define PRI_SB	(0x1 << PRIMARY_PLANE | 0x1 << SPRITE_B)
+#define SA_SB	(0x1 << SPRITE_A | 0x1 << SPRITE_B)
+
+static void vlv_pm_ddr_dvfs_update(struct intel_dc_config *intel_config,
+		struct intel_pipeline *intel_pipeline, bool enable)
+{
+	struct vlv_dc_config *config = to_vlv_dc_config(intel_config);
+
+	if (enable && !config->status.ddr_dvfs_enabled) {
+		vlv_punit_write(DDR_SETUP2, (vlv_punit_read(DDR_SETUP2) &
+				~(FORCE_DDR_LOW_FREQ | FORCE_DDR_HIGH_FREQ |
+							DOOR_BELL)));
+		vlv_wait_for_vblank(intel_pipeline);
+		config->status.ddr_dvfs_enabled = true;
+	} else {
+		if (!config->status.ddr_dvfs_enabled)
+			return;
+		vlv_punit_write(DDR_SETUP2, (vlv_punit_read(DDR_SETUP2) |
+					(FORCE_DDR_LOW_FREQ |
+					FORCE_DDR_HIGH_FREQ | DOOR_BELL)));
+		vlv_wait_for_vblank(intel_pipeline);
+		config->status.ddr_dvfs_enabled = true;
+	}
+}
+
+#ifdef DYNAMIC_WM
+static u32 vlv_pm_calculate_wm(struct intel_pipe *pipe)
+{
+	struct drm_mode_modeinfo mode;
+	u32 line_time = 0, buffer_wm = 0;
+	int latency = 20000;
+	int bpp = 4;
+
+	pipe->ops->get_current_mode(pipe, &mode);
+
+	line_time = mode.htotal / mode.clock / 1000;
+	buffer_wm = ((latency / line_time / 1000) + 1) * mode.hdisplay * bpp;
+
+	return buffer_wm;
+}
+
+static void vlv_pm_update_arbiter(struct intel_dc_config *intel_config,
+		struct intel_pipe *pipe)
+{
+	struct vlv_dc_config *config = to_vlv_dc_config(intel_config);
+	u32 pipe_plane_stat = config->status.pipe_plane_status;
+	u32 plane_stat = ((pipe_plane_stat & (0xF << (4 * pipe->base.idx)))
+						>> (4 * pipe->base.idx));
+	u16 dsparb = 0;
+	u8 dsparb2 = 0;
+
+	if (hweight32(plane_stat) == 1) {
+		/* Allocate the entire fifo to the plane that is enabled */
+		dsparb |=  (0xFFFF << (ffs(plane_stat) - 1));
+		dsparb2 |= (0x1 << ((ffs(plane_stat) - 1) * 3));
+		vlv_pm_calculate_wm(pipe);
+	} else if (hweight32(plane_stat) == 3) {
+		/* all 3 planes enabled, fifo allocation 40:40:20 */
+		dsparb |= DSPARB_20_40_40;
+		dsparb2 |= DSPARB2_20_40_40;
+	} else if (hweight32(plane_stat) == 2) {
+		/* 2 planes, enable fifo allocation 50:50 */
+		if ((plane_stat & PRI_SA) == PRI_SA) {
+			dsparb |= DSPARB_PRI50_SA50;
+			dsparb2 |= DSPARB2_PRI50_SA50;
+		} else if ((plane_stat & PRI_SB) == PRI_SB) {
+			dsparb |= DSPARB_PRI50_SB50;
+			dsparb2 |= DSPARB2_PRI50_SB50;
+		} else {
+			dsparb |= DSPARB_SA50_SB50;
+			dsparb2 |= DSPARB2_SA50_SB50;
+		}
+	} else {
+		pr_err("ADF: %s: Invalid pipe\n", __func__);
+	}
+
+	switch (pipe->base.idx) {
+	case PIPE_A:
+		REG_WRITE_BITS(DSPARB, dsparb, DSPARB_PIPEA_MASK);
+		REG_WRITE_BITS(DSPARB2, dsparb2, DSPARB2_PIPEA_MASK);
+		break;
+	case PIPE_B:
+		REG_WRITE_BITS(DSPARB, (u32)(dsparb << 15),
+						DSPARB_PIPEB_MASK);
+		REG_WRITE_BITS(DSPARB2, (u32)(dsparb2 << 7),
+						DSPARB2_PIPEB_MASK);
+		break;
+	case PIPE_C:
+		REG_WRITE_BITS(DSPARB3, dsparb, DSPARB3_PIPEC_MASK);
+		REG_WRITE_BITS(DSPARB2, (u32)(dsparb2 << 15),
+						DSPARB2_PIPEC_MASK);
+		break;
+	}
+}
+#endif
+
+void vlv_pm_update_pfi_credits(struct intel_dc_config *intel_config)
+{
+	u32 gci_control = 0, gcicontrol = 0, val = 0;
+
+	/* PFI Credits */
+	val = REG_READ(CZCLK_CDCLK_FREQ_RATIO);
+	gcicontrol = gci_control = REG_READ(GCI_CONTROL);
+	gci_control &= ~(PFI_CREDIT_MASK | PFI_CREDIT_RESEND_TO_SSA);
+	if ((val & CDCLK_FREQ_MASK) > (val & CZCLK_FREQ_MASK)) {
+		if (intel_config->id == gen_cherryview)
+			gci_control |= (PFI_CREDIT63 |
+						PFI_CREDIT_RESEND_TO_SSA);
+		else
+			gci_control |= (PFI_CREDIT15 |
+						PFI_CREDIT_RESEND_TO_SSA);
+	} else {
+		if (intel_config->id == gen_cherryview)
+			gci_control |= (PFI_CREDIT12 |
+						PFI_CREDIT_RESEND_TO_SSA);
+		else
+			gci_control |= (PFI_CREDIT8 |
+						PFI_CREDIT_RESEND_TO_SSA);
+	}
+	if (gcicontrol != gci_control)
+		REG_WRITE(GCI_CONTROL, gci_control);
+
+}
+
+void vlv_pm_on_post(struct intel_dc_config *intel_config,
+		struct intel_pipe *pipe)
 {
 	struct vlv_dc_config *config = to_vlv_dc_config(intel_config);
+	struct vlv_pipeline *pipeline = to_vlv_pipeline(pipe->pipeline);
 	u32 pipe_plane_stat = config->status.pipe_plane_status;
 	u32 plane_stat = pipe_plane_stat & 0x01FF;
 	u32 val = 0;
@@ -36,6 +164,15 @@ void vlv_pm_on_post(struct intel_dc_config *intel_config)
 			if (pipe_plane_stat & (1 << (31 - PIPE_C)))
 				return;
 		}
+#ifdef DYNAMIC_WM
+		vlv_pm_update_arbiter(intel_config, pipe);
+#else
+		vlv_pm_program_values(&pipeline->pm, 0);
+#endif
+		if (!config->status.ddr_dvfs_enabled &&
+				intel_config->id == gen_cherryview)
+			vlv_pm_ddr_dvfs_update(intel_config,
+						pipe->pipeline, true);
 		REG_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
 		if  (intel_config->id == gen_cherryview) {
 			val = vlv_punit_read(CHV_DPASSC);
@@ -69,6 +206,11 @@ void vlv_pm_pre_validate(struct intel_dc_config *intel_config,
 	/* If we are moving to multiple plane then disable maxfifo */
 	if (((planes_enabled > 1) || !(single_pipe_enabled(pipe_stat))) &&
 			config->status.maxfifo_enabled) {
+		/* Disable DDR DVFS */
+		if (config->status.ddr_dvfs_enabled &&
+				intel_config->id == gen_cherryview)
+			vlv_pm_ddr_dvfs_update(intel_config, &pipeline->base,
+								false);
 		REG_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
 		if  (intel_config->id == gen_cherryview) {
 			val = vlv_punit_read(CHV_DPASSC);
@@ -80,6 +222,11 @@ void vlv_pm_pre_validate(struct intel_dc_config *intel_config,
 		pipeline->status.wait_vblank = true;
 		pipeline->status.vsync_counter =
 				pipe->ops->get_vsync_counter(pipe, 0);
+#ifdef DYNAMIC_WM
+		vlv_pm_update_arbiter(intel_config, pipe);
+#else
+		vlv_pm_program_values(&pipeline->pm, 0);
+#endif
 	}
 }
 
@@ -170,6 +317,7 @@ u32 vlv_pm_save_values(struct vlv_pm *pm, bool pri_plane,
 
 u32 vlv_pm_flush_values(struct vlv_pm *pm, u32 events)
 {
+
 	if (pm->sp2_value && (events & INTEL_PIPE_EVENT_SPRITE2_FLIP)) {
 		REG_WRITE_BITS(pm->offset, pm->sp2_value, DDL_SPRITEB_MASK);
 		pm->sp2_value = 0;
@@ -188,18 +336,6 @@ u32 vlv_pm_flush_values(struct vlv_pm *pm, u32 events)
 	return 0;
 }
 
-static void vlv_pm_update_pfi(struct vlv_pm *pm)
-{
-	/* Trickle feed is disabled by default */
-	REG_WRITE(MI_ARB_VLV, 0x00);
-	/* program the pfi credits, first disable and then program */
-	if (REG_READ(GCI_CONTROL) != 0x78004000) {
-		REG_WRITE(GCI_CONTROL, 0x00004000);
-		REG_WRITE(GCI_CONTROL, 0x78004000);
-	}
-
-}
-
 u32 vlv_pm_program_values(struct vlv_pm *pm, int num_planes)
 {
 	/* FIXME: udpate logic to be based on num_planes enabled */
@@ -228,8 +364,11 @@ u32 vlv_pm_program_values(struct vlv_pm *pm, int num_planes)
 			(DSPFW7_SPRITEC1_VAL << DSPFW7_SPRITEC1_SHIFT) |
 			DSPFW7_SPRITEC_VAL);
 	REG_WRITE(DSPARB, VLV_DEFAULT_DSPARB);
+	REG_WRITE(DSPARB2, VLV_DEFAULT_DSPARB2);
+	REG_WRITE(DSPARB3, VLV_DEFAULT_DSPARB3);
 
-	vlv_pm_update_pfi(pm);
+	/* Trickle feed is disabled by default */
+	REG_WRITE(MI_ARB_VLV, 0x00);
 	return 0;
 }
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index 161d138..8fde104 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -182,8 +182,19 @@ struct vlv_pipeline {
 	struct vlv_dc_config *config;
 };
 
+/**
+ * vlv_global_status - global variables or status flags
+ * @maxfifo_enabled - maxfifo enable status
+ * @ddr_dvfs_enabled - DDR DVFS enable status
+ * @pipe_plane_status - pipe and plane enable status
+ * bits 31-28 for pipe A, pipe B, pipe C,
+ * bits 0-3 for Plane A, Sprite A, Sprite B, cursor A
+ * bits 4-7 for Plane B, Sprite C, Sprite D, cursor B
+ * bits 8-11 for Plane C, Sprite E, Sprite F, cursor C
+ */
 struct vlv_global_status {
 	bool maxfifo_enabled;
+	bool ddr_dvfs_enabled;
 	u32 pipe_plane_status;
 };
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index c9ce2f3..0757d98 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -1717,6 +1717,13 @@ extern int chv_cursor_offsets[];
 #define GMBUSFREQ_VLV		(VLV_DISPLAY_BASE + 0x6510)
 
 #define GCI_CONTROL		(VLV_DISPLAY_BASE + 0x650c)
+#define PFI_CREDIT_RESEND_TO_SSA		(0x1 << 27)
+#define PFI_CREDIT_MASK				(0xF << 28)
+#define PFI_CREDIT63				(0x9 << 28)
+#define PFI_CREDIT15				(0x7 << 28)
+#define PFI_CREDIT12				(0x4 << 28)
+#define PFI_CREDIT9				(0x1 << 28)
+#define PFI_CREDIT8				(0x0 << 28)
 
 /*
  * Palette regs
@@ -3602,13 +3609,33 @@ extern int chv_cursor_offsets[];
 #define   DPINVGTT_STATUS_MASK			0xff
 
 #define DSPARB			(VLV_DISPLAY_BASE + 0x70030)
+#define DSPARB_PIPEA_MASK	0xff
+#define DSPARB_PIPEB_MASK	(0xff<<15)
+#define DSPARB2			(VLV_DISPLAY_BASE + 0x70060)
+#define DSPARB2_PIPEA_MASK	0xf
+#define DSPARB2_PIPEB_MASK	(0xf<<7)
+#define DSPARB2_PIPEC_MASK	(0xf<<15)
+#define DSPARB3			(VLV_DISPLAY_BASE + 0x7006c)
+#define DSPARB3_PIPEC_MASK	0xff
 #define   DSPARB_CSTART_MASK	(0x7f << 7)
 #define   DSPARB_CSTART_SHIFT	7
 #define   DSPARB_BSTART_MASK	(0x7f)
 #define   DSPARB_BSTART_SHIFT	0
 #define   DSPARB_BEND_SHIFT	9 /* on 855 */
 #define   DSPARB_AEND_SHIFT	0
-#define	VLV_DEFAULT_DSPARB	0xc080c080
+#define	VLV_DEFAULT_DSPARB	0x80008000
+#define VLV_DEFAULT_DSPARB2	0x111111
+#define VLV_DEFAULT_DSPARB3	0x8000
+#define DSPARB_20_40_40		0x80c0
+#define DSPARB2_20_40_40	0x10
+#define DSPARB_PRI50_SA50	0xff00
+#define DSPARB2_PRI50_SA50	0x11
+#define DSPARB_PRI50_SA50	0xff00
+#define DSPARB2_PRI50_SA50	0x11
+#define DSPARB_PRI50_SB50	0x0000
+#define DSPARB2_PRI50_SB50	0x11
+#define DSPARB_SA50_SB50	0x0000
+#define DSPARB2_SA50_SB50	0x10
 
 #define DSPFW1			(VLV_DISPLAY_BASE + 0x70034)
 #define   DSPFW_SR_SHIFT	23
@@ -5439,6 +5466,10 @@ extern int chv_cursor_offsets[];
 
 /* Punit register */
 #define CHV_DPASSC				0x36
+#define DDR_SETUP2				0x139
+#define	FORCE_DDR_LOW_FREQ		(0x1 << 1)
+#define FORCE_DDR_HIGH_FREQ		(0x1 << 0)
+#define DOOR_BELL			(0x1 << 8)
 /* Bit 6 of DPASSC indicates maxfifo enabling bit */
 #define CHV_PW_MAXFIFO_MASK		0x40
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pm.h b/drivers/video/adf/intel/include/core/vlv/vlv_pm.h
index e0cf571..c9dbbe6 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pm.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pm.h
@@ -32,12 +32,14 @@ u32 vlv_pm_save_values(struct vlv_pm *pm, bool pri_plane,
 		bool sp1_plane, bool sp2_plane, u32 val);
 u32 vlv_pm_program_values(struct vlv_pm *pm, int num_planes);
 u32 vlv_pm_flush_values(struct vlv_pm *pm, u32 event);
-void vlv_pm_on_post(struct intel_dc_config *intel_config);
+void vlv_pm_on_post(struct intel_dc_config *intel_config,
+		struct intel_pipe *pipe);
 void vlv_pm_pre_validate(struct intel_dc_config *intel_config,
 		struct intel_adf_post_custom_data *custom,
 		struct intel_pipeline *intel_pipeline, struct intel_pipe *pipe);
 void vlv_pm_pre_post(struct intel_dc_config *intel_config,
 		struct intel_pipeline *intel_pipeline, struct intel_pipe *pipe);
 bool vlv_calc_ddl(int clock, int pixel_size, int *prec_multi, int *ddl);
+void vlv_pm_update_pfi_credits(struct intel_dc_config *intel_config);
 
 #endif /*_VLV_WATERMARK_H_*/
-- 
1.7.9.5

