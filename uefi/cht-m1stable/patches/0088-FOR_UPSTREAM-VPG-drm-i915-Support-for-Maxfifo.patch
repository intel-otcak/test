From b756fc7902171ae0c32b94e89cae961ed7839425 Mon Sep 17 00:00:00 2001
Message-Id: <b756fc7902171ae0c32b94e89cae961ed7839425.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Sat, 5 Jul 2014 00:45:39 +0530
Subject: [PATCH 088/312] FOR_UPSTREAM [VPG]: drm/i915: Support for Maxfifo

The following changes have been ported:

	drm/i915: add support for maxfifo
	(OriginalChangeID - If0362d4f838104c75247dd03692c8696d8727a48)
	Description: Enable max_fifo feature when a single plane is enabled. This ensures
	that the entire fifo is allocated for the plane that is currently
	enabled. Disable max_fifo when multiple planes are enabled.

	drm/i915: drm/i915: disable maxfifo before enabling z-order
	(OriginalChangeID - Ide57d8f98ad20c3d6e6729d8614174ceeb65f76c)
	Description: In a single plane mode, maxfifo is enabled. When coming out of maxfifo
	mode, i.e enabling multiple planes, first Z-order is enabled and then
	followed by enabling planes and disabling maxfifo. This patch take care
	of disabling maxfifo before enabling z-order/enabling planes to ensure
	we come back to the normal allocation of the FIFO, wherein on enabling
	plane they will have their allocated FIFO ready for usage.

Issue: GMIN-1462
Change-Id: Id82a064c57a756c2554d8f3c79ef442e55a51971
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |    1 +
 drivers/gpu/drm/i915/intel_display.c |    6 ++++++
 drivers/gpu/drm/i915/intel_sprite.c  |   16 ++++++++++++++++
 3 files changed, 23 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 03f9d21..b3d380e 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1496,6 +1496,7 @@ struct drm_i915_private {
 	} dpst;
 
 	bool is_first_modeset;
+	bool maxfifo_enabled;
 
 	/* PCH chipset type */
 	enum intel_pch pch_type;
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 26646b1..5ccf1d4 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -4448,6 +4448,12 @@ static void intel_crtc_disable_planes(struct drm_crtc *crtc)
 
 	intel_crtc_dpms_overlay(intel_crtc, false);
 	intel_crtc_update_cursor(crtc, false);
+
+	if (dev_priv->maxfifo_enabled) {
+		I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+		dev_priv->maxfifo_enabled = false;
+	}
+
 	intel_disable_planes(crtc);
 	intel_disable_primary_hw_plane(dev_priv, plane, pipe);
 }
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 908e574..b179291 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -320,10 +320,20 @@ int i915_set_plane_zorder(struct drm_device *dev, void *data,
 
 	/* Clear the older Z-order */
 	val = I915_READ(SPCNTR(pipe, 0));
+	if (dev_priv->maxfifo_enabled && !(val & SPRITE_ZORDER_ENABLE)) {
+		I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+		dev_priv->maxfifo_enabled = false;
+		intel_wait_for_vblank(dev, pipe);
+	}
 	val &= ~(SPRITE_FORCE_BOTTOM | SPRITE_ZORDER_ENABLE);
 	I915_WRITE(SPCNTR(pipe, 0), val);
 
 	val = I915_READ(SPCNTR(pipe, 1));
+	if (dev_priv->maxfifo_enabled && !(val & SPRITE_ZORDER_ENABLE)) {
+		I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+		dev_priv->maxfifo_enabled = false;
+		intel_wait_for_vblank(dev, pipe);
+	}
 	val &= ~(SPRITE_FORCE_BOTTOM | SPRITE_ZORDER_ENABLE);
 	I915_WRITE(SPCNTR(pipe, 1), val);
 
@@ -1539,6 +1549,7 @@ static int
 intel_disable_plane(struct drm_plane *plane)
 {
 	struct drm_device *dev = plane->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_plane *intel_plane = to_intel_plane(plane);
 	struct intel_crtc *intel_crtc;
 	struct intel_plane *intel_plane_wq;
@@ -1557,6 +1568,11 @@ intel_disable_plane(struct drm_plane *plane)
 	/* To support deffered plane disable */
 	INIT_WORK(&intel_plane_wq->work, intel_disable_plane_unpin_work_fn);
 
+	if (dev_priv->maxfifo_enabled) {
+		I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+		dev_priv->maxfifo_enabled = false;
+	}
+
 	if (intel_crtc->active) {
 		bool primary_was_enabled = intel_crtc->primary_enabled;
 		intel_crtc->primary_enabled = true;
-- 
1.7.9.5

