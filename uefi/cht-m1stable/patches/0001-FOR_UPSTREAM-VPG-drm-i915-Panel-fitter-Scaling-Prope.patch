From 664d811e547fec51f0453c5acda92012de288ecd Mon Sep 17 00:00:00 2001
Message-Id: <664d811e547fec51f0453c5acda92012de288ecd.1417465742.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Mon, 21 Jul 2014 21:52:40 +0530
Subject: [PATCH 01/11] FOR_UPSTREAM [VPG]: drm/i915: Panel fitter/Scaling
 Property added

Patch adds Panel fitter/Scaling property support to i915

Issue: GMINL-3538
Change-Id: Ie5a93f5ad4f26bfa00e5eed329e0146bea799a1f
Signed-off-by: Pallavi <pallavi.g@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
Signed-off-by: Sangani, Suryanarayana R <suryanarayana.r.sangani@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |    4 +-
 drivers/gpu/drm/i915/i915_reg.h      |   11 +++--
 drivers/gpu/drm/i915/intel_display.c |   33 +++++++++++++-
 drivers/gpu/drm/i915/intel_dp.c      |   24 ++++++++++
 drivers/gpu/drm/i915/intel_drv.h     |   11 ++++-
 drivers/gpu/drm/i915/intel_dsi.c     |   83 ++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_hdmi.c    |   69 +++++++++++++---------------
 drivers/gpu/drm/i915/intel_modes.c   |   30 ++++++++++--
 drivers/gpu/drm/i915/intel_panel.c   |   44 ++++++++++++++++--
 drivers/gpu/drm/i915/intel_sprite.c  |   26 ++++++++++-
 include/drm/drm_crtc.h               |    1 +
 11 files changed, 283 insertions(+), 53 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 5a1d5af..e1c0e94 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -599,7 +599,7 @@ struct intel_device_info {
 #undef DEFINE_FLAG
 #undef SEP_SEMICOLON
 
-enum hdmi_panel_fitter {
+enum panel_fitter {
 	PFIT_OFF,
 	AUTOSCALE,
 	PILLARBOX,
@@ -1582,6 +1582,7 @@ struct drm_i915_private {
 	struct i915_drrs drrs;
 	struct intel_opregion opregion;
 	struct intel_vbt_data vbt;
+	bool scaling_reqd;
 
 	struct kobject memtrack_kobj;
 	/* overlay */
@@ -1769,6 +1770,7 @@ struct drm_i915_private {
 	struct drm_property *broadcast_rgb_property;
 	struct drm_property *force_audio_property;
 	struct drm_property *force_pfit_property;
+	struct drm_property *scaling_src_size_property;
 
 	uint32_t hw_context_size;
 	struct list_head context_list;
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 8763560..0f71bd2 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -2982,8 +2982,9 @@ enum punit_power_well {
 #define PP_DIVISOR	0x61210
 
 /* Panel fitting */
-#define PFIT_CONTROL	(dev_priv->info.display_mmio_offset + 0x61230)
-#define   PFIT_ENABLE		(1 << 31)
+#define	PFIT_CONTROL	(dev_priv->info.display_mmio_offset + 0x61230)
+#define	PFIT_ENABLE		(1 << 31)
+#define	  PFIT_DISABLE	(0 << 31)
 #define   PFIT_PIPE_MASK	(3 << 29)
 #define   PFIT_PIPE_SHIFT	29
 #define   VERT_INTERP_DISABLE	(0 << 10)
@@ -3000,7 +3001,11 @@ enum punit_power_well {
 #define   PFIT_SCALING_PROGRAMMED (1 << 26)
 #define   PFIT_SCALING_PILLAR	(2 << 26)
 #define   PFIT_SCALING_LETTER	(3 << 26)
-#define PFIT_PGM_RATIOS	(dev_priv->info.display_mmio_offset + 0x61234)
+#define	MASK_PFIT_SCALING_MODE	(0xe3ffffff)
+#define	PFIT_PGM_RATIOS	(dev_priv->info.display_mmio_offset + 0x61234)
+#define	PFIT_SIZE_LIMIT	2000
+#define	SCALING_SRCSIZE_SHIFT	16
+#define	SCALING_SRCSIZE_MASK	0xffff
 /* Pre-965 */
 #define		PFIT_VERT_SCALE_SHIFT		20
 #define		PFIT_VERT_SCALE_MASK		0xfff00000
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index b47bc7b..040111c 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2576,6 +2576,7 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 	u32 dspcntr;
 	u32 reg;
 	int pixel_size;
+	struct drm_display_mode *mode = &intel_crtc->config.requested_mode;
 
 	pixel_size = drm_format_plane_cpp(fb->pixel_format, 0);
 	intel_fb = to_intel_framebuffer(fb);
@@ -2671,6 +2672,24 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 	else
 		dspcntr &= ~DISPPLANE_180_ROTATION_ENABLE;
 
+	if (IS_VALLEYVIEW(dev)) {
+		/* if panel fitter is enabled program the input src size */
+		if (intel_crtc->scaling_src_size &&
+			intel_crtc->config.gmch_pfit.control) {
+			I915_WRITE(PFIT_CONTROL,
+				intel_crtc->config.gmch_pfit.control);
+			I915_WRITE(PIPESRC(pipe),
+				intel_crtc->scaling_src_size);
+			intel_crtc->pfit_en_status = true;
+		} else if (intel_crtc->pfit_en_status) {
+			I915_WRITE(PIPESRC(pipe),
+				((mode->hdisplay - 1) <<
+				SCALING_SRCSIZE_SHIFT) | (mode->vdisplay - 1));
+			I915_WRITE(PFIT_CONTROL, 0);
+			intel_crtc->pfit_en_status = false;
+		}
+	}
+
 	I915_WRITE(reg, dspcntr);
 
 	linear_offset = y * fb->pitches[0] + x * (fb->bits_per_pixel / 8);
@@ -4791,7 +4810,8 @@ static void i9xx_pfit_enable(struct intel_crtc *crtc)
 	 * The panel fitter should only be adjusted whilst the pipe is disabled,
 	 * according to register description and PRM.
 	 */
-	WARN_ON(I915_READ(PFIT_CONTROL) & PFIT_ENABLE);
+	if (I915_READ(PFIT_CONTROL) & PFIT_ENABLE)
+		return;
 	assert_pipe_disabled(dev_priv, crtc->pipe);
 
 	I915_WRITE(PFIT_PGM_RATIOS, pipe_config->gmch_pfit.pgm_ratios);
@@ -4800,6 +4820,7 @@ static void i9xx_pfit_enable(struct intel_crtc *crtc)
 	/* Border color in case we don't scale up to the full screen. Black by
 	 * default, change to something else for debugging. */
 	I915_WRITE(BCLRPAT(crtc->pipe), 0);
+	crtc->pfit_en_status = true;
 }
 
 enum intel_display_power_domain
@@ -5362,6 +5383,7 @@ static void i9xx_pfit_disable(struct intel_crtc *crtc)
 	DRM_DEBUG_DRIVER("disabling pfit, current: 0x%08x\n",
 			 I915_READ(PFIT_CONTROL));
 	I915_WRITE(PFIT_CONTROL, 0);
+	crtc->pfit_en_status = false;
 }
 
 static void i9xx_crtc_disable(struct drm_crtc *crtc)
@@ -6481,7 +6503,11 @@ static void intel_set_pipe_timings(struct intel_crtc *intel_crtc)
 	/* pipesrc controls the size that is scaled from, which should
 	 * always be the user's requested size.
 	 */
-	I915_WRITE(PIPESRC(pipe),
+	if (IS_VALLEYVIEW(dev) && intel_crtc->scaling_src_size &&
+			intel_crtc->config.gmch_pfit.control)
+		I915_WRITE(PIPESRC(pipe), intel_crtc->scaling_src_size);
+	else
+		I915_WRITE(PIPESRC(pipe),
 		   ((intel_crtc->config.pipe_src_w - 1) << 16) |
 		   (intel_crtc->config.pipe_src_h - 1));
 
@@ -11988,6 +12014,9 @@ static void intel_crtc_init(struct drm_device *dev, int pipe)
 	dev_priv->pipe_to_crtc_mapping[intel_crtc->pipe] = &intel_crtc->base;
 
 	drm_crtc_helper_add(&intel_crtc->base, &intel_helper_funcs);
+	intel_crtc->base.panning_en = false;
+	intel_crtc->scaling_src_size = 0;
+	intel_crtc->pfit_en_status = false;
 	intel_crtc->sprite_unpin_work = NULL;
 
 	/*
diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index 2810636..011881e 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -4086,6 +4086,7 @@ intel_dp_set_property(struct drm_connector *connector,
 	struct intel_connector *intel_connector = to_intel_connector(connector);
 	struct intel_encoder *intel_encoder = intel_attached_encoder(connector);
 	struct intel_dp *intel_dp = enc_to_intel_dp(&intel_encoder->base);
+	struct intel_crtc *intel_crtc = intel_encoder->new_crtc;
 	int ret;
 
 	ret = drm_object_property_set_value(&connector->base, property, val);
@@ -4156,6 +4157,26 @@ intel_dp_set_property(struct drm_connector *connector,
 		goto done;
 	}
 
+	if (property == dev_priv->force_pfit_property) {
+		if (intel_connector->panel.fitting_mode == val)
+			return 0;
+		intel_connector->panel.fitting_mode = val;
+
+		if (IS_VALLEYVIEW(dev_priv->dev)) {
+			intel_gmch_panel_fitting(intel_crtc,
+				&intel_crtc->config,
+				intel_connector->panel.fitting_mode);
+			return 0;
+		} else
+			goto done;
+	}
+
+	if (property == dev_priv->scaling_src_size_property) {
+		intel_crtc->scaling_src_size = val;
+		DRM_DEBUG_DRIVER("src size = %u\n",
+			intel_crtc->scaling_src_size);
+		return 0;
+	}
 	return -EINVAL;
 
 done:
@@ -4301,6 +4322,8 @@ intel_dp_add_properties(struct intel_dp *intel_dp, struct drm_connector *connect
 
 	intel_attach_force_audio_property(connector);
 	intel_attach_broadcast_rgb_property(connector);
+	intel_attach_force_pfit_property(connector);
+	intel_attach_scaling_src_size_property(connector);
 	intel_dp->color_range_auto = true;
 
 	if (is_edp(intel_dp)) {
@@ -4899,6 +4922,7 @@ intel_dp_init(struct drm_device *dev, int output_reg, enum port port)
 	intel_encoder->cloneable = 0;
 	intel_encoder->hot_plug = intel_dp_hot_plug;
 
+	intel_connector->panel.fitting_mode = 0;
 	if (!intel_dp_init_connector(intel_dig_port, intel_connector)) {
 		drm_encoder_cleanup(encoder);
 		kfree(intel_dig_port);
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 7f8caf0..421c102 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -429,6 +429,12 @@ struct intel_crtc {
 	bool cpu_fifo_underrun_disabled;
 	bool pch_fifo_underrun_disabled;
 
+	/* panel fitter input src size */
+	uint32_t scaling_src_size;
+
+	/* panel fitter status flag */
+	bool	pfit_en_status;
+
 	/* per-pipe watermark state */
 	struct {
 		/* watermarks currently being used  */
@@ -539,7 +545,8 @@ struct intel_hdmi {
 	bool has_hdmi_sink;
 	bool has_audio;
 	enum hdmi_force_audio force_audio;
-	enum hdmi_panel_fitter pfit;
+	enum panel_fitter pfit;
+	struct intel_connector *attached_connector;
 	bool rgb_quant_range_selectable;
 	void (*write_infoframe)(struct drm_encoder *encoder,
 				enum hdmi_infoframe_type type,
@@ -959,6 +966,8 @@ int intel_ddc_get_modes(struct drm_connector *c, struct i2c_adapter *adapter);
 void intel_attach_force_audio_property(struct drm_connector *connector);
 void intel_attach_broadcast_rgb_property(struct drm_connector *connector);
 void intel_attach_force_pfit_property(struct drm_connector *connector);
+extern void
+	intel_attach_scaling_src_size_property(struct drm_connector *connector);
 
 
 /* intel_overlay.c */
diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index bf0180f..9e199a6 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -87,12 +87,31 @@ static bool intel_dsi_compute_config(struct intel_encoder *encoder,
 	struct drm_display_mode *fixed_mode = intel_connector->panel.fixed_mode;
 	struct drm_display_mode *adjusted_mode = &config->adjusted_mode;
 	struct drm_display_mode *mode = &config->requested_mode;
+	struct intel_crtc *intel_crtc = encoder->new_crtc;
+	struct drm_device *dev = encoder->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 
 	DRM_DEBUG_KMS("\n");
 
 	if (fixed_mode)
 		intel_fixed_panel_mode(fixed_mode, adjusted_mode);
 
+	/*
+	 * Panel native resolution and desired mode can be different in
+	 * these two cases:
+	 * 1. Generic driver specifies scaling reqd flag.
+	 * 2. For restricted bandwidth devices
+	 */
+	if (dev_priv->scaling_reqd || i915.limitbw)  {
+		intel_connector->panel.fitting_mode = AUTOSCALE;
+		DRM_DEBUG("Enabling PF scaling required flag set\n");
+	}
+
+	if (IS_VALLEYVIEW(dev)) {
+		intel_gmch_panel_fitting(intel_crtc, config,
+			intel_connector->panel.fitting_mode);
+	}
+
 	if (intel_dsi->dev.dev_ops->mode_fixup)
 		return intel_dsi->dev.dev_ops->mode_fixup(&intel_dsi->dev,
 							  mode, adjusted_mode);
@@ -923,6 +942,53 @@ static void intel_dsi_destroy(struct drm_connector *connector)
 	kfree(connector);
 }
 
+static int intel_dsi_set_property(struct drm_connector *connector,
+		struct drm_property *property,
+		uint64_t val)
+{
+	struct intel_dsi *intel_dsi = intel_attached_dsi(connector);
+	struct drm_i915_private *dev_priv = connector->dev->dev_private;
+	struct intel_connector *intel_connector = to_intel_connector(connector);
+	struct intel_encoder *encoder = intel_connector->encoder;
+	struct intel_crtc *intel_crtc = encoder->new_crtc;
+	int ret;
+
+	ret = drm_object_property_set_value(&connector->base, property, val);
+	if (ret)
+		return ret;
+
+	if (property == dev_priv->force_pfit_property) {
+		if (intel_connector->panel.fitting_mode == val)
+			return 0;
+
+		intel_connector->panel.fitting_mode = val;
+		if (IS_VALLEYVIEW(dev_priv->dev)) {
+			if (dev_priv->scaling_reqd || i915.limitbw) {
+				if (intel_connector->panel.fitting_mode
+					== PFIT_OFF)
+					return 0;
+			}
+			intel_gmch_panel_fitting(intel_crtc,
+				&intel_crtc->config,
+				intel_connector->panel.fitting_mode);
+			DRM_DEBUG_DRIVER("panel fitting mode = %u\n",
+				intel_connector->panel.fitting_mode);
+			return 0;
+		} else
+			goto done;
+	}
+
+	if (property == dev_priv->scaling_src_size_property) {
+		intel_crtc->scaling_src_size = val;
+		DRM_DEBUG_DRIVER("src size = %u", intel_crtc->scaling_src_size);
+		return 0;
+	}
+done:
+	if (intel_dsi->base.base.crtc)
+		intel_crtc_restore_mode(intel_dsi->base.base.crtc);
+	return 0;
+}
+
 static const struct drm_encoder_funcs intel_dsi_funcs = {
 	.destroy = intel_encoder_destroy,
 };
@@ -938,6 +1004,7 @@ static const struct drm_connector_funcs intel_dsi_connector_funcs = {
 	.detect = intel_dsi_detect,
 	.destroy = intel_dsi_destroy,
 	.fill_modes = drm_helper_probe_single_connector_modes,
+	.set_property = intel_dsi_set_property,
 };
 
 void intel_dsi_pmic_backlight_on(struct intel_dsi_device *dsi)
@@ -982,6 +1049,14 @@ void intel_dsi_soc_backlight_off(struct intel_dsi_device *dsi)
 	udelay(500);
 }
 
+static void
+intel_dsi_add_properties(struct intel_dsi *intel_dsi,
+				struct drm_connector *connector)
+{
+	intel_attach_force_pfit_property(connector);
+	intel_attach_scaling_src_size_property(connector);
+}
+
 bool intel_dsi_init(struct drm_device *dev)
 {
 	struct intel_dsi *intel_dsi;
@@ -1069,6 +1144,7 @@ bool intel_dsi_init(struct drm_device *dev)
 	connector->interlace_allowed = false;
 	connector->doublescan_allowed = false;
 
+	intel_dsi_add_properties(intel_dsi, connector);
 	intel_connector_attach_encoder(intel_connector, intel_encoder);
 
 	drm_connector_register(connector);
@@ -1104,8 +1180,15 @@ bool intel_dsi_init(struct drm_device *dev)
 
 	fixed_mode->type |= DRM_MODE_TYPE_PREFERRED;
 	intel_panel_init(&intel_connector->panel, fixed_mode, NULL);
+	intel_connector->panel.fitting_mode = 0;
 
 	intel_panel_setup_backlight(connector);
+
+	if (dev_priv->scaling_reqd || i915.limitbw)  {
+		intel_connector->panel.fitting_mode = AUTOSCALE;
+		DRM_DEBUG_DRIVER
+			("Enabling pfit as scaling reqd flag set\n");
+	}
 	return true;
 
 err:
diff --git a/drivers/gpu/drm/i915/intel_hdmi.c b/drivers/gpu/drm/i915/intel_hdmi.c
index c4a18eb..f763cd5 100644
--- a/drivers/gpu/drm/i915/intel_hdmi.c
+++ b/drivers/gpu/drm/i915/intel_hdmi.c
@@ -707,22 +707,6 @@ static void intel_hdmi_prepare(struct intel_encoder *encoder)
 	else
 		hdmi_val |= SDVO_PIPE_SEL(crtc->pipe);
 
-	if (intel_hdmi->pfit) {
-		u32 val = 0;
-		if (intel_hdmi->pfit == AUTOSCALE)
-			val =  PFIT_ENABLE | (crtc->pipe <<
-				PFIT_PIPE_SHIFT) | PFIT_SCALING_AUTO;
-		if (intel_hdmi->pfit == PILLARBOX)
-			val =  PFIT_ENABLE | (crtc->pipe <<
-				PFIT_PIPE_SHIFT) | PFIT_SCALING_PILLAR;
-		else if (intel_hdmi->pfit == LETTERBOX)
-			val =  PFIT_ENABLE | (crtc->pipe <<
-				PFIT_PIPE_SHIFT) | PFIT_SCALING_LETTER;
-		DRM_DEBUG_DRIVER("pfit val = %x", val);
-
-		I915_WRITE(PFIT_CONTROL, val);
-	}
-
 	I915_WRITE(intel_hdmi->hdmi_reg, hdmi_val);
 	POSTING_READ(intel_hdmi->hdmi_reg);
 }
@@ -826,22 +810,6 @@ static void intel_enable_hdmi(struct intel_encoder *encoder)
 	I915_WRITE(intel_hdmi->hdmi_reg, temp);
 	POSTING_READ(intel_hdmi->hdmi_reg);
 
-	if (intel_hdmi->pfit) {
-		u32 val = 0;
-		if (intel_hdmi->pfit == AUTOSCALE)
-			val =  PFIT_ENABLE | (intel_crtc->pipe <<
-				PFIT_PIPE_SHIFT) | PFIT_SCALING_AUTO;
-		if (intel_hdmi->pfit == PILLARBOX)
-			val =  PFIT_ENABLE | (intel_crtc->pipe <<
-				PFIT_PIPE_SHIFT) | PFIT_SCALING_PILLAR;
-		else if (intel_hdmi->pfit == LETTERBOX)
-			val =  PFIT_ENABLE | (intel_crtc->pipe <<
-				PFIT_PIPE_SHIFT) | PFIT_SCALING_LETTER;
-		DRM_DEBUG_DRIVER("pfit val = %x", val);
-
-		I915_WRITE(PFIT_CONTROL, val);
-	}
-
 	/* HW workaround, need to write this twice for issue that may result
 	 * in first write getting masked.
 	 */
@@ -980,6 +948,9 @@ bool intel_hdmi_compute_config(struct intel_encoder *encoder,
 	struct intel_hdmi *intel_hdmi = enc_to_intel_hdmi(&encoder->base);
 	struct drm_device *dev = encoder->base.dev;
 	struct drm_display_mode *adjusted_mode = &pipe_config->adjusted_mode;
+	struct intel_crtc *intel_crtc = encoder->new_crtc;
+	struct intel_connector *intel_connector =
+		intel_hdmi->attached_connector;
 	int clock_12bpc = pipe_config->adjusted_mode.crtc_clock * 3 / 2;
 	int portclock_limit = hdmi_portclock_limit(intel_hdmi, false);
 	int desired_bpp;
@@ -988,6 +959,11 @@ bool intel_hdmi_compute_config(struct intel_encoder *encoder,
 
 	intel_hdmi_compute_color_range(intel_hdmi, adjusted_mode);
 
+	if (IS_VALLEYVIEW(dev)) {
+		intel_gmch_panel_fitting(intel_crtc, pipe_config,
+			intel_connector->panel.fitting_mode);
+	}
+
 	if (intel_hdmi->color_range)
 		pipe_config->limited_color_range = true;
 
@@ -1199,6 +1175,9 @@ intel_hdmi_set_property(struct drm_connector *connector,
 	struct intel_digital_port *intel_dig_port =
 		hdmi_to_dig_port(intel_hdmi);
 	struct drm_i915_private *dev_priv = connector->dev->dev_private;
+	struct intel_connector *intel_connector = to_intel_connector(connector);
+	struct intel_encoder *encoder = intel_connector->encoder;
+	struct intel_crtc *intel_crtc = encoder->new_crtc;
 	int ret;
 
 	ret = drm_object_property_set_value(&connector->base, property, val);
@@ -1254,14 +1233,24 @@ intel_hdmi_set_property(struct drm_connector *connector,
 	}
 
 	if (property == dev_priv->force_pfit_property) {
-		if (val == intel_hdmi->pfit)
+		if (intel_connector->panel.fitting_mode == val)
 			return 0;
 
-		DRM_DEBUG_DRIVER("val = %lld", val);
-		intel_hdmi->pfit = val;
-		goto done;
+		intel_connector->panel.fitting_mode = val;
+		if (IS_VALLEYVIEW(dev_priv->dev)) {
+			intel_gmch_panel_fitting(intel_crtc,
+				&intel_crtc->config,
+				intel_connector->panel.fitting_mode);
+			return 0;
+		} else
+			goto done;
+	}
+	if (property == dev_priv->scaling_src_size_property) {
+		intel_crtc->scaling_src_size = val;
+		DRM_DEBUG_DRIVER("src size = %u\n",
+			intel_crtc->scaling_src_size);
+		return 0;
 	}
-
 	return -EINVAL;
 
 done:
@@ -1654,6 +1643,7 @@ intel_hdmi_add_properties(struct intel_hdmi *intel_hdmi, struct drm_connector *c
 	intel_attach_force_audio_property(connector);
 	intel_attach_broadcast_rgb_property(connector);
 	intel_attach_force_pfit_property(connector);
+	intel_attach_scaling_src_size_property(connector);
 	intel_hdmi->color_range_auto = true;
 }
 
@@ -1674,7 +1664,6 @@ void intel_hdmi_init_connector(struct intel_digital_port *intel_dig_port,
 	connector->interlace_allowed = 0;
 	connector->doublescan_allowed = 0;
 	connector->stereo_allowed = 1;
-	intel_hdmi->pfit = 0;
 
 	switch (port) {
 	case PORT_B:
@@ -1752,6 +1741,9 @@ void intel_hdmi_init_connector(struct intel_digital_port *intel_dig_port,
 		u32 temp = I915_READ(PEG_BAND_GAP_DATA);
 		I915_WRITE(PEG_BAND_GAP_DATA, (temp & ~0xf) | 0xd);
 	}
+
+	/* Load initialized connector */
+	intel_hdmi->attached_connector = intel_connector;
 }
 
 #ifdef CONFIG_SUPPORT_LPDMA_HDMI_AUDIO
@@ -1833,6 +1825,7 @@ void intel_hdmi_init(struct drm_device *dev, int hdmi_reg, enum port port)
 	intel_dig_port->dp.output_reg = 0;
 
 	intel_hdmi_init_connector(intel_dig_port, intel_connector);
+	intel_connector->panel.fitting_mode = 0;
 
 #ifdef CONFIG_SUPPORT_LPDMA_HDMI_AUDIO
 	INIT_WORK(&dev_priv->hdmi_audio_wq, i915_had_wq);
diff --git a/drivers/gpu/drm/i915/intel_modes.c b/drivers/gpu/drm/i915/intel_modes.c
index ce1bf22..2bbe39b 100644
--- a/drivers/gpu/drm/i915/intel_modes.c
+++ b/drivers/gpu/drm/i915/intel_modes.c
@@ -129,9 +129,10 @@ intel_attach_broadcast_rgb_property(struct drm_connector *connector)
 }
 
 static const struct drm_prop_enum_list pfit_names[] = {
-	{ 0, "Auto scale" },
-	{ 1, "PillarBox" },
-	{ 2, "LetterBox" },
+	{ 0, "Pfit off" },
+	{ 1, "Auto scale" },
+	{ 2, "PillarBox" },
+	{ 3, "LetterBox" },
 };
 
 void
@@ -156,3 +157,26 @@ intel_attach_force_pfit_property(struct drm_connector *connector)
 
 	drm_object_attach_property(obj, prop, 0);
 }
+
+void
+intel_attach_scaling_src_size_property(struct drm_connector *connector)
+{
+	struct drm_device *dev = connector->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_property *prop;
+	struct drm_mode_object *obj = &connector->base;
+
+	prop = dev_priv->scaling_src_size_property;
+	if (prop == NULL) {
+		prop = drm_property_create_range(dev, 0,
+						"scaling_src_size",
+						0,
+						UINT_MAX);
+		if (prop == NULL)
+			return;
+
+		dev_priv->scaling_src_size_property = prop;
+	}
+
+	drm_object_attach_property(obj, prop, 0);
+}
diff --git a/drivers/gpu/drm/i915/intel_panel.c b/drivers/gpu/drm/i915/intel_panel.c
index b640c46..34a9a04 100644
--- a/drivers/gpu/drm/i915/intel_panel.c
+++ b/drivers/gpu/drm/i915/intel_panel.c
@@ -309,15 +309,50 @@ void intel_gmch_panel_fitting(struct intel_crtc *intel_crtc,
 {
 	struct drm_device *dev = intel_crtc->base.dev;
 	u32 pfit_control = 0, pfit_pgm_ratios = 0, border = 0;
-	struct drm_display_mode *adjusted_mode;
+	struct drm_display_mode *mode, *adjusted_mode;
+	uint32_t scaling_src_w, scaling_src_h = 0;
+
+	intel_crtc->base.panning_en = false;
 
+	mode = &pipe_config->requested_mode;
 	adjusted_mode = &pipe_config->adjusted_mode;
 
-	/* Native modes don't need fitting */
-	if (adjusted_mode->hdisplay == pipe_config->pipe_src_w &&
-	    adjusted_mode->vdisplay == pipe_config->pipe_src_h)
+	if (IS_VALLEYVIEW(dev)) {
+		scaling_src_w = ((intel_crtc->scaling_src_size >>
+				SCALING_SRCSIZE_SHIFT) &
+				SCALING_SRCSIZE_MASK) + 1;
+		scaling_src_h = (intel_crtc->scaling_src_size &
+				SCALING_SRCSIZE_MASK) + 1;
+
+		/* The input src size should be < 2kx2k */
+		if ((scaling_src_w > PFIT_SIZE_LIMIT) ||
+			(scaling_src_h > PFIT_SIZE_LIMIT)) {
+			DRM_ERROR("Wrong panel fitter input src conf");
+			goto out;
+		}
+
+		if (fitting_mode == AUTOSCALE)
+			pfit_control = PFIT_SCALING_AUTO;
+		else if (fitting_mode == PILLARBOX)
+			pfit_control = PFIT_SCALING_PILLAR;
+		else if (fitting_mode == LETTERBOX)
+			pfit_control = PFIT_SCALING_LETTER;
+		else {
+			pfit_control = 0;
+			intel_crtc->base.panning_en = false;
+			goto out;
+		}
+		pfit_control |= (PFIT_ENABLE | (intel_crtc->pipe
+					<< PFIT_PIPE_SHIFT));
+		intel_crtc->base.panning_en = true;
 		goto out;
 
+		/* Native modes don't need fitting */
+		if (adjusted_mode->hdisplay == mode->hdisplay &&
+		    adjusted_mode->vdisplay == mode->vdisplay)
+			goto out;
+	}
+
 	switch (fitting_mode) {
 	case DRM_MODE_SCALE_CENTER:
 		/*
@@ -372,6 +407,7 @@ out:
 	if ((pfit_control & PFIT_ENABLE) == 0) {
 		pfit_control = 0;
 		pfit_pgm_ratios = 0;
+		intel_crtc->scaling_src_size = 0;
 	}
 
 	pipe_config->gmch_pfit.control = pfit_control;
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index cc52446..78b3fe7 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -397,6 +397,7 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	bool alpha = true;
 	unsigned long sprsurf_offset, linear_offset;
 	int pixel_size = drm_format_plane_cpp(fb->pixel_format, 0);
+	struct drm_display_mode *mode = &intel_crtc->config.requested_mode;
 	u32 start_vbl_count;
 	bool atomic_update;
 
@@ -524,6 +525,20 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 
 	intel_update_primary_plane(intel_crtc);
 
+	/* if panel fitter is enabled program the input src size */
+	if (intel_crtc->scaling_src_size &&
+			intel_crtc->config.gmch_pfit.control) {
+		I915_WRITE(PIPESRC(pipe), intel_crtc->scaling_src_size);
+		I915_WRITE(PFIT_CONTROL, intel_crtc->config.gmch_pfit.control);
+		intel_crtc->pfit_en_status = true;
+	} else if (intel_crtc->pfit_en_status) {
+		I915_WRITE(PIPESRC(pipe),
+			((mode->hdisplay - 1) << SCALING_SRCSIZE_SHIFT) |
+			(mode->vdisplay - 1));
+		I915_WRITE(PFIT_CONTROL, 0);
+		intel_crtc->pfit_en_status = false;
+	}
+
 	I915_WRITE(SPSTRIDE(pipe, plane), fb->pitches[0]);
 
 	if (obj->tiling_mode != I915_TILING_NONE) {
@@ -1297,7 +1312,7 @@ intel_update_plane(struct drm_plane *plane, struct drm_crtc *crtc,
 		.y1 = crtc_y,
 		.y2 = crtc_y + crtc_h,
 	};
-	const struct drm_rect clip = {
+	struct drm_rect clip = {
 		.x2 = intel_crtc->active ? intel_crtc->config.pipe_src_w : 0,
 		.y2 = intel_crtc->active ? intel_crtc->config.pipe_src_h : 0,
 	};
@@ -1347,6 +1362,15 @@ intel_update_plane(struct drm_plane *plane, struct drm_crtc *crtc,
 	max_scale = intel_plane->max_downscale << 16;
 	min_scale = intel_plane->can_scale ? 1 : (1 << 16);
 
+	if (IS_VALLEYVIEW(dev) && intel_crtc->scaling_src_size &&
+		intel_crtc->config.gmch_pfit.control) {
+		clip.x2 = ((intel_crtc->scaling_src_size >>
+				SCALING_SRCSIZE_SHIFT) &
+				SCALING_SRCSIZE_MASK) + 1;
+		clip.y2 = (intel_crtc->scaling_src_size &
+				SCALING_SRCSIZE_MASK) + 1;
+	}
+
 	hscale = drm_rect_calc_hscale_relaxed(&src, &dst, min_scale, max_scale);
 	BUG_ON(hscale < 0);
 
diff --git a/include/drm/drm_crtc.h b/include/drm/drm_crtc.h
index 249fbea..492623e 100644
--- a/include/drm/drm_crtc.h
+++ b/include/drm/drm_crtc.h
@@ -370,6 +370,7 @@ struct drm_crtc {
 	void *helper_private;
 
 	struct drm_object_properties properties;
+	bool panning_en;
 };
 
 
-- 
1.7.9.5

