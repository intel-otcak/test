From 90291ad281de16ced970210c8dee91ecb8842252 Mon Sep 17 00:00:00 2001
From: "qipeng.zha" <qipeng.zha@intel.com>
Date: Tue, 9 Jun 2015 19:24:57 +0800
Subject: [PATCH] Touch: fix issue of taking long time to resume

Separate power HAL suspend and synaptic_suspend,
so can reninit touch chip when resume from S3.

Change-Id: If3e3b6b1a3c115c39e85cf9e3e78d476cf41ecbd
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-37588
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1825
Signed-off-by: qipeng.zha <qipeng.zha@intel.com>
---
 .../touchscreen/synaptics_dsx/synaptics_dsx_core.c | 52 +++++++++++++++++++++-
 .../touchscreen/synaptics_dsx/synaptics_dsx_core.h |  1 +
 2 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
index 68e3f39314da..39375d8fcf61 100644
--- a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
+++ b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
@@ -3401,6 +3401,8 @@ static int synaptics_rmi4_suspend(struct device *dev)
 
 	mutex_lock(&rmi4_data->input_dev->mutex);
 
+	rmi4_data->kernel_suspend = true;
+
 	if (rmi4_data->suspend)
 		goto exit;
 
@@ -3474,6 +3476,18 @@ static int synaptics_rmi4_resume(struct device *dev)
 			rmi4_data->hw_if->ui_hw_init(rmi4_data);
 	}
 
+	if (rmi4_data->kernel_suspend) {
+		rmi4_data->kernel_suspend = false;
+		if (rmi4_data->hw_if->ui_hw_init) {
+			retval = rmi4_data->hw_if->ui_hw_init(rmi4_data);
+			if (retval < 0) {
+				dev_err(dev, "%s: Failed to ui_hw_init\n",
+					__func__);
+				goto exit;
+			}
+		}
+	}
+
 	synaptics_rmi4_sensor_wake(rmi4_data);
 	synaptics_rmi4_irq_enable(rmi4_data, true, false);
 
@@ -3496,9 +3510,45 @@ exit:
 static void synaptics_rmi4_power_hal_suspend(struct device *dev)
 {
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
+	struct synaptics_rmi4_exp_fhandler *exp_fhandler;
+
+	mutex_lock(&rmi4_data->input_dev->mutex);
 
 	rmi4_data->power_hal_want_suspend = true;
-	synaptics_rmi4_suspend(&rmi4_data->pdev->dev);
+
+	if (rmi4_data->suspend)
+		goto exit;
+
+	if (rmi4_data->stay_awake)
+		goto exit;
+
+	if (rmi4_data->enable_wakeup_gesture) {
+		synaptics_rmi4_wakeup_gesture(rmi4_data, true);
+		goto exit;
+	}
+
+	if (!rmi4_data->suspend) {
+		synaptics_rmi4_irq_enable(rmi4_data, false, false);
+		synaptics_rmi4_sensor_sleep(rmi4_data);
+		synaptics_rmi4_free_fingers(rmi4_data);
+	}
+
+	mutex_lock(&exp_data.mutex);
+	if (!list_empty(&exp_data.list)) {
+		list_for_each_entry(exp_fhandler, &exp_data.list, link)
+			if (exp_fhandler->exp_fn->suspend != NULL)
+				exp_fhandler->exp_fn->suspend(rmi4_data);
+	}
+	mutex_unlock(&exp_data.mutex);
+
+	if (rmi4_data->pwr_reg)
+		regulator_disable(rmi4_data->pwr_reg);
+
+	rmi4_data->suspend = true;
+	dev_info(dev, "Synaptic suspend complete\n");
+exit:
+	mutex_unlock(&rmi4_data->input_dev->mutex);
+	return;
 }
 
 static void synaptics_rmi4_power_hal_resume(struct device *dev)
diff --git a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
index ade331b2233e..72ab3113aab7 100644
--- a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
+++ b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
@@ -269,6 +269,7 @@ struct synaptics_rmi4_data {
 	bool suspend;
 #ifdef CONFIG_PM_SLEEP
 	bool power_hal_want_suspend;
+	bool kernel_suspend;
 #endif
 	bool sensor_sleep;
 	bool stay_awake;
-- 
1.9.1

