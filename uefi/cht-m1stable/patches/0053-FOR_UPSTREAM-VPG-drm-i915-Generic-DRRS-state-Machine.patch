From 5cfd2dfbabdf4ef5db40fc0af50208d372521c8f Mon Sep 17 00:00:00 2001
Message-Id: <5cfd2dfbabdf4ef5db40fc0af50208d372521c8f.1431284209.git.chang-joon.lee@intel.com>
In-Reply-To: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
References: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
From: Ramalingam C <ramalingam.c@intel.com>
Date: Mon, 13 Apr 2015 10:37:55 +0530
Subject: [PATCH 53/68] FOR_UPSTREAM [VPG]: drm/i915: Generic DRRS state
 Machine

DRRS is a power saving feature, which will refresh the display
at the lowest supported refresh rate, based on the rate of change
of display content to be rendered.

This patch implements the Generic state machine for the Idleness DRRS.
Idleness DRRS is nothing but, when the content of the Display is not
changed for a certain duration, refresh rate will be set to the
minimum vrefresh supported by panel.

This will be extended for media playback DRRS. i.e based on the
display content's Frames Per Second, required lowest vrefresh to
support the FPS will be used to render the data. This involves
the Userspace and Kernel interaction.

DRRS Support for the encoders like DSI and eDP can be implemented
as a separate module and get registered with this generic DRRS stack.
Hence extending to new encoder and platform is made easy.

Issue: GMINL-8115
Change-Id: I89c7250ff6cb63579b9dcd05a2cd1fd9d8d43ad3
Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
---
 drivers/gpu/drm/i915/Makefile     |    3 +-
 drivers/gpu/drm/i915/i915_drv.h   |   83 +++++++-
 drivers/gpu/drm/i915/intel_drrs.c |  381 +++++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_drrs.h |   36 ++++
 drivers/gpu/drm/i915/intel_drv.h  |    3 +
 5 files changed, 499 insertions(+), 7 deletions(-)
 create mode 100644 drivers/gpu/drm/i915/intel_drrs.c
 create mode 100644 drivers/gpu/drm/i915/intel_drrs.h

diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index 2f453c8..aca25b9 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -78,7 +78,8 @@ i915-y += dvo_ch7017.o \
 	  i915_dpst.o \
 	  intel_clrmgr.o \
 	  i915_sprite_csc.o \
-	  i915_adf_wrapper.o
+	  i915_adf_wrapper.o \
+	  intel_drrs.o
 
 # legacy horrors
 i915-y += i915_dma.o \
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 735a390..822835b 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -732,6 +732,81 @@ struct i915_fbc {
 	bool disable;
 };
 
+/**
+ * DRRS Support Type:
+ * DRRS_NOT_SUPPORTED		: DRRS not supported
+ * STATIC_DRRS_SUPPORT		: Need a complete modeset for DRRS
+ * SEAMLESS_DRRS_SUPPORT	: Seamless vrefresh switch is supported on HW
+ * SEAMLESS_DRRS_SUPPORT_SW	: Seamless vrefresh switch is supported on SW
+ */
+enum drrs_support_type {
+	DRRS_NOT_SUPPORTED = 0,
+	STATIC_DRRS_SUPPORT = 1,
+	SEAMLESS_DRRS_SUPPORT = 2,
+	SEAMLESS_DRRS_SUPPORT_SW = 3,
+};
+
+/**
+ * Different DRRS States:
+ * DRRS_HIGH_RR	: Refreshrate of Fixed mode. [Maximum Vrefresh]
+ * DRRS_LOW_RR	: Refreshrate of Downclock mode. [Minimum vrefresh]
+ */
+enum drrs_refresh_rate_type {
+	DRRS_HIGH_RR,
+	DRRS_LOW_RR,
+	DRRS_MAX_RR,
+};
+
+struct drrs_info {
+	enum drrs_support_type type;
+	enum drrs_refresh_rate_type current_rr_type;
+	enum drrs_refresh_rate_type target_rr_type;
+};
+
+struct i915_drrs;
+
+/**
+ * intel_idleness_drrs_work:
+ * work		: Deferred work to declare the Idleness, if not disturbed.
+ * crtc		: Target drm_crtc
+ * interval	: Time to defer the deferred work
+ */
+struct intel_idleness_drrs_work {
+	struct delayed_work work;
+	struct i915_drrs *drrs;
+
+	/* Idleness interval in mSec*/
+	int interval;
+};
+
+/* Encoder related function pointers */
+struct drrs_encoder_ops {
+	int (*init)(struct i915_drrs *, struct drm_display_mode *);
+	void (*exit)(struct i915_drrs *);
+	void (*set_drrs_state)(struct i915_drrs *);
+	bool (*is_drrs_hr_state_pending)(struct i915_drrs *);
+};
+
+struct i915_drrs {
+	/* Whether another pipe is enabled in parallel */
+	bool is_clone;
+
+	/* Whether DRRS is supported on this Panel */
+	bool has_drrs;
+
+	/* Holds the DRRS state machine states */
+	struct drrs_info drrs_state;
+
+	/* Pointer to the relevant connector */
+	struct intel_connector *connector;
+
+	struct intel_idleness_drrs_work *idleness_drrs_work;
+
+	/* Functions to hold encoder specific DRRS functions */
+	struct drrs_encoder_ops *encoder_ops;
+	struct mutex drrs_mutex;
+};
+
 struct i915_psr {
 	bool sink_support;
 	bool source_ok;
@@ -1373,12 +1448,6 @@ struct ddi_vbt_port_info {
 	uint8_t supports_dp:1;
 };
 
-enum drrs_support_type {
-	DRRS_NOT_SUPPORTED = 0,
-	STATIC_DRRS_SUPPORT = 1,
-	SEAMLESS_DRRS_SUPPORT = 2
-};
-
 struct intel_vbt_data {
 	struct drm_display_mode *lfp_lvds_vbt_mode; /* if any */
 	struct drm_display_mode *sdvo_lvds_vbt_mode; /* if any */
@@ -1652,6 +1721,7 @@ struct drm_i915_private {
 	u32 hotplug_status;
 
 	struct i915_fbc fbc;
+	struct i915_drrs *drrs[I915_MAX_PIPES];
 	struct intel_opregion opregion;
 	struct intel_vbt_data vbt;
 	bool scaling_reqd;
@@ -2348,6 +2418,7 @@ enum context_submission_status {
 #define IS_HSW_ULX(dev)		((dev)->pdev->device == 0x0A0E || \
 				 (dev)->pdev->device == 0x0A1E)
 #define IS_PRELIMINARY_HW(intel_info) ((intel_info)->is_preliminary)
+#define IS_PLATFORM_HAS_DRRS(dev)	IS_VALLEYVIEW(dev)
 
 /*
  * The genX designation typically refers to the render engine, so render
diff --git a/drivers/gpu/drm/i915/intel_drrs.c b/drivers/gpu/drm/i915/intel_drrs.c
new file mode 100644
index 0000000..9d84e9e
--- /dev/null
+++ b/drivers/gpu/drm/i915/intel_drrs.c
@@ -0,0 +1,381 @@
+/*
+ * Copyright (C) 2015, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Author:
+ * Ramalingam C <ramalingam.c@intel.com>
+ */
+
+#include <drm/i915_drm.h>
+#include <linux/delay.h>
+
+#include "i915_drv.h"
+#include "intel_drv.h"
+#include "intel_drrs.h"
+
+int get_drrs_struct_index_for_crtc(struct drm_i915_private *dev_priv,
+						struct intel_crtc *intel_crtc)
+{
+	int i;
+
+	for (i = 0; i < I915_MAX_PIPES; i++) {
+		if (dev_priv->drrs[i] &&
+			(dev_priv->drrs[i]->connector->encoder->base.crtc ==
+							&intel_crtc->base))
+			return i;
+	}
+
+	/* No drrs struct exist for this crtc */
+	return -ENXIO;
+
+}
+
+int get_drrs_struct_index_for_connector(struct drm_i915_private *dev_priv,
+					struct intel_connector *intel_connector)
+{
+	int i;
+
+	for (i = 0; i < I915_MAX_PIPES; i++) {
+		if (dev_priv->drrs[i] &&
+			(dev_priv->drrs[i]->connector == intel_connector))
+			return i;
+	}
+
+	/* No drrs struct exist for this connector */
+	return -ENXIO;
+}
+
+int get_free_drrs_struct_index(struct drm_i915_private *dev_priv)
+{
+	int i;
+
+	for (i = 0; i < I915_MAX_PIPES; i++) {
+		if (!dev_priv->drrs[i])
+			return i;
+	}
+
+	/* All drrs index are busy */
+	return -EBUSY;
+}
+
+void intel_set_drrs_state(struct i915_drrs *drrs)
+{
+	struct drrs_info *drrs_state;
+	struct drm_display_mode *target_mode;
+	struct intel_crtc *intel_crtc;
+	struct intel_panel *panel;
+	int refresh_rate;
+
+	if (!drrs || !drrs->has_drrs) {
+		DRM_ERROR("DRRS is not supported on this pipe\n");
+		return;
+	}
+
+	panel = &drrs->connector->panel;
+	drrs_state = &drrs->drrs_state;
+
+	intel_crtc = to_intel_crtc(drrs->connector->encoder->base.crtc);
+
+	if (!intel_crtc) {
+		DRM_DEBUG_KMS("DRRS: intel_crtc not initialized\n");
+		return;
+	}
+
+	if (!intel_crtc->active) {
+		DRM_INFO("Encoder has been disabled. CRTC not Active\n");
+		return;
+	}
+
+	target_mode = panel->target_mode;
+	if (target_mode == NULL) {
+		DRM_ERROR("target_mode cannot be NULL\n");
+		return;
+	}
+	refresh_rate = target_mode->vrefresh;
+
+	if (refresh_rate <= 0) {
+		DRM_ERROR("Refresh rate should be positive non-zero.<%d>\n",
+								refresh_rate);
+		return;
+	}
+
+	if (drrs_state->target_rr_type >= DRRS_MAX_RR) {
+		DRM_ERROR("Unknown refresh_rate_type\n");
+		return;
+	}
+
+	if (drrs_state->target_rr_type == drrs_state->current_rr_type) {
+		DRM_INFO("Requested for previously set RR. Ignoring\n");
+		return;
+	}
+
+	drrs->encoder_ops->set_drrs_state(drrs);
+	if (drrs_state->type != SEAMLESS_DRRS_SUPPORT_SW) {
+
+		/*
+		 * If it is non-DSI encoders.
+		 * As only DSI has SEAMLESS_DRRS_SUPPORT_SW.
+		 */
+		drrs_state->current_rr_type = drrs_state->target_rr_type;
+		DRM_INFO("Refresh Rate set to : %dHz\n", refresh_rate);
+	}
+}
+
+static void intel_idleness_drrs_work_fn(struct work_struct *__work)
+{
+	struct intel_idleness_drrs_work *work =
+		container_of(to_delayed_work(__work),
+				struct intel_idleness_drrs_work, work);
+	struct intel_panel *panel;
+	struct i915_drrs *drrs = work->drrs;
+
+	panel = &drrs->connector->panel;
+
+	/* TODO: If DRRS is not supported on clone mode act here */
+	mutex_lock(&drrs->drrs_mutex);
+	if (panel->target_mode != NULL)
+		DRM_ERROR("FIXME: We shouldn't be here\n");
+
+	panel->target_mode = panel->downclock_mode;
+	drrs->drrs_state.target_rr_type = DRRS_LOW_RR;
+
+	intel_set_drrs_state(drrs);
+
+	panel->target_mode = NULL;
+	mutex_unlock(&drrs->drrs_mutex);
+}
+
+static void intel_cancel_idleness_drrs_work(struct i915_drrs *drrs)
+{
+	if (!drrs || !drrs->has_drrs || !drrs->idleness_drrs_work)
+		return;
+
+	cancel_delayed_work_sync(&drrs->idleness_drrs_work->work);
+	drrs->connector->panel.target_mode = NULL;
+}
+
+static void intel_enable_idleness_drrs(struct i915_drrs *drrs)
+{
+	bool force_enable_drrs = false;
+
+	if (!drrs || !drrs->has_drrs)
+		return;
+
+	intel_cancel_idleness_drrs_work(drrs);
+	mutex_lock(&drrs->drrs_mutex);
+
+	/* Capturing the deferred request for disable_drrs */
+	if (drrs->drrs_state.type == SEAMLESS_DRRS_SUPPORT_SW &&
+				drrs->encoder_ops->is_drrs_hr_state_pending) {
+		if (drrs->encoder_ops->is_drrs_hr_state_pending(drrs))
+				force_enable_drrs = true;
+	}
+
+	if (drrs->drrs_state.current_rr_type != DRRS_LOW_RR ||
+							force_enable_drrs) {
+		drrs->idleness_drrs_work->drrs = drrs;
+
+		/*
+		 * Delay the actual enabling to let pageflipping cease and the
+		 * display to settle before starting DRRS
+		 */
+		schedule_delayed_work(&drrs->idleness_drrs_work->work,
+			msecs_to_jiffies(drrs->idleness_drrs_work->interval));
+	}
+	mutex_unlock(&drrs->drrs_mutex);
+}
+
+void intel_disable_idleness_drrs(struct intel_crtc *crtc)
+{
+	struct drm_device *dev = crtc->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct i915_drrs *drrs;
+	struct intel_panel *panel;
+	int index;
+
+	index = get_drrs_struct_index_for_crtc(dev_priv, crtc);
+	if (index < 0)
+		return;
+
+	drrs = dev_priv->drrs[index];
+	if (!drrs || !drrs->has_drrs)
+		return;
+
+	panel = &drrs->connector->panel;
+
+	/* as part of disable DRRS, reset refresh rate to HIGH_RR */
+	if (drrs->drrs_state.current_rr_type == DRRS_LOW_RR) {
+		intel_cancel_idleness_drrs_work(drrs);
+		mutex_lock(&drrs->drrs_mutex);
+
+		if (panel->target_mode != NULL)
+			DRM_ERROR("FIXME: We shouldn't be here\n");
+
+		panel->target_mode = panel->fixed_mode;
+		drrs->drrs_state.target_rr_type = DRRS_HIGH_RR;
+		intel_set_drrs_state(drrs);
+		panel->target_mode = NULL;
+		mutex_unlock(&drrs->drrs_mutex);
+	}
+}
+
+/* Stops and Starts the Idlenes detection */
+void intel_restart_idleness_drrs(struct intel_crtc *intel_crtc)
+{
+	struct drm_device *dev = intel_crtc->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct i915_drrs *drrs;
+	int index;
+
+	index = get_drrs_struct_index_for_crtc(dev_priv, intel_crtc);
+	if (index < 0)
+		return;
+
+	drrs = dev_priv->drrs[index];
+	if (!drrs || !drrs->has_drrs)
+		return;
+
+	/* TODO: Find clone mode here and act on it*/
+	intel_disable_idleness_drrs(intel_crtc);
+
+	/* re-enable idleness detection */
+	intel_enable_idleness_drrs(drrs);
+}
+
+
+/* Idleness detection logic is initialized */
+int intel_drrs_idleness_detection_init(struct i915_drrs *drrs)
+{
+	struct intel_idleness_drrs_work *work;
+
+	work = kzalloc(sizeof(struct intel_idleness_drrs_work), GFP_KERNEL);
+	if (!work) {
+		DRM_ERROR("Failed to allocate DRRS work structure\n");
+		return -ENOMEM;
+	}
+
+	drrs->is_clone = false;
+	work->interval = DRRS_IDLENESS_INTERVAL_MS;
+	work->drrs = drrs;
+	INIT_DELAYED_WORK(&work->work, intel_idleness_drrs_work_fn);
+
+	drrs->idleness_drrs_work = work;
+	return 0;
+}
+
+/*
+ * intel_drrs_init : General entry for DRRS Unit. Called for each PIPE.
+ */
+int intel_drrs_init(struct drm_device *dev,
+				struct intel_connector *intel_connector,
+					struct drm_display_mode *fixed_mode)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct i915_drrs *drrs;
+	int ret = 0, index;
+
+	if (!IS_PLATFORM_HAS_DRRS(dev)) {
+		DRM_ERROR("DRRS is not enabled on this platform\n");
+		return -EPERM;
+	}
+
+	if (get_drrs_struct_index_for_connector(dev_priv, intel_connector)
+									>= 0) {
+		DRM_ERROR("DRRS is already initialized for this connector\n");
+		return -EINVAL;
+	}
+
+	index = get_free_drrs_struct_index(dev_priv);
+	if (index < 0) {
+		DRM_ERROR("DRRS is initialized for all pipes\n");
+		return -EBUSY;
+	}
+
+	dev_priv->drrs[index] = kzalloc(sizeof(*drrs), GFP_KERNEL);
+	if (!dev_priv->drrs[index]) {
+		DRM_ERROR("DRRS memory allocation failed\n");
+		return -ENOMEM;
+	}
+
+	drrs = dev_priv->drrs[index];
+	drrs->connector = intel_connector;
+
+	if (!drrs->encoder_ops) {
+		DRM_ERROR("Encoder ops not initialized\n");
+		ret = -EINVAL;
+		goto err_out;
+	}
+
+	/* First check if DRRS is enabled from VBT struct */
+	if (dev_priv->vbt.drrs_type != SEAMLESS_DRRS_SUPPORT) {
+		DRM_INFO("Panel doesn't support SEAMLESS DRRS\n");
+		ret = -EPERM;
+		goto err_out;
+	}
+
+	if (!drrs->encoder_ops->init || !drrs->encoder_ops->exit ||
+					!drrs->encoder_ops->set_drrs_state) {
+		DRM_ERROR("Essential func ptrs are NULL\n");
+		ret = -EINVAL;
+		goto err_out;
+	}
+
+	ret = drrs->encoder_ops->init(drrs, fixed_mode);
+	if (ret < 0) {
+		DRM_ERROR("Encoder DRRS init failed\n");
+		goto err_out;
+	}
+
+	ret = intel_drrs_idleness_detection_init(drrs);
+	if (ret < 0) {
+		drrs->encoder_ops->exit(drrs);
+		goto err_out;
+	}
+
+	/* SEAMLESS DRRS is supported and downclock mode also exist */
+	drrs->has_drrs = true;
+	mutex_init(&drrs->drrs_mutex);
+	drrs->drrs_state.current_rr_type = DRRS_HIGH_RR;
+	DRM_INFO("SEAMLESS DRRS supported on this panel.\n");
+
+	return 0;
+
+err_out:
+	drrs->drrs_state.type = DRRS_NOT_SUPPORTED;
+	kfree(dev_priv->drrs[index]);
+	dev_priv->drrs[index] = NULL;
+	return ret;
+}
+
+void intel_drrs_exit(struct drm_device *dev,
+				struct intel_connector *intel_connector)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct i915_drrs *drrs;
+	int index;
+
+	index = get_drrs_struct_index_for_connector(dev_priv, intel_connector);
+	if (index < 0)
+		return;
+
+	drrs = dev_priv->drrs[index];
+	intel_cancel_idleness_drrs_work(drrs);
+
+	if (drrs->encoder_ops->exit)
+		drrs->encoder_ops->exit(drrs);
+
+	drrs->has_drrs = false;
+	mutex_destroy(&drrs->drrs_mutex);
+	kfree(drrs->idleness_drrs_work);
+
+	kfree(drrs);
+	dev_priv->drrs[index] = NULL;
+}
diff --git a/drivers/gpu/drm/i915/intel_drrs.h b/drivers/gpu/drm/i915/intel_drrs.h
new file mode 100644
index 0000000..ef20431
--- /dev/null
+++ b/drivers/gpu/drm/i915/intel_drrs.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2015, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Author:
+ * Ramalingam C <ramalingam.c@intel.com>
+ */
+
+#ifndef INTEL_DRRS_H__
+#define INTEL_DRRS_H__
+
+#define DRRS_IDLENESS_INTERVAL_MS	1000
+
+struct intel_encoder;
+
+int get_drrs_struct_index_for_crtc(struct drm_i915_private *dev_priv,
+						struct intel_crtc *intel_crtc);
+int get_drrs_struct_index_for_connector(struct drm_i915_private *dev_priv,
+				struct intel_connector *intel_connector);
+int get_free_drrs_struct_index(struct drm_i915_private *dev_priv);
+
+void intel_disable_idleness_drrs(struct intel_crtc *crtc);
+void intel_restart_idleness_drrs(struct intel_crtc *crtc);
+int intel_drrs_init(struct drm_device *dev,
+			struct intel_connector *intel_connector,
+				struct drm_display_mode *fixed_mode);
+
+#endif /* INTEL_DRRS_H__ */
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 1ce1e7a..b85701f 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -35,6 +35,8 @@
 #include <drm/drm_fb_helper.h>
 #include <drm/drm_dp_helper.h>
 
+#include "intel_drrs.h"
+
 /**
  * _wait_for - magic (register) wait macro
  *
@@ -190,6 +192,7 @@ struct intel_encoder {
 struct intel_panel {
 	struct drm_display_mode *fixed_mode;
 	struct drm_display_mode *downclock_mode;
+	struct drm_display_mode *target_mode;
 	int fitting_mode;
 
 	/* backlight */
-- 
1.7.9.5

