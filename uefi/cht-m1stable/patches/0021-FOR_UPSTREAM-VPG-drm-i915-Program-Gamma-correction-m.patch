From a5e90a7dd95db6c13ef8142ecf62fd56dafdd5d4 Mon Sep 17 00:00:00 2001
Message-Id: <a5e90a7dd95db6c13ef8142ecf62fd56dafdd5d4.1414143271.git.chang-joon.lee@intel.com>
In-Reply-To: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
References: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
From: sonika <sonika.jindal@intel.com>
Date: Mon, 28 Apr 2014 17:25:16 +0530
Subject: [PATCH 21/26] FOR_UPSTREAM [VPG]: drm/i915: Program Gamma correction
 max values.

Color manager: Program gamma correction max register values as per the gamma
correction applied

Issue: GMIN-2937
Change-Id: Ie258bf58493bda47349a4ed36e92a65c7262d1da
Signed-off-by: sonika <sonika.jindal@intel.com>
Signed-off-by: Mahesh Kumar <mahesh1.kumar@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c |   57 ++++++++++++++++++++++++++---------
 drivers/gpu/drm/i915/intel_clrmgr.c |   38 ++++++++++++++---------
 drivers/gpu/drm/i915/intel_clrmgr.h |   11 +++++--
 3 files changed, 74 insertions(+), 32 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index d5b0b4b..0df01ec 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -1808,7 +1808,9 @@ ssize_t i915_gamma_adjust_write(struct file *filp,
 		  loff_t *ppos)
 {
 	int ret = 0;
+	int bytes_count;
 	char *buf = NULL;
+	char *temp_buf = NULL;
 
 	/* Validate input */
 	if (!count) {
@@ -1829,16 +1831,36 @@ ssize_t i915_gamma_adjust_write(struct file *filp,
 		goto EXIT;
 	}
 
+	bytes_count = count;
+
 	/* Parse data and load the gamma  table */
 	ret = parse_clrmgr_input(gamma_softlut, buf,
-		GAMMA_CORRECT_MAX_COUNT, count);
-	if (ret < 0)
+		GAMMA_CORRECT_MAX_COUNT, &bytes_count);
+	if (ret < GAMMA_CORRECT_MAX_COUNT) {
 		DRM_ERROR("Gamma table loading failed\n");
+		goto EXIT;
+	}
 	else
 		DRM_DEBUG("Gamma table loading done\n");
+
+	if (bytes_count < count) {
+		temp_buf = buf + bytes_count;
+
+		/* Number of bytes remaining */
+		bytes_count = count - bytes_count;
+
+		/* Parse data and load the gcmax table */
+		ret = parse_clrmgr_input(gcmax_softlut, temp_buf,
+				GC_MAX_COUNT, &bytes_count);
+
+		if (ret < GC_MAX_COUNT)
+			DRM_ERROR("GCMAX table loading failed\n");
+		else
+			DRM_DEBUG("GCMAX table loading done\n");
+	}
+
 EXIT:
 	kfree(buf);
-	/* If error, return error*/
 	if (ret < 0)
 		return ret;
 
@@ -1966,6 +1988,7 @@ ssize_t i915_cb_adjust_write(struct file *filp,
 		  loff_t *ppos)
 {
 	int ret = 0;
+	int bytes_count = count;
 	struct drm_device *dev = filp->private_data;
 	struct cont_brightlut *cb_ptr = NULL;
 	struct drm_i915_private *dev_priv = dev->dev_private;
@@ -1998,9 +2021,12 @@ ssize_t i915_cb_adjust_write(struct file *filp,
 	}
 
 	/* Parse input data */
-	ret = parse_clrmgr_input((uint *)cb_ptr, buf, 2, count);
-	if (ret < 0)
+	ret = parse_clrmgr_input((uint *)cb_ptr, buf, CB_MAX_COEFF_COUNT,
+			&bytes_count);
+	if (ret < CB_MAX_COEFF_COUNT) {
 		DRM_ERROR("Contrast Brightness loading failed\n");
+		goto EXIT;
+	}
 	else
 		DRM_DEBUG("Contrast Brightness loading done\n");
 
@@ -2018,8 +2044,7 @@ ssize_t i915_cb_adjust_write(struct file *filp,
 EXIT:
 	kfree(cb_ptr);
 	kfree(buf);
-	/* If cant read the full buffer, read from last left */
-	if (ret < count-1)
+	if (ret < 0)
 		return ret;
 
 	return count;
@@ -2040,6 +2065,7 @@ ssize_t i915_hs_adjust_write(struct file *filp,
 		  loff_t *ppos)
 {
 	int ret = count;
+	int bytes_count = count;
 	struct drm_device *dev = filp->private_data;
 	struct hue_saturationlut *hs_ptr = NULL;
 	struct drm_i915_private *dev_priv = dev->dev_private;
@@ -2072,9 +2098,12 @@ ssize_t i915_hs_adjust_write(struct file *filp,
 	}
 
 	/* Parse input data */
-	ret = parse_clrmgr_input((uint *)hs_ptr, buf, 2, count);
-	if (ret < 0)
+	ret = parse_clrmgr_input((uint *)hs_ptr, buf, HS_MAX_COEFF_COUNT,
+			&bytes_count);
+	if (ret < HS_MAX_COEFF_COUNT) {
 		DRM_ERROR("Hue Saturation loading failed\n");
+		goto EXIT;
+	}
 	else
 		DRM_DEBUG("Hue Saturation loading done\n");
 
@@ -2093,8 +2122,8 @@ ssize_t i915_hs_adjust_write(struct file *filp,
 EXIT:
 	kfree(hs_ptr);
 	kfree(buf);
-	/* If cant read the full buffer, read from last left */
-	if (ret < count-1)
+
+	if (ret < 0)
 		return ret;
 
 	return count;
@@ -2125,6 +2154,7 @@ ssize_t i915_csc_adjust_write(struct file *filp,
 		  loff_t *ppos)
 {
 	int ret = 0;
+	int bytes_count = count;
 	char *buf  = NULL;
 
 	if (!count) {
@@ -2147,14 +2177,13 @@ ssize_t i915_csc_adjust_write(struct file *filp,
 
 	/* Parse data and load the csc  table */
 	ret = parse_clrmgr_input(csc_softlut, buf,
-		CSC_MAX_COEFF_COUNT, count);
-	if (ret < 0)
+		CSC_MAX_COEFF_COUNT, &bytes_count);
+	if (ret < CSC_MAX_COEFF_COUNT)
 		DRM_ERROR("CSC table loading failed\n");
 	else
 		DRM_DEBUG("CSC table loading done\n");
 EXIT:
 	kfree(buf);
-	/* If cant read the full buffer, read from last left */
 	if (ret < 0)
 		return ret;
 
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.c b/drivers/gpu/drm/i915/intel_clrmgr.c
index 8d04497..ad656c0 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.c
+++ b/drivers/gpu/drm/i915/intel_clrmgr.c
@@ -73,7 +73,10 @@ u32 gamma_softlut[GAMMA_CORRECT_MAX_COUNT] =  {
 	0xF8F8F8, 0x0, 0xFAFAFA, 0x0, 0xFCFCFC, 0x0, 0xFEFEFE, 0x0
 };
 
-
+/* GCMAX soft lookup table */
+u32 gcmax_softlut[GC_MAX_COUNT] =  {
+	0xFF00, 0xFF00, 0xFF00
+};
 
 /* Color space conversion coff's */
 u32 csc_softlut[CSC_MAX_COEFF_COUNT] = {
@@ -145,20 +148,20 @@ do_intel_disable_csc(struct drm_device *dev, struct drm_crtc *crtc)
 }
 
 /* Parse userspace input coming from dev node*/
-int parse_clrmgr_input(uint *dest, char *src, int max, int read)
+int parse_clrmgr_input(uint *dest, char *src, int max, int *num_bytes)
 {
 	int size = 0;
 	int bytes = 0;
 	char *populate = NULL;
 
-	/*Check for trailing comma or \n */
-	if (!dest || !src || *src == ',' || *src == '\n' || !read) {
+	/* Check for trailing comma or \n */
+	if (!dest || !src || *src == ',' || *src == '\n' || !(*num_bytes)) {
 		DRM_ERROR("Invalid input to parse");
 		return -EINVAL;
 	}
 
 	/* limit check */
-	if (read < max) {
+	if (*num_bytes < max) {
 		DRM_ERROR("Invalid input to parse");
 		return -EINVAL;
 	}
@@ -170,15 +173,20 @@ int parse_clrmgr_input(uint *dest, char *src, int max, int read)
 			break;
 
 		bytes += (strlen(populate)+1);
-		if (kstrtouint((const char *)populate, 16,
-			&dest[size++])) {
-			DRM_ERROR("Parse: Invalid limit\n");
+		if (kstrtouint((const char *)populate, CLRMGR_BASE,
+					&dest[size++])) {
+			DRM_ERROR("Parse: Invalid limit");
 			return -EINVAL;
 		}
 		if (src == NULL || *src == '\0')
 			break;
 	}
-	return read;
+
+	/* Fill num_bytes with number of bytes read */
+	*num_bytes = bytes;
+
+	/* Return number of tokens parsed */
+	return size;
 }
 
 /* Gamma correction for sprite planes on External display */
@@ -288,9 +296,9 @@ int intel_enable_primary_gamma(struct drm_crtc *crtc)
 	}
 
 	/* Write max values in 11.6 format */
-	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, SHIFTBY6(GAMMA_MAX_VAL));
-	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, SHIFTBY6(GAMMA_MAX_VAL));
-	I915_WRITE(PIPEA_GAMMA_MAX_RED, SHIFTBY6(GAMMA_MAX_VAL));
+	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, gcmax_softlut[0]);
+	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, gcmax_softlut[1]);
+	I915_WRITE(PIPEA_GAMMA_MAX_RED, gcmax_softlut[2]);
 
 	/* Enable gamma on PIPE  */
 	status = I915_READ(PIPECONF(intel_crtc->pipe));
@@ -343,9 +351,9 @@ int intel_enable_pipe_gamma(struct drm_crtc *crtc)
 	}
 
 	/* Write max values in 11.6 format */
-	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, SHIFTBY6(GAMMA_MAX_VAL));
-	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, SHIFTBY6(GAMMA_MAX_VAL));
-	I915_WRITE(PIPEA_GAMMA_MAX_RED, SHIFTBY6(GAMMA_MAX_VAL));
+	I915_WRITE(PIPEA_GAMMA_MAX_BLUE, gcmax_softlut[0]);
+	I915_WRITE(PIPEA_GAMMA_MAX_GREEN, gcmax_softlut[1]);
+	I915_WRITE(PIPEA_GAMMA_MAX_RED, gcmax_softlut[2]);
 
 	/* Enable gamma for Plane A  */
 	status = I915_READ(PIPECONF(intel_crtc->pipe));
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.h b/drivers/gpu/drm/i915/intel_clrmgr.h
index 9ca999c..4efc296 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.h
+++ b/drivers/gpu/drm/i915/intel_clrmgr.h
@@ -30,20 +30,24 @@
 #define _I915_CLR_MNGR_H_
 
 struct cont_brightlut {
-	short sprite_no;
+	u32 sprite_no;
 	u32 val;
 };
 
 struct hue_saturationlut {
-	short sprite_no;
+	u32 sprite_no;
 	u32 val;
 };
 /* CSC correction */
+#define CLRMGR_BASE   16
 #define CSC_MAX_COEFF_COUNT		6
 #define CLR_MGR_PARSE_MAX		128
 #define PIPECONF_GAMMA			(1<<24)
 #define GAMMA_CORRECT_MAX_COUNT 256
+#define GC_MAX_COUNT 3
 #define GAMMA_SP_MAX_COUNT		6
+#define CB_MAX_COEFF_COUNT      2
+#define HS_MAX_COEFF_COUNT      2
 /* Gamma correction defines */
 #define GAMMA_MAX_VAL			1024
 #define SHIFTBY6(val) (val<<6)
@@ -83,10 +87,11 @@ enum clrmgrfeatures {
 /* Required for sysfs entry calls */
 extern u32 csc_softlut[CSC_MAX_COEFF_COUNT];
 extern u32 gamma_softlut[GAMMA_CORRECT_MAX_COUNT];
+extern u32 gcmax_softlut[GC_MAX_COUNT];
 extern u32 gamma_sprite_softlut[GAMMA_SP_MAX_COUNT];
 
 /* Prototypes */
-int parse_clrmgr_input(uint *dest, char *src, int max, int read);
+int parse_clrmgr_input(uint *dest, char *src, int max, int *num_bytes);
 int do_intel_enable_csc(struct drm_device *dev, void *data,
 				struct drm_crtc *crtc);
 void do_intel_disable_csc(struct drm_device *dev, struct drm_crtc *crtc);
-- 
1.7.9.5

