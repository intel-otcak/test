From d6a9e3b70b8385777edecaa5c2297ebc303f8cd3 Mon Sep 17 00:00:00 2001
From: Chuanxiao Dong <chuanxiao.dong@intel.com>
Date: Mon, 23 Mar 2015 18:47:15 +0800
Subject: [PATCH] mmc: SW CMDQ: improve the SW CMDQ error handling

SW CMDQ error handling is improved by this patch if there is
some kind of timeout event

Change-Id: Ib39381815828e7b19767f92bf6efea200002c9a9
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-27131
Signed-off-by: Chuanxiao Dong <chuanxiao.dong@intel.com>
---
 drivers/mmc/card/block.c  | 70 +++++++++++++++++++++++++++++++++--------------
 drivers/mmc/core/core.c   |  9 ++----
 drivers/mmc/host/sdhci.c  | 49 ++++++++++++++++++++++++++++++---
 include/linux/mmc/host.h  |  1 -
 include/linux/mmc/sdhci.h |  1 +
 5 files changed, 97 insertions(+), 33 deletions(-)

diff --git a/drivers/mmc/card/block.c b/drivers/mmc/card/block.c
index 8242868..8fcefb9 100644
--- a/drivers/mmc/card/block.c
+++ b/drivers/mmc/card/block.c
@@ -2163,10 +2163,14 @@ static int mmc_blk_execute_cmdq(struct mmc_queue *mq,
 	cntx = &host->context_info;
 
 	do {
-		id = find_first_bit(&slots, mq->qdepth);
-		if (id < mq->qdepth)
+		if (slots) {
+			id = find_first_bit(&slots, mq->qdepth);
+			BUG_ON(id >= mq->qdepth);
+			__clear_bit(id, &slots);
 			areq = &mq->mqrq[id].mmc_active;
-		else
+			if (host->areq == areq)
+				continue;
+		} else
 			areq = NULL;
 
 		if (host->areq)
@@ -2185,10 +2189,6 @@ static int mmc_blk_execute_cmdq(struct mmc_queue *mq,
 		if (err)
 			return err;
 
-		if (host->areq && (host->areq == areq) &&
-				(atomic_read(&mq->active_slots) == 1))
-			cntx->is_last_cmdq = true;
-
 		switch (status) {
 		case MMC_BLK_SUCCESS:
 			mmc_blk_reset_success(md, MMC_BLK_CMDQ);
@@ -2207,15 +2207,10 @@ static int mmc_blk_execute_cmdq(struct mmc_queue *mq,
 			cntx->is_pending_cmdq = true;
 			return MMC_BLK_NEW_REQUEST;
 		default:
+			pr_err("%s: err blk status 0x%x\n", __func__, status);
 			return -EIO;
 		}
-
-		/* this is just a flush operation */
-		if (!areq)
-			return 0;
-
-		__clear_bit(id, &slots);
-	} while (status);
+	} while (slots);
 
 	return 0;
 }
@@ -2225,6 +2220,7 @@ static int mmc_blk_flush_cmdq(struct mmc_queue *mq, bool urgent)
 	int err;
 	unsigned long status;
 	struct mmc_host *host = mq->card->host;
+	unsigned long timeout;
 
 	if (!mq)
 		return 0;
@@ -2237,18 +2233,45 @@ static int mmc_blk_flush_cmdq(struct mmc_queue *mq, bool urgent)
 	}
 
 	while (mq->cmdqslot) {
-		/* last CMDQ data */
-		if (mq->card->host->context_info.is_last_cmdq)
-			return mmc_blk_execute_cmdq(mq, 0);
+		/*
+		 * As eMMC5.1 spec mentioned, when the device, in its response
+		 * to CMD13, indicates that one or more tasks are
+		 * ready for execution, the host should select one of these
+		 * tasks for execution, and not send additional CMD13s in
+		 * expectation that additional tasks would become ‘ready for
+		 * execution’. Thus if there is areq, we should wait here
+		 */
+		if (host->areq) {
+			err = mmc_blk_execute_cmdq(mq, 0);
+			if (err)
+				return err;
+			if (!mq->cmdqslot)
+				break;
+		}
 
 		/*
 		 * send CMD13 to check QSR
+		 * Max to wait for 10s for a CMDQ request
+		 * getting ready
 		 */
 		status = 0;
+		timeout = jiffies + msecs_to_jiffies(10 * 1000);
 		do {
 			err = mmc_blk_cmdq_check(mq->card, &status);
 			if (err)
 				return err;
+
+			/*
+			 * Timeout if the device never becomes ready for data
+			 * and never leaves the program state.
+			 */
+			if (time_after(jiffies, timeout)) {
+				pr_err("%s: Card stuck in checking CMDQ state!\n",
+					mmc_hostname(host));
+				pr_err("%s: cmdqslot 0x%lx\n",
+					mmc_hostname(host), mq->cmdqslot);
+				return -ETIMEDOUT;
+			}
 		} while (!status);
 		err = mmc_blk_execute_cmdq(mq, status);
 		if (err)
@@ -2302,7 +2325,6 @@ static int mmc_blk_queue_cmdq_req(struct mmc_queue *mq,
 	card = mq->card;
 	mmc_blk_rw_rq_prep(mqrq, card, 0, mq);
 
-	card->host->context_info.is_last_cmdq = false;
 	areq = &mqrq->mmc_active;
 	areq->mrq->host = card->host;
 	areq->mrq->done = mmc_blk_wait_cmdq_data;
@@ -2373,6 +2395,12 @@ static void mmc_blk_discard_cmdq(struct mmc_card *card)
 	mmc_wait_for_cmd(card->host, &cmd, 0);
 }
 
+static inline void mmc_blk_clear_cmdq_context(struct mmc_host *host)
+{
+	host->context_info.is_pending_cmdq = false;
+	host->context_info.is_cmdq_busy = false;
+}
+
 static int mmc_blk_issue_cmdq_rw_rq(struct mmc_queue *mq,
 		struct request *rqc, bool urgent)
 {
@@ -2409,7 +2437,7 @@ requeue:
 	/*
 	 * error handling
 	 */
-	pr_warn("%s: requeue happens\n", __func__);
+	pr_err("%s: requeue happens\n", __func__);
 	if (card->host->areq)
 		mmc_blk_execute_cmdq(mq, 0);
 	BUG_ON(card->host->areq);
@@ -2418,6 +2446,7 @@ requeue:
 	 */
 	mmc_blk_discard_cmdq(card);
 
+	mmc_blk_clear_cmdq_context(card->host);
 	if (!mmc_blk_reset(md, card->host, type)
 			&& !mmc_blk_requeue_cmdq_reqs(card->host, mq)) {
 		/* flush error handling */
@@ -2443,8 +2472,7 @@ requeue:
 		atomic_dec(&mq->active_slots);
 	};
 	BUG_ON(atomic_read(&mq->active_slots) != 0);
-	card->host->context_info.is_cmdq_busy = false;
-	card->host->context_info.is_last_cmdq = false;
+	mmc_blk_clear_cmdq_context(card->host);
 	return 0;
 }
 
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index 09f0b49..bfc57e4 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -679,7 +679,7 @@ int mmc_execute_cmdq(struct mmc_host *host,
 			return 0;
 		default:
 			host->areq = NULL;
-			return -EIO;
+			return 0;
 		}
 	}
 
@@ -694,12 +694,7 @@ int mmc_execute_cmdq(struct mmc_host *host,
 	mrq.data = areq->mrq->data;
 	/* CMD complete only */
 	mmc_wait_for_req(host, &mrq);
-	if (mrq.cmd->error) {
-		host->areq = NULL;
-		return mrq.cmd->error;
-	}
-
-	return 0;
+	return mrq.cmd->error;
 }
 EXPORT_SYMBOL(mmc_execute_cmdq);
 
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 69003bd..c204be8 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -1034,6 +1034,14 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 		timeout += 10 * HZ;
 	mod_timer(&host->timer, timeout);
 
+	/*
+	 * For the command which has async data like CMD46/47, the data
+	 * is not completed at the same time with command. Thus needs a
+	 * separate timeout timer to make sure driver won't wait for ever
+	 */
+	if (mmc_op_cmdq_execute_task(cmd->opcode))
+		mod_timer(&host->async_data_timer, timeout);
+
 	host->cmd = cmd;
 	host->busy_handle = 0;
 
@@ -2274,7 +2282,7 @@ static void sdhci_tasklet_finish_async_data(unsigned long param)
 		return;
 	}
 
-	del_timer(&host->timer);
+	del_timer(&host->async_data_timer);
 
 	mrq = host->mmc->areq->mrq;
 
@@ -2331,9 +2339,7 @@ static void sdhci_tasklet_finish(unsigned long param)
 	BUG_ON(!mrq->cmd);
 	opcode = mrq->cmd->opcode;
 
-	/* for CMD46/47, doesn't delete timer */
-	if (!mmc_op_cmdq_execute_task(opcode))
-		del_timer(&host->timer);
+	del_timer(&host->timer);
 
 	/*
 	 * The controller needs a reset of internal state machines
@@ -2412,6 +2418,39 @@ static void sdhci_timeout_timer(unsigned long data)
 	spin_unlock_irqrestore(&host->lock, flags);
 }
 
+static void sdhci_async_data_timeout_timer(unsigned long data)
+{
+	struct sdhci_host *host;
+	unsigned long flags;
+	struct mmc_request *mrq;
+
+	host = (struct sdhci_host *)data;
+
+	spin_lock_irqsave(&host->lock, flags);
+
+	if (host->mmc->areq && host->mmc->areq->mrq) {
+		mrq = host->mmc->areq->mrq;
+		pr_err("%s: SW CMDQ Timeout waiting for hardware interrupt\n",
+				mmc_hostname(host->mmc));
+		pr_err("%s: CMDQ CMD %d, ARG 0x%x\n", mmc_hostname(host->mmc),
+				mrq->postcmd->opcode, mrq->postcmd->arg);
+		sdhci_dumpregs(host);
+
+		/*
+		 * if host has data then means IRQ handler is not
+		 * called yet. if host has no data means IRQ handler
+		 * is called and maybe the soft tasklet is stuck
+		 */
+		if (host->data) {
+			host->data->error = -ETIMEDOUT;
+			sdhci_finish_data(host);
+		}
+	}
+
+	mmiowb();
+	spin_unlock_irqrestore(&host->lock, flags);
+}
+
 static void sdhci_tuning_timer(unsigned long data)
 {
 	struct sdhci_host *host;
@@ -3428,6 +3467,8 @@ int sdhci_add_host(struct sdhci_host *host)
 		sdhci_tasklet_finish_async_data, (unsigned long)host);
 
 	setup_timer(&host->timer, sdhci_timeout_timer, (unsigned long)host);
+	setup_timer(&host->async_data_timer, sdhci_async_data_timeout_timer,
+			(unsigned long)host);
 
 	if (host->version >= SDHCI_SPEC_300) {
 		init_waitqueue_head(&host->buf_ready_int);
diff --git a/include/linux/mmc/host.h b/include/linux/mmc/host.h
index b5f173a..df33e6e 100644
--- a/include/linux/mmc/host.h
+++ b/include/linux/mmc/host.h
@@ -186,7 +186,6 @@ struct mmc_context_info {
 	bool			is_done_rcv;
 	bool			is_new_req;
 	bool			is_waiting_last_req;
-	bool			is_last_cmdq;
 	bool			is_cmdq_busy;
 	bool			is_pending_cmdq;
 	wait_queue_head_t	wait;
diff --git a/include/linux/mmc/sdhci.h b/include/linux/mmc/sdhci.h
index 109cb72..a2889f1 100644
--- a/include/linux/mmc/sdhci.h
+++ b/include/linux/mmc/sdhci.h
@@ -170,6 +170,7 @@ struct sdhci_host {
 	struct tasklet_struct finish_async_data_tasklet;
 
 	struct timer_list timer;	/* Timer for timeouts */
+	struct timer_list async_data_timer;	/* Timer for SW CMDQ timeouts */
 
 	u32 caps;		/* Alternative CAPABILITY_0 */
 	u32 caps1;		/* Alternative CAPABILITY_1 */
-- 
1.9.1

