From 0b2ca2177713dd44c049e761a88d93e3278e9279 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Tue, 25 Aug 2015 21:19:39 +0530
Subject: [PATCH] USBC-Detect: Read vbus status from phy for dfp detection

Vbus should be read from phy driver at runtime instead of using
cached variable in detect driver to avoid continous drp looping.

Change-Id: I15b590b7d8447d9e4c4e23b0e176f60a65b7a9e2
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17204
---
 drivers/usb/typec/usb_typec_detect.c | 17 ++++++++++-------
 drivers/usb/typec/usb_typec_detect.h |  1 -
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/usb/typec/usb_typec_detect.c b/drivers/usb/typec/usb_typec_detect.c
index 1d1470c121ed..344769d04baf 100644
--- a/drivers/usb/typec/usb_typec_detect.c
+++ b/drivers/usb/typec/usb_typec_detect.c
@@ -292,6 +292,7 @@ static int detect_kthread(void *data)
 {
 	struct typec_detect *detect = (struct typec_detect *)data;
 	struct typec_phy *phy;
+	int vbus_on;
 
 	if (!detect) {
 		pr_err("%s: no detect found", __func__);
@@ -326,8 +327,9 @@ static int detect_kthread(void *data)
 		}
 
 
+		vbus_on = phy->is_vbus_on(phy);
 		if (detect->state == DETECT_STATE_UNATTACHED_UFP) {
-			if (detect->got_vbus && detect_check_valid_ufp(detect))
+			if (vbus_on && detect_check_valid_ufp(detect))
 				continue;
 			else
 				mod_timer(&detect->drp_timer,
@@ -423,8 +425,10 @@ static void detect_valid_dfp_attach_work(struct work_struct *work)
 	struct typec_detect *detect =
 		container_of(work, struct typec_detect, valid_dfp_attach_work);
 	struct typec_phy *phy = detect->phy;
+	int vbus_on;
 
-	if (detect->state != DETECT_STATE_UNATTACHED_DFP || detect->got_vbus) {
+	vbus_on = phy->is_vbus_on(phy);
+	if (detect->state != DETECT_STATE_UNATTACHED_DFP || vbus_on) {
 		if (!phy->support_drp_toggle)
 			del_timer_sync(&detect->drp_timer);
 		return;
@@ -471,15 +475,16 @@ static void detect_dfp_work(struct work_struct *work)
 {
 	struct typec_detect *detect =
 		container_of(work, struct typec_detect, dfp_work);
-	int ret;
+	int ret, vbus_on;
 	enum typec_cc_pin use_cc = 0;
 	struct typec_phy *phy = detect->phy;
 
+	vbus_on = phy->is_vbus_on(phy);
 	dev_dbg(detect->phy->dev, "%s: %d vbus = %d", __func__,
-				detect->state, detect->got_vbus);
+				detect->state, vbus_on);
 
 	mutex_lock(&detect->lock);
-	if (detect->state != DETECT_STATE_UNATTACHED_DFP || detect->got_vbus) {
+	if (detect->state != DETECT_STATE_UNATTACHED_DFP || vbus_on) {
 		mutex_unlock(&detect->lock);
 		goto end;
 	}
@@ -739,7 +744,6 @@ static void update_phy_state(struct work_struct *work)
 	switch (detect->event) {
 	case TYPEC_EVENT_VBUS:
 		mutex_lock(&detect->lock);
-		detect->got_vbus = true;
 		detect->drp_counter = 0;
 		state = detect->state;
 		if (state == DETECT_STATE_LOCK_UFP)
@@ -749,7 +753,6 @@ static void update_phy_state(struct work_struct *work)
 	case TYPEC_EVENT_NONE:
 		dev_dbg(phy->dev, "EVENT NONE: state = %d", detect->state);
 		mutex_lock(&detect->lock);
-		detect->got_vbus = false;
 		/* setup Switches0 Setting */
 		detect->drp_counter = 0;
 		if (!phy->support_drp_toggle)
diff --git a/drivers/usb/typec/usb_typec_detect.h b/drivers/usb/typec/usb_typec_detect.h
index 97e83e2d5118..0264a025ffd5 100644
--- a/drivers/usb/typec/usb_typec_detect.h
+++ b/drivers/usb/typec/usb_typec_detect.h
@@ -70,7 +70,6 @@ struct typec_detect {
 	struct mutex lock;
 
 	/* One bit status variables. */
-	unsigned got_vbus:1;
 	unsigned is_pd_capable:1;
 	unsigned usb_state:1;
 	unsigned usb_host_state:1;
-- 
2.6.0.rc0.2.g7662973

