From ef528b66ddf5ae259a2ef2f76ca48c130e514f86 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Tue, 28 Oct 2014 12:12:21 +0800
Subject: [PATCH 111/117] ov2722: clobber with ICG upstream version

Current ICG platform/android/main code as of:

commit 9eb7a2b372c53cecfd4bd7f2c34239be53df0b31
Author: Shuguang Gong <shuguang.gong@intel.com>
Date:   Thu Oct 23 09:59:07 2014 +0800

    [WORKAROUND] ov2722: remove VGA from video resolution list of sensor

Change-Id: Ia2c0d9213c6af1c268a58009c6e68ca2ff0b3e2d
Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 .../camera/drivers/media/i2c/ov2722.c              |  67 ++++-----
 .../camera/drivers/media/i2c/ov2722.h              | 159 ++++++++++++++++++++-
 2 files changed, 182 insertions(+), 44 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
index 2a33f9f..5adc457 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
@@ -34,14 +34,13 @@
 #include <linux/gpio.h>
 #include <linux/moduleparam.h>
 #include <media/v4l2-device.h>
+#ifndef CONFIG_GMIN_INTEL_MID /* FIXME! for non-gmin*/
+#include <media/v4l2-chip-ident.h>
+#endif
 #include <linux/io.h>
-#include <linux/acpi.h>
-#include <linux/atomisp_gmin_platform.h>
 
 #include "ov2722.h"
 
-void *ov2722_platform_data(void *info);
-
 /* i2c read/write stuff */
 static int ov2722_read_reg(struct i2c_client *client,
 			   u16 data_length, u16 reg, u16 *val)
@@ -396,19 +395,21 @@ static long __ov2722_set_exposure(struct v4l2_subdev *sd, int coarse_itg,
 
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	u16 vts;
-	int frame_length;
+	struct ov2722_device *dev = to_ov2722_sensor(sd);
+	u16 hts, vts;
 	int ret;
 
-	ret = ov2722_read_reg(client, OV2722_16BIT,
-					OV2722_VTS_DIFF_H, &vts);
+	/* clear VTS_DIFF on manual mode */
+	ret = ov2722_write_reg(client, OV2722_16BIT, OV2722_VTS_DIFF_H, 0);
 	if (ret)
 		return ret;
 
-	if ((coarse_itg + 6) >= vts)
-		frame_length = (coarse_itg + 6) - vts;
-	else
-		frame_length = 0;
+	hts = dev->pixels_per_line;
+	vts = dev->lines_per_frame;;
+
+	if ((coarse_itg + OV2722_COARSE_INTG_TIME_MAX_MARGIN) > vts)
+		vts = coarse_itg + OV2722_COARSE_INTG_TIME_MAX_MARGIN;
+
 	coarse_itg <<= 4;
 	digitgain <<= 2;
 
@@ -418,7 +419,12 @@ static long __ov2722_set_exposure(struct v4l2_subdev *sd, int coarse_itg,
 		return ret;
 
 	ret = ov2722_write_reg(client, OV2722_16BIT,
-				OV2722_VTS_DIFF_H, frame_length >> 8);
+				OV2722_VTS_H, vts);
+	if (ret)
+		return ret;
+
+	ret = ov2722_write_reg(client, OV2722_16BIT,
+				OV2722_HTS_H, hts);
 	if (ret)
 		return ret;
 
@@ -934,6 +940,9 @@ static int ov2722_s_mbus_fmt(struct v4l2_subdev *sd,
 		return -EINVAL;
 	}
 
+	dev->pixels_per_line = ov2722_res[dev->fmt_idx].pixels_per_line;
+	dev->lines_per_frame = ov2722_res[dev->fmt_idx].lines_per_frame;
+
 	ret = startup(sd);
 	if (ret) {
 		dev_err(&client->dev, "ov2722 startup err\n");
@@ -1374,16 +1383,12 @@ static int __ov2722_init_ctrl_handler(struct ov2722_device *dev)
 
 	return 0;
 }
-
 static int ov2722_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
 	struct ov2722_device *dev;
-	void *ovpdev;
 	int ret;
 
-	printk("\0010ANDY %s:%d\n", __func__, __LINE__);
-
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
 		dev_err(&client->dev, "out of memory\n");
@@ -1395,16 +1400,12 @@ static int ov2722_probe(struct i2c_client *client,
 	dev->fmt_idx = 0;
 	v4l2_i2c_subdev_init(&(dev->sd), client, &ov2722_ops);
 
-	ovpdev = client->dev.platform_data;
-	if (config_enabled(CONFIG_GMIN_INTEL_MID) &&
-	    ACPI_COMPANION(&client->dev))
-		ovpdev = gmin_camera_platform_data(&dev->sd,
-						   ATOMISP_INPUT_FORMAT_RAW_10,
-						   atomisp_bayer_order_grbg);
-
-	ret = ov2722_s_config(&dev->sd, client->irq, ovpdev);
-	if (ret)
-		goto out_free;
+	if (client->dev.platform_data) {
+		ret = ov2722_s_config(&dev->sd, client->irq,
+				       client->dev.platform_data);
+		if (ret)
+			goto out_free;
+	}
 
 	ret = __ov2722_init_ctrl_handler(dev);
 	if (ret)
@@ -1419,8 +1420,6 @@ static int ov2722_probe(struct i2c_client *client,
 	if (ret)
 		ov2722_remove(client);
 
-	ret = atomisp_register_i2c_module(&dev->sd, ovpdev, RAW_CAMERA);
-
 	return ret;
 
 out_ctrl_handler_free:
@@ -1433,20 +1432,10 @@ out_free:
 }
 
 MODULE_DEVICE_TABLE(i2c, ov2722_id);
-
-static struct acpi_device_id ov2722_acpi_match[] = {
-	{ "INT33FB" },
-	{},
-};
-
-MODULE_DEVICE_TABLE(acpi, ov2722_acpi_match);
-
-
 static struct i2c_driver ov2722_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = OV2722_NAME,
-		.acpi_match_table = ACPI_PTR(ov2722_acpi_match),
 	},
 	.probe = ov2722_probe,
 	.remove = ov2722_remove,
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.h b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.h
index f8353e6..8ff4aba 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.h
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.h
@@ -29,6 +29,9 @@
 #include <linux/spinlock.h>
 #include <media/v4l2-subdev.h>
 #include <media/v4l2-device.h>
+#ifndef CONFIG_GMIN_INTEL_MID /* FIXME! for non-gmin*/
+#include <media/v4l2-chip-ident.h>
+#endif
 #include <linux/v4l2-mediabus.h>
 #include <media/media-entity.h>
 #include <media/v4l2-ctrls.h>
@@ -74,7 +77,7 @@
 #define OV2722_FINE_INTG_TIME_MIN 0
 #define OV2722_FINE_INTG_TIME_MAX_MARGIN 0
 #define OV2722_COARSE_INTG_TIME_MIN 1
-#define OV2722_COARSE_INTG_TIME_MAX_MARGIN (0xffff - 6)
+#define OV2722_COARSE_INTG_TIME_MAX_MARGIN 4
 
 /*
  * OV2722 System control registers
@@ -139,6 +142,10 @@
 #define OV2722_VTS_DIFF_H			0x350c
 #define OV2722_VTS_DIFF_L			0x350d
 #define OV2722_GROUP_ACCESS			0x3208
+#define OV2722_HTS_H				0x380c
+#define OV2722_HTS_L				0x380d
+#define OV2722_VTS_H				0x380e
+#define OV2722_VTS_L				0x380f
 
 #define OV2722_MWB_GAIN_R_H			0x5186
 #define OV2722_MWB_GAIN_R_L			0x5187
@@ -211,6 +218,8 @@ struct ov2722_device {
 	int vt_pix_clk_freq_mhz;
 	int fmt_idx;
 	int run_mode;
+	u16 pixels_per_line;
+	u16 lines_per_frame;
 	u8 res;
 	u8 type;
 
@@ -374,6 +383,116 @@ static struct ov2722_reg const ov2722_QVGA_30fps[] = {
 
 };
 
+static struct ov2722_reg const ov2722_480P_30fps[] = {
+	{OV2722_8BIT, 0x3718, 0x10},
+	{OV2722_8BIT, 0x3702, 0x18},
+	{OV2722_8BIT, 0x373a, 0x3c},
+	{OV2722_8BIT, 0x3715, 0x01},
+	{OV2722_8BIT, 0x3703, 0x1d},
+	{OV2722_8BIT, 0x3705, 0x12},
+	{OV2722_8BIT, 0x3730, 0x1f},
+	{OV2722_8BIT, 0x3704, 0x3f},
+	{OV2722_8BIT, 0x3f06, 0x1d},
+	{OV2722_8BIT, 0x371c, 0x00},
+	{OV2722_8BIT, 0x371d, 0x83},
+	{OV2722_8BIT, 0x371e, 0x00},
+	{OV2722_8BIT, 0x371f, 0xbd},
+	{OV2722_8BIT, 0x3708, 0x63},
+	{OV2722_8BIT, 0x3709, 0x52},
+	{OV2722_8BIT, 0x3800, 0x00},
+	{OV2722_8BIT, 0x3801, 0xf2}, /* H crop start: 322 - 80 = 242*/
+	{OV2722_8BIT, 0x3802, 0x00},
+	{OV2722_8BIT, 0x3803, 0x20}, /* V crop start:  32*/
+	{OV2722_8BIT, 0x3804, 0x06},
+	{OV2722_8BIT, 0x3805, 0xBB}, /* H crop end:   1643 + 80 = 1723*/
+	{OV2722_8BIT, 0x3806, 0x04},
+	{OV2722_8BIT, 0x3807, 0x03}, /* V crop end:   1027*/
+	{OV2722_8BIT, 0x3808, 0x02},
+	{OV2722_8BIT, 0x3809, 0xE0}, /* H output size: 656 +80 = 736*/
+	{OV2722_8BIT, 0x380a, 0x01},
+	{OV2722_8BIT, 0x380b, 0xF0}, /* V output size: 496 */
+
+	/* H blank timing */
+	{OV2722_8BIT, 0x380c, 0x08},
+	{OV2722_8BIT, 0x380d, 0x00}, /* H total size: 2048 */
+	{OV2722_8BIT, 0x380e, 0x04},
+	{OV2722_8BIT, 0x380f, 0xa0}, /* V total size: 1184 */
+	{OV2722_8BIT, 0x3810, 0x00},
+	{OV2722_8BIT, 0x3811, 0x04}, /* H window offset: 5 */
+	{OV2722_8BIT, 0x3812, 0x00},
+	{OV2722_8BIT, 0x3813, 0x01}, /* V window offset: 2 */
+	{OV2722_8BIT, 0x3820, 0x80},
+	{OV2722_8BIT, 0x3821, 0x06}, /* flip isp*/
+	{OV2722_8BIT, 0x3814, 0x31},
+	{OV2722_8BIT, 0x3815, 0x31},
+	{OV2722_8BIT, 0x3612, 0x4b},
+	{OV2722_8BIT, 0x3618, 0x04},
+	{OV2722_8BIT, 0x3a08, 0x02},
+	{OV2722_8BIT, 0x3a09, 0x67},
+	{OV2722_8BIT, 0x3a0a, 0x02},
+	{OV2722_8BIT, 0x3a0b, 0x00},
+	{OV2722_8BIT, 0x3a0d, 0x00},
+	{OV2722_8BIT, 0x3a0e, 0x00},
+	{OV2722_8BIT, 0x4520, 0x0a},
+	{OV2722_8BIT, 0x4837, 0x29},
+	{OV2722_8BIT, 0x3000, 0xff},
+	{OV2722_8BIT, 0x3001, 0xff},
+	{OV2722_8BIT, 0x3002, 0xf0},
+	{OV2722_8BIT, 0x3600, 0x08},
+	{OV2722_8BIT, 0x3621, 0xc0},
+	{OV2722_8BIT, 0x3632, 0x53}, /* added for power opt */
+	{OV2722_8BIT, 0x3633, 0x63},
+	{OV2722_8BIT, 0x3634, 0x24},
+	{OV2722_8BIT, 0x3f01, 0x0c},
+	{OV2722_8BIT, 0x5001, 0xc1}, /* v_en, h_en, blc_en */
+	{OV2722_8BIT, 0x3614, 0xf0},
+	{OV2722_8BIT, 0x3630, 0x2d},
+	{OV2722_8BIT, 0x370b, 0x62},
+	{OV2722_8BIT, 0x3706, 0x61},
+	{OV2722_8BIT, 0x4000, 0x02},
+	{OV2722_8BIT, 0x4002, 0xc5},
+	{OV2722_8BIT, 0x4005, 0x08},
+	{OV2722_8BIT, 0x404f, 0x84},
+	{OV2722_8BIT, 0x4051, 0x00},
+	{OV2722_8BIT, 0x5000, 0xff},
+	{OV2722_8BIT, 0x3a18, 0x00},
+	{OV2722_8BIT, 0x3a19, 0x80},
+	{OV2722_8BIT, 0x3503, 0x00},
+	{OV2722_8BIT, 0x4521, 0x00},
+	{OV2722_8BIT, 0x5183, 0xb0}, /* AWB red */
+	{OV2722_8BIT, 0x5184, 0xb0}, /* AWB green */
+	{OV2722_8BIT, 0x5185, 0xb0}, /* AWB blue */
+	{OV2722_8BIT, 0x5180, 0x03}, /* AWB manual mode */
+	{OV2722_8BIT, 0x370c, 0x0c},
+	{OV2722_8BIT, 0x4800, 0x24}, /* clk lane gate enable */
+	{OV2722_8BIT, 0x3035, 0x00},
+	{OV2722_8BIT, 0x3036, 0x26},
+	{OV2722_8BIT, 0x3037, 0xa1},
+	{OV2722_8BIT, 0x303e, 0x19},
+	{OV2722_8BIT, 0x3038, 0x06},
+	{OV2722_8BIT, 0x3018, 0x04},
+
+	/* Added for power optimization */
+	{OV2722_8BIT, 0x3000, 0x00},
+	{OV2722_8BIT, 0x3001, 0x00},
+	{OV2722_8BIT, 0x3002, 0x00},
+	{OV2722_8BIT, 0x3a0f, 0x40},
+	{OV2722_8BIT, 0x3a10, 0x38},
+	{OV2722_8BIT, 0x3a1b, 0x48},
+	{OV2722_8BIT, 0x3a1e, 0x30},
+	{OV2722_8BIT, 0x3a11, 0x90},
+	{OV2722_8BIT, 0x3a1f, 0x10},
+	{OV2722_8BIT, 0x3011, 0x22},
+	{OV2722_8BIT, 0x3a00, 0x58},
+	{OV2722_8BIT, 0x3503, 0x07},
+	{OV2722_8BIT, 0x3500, 0x00},
+	{OV2722_8BIT, 0x3501, 0x46},
+	{OV2722_8BIT, 0x3502, 0x00},
+	{OV2722_8BIT, 0x3508, 0x00},
+	{OV2722_8BIT, 0x3509, 0x10},
+	{OV2722_TOK_TERM, 0, 0},
+};
+
 static struct ov2722_reg const ov2722_VGA_30fps[] = {
 	{OV2722_8BIT, 0x3718, 0x10},
 	{OV2722_8BIT, 0x3702, 0x18},
@@ -898,6 +1017,22 @@ static struct ov2722_reg const ov2722_720p_30fps[] = {
 
 struct ov2722_resolution ov2722_res_preview[] = {
 	{
+		.desc = "ov2722_480P_30fps",
+		.width = 736,
+		.height = 496,
+		.fps = 30,
+		.pix_clk_freq = 73,
+		.used = 0,
+		.pixels_per_line = 2048,
+		.lines_per_frame = 1184,
+		.bin_factor_x = 1,
+		.bin_factor_y = 1,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2722_480P_30fps,
+	},
+
+	{
 		.desc = "ov2722_1452_1092_30fps",
 		.width = 1452,
 		.height = 1092,
@@ -934,6 +1069,21 @@ struct ov2722_resolution ov2722_res_preview[] = {
 
 struct ov2722_resolution ov2722_res_still[] = {
 	{
+		.desc = "ov2722_480P_30fps",
+		.width = 736,
+		.height = 496,
+		.fps = 30,
+		.pix_clk_freq = 73,
+		.used = 0,
+		.pixels_per_line = 2048,
+		.lines_per_frame = 1184,
+		.bin_factor_x = 1,
+		.bin_factor_y = 1,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2722_480P_30fps,
+	},
+	{
 		.desc = "ov2722_1452_1092_30fps",
 		.width = 1452,
 		.height = 1092,
@@ -986,8 +1136,8 @@ struct ov2722_resolution ov2722_res_video[] = {
 		.mipi_freq = 364800,
 	},
 	{
-		.desc = "ov2722_VGA_30fps",
-		.width = 656,
+		.desc = "ov2722_480P_30fps",
+		.width = 736,
 		.height = 496,
 		.fps = 30,
 		.pix_clk_freq = 73,
@@ -998,8 +1148,7 @@ struct ov2722_resolution ov2722_res_video[] = {
 		.bin_factor_y = 1,
 		.bin_mode = 0,
 		.skip_frames = 3,
-		.regs = ov2722_VGA_30fps,
-		.mipi_freq = 364800,
+		.regs = ov2722_480P_30fps,
 	},
 	{
 		.desc = "ov2722_720p_30fps",
-- 
1.9.3

