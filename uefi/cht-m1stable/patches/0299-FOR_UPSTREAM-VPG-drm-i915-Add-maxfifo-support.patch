From 5b2b99fc5bce54f3643bae4ac0bf38572aa57614 Mon Sep 17 00:00:00 2001
Message-Id: <5b2b99fc5bce54f3643bae4ac0bf38572aa57614.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: vanditak <vandita.kulkarni@intel.com>
Date: Fri, 12 Sep 2014 21:43:24 +0530
Subject: [PATCH 299/312] FOR_UPSTREAM [VPG]: drm/i915: Add maxfifo support

This patch optimizes the current code for maxfifo.

This patch adds support to maintain status bits for
each plane per pipe as of now which is missing and seems
to be present in FRONT BUFFER tracking patch, but that would
be associated with the front bufer. Hence this patch
adds a plane_stat variable to maintain the gloabl status
It removes the earlier function and the structure
which was used to maintain the status of the planes.
Makes use of single_plane_enabled(mask) existing macro in a
proper way to determine whether to enable/disable maxfifo.
Adds a new function intel_update_maxfifo and this code
from update_watermark is removed. So that we can call this
function whenever there is a register write to enable/disable
planes.
This patch also includes the changes required for CHV including
PIPEC support.

Issue: CADD-152
Change-Id: Ica7271331bf419506f027c75370e89d59fe5a870
Signed-off-by: Vandita Kulkarni <vandita.kulkarni@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |   21 ++++---
 drivers/gpu/drm/i915/i915_reg.h      |    5 ++
 drivers/gpu/drm/i915/intel_display.c |  105 +++++++++-------------------------
 drivers/gpu/drm/i915/intel_drv.h     |    4 +-
 drivers/gpu/drm/i915/intel_pm.c      |   60 ++++++++++---------
 drivers/gpu/drm/i915/intel_sprite.c  |   28 ++++++---
 6 files changed, 100 insertions(+), 123 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 5aa40a1..a0f11eb 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1426,20 +1426,21 @@ struct i915_dpst_registers {
 	uint32_t blm_hist_bin_count_mask;
 };
 
-struct i915_plane_stat {
-	bool primary;
-	bool secondary;
-	bool sprite_a;
-	bool sprite_b;
-	bool sprite_c;
-	bool sprite_d;
-};
 #define DL_PRIMARY_MASK 0x000000ff
 #define DL_SPRITEA_MASK 0x0000ff00
 #define DL_SPRITEB_MASK 0x00ff0000
 #define BPP_CHANGED_PRIMARY (1 << 24)
 #define BPP_CHANGED_SPRITEA (1 << 25)
 #define BPP_CHANGED_SPRITEB (1 << 26)
+#define VLV_PLANES_PER_PIPE 4
+#define VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(pipe) \
+	(1 << (VLV_PLANES_PER_PIPE * (pipe)))
+#define VLV_UPDATEPLANE_STAT_SP_PER_PIPE(pipe, plane) \
+	(1 << ((1 + plane) + (VLV_PLANES_PER_PIPE * (pipe))))
+#define PIPE_C_MASK \
+		(VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(2) \
+		| VLV_UPDATEPLANE_STAT_SP_PER_PIPE(2, 0) \
+		| VLV_UPDATEPLANE_STAT_SP_PER_PIPE(2, 1))
 
 struct drm_i915_private {
 	struct drm_device *dev;
@@ -1593,9 +1594,11 @@ struct drm_i915_private {
 	bool csc_enabled;
 	bool gamma_enabled;
 	bool is_resuming;
-	struct i915_plane_stat plane_stat;
 	uint32_t pf_change_status[I915_MAX_PIPES];
 
+	/* Indicates currently enabled planes */
+	unsigned int plane_stat;
+
 	/* PCH chipset type */
 	enum intel_pch pch_type;
 	unsigned short pch_id;
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index b31c6de..733da97 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -6238,6 +6238,11 @@ enum punit_power_well {
 #define  WM_DBG_DISALLOW_MAXFIFO	(1<<1)
 #define  WM_DBG_DISALLOW_SPRITE		(1<<2)
 
+#define CHV_DPASSC		0x36
+
+/* Bit 6 of DPASSC indicates maxfifo enabling bit */
+#define CHV_PW_MAXFIFO_MASK		0x40
+
 /* pipe CSC */
 #define _PIPE_A_CSC_COEFF_RY_GY	0x49010
 #define _PIPE_A_CSC_COEFF_BY	0x49014
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index e15dbd7..e5c7994 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -402,59 +402,6 @@ bool intel_pipe_has_type(struct drm_crtc *crtc, int type)
 	return false;
 }
 
-void i915_update_plane_stat(struct drm_i915_private *dev_priv, int pipe,
-		int plane, bool enable, int planes)
-{
-	switch (pipe) {
-	case 0:
-		if (planes == DISPLAY_PLANE) {
-			if (enable)
-				dev_priv->plane_stat.primary = true;
-			else
-				dev_priv->plane_stat.primary = false;
-		} else {
-			switch (plane) {
-			case 0:
-				if (enable)
-					dev_priv->plane_stat.sprite_a = true;
-				else
-					dev_priv->plane_stat.sprite_a = false;
-				break;
-			case 1:
-				if (enable)
-					dev_priv->plane_stat.sprite_b = true;
-				else
-					dev_priv->plane_stat.sprite_b = false;
-				break;
-			}
-		}
-		break;
-	case 1:
-		if (planes == DISPLAY_PLANE) {
-			if (enable)
-				dev_priv->plane_stat.secondary = true;
-			else
-				dev_priv->plane_stat.secondary = false;
-		} else {
-			switch (plane) {
-			case 0:
-				if (enable)
-					dev_priv->plane_stat.sprite_c = true;
-				else
-					dev_priv->plane_stat.sprite_c = false;
-				break;
-			case 1:
-				if (enable)
-					dev_priv->plane_stat.sprite_d = true;
-				else
-					dev_priv->plane_stat.sprite_d = false;
-				break;
-			}
-		}
-		break;
-	}
-}
-
 static const intel_limit_t *intel_ironlake_limit(struct drm_crtc *crtc,
 						int refclk)
 {
@@ -1426,29 +1373,6 @@ static void assert_plane(struct drm_i915_private *dev_priv,
 	     plane_name(plane), state_string(state), state_string(cur_state));
 }
 
-bool is_maxfifo_needed(struct drm_i915_private *dev_priv)
-{
-	int cnt = 0;
-
-	if (dev_priv->plane_stat.primary)
-		cnt++;
-	if (dev_priv->plane_stat.secondary)
-		cnt++;
-	if (dev_priv->plane_stat.sprite_a)
-		cnt++;
-	if (dev_priv->plane_stat.sprite_b)
-		cnt++;
-	if (dev_priv->plane_stat.sprite_c)
-		cnt++;
-	if (dev_priv->plane_stat.sprite_d)
-		cnt++;
-
-	if (cnt == 1)
-		return true;
-	else
-		return false;
-}
-
 #define assert_plane_enabled(d, p) assert_plane(d, p, true)
 #define assert_plane_disabled(d, p) assert_plane(d, p, false)
 
@@ -2199,12 +2123,16 @@ static void intel_enable_pipe(struct intel_crtc *crtc)
 	/* disable the sprite planes */
 	if (IS_VALLEYVIEW(dev_priv->dev)) {
 		int i;
+		dev_priv->plane_stat &=
+				~(VLV_UPDATEPLANE_STAT_SP_PER_PIPE(pipe, 0)
+				|VLV_UPDATEPLANE_STAT_SP_PER_PIPE(pipe, 1));
 		for (i = 0; i < VLV_NUM_SPRITES; i++) {
 			val = I915_READ(SPCNTR(pipe, i));
 			if ((val & SP_ENABLE) == 0)
 				break;
 
 			I915_WRITE(SPCNTR(pipe, i), (val & ~SP_ENABLE));
+			intel_update_maxfifo(dev_priv);
 			/* Activate double buffered register update */
 			I915_MODIFY_DISPBASE(SPSURF(pipe, i), 0);
 			POSTING_READ(SPSURF(pipe, i));
@@ -2292,12 +2220,21 @@ static void intel_enable_primary_hw_plane(struct drm_i915_private *dev_priv,
 
 	intel_crtc->primary_enabled = true;
 
+	dev_priv->plane_stat |= VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(pipe);
+
+	/*
+	 * Since we are enabling a plane, we
+	 * need to make sure that we do not keep the
+	 * maxfifo enabled, if we already have one plane
+	 * enabled
+	 */
+	intel_update_maxfifo(dev_priv);
+
 	reg = DSPCNTR(plane);
 	val = I915_READ(reg);
 	WARN_ON(val & DISPLAY_PLANE_ENABLE);
 
 	I915_WRITE(reg, val | DISPLAY_PLANE_ENABLE);
-	i915_update_plane_stat(dev_priv, pipe, plane, true, DISPLAY_PLANE);
 	intel_flush_primary_plane(dev_priv, plane);
 
 	/*
@@ -2330,12 +2267,22 @@ static void intel_disable_primary_hw_plane(struct drm_i915_private *dev_priv,
 
 	intel_crtc->primary_enabled = false;
 
+	/* update the flags for the planes enabled/disabled */
+	dev_priv->plane_stat &=
+			~VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(pipe);
+
 	reg = DSPCNTR(plane);
 	val = I915_READ(reg);
 	WARN_ON((val & DISPLAY_PLANE_ENABLE) == 0);
 
 	I915_WRITE(reg, val & ~DISPLAY_PLANE_ENABLE);
-	i915_update_plane_stat(dev_priv, pipe, plane, false, DISPLAY_PLANE);
+
+	/*
+	 * After disabling the plane, enbale maxfifo
+	 * if the number of planes enabled is only one
+	 */
+	intel_update_maxfifo(dev_priv);
+
 	intel_flush_primary_plane(dev_priv, plane);
 }
 
@@ -4295,9 +4242,11 @@ static void ironlake_pfit_enable(struct intel_crtc *crtc)
 static void intel_enable_planes(struct drm_crtc *crtc)
 {
 	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	enum pipe pipe = to_intel_crtc(crtc)->pipe;
 	struct drm_plane *plane;
 	struct intel_plane *intel_plane;
+	unsigned val = 0;
 
 	drm_for_each_legacy_plane(plane, &dev->mode_config.plane_list) {
 		intel_plane = to_intel_plane(plane);
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 775cdd0..c0b5211 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -1080,9 +1080,7 @@ bool is_sprite_enabled(struct drm_i915_private *dev_priv,
 			enum pipe pipe, enum plane plane);
 bool is_cursor_enabled(struct drm_i915_private *dev_priv,
 			enum pipe pipe);
-bool is_maxfifo_needed(struct drm_i915_private *dev_priv);
-void i915_update_plane_stat(struct drm_i915_private *dev_priv, int pipe,
-		int plane, bool enable, int planes);
+void intel_update_maxfifo(struct drm_i915_private *dev_priv);
 
 extern void intel_unpin_work_fn(struct work_struct *__work);
 extern void intel_unpin_sprite_work_fn(struct work_struct *__work);
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 6fdc722..047ac36 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -1624,6 +1624,38 @@ static void vlv_update_drain_latency(struct drm_device *dev)
 
 #define single_plane_enabled(mask) is_power_of_2(mask)
 
+void intel_update_maxfifo(struct drm_i915_private *dev_priv)
+{
+	unsigned int val = 0;
+	/*
+	 * Maxfifo is not supported for PIPEC single plane
+	 * Hence having a check while enabling maxfifo
+	 * No need of a check on pipec in disable path
+	 * as it is doens't get enabled
+	 */
+	if (IS_VALLEYVIEW(dev_priv->dev))
+		if (single_plane_enabled(dev_priv->plane_stat)
+			&& !(dev_priv->plane_stat & PIPE_C_MASK)
+			&& !dev_priv->maxfifo_enabled) {
+			I915_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
+			if (IS_CHERRYVIEW(dev_priv->dev)) {
+				val = vlv_punit_read(dev_priv, CHV_DPASSC);
+				vlv_punit_write(dev_priv, CHV_DPASSC,
+						(val | CHV_PW_MAXFIFO_MASK));
+			}
+			dev_priv->maxfifo_enabled = true;
+		} else if (dev_priv->maxfifo_enabled &&
+				!single_plane_enabled(dev_priv->plane_stat)) {
+			I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+			if (IS_CHERRYVIEW(dev_priv->dev)) {
+				val = vlv_punit_read(dev_priv, CHV_DPASSC);
+				vlv_punit_write(dev_priv, CHV_DPASSC,
+					(val & ~(CHV_PW_MAXFIFO_MASK)));
+			}
+			dev_priv->maxfifo_enabled = false;
+		}
+}
+
 static void valleyview_update_wm(struct drm_crtc *crtc)
 {
 	struct drm_device *dev = crtc->dev;
@@ -1631,6 +1663,7 @@ static void valleyview_update_wm(struct drm_crtc *crtc)
 	int planea_wm, planeb_wm, cursora_wm, cursorb_wm;
 	unsigned int enabled = 0;
 	vlv_update_drain_latency(dev);
+	unsigned int val = 0;
 
 	if (g4x_compute_wm0(dev, PIPE_A,
 			    &valleyview_wm_info, latency_ns,
@@ -1644,19 +1677,6 @@ static void valleyview_update_wm(struct drm_crtc *crtc)
 			    &planeb_wm, &cursorb_wm))
 		enabled |= 1 << PIPE_B;
 
-	/*
-	 * TODO: when in linear memory dont enable maxfifo. Need to check with
-	 * the hardware team on this. This solves the FADiag app flicker
-	 */
-	if (is_maxfifo_needed(dev_priv) & !dev_priv->maxfifo_enabled &
-				dev_priv->is_tiled) {
-		I915_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
-		dev_priv->maxfifo_enabled = true;
-	} else if (dev_priv->maxfifo_enabled && !is_maxfifo_needed(dev_priv)) {
-		I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
-		dev_priv->maxfifo_enabled = false;
-	}
-
 	I915_WRITE(DSPFW1,
 		   (DSPFW_SR_VAL << DSPFW_SR_SHIFT) |
 		   (DSPFW_CURSORB_VAL << DSPFW_CURSORB_SHIFT) |
@@ -3158,25 +3178,13 @@ static void valleyview_update_sprite_wm(struct drm_plane *plane,
 	int sprite_prec = 0, sprite_dl = 0;
 	int sprite_prec_mult = 0;
 	u32 mask, shift;
+	u32 val = 0;
 	struct vlv_MA_component_enabled enable;
 
 	enable.plane_enabled = false;
 	enable.cursor_enabled = false;
 	enable.sprite_enabled = enabled;
 
-	/*
-	 * TODO: when in linear memory dont enable maxfifo. Need to check with
-	 * the hardware team on this. This solves the FADiag app flicker
-	 */
-	if (is_maxfifo_needed(dev_priv) & !dev_priv->maxfifo_enabled &
-			dev_priv->is_tiled) {
-		I915_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
-		dev_priv->maxfifo_enabled = true;
-	} else if (dev_priv->maxfifo_enabled && !is_maxfifo_needed(dev_priv)) {
-		I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
-		dev_priv->maxfifo_enabled = false;
-	}
-
 	if (intel_plane->plane == 0) {
 		mask = 0x0000ff00;
 		shift = DDL_SPRITEA_SHIFT;
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 5cda415..11c395d 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -131,20 +131,21 @@ static void intel_update_primary_plane(struct intel_crtc *crtc)
 	struct drm_i915_private *dev_priv = crtc->base.dev->dev_private;
 	int reg = DSPCNTR(crtc->plane);
 	int plane = crtc->plane;
-	bool flagret = true;
 	int pipe = crtc->pipe;
 
 	if (crtc->primary_enabled) {
+		dev_priv->plane_stat |=
+				VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(pipe);
+		intel_update_maxfifo(dev_priv);
 		I915_WRITE(reg, I915_READ(reg) | DISPLAY_PLANE_ENABLE);
-			flagret = true;
 	}
 	else {
 		I915_WRITE(reg, I915_READ(reg) & ~DISPLAY_PLANE_ENABLE);
 		I915_WRITE(DSPSURF(plane), I915_READ(DSPSURF(plane)));
-		flagret = false;
+		dev_priv->plane_stat &=
+				~VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(pipe);
+		intel_update_maxfifo(dev_priv);
 	}
-	i915_update_plane_stat(dev_priv, pipe,
-		plane, flagret, DISPLAY_PLANE);
 }
 
 void
@@ -552,8 +553,16 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	else
 		sprctl &= ~DISPPLANE_180_ROTATION_ENABLE;
 
+	dev_priv->plane_stat |= VLV_UPDATEPLANE_STAT_SP_PER_PIPE(pipe, plane);
+
+	/*
+	 * since there is a possibility of having multiple
+	 * planes enabled, update the maxfifo
+	 */
+	intel_update_maxfifo(dev_priv);
+
 	I915_WRITE(SPCNTR(pipe, plane), sprctl);
-	i915_update_plane_stat(dev_priv, pipe, plane, true, SPRITE_PLANE);
+
 	I915_MODIFY_DISPBASE(SPSURF(pipe, plane),
 		i915_gem_obj_ggtt_offset(obj) + sprsurf_offset);
 
@@ -594,9 +603,12 @@ vlv_disable_plane(struct drm_plane *dplane, struct drm_crtc *crtc)
 	atomic_update = intel_pipe_update_start(intel_crtc, &start_vbl_count);
 	intel_update_primary_plane(intel_crtc);
 
+	dev_priv->plane_stat &=
+			~VLV_UPDATEPLANE_STAT_SP_PER_PIPE(pipe, plane);
+
 	I915_WRITE(SPCNTR(pipe, plane), I915_READ(SPCNTR(pipe, plane)) &
 		   ~SP_ENABLE);
-	i915_update_plane_stat(dev_priv, pipe, plane, false, SPRITE_PLANE);
+
 	/* Activate double buffered register update */
 	I915_MODIFY_DISPBASE(SPSURF(pipe, plane), 0);
 
@@ -608,6 +620,8 @@ vlv_disable_plane(struct drm_plane *dplane, struct drm_crtc *crtc)
 	intel_update_sprite_watermarks(dplane, crtc, 0, 0, false, false);
 	intel_plane->last_plane_state = INTEL_PLANE_STATE_DISABLED;
 	intel_plane->last_pixel_size = 0;
+
+	intel_update_maxfifo(dev_priv);
 }
 
 void intel_prepare_sprite_page_flip(struct drm_device *dev, int plane)
-- 
1.7.9.5

