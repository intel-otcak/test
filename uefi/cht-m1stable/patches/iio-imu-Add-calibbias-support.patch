From d403057e663f8824fce20709319cd3bcc6c1bd7d Mon Sep 17 00:00:00 2001
From: Sathyanarayanan Kuppuswamy <sathyanarayanan.kuppuswamy@intel.com>
Date: Wed, 28 Jan 2015 14:44:27 -0800
Subject: [PATCH] iio: imu: Add calibbias support

Added calibbias support for accel channels. Using these
interfaces userspace can set offset values to x,y,z
accel channels.

Change-Id: Ia7b484cbbd2953109ed7ed560e6a91fa379dc8cb
Signed-off-by: Sathyanarayanan Kuppuswamy <sathyanarayanan.kuppuswamy@intel.com>
---
 drivers/iio/imu/inv_mpu6050/inv_mpu_core.c | 98 +++++++++++++++++++++++++++---
 drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h  |  3 +
 2 files changed, 93 insertions(+), 8 deletions(-)

diff --git a/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c b/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c
index 04c3540..f313d41 100644
--- a/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c
+++ b/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c
@@ -64,6 +64,7 @@ static const struct inv_mpu6050_reg_map reg_set_6050 = {
 	.pwr_mgmt_2             = INV_MPU6050_REG_PWR_MGMT_2,
 	.int_pin_cfg		= INV_MPU6050_REG_INT_PIN_CFG,
 	.who_am_i		= INV_MPU6050_REG_WHOAMI,
+	.accl_off		= INV_MPU6050_REG_ACCEL_OFFSET,
 };
 
 static const struct inv_mpu6050_chip_config chip_config_6050 = {
@@ -292,6 +293,41 @@ static int inv_mpu6050_init_config(struct iio_dev *indio_dev)
 	return result;
 }
 
+static int inv_mpu6050_offset_show(struct inv_mpu6050_state  *st, int reg,
+				int axis, int *val)
+{
+	int ind, result;
+	u8 d[2];
+
+	ind = (axis - IIO_MOD_X) * 2;
+	result = i2c_smbus_read_i2c_block_data(st->client, reg + ind,  2,
+						(u8 *)&d);
+	if (result != 2)
+		return -EINVAL;
+
+	/* register high 8 bits, register low 7 bits with bit 0 reserved */
+	*val = sign_extend32(((d[1] >> 1) | (d[0] << 7)), 14);
+
+	return IIO_VAL_INT;
+}
+
+static int inv_mpu6050_offset_set(struct inv_mpu6050_state  *st, int reg,
+				int axis, int val)
+{
+	int ind, result;
+	u8 d[2];
+
+	ind = (axis - IIO_MOD_X) * 2;
+	/* 8 bits of offset high */
+	d[0] = val >> 7 & 0xFF;
+	/* 7 bits of offset low from bit 1 to bit 7 */
+	d[1] = (val & 0x7F) << 1;
+
+	result = i2c_smbus_write_i2c_block_data(st->client, reg + ind, 2, d);
+
+	return result;
+}
+
 static int inv_mpu6050_sensor_show(struct inv_mpu6050_state  *st, int reg,
 				int axis, int *val)
 {
@@ -385,6 +421,15 @@ error_read_raw:
 
 		return ret;
 	}
+	case IIO_CHAN_INFO_CALIBBIAS:
+		switch (chan->type) {
+		case IIO_ACCEL:
+			return inv_mpu6050_offset_show(st,
+					st->reg->accl_off,
+					chan->channel2, val);
+		default:
+			return -EINVAL;
+		}
 	case IIO_CHAN_INFO_SCALE:
 		switch (chan->type) {
 		case IIO_ANGL_VEL:
@@ -466,6 +511,7 @@ static int inv_mpu6050_write_raw(struct iio_dev *indio_dev,
 	int result;
 
 	mutex_lock(&indio_dev->mlock);
+
 	/* we should only update scale when the chip is disabled, i.e.,
 		not running */
 	if (st->chip_config.enable) {
@@ -490,6 +536,18 @@ static int inv_mpu6050_write_raw(struct iio_dev *indio_dev,
 			break;
 		}
 		break;
+	case IIO_CHAN_INFO_CALIBBIAS:
+		switch (chan->type) {
+		case IIO_ACCEL:
+			result = inv_mpu6050_offset_set(st,
+						st->reg->accl_off,
+						chan->channel2, val);
+			break;
+		default:
+			result = -EINVAL;
+			break;
+		}
+		break;
 	default:
 		result = -EINVAL;
 		break;
@@ -637,7 +695,7 @@ static int inv_mpu6050_validate_trigger(struct iio_dev *indio_dev,
 	return 0;
 }
 
-#define INV_MPU6050_CHAN(_type, _channel2, _index)                    \
+#define INV_MPU6050_GYRO_CHAN(_type, _channel2, _index)               \
 	{                                                             \
 		.type = _type,                                        \
 		.modified = 1,                                        \
@@ -654,6 +712,24 @@ static int inv_mpu6050_validate_trigger(struct iio_dev *indio_dev,
 			     },                                       \
 	}
 
+#define INV_MPU6050_ACCEL_CHAN(_type, _channel2, _index)               \
+	{                                                              \
+		.type = _type,                                         \
+		.modified = 1,                                         \
+		.channel2 = _channel2,                                 \
+		.info_mask_shared_by_type =  BIT(IIO_CHAN_INFO_SCALE), \
+		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |         \
+				BIT(IIO_CHAN_INFO_CALIBBIAS), 	       \
+		.scan_index = _index,                                  \
+		.scan_type = {                                         \
+				.sign = 's',                           \
+				.realbits = 16,                        \
+				.storagebits = 16,                     \
+				.shift = 0 ,                           \
+				.endianness = IIO_BE,                  \
+			     },                                        \
+	}
+
 static const struct iio_chan_spec inv_mpu_channels[] = {
 	IIO_CHAN_SOFT_TIMESTAMP(INV_MPU6050_SCAN_TIMESTAMP),
 	/*
@@ -667,13 +743,19 @@ static const struct iio_chan_spec inv_mpu_channels[] = {
 				| BIT(IIO_CHAN_INFO_SCALE),
 		.scan_index = -1,
 	},
-	INV_MPU6050_CHAN(IIO_ANGL_VEL, IIO_MOD_X, INV_MPU6050_SCAN_GYRO_X),
-	INV_MPU6050_CHAN(IIO_ANGL_VEL, IIO_MOD_Y, INV_MPU6050_SCAN_GYRO_Y),
-	INV_MPU6050_CHAN(IIO_ANGL_VEL, IIO_MOD_Z, INV_MPU6050_SCAN_GYRO_Z),
-
-	INV_MPU6050_CHAN(IIO_ACCEL, IIO_MOD_X, INV_MPU6050_SCAN_ACCL_X),
-	INV_MPU6050_CHAN(IIO_ACCEL, IIO_MOD_Y, INV_MPU6050_SCAN_ACCL_Y),
-	INV_MPU6050_CHAN(IIO_ACCEL, IIO_MOD_Z, INV_MPU6050_SCAN_ACCL_Z),
+	INV_MPU6050_GYRO_CHAN(IIO_ANGL_VEL, IIO_MOD_X,
+					INV_MPU6050_SCAN_GYRO_X),
+	INV_MPU6050_GYRO_CHAN(IIO_ANGL_VEL, IIO_MOD_Y,
+					INV_MPU6050_SCAN_GYRO_Y),
+	INV_MPU6050_GYRO_CHAN(IIO_ANGL_VEL, IIO_MOD_Z,
+					INV_MPU6050_SCAN_GYRO_Z),
+
+	INV_MPU6050_ACCEL_CHAN(IIO_ACCEL, IIO_MOD_X,
+					INV_MPU6050_SCAN_ACCL_X),
+	INV_MPU6050_ACCEL_CHAN(IIO_ACCEL, IIO_MOD_Y,
+					INV_MPU6050_SCAN_ACCL_Y),
+	INV_MPU6050_ACCEL_CHAN(IIO_ACCEL, IIO_MOD_Z,
+					INV_MPU6050_SCAN_ACCL_Z),
 };
 
 /* constant IIO attribute */
diff --git a/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h b/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h
index a232506..4904725 100644
--- a/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h
+++ b/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h
@@ -56,6 +56,7 @@ struct inv_mpu6050_reg_map {
 	u8 pwr_mgmt_2;
 	u8 int_pin_cfg;
 	u8 who_am_i;
+	u8 accl_off;
 };
 
 /*device enum */
@@ -165,6 +166,8 @@ struct inv_mpu6050_state {
 #define INV_MPU6050_REG_FIFO_COUNT_H        0x72
 #define INV_MPU6050_REG_FIFO_R_W            0x74
 
+#define INV_MPU6050_REG_ACCEL_OFFSET	    0x06
+
 #define INV_MPU6050_BYTES_PER_3AXIS_SENSOR   6
 #define INV_MPU6050_FIFO_COUNT_BYTE          2
 #define INV_MPU6050_FIFO_THRESHOLD           500
-- 
1.9.1

