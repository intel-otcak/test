From b4ad94973bbb5a4d553ffcbd1677cbccbfb84759 Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Thu, 2 Jul 2015 16:13:28 +0530
Subject: [PATCH] [USBC_PD]: Fix for consumer policy engine timeout and looping
 issue

In consumer policy engine when the PD data transfer sometimes timeout
is happening, since the timer is started before receiving ack(good
crc) from the PD charger. Hence added good crc checking. Also added
mutex lock when setting the sink port pe state for synchronizing the
sink port policy engine states.

Change-Id: Ibe7bf22fac2bab5f24e5eddcf5ea3cfa60cdd614
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-37820
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
---
 drivers/usb/typec/pd/policy_engine.c |  33 ++++-----
 drivers/usb/typec/pd/sink_port_pe.c  | 125 +++++++++++++++++++++--------------
 drivers/usb/typec/pd/sink_port_pe.h  |   3 +
 3 files changed, 98 insertions(+), 63 deletions(-)

diff --git a/drivers/usb/typec/pd/policy_engine.c b/drivers/usb/typec/pd/policy_engine.c
index c39d27cfe67e..aeb63a2b7665 100644
--- a/drivers/usb/typec/pd/policy_engine.c
+++ b/drivers/usb/typec/pd/policy_engine.c
@@ -98,6 +98,7 @@ static int policy_engine_process_data_msg(struct policy_engine *pe,
 	struct policy *p = NULL;
 	int ret = 0;
 
+	pr_debug("PE: %s Data msg received evt - %d\n", __func__, evt);
 	switch (evt) {
 	case PE_EVT_RCVD_SRC_CAP:
 	case PE_EVT_RCVD_REQUEST:
@@ -117,7 +118,7 @@ static int policy_engine_process_data_msg(struct policy_engine *pe,
 		}
 		break;
 	default:
-		pr_warn("PE:%s: Invalid data msg, event=%d\n", __func__, evt);
+		pr_warn("PE: %s invalid data msg, event=%d\n", __func__, evt);
 		pe_dump_data_msg(pkt);
 	}
 
@@ -134,11 +135,12 @@ static int policy_engine_process_ctrl_msg(struct policy_engine *pe,
 	struct policy *p = NULL;
 	int ret = 0;
 
+	pr_debug("PE: %s Ctrl msg received evt - %d\n", __func__, evt);
 	switch (evt) {
 	case PE_EVT_RCVD_GOODCRC:
 		p = pe_get_running_policy(&pe->policy_list);
 		if (!p)
-			pr_err("PE:No running policy to forward GCRC msgs\n");
+			pr_err("PE: No running policy to forward GCRC msgs\n");
 		break;
 	case PE_EVT_RCVD_GOTOMIN:
 	case PE_EVT_RCVD_ACCEPT:
@@ -151,13 +153,12 @@ static int policy_engine_process_ctrl_msg(struct policy_engine *pe,
 	case PE_EVT_RCVD_PR_SWAP:
 	case PE_EVT_RCVD_VCONN_SWAP:
 	case PE_EVT_RCVD_WAIT:
-		pr_debug("PE:%s: Ctrl msg received\n", __func__);
 		p = pe_get_active_src_or_snk_policy(&pe->policy_list);
 		if (!p)
-			pr_err("PE:No active policy to forward Ctrl msgs\n");
+			pr_err("PE: No active policy to forward Ctrl msgs\n");
 		break;
 	default:
-		pr_warn("PE:%s:Not a valid ctrl msg to process, event=%d\n",
+		pr_warn("PE: %s Not a valid ctrl msg to process, event=%d\n",
 				__func__, evt);
 		pe_dump_header(&pkt->header);
 	}
@@ -489,11 +490,11 @@ static void pe_policy_status_changed(struct policy_engine *pe, int policy_type,
 		p = pe_get_policy(pe, POLICY_TYPE_DISPLAY);
 		/* Start the display policy */
 		if (!p) {
-			pr_err("PE:%s:No Display policy found\n", __func__);
+			pr_err("PE: %s No Display policy found\n", __func__);
 			return;
 		}
 		if (p->start) {
-			pr_info("PE:%s:Stating disp policy\n", __func__);
+			pr_info("PE: %s Stating disp policy\n", __func__);
 			p->start(p);
 		}
 	}
@@ -513,7 +514,7 @@ static void pe_init_policy(struct work_struct *work)
 		case POLICY_TYPE_SINK:
 			policy = sink_port_policy_init(pe);
 			if (IS_ERR_OR_NULL(policy)) {
-				pr_err("%s: unable to init SINK_POLICY\n",
+				pr_err("PE: %s unable to init SINK_POLICY\n",
 								__func__);
 				continue;
 			}
@@ -522,22 +523,24 @@ static void pe_init_policy(struct work_struct *work)
 		case POLICY_TYPE_SOURCE:
 			policy = src_pe_init(pe);
 			if (IS_ERR_OR_NULL(policy)) {
-				pr_err("%s: unable to init SOURCE_POLICY\n",
+				pr_err("PE: %s unable to init SOURCE_POLICY\n",
 								__func__);
 				continue;
 			}
 			list_add_tail(&policy->list, &pe->policy_list);
-			pr_debug("%s:Successfuly init source pe\n", __func__);
+			pr_debug("PE: %s Successfuly init source pe\n",
+					__func__);
 			break;
 		case POLICY_TYPE_DISPLAY:
 			policy = disp_pe_init(pe);
 			if (IS_ERR_OR_NULL(policy)) {
-				pr_err("%s: unable to init DOSPLAY_POLICY\n",
+				pr_err("PE: %s unable to init DOSPLAY_POLICY\n",
 								__func__);
 				continue;
 			}
 			list_add_tail(&policy->list, &pe->policy_list);
-			pr_debug("%s:Successfuly init display pe\n", __func__);
+			pr_debug("PE: %s Successfuly init display pe\n",
+					__func__);
 			break;
 		default:
 			/* invalid, dont add it to policy */
@@ -591,7 +594,7 @@ static void pe_policy_work(struct work_struct *work)
 		}
 		break;
 	default:
-		pr_err("%s: Unknown cable_type=%d\n",
+		pr_err("PE: %s Unknown cable_type=%d\n",
 			__func__, pe->cbl_type);
 	}
 }
@@ -605,7 +608,7 @@ static int sink_port_event(struct notifier_block *nb, unsigned long event,
 	int cable_state;
 
 	cable_state = extcon_get_cable_state(edev, "USB_TYPEC_UFP");
-	pr_info("%s:USB_TYPEC_UFP event with cable_state=%d\n",
+	pr_info("PE: %s USB_TYPEC_UFP event with cable_state=%d\n",
 			__func__, cable_state);
 	pe->cbl_type = cable_state ? CABLE_TYPE_CONSUMER : CABLE_TYPE_UNKNOWN;
 	schedule_work(&pe->policy_work);
@@ -621,7 +624,7 @@ static int source_port_event(struct notifier_block *nb, unsigned long event,
 	int cable_state;
 
 	cable_state = extcon_get_cable_state(edev, "USB_TYPEC_DFP");
-	pr_info("%s:USB_TYPEC_DFP event with cable_state=%d\n",
+	pr_info("PE: %s USB_TYPEC_DFP event with cable_state=%d\n",
 			__func__, cable_state);
 	pe->cbl_type = cable_state ? CABLE_TYPE_PROVIDER : CABLE_TYPE_UNKNOWN;
 	schedule_work(&pe->policy_work);
diff --git a/drivers/usb/typec/pd/sink_port_pe.c b/drivers/usb/typec/pd/sink_port_pe.c
index cf20a8f2de09..9d16008426f7 100644
--- a/drivers/usb/typec/pd/sink_port_pe.c
+++ b/drivers/usb/typec/pd/sink_port_pe.c
@@ -27,9 +27,22 @@
 #include <linux/notifier.h>
 #include <linux/kfifo.h>
 #include <linux/err.h>
+#include <linux/sched.h>
 #include "policy_engine.h"
 #include "sink_port_pe.h"
 
+static inline void snkpe_update_state(struct sink_port_pe *sink,
+					enum pe_states cur_state)
+{
+	if (!sink)
+		return;
+
+	mutex_lock(&sink->snkpe_state_lock);
+	sink->prev_state = sink->cur_state;
+	sink->cur_state = cur_state;
+	mutex_unlock(&sink->snkpe_state_lock);
+}
+
 static int snkpe_timeout_transition_check(struct sink_port_pe *sink)
 {
 	int ret = 0;
@@ -49,8 +62,7 @@ static int snkpe_timeout_transition_check(struct sink_port_pe *sink)
 		tout == SENDER_RESPONSE_TIMER) {
 
 		/* Move to PE_SNK_Hard_Reset state */
-		sink->prev_state = sink->cur_state;
-		sink->cur_state = PE_SNK_HARD_RESET;
+		snkpe_update_state(sink, PE_SNK_HARD_RESET);
 
 		/* FIXME: Not generating hard reset signal now, since vbus is
 		 * getting diconnect and after that PD charger is not responding
@@ -62,8 +74,7 @@ static int snkpe_timeout_transition_check(struct sink_port_pe *sink)
 		sink->hard_reset_count > HARD_RESET_COUNT_N) {
 
 		/* FIXME : handle ErrorRecovery state */
-		sink->prev_state = sink->cur_state;
-		sink->cur_state = ERROR_RECOVERY;
+		snkpe_update_state(sink, ERROR_RECOVERY);
 	}
 
 	return ret;
@@ -242,8 +253,10 @@ static int snkpe_start(struct sink_port_pe *sink)
 		complete(&sink->nrt_complete);
 		return 0;
 	}
-	sink->p->status = POLICY_STATUS_RUNNING;
 
+	sink->p->status = POLICY_STATUS_RUNNING;
+	sink->p->state = POLICY_STATE_ONLINE;
+	sink->is_goodcrc_received = false;
 	/*---------- Start of Sink Port PE --------------*/
 	/* get the vbus state, in case of boot of vbus */
 	vbus_state = policy_get_vbus_state(sink->p);
@@ -260,13 +273,14 @@ static int snkpe_start(struct sink_port_pe *sink)
 		if (sink->cur_state != PE_SNK_STARTUP)
 			return 0;
 	} else {
+		mutex_lock(&sink->snkpe_state_lock);
 		sink->cur_state = PE_SNK_STARTUP;
+		mutex_lock(&sink->snkpe_state_lock);
 		return snkpe_do_prot_reset(sink);
 	}
 
 	/* move the state from PE_SNK_STARTUP to PE_SNK_DISCOVERY */
-	sink->prev_state = sink->cur_state;
-	sink->cur_state = PE_SNK_DISCOVERY;
+	snkpe_update_state(sink, PE_SNK_DISCOVERY);
 
 	/* wait for vbus: get notification from device policy manager
 	 * to continue the next state.
@@ -282,13 +296,13 @@ static inline int sink_port_policy_start(struct policy *p)
 	struct sink_port_pe *sink = p->priv;
 
 	pr_debug("SNKPE: %s\n", __func__);
-
+	mutex_lock(&sink->snkpe_state_lock);
 	sink->cur_state = PE_SNK_STARTUP;
-	sink->p->state = POLICY_STATE_ONLINE;
+	mutex_unlock(&sink->snkpe_state_lock);
 	return snkpe_start(sink);
 }
 
-int sink_port_policy_stop(struct policy *p)
+static int sink_port_policy_stop(struct policy *p)
 {
 	struct sink_port_pe *sink = p->priv;
 
@@ -304,12 +318,14 @@ int sink_port_policy_stop(struct policy *p)
 	snkpe_reinitialize_completion(sink);
 	/* FIXME: handle the stop state */
 	snkpe_do_prot_reset(sink);
+	mutex_lock(&sink->snkpe_state_lock);
 	sink->cur_state = PE_SNK_STARTUP;
+	mutex_unlock(&sink->snkpe_state_lock);
 
 	return 0;
 }
 
-int sink_port_policy_rcv_cmd(struct policy *p, enum pe_event evt)
+static int sink_port_policy_rcv_cmd(struct policy *p, enum pe_event evt)
 {
 	int ret = 0;
 	struct sink_port_pe *sink = p->priv;
@@ -318,19 +334,21 @@ int sink_port_policy_rcv_cmd(struct policy *p, enum pe_event evt)
 	case PE_EVT_RCVD_HARD_RESET:
 		ret = snkpe_do_prot_reset(sink);
 		sink_port_policy_stop(p);
-		sink->cur_state = PE_SNK_STARTUP;
+		snkpe_update_state(sink, PE_SNK_STARTUP);
 		sink_port_policy_start(p);
 		break;
 	case PE_EVT_RCVD_HARD_RESET_COMPLETE:
 		return snkpe_handle_transition_to_default(sink);
 	default:
+		pr_err("SNKPE: %s evt - %d\n", __func__, evt);
+		ret = -EINVAL;
 		break;
 	}
 
 	return ret;
 }
 
-int sink_port_policy_rcv_pkt(struct policy *p, struct pd_packet *pkt,
+static int sink_port_policy_rcv_pkt(struct policy *p, struct pd_packet *pkt,
 				enum pe_event evt)
 {
 	int ret = 0;
@@ -399,6 +417,16 @@ int sink_port_policy_rcv_pkt(struct policy *p, struct pd_packet *pkt,
 			ret = -EINVAL;
 		}
 		break;
+	case PE_EVT_RCVD_GOODCRC:
+		if (sink->cur_state == PE_SNK_SELECT_CAPABILITY) {
+			sink->is_goodcrc_received = true;
+			wake_up(&sink->wait_goodcrc);
+			pr_debug("SNKPE: Received ack for PD_DATA_MSG_REQUEST\n");
+		} else if (sink->prev_state == PE_SNK_GIVE_SINK_CAP &&
+			sink->cur_state == PE_SNK_READY) {
+			pr_debug("SNKPE: Received ack for PD_DATA_MSG_SINK_CAP\n");
+		}
+		break;
 	default:
 		break;
 	}
@@ -422,9 +450,8 @@ static int snkpe_setup_charging(struct sink_port_pe *sink)
 	ret = policy_set_charger_mode(sink->p, CHRGR_ENABLE);
 	if (ret < 0)
 		pr_err("SNKPE: Error in enabling charger (%d)\n", ret);
-	else if ((sink->cur_state == PE_SNK_READY) && !ret)
+	else
 		pr_info("SNKPE: Consumer Policy Negotiation Success!\n");
-
 	return ret;
 }
 
@@ -433,8 +460,7 @@ static int snkpe_handle_transition_to_default(struct sink_port_pe *sink)
 	int ret = 0;
 	unsigned long timeout;
 
-	sink->prev_state = sink->cur_state;
-	sink->cur_state = PE_SNK_TRANSITION_TO_DEFAULT;
+	snkpe_update_state(sink, PE_SNK_TRANSITION_TO_DEFAULT);
 
 	/* FIXME: Request Device Policy Manager to request power sink transition
 	 * to default Reset local HW, handled automatically based on cable event
@@ -471,18 +497,16 @@ static int snkpe_handle_transition_sink_state(struct sink_port_pe *sink)
 	int ret = 0;
 	unsigned long timeout;
 
-	sink->prev_state = sink->cur_state;
-	sink->cur_state = PE_SNK_TRANSITION_SINK;
+	snkpe_update_state(sink, PE_SNK_TRANSITION_SINK);
 
 	/* FIXME: Request Device Policy Manager transitions sink power
 	 * supply to new power (if required): handled in next state (READY) */
 
 	/* Put the charger into HiZ mode */
 	ret = policy_set_charger_mode(sink->p, CHRGR_SET_HZ);
-	if (ret < 0) {
+	if (ret < 0)
 		pr_err("SNKPE: Error in putting into HiZ mode (%d)\n", ret);
-		goto error;
-	}
+
 	if (sink->pevt != PE_EVT_RCVD_GOTOMIN)
 		sink->ilim = sink->rcap.ma;
 	else
@@ -514,6 +538,9 @@ static int snkpe_handle_select_capability_state(struct sink_port_pe *sink,
 	u32 data = 0;
 	unsigned long timeout;
 
+	/* move the next state PE_SNK_Select_Capability */
+	snkpe_update_state(sink, PE_SNK_SELECT_CAPABILITY);
+
 	evt = PE_EVT_SEND_REQUEST;
 	/* make request message and send to PE -> protocol */
 	ret = snkpe_get_msg(sink, pkt, evt, &data);
@@ -527,17 +554,18 @@ static int snkpe_handle_select_capability_state(struct sink_port_pe *sink,
 		pr_err("SNKPE: Error in sending packet!\n");
 		goto error;
 	}
-	pr_debug("SNKPE: PD_DATA_MSG_REQUEST Sent!\n");
+	pr_debug("SNKPE: PD_DATA_MSG_REQUEST Sent\n");
 
 	/* Keeping backup to use later if required for wait event and
 	 * sink request timer timeout */
 	memcpy(&sink->prev_pkt, pkt, sizeof(struct pd_packet));
 
-	/* move the next state PE_SNK_Select_Capability */
-	if (sink->cur_state == PE_SNK_EVALUATE_CAPABILITY) {
-		sink->prev_state = sink->cur_state;
-		sink->cur_state = PE_SNK_SELECT_CAPABILITY;
-	}
+	ret = wait_event_timeout(sink->wait_goodcrc,
+			(sink->is_goodcrc_received == true),
+			HZ);
+	if (ret == 0)
+		pr_err("SNKPE: Timeout for Good CRC continue anyway!\n");
+	sink->is_goodcrc_received = false;
 
 	/* Initialize and run SenderResponseTimer */
 	timeout = msecs_to_jiffies(TYPEC_SENDER_RESPONSE_TIMER);
@@ -569,8 +597,7 @@ static int snkpe_handle_give_snk_cap_state(struct sink_port_pe *sink)
 	struct power_caps pcaps;
 	struct pd_sink_fixed_pdo pdo[MAX_NUM_DATA_OBJ] = { {0} };
 
-	sink->prev_state = sink->cur_state;
-	sink->cur_state = PE_SNK_GIVE_SINK_CAP;
+	snkpe_update_state(sink, PE_SNK_GIVE_SINK_CAP);
 
 	ret = policy_get_snkpwr_caps(sink->p, &pcaps);
 	if (ret < 0)
@@ -599,6 +626,7 @@ static int snkpe_handle_give_snk_cap_state(struct sink_port_pe *sink)
 		pr_err("SNKPE: Error in sending packet!\n");
 		goto error;
 	}
+	pr_debug("SNKPE: PD_DATA_MSG_SINK_CAP sent\n");
 
 	return snkpe_handle_snk_ready_state(sink, sink->pevt);
 
@@ -631,23 +659,25 @@ static int snkpe_handle_snk_ready_state(struct sink_port_pe *sink,
 	int ret = 0;
 	unsigned long timeout;
 
-	sink->prev_state = sink->cur_state;
-	sink->cur_state = PE_SNK_READY;
+	snkpe_update_state(sink, PE_SNK_READY);
 
 	/* TODO: if Update remote capabilities request from received from
 	 * Device Policy Manager move to PE_SNK_Get_Source_Cap state and
 	 * send Send Get_Source_Cap message, then move to PE_SNK_Ready state.
 	 */
 
-	if (evt == PE_EVT_RCVD_PS_RDY) {
-
+	switch (evt) {
+	case PE_EVT_RCVD_PS_RDY:
 		ret = snkpe_setup_charging(sink);
 		if (ret < 0)
-			pr_err("SNKPE: Error in setup charging (%d)\n",
-					ret);
-	} else if (evt == PE_EVT_RCVD_REJECT) {
-		/* Do nothing and stay at the same state */
-	} else if (evt == PE_EVT_RCVD_WAIT) {
+			pr_warn("SNKPE: Error in setup charging (%d)\n", ret);
+		break;
+	case PE_EVT_RCVD_REJECT:
+	case PE_EVT_SEND_SNK_CAP:
+	case PE_EVT_SEND_GET_SRC_CAP:
+		/* Do nothing and continue in the same state */
+		break;
+	case PE_EVT_RCVD_WAIT:
 		/* Initialize and run SinkRequestTimer (on receiving
 		 * Wait) for PS_RDY */
 		timeout = msecs_to_jiffies(TYPEC_SINK_REQUEST_TIMER);
@@ -663,11 +693,9 @@ static int snkpe_handle_snk_ready_state(struct sink_port_pe *sink,
 
 		/* Received PS_RDY event after a WAIT event */
 		ret = snkpe_handle_psrdy_after_wait_state(sink);
-	} else if (evt == PE_EVT_SEND_SNK_CAP ||
-			evt == PE_EVT_SEND_GET_SRC_CAP) {
-		/* Do nothing and continue in the same state */
-	} else {
-		pr_err("SNKPE: Unknown state to handle ready\n");
+		break;
+	default:
+		pr_err("SNKPE: Unknown state to handle ready evt = %d\n", evt);
 		ret = -EINVAL;
 	}
 
@@ -681,8 +709,8 @@ static int snkpe_handle_evaluate_capability(struct sink_port_pe *sink)
 	int ret = 0;
 	struct pd_packet pkt = { {0} };
 
-	sink->prev_state = sink->cur_state;
-	sink->cur_state = PE_SNK_EVALUATE_CAPABILITY;
+	snkpe_update_state(sink, PE_SNK_EVALUATE_CAPABILITY);
+
 	/* FIXME: Stop NoResponseTimer and reset HardResetCounter to
 	 * zero. Ask Device Policy Manager to evaluate option based on
 	 * supplied capabilities (from supplied capabilities, reserve or
@@ -711,8 +739,7 @@ static int snkpe_vbus_attached(struct sink_port_pe *sink)
 
 	if (sink->prev_state == PE_SNK_STARTUP &&
 		sink->cur_state == PE_SNK_DISCOVERY) {
-		sink->prev_state = sink->cur_state;
-		sink->cur_state = PE_SNK_WAIT_FOR_CAPABILITIES;
+		snkpe_update_state(sink, PE_SNK_WAIT_FOR_CAPABILITIES);
 
 		/* Initialize and run SinkWaitCapTimer */
 		/* unblock this once source cap rcv by checking the cur_state */
@@ -747,6 +774,7 @@ struct policy *sink_port_policy_init(struct policy_engine *pe)
 		goto error0;
 	}
 	snkpe->p = p;
+	init_waitqueue_head(&snkpe->wait_goodcrc);
 
 	/* Allocate memory for PD packet FIFO */
 	if (kfifo_alloc(&snkpe->pkt_fifo,
@@ -775,6 +803,7 @@ struct policy *sink_port_policy_init(struct policy_engine *pe)
 	init_completion(&snkpe->sat_complete);
 	init_completion(&snkpe->srqt_complete);
 	init_completion(&snkpe->pktwt_complete);
+	mutex_init(&snkpe->snkpe_state_lock);
 
 	return snkpe->p;
 
diff --git a/drivers/usb/typec/pd/sink_port_pe.h b/drivers/usb/typec/pd/sink_port_pe.h
index 24f81901f30a..80a4a86dc4ba 100644
--- a/drivers/usb/typec/pd/sink_port_pe.h
+++ b/drivers/usb/typec/pd/sink_port_pe.h
@@ -99,7 +99,10 @@ struct sink_port_pe {
 	enum pe_event pevt;
 	enum pe_states cur_state;
 	enum pe_states prev_state;
+	struct mutex snkpe_state_lock;
 	enum snkpe_timeout timeout;
+	wait_queue_head_t wait_goodcrc;
+	bool is_goodcrc_received;
 	u8 hard_reset_count;
 	bool is_vbus_connected;
 };
-- 
1.9.1

