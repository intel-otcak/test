From f9dbbfc218666b3a91b25e4358b23d4e4576a27c Mon Sep 17 00:00:00 2001
Message-Id: <f9dbbfc218666b3a91b25e4358b23d4e4576a27c.1432858002.git.chang-joon.lee@intel.com>
In-Reply-To: <944dfa31d45b9ee101932dfa029ec3452a83cb30.1432858002.git.chang-joon.lee@intel.com>
References: <944dfa31d45b9ee101932dfa029ec3452a83cb30.1432858002.git.chang-joon.lee@intel.com>
From: Deepak S <deepak.s@intel.com>
Date: Fri, 20 Mar 2015 19:08:52 +0530
Subject: [PATCH 4/7] FOR_UPSTREAM [VPG]: drm/i915/chv: Enabling RC6
 immediately during init/resume

Previously RC6 was getting enabled through deferred work item which
was scheduled after 1s. This will keep Power Wells ON for 1s.
Since RC6 enabling does not involve PCU communication, Enabling RC6
during init/resume will not increase resume time or boot time.

Enabling RC6 immediately will help power gate render and media well
immediately that will save power.

Issue: GMINL-7572
Change-Id: If06e61e57750eeba462167f674e40fccb26786af
Signed-off-by: Deepak S <deepak.s@intel.com>
---
 drivers/gpu/drm/i915/intel_pm.c | 29 +++++++++++++++++------------
 1 file changed, 17 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index c5d81fa..5e9ff76 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -4855,15 +4855,13 @@ static void valleyview_cleanup_gt_powersave(struct drm_device *dev)
 	valleyview_cleanup_pctx(dev);
 }
 
-static void cherryview_enable_rps(struct drm_device *dev)
+static void cherryview_enable_rc6(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_engine_cs *ring;
-	u32 gtfifodbg, val, rc6_mode = 0, pcbr;
+	u32 gtfifodbg, rc6_mode = 0, pcbr;
 	int i;
 
-	WARN_ON(!mutex_is_locked(&dev_priv->rps.hw_lock));
-
 	gtfifodbg = I915_READ(GTFIFODBG);
 	if (gtfifodbg) {
 		DRM_DEBUG_DRIVER("GT fifo had a previous error %x\n",
@@ -4873,10 +4871,6 @@ static void cherryview_enable_rps(struct drm_device *dev)
 
 	cherryview_check_pctx(dev_priv);
 
-	/* 1a & 1b: Get forcewake during program sequence. Although the driver
-	 * hasn't enabled a state yet where we need forcewake, BIOS may have.*/
-	gen6_gt_force_wake_get(dev_priv, FORCEWAKE_ALL);
-
 	/* 2a: Program RC6 thresholds.*/
 	I915_WRITE(GEN6_RC6_WAKE_RATE_LIMIT, 40 << 16);
 	I915_WRITE(GEN6_RC_EVALUATION_INTERVAL, 125000); /* 12500 * 1280ns */
@@ -4907,7 +4901,17 @@ static void cherryview_enable_rps(struct drm_device *dev)
 						(pcbr >> VLV_PCBR_ADDR_SHIFT))
 		vlv_set_rc6_mode(dev, false);
 
-	I915_WRITE(GEN6_RC_CONTROL, rc6_mode);
+	intel_print_rc6_info(dev, rc6_mode);
+}
+
+static void cherryview_enable_rps(struct drm_device *dev)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	u32 val;
+
+	WARN_ON(!mutex_is_locked(&dev_priv->rps.hw_lock));
+
+	gen6_gt_force_wake_get(dev_priv, FORCEWAKE_ALL);
 
 	/* 4 Program defaults and thresholds for RPS*/
 	I915_WRITE(GEN6_RP_UP_THRESHOLD, 59400);
@@ -5895,12 +5899,13 @@ void intel_enable_gt_powersave(struct drm_device *dev)
 		}
 
 		/*
-		 * Enabling RC6 for VLV here itself and only deferring turbo
+		 * Enabling RC6 for VLV/CHV here itself and only deferring turbo
 		 * enabling.
 		 */
-		if (IS_VALLEYVIEW(dev) && !IS_CHERRYVIEW(dev)) {
+		if (IS_CHERRYVIEW(dev))
+			cherryview_enable_rc6(dev);
+		else if (IS_VALLEYVIEW(dev))
 			valleyview_enable_rc6(dev);
-		}
 
 		/*
 		 * PCU communication is slow and this doesn't need to be
-- 
1.9.1

