From 85340cbeba214fecdec183ca3592862eaa97985c Mon Sep 17 00:00:00 2001
Message-Id: <85340cbeba214fecdec183ca3592862eaa97985c.1435736732.git.chang-joon.lee@intel.com>
In-Reply-To: <7c8af138acbe907021f93af6d5e51d2a311ab097.1435736732.git.chang-joon.lee@intel.com>
References: <7c8af138acbe907021f93af6d5e51d2a311ab097.1435736732.git.chang-joon.lee@intel.com>
From: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
Date: Tue, 23 Jun 2015 08:38:59 +0530
Subject: [PATCH 3/3] FOR_UPSTREAM [VPG]: drm/i915: clear device ready before
 ULPS enter sequence in disable sequence

The device ready bit should not be toggled when changing ULPS sequence. If
device ready bit is toggled, random DSI controller hang have been observed.
Most of the DSI registers returns a value of 0 including Gen FIFO status
register. Sending generic command, DPI control command fails and ultimately
mode set fails with pipe not running and vblank not getting generated. In the
current code as part of ULPS enter sequence in DSI disable sequence, the
device ready bit is getting toggled. This patch fixes this issue by clearing
device ready before starting ULPS enter sequence in DSI disable sequence.

Issue: IMINAN-38776
Change-Id: Ie2e18251c0955cca11ad6f55998bceff17313de8
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h  |  1 +
 drivers/gpu/drm/i915/intel_dsi.c | 14 ++++++++------
 2 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index dfde670..3d6c2b1 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -6808,6 +6808,7 @@ enum punit_power_well {
 #define  ULPS_STATE_EXIT				(1 << 1)
 #define  ULPS_STATE_NORMAL_OPERATION			(0 << 1)
 #define  DEVICE_READY					(1 << 0)
+#define  CLEAR_DEVICE_READY				(0 << 0)
 
 #define _MIPIA_INTR_STAT			(VLV_DISPLAY_BASE + 0xb004)
 #define _MIPIB_INTR_STAT			(VLV_DISPLAY_BASE + 0xb804)
diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index f5c0ac8..6b61832 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -640,20 +640,22 @@ static void intel_dsi_clear_device_ready(struct intel_encoder *encoder)
 
 	DRM_DEBUG_KMS("\n");
 
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_ENTER |
-								DEVICE_READY);
+	intel_dsi_write_dev_rdy_on_A_and_C(encoder, CLEAR_DEVICE_READY);
+
+	/* wait for dsi controller to be off */
+	usleep_range(2000, 2500);
+
+	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_ENTER);
 
 	/* wait for LP state to go 00 */
 	usleep_range(2000, 2500);
 
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_EXIT |
-								DEVICE_READY);
+	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_EXIT);
 
 	/* wait for LP state to goto 11 */
 	usleep_range(2000, 2500);
 
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_ENTER |
-								DEVICE_READY);
+	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_ENTER);
 
 	/* wait for LP state to go 00 */
 	usleep_range(2000, 2500);
-- 
1.9.1

