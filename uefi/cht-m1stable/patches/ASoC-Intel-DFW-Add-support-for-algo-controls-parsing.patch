From 8e19b0f3ba0722fee9012835e8b4c36d106d003d Mon Sep 17 00:00:00 2001
From: Mythri P K <mythri.p.k@intel.com>
Date: Mon, 28 Apr 2014 19:04:22 +0530
Subject: [PATCH 30/39] ASoC: Intel: DFW: Add support for algo controls parsing

Issue: GMINL-3680

Algo controls passed as a part of dfw binary needs to be parsed
and added, add support for it in platform driver.

Change-Id: I39366842f890b4d7e67a51302ca0b542feedb4d9
Signed-off-by: Mythri P K <mythri.p.k@intel.com>
---
 sound/soc/intel/platform-libs/controls_v2_dpcm.c | 41 ++++++++++++++++++++++--
 sound/soc/intel/platform-libs/sst_vendor.h       | 29 +++++++++++++++++
 sound/soc/intel/platform-libs/sst_widgets.h      |  5 ---
 3 files changed, 68 insertions(+), 7 deletions(-)

diff --git a/sound/soc/intel/platform-libs/controls_v2_dpcm.c b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
index cea7739..2c2e199 100644
--- a/sound/soc/intel/platform-libs/controls_v2_dpcm.c
+++ b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
@@ -2020,8 +2020,43 @@ static int sst_map_modules_to_pipe(struct snd_soc_platform *platform)
 const struct snd_soc_fw_kcontrol_ops control_ops[] = {
 	{SOC_CONTROL_IO_SST_GAIN, sst_gain_get, sst_gain_put, snd_soc_info_volsw},
 	{SOC_CONTROL_IO_SST_MUTE, sst_gain_get, sst_gain_put, snd_soc_info_bool_ext},
+	{SOC_CONTROL_IO_SST_ALGO_PARAMS, sst_algo_control_get, sst_algo_control_set, snd_soc_info_bytes_ext},
+	{SOC_CONTROL_IO_SST_ALGO_BYPASS, sst_algo_control_get, sst_algo_control_set, snd_soc_info_bool_ext},
 };
 
+static int sst_copy_algo_control(struct snd_soc_platform *platform,
+		struct soc_bytes_ext *be, struct snd_soc_fw_bytes_ext *mbe)
+{
+	struct sst_algo_data *ac;
+	struct sst_dfw_algo_data *fw_ac = (struct sst_dfw_algo_data *)mbe->pvt_data;
+	ac = devm_kzalloc(platform->dev, sizeof(*ac), GFP_KERNEL);
+	if (!ac) {
+		pr_err("kzalloc failed\n");
+		return -ENOMEM;
+	}
+
+	/* Fill private data */
+	ac->type = fw_ac->type;
+	ac->max = fw_ac->max;
+	ac->module_id = fw_ac->module_id;
+	ac->pipe_id = fw_ac->pipe_id;
+	ac->task_id = fw_ac->task_id;
+	ac->cmd_id = fw_ac->cmd_id;
+	ac->bypass = fw_ac->bypass;
+	if (fw_ac->params) {
+		ac->params = devm_kzalloc(platform->dev, fw_ac->max, GFP_KERNEL);
+		if (ac->params == NULL) {
+			pr_err("kzalloc failed\n");
+			return -ENOMEM;
+		} else {
+			memcpy(ac->params, fw_ac->params, fw_ac->max);
+		}
+	}
+	be->pvt_data  = (char *)ac;
+	be->pvt_data_len = sizeof(struct sst_algo_data) + ac->max;
+	return 0;
+}
+
 static int sst_copy_gain_control(struct snd_soc_platform *platform,
 		struct soc_mixer_control *sm, struct snd_soc_fw_mixer_control *mc)
 {
@@ -2077,6 +2112,10 @@ int sst_fw_kcontrol_find_io(struct snd_soc_platform *platform,
 				sst_copy_gain_control(platform, (struct soc_mixer_control *)sm,
 						(struct snd_soc_fw_mixer_control *)mc);
 				break;
+			case SOC_CONTROL_TYPE_SST_ALGO_PARAMS:
+				sst_copy_algo_control(platform, (struct soc_bytes_ext *)sm,
+						(struct snd_soc_fw_bytes_ext *)mc);
+				break;
 			default:
 				break;
 			}
@@ -2196,8 +2235,6 @@ int sst_dsp_init_v2_dpcm_dfw(struct snd_soc_platform *platform)
 		pr_err("Control load failed%d\n", ret);
 		return -EINVAL;
 	}
-	snd_soc_add_platform_controls(platform, sst_algo_controls,
-			ARRAY_SIZE(sst_algo_controls));
 	snd_soc_add_platform_controls(platform, sst_slot_controls,
 			ARRAY_SIZE(sst_slot_controls));
 	snd_soc_add_platform_controls(platform, sst_mux_controls,
diff --git a/sound/soc/intel/platform-libs/sst_vendor.h b/sound/soc/intel/platform-libs/sst_vendor.h
index d31cf7d..38de0e4 100644
--- a/sound/soc/intel/platform-libs/sst_vendor.h
+++ b/sound/soc/intel/platform-libs/sst_vendor.h
@@ -26,6 +26,8 @@
 
 #define SOC_CONTROL_TYPE_SST_GAIN		100
 #define SOC_CONTROL_TYPE_SST_MUTE		101
+#define SOC_CONTROL_TYPE_SST_ALGO_PARAMS	102
+#define SOC_CONTROL_TYPE_SST_ALGO_BYPASS	103
 
 /* REVISIT: Define sst kcontrol index */
 #define SOC_CONTROL_IO_SST_GAIN\
@@ -38,6 +40,16 @@
 		SOC_CONTROL_TYPE_SST_GAIN, \
 		SOC_CONTROL_TYPE_BOOL_EXT)
 
+#define SOC_CONTROL_IO_SST_ALGO_PARAMS\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_BYTES_EXT)
+
+
+#define SOC_CONTROL_IO_SST_ALGO_BYPASS\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_BOOL_EXT)
 #define SND_SOC_GAIN_CONTROL_NAME 44
 
 enum sst_vendor_type {
@@ -68,6 +80,23 @@ struct sst_dfw_gain_data {
 	char pname[44];
 } __packed;
 
+enum sst_algo_kcontrol_type {
+	SST_ALGO_PARAMS,
+	SST_ALGO_BYPASS,
+};
+
+struct sst_dfw_algo_data {
+	enum sst_algo_kcontrol_type type;
+	s32 max;
+	u16 module_id;
+	u16 pipe_id;
+	u16 task_id;
+	u16 cmd_id;
+	u8 bypass;
+	char params[0];
+	/* params will be in driver's pvt structure */
+} __packed;
+
 #if 0
 /* sst_fw_config: FW config data organization
  * For vendor specific:
diff --git a/sound/soc/intel/platform-libs/sst_widgets.h b/sound/soc/intel/platform-libs/sst_widgets.h
index 8bc9a79..b0b4356 100644
--- a/sound/soc/intel/platform-libs/sst_widgets.h
+++ b/sound/soc/intel/platform-libs/sst_widgets.h
@@ -238,11 +238,6 @@ struct sst_gain_value {
 #define SST_GAIN_MIN_VALUE	-1440 /* in 0.1 DB units */
 #define SST_GAIN_MAX_VALUE	360
 
-enum sst_algo_kcontrol_type {
-	SST_ALGO_PARAMS,
-	SST_ALGO_BYPASS,
-};
-
 struct sst_algo_data {
 	enum sst_algo_kcontrol_type type;
 	int max;
-- 
1.9.1

