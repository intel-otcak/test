From 86f2d72b673f4667007df7c51b59fdda492fa9dc Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Mon, 21 Dec 2015 13:31:48 +0530
Subject: [PATCH 01/14] USBC-PD: Enable/Disable PD as appropriate in protocol.

Policy engine should  disable PD in protocol layer if PE
is not ready to receive/send pd packets from/to port partner,
and enable PD when PE is ready to receive/send packets.

Change-Id: I925b5610a8a918be642a4606b7374dac3ec4c227
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-15496
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/450862
---
 drivers/usb/typec/pd/devpolicy_mgr.h |  8 -------
 drivers/usb/typec/pd/policy_engine.c | 45 ++++++++++++++++++++++++++----------
 drivers/usb/typec/pd/protocol.c      | 16 +++++++++++++
 drivers/usb/typec/pd/protocol.h      | 12 ++++++++++
 4 files changed, 61 insertions(+), 20 deletions(-)

diff --git a/drivers/usb/typec/pd/devpolicy_mgr.h b/drivers/usb/typec/pd/devpolicy_mgr.h
index d04c04c..7d72ec0 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.h
+++ b/drivers/usb/typec/pd/devpolicy_mgr.h
@@ -251,14 +251,6 @@ static inline int devpolicy_set_hpd_state(struct devpolicy_mgr *dpm,
 }
 #endif /* CONFIG_PINCTRL_CHERRYVIEW */
 
-static inline int devpolicy_enable_pd(struct devpolicy_mgr *dpm,
-						bool state)
-{
-	if (dpm && dpm->phy)
-		return typec_enable_autocrc(dpm->phy, state);
-	return -ENODEV;
-}
-
 static inline int devpolicy_set_dp_state(struct devpolicy_mgr *dpm,
 						enum cable_state state,
 						enum typec_dp_cable_type type)
diff --git a/drivers/usb/typec/pd/policy_engine.c b/drivers/usb/typec/pd/policy_engine.c
index 43aafc0..0af7cd4 100644
--- a/drivers/usb/typec/pd/policy_engine.c
+++ b/drivers/usb/typec/pd/policy_engine.c
@@ -66,6 +66,16 @@ static void pe_deactivate_all_timers(struct policy_engine *pe)
 
 }
 
+static void pe_enable_pd(struct policy_engine *pe, bool en)
+{
+	if (pe->is_pd_enabled == en)
+		return;
+	if (pe->p.prot) {
+		pd_prot_enable_pd(pe->p.prot, en);
+		pe->is_pd_enabled = en;
+	}
+}
+
 static void pe_do_self_reset(struct policy_engine *pe)
 {
 	pe_deactivate_all_timers(pe);
@@ -99,8 +109,7 @@ static void pe_do_self_reset(struct policy_engine *pe)
 	memset(&pe->pp_caps, 0, sizeof(struct pe_port_partner_caps));
 
 	/* Disable PD, auto crc */
-	devpolicy_enable_pd(pe->p.dpm, false);
-	pe->is_pd_enabled = false;
+	pe_enable_pd(pe, false);
 }
 
 static void pe_do_dpm_reset_entry(struct policy_engine *pe)
@@ -321,6 +330,12 @@ static void pe_handle_gcrc_received(struct policy_engine *pe)
 
 	case PE_PRS_SNK_SRC_SOURCE_ON:
 		log_info("PR_SWAP SNK -> SRC success!!");
+		/*
+		 * Disable PD if enabled, till PE is
+		 * ready to receive src_caps
+		 */
+		pe_enable_pd(pe, false);
+
 		pe_change_state(pe, PE_SRC_STARTUP);
 		break;
 
@@ -453,6 +468,11 @@ static int policy_engine_process_ctrl_msg(struct policy *p,
 		} else if (pe->cur_state == PE_PRS_SRC_SNK_WAIT_SOURCE_ON) {
 			log_info("PR_SWAP SRC -> SNK Success!!");
 			pe_cancel_timer(pe, PS_SOURCE_ON_TIMER);
+			/*
+			 * Disable PD if enabled, till PE is
+			 * ready to receive src_caps
+			 */
+			pe_enable_pd(pe, false);
 			pe_set_power_role(pe, POWER_ROLE_SINK);
 			pe_change_state(pe, PE_SNK_STARTUP);
 
@@ -1511,6 +1531,9 @@ static void pe_timer_expire_callback(unsigned long data)
 
 static void pe_process_state_pe_snk_startup(struct policy_engine *pe)
 {
+	/* Disable PD if enabled, till PE is ready to receive src_caps */
+	pe_enable_pd(pe, false);
+
 	/* Reset protocol layer */
 	pe_send_packet(pe, NULL, 0, PD_CMD_PROTOCOL_RESET,
 				PE_EVT_SEND_PROTOCOL_RESET);
@@ -1573,11 +1596,7 @@ pe_process_state_pe_snk_wait_for_capabilities(struct policy_engine *pe)
 		pe_change_state(pe, ERROR_RECOVERY);
 		return;
 	}
-
-	if (!pe->is_pd_enabled) {
-		devpolicy_enable_pd(pe->p.dpm, true);
-		pe->is_pd_enabled = true;
-	}
+	pe_enable_pd(pe, true);
 
 	/* Start SinkWaitCapTimer */
 	if (pe->is_typec_port)
@@ -1714,6 +1733,10 @@ static void pe_process_state_pe_src_wait_for_vbus(struct policy_engine *pe)
 
 static void pe_process_state_pe_src_startup(struct policy_engine *pe)
 {
+
+	/* Disable PD if enabled, till PE is ready to send src_caps */
+	pe_enable_pd(pe, false);
+
 	/* Reset caps counter */
 	pe->src_caps_couner = 0;
 	/* Reset protocol layer */
@@ -1764,11 +1787,7 @@ pe_process_state_pe_src_send_capabilities(struct policy_engine *pe)
 		pe_change_state(pe, ERROR_RECOVERY);
 		return;
 	}
-
-	if (!pe->is_pd_enabled) {
-		devpolicy_enable_pd(pe->p.dpm, true);
-		pe->is_pd_enabled = true;
-	}
+	pe_enable_pd(pe, true);
 	pe->src_caps_couner++;
 
 	if (pe_send_srccap_cmd(pe)) {
@@ -1838,6 +1857,8 @@ pe_process_state_pe_src_capability_response(struct policy_engine *pe)
 }
 static void pe_process_state_pe_src_disabled(struct policy_engine *pe)
 {
+	/* Disable PD, auto crc */
+	pe_enable_pd(pe, false);
 	log_err("Source port in disable mode!!");
 }
 
diff --git a/drivers/usb/typec/pd/protocol.c b/drivers/usb/typec/pd/protocol.c
index 558644b..eb5b69c 100644
--- a/drivers/usb/typec/pd/protocol.c
+++ b/drivers/usb/typec/pd/protocol.c
@@ -410,6 +410,12 @@ static void pd_prot_phy_rcv(struct pd_prot *pd)
 		goto phy_rcv_end;
 
 	msg_type = PD_MSG_TYPE(&rcv_buf.header);
+	if (!pd->is_pd_enabled) {
+		dev_dbg(pd->phy->dev, "%s:PD disabled, Ignore the pkt=%d\n",
+					__func__, msg_type);
+		goto phy_rcv_end;
+	}
+
 	if (msg_type == PD_CTRL_MSG_RESERVED_0)
 		goto phy_rcv_end;
 
@@ -516,6 +522,15 @@ static void prot_role_chnage_worker(struct work_struct *work)
 	pd_prot_setup_role(prot, prot->data_role, prot->pwr_role);
 }
 
+static void pd_protocol_enable_pd(struct pd_prot *prot, bool en)
+{
+	mutex_lock(&prot->rx_data_lock);
+	prot->is_pd_enabled = en;
+	mutex_unlock(&prot->rx_data_lock);
+	prot_clear_rx_msg_list(prot);
+	typec_enable_autocrc(prot->phy, en);
+}
+
 int protocol_bind_pe(struct policy *p)
 {
 	struct typec_phy *phy;
@@ -593,6 +608,7 @@ int protocol_bind_dpm(struct typec_phy *phy)
 	prot->policy_fwd_pkt = pd_prot_rcv_pkt_from_policy;
 	prot->policy_update_data_role = pd_policy_update_data_role;
 	prot->policy_update_power_role = pd_policy_update_power_role;
+	prot->protocol_enable_pd = pd_protocol_enable_pd;
 
 	/* Init Rx list and the worker to preocess rx msgs */
 	INIT_LIST_HEAD(&prot->rx_list);
diff --git a/drivers/usb/typec/pd/protocol.h b/drivers/usb/typec/pd/protocol.h
index 17fea38..1596d4b 100644
--- a/drivers/usb/typec/pd/protocol.h
+++ b/drivers/usb/typec/pd/protocol.h
@@ -64,6 +64,9 @@ struct pd_prot {
 					enum data_role drole);
 	void (*policy_update_power_role)(struct pd_prot *prot,
 					enum pwr_role prole);
+	void (*protocol_enable_pd)(struct pd_prot *prot, bool en);
+
+	bool is_pd_enabled;
 };
 
 static inline int pd_prot_send_phy_packet(struct pd_prot *pd, void *buf,
@@ -109,6 +112,15 @@ static inline int pd_prot_setup_role(struct pd_prot *pd,
 	return -ENOTSUPP;
 }
 
+static inline int pd_prot_enable_pd(struct pd_prot *pd, bool en)
+{
+	if (pd && pd->protocol_enable_pd) {
+		pd->protocol_enable_pd(pd, en);
+		return 0;
+	}
+	return -ENOTSUPP;
+}
+
 #if defined(CONFIG_USBC_PD) && defined(CONFIG_USBC_PD_POLICY)
 extern int protocol_bind_dpm(struct typec_phy *phy);
 extern void protocol_unbind_dpm(struct typec_phy *phy);
-- 
1.9.1

