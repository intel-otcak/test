From 3543566db603344921ef4ba57c5ced94b8c4ed19 Mon Sep 17 00:00:00 2001
Message-Id: <3543566db603344921ef4ba57c5ced94b8c4ed19.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Uma Shankar <uma.shankar@intel.com>
Date: Wed, 11 Sep 2013 20:19:30 +0530
Subject: [PATCH 031/312] REVERTME [VPG]: drm/i915: Added 180 degree rotation
 support

Added 180 degree rotation support through GEN display hardware

Conflicts:
	drivers/gpu/drm/i915/intel_display.c
	drivers/gpu/drm/i915/intel_sprite.c

Issue: APDEV-1161
Change-Id: If9ac3c17fbc06bd1b6a9b3f995cb0ebe477ab44f
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
Signed-off-by: Pallavi <pallavi.g@intel.com>
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
Reviewed-on: http://android.intel.com:8080/110737
Tested-by: Stimson, Dale B <dale.b.stimson@intel.com>
Reviewed-by: Wood, Brian J <brian.j.wood@intel.com>
Reviewed-by: Stimson, Dale B <dale.b.stimson@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Signed-off-by: A.Sunil Kamath <sunil.kamath@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c      |    2 +
 drivers/gpu/drm/i915/i915_drv.h      |    3 +
 drivers/gpu/drm/i915/i915_reg.h      |    1 +
 drivers/gpu/drm/i915/intel_display.c |  102 +++++++++++++++++++++++++++++++++-
 drivers/gpu/drm/i915/intel_sprite.c  |   31 +++++++++--
 include/uapi/drm/i915_drm.h          |    9 +++
 6 files changed, 142 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index d032fbe..28fd4c6 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -2020,6 +2020,8 @@ const struct drm_ioctl_desc i915_ioctls[] = {
 							DRM_AUTH|DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_GET_RESET_STATS, i915_get_reset_stats_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_USERPTR, i915_gem_userptr_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(I915_SET_PLANE_180_ROTATION, \
+		i915_set_plane_180_rotation, DRM_AUTH | DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_ENABLE_PLANE_RESERVED_REG_BIT_2,
 		i915_enable_plane_reserved_reg_bit_2, DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_ACCESS_USERDATA, i915_gem_access_userdata,
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 507c0d4..9a66d5b 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2008,6 +2008,7 @@ struct drm_i915_cmd_table {
 #include "i915_trace.h"
 
 extern const struct drm_ioctl_desc i915_ioctls[];
+extern struct drm_display_mode rot_mode;
 extern int i915_max_ioctl;
 
 extern int i915_suspend(struct drm_device *dev, pm_message_t state);
@@ -2609,6 +2610,8 @@ int i915_set_plane_zorder(struct drm_device *dev, void *data,
 			  struct drm_file *file);
 int i915_get_reset_stats_ioctl(struct drm_device *dev, void *data,
 			       struct drm_file *file);
+int i915_set_plane_180_rotation(struct drm_device *dev, void *data,
+		struct drm_file *file);
 int i915_enable_plane_reserved_reg_bit_2(struct drm_device *dev, void *data,
 					struct drm_file *file);
 
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 039d0c5..e8236ad 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4061,6 +4061,7 @@ enum punit_power_well {
 #define   DISPPLANE_STEREO_POLARITY_SECOND	(1<<18)
 #define   DISPPLANE_TRICKLE_FEED_DISABLE	(1<<14) /* Ironlake */
 #define   DISPPLANE_TILED			(1<<10)
+#define   DISPPLANE_180_ROTATION_ENABLE		(1<<15)
 #define _DSPAADDR				0x70184
 #define _DSPASTRIDE				0x70188
 #define _DSPAPOS				0x7018C /* reserved */
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 3552bc9..40fa60b 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -46,6 +46,8 @@
 
 static void intel_increase_pllclock(struct drm_crtc *crtc);
 static void intel_crtc_update_cursor(struct drm_crtc *crtc, bool on);
+static void i9xx_update_primary_plane(struct drm_crtc *crtc, struct drm_framebuffer *fb,
+				     int x, int y);
 
 static void i9xx_crtc_clock_get(struct intel_crtc *crtc,
 				struct intel_crtc_config *pipe_config);
@@ -133,6 +135,8 @@ static const intel_limit_t intel_limits_i8xx_dac = {
 		.p2_slow = 4, .p2_fast = 2 },
 };
 
+struct drm_display_mode rot_mode;
+
 static const intel_limit_t intel_limits_i8xx_dvo = {
 	.dot = { .min = 25000, .max = 350000 },
 	.vco = { .min = 908000, .max = 1512000 },
@@ -2468,6 +2472,83 @@ static void intel_find_plane_obj(struct intel_crtc *intel_crtc,
 	}
 }
 
+int i915_set_plane_180_rotation(struct drm_device *dev, void *data,
+				struct drm_file *file)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_i915_plane_180_rotation *rotation = data;
+
+	bool rotate = (rotation->rotate & 0x1) ? true : false;
+	int reg;
+	u32 val;
+	u32 sprctla;
+	u32 sprctlb;
+	int ret = 1;
+	struct drm_mode_object *obj;
+	struct drm_crtc *crtc;
+	struct intel_crtc *intel_crtc;
+	int pipe;
+
+	obj = drm_mode_object_find(dev, rotation->crtc_id,
+			DRM_MODE_OBJECT_CRTC);
+
+	if (!obj) {
+		DRM_DEBUG_DRIVER("Unknown CRTC ID %d\n", rotation->crtc_id);
+		return -EINVAL;
+	}
+
+	crtc = obj_to_crtc(obj);
+	DRM_DEBUG_DRIVER("[CRTC:%d]\n", crtc->base.id);
+	intel_crtc = to_intel_crtc(crtc);
+	pipe = intel_crtc->pipe;
+
+	DRM_DEBUG_DRIVER("pipe = %d\n", pipe);
+	memcpy(&rot_mode, &(crtc->hwmode), sizeof(struct drm_display_mode));
+	reg = DSPCNTR(pipe);
+	val = I915_READ(reg);
+	sprctla = I915_READ(SPCNTR(pipe, 0));
+	sprctlb = I915_READ(SPCNTR(pipe, 1));
+
+	/*Clear older rotation settings*/
+	if (val & DISPLAY_PLANE_ENABLE) {
+		val &= ~DISPPLANE_180_ROTATION_ENABLE;
+		I915_WRITE(reg, val);
+		ret = 0;
+	}
+
+	if (sprctla & DISPLAY_PLANE_ENABLE) {
+		sprctla &= ~DISPPLANE_180_ROTATION_ENABLE;
+		I915_WRITE(SPCNTR(pipe, 0), sprctla);
+		ret = 0;
+	}
+
+	if (sprctlb & DISPLAY_PLANE_ENABLE) {
+		sprctlb &= ~DISPPLANE_180_ROTATION_ENABLE;
+		I915_WRITE(SPCNTR(pipe, 1), sprctlb);
+		ret = 0;
+	}
+
+	if (rotate) {
+		if (val & DISPLAY_PLANE_ENABLE) {
+			val |= DISPPLANE_180_ROTATION_ENABLE;
+			I915_WRITE(reg, val);
+		}
+
+		if (sprctla & DISPLAY_PLANE_ENABLE) {
+			sprctla |= DISPPLANE_180_ROTATION_ENABLE;
+			I915_WRITE(SPCNTR(pipe, 0), sprctla);
+		}
+
+		if (sprctlb & DISPLAY_PLANE_ENABLE) {
+			sprctlb |= DISPPLANE_180_ROTATION_ENABLE;
+			I915_WRITE(SPCNTR(pipe, 1), sprctlb);
+		}
+	}
+
+	i9xx_update_primary_plane(crtc, crtc->primary->fb, 0, 0);
+	return ret;
+}
+
 static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 				      struct drm_framebuffer *fb,
 				      int x, int y)
@@ -2479,9 +2560,12 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 	struct drm_i915_gem_object *obj;
 	int plane = intel_crtc->plane;
 	unsigned long linear_offset;
+	bool rotate = false;
 	u32 dspcntr;
 	u32 reg;
+	int pixel_size;
 
+	pixel_size = drm_format_plane_cpp(fb->pixel_format, 0);
 	intel_fb = to_intel_framebuffer(fb);
 	obj = intel_fb->obj;
 
@@ -2520,6 +2604,9 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 		BUG();
 	}
 
+	if (dspcntr & DISPPLANE_180_ROTATION_ENABLE)
+		rotate = true;
+
 	if (INTEL_INFO(dev)->gen >= 4) {
 		if (obj->tiling_mode != I915_TILING_NONE)
 			dspcntr |= DISPPLANE_TILED;
@@ -2530,6 +2617,9 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 	if (IS_G4X(dev))
 		dspcntr |= DISPPLANE_TRICKLE_FEED_DISABLE;
 
+	if (rotate)
+		dspcntr |= DISPPLANE_180_ROTATION_ENABLE;
+
 	I915_WRITE(reg, dspcntr);
 
 	linear_offset = y * fb->pitches[0] + x * (fb->bits_per_pixel / 8);
@@ -2551,8 +2641,16 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 	if (INTEL_INFO(dev)->gen >= 4) {
 		I915_WRITE(DSPSURF(plane),
 			   i915_gem_obj_ggtt_offset(obj) + intel_crtc->dspaddr_offset);
-		I915_WRITE(DSPTILEOFF(plane), (y << 16) | x);
-		I915_WRITE(DSPLINOFF(plane), linear_offset);
+		if (rotate) {
+			I915_WRITE(DSPTILEOFF(plane), ((intel_fb->base.height
+				<< 16) | (intel_fb->base.width)));
+			I915_WRITE(DSPLINOFF(plane), (intel_fb->base.width *
+				intel_fb->base.height * pixel_size));
+		} else {
+			I915_WRITE(DSPTILEOFF(plane), (y << 16) | x);
+			I915_WRITE(DSPLINOFF(plane), linear_offset);
+		}
+
 	} else
 		I915_WRITE(DSPADDR(plane), i915_gem_obj_ggtt_offset(obj) + linear_offset);
 	POSTING_READ(reg);
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index a6840c3..ff9dcc1 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -305,6 +305,7 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	int pipe = intel_plane->pipe;
 	int plane = intel_plane->plane;
 	u32 sprctl;
+	bool rotate = false;
 	unsigned long sprsurf_offset, linear_offset;
 	int pixel_size = drm_format_plane_cpp(fb->pixel_format, 0);
 	u32 start_vbl_count;
@@ -373,6 +374,9 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	intel_update_sprite_watermarks(dplane, crtc, src_w, pixel_size, true,
 				       src_w != crtc_w || src_h != crtc_h);
 
+	if (sprctl & DISPPLANE_180_ROTATION_ENABLE)
+		rotate = true;
+
 	/* Sizes are 0 based */
 	src_w--;
 	src_h--;
@@ -391,14 +395,33 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	intel_update_primary_plane(intel_crtc);
 
 	I915_WRITE(SPSTRIDE(pipe, plane), fb->pitches[0]);
-	I915_WRITE(SPPOS(pipe, plane), (crtc_y << 16) | crtc_x);
 
-	if (obj->tiling_mode != I915_TILING_NONE)
-		I915_WRITE(SPTILEOFF(pipe, plane), (y << 16) | x);
+	if (rotate)
+		I915_WRITE(SPPOS(pipe, plane), ((rot_mode.vdisplay -
+			(crtc_y + crtc_h + 1)) << 16) |
+				(rot_mode.hdisplay - (crtc_x + crtc_w + 1)));
 	else
-		I915_WRITE(SPLINOFF(pipe, plane), linear_offset);
+		I915_WRITE(SPPOS(pipe, plane), (crtc_y << 16) | crtc_x);
+
+	if (obj->tiling_mode != I915_TILING_NONE) {
+		if (rotate) {
+			I915_WRITE(SPTILEOFF(pipe, plane),
+				(((crtc_h + 1) << 16) | (crtc_w + 1)));
+		} else
+			I915_WRITE(SPTILEOFF(pipe, plane), (y << 16) | x);
+	} else {
+		if (rotate) {
+			I915_WRITE(SPLINOFF(pipe, plane),
+				(((crtc_h + 1) * (crtc_w + 1) *
+				pixel_size)) - pixel_size);
+		} else
+			I915_WRITE(SPLINOFF(pipe, plane), linear_offset);
+	}
 
 	I915_WRITE(SPSIZE(pipe, plane), (crtc_h << 16) | crtc_w);
+	if (rotate)
+		sprctl |= DISPPLANE_180_ROTATION_ENABLE;
+
 	I915_WRITE(SPCNTR(pipe, plane), sprctl);
 	I915_WRITE(SPSURF(pipe, plane), i915_gem_obj_ggtt_offset(obj) +
 		   sprsurf_offset);
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 0b610b1..9c3591c 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -265,6 +265,7 @@ struct csc_coeff {
 #define DRM_I915_GET_RESET_STATS	0x32
 #define DRM_I915_GEM_USERPTR		0x33
 #define DRM_I915_SET_PLANE_ZORDER	0x34
+#define DRM_I915_SET_PLANE_180_ROTATION 0x36
 #define DRM_I915_ENABLE_PLANE_RESERVED_REG_BIT_2	0x37
 #define DRM_I915_SET_CSC		0x39
 #define DRM_I915_GEM_ACCESS_USERDATA	0x3c
@@ -322,6 +323,9 @@ struct csc_coeff {
 			struct drm_i915_set_plane_zorder)
 #define DRM_IOCTL_I915_GET_RESET_STATS		DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GET_RESET_STATS, struct drm_i915_reset_stats)
 #define DRM_IOCTL_I915_GEM_USERPTR			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_USERPTR, struct drm_i915_gem_userptr)
+#define DRM_IOCTL_I915_SET_PLANE_180_ROTATION  \
+		DRM_IOW(DRM_COMMAND_BASE + DRM_I915_SET_PLANE_180_ROTATION, \
+		struct drm_i915_plane_180_rotation)
 #define DRM_IOCTL_I915_ENABLE_PLANE_RESERVED_REG_BIT_2	\
 	DRM_IOW(DRM_COMMAND_BASE + DRM_I915_ENABLE_PLANE_RESERVED_REG_BIT_2, \
 	struct drm_i915_enable_plane_reserved_reg_bit_2)
@@ -1142,6 +1146,11 @@ struct drm_i915_gem_userptr {
 	__u32 handle;
 };
 
+struct drm_i915_plane_180_rotation {
+	__u32 crtc_id;
+	__u32 rotate;
+};
+
 struct drm_i915_enable_plane_reserved_reg_bit_2 {
 	__u32 enable;
 	int plane;
-- 
1.7.9.5

