From a21606b6f5121f3fe756458dbb5b0eb80bb3d27e Mon Sep 17 00:00:00 2001
Message-Id: <a21606b6f5121f3fe756458dbb5b0eb80bb3d27e.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: vanditak <vandita.kulkarni@intel.com>
Date: Tue, 25 Feb 2014 04:50:05 +0530
Subject: [PATCH 039/312] REVERTME [VPG]: drm/i915: adding VLV specific sprite
 surface address register write.

The sprite surface address register is different for VLV.
The Macros to get the address of the VLV sprite address cannot be used
directly as there is no one on one mapping like HSW. For some reasons
there is no map stored in the kernel.
This patch has the mapping logic ported from MCG kernel.
This can be used as a temporary fix for the mapping problem.
This includes code to do plane id -2 in order to achive the mapping.If this
logic is made part of HWC then this patch can be modified to remove that logic
like it exists in MCG - HWC.

Issue: AIAF-3656
Change-Id: I7b9c75fa31f7bbb23f44fd288806764968806218
Signed-off-by: vanditak <vandita.kulkarni@intel.com>
Sugned-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
Reviewed-on: https://android.intel.com/166276
Reviewed-by: Persson, Mikael <mikael.persson@intel.com>
Reviewed-by: Odeberg, Hans <hans.odeberg@intel.com>
Tested-by: Odeberg, Hans <hans.odeberg@intel.com>
---
 drivers/gpu/drm/i915/intel_display.c |   53 +++++++++++++++++++++++-----------
 1 file changed, 36 insertions(+), 17 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 40fa60b..c89f6a6 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -13124,7 +13124,7 @@ int i915_enable_plane_reserved_reg_bit_2(struct drm_device *dev, void *data,
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct drm_i915_enable_plane_reserved_reg_bit_2 *rrb = data;
 	u32 enable = rrb->enable;
-	u32 val, reg;
+	u32 val,reg=0;
 	u32 surface_id;
 	struct intel_plane *intel_plane;
 
@@ -13134,25 +13134,44 @@ int i915_enable_plane_reserved_reg_bit_2(struct drm_device *dev, void *data,
 
 	if (!drm_core_check_feature(dev, DRIVER_MODESET))
 		return -ENODEV;
-
-	/* crtc_id is not for Plane*/
-	drmmode_obj = drm_mode_object_find(dev, rrb->plane,
-			DRM_MODE_OBJECT_PLANE);
-
-	if (drmmode_obj) {
-		intel_plane = to_intel_plane(obj_to_plane(drmmode_obj));
-		surface_id = intel_plane->pipe;
-		reg = SPRSURF(surface_id);
-	} else {
+	if (IS_HASWELL(dev)) {
+		/* crtc_id is not for Plane*/
 		drmmode_obj = drm_mode_object_find(dev, rrb->plane,
-				DRM_MODE_OBJECT_CRTC);
+				DRM_MODE_OBJECT_PLANE);
+
 		if (drmmode_obj) {
-			crtc = to_intel_crtc(obj_to_crtc(drmmode_obj));
-			surface_id = crtc->plane;
-			reg = DSPSURF(surface_id);
+			intel_plane = to_intel_plane(obj_to_plane(drmmode_obj));
+			surface_id = intel_plane->pipe;
+			reg = SPRSURF(surface_id);
 		} else {
-			DRM_ERROR("no such CRTC id for Plane or Sprite\n");
-			return -EINVAL;
+			drmmode_obj = drm_mode_object_find(dev, rrb->plane,
+					DRM_MODE_OBJECT_CRTC);
+			if (drmmode_obj) {
+				crtc = to_intel_crtc(obj_to_crtc(drmmode_obj));
+				surface_id = crtc->plane;
+				reg = DSPSURF(surface_id);
+			} else {
+				DRM_ERROR("no such CRTC id for Plane or Sprite\n");
+				return -EINVAL;
+			}
+		}
+	}
+	if (IS_VALLEYVIEW(dev)) {
+		rrb->plane = rrb->plane - 2;
+		switch (rrb->plane) {
+		case SPRITEA: /* SPRITE A */
+			reg = SPSURF(0, 0);
+			break;
+		case SPRITEB: /* SPRITE B */
+			reg = SPSURF(0, 1);
+			break;
+		case SPRITEC: /* SPRITE C */
+			reg = SPSURF(1, 0);
+			break;
+		case SPRITED: /* SPRITE D */
+			reg = SPSURF(1, 1);
+			break;
+		default: return -EINVAL;
 		}
 	}
 
-- 
1.7.9.5

