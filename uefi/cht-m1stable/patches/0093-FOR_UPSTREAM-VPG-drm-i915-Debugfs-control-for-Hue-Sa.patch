From 4a4fe56dac4f668c38cacd88d808c87d5529fcc4 Mon Sep 17 00:00:00 2001
Message-Id: <4a4fe56dac4f668c38cacd88d808c87d5529fcc4.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Sat, 5 Jul 2014 01:29:16 +0530
Subject: [PATCH 093/312] FOR_UPSTREAM {VPG]: drm/i915: Debugfs control for
 Hue Saturation.

The following changes have been ported:
	Added debugfs support to control Hue and Saturation

Issue: GMIN-1467
Change-Id: Icae383017494cb6465906cca253bbc661fed09e0
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Signed-off-by: Shashank Sharma <shashank.sharma@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c  |  178 ++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_drv.h      |    1 +
 drivers/gpu/drm/i915/i915_reg.h      |   13 +++
 drivers/gpu/drm/i915/intel_clrmgr.c  |   69 +++++++++++++
 drivers/gpu/drm/i915/intel_clrmgr.h  |   13 +++
 drivers/gpu/drm/i915/intel_display.c |    2 +
 6 files changed, 276 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index be37cad..dcb59f6 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -1949,6 +1949,172 @@ const struct file_operations i915_gamma_enable_fops = {
 	.llseek = default_llseek,
 };
 
+ssize_t i915_cb_adjust_read(struct file *filp,
+		 char __user *ubuf,
+		 size_t max,
+		 loff_t *ppos)
+{
+	/* To do: Not implemented yet */
+	DRM_ERROR("Contrast Brightness adjust: Read Not implemented\n");
+	return -EINVAL;
+}
+
+ssize_t i915_cb_adjust_write(struct file *filp,
+		  const char __user *ubuf,
+		  size_t count,
+		  loff_t *ppos)
+{
+	int ret = 0;
+	struct drm_device *dev = filp->private_data;
+	struct cont_brightlut *cb_ptr = NULL;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char *buf = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Contrast Brightness: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Contrast Brightness adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	cb_ptr = kzalloc(sizeof(struct cont_brightlut), GFP_KERNEL);
+	if (!cb_ptr) {
+		DRM_ERROR("Contrast Brightness adjust: insufficient memory\n");
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (copy_from_user(buf, ubuf, count)) {
+		DRM_ERROR("Contrast Brightness: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* Parse input data */
+	ret = parse_clrmgr_input((uint *)cb_ptr, buf, 2, count);
+	if (ret < 0)
+		DRM_ERROR("Contrast Brightness loading failed\n");
+	else
+		DRM_DEBUG("Contrast Brightness loading done\n");
+
+	if (cb_ptr->sprite_no < SPRITEA || cb_ptr->sprite_no > SPRITED ||
+			cb_ptr->sprite_no == PLANEB) {
+		DRM_ERROR("Sprite value out of range. Enter 2,3, 5 or 6\n");
+		goto EXIT;
+	}
+
+	DRM_DEBUG("sprite = %d Val=0x%x,\n", cb_ptr->sprite_no, cb_ptr->val);
+
+	if (intel_sprite_cb_adjust(dev_priv, cb_ptr))
+		DRM_ERROR("Contrast Brightness update failed\n");
+
+EXIT:
+	kfree(cb_ptr);
+	kfree(buf);
+	/* If cant read the full buffer, read from last left */
+	if (ret < count-1)
+		return ret;
+
+	return count;
+}
+
+ssize_t i915_hs_adjust_read(struct file *filp,
+		 char __user *ubuf,
+		 size_t max,
+		 loff_t *ppos)
+{
+	/* To do: Not implemented yet */
+	DRM_ERROR("Hue Saturation adjust: Read Not implemented\n");
+	return -EINVAL;
+}
+ssize_t i915_hs_adjust_write(struct file *filp,
+		  const char __user *ubuf,
+		  size_t count,
+		  loff_t *ppos)
+{
+	int ret = count;
+	struct drm_device *dev = filp->private_data;
+	struct hue_saturationlut *hs_ptr = NULL;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char *buf = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Hue Saturation: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Hue Saturation adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	hs_ptr = kzalloc(sizeof(struct hue_saturationlut), GFP_KERNEL);
+	if (!hs_ptr) {
+		DRM_ERROR("Hue Saturation adjust: insufficient memory\n");
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (copy_from_user(buf, ubuf, count)) {
+		DRM_ERROR("Hue Saturation: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* Parse input data */
+	ret = parse_clrmgr_input((uint *)hs_ptr, buf, 2, count);
+	if (ret < 0)
+		DRM_ERROR("Hue Saturation loading failed\n");
+	else
+		DRM_DEBUG("Hue Saturation loading done\n");
+
+	if (hs_ptr->sprite_no < SPRITEA || hs_ptr->sprite_no > SPRITED ||
+			hs_ptr->sprite_no == PLANEB) {
+		DRM_ERROR("sprite = %d Val=0x%x,\n", hs_ptr->sprite_no,
+					hs_ptr->val);
+		goto EXIT;
+	}
+
+	DRM_DEBUG("sprite = %d Val=0x%x,\n", hs_ptr->sprite_no, hs_ptr->val);
+
+	if (intel_sprite_hs_adjust(dev_priv, hs_ptr))
+		DRM_ERROR("Hue Saturation update failed\n");
+
+EXIT:
+	kfree(hs_ptr);
+	kfree(buf);
+	/* If cant read the full buffer, read from last left */
+	if (ret < count-1)
+		return ret;
+
+	return count;
+}
+
+static const struct file_operations i915_cb_adjust_fops = {
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.read = i915_cb_adjust_read,
+	.write = i915_cb_adjust_write,
+	.llseek = default_llseek,
+};
+
+static const struct file_operations i915_hs_adjust_fops = {
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.read = i915_hs_adjust_read,
+	.write = i915_hs_adjust_write,
+	.llseek = default_llseek,
+};
+
 
 
 
@@ -4653,6 +4819,18 @@ int i915_debugfs_init(struct drm_minor *minor)
 	}
 
 	ret = i915_debugfs_create(minor->debugfs_root, minor,
+					"cb_adjust",
+					&i915_cb_adjust_fops);
+	if (ret)
+		return ret;
+
+	ret = i915_debugfs_create(minor->debugfs_root, minor,
+					"hs_adjust",
+					&i915_hs_adjust_fops);
+	if (ret)
+		return ret;
+
+	ret = i915_debugfs_create(minor->debugfs_root, minor,
 					"csc_adjust",
 					&i915_csc_adjust_fops);
 	if (ret)
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 03cb232..4af6f9a5 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1500,6 +1500,7 @@ struct drm_i915_private {
 	bool maxfifo_enabled;
 	bool csc_enabled;
 	bool gamma_enabled;
+	bool is_resuming;
 
 	/* PCH chipset type */
 	enum intel_pch pch_type;
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 836ec30..203b72f 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4163,6 +4163,19 @@ enum punit_power_well {
 #define _DSPBOFFSET		(dev_priv->info.display_mmio_offset + 0x711A4)
 #define _DSPBSURFLIVE		(dev_priv->info.display_mmio_offset + 0x711AC)
 
+/* Sprite Contrast and Brightness Registers */
+#define SPRITEA_CB_REG		(dev_priv->info.display_mmio_offset + 0x721d0)
+#define SPRITEB_CB_REG		(dev_priv->info.display_mmio_offset + 0x722d0)
+#define SPRITEC_CB_REG		(dev_priv->info.display_mmio_offset + 0x723d0)
+#define SPRITED_CB_REG		(dev_priv->info.display_mmio_offset + 0x724d0)
+
+/* Sprite Hue and Saturation Registers */
+#define SPRITEA_HS_REG         (dev_priv->info.display_mmio_offset + 0x721d4)
+#define SPRITEB_HS_REG         (dev_priv->info.display_mmio_offset + 0x722d4)
+#define SPRITEC_HS_REG         (dev_priv->info.display_mmio_offset + 0x723d4)
+#define SPRITED_HS_REG         (dev_priv->info.display_mmio_offset + 0x724d4)
+
+
 /* Sprite A control */
 #define _DVSACNTR		0x72180
 #define   DVS_ENABLE		(1<<31)
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.c b/drivers/gpu/drm/i915/intel_clrmgr.c
index 76a8a46..8d04497 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.c
+++ b/drivers/gpu/drm/i915/intel_clrmgr.c
@@ -537,3 +537,72 @@ int intel_crtc_disable_gamma(struct drm_crtc *crtc, u32 identifier)
 	}
 	return 0;
 }
+
+/* Tune Contrast Brightness Value for Sprite */
+int intel_sprite_cb_adjust(struct drm_i915_private *dev_priv,
+		struct cont_brightlut *cb_ptr)
+{
+	if (!dev_priv || !cb_ptr) {
+		DRM_ERROR("Contrast Brightness: Invalid Arguments\n");
+		return -EINVAL;
+	}
+
+	switch (cb_ptr->sprite_no) {
+	/* Sprite plane */
+	case SPRITEA:
+		if (is_sprite_enabled(dev_priv, 0, 0) || dev_priv->is_resuming)
+			I915_WRITE(SPRITEA_CB_REG, cb_ptr->val);
+	break;
+	case SPRITEB:
+		if (is_sprite_enabled(dev_priv, 0, 1) || dev_priv->is_resuming)
+			I915_WRITE(SPRITEB_CB_REG, cb_ptr->val);
+	break;
+	case SPRITEC:
+		if (is_sprite_enabled(dev_priv, 1, 0) || dev_priv->is_resuming)
+			I915_WRITE(SPRITEC_CB_REG, cb_ptr->val);
+	break;
+	case SPRITED:
+		if (is_sprite_enabled(dev_priv, 1, 1) || dev_priv->is_resuming)
+			I915_WRITE(SPRITED_CB_REG, cb_ptr->val);
+	break;
+	default:
+		DRM_ERROR("Invalid Sprite Number\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+/* Tune Hue Saturation Value for Sprite */
+int intel_sprite_hs_adjust(struct drm_i915_private *dev_priv,
+		struct hue_saturationlut *hs_ptr)
+{
+	if (!dev_priv || !hs_ptr) {
+		DRM_ERROR("Hue Saturation: Invalid Arguments\n");
+		return -EINVAL;
+	}
+
+	switch (hs_ptr->sprite_no) {
+	/* Sprite plane */
+	case SPRITEA:
+		if (is_sprite_enabled(dev_priv, 0, 0) || dev_priv->is_resuming)
+			I915_WRITE(SPRITEA_HS_REG, hs_ptr->val);
+	break;
+	case SPRITEB:
+		if (is_sprite_enabled(dev_priv, 0, 1) || dev_priv->is_resuming)
+			I915_WRITE(SPRITEB_HS_REG, hs_ptr->val);
+	break;
+	case SPRITEC:
+		if (is_sprite_enabled(dev_priv, 1, 0) || dev_priv->is_resuming)
+			I915_WRITE(SPRITEC_HS_REG, hs_ptr->val);
+	break;
+	case SPRITED:
+		if (is_sprite_enabled(dev_priv, 1, 1) || dev_priv->is_resuming)
+			I915_WRITE(SPRITED_HS_REG, hs_ptr->val);
+	break;
+	default:
+		DRM_ERROR("Invalid Sprite Number\n");
+		return -EINVAL;
+	}
+	return 0;
+}
diff --git a/drivers/gpu/drm/i915/intel_clrmgr.h b/drivers/gpu/drm/i915/intel_clrmgr.h
index 5570fc4..9ca999c 100644
--- a/drivers/gpu/drm/i915/intel_clrmgr.h
+++ b/drivers/gpu/drm/i915/intel_clrmgr.h
@@ -29,6 +29,15 @@
 #ifndef _I915_CLR_MNGR_H_
 #define _I915_CLR_MNGR_H_
 
+struct cont_brightlut {
+	short sprite_no;
+	u32 val;
+};
+
+struct hue_saturationlut {
+	short sprite_no;
+	u32 val;
+};
 /* CSC correction */
 #define CSC_MAX_COEFF_COUNT		6
 #define CLR_MGR_PARSE_MAX		128
@@ -83,5 +92,9 @@ int do_intel_enable_csc(struct drm_device *dev, void *data,
 void do_intel_disable_csc(struct drm_device *dev, struct drm_crtc *crtc);
 int intel_crtc_enable_gamma(struct drm_crtc *crtc, u32 identifier);
 int intel_crtc_disable_gamma(struct drm_crtc *crtc, u32 identifier);
+int intel_sprite_cb_adjust(struct drm_i915_private *dev_priv,
+		struct cont_brightlut *cb_ptr);
+int intel_sprite_hs_adjust(struct drm_i915_private *dev_priv,
+		struct hue_saturationlut *hs_ptr);
 
 #endif
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index bc713cc..23471c3 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -11929,6 +11929,8 @@ static void intel_crtc_init(struct drm_device *dev, int pipe)
 	intel_crtc->sprite0_alpha = true;
 	intel_crtc->sprite1_alpha = true;
 	intel_crtc->rotate180 = false;
+	/* Flag for wake from sleep */
+	dev_priv->is_resuming = false;
 
 	WARN_ON(drm_crtc_index(&intel_crtc->base) != intel_crtc->pipe);
 }
-- 
1.7.9.5

