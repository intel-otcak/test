From 57133b4b467b5bb8e811855bfee2ae7dfa58370f Mon Sep 17 00:00:00 2001
From: Fidel Gutierrez Resendiz <fidel.gutierrez.resendiz@intel.com>
Date: Mon, 18 Apr 2016 11:26:53 -0500
Subject: [PATCH] ov2680: CHT_MRD:WA to Fix ov2680 FOV

Currently, there is a problem in the front camera of MRD, where an issue
is detected in the FOV. FOV becomes smaller while switching video
resolution from 720p to 480p, and then to CIF.

The issue is introduced by wrong selection of index configuration for
correct resolution.

This fix uses the 1600x1200 setting to support 720p/480p/CIF resolution
and remove the group holder that isn't needed in CHT.

Change-Id: Iedba89a8d8bf72f3c7f55fb1b670457667a16358
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-28812
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-29517
Signed-off-by: Fidel Gutierrez Resendiz <fidel.gutierrez.resendiz@intel.com>
Signed-off-by: Lu, Xingjiang <xingjiangx.lu@intel.com>
Reviewed-on: https://android.intel.com:443/496035
---
 drivers/media/i2c/atomisp/ov2680.c | 43 +++++++++++++++++++++++++-------------
 1 file changed, 29 insertions(+), 14 deletions(-)

diff --git a/drivers/media/i2c/atomisp/ov2680.c b/drivers/media/i2c/atomisp/ov2680.c
index 021a31a..6d3d33d 100644
--- a/drivers/media/i2c/atomisp/ov2680.c
+++ b/drivers/media/i2c/atomisp/ov2680.c
@@ -291,7 +291,7 @@ static int ov2680_g_fnumber(struct v4l2_subdev *sd, s32 *val)
 
 static int ov2680_g_fnumber_range(struct v4l2_subdev *sd, s32 *val)
 {
-	
+
 	*val = (OV2680_F_NUMBER_DEFAULT_NUM << 24) |
 		(OV2680_F_NUMBER_DEM << 16) |
 		(OV2680_F_NUMBER_DEFAULT_NUM << 8) | OV2680_F_NUMBER_DEM;
@@ -310,7 +310,7 @@ static int ov2680_g_bin_factor_x(struct v4l2_subdev *sd, s32 *val)
 static int ov2680_g_bin_factor_y(struct v4l2_subdev *sd, s32 *val)
 {
 	struct ov2680_device *dev = to_ov2680_sensor(sd);
-	
+
 	*val = ov2680_res[dev->fmt_idx].bin_factor_y;
 	ov2680_debug(dev,  "++++ov2680_g_bin_factor_y\n");
 	return 0;
@@ -403,8 +403,8 @@ static long __ov2680_set_exposure(struct v4l2_subdev *sd, int coarse_itg,
 	struct ov2680_device *dev = to_ov2680_sensor(sd);
 	u16 vts,hts;
 	int ret,exp_val;
-	
-       ov2680_debug(dev, "+++++++__ov2680_set_exposure coarse_itg %d, gain %d, digitgain %d++\n",coarse_itg, gain, digitgain);
+
+	ov2680_debug(dev, "+++++++__ov2680_set_exposure coarse_itg %d, gain %d, digitgain %d++\n",coarse_itg, gain, digitgain);
 
 	hts = ov2680_res[dev->fmt_idx].pixels_per_line;
 	vts = ov2680_res[dev->fmt_idx].lines_per_frame;
@@ -546,7 +546,7 @@ static long ov2680_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 	switch (cmd) {
 	case ATOMISP_IOC_S_EXPOSURE:
 		return ov2680_s_exposure(sd, arg);
-	
+
 	default:
 		return -EINVAL;
 	}
@@ -773,7 +773,7 @@ struct ov2680_control ov2680_controls[] = {
 static struct ov2680_control *ov2680_find_control(u32 id)
 {
 	int i;
-	
+
 	for (i = 0; i < N_CONTROLS; i++)
 		if (ov2680_controls[i].qc.id == id)
 			return &ov2680_controls[i];
@@ -1022,13 +1022,17 @@ static int ov2680_s_power(struct v4l2_subdev *sd, int on)
 	if (on == 0){
 		ret = power_down(sd);
 	} else {
-		ret = power_up(sd);	
+		ret = power_up(sd);
 		if (!ret)
 			return ov2680_init(sd);
 	}
 	return ret;
 }
-
+#if 0
+/* Nearest higher resolution search has been removed due to OAM-28812 issue.
+ *
+ * Reference: IMINAN-47858 [CHT-CR-MRD][Camera] WA to fix ov2680 FOV issue.
+ */
 /*
  * distance - calculate the distance
  * @res: resolution
@@ -1060,12 +1064,18 @@ static int distance(struct ov2680_resolution *res, u32 w, u32 h)
 
 	return w_ratio + h_ratio;
 }
-
+#endif
 /* Return the nearest higher resolution index */
 static int nearest_resolution_index(int w, int h)
 {
-	int i;
+
 	int idx = -1;
+#if 0
+/* Nearest higher resolution search has been removed due to OAM-28812 issue.
+ *
+ * Reference: IMINAN-47858 [CHT-CR-MRD][Camera] WA to fix ov2680 FOV issue.
+ */
+	int i;
 	int dist;
 	int min_dist = INT_MAX;
 	struct ov2680_resolution *tmp_res = NULL;
@@ -1080,7 +1090,12 @@ static int nearest_resolution_index(int w, int h)
 			idx = i;
 		}
 	}
-
+#else
+	if (w == 1280 && h == 720)
+		idx = 1; /* For 16:9 */
+	else
+		idx = 0; /* For 4:3 */
+#endif
 	return idx;
 }
 
@@ -1249,7 +1264,7 @@ static int ov2680_s_stream(struct v4l2_subdev *sd, int enable)
 		ov2680_debug(&client->dev, "ov2680_s_stream one\n");
 	else
 		ov2680_debug(&client->dev, "ov2680_s_stream off\n");
-	
+
 	ret = ov2680_write_reg(client, OV2680_8BIT, OV2680_SW_STREAM,
 				enable ? OV2680_START_STREAMING :
 				OV2680_STOP_STREAMING);
@@ -1351,7 +1366,7 @@ static int ov2680_s_config(struct v4l2_subdev *sd,
 		dev_err(&client->dev, "ov2680_detect err s_config.\n");
 		goto fail_csi_cfg;
 	}
-	
+
 	/* turn off sensor, after probed */
 	ret = power_down(sd);
 	if (ret) {
@@ -1521,7 +1536,7 @@ static int ov2680_set_pad_format(struct v4l2_subdev *sd,
 static int ov2680_g_skip_frames(struct v4l2_subdev *sd, u32 *frames)
 {
 	struct ov2680_device *dev = to_ov2680_sensor(sd);
-	
+
 	mutex_lock(&dev->input_lock);
 	*frames = ov2680_res[dev->fmt_idx].skip_frames;
 	mutex_unlock(&dev->input_lock);
-- 
1.9.1

