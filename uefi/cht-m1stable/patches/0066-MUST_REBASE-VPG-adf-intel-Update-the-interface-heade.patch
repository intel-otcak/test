From d52db801b1c788939f7b4b007979f2d03b4f59fe Mon Sep 17 00:00:00 2001
Message-Id: <d52db801b1c788939f7b4b007979f2d03b4f59fe.1421709247.git.chang-joon.lee@intel.com>
In-Reply-To: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
References: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
From: Gajanan Bhat <gajanan.bhat@intel.com>
Date: Wed, 22 Oct 2014 20:57:39 +0530
Subject: [PATCH 66/75] MUST_REBASE [VPG]: adf/intel: Update the interface
 header file with HWC to version 3

Updated intel_adf.h as per the design in INTEL_ADF_VERSION 3. Done associated
changes in the code as well. Mainly variable name changes

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-3547
Change-Id: I14a7a92009fd32d99ab90389a9c01a86afa89025
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
---
 .../video/adf/intel/core/common/dsi/gen_dsi_pipe.c |    2 +-
 .../video/adf/intel/include/core/intel_dc_config.h |    2 +-
 drivers/video/adf/intel/intel_adf_device.c         |   44 +--
 drivers/video/adf/intel/intel_adf_interface.c      |   36 +--
 include/uapi/video/intel_adf.h                     |  296 ++++++++++----------
 5 files changed, 187 insertions(+), 193 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
index 63d6da9..c1a0f1f 100644
--- a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
+++ b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
@@ -243,7 +243,7 @@ static void dsi_on_post(struct intel_pipe *pipe)
 static void dsi_pre_validate(struct intel_pipe *pipe,
 		struct intel_adf_post_custom_data *custom)
 {
-	if (custom->num_overlays > 1 && pipe->status.maxfifo_enabled) {
+	if (custom->n_configs > 1 && pipe->status.maxfifo_enabled) {
 		REG_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
 		pipe->status.maxfifo_enabled = false;
 		pipe->status.wait_vblank = true;
diff --git a/drivers/video/adf/intel/include/core/intel_dc_config.h b/drivers/video/adf/intel/include/core/intel_dc_config.h
index 0cd24d4..01c4c15 100644
--- a/drivers/video/adf/intel/include/core/intel_dc_config.h
+++ b/drivers/video/adf/intel/include/core/intel_dc_config.h
@@ -151,7 +151,7 @@ struct intel_plane_config {
 	u8 alpha;
 	enum intel_plane_compression compression:4;
 	enum intel_plane_blending blending:4;
-	enum intel_adf_transform transform:4;
+	enum intel_adf_transform_mode transform:4;
 	struct intel_pipe *pipe;
 };
 
diff --git a/drivers/video/adf/intel/intel_adf_device.c b/drivers/video/adf/intel/intel_adf_device.c
index fdd5507..1f5f5ae 100644
--- a/drivers/video/adf/intel/intel_adf_device.c
+++ b/drivers/video/adf/intel/intel_adf_device.c
@@ -230,14 +230,14 @@ static void adf_plane_to_intel_plane_config(
 	struct intel_adf_plane *adf_plane, struct intel_adf_interface *intf,
 	struct intel_plane_config *config, u32 zorder)
 {
-	config->dst_x = adf_plane->dst_x;
-	config->dst_y = adf_plane->dst_y;
-	config->dst_w = adf_plane->dst_w;
-	config->dst_h = adf_plane->dst_h;
-	config->src_x = adf_plane->src_x;
-	config->src_y = adf_plane->src_y;
-	config->src_w = adf_plane->src_w;
-	config->src_h = adf_plane->src_h;
+	config->dst_x = adf_plane->dst.x;
+	config->dst_y = adf_plane->dst.y;
+	config->dst_w = adf_plane->dst.w;
+	config->dst_h = adf_plane->dst.h;
+	config->src_x = adf_plane->src.x;
+	config->src_y = adf_plane->src.y;
+	config->src_w = adf_plane->src.w;
+	config->src_h = adf_plane->src.h;
 	config->alpha = adf_plane->alpha;
 	/*TODO: map adf_plane to plane_config*/
 	config->compression = adf_plane->compression;
@@ -329,7 +329,7 @@ static int intel_adf_device_validate(struct adf_device *dev,
 				void **driver_state)
 {
 	struct intel_adf_post_custom_data *custom = cfg->custom_data;
-	struct intel_adf_overlay *custom_overlay;
+	struct intel_adf_config *custom_config;
 	struct intel_adf_overlay_engine *eng;
 	struct driver_state *state;
 	struct adf_interface *intf;
@@ -338,7 +338,7 @@ static int intel_adf_device_validate(struct adf_device *dev,
 	struct flip *f;
 
 	size_t n_bufs = cfg->n_bufs;
-	u32 n_overlays;
+	u32 n_configs;
 	size_t custom_size;
 	int err;
 	int i;
@@ -354,11 +354,11 @@ static int intel_adf_device_validate(struct adf_device *dev,
 		return -EINVAL;
 	}
 
-	n_overlays = custom->num_overlays;
+	n_configs = custom->n_configs;
 
 	/*verify custom size*/
 	custom_size = sizeof(struct intel_adf_post_custom_data) +
-		n_overlays * sizeof(struct intel_adf_overlay);
+		n_configs * sizeof(struct intel_adf_config);
 	if (custom_size != cfg->custom_data_size) {
 		dev_err(dev->dev, "%s: invalid custom size\n", __func__);
 		return -EINVAL;
@@ -372,37 +372,37 @@ static int intel_adf_device_validate(struct adf_device *dev,
 		return -ENOMEM;
 	}
 
-	/*verify custom overlays*/
-	for (i = 0; i < n_overlays; i++) {
-		custom_overlay = &custom->overlays[i];
+	/*verify custom configs*/
+	for (i = 0; i < n_configs; i++) {
+		custom_config = &custom->configs[i];
 		/*verify buffer id set in plane*/
-		if (custom_overlay->plane.buffer_id > n_bufs) {
+		if (custom_config->plane.buffer_id > n_bufs) {
 			dev_err(dev->dev, "%s: invalid custom buffer id %d\n",
-				__func__, custom_overlay->plane.buffer_id);
+				__func__, custom_config->plane.buffer_id);
 			err = -EINVAL;
 			goto err;
 		}
 		/*verify interface id set in plane*/
 		intf = idr_find(&dev->interfaces,
-			custom_overlay->plane.interface_id);
+			custom_config->interface_id);
 		if (!intf) {
 			dev_err(dev->dev, "%s: invalid interface id %d\n",
-				__func__, custom_overlay->plane.interface_id);
+				__func__, custom_config->interface_id);
 			err = -EINVAL;
 			goto err;
 		}
 		driver_state_add_interface(state, to_intel_intf(intf));
 
 		/*get adf_buffer for this overlay*/
-		buf = &cfg->bufs[custom_overlay->plane.buffer_id];
-		mapping = &cfg->mappings[custom_overlay->plane.buffer_id];
+		buf = &cfg->bufs[custom_config->plane.buffer_id];
+		mapping = &cfg->mappings[custom_config->plane.buffer_id];
 		eng = to_intel_eng(buf->overlay_engine);
 		driver_state_add_overlay_engine(state, eng);
 
 		/*create and queue a flip for this overlay*/
 		f = driver_state_create_add_flip(state, eng,
 			to_intel_intf(intf), buf, mapping,
-				&custom_overlay->plane, custom->zorder);
+				&custom_config->plane, custom->zorder);
 		if (!f) {
 			dev_err(dev->dev, "%s: failed to create flip\n",
 				__func__);
diff --git a/drivers/video/adf/intel/intel_adf_interface.c b/drivers/video/adf/intel/intel_adf_interface.c
index f7848f4..4e848e1 100644
--- a/drivers/video/adf/intel/intel_adf_interface.c
+++ b/drivers/video/adf/intel/intel_adf_interface.c
@@ -156,27 +156,27 @@ static int intel_interface_describe_simple_post(
 	dev_info(dev, "%s: buffer %dx%d\n", __func__, fb->w, fb->h);
 
 	custom_size = sizeof(struct intel_adf_post_custom_data) +
-			sizeof(struct intel_adf_overlay);
+			sizeof(struct intel_adf_config);
 
 	custom_data->version = INTEL_ADF_VERSION;
 	custom_data->flags = 0;
-	custom_data->num_overlays = 1;
-	custom_data->overlays[0].plane.overlay_id = -1;
-	custom_data->overlays[0].plane.interface_id = intf->idx;
-	custom_data->overlays[0].plane.buffer_id = 0;
-	custom_data->overlays[0].plane.flags = 0;
-	custom_data->overlays[0].plane.dst_x = 0;
-	custom_data->overlays[0].plane.dst_y = 0;
-	custom_data->overlays[0].plane.dst_w = fb->w;
-	custom_data->overlays[0].plane.dst_h = fb->h;
-	custom_data->overlays[0].plane.src_x = 0;
-	custom_data->overlays[0].plane.src_y = 0;
-	custom_data->overlays[0].plane.src_w = fb->w;
-	custom_data->overlays[0].plane.src_h = fb->h;
-	custom_data->overlays[0].plane.alpha = 0xff;
-	custom_data->overlays[0].plane.compression = INTEL_ADF_UNCOMPRESSED;
-	custom_data->overlays[0].plane.blending = INTEL_ADF_BLENDING_NONE;
-	custom_data->overlays[0].plane.transform = INTEL_ADF_TRANSFORM_NONE;
+	custom_data->n_configs = 1;
+	custom_data->configs[0].plane.overlay_id = -1;
+	custom_data->configs[0].interface_id = intf->idx;
+	custom_data->configs[0].plane.buffer_id = 0;
+	custom_data->configs[0].plane.flags = 0;
+	custom_data->configs[0].plane.dst.x = 0;
+	custom_data->configs[0].plane.dst.y = 0;
+	custom_data->configs[0].plane.dst.w = fb->w;
+	custom_data->configs[0].plane.dst.h = fb->h;
+	custom_data->configs[0].plane.src.x = 0;
+	custom_data->configs[0].plane.src.y = 0;
+	custom_data->configs[0].plane.src.w = fb->w;
+	custom_data->configs[0].plane.src.h = fb->h;
+	custom_data->configs[0].plane.alpha = 0xff;
+	custom_data->configs[0].plane.compression = INTEL_ADF_UNCOMPRESSED;
+	custom_data->configs[0].plane.blending = INTEL_ADF_BLENDING_NONE;
+	custom_data->configs[0].plane.transform = INTEL_ADF_TRANSFORM_NONE;
 
 	*size = custom_size;
 
diff --git a/include/uapi/video/intel_adf.h b/include/uapi/video/intel_adf.h
index f6f8040..9d6872c 100644
--- a/include/uapi/video/intel_adf.h
+++ b/include/uapi/video/intel_adf.h
@@ -22,8 +22,10 @@
  *
  */
 
-#ifndef _VIDEO_INTEL_ADF_H_
-#define _VIDEO_INTEL_ADF_H_
+#ifndef _UAPI_VIDEO_INTEL_ADF_H_
+#define _UAPI_VIDEO_INTEL_ADF_H_
+
+#include <linux/types.h>
 
 /*
  * This identifier should be increased every time the contents of the this file
@@ -32,26 +34,42 @@
  * to match compatible versions should result in the user mode falling back to
  * the baseline simple post.
  */
-#define INTEL_ADF_VERSION 2
+#define INTEL_ADF_VERSION 3
+
+struct intel_adf_rect {
+	__s16 x;
+	__s16 y;
+	__u16 w;
+	__u16 h;
+};
 
-enum intel_adf_compression {
+struct intel_adf_rect_fixedpoint {
+	__s32 x;
+	__s32 y;
+	__u32 w;
+	__u32 h;
+};
+
+enum intel_adf_compression_mode {
 	INTEL_ADF_UNCOMPRESSED,
 	INTEL_ADF_COMPRESSED,
 };
 
-enum intel_adf_blending {
+enum intel_adf_blending_type {
 	INTEL_ADF_BLENDING_NONE,
 	INTEL_ADF_BLENDING_PREMULT,
 	INTEL_ADF_BLENDING_COVERAGE,
 };
 
-enum intel_adf_transform {
+enum intel_adf_transform_mode {
 	INTEL_ADF_TRANSFORM_NONE	= 0,
 	INTEL_ADF_TRANSFORM_FLIPH	= 1,
 	INTEL_ADF_TRANSFORM_FLIPV	= 2,
 	INTEL_ADF_TRANSFORM_ROT90	= 4,
+
 	/* INTEL_ADF_TRANSFORM_FLIPH | INTEL_ADF_TRANSFORM_FLIPV; */
 	INTEL_ADF_TRANSFORM_ROT180	= 3,
+
 	/*
 	 * INTEL_ADF_TRANSFORM_FLIPH | INTEL_ADF_TRANSFORM_FLIPV |
 	 * INTEL_ADF_TRANSFORM_ROT90;
@@ -59,179 +77,155 @@ enum intel_adf_transform {
 	INTEL_ADF_TRANSFORM_ROT270	= 7,
 };
 
-/**
- * intel_adf_color
- * overlay_id:	index of the overlay engine
- * zorder:	depth of the layer ion screen, lower is further back
- * reserved:	set reserved bit
- * color:	color
- */
-struct intel_adf_color {
-	__u8	overlay_id;
-	__u8	zorder;
-	__u16	reserved;
-	__u32	color;
-};
-
 enum intel_adf_colorspace {
-	INTEL_ADF_COLORSPACE_ARBITRARY,
+	INTEL_ADF_COLORSPACE_UNSPECIFIED,
 	INTEL_ADF_COLORSPACE_JFIF,
 	INTEL_ADF_COLORSPACE_BT601_625,
 	INTEL_ADF_COLORSPACE_BT601_525,
 	INTEL_ADF_COLORSPACE_BT709,
+	INTEL_ADF_COLORSPACE_BT2020,
 };
 
 enum intel_adf_plane_flags {
-	INTEL_ADF_PLANE_DISABLE		= 0x0001,
-	/* User indication that this plane is unchanged since the last post */
-	INTEL_ADF_PLANE_UNCHANGED	= 0x0002,
-	/* Flags for any undefined HW specific usage */
-	INTEL_ADF_PLANE_HWSPECIFIC1	= 0x1000,
-	INTEL_ADF_PLANE_HWSPECIFIC2	= 0x2000,
-	INTEL_ADF_PLANE_HWSPECIFIC3	= 0x4000,
-	INTEL_ADF_PLANE_HWSPECIFIC4	= 0x8000,
+	INTEL_ADF_PLANE_DISABLE		= 0x00000000,
+	INTEL_ADF_PLANE_ENABLE		= 0x00000001,
+
+	/* User hint that this plane is unchanged since the last post */
+	INTEL_ADF_PLANE_HINT_UNCHANGED	= 0x00000002,
+
+	/* Flags reserved for any future hardware usage */
+	INTEL_ADF_PLANE_HW_PRIVATE_1	= 0x10000000,
+	INTEL_ADF_PLANE_HW_PRIVATE_2	= 0x20000000,
+	INTEL_ADF_PLANE_HW_PRIVATE_3	= 0x40000000,
+	INTEL_ADF_PLANE_HW_PRIVATE_4	= 0x80000000,
 };
 
-/**
- * struct intel_adf_plane - intel plane structure for adf
- * overlay_id:	index of the overlay engine for this plane
- * interface_id:index of interface
- * buffer_id:	Index of the buffer to put on this plane
- *		(within adf_post_config.bufs array)
- * flags:	flags
- * dst_x:	destination left
- * dst_y:	destination top
- * dst_w:	destination width
- * dst_h:	destination_height
- * src_x:	16.16 fixed point source left
- * src_y:	16.16 fixed point source top
- * src_w:	16.16 fixed point source width
- * src_h:	16.16 fixed point source height
- * alpha:	constant alpha value
- * compression:	compiression mode
- * blending:	blending mode
- * transform:	transform mode
- * pad:		struct padding, value is always zero.
- */
+/* Configuration for describing an overlay plane displaying a buffer */
 struct intel_adf_plane {
+	/* Combination of flags from the intel_adf_plane_flags enum */
+	__u32 flags;
+
+	/* index of the overlay engine for this config */
+	__u8 overlay_id;
+
 	/*
-	 * NOTE: this field might be useless, already have
-	 * overlay engine assigned to adf_buffer
-	 **/
-	__u8	overlay_id;
-	__u8	interface_id;
-	__u8	buffer_id;
-	__u8	alpha;
-	__s16	dst_x;
-	__s16	dst_y;
-	__u16	dst_w;
-	__u16	dst_h;
-	__s32	src_x;
-	__s32	src_y;
-	__u32	src_w;
-	__u32	src_h;
-	__u16	flags;
-	enum intel_adf_blending		blending:2;
-	enum intel_adf_transform	transform:3;
-	enum intel_adf_compression	compression:3;
-	enum intel_adf_colorspace       colorspace:4;   /* Buffer Colorspace */
-	__u8	pad:4;
+	 * Index of the buffer to put on this plane
+	 * (within adf_post_config.bufs array)
+	 */
+	__u8 buffer_id;
+
+	/* Constant Alpha value */
+	__u16 alpha;
+
+	struct intel_adf_rect dst;
+	struct intel_adf_rect_fixedpoint src;
+	enum intel_adf_blending_type blending:8;
+	enum intel_adf_transform_mode transform:8;
+	enum intel_adf_compression_mode compression:8;
+	enum intel_adf_colorspace colorspace:8;
+};
+
+/* Configuration for describing a constant color plane */
+struct intel_adf_color {
+	/* Placeholder for future flags. Set to 0 */
+	__u32 flags;
+
+	/* device specific color format */
+	__u32 color;
+
+	struct intel_adf_rect dst;
 };
 
-enum intel_adf_pfitter_flags {
-	INTEL_ADF_PFIT_DISABLE		= 0x0001,
-	INTEL_ADF_PFIT_AUTO		= 0x0002,
-	INTEL_ADF_PFIT_LETTERBOX	= 0x0004,
-	INTEL_ADF_PFIT_PILLARBOX	= 0x0008,
-	/* Flags for any undefined HW specific usage */
-	INTEL_ADF_PFIT_HWSPECIFIC1	= 0x1000,
-	INTEL_ADF_PFIT_HWSPECIFIC2	= 0x2000,
-	INTEL_ADF_PFIT_HWSPECIFIC3	= 0x4000,
-	INTEL_ADF_PFIT_HWSPECIFIC4	= 0x8000,
+enum intel_adf_panelfitter_flags {
+	/* Panel fitter fill modes */
+	INTEL_ADF_PANELFITTER_DISABLE		= 0x00000000,
+	INTEL_ADF_PANELFITTER_AUTO		= 0x00000001,
+	INTEL_ADF_PANELFITTER_LETTERBOX		= 0x00000002,
+	INTEL_ADF_PANELFITTER_PILLARBOX		= 0x00000003,
+
+	/* Hint that the panel fitter state is unchanged since the last post */
+	INTEL_ADF_PANELFITTER_HINT_UNCHANGED	= 0x08000000,
+
+	/* Flags reserved for any future hardware usage */
+	INTEL_ADF_PANELFITTER_HW_PRIVATE_1	= 0x10000000,
+	INTEL_ADF_PANELFITTER_HW_PRIVATE_2	= 0x20000000,
+	INTEL_ADF_PANELFITTER_HW_PRIVATE_3	= 0x40000000,
+	INTEL_ADF_PANELFITTER_HW_PRIVATE_4	= 0x80000000,
 };
 
-/**
- * struct intel_adf_panelfitter
- * overlay_id:	index of the overlay engine for panel fitter
- * pad:		for structure padding, should be zero
- * flags:	flags
- * dst_x:	destination left
- * dst_y:	destination top
- * dst_w:	destination width
- * dst_h:	destination height
- * src_x:	source left
- * src_y:	source top
- * src_w:	source width
- * src_h:	source height
- */
+/* Configuration for describing a panel fitter */
 struct intel_adf_panelfitter {
-	__u8	interface_id;
-	__u8	overlay_id;
-	__u8	pad;
-	__u16	flags;
-	__s16	dst_x;
-	__s16	dst_y;
-	__u16	dst_w;
-	__u16	dst_h;
-	__s16	src_x;
-	__s16	src_y;
-	__u16	src_w;
-	__u16	src_h;
+	/* Combination of flags from the intel_adf_panelfitter_flags enum */
+	__u32 flags;
+
+	struct intel_adf_rect dst;
+	struct intel_adf_rect src;
 };
 
-/*
- * All the overlay structures begin with a _u8 overlay_id element.
- * The type of the specified overlay_engine will determine the type
- * of this union
- */
-struct intel_adf_overlay {
+enum intel_adf_config_type {
+	INTEL_ADF_CONFIG_PLANE,
+	INTEL_ADF_CONFIG_COLOR,
+	INTEL_ADF_CONFIG_PANELFITTER,
+};
+
+struct intel_adf_config {
+	/* Type of this config entry */
+	enum intel_adf_config_type type:8;
+
+	/* index of the interface being updated by this config */
+	__u8 interface_id;
+
+	/* Reserved for future. Initialise to 0 */
+	__u16 pad;
+
 	union {
-		/* Common overlay header for all overlay types */
-		struct {
-			/* index of the interface for this plane */
-			__u8	interface_id;
-			/* index of the overlay engine for this panel fitter */
-			__u8    overlay_id;
-		};
-
-		struct intel_adf_color		color;
-		struct intel_adf_plane		plane;
-		struct intel_adf_panelfitter	panelfitter;
+		struct intel_adf_color color;
+		struct intel_adf_plane plane;
+		struct intel_adf_panelfitter panelfitter;
 	};
 };
 
 enum intel_adf_post_flags {
-	/* Call the custom page flip handler when this flip has completed */
-	INTEL_ADF_POST_FLIPCALLBACK	= 0x0001,
-	/* Apply this immediately, without waiting for vsyn c*/
-	INTEL_ADF_POST_IMMEDIATE	= 0x0002,
+	INTEL_ADF_POST_NO_FLAGS		= 0x00000000,
+
+	/* Call the custom page flip handler when this flip is completed. */
+	INTEL_ADF_POST_FLIPCALLBACK	= 0x00000001,
+
+	/* Apply this immediately, without waiting for vsync */
+	INTEL_ADF_POST_IMMEDIATE	= 0x00000002,
+
+	/* Discard anything currently queued and make this flip on next vsync */
+	INTEL_ADF_POST_DISCARDQUEUE	= 0x00000004,
+
 	/*
-	 * Discard anything currently queued and make this flip happen on
-	 * the next vsync
+	 * If set, this is a partial update specifying only a subset of planes,
+	 * the unspecified planes should remain unchanged.
+	 * If not set, any plane not specified should be turned off.
 	 */
-	INTEL_ADF_POST_DISCARDQUEUE	= 0x0004,
-	/* Flags for any undefined HW specific usage */
-	INTEL_ADF_POST_HWSPECIFIC	= 0xF000,
+	INTEL_ADF_POST_PARTIAL		= 0x00000008,
+
+	/* Flags reserved for any future hardware usage */
+	INTEL_ADF_POST_HW_PRIVATE_1	= 0x10000000,
+	INTEL_ADF_POST_HW_PRIVATE_2	= 0x20000000,
+	INTEL_ADF_POST_HW_PRIVATE_3	= 0x40000000,
+	INTEL_ADF_POST_HW_PRIVATE_4	= 0x80000000,
 };
 
-/**
- * intel_adf_post_custom_data
- * version:	INTEL_ADF_VERSION for backward compatibility support
- * flags:	adf post flags
- * num_overlays:number of overlays
- * overlays:	overlay entried will follow this structure in memory
- */
 struct intel_adf_post_custom_data {
-	__u32				version;
-	__u32				flags;
-	__u32				num_overlays;
-	__u32				zorder;
-
-	/* Z order (on hardware that supports it) is defined by the order of
-	 * these planes entry [0] is backmost, entry [num_overlays-1] is
-	 * frontmost
-	 */
-	struct intel_adf_overlay	overlays[0];
+	/* INTEL_ADF_VERSION for backwards compatibility support. */
+	__u32 version;
+
+	/* Combination of flags from the intel_adf_post_flags enum */
+	__u32 flags;
+
+	/* Device specific number that describe how the layers are ordered. */
+	__u32 zorder;
+
+	/* Number of configuration entries */
+	__u32 n_configs;
+
+	/* configuration entries will follow this structure in memory */
+	struct intel_adf_config configs[0];
 };
 
-#endif /* _VIDEO_INTEL_ADF_H_ */
+#endif /* _UAPI_VIDEO_INTEL_ADF_H_ */
-- 
1.7.9.5

