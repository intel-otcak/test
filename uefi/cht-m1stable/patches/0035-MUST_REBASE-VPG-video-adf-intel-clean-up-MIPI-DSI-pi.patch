From 8b922b33041e994496540f4b0a093de2a0837604 Mon Sep 17 00:00:00 2001
Message-Id: <8b922b33041e994496540f4b0a093de2a0837604.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Gaurav K Singh <gaurav.k.singh@intel.com>
Date: Tue, 3 Feb 2015 08:48:14 +0530
Subject: [PATCH 35/95] MUST_REBASE [VPG]: video/adf/intel: clean up MIPI DSI 
 pipe vs port usage

This patch is in preparation of DSI dual link feature. MIPI DSI works on
Ports A and C, which in hardware maps to Pipe A and Pipe B respectively.
With introduction of DSI dual link, things will get more complicated,
so cleaned up the register definitions and the code.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-5276
Change-Id: Ib1d569c3f90145fea0745f3ec4fbead510d0685c
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
---
 drivers/video/adf/intel/core/vlv/chv_dpio.c        |    3 +-
 drivers/video/adf/intel/core/vlv/vlv_dc_config.c   |    2 +-
 drivers/video/adf/intel/core/vlv/vlv_dsi_port.c    |   67 ++---
 drivers/video/adf/intel/core/vlv/vlv_pipeline.c    |   37 ++-
 .../video/adf/intel/include/core/intel_dc_config.h |    1 +
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |    2 +-
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |  287 +++++++++++++-------
 7 files changed, 254 insertions(+), 145 deletions(-)

diff --git a/drivers/video/adf/intel/core/vlv/chv_dpio.c b/drivers/video/adf/intel/core/vlv/chv_dpio.c
index 95cd4f2..57ae8a9 100644
--- a/drivers/video/adf/intel/core/vlv/chv_dpio.c
+++ b/drivers/video/adf/intel/core/vlv/chv_dpio.c
@@ -55,11 +55,12 @@ static inline struct vlv_dc_config *get_vlv_dc_config(
 
 int vlv_disp_to_port(struct vlv_pipeline *pipeline)
 {
+	struct vlv_pll *pll = &pipeline->pll;
 	enum port port_id;
 
 	switch (pipeline->type) {
 	case INTEL_PIPE_DSI:
-		port_id = pipeline->port.dsi_port.port_id;
+		port_id = pipeline->port.dsi_port[pll->port_id].port_id;
 		break;
 	case INTEL_PIPE_HDMI:
 		port_id = pipeline->port.hdmi_port.port_id;
diff --git a/drivers/video/adf/intel/core/vlv/vlv_dc_config.c b/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
index a61657c..b326360 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
@@ -234,7 +234,7 @@ static int vlv_initialize_port(struct vlv_dc_config *vlv_config,
 	disp = &vlv_config->pipeline[disp_no];
 	switch (type) {
 	case INTEL_PIPE_DSI:
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[port];
 		vlv_dsi_port_init(dsi_port, port, pipe);
 		break;
 	case INTEL_PIPE_HDMI:
diff --git a/drivers/video/adf/intel/core/vlv/vlv_dsi_port.c b/drivers/video/adf/intel/core/vlv/vlv_dsi_port.c
index 0cce97a..40321cb 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_dsi_port.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_dsi_port.c
@@ -433,41 +433,42 @@ bool vlv_dsi_port_can_be_disabled(struct vlv_dsi_port *port)
 bool vlv_dsi_port_init(struct vlv_dsi_port *port, enum port enum_port,
 		enum pipe pipe)
 {
-	port->offset = MIPI_PORT_CTRL(pipe);
-	port->dr_offset = MIPI_DEVICE_READY(pipe);
-	port->func_prg_offset = MIPI_DSI_FUNC_PRG(pipe);
-	port->eot_offset = MIPI_EOT_DISABLE(pipe);
-	port->fifo_stat_offset = MIPI_GEN_FIFO_STAT(pipe);
-	port->ctrl_offset = MIPI_CTRL(pipe);
-	port->dphy_param_offset = MIPI_DPHY_PARAM(pipe);
-	port->dpi_res_offset = MIPI_DPI_RESOLUTION(pipe);
-	port->hfp_count_offset = MIPI_HFP_COUNT(pipe);
-	port->hsync_count_offset = MIPI_HSYNC_PADDING_COUNT(pipe);
-	port->hbp_count_offset = MIPI_HBP_COUNT(pipe);
-	port->vfp_count_offset = MIPI_VFP_COUNT(pipe);
-	port->vsync_count_offset = MIPI_VSYNC_PADDING_COUNT(pipe);
-	port->vbp_count_offset = MIPI_VBP_COUNT(pipe);
-	port->max_ret_pkt_offset	= MIPI_MAX_RETURN_PKT_SIZE(pipe);
-	port->hs_tx_timeout_offset	= MIPI_HS_TX_TIMEOUT(pipe);
-	port->lp_rx_timeout_offset	= MIPI_LP_RX_TIMEOUT(pipe);
-	port->ta_timeout_offset		= MIPI_TURN_AROUND_TIMEOUT(pipe);
-	port->device_reset_timer_offset	= MIPI_DEVICE_RESET_TIMER(pipe);
-	port->init_count_offset		= MIPI_INIT_COUNT(pipe);
-	port->hl_switch_count_offset	= MIPI_HIGH_LOW_SWITCH_COUNT(pipe);
-	port->lp_byteclk_offset		= MIPI_LP_BYTECLK(pipe);
-	port->dbi_bw_offset		= MIPI_DBI_BW_CTRL(pipe);
-	port->lane_switch_time_offset	= MIPI_CLK_LANE_SWITCH_TIME_CNT(pipe);
-	port->video_mode_offset		= MIPI_VIDEO_MODE_FORMAT(pipe);
+	port->offset = MIPI_PORT_CTRL(enum_port);
+	port->dr_offset = MIPI_DEVICE_READY(enum_port);
+	port->func_prg_offset = MIPI_DSI_FUNC_PRG(enum_port);
+	port->eot_offset = MIPI_EOT_DISABLE(enum_port);
+	port->fifo_stat_offset = MIPI_GEN_FIFO_STAT(enum_port);
+	port->ctrl_offset = MIPI_CTRL(enum_port);
+	port->dphy_param_offset = MIPI_DPHY_PARAM(enum_port);
+	port->dpi_res_offset = MIPI_DPI_RESOLUTION(enum_port);
+	port->hfp_count_offset = MIPI_HFP_COUNT(enum_port);
+	port->hsync_count_offset = MIPI_HSYNC_PADDING_COUNT(enum_port);
+	port->hbp_count_offset = MIPI_HBP_COUNT(enum_port);
+	port->vfp_count_offset = MIPI_VFP_COUNT(enum_port);
+	port->vsync_count_offset = MIPI_VSYNC_PADDING_COUNT(enum_port);
+	port->vbp_count_offset = MIPI_VBP_COUNT(enum_port);
+	port->max_ret_pkt_offset	= MIPI_MAX_RETURN_PKT_SIZE(enum_port);
+	port->hs_tx_timeout_offset	= MIPI_HS_TX_TIMEOUT(enum_port);
+	port->lp_rx_timeout_offset	= MIPI_LP_RX_TIMEOUT(enum_port);
+	port->ta_timeout_offset		= MIPI_TURN_AROUND_TIMEOUT(enum_port);
+	port->device_reset_timer_offset	= MIPI_DEVICE_RESET_TIMER(enum_port);
+	port->init_count_offset		= MIPI_INIT_COUNT(enum_port);
+	port->hl_switch_count_offset	= MIPI_HIGH_LOW_SWITCH_COUNT(enum_port);
+	port->lp_byteclk_offset		= MIPI_LP_BYTECLK(enum_port);
+	port->dbi_bw_offset		= MIPI_DBI_BW_CTRL(enum_port);
+	port->lane_switch_time_offset =
+				MIPI_CLK_LANE_SWITCH_TIME_CNT(enum_port);
+	port->video_mode_offset		= MIPI_VIDEO_MODE_FORMAT(enum_port);
 
 	/* cmd mode offsets */
-	port->hs_ls_dbi_enable_offset = MIPI_HS_LP_DBI_ENABLE(pipe);
-	port->hs_gen_ctrl_offset = MIPI_HS_GEN_CTRL(pipe);
-	port->lp_gen_ctrl_offset = MIPI_LP_GEN_CTRL(pipe);
-	port->hs_gen_data_offset = MIPI_HS_GEN_DATA(pipe);
-	port->lp_gen_data_offset = MIPI_LP_GEN_DATA(pipe);
-	port->dpi_ctrl_offset    = MIPI_DPI_CONTROL(pipe);
-
-	port->intr_stat_offset = MIPI_INTR_STAT(pipe);
+	port->hs_ls_dbi_enable_offset = MIPI_HS_LP_DBI_ENABLE(enum_port);
+	port->hs_gen_ctrl_offset = MIPI_HS_GEN_CTRL(enum_port);
+	port->lp_gen_ctrl_offset = MIPI_LP_GEN_CTRL(enum_port);
+	port->hs_gen_data_offset = MIPI_HS_GEN_DATA(enum_port);
+	port->lp_gen_data_offset = MIPI_LP_GEN_DATA(enum_port);
+	port->dpi_ctrl_offset    = MIPI_DPI_CONTROL(enum_port);
+
+	port->intr_stat_offset = MIPI_INTR_STAT(enum_port);
 
 	port->port_id = enum_port;
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
index ca4aafb..378e22a 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
@@ -105,7 +105,7 @@ u32 vlv_dsi_prepare_on(struct intel_pipeline *pipeline,
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_pll *pll = &disp->pll;
 	struct vlv_pipe *pipe = &disp->pipe;
-	struct vlv_dsi_port *dsi_port = &disp->port.dsi_port;
+	struct vlv_dsi_port *dsi_port = &disp->port.dsi_port[pll->port_id];
 	struct dsi_config *config = pipeline->params.dsi.dsi_config;
 	u32 err = 0;
 
@@ -141,9 +141,10 @@ u32 vlv_port_enable(struct intel_pipeline *pipeline,
 {
 	u32 ret = 0;
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	struct vlv_dsi_port *dsi_port = &disp->port.dsi_port;
 	struct dsi_config *config = pipeline->params.dsi.dsi_config;
 	struct dsi_context *intel_dsi = &config->ctx;
+	struct vlv_pll *pll = &disp->pll;
+	struct vlv_dsi_port *dsi_port = &disp->port.dsi_port[pll->port_id];
 
 	if (disp->type == INTEL_PIPE_DSI) {
 		/* DSI PORT */
@@ -271,7 +272,8 @@ u32 vlv_dsi_pre_pipeline_on(struct intel_pipeline *pipeline,
 		struct drm_mode_modeinfo *mode)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	struct vlv_dsi_port *port = &disp->port.dsi_port;
+	struct vlv_pll *pll = &disp->pll;
+	struct vlv_dsi_port *port = &disp->port.dsi_port[pll->port_id];
 	u32 err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
@@ -286,7 +288,7 @@ u32 vlv_dsi_post_pipeline_off(struct intel_pipeline *pipeline)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_pll *pll = &disp->pll;
-	struct vlv_dsi_port *dsi_port = &disp->port.dsi_port;
+	struct vlv_dsi_port *dsi_port = &disp->port.dsi_port[pll->port_id];
 	u32 err = 0;
 	err = vlv_dsi_port_wait_for_fifo_empty(dsi_port);
 
@@ -322,11 +324,12 @@ static inline u32 vlv_port_disable(struct intel_pipeline *pipeline)
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
 	struct vlv_hdmi_port *hdmi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	u32 err = 0;
 
 	switch (disp->type) {
 	case INTEL_PIPE_DSI:
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		err = vlv_dsi_port_disable(dsi_port,
 			pipeline->params.dsi.dsi_config);
 		/*
@@ -474,10 +477,11 @@ bool vlv_is_vid_mode(struct intel_pipeline *pipeline)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	bool ret = false;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		ret = vlv_dsi_port_is_vid_mode(dsi_port);
 	}
 
@@ -488,10 +492,11 @@ bool vlv_can_be_disabled(struct intel_pipeline *pipeline)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	bool ret = false;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		ret = vlv_dsi_port_can_be_disabled(dsi_port);
 	}
 
@@ -523,9 +528,10 @@ void vlv_cmd_hs_mode_enable(struct intel_pipeline *pipeline, bool enable)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		vlv_dsi_port_cmd_hs_mode_enable(dsi_port, enable);
 	}
 }
@@ -535,10 +541,11 @@ int vlv_cmd_vc_dcs_write(struct intel_pipeline *pipeline, int channel,
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		err = vlv_dsi_port_cmd_vc_dcs_write(dsi_port,
 			channel, data, len);
 	}
@@ -551,10 +558,11 @@ int vlv_cmd_vc_generic_write(struct intel_pipeline *pipeline, int channel,
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		err = vlv_dsi_port_cmd_vc_generic_write(dsi_port,
 			channel, data, len);
 	}
@@ -567,10 +575,11 @@ int vlv_cmd_vc_dcs_read(struct intel_pipeline *pipeline, int channel,
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		err = vlv_dsi_port_cmd_vc_dcs_read(dsi_port, channel,
 			dcs_cmd, buf, buflen);
 	}
@@ -583,10 +592,11 @@ int vlv_cmd_vc_generic_read(struct intel_pipeline *pipeline, int channel,
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		err = vlv_dsi_port_cmd_vc_generic_read(dsi_port, channel,
 			reqdata, reqlen, buf, buflen);
 	}
@@ -598,10 +608,11 @@ int vlv_cmd_dpi_send_cmd(struct intel_pipeline *pipeline, u32 cmd, bool hs)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dsi_port *dsi_port = NULL;
+	struct vlv_pll *pll = &disp->pll;
 	int err = 0;
 
 	if (disp->type == INTEL_PIPE_DSI) {
-		dsi_port = &disp->port.dsi_port;
+		dsi_port = &disp->port.dsi_port[pll->port_id];
 		err = vlv_dsi_port_cmd_dpi_send_cmd(dsi_port, cmd, hs);
 	}
 
diff --git a/drivers/video/adf/intel/include/core/intel_dc_config.h b/drivers/video/adf/intel/include/core/intel_dc_config.h
index d0495fc..2b3c179 100644
--- a/drivers/video/adf/intel/include/core/intel_dc_config.h
+++ b/drivers/video/adf/intel/include/core/intel_dc_config.h
@@ -168,6 +168,7 @@ enum port {
 	PORT_B,
 	PORT_C,
 	PORT_D,
+	ADF_MAX_PORTS,
 	PORT_INVALID,
 };
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index 335aaa2..3e58d40 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -150,7 +150,7 @@ struct vlv_pipeline {
 		struct hdmi_pipe hdmi;
 	} gen;
 	union {
-		struct vlv_dsi_port dsi_port;
+		struct vlv_dsi_port dsi_port[ADF_MAX_PORTS - 1];
 		struct vlv_hdmi_port hdmi_port;
 	} port;
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index d2dd009..aa4c557 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -32,6 +32,9 @@
 
 #define _PORT(port, a, b) ((a) + (port)*((b)-(a)))
 
+#define _PORT3(port, a, b, c) ((port) == PORT_A ? (a) : \
+			       (port) == PORT_B ? (b) : (c))
+
 #define _MASKED_BIT_ENABLE(a) (((a) << 16) | (a))
 #define _MASKED_BIT_DISABLE(a) ((a) << 16)
 
@@ -5771,9 +5774,14 @@ extern int chv_cursor_offsets[];
 
 /* VLV MIPI registers */
 
+/* For MIPI Ports A & C only */
+#define _MIPI_PORT(port, a, c)			_PORT3(port, a, 0, c)
+
 #define _MIPIA_PORT_CTRL			(VLV_DISPLAY_BASE + 0x61190)
-#define _MIPIB_PORT_CTRL			(VLV_DISPLAY_BASE + 0x61700)
-#define MIPI_PORT_CTRL(pipe)		_PIPE(pipe, _MIPIA_PORT_CTRL, _MIPIB_PORT_CTRL)
+#define _MIPIC_PORT_CTRL			(VLV_DISPLAY_BASE + 0x61700)
+#define MIPI_PORT_CTRL(port)			_MIPI_PORT(port, \
+							   _MIPIA_PORT_CTRL, \
+							   _MIPIC_PORT_CTRL)
 #define  DPI_ENABLE					(1 << 31) /* A + B */
 #define  MIPIA_MIPI4DPHY_DELAY_COUNT_SHIFT		27
 #define  MIPIA_MIPI4DPHY_DELAY_COUNT_MASK		(0xf << 27)
@@ -5799,8 +5807,8 @@ extern int chv_cursor_offsets[];
 #define  BANDGAP_MASK					(1 << 8)
 #define  BANDGAP_PNW_CIRCUIT				(0 << 8)
 #define  BANDGAP_LNC_CIRCUIT				(1 << 8)
-#define  MIPIB_FLISDSI_DELAY_COUNT_LOW_SHIFT		5
-#define  MIPIB_FLISDSI_DELAY_COUNT_LOW_MASK		(7 << 5)
+#define  MIPIC_FLISDSI_DELAY_COUNT_LOW_SHIFT		5
+#define  MIPIC_FLISDSI_DELAY_COUNT_LOW_MASK		(7 << 5)
 #define  TEARING_EFFECT_DELAY				(1 << 4) /* A + B */
 #define  TEARING_EFFECT_SHIFT				2 /* A + B */
 #define  TEARING_EFFECT_MASK				(3 << 2)
@@ -5814,8 +5822,10 @@ extern int chv_cursor_offsets[];
 #define  LANE_CONFIGURATION_DUAL_LINK_B			(2 << 0)
 
 #define _MIPIA_TEARING_CTRL			(VLV_DISPLAY_BASE + 0x61194)
-#define _MIPIB_TEARING_CTRL			(VLV_DISPLAY_BASE + 0x61704)
-#define MIPI_TEARING_CTRL(pipe)		_PIPE(pipe, _MIPIA_TEARING_CTRL, _MIPIB_TEARING_CTRL)
+#define _MIPIC_TEARING_CTRL			(VLV_DISPLAY_BASE + 0x61704)
+#define MIPI_TEARING_CTRL(port)			_MIPI_PORT(port, \
+						_MIPIA_TEARING_CTRL, \
+						_MIPIC_TEARING_CTRL)
 #define  TEARING_EFFECT_DELAY_SHIFT			0
 #define  TEARING_EFFECT_DELAY_MASK			(0xffff << 0)
 
@@ -5825,8 +5835,10 @@ extern int chv_cursor_offsets[];
 /* MIPI DSI Controller and D-PHY registers */
 
 #define _MIPIA_DEVICE_READY			(VLV_DISPLAY_BASE + 0xb000)
-#define _MIPIB_DEVICE_READY			(VLV_DISPLAY_BASE + 0xb800)
-#define MIPI_DEVICE_READY(pipe)		_PIPE(pipe, _MIPIA_DEVICE_READY, _MIPIB_DEVICE_READY)
+#define _MIPIC_DEVICE_READY			(VLV_DISPLAY_BASE + 0xb800)
+#define MIPI_DEVICE_READY(port)			_MIPI_PORT(port, \
+						_MIPIA_DEVICE_READY, \
+						_MIPIC_DEVICE_READY)
 #define  BUS_POSSESSION					(1 << 3) /* set to give bus to receiver */
 #define  ULPS_STATE_MASK				(3 << 1)
 #define  ULPS_STATE_ENTER				(2 << 1)
@@ -5835,11 +5847,15 @@ extern int chv_cursor_offsets[];
 #define  DEVICE_READY					(1 << 0)
 
 #define _MIPIA_INTR_STAT			(VLV_DISPLAY_BASE + 0xb004)
-#define _MIPIB_INTR_STAT			(VLV_DISPLAY_BASE + 0xb804)
-#define MIPI_INTR_STAT(pipe)		_PIPE(pipe, _MIPIA_INTR_STAT, _MIPIB_INTR_STAT)
+#define _MIPIC_INTR_STAT			(VLV_DISPLAY_BASE + 0xb804)
+#define MIPI_INTR_STAT(port)			_MIPI_PORT(port, \
+							   _MIPIA_INTR_STAT, \
+							   _MIPIC_INTR_STAT)
 #define _MIPIA_INTR_EN				(VLV_DISPLAY_BASE + 0xb008)
-#define _MIPIB_INTR_EN				(VLV_DISPLAY_BASE + 0xb808)
-#define MIPI_INTR_EN(pipe)		_PIPE(pipe, _MIPIA_INTR_EN, _MIPIB_INTR_EN)
+#define _MIPIC_INTR_EN				(VLV_DISPLAY_BASE + 0xb808)
+#define MIPI_INTR_EN(port)			_MIPI_PORT(port, \
+							   _MIPIA_INTR_EN, \
+							   _MIPIC_INTR_EN)
 #define  TEARING_EFFECT					(1 << 31)
 #define  SPL_PKT_SENT_INTERRUPT				(1 << 30)
 #define  GEN_READ_DATA_AVAIL				(1 << 29)
@@ -5874,8 +5890,10 @@ extern int chv_cursor_offsets[];
 #define  RXSOT_ERROR					(1 << 0)
 
 #define _MIPIA_DSI_FUNC_PRG			(VLV_DISPLAY_BASE + 0xb00c)
-#define _MIPIB_DSI_FUNC_PRG			(VLV_DISPLAY_BASE + 0xb80c)
-#define MIPI_DSI_FUNC_PRG(pipe)		_PIPE(pipe, _MIPIA_DSI_FUNC_PRG, _MIPIB_DSI_FUNC_PRG)
+#define _MIPIC_DSI_FUNC_PRG			(VLV_DISPLAY_BASE + 0xb80c)
+#define MIPI_DSI_FUNC_PRG(port)			_MIPI_PORT(port, \
+						_MIPIA_DSI_FUNC_PRG, \
+						_MIPIC_DSI_FUNC_PRG)
 #define  CMD_MODE_DATA_WIDTH_MASK			(7 << 13)
 #define  CMD_MODE_NOT_SUPPORTED				(0 << 13)
 #define  CMD_MODE_DATA_WIDTH_16_BIT			(1 << 13)
@@ -5897,77 +5915,107 @@ extern int chv_cursor_offsets[];
 #define  DATA_LANES_PRG_REG_MASK			(7 << 0)
 
 #define _MIPIA_HS_TX_TIMEOUT			(VLV_DISPLAY_BASE + 0xb010)
-#define _MIPIB_HS_TX_TIMEOUT			(VLV_DISPLAY_BASE + 0xb810)
-#define MIPI_HS_TX_TIMEOUT(pipe)	_PIPE(pipe, _MIPIA_HS_TX_TIMEOUT, _MIPIB_HS_TX_TIMEOUT)
+#define _MIPIC_HS_TX_TIMEOUT			(VLV_DISPLAY_BASE + 0xb810)
+#define MIPI_HS_TX_TIMEOUT(port)		_MIPI_PORT(port, \
+						_MIPIA_HS_TX_TIMEOUT, \
+						_MIPIC_HS_TX_TIMEOUT)
 #define  HIGH_SPEED_TX_TIMEOUT_COUNTER_MASK		0xffffff
 
 #define _MIPIA_LP_RX_TIMEOUT			(VLV_DISPLAY_BASE + 0xb014)
-#define _MIPIB_LP_RX_TIMEOUT			(VLV_DISPLAY_BASE + 0xb814)
-#define MIPI_LP_RX_TIMEOUT(pipe)	_PIPE(pipe, _MIPIA_LP_RX_TIMEOUT, _MIPIB_LP_RX_TIMEOUT)
+#define _MIPIC_LP_RX_TIMEOUT			(VLV_DISPLAY_BASE + 0xb814)
+#define MIPI_LP_RX_TIMEOUT(port)		_MIPI_PORT(port, \
+						_MIPIA_LP_RX_TIMEOUT,\
+						_MIPIC_LP_RX_TIMEOUT)
 #define  LOW_POWER_RX_TIMEOUT_COUNTER_MASK		0xffffff
 
 #define _MIPIA_TURN_AROUND_TIMEOUT		(VLV_DISPLAY_BASE + 0xb018)
-#define _MIPIB_TURN_AROUND_TIMEOUT		(VLV_DISPLAY_BASE + 0xb818)
-#define MIPI_TURN_AROUND_TIMEOUT(pipe)	_PIPE(pipe, _MIPIA_TURN_AROUND_TIMEOUT, _MIPIB_TURN_AROUND_TIMEOUT)
+#define _MIPIC_TURN_AROUND_TIMEOUT		(VLV_DISPLAY_BASE + 0xb818)
+#define MIPI_TURN_AROUND_TIMEOUT(port)		_MIPI_PORT(port, \
+						_MIPIA_TURN_AROUND_TIMEOUT, \
+						_MIPIC_TURN_AROUND_TIMEOUT)
 #define  TURN_AROUND_TIMEOUT_MASK			0x3f
 
 #define _MIPIA_DEVICE_RESET_TIMER		(VLV_DISPLAY_BASE + 0xb01c)
-#define _MIPIB_DEVICE_RESET_TIMER		(VLV_DISPLAY_BASE + 0xb81c)
-#define MIPI_DEVICE_RESET_TIMER(pipe)	_PIPE(pipe, _MIPIA_DEVICE_RESET_TIMER, _MIPIB_DEVICE_RESET_TIMER)
+#define _MIPIC_DEVICE_RESET_TIMER		(VLV_DISPLAY_BASE + 0xb81c)
+#define MIPI_DEVICE_RESET_TIMER(port)		_MIPI_PORT(port, \
+						_MIPIA_DEVICE_RESET_TIMER, \
+						_MIPIC_DEVICE_RESET_TIMER)
 #define  DEVICE_RESET_TIMER_MASK			0xffff
 
 #define _MIPIA_DPI_RESOLUTION			(VLV_DISPLAY_BASE + 0xb020)
-#define _MIPIB_DPI_RESOLUTION			(VLV_DISPLAY_BASE + 0xb820)
-#define MIPI_DPI_RESOLUTION(pipe)	_PIPE(pipe, _MIPIA_DPI_RESOLUTION, _MIPIB_DPI_RESOLUTION)
+#define _MIPIC_DPI_RESOLUTION			(VLV_DISPLAY_BASE + 0xb820)
+#define MIPI_DPI_RESOLUTION(port)		_MIPI_PORT(port, \
+						_MIPIA_DPI_RESOLUTION, \
+						_MIPIC_DPI_RESOLUTION)
 #define  VERTICAL_ADDRESS_SHIFT				16
 #define  VERTICAL_ADDRESS_MASK				(0xffff << 16)
 #define  HORIZONTAL_ADDRESS_SHIFT			0
 #define  HORIZONTAL_ADDRESS_MASK			0xffff
 
 #define _MIPIA_DBI_FIFO_THROTTLE		(VLV_DISPLAY_BASE + 0xb024)
-#define _MIPIB_DBI_FIFO_THROTTLE		(VLV_DISPLAY_BASE + 0xb824)
-#define MIPI_DBI_FIFO_THROTTLE(pipe)	_PIPE(pipe, _MIPIA_DBI_FIFO_THROTTLE, _MIPIB_DBI_FIFO_THROTTLE)
+#define _MIPIC_DBI_FIFO_THROTTLE		(VLV_DISPLAY_BASE + 0xb824)
+#define MIPI_DBI_FIFO_THROTTLE(port)		_MIPI_PORT(port, \
+						_MIPIA_DBI_FIFO_THROTTLE, \
+						_MIPIC_DBI_FIFO_THROTTLE)
 #define  DBI_FIFO_EMPTY_HALF				(0 << 0)
 #define  DBI_FIFO_EMPTY_QUARTER				(1 << 0)
 #define  DBI_FIFO_EMPTY_7_LOCATIONS			(2 << 0)
 
 /* regs below are bits 15:0 */
 #define _MIPIA_HSYNC_PADDING_COUNT		(VLV_DISPLAY_BASE + 0xb028)
-#define _MIPIB_HSYNC_PADDING_COUNT		(VLV_DISPLAY_BASE + 0xb828)
-#define MIPI_HSYNC_PADDING_COUNT(pipe)	_PIPE(pipe, _MIPIA_HSYNC_PADDING_COUNT, _MIPIB_HSYNC_PADDING_COUNT)
+#define _MIPIC_HSYNC_PADDING_COUNT		(VLV_DISPLAY_BASE + 0xb828)
+#define MIPI_HSYNC_PADDING_COUNT(port)		_MIPI_PORT(port, \
+						_MIPIA_HSYNC_PADDING_COUNT, \
+						_MIPIC_HSYNC_PADDING_COUNT)
 
 #define _MIPIA_HBP_COUNT			(VLV_DISPLAY_BASE + 0xb02c)
-#define _MIPIB_HBP_COUNT			(VLV_DISPLAY_BASE + 0xb82c)
-#define MIPI_HBP_COUNT(pipe)		_PIPE(pipe, _MIPIA_HBP_COUNT, _MIPIB_HBP_COUNT)
+#define _MIPIC_HBP_COUNT			(VLV_DISPLAY_BASE + 0xb82c)
+#define MIPI_HBP_COUNT(port)			_MIPI_PORT(port, \
+						_MIPIA_HBP_COUNT, \
+						_MIPIC_HBP_COUNT)
 
 #define _MIPIA_HFP_COUNT			(VLV_DISPLAY_BASE + 0xb030)
-#define _MIPIB_HFP_COUNT			(VLV_DISPLAY_BASE + 0xb830)
-#define MIPI_HFP_COUNT(pipe)		_PIPE(pipe, _MIPIA_HFP_COUNT, _MIPIB_HFP_COUNT)
+#define _MIPIC_HFP_COUNT			(VLV_DISPLAY_BASE + 0xb830)
+#define MIPI_HFP_COUNT(port)			_MIPI_PORT(port, \
+						_MIPIA_HFP_COUNT, \
+						_MIPIC_HFP_COUNT)
 
 #define _MIPIA_HACTIVE_AREA_COUNT		(VLV_DISPLAY_BASE + 0xb034)
-#define _MIPIB_HACTIVE_AREA_COUNT		(VLV_DISPLAY_BASE + 0xb834)
-#define MIPI_HACTIVE_AREA_COUNT(pipe)	_PIPE(pipe, _MIPIA_HACTIVE_AREA_COUNT, _MIPIB_HACTIVE_AREA_COUNT)
+#define _MIPIC_HACTIVE_AREA_COUNT		(VLV_DISPLAY_BASE + 0xb834)
+#define MIPI_HACTIVE_AREA_COUNT(port)		_MIPI_PORT(port, \
+						_MIPIA_HACTIVE_AREA_COUNT, \
+						_MIPIC_HACTIVE_AREA_COUNT)
 
 #define _MIPIA_VSYNC_PADDING_COUNT		(VLV_DISPLAY_BASE + 0xb038)
-#define _MIPIB_VSYNC_PADDING_COUNT		(VLV_DISPLAY_BASE + 0xb838)
-#define MIPI_VSYNC_PADDING_COUNT(pipe)	_PIPE(pipe, _MIPIA_VSYNC_PADDING_COUNT, _MIPIB_VSYNC_PADDING_COUNT)
+#define _MIPIC_VSYNC_PADDING_COUNT		(VLV_DISPLAY_BASE + 0xb838)
+#define MIPI_VSYNC_PADDING_COUNT(port)		_MIPI_PORT(port, \
+						_MIPIA_VSYNC_PADDING_COUNT, \
+						_MIPIC_VSYNC_PADDING_COUNT)
 
 #define _MIPIA_VBP_COUNT			(VLV_DISPLAY_BASE + 0xb03c)
-#define _MIPIB_VBP_COUNT			(VLV_DISPLAY_BASE + 0xb83c)
-#define MIPI_VBP_COUNT(pipe)		_PIPE(pipe, _MIPIA_VBP_COUNT, _MIPIB_VBP_COUNT)
+#define _MIPIC_VBP_COUNT			(VLV_DISPLAY_BASE + 0xb83c)
+#define MIPI_VBP_COUNT(port)			_MIPI_PORT(port, \
+						_MIPIA_VBP_COUNT, \
+						_MIPIC_VBP_COUNT)
 
 #define _MIPIA_VFP_COUNT			(VLV_DISPLAY_BASE + 0xb040)
-#define _MIPIB_VFP_COUNT			(VLV_DISPLAY_BASE + 0xb840)
-#define MIPI_VFP_COUNT(pipe)		_PIPE(pipe, _MIPIA_VFP_COUNT, _MIPIB_VFP_COUNT)
+#define _MIPIC_VFP_COUNT			(VLV_DISPLAY_BASE + 0xb840)
+#define MIPI_VFP_COUNT(port)			_MIPI_PORT(port, \
+						_MIPIA_VFP_COUNT, \
+						_MIPIC_VFP_COUNT)
 
 #define _MIPIA_HIGH_LOW_SWITCH_COUNT		(VLV_DISPLAY_BASE + 0xb044)
-#define _MIPIB_HIGH_LOW_SWITCH_COUNT		(VLV_DISPLAY_BASE + 0xb844)
-#define MIPI_HIGH_LOW_SWITCH_COUNT(pipe)	_PIPE(pipe, _MIPIA_HIGH_LOW_SWITCH_COUNT, _MIPIB_HIGH_LOW_SWITCH_COUNT)
+#define _MIPIC_HIGH_LOW_SWITCH_COUNT		(VLV_DISPLAY_BASE + 0xb844)
+#define MIPI_HIGH_LOW_SWITCH_COUNT(port)	_MIPI_PORT(port, \
+						_MIPIA_HIGH_LOW_SWITCH_COUNT, \
+						_MIPIC_HIGH_LOW_SWITCH_COUNT)
 /* regs above are bits 15:0 */
 
 #define _MIPIA_DPI_CONTROL			(VLV_DISPLAY_BASE + 0xb048)
-#define _MIPIB_DPI_CONTROL			(VLV_DISPLAY_BASE + 0xb848)
-#define MIPI_DPI_CONTROL(pipe)		_PIPE(pipe, _MIPIA_DPI_CONTROL, _MIPIB_DPI_CONTROL)
+#define _MIPIC_DPI_CONTROL			(VLV_DISPLAY_BASE + 0xb848)
+#define MIPI_DPI_CONTROL(port)			_MIPI_PORT(port, \
+						_MIPIA_DPI_CONTROL, \
+						_MIPIC_DPI_CONTROL)
 #define  DPI_LP_MODE					(1 << 6)
 #define  BACKLIGHT_OFF					(1 << 5)
 #define  BACKLIGHT_ON					(1 << 4)
@@ -5977,26 +6025,34 @@ extern int chv_cursor_offsets[];
 #define  SHUTDOWN					(1 << 0)
 
 #define _MIPIA_DPI_DATA				(VLV_DISPLAY_BASE + 0xb04c)
-#define _MIPIB_DPI_DATA				(VLV_DISPLAY_BASE + 0xb84c)
-#define MIPI_DPI_DATA(pipe)		_PIPE(pipe, _MIPIA_DPI_DATA, _MIPIB_DPI_DATA)
+#define _MIPIC_DPI_DATA				(VLV_DISPLAY_BASE + 0xb84c)
+#define MIPI_DPI_DATA(port)			_MIPI_PORT(port, \
+						_MIPIA_DPI_DATA, \
+						_MIPIC_DPI_DATA)
 #define  COMMAND_BYTE_SHIFT				0
 #define  COMMAND_BYTE_MASK				(0x3f << 0)
 
 #define _MIPIA_INIT_COUNT			(VLV_DISPLAY_BASE + 0xb050)
-#define _MIPIB_INIT_COUNT			(VLV_DISPLAY_BASE + 0xb850)
-#define MIPI_INIT_COUNT(pipe)		_PIPE(pipe, _MIPIA_INIT_COUNT, _MIPIB_INIT_COUNT)
+#define _MIPIC_INIT_COUNT			(VLV_DISPLAY_BASE + 0xb850)
+#define MIPI_INIT_COUNT(port)			_MIPI_PORT(port, \
+						_MIPIA_INIT_COUNT, \
+						_MIPIC_INIT_COUNT)
 #define  MASTER_INIT_TIMER_SHIFT			0
 #define  MASTER_INIT_TIMER_MASK				(0xffff << 0)
 
 #define _MIPIA_MAX_RETURN_PKT_SIZE		(VLV_DISPLAY_BASE + 0xb054)
-#define _MIPIB_MAX_RETURN_PKT_SIZE		(VLV_DISPLAY_BASE + 0xb854)
-#define MIPI_MAX_RETURN_PKT_SIZE(pipe)	_PIPE(pipe, _MIPIA_MAX_RETURN_PKT_SIZE, _MIPIB_MAX_RETURN_PKT_SIZE)
+#define _MIPIC_MAX_RETURN_PKT_SIZE		(VLV_DISPLAY_BASE + 0xb854)
+#define MIPI_MAX_RETURN_PKT_SIZE(port)		_MIPI_PORT(port, \
+						_MIPIA_MAX_RETURN_PKT_SIZE, \
+						_MIPIC_MAX_RETURN_PKT_SIZE)
 #define  MAX_RETURN_PKT_SIZE_SHIFT			0
 #define  MAX_RETURN_PKT_SIZE_MASK			(0x3ff << 0)
 
 #define _MIPIA_VIDEO_MODE_FORMAT		(VLV_DISPLAY_BASE + 0xb058)
-#define _MIPIB_VIDEO_MODE_FORMAT		(VLV_DISPLAY_BASE + 0xb858)
-#define MIPI_VIDEO_MODE_FORMAT(pipe)	_PIPE(pipe, _MIPIA_VIDEO_MODE_FORMAT, _MIPIB_VIDEO_MODE_FORMAT)
+#define _MIPIC_VIDEO_MODE_FORMAT		(VLV_DISPLAY_BASE + 0xb858)
+#define MIPI_VIDEO_MODE_FORMAT(port)		_MIPI_PORT(port, \
+						_MIPIA_VIDEO_MODE_FORMAT, \
+						_MIPIC_VIDEO_MODE_FORMAT)
 #define  RANDOM_DPI_DISPLAY_RESOLUTION			(1 << 4)
 #define  DISABLE_VIDEO_BTA				(1 << 3)
 #define  IP_TG_CONFIG					(1 << 2)
@@ -6005,8 +6061,10 @@ extern int chv_cursor_offsets[];
 #define  VIDEO_MODE_BURST				(3 << 0)
 
 #define _MIPIA_EOT_DISABLE			(VLV_DISPLAY_BASE + 0xb05c)
-#define _MIPIB_EOT_DISABLE			(VLV_DISPLAY_BASE + 0xb85c)
-#define MIPI_EOT_DISABLE(pipe)		_PIPE(pipe, _MIPIA_EOT_DISABLE, _MIPIB_EOT_DISABLE)
+#define _MIPIC_EOT_DISABLE			(VLV_DISPLAY_BASE + 0xb85c)
+#define MIPI_EOT_DISABLE(port)			_MIPI_PORT(port, \
+						_MIPIA_EOT_DISABLE, \
+						_MIPIC_EOT_DISABLE)
 #define  LP_RX_TIMEOUT_ERROR_RECOVERY_DISABLE		(1 << 7)
 #define  HS_RX_TIMEOUT_ERROR_RECOVERY_DISABLE		(1 << 6)
 #define  LOW_CONTENTION_RECOVERY_DISABLE		(1 << 5)
@@ -6017,27 +6075,36 @@ extern int chv_cursor_offsets[];
 #define  EOT_DISABLE					(1 << 0)
 
 #define _MIPIA_LP_BYTECLK			(VLV_DISPLAY_BASE + 0xb060)
-#define _MIPIB_LP_BYTECLK			(VLV_DISPLAY_BASE + 0xb860)
-#define MIPI_LP_BYTECLK(pipe)		_PIPE(pipe, _MIPIA_LP_BYTECLK, _MIPIB_LP_BYTECLK)
+#define _MIPIC_LP_BYTECLK			(VLV_DISPLAY_BASE + 0xb860)
+#define MIPI_LP_BYTECLK(port)			_MIPI_PORT(port, \
+						_MIPIA_LP_BYTECLK, \
+						_MIPIC_LP_BYTECLK)
 #define  LP_BYTECLK_SHIFT				0
 #define  LP_BYTECLK_MASK				(0xffff << 0)
 
 /* bits 31:0 */
 #define _MIPIA_LP_GEN_DATA			(VLV_DISPLAY_BASE + 0xb064)
-#define _MIPIB_LP_GEN_DATA			(VLV_DISPLAY_BASE + 0xb864)
-#define MIPI_LP_GEN_DATA(pipe)		_PIPE(pipe, _MIPIA_LP_GEN_DATA, _MIPIB_LP_GEN_DATA)
-
+#define _MIPIC_LP_GEN_DATA			(VLV_DISPLAY_BASE + 0xb864)
+#define MIPI_LP_GEN_DATA(port)			_MIPI_PORT(port, \
+						_MIPIA_LP_GEN_DATA, \
+						_MIPIC_LP_GEN_DATA)
 /* bits 31:0 */
 #define _MIPIA_HS_GEN_DATA			(VLV_DISPLAY_BASE + 0xb068)
-#define _MIPIB_HS_GEN_DATA			(VLV_DISPLAY_BASE + 0xb868)
-#define MIPI_HS_GEN_DATA(pipe)		_PIPE(pipe, _MIPIA_HS_GEN_DATA, _MIPIB_HS_GEN_DATA)
+#define _MIPIC_HS_GEN_DATA			(VLV_DISPLAY_BASE + 0xb868)
+#define MIPI_HS_GEN_DATA(port)			_MIPI_PORT(port, \
+						_MIPIA_HS_GEN_DATA, \
+						_MIPIC_HS_GEN_DATA)
 
 #define _MIPIA_LP_GEN_CTRL			(VLV_DISPLAY_BASE + 0xb06c)
-#define _MIPIB_LP_GEN_CTRL			(VLV_DISPLAY_BASE + 0xb86c)
-#define MIPI_LP_GEN_CTRL(pipe)		_PIPE(pipe, _MIPIA_LP_GEN_CTRL, _MIPIB_LP_GEN_CTRL)
+#define _MIPIC_LP_GEN_CTRL			(VLV_DISPLAY_BASE + 0xb86c)
+#define MIPI_LP_GEN_CTRL(port)			_MIPI_PORT(port, \
+						_MIPIA_LP_GEN_CTRL, \
+						_MIPIC_LP_GEN_CTRL)
 #define _MIPIA_HS_GEN_CTRL			(VLV_DISPLAY_BASE + 0xb070)
-#define _MIPIB_HS_GEN_CTRL			(VLV_DISPLAY_BASE + 0xb870)
-#define MIPI_HS_GEN_CTRL(pipe)		_PIPE(pipe, _MIPIA_HS_GEN_CTRL, _MIPIB_HS_GEN_CTRL)
+#define _MIPIC_HS_GEN_CTRL			(VLV_DISPLAY_BASE + 0xb870)
+#define MIPI_HS_GEN_CTRL(port)			_MIPI_PORT(port, \
+						_MIPIA_HS_GEN_CTRL, \
+						_MIPIC_HS_GEN_CTRL)
 #define  LONG_PACKET_WORD_COUNT_SHIFT			8
 #define  LONG_PACKET_WORD_COUNT_MASK			(0xffff << 8)
 #define  SHORT_PACKET_PARAM_SHIFT			8
@@ -6049,8 +6116,10 @@ extern int chv_cursor_offsets[];
 /* data type values, see include/video/mipi_display.h */
 
 #define _MIPIA_GEN_FIFO_STAT			(VLV_DISPLAY_BASE + 0xb074)
-#define _MIPIB_GEN_FIFO_STAT			(VLV_DISPLAY_BASE + 0xb874)
-#define MIPI_GEN_FIFO_STAT(pipe)	_PIPE(pipe, _MIPIA_GEN_FIFO_STAT, _MIPIB_GEN_FIFO_STAT)
+#define _MIPIC_GEN_FIFO_STAT			(VLV_DISPLAY_BASE + 0xb874)
+#define MIPI_GEN_FIFO_STAT(port)		_MIPI_PORT(port, \
+						_MIPIA_GEN_FIFO_STAT, \
+						_MIPIC_GEN_FIFO_STAT)
 #define  DPI_FIFO_EMPTY					(1 << 28)
 #define  DBI_FIFO_EMPTY					(1 << 27)
 #define  LP_CTRL_FIFO_EMPTY				(1 << 26)
@@ -6067,15 +6136,19 @@ extern int chv_cursor_offsets[];
 #define  HS_DATA_FIFO_FULL				(1 << 0)
 
 #define _MIPIA_HS_LS_DBI_ENABLE			(VLV_DISPLAY_BASE + 0xb078)
-#define _MIPIB_HS_LS_DBI_ENABLE			(VLV_DISPLAY_BASE + 0xb878)
-#define MIPI_HS_LP_DBI_ENABLE(pipe)	_PIPE(pipe, _MIPIA_HS_LS_DBI_ENABLE, _MIPIB_HS_LS_DBI_ENABLE)
+#define _MIPIC_HS_LS_DBI_ENABLE			(VLV_DISPLAY_BASE + 0xb878)
+#define MIPI_HS_LP_DBI_ENABLE(port)		_MIPI_PORT(port, \
+						_MIPIA_HS_LS_DBI_ENABLE, \
+						_MIPIC_HS_LS_DBI_ENABLE)
 #define  DBI_HS_LP_MODE_MASK				(1 << 0)
 #define  DBI_LP_MODE					(1 << 0)
 #define  DBI_HS_MODE					(0 << 0)
 
 #define _MIPIA_DPHY_PARAM			(VLV_DISPLAY_BASE + 0xb080)
-#define _MIPIB_DPHY_PARAM			(VLV_DISPLAY_BASE + 0xb880)
-#define MIPI_DPHY_PARAM(pipe)		_PIPE(pipe, _MIPIA_DPHY_PARAM, _MIPIB_DPHY_PARAM)
+#define _MIPIC_DPHY_PARAM			(VLV_DISPLAY_BASE + 0xb880)
+#define MIPI_DPHY_PARAM(port)			_MIPI_PORT(port, \
+						_MIPIA_DPHY_PARAM, \
+						_MIPIC_DPHY_PARAM)
 #define  EXIT_ZERO_COUNT_SHIFT				24
 #define  EXIT_ZERO_COUNT_MASK				(0x3f << 24)
 #define  TRAIL_COUNT_SHIFT				16
@@ -6087,29 +6160,39 @@ extern int chv_cursor_offsets[];
 
 /* bits 31:0 */
 #define _MIPIA_DBI_BW_CTRL			(VLV_DISPLAY_BASE + 0xb084)
-#define _MIPIB_DBI_BW_CTRL			(VLV_DISPLAY_BASE + 0xb884)
-#define MIPI_DBI_BW_CTRL(pipe)		_PIPE(pipe, _MIPIA_DBI_BW_CTRL, _MIPIB_DBI_BW_CTRL)
+#define _MIPIC_DBI_BW_CTRL			(VLV_DISPLAY_BASE + 0xb884)
+#define MIPI_DBI_BW_CTRL(port)			_MIPI_PORT(port, \
+						_MIPIA_DBI_BW_CTRL, \
+						_MIPIC_DBI_BW_CTRL)
 
 #define _MIPIA_CLK_LANE_SWITCH_TIME_CNT		(VLV_DISPLAY_BASE + 0xb088)
-#define _MIPIB_CLK_LANE_SWITCH_TIME_CNT		(VLV_DISPLAY_BASE + 0xb888)
-#define MIPI_CLK_LANE_SWITCH_TIME_CNT(pipe)	_PIPE(pipe, _MIPIA_CLK_LANE_SWITCH_TIME_CNT, _MIPIB_CLK_LANE_SWITCH_TIME_CNT)
+#define _MIPIC_CLK_LANE_SWITCH_TIME_CNT		(VLV_DISPLAY_BASE + 0xb888)
+#define MIPI_CLK_LANE_SWITCH_TIME_CNT(port)	_MIPI_PORT(port, \
+					_MIPIA_CLK_LANE_SWITCH_TIME_CNT, \
+					_MIPIC_CLK_LANE_SWITCH_TIME_CNT)
 #define  LP_HS_SSW_CNT_SHIFT				16
 #define  LP_HS_SSW_CNT_MASK				(0xffff << 16)
 #define  HS_LP_PWR_SW_CNT_SHIFT				0
 #define  HS_LP_PWR_SW_CNT_MASK				(0xffff << 0)
 
 #define _MIPIA_STOP_STATE_STALL			(VLV_DISPLAY_BASE + 0xb08c)
-#define _MIPIB_STOP_STATE_STALL			(VLV_DISPLAY_BASE + 0xb88c)
-#define MIPI_STOP_STATE_STALL(pipe)	_PIPE(pipe, _MIPIA_STOP_STATE_STALL, _MIPIB_STOP_STATE_STALL)
+#define _MIPIC_STOP_STATE_STALL			(VLV_DISPLAY_BASE + 0xb88c)
+#define MIPI_STOP_STATE_STALL(port)		_MIPI_PORT(port, \
+						_MIPIA_STOP_STATE_STALL, \
+						_MIPIC_STOP_STATE_STALL)
 #define  STOP_STATE_STALL_COUNTER_SHIFT			0
 #define  STOP_STATE_STALL_COUNTER_MASK			(0xff << 0)
 
 #define _MIPIA_INTR_STAT_REG_1			(VLV_DISPLAY_BASE + 0xb090)
-#define _MIPIB_INTR_STAT_REG_1			(VLV_DISPLAY_BASE + 0xb890)
-#define MIPI_INTR_STAT_REG_1(pipe)	_PIPE(pipe, _MIPIA_INTR_STAT_REG_1, _MIPIB_INTR_STAT_REG_1)
+#define _MIPIC_INTR_STAT_REG_1			(VLV_DISPLAY_BASE + 0xb890)
+#define MIPI_INTR_STAT_REG_1(port)		_MIPI_PORT(port, \
+						_MIPIA_INTR_STAT_REG_1, \
+						_MIPIC_INTR_STAT_REG_1)
 #define _MIPIA_INTR_EN_REG_1			(VLV_DISPLAY_BASE + 0xb094)
-#define _MIPIB_INTR_EN_REG_1			(VLV_DISPLAY_BASE + 0xb894)
-#define MIPI_INTR_EN_REG_1(pipe)	_PIPE(pipe, _MIPIA_INTR_EN_REG_1, _MIPIB_INTR_EN_REG_1)
+#define _MIPIC_INTR_EN_REG_1			(VLV_DISPLAY_BASE + 0xb894)
+#define MIPI_INTR_EN_REG_1(port)		_MIPI_PORT(port, \
+						_MIPIA_INTR_EN_REG_1, \
+						_MIPIC_INTR_EN_REG_1)
 #define  RX_CONTENTION_DETECTED				(1 << 0)
 
 /* XXX: only pipe A ?!? */
@@ -6128,8 +6211,9 @@ extern int chv_cursor_offsets[];
 /* MIPI adapter registers */
 
 #define _MIPIA_CTRL				(VLV_DISPLAY_BASE + 0xb104)
-#define _MIPIB_CTRL				(VLV_DISPLAY_BASE + 0xb904)
-#define MIPI_CTRL(pipe)			_PIPE(pipe, _MIPIA_CTRL, _MIPIB_CTRL)
+#define _MIPIC_CTRL				(VLV_DISPLAY_BASE + 0xb904)
+#define MIPI_CTRL(port)				_MIPI_PORT(port, _MIPIA_CTRL, \
+						_MIPIC_CTRL)
 #define  ESCAPE_CLOCK_DIVIDER_SHIFT			5 /* A only */
 #define  ESCAPE_CLOCK_DIVIDER_MASK			(3 << 5)
 #define  ESCAPE_CLOCK_DIVIDER_1				(0 << 5)
@@ -6142,21 +6226,27 @@ extern int chv_cursor_offsets[];
 #define  RGB_FLIP_TO_BGR				(1 << 2)
 
 #define _MIPIA_DATA_ADDRESS			(VLV_DISPLAY_BASE + 0xb108)
-#define _MIPIB_DATA_ADDRESS			(VLV_DISPLAY_BASE + 0xb908)
-#define MIPI_DATA_ADDRESS(pipe)		_PIPE(pipe, _MIPIA_DATA_ADDRESS, _MIPIB_DATA_ADDRESS)
+#define _MIPIC_DATA_ADDRESS			(VLV_DISPLAY_BASE + 0xb908)
+#define MIPI_DATA_ADDRESS(port)			_MIPI_PORT(port, \
+						_MIPIA_DATA_ADDRESS, \
+						_MIPIC_DATA_ADDRESS)
 #define  DATA_MEM_ADDRESS_SHIFT				5
 #define  DATA_MEM_ADDRESS_MASK				(0x7ffffff << 5)
 #define  DATA_VALID					(1 << 0)
 
 #define _MIPIA_DATA_LENGTH			(VLV_DISPLAY_BASE + 0xb10c)
-#define _MIPIB_DATA_LENGTH			(VLV_DISPLAY_BASE + 0xb90c)
-#define MIPI_DATA_LENGTH(pipe)		_PIPE(pipe, _MIPIA_DATA_LENGTH, _MIPIB_DATA_LENGTH)
+#define _MIPIC_DATA_LENGTH			(VLV_DISPLAY_BASE + 0xb90c)
+#define MIPI_DATA_LENGTH(port)			_MIPI_PORT(port, \
+						_MIPIA_DATA_LENGTH, \
+						_MIPIC_DATA_LENGTH)
 #define  DATA_LENGTH_SHIFT				0
 #define  DATA_LENGTH_MASK				(0xfffff << 0)
 
 #define _MIPIA_COMMAND_ADDRESS			(VLV_DISPLAY_BASE + 0xb110)
-#define _MIPIB_COMMAND_ADDRESS			(VLV_DISPLAY_BASE + 0xb910)
-#define MIPI_COMMAND_ADDRESS(pipe)	_PIPE(pipe, _MIPIA_COMMAND_ADDRESS, _MIPIB_COMMAND_ADDRESS)
+#define _MIPIC_COMMAND_ADDRESS			(VLV_DISPLAY_BASE + 0xb910)
+#define MIPI_COMMAND_ADDRESS(port)		_MIPI_PORT(port, \
+						_MIPIA_COMMAND_ADDRESS, \
+						_MIPIC_COMMAND_ADDRESS)
 #define  COMMAND_MEM_ADDRESS_SHIFT			5
 #define  COMMAND_MEM_ADDRESS_MASK			(0x7ffffff << 5)
 #define  AUTO_PWG_ENABLE				(1 << 2)
@@ -6164,19 +6254,24 @@ extern int chv_cursor_offsets[];
 #define  COMMAND_VALID					(1 << 0)
 
 #define _MIPIA_COMMAND_LENGTH			(VLV_DISPLAY_BASE + 0xb114)
-#define _MIPIB_COMMAND_LENGTH			(VLV_DISPLAY_BASE + 0xb914)
-#define MIPI_COMMAND_LENGTH(pipe)	_PIPE(pipe, _MIPIA_COMMAND_LENGTH, _MIPIB_COMMAND_LENGTH)
+#define _MIPIC_COMMAND_LENGTH			(VLV_DISPLAY_BASE + 0xb914)
+#define MIPI_COMMAND_LENGTH(port)		_MIPI_PORT(port, \
+						_MIPIA_COMMAND_LENGTH, \
+						_MIPIC_COMMAND_LENGTH)
 #define  COMMAND_LENGTH_SHIFT(n)			(8 * (n)) /* n: 0...3 */
 #define  COMMAND_LENGTH_MASK(n)				(0xff << (8 * (n)))
 
 #define _MIPIA_READ_DATA_RETURN0		(VLV_DISPLAY_BASE + 0xb118)
-#define _MIPIB_READ_DATA_RETURN0		(VLV_DISPLAY_BASE + 0xb918)
-#define MIPI_READ_DATA_RETURN(pipe, n) \
-	(_PIPE(pipe, _MIPIA_READ_DATA_RETURN0, _MIPIB_READ_DATA_RETURN0) + 4 * (n)) /* n: 0...7 */
+#define _MIPIC_READ_DATA_RETURN0		(VLV_DISPLAY_BASE + 0xb918)
+#define MIPI_READ_DATA_RETURN(port, n) \
+	(_MIPI_PORT(port, _MIPIA_READ_DATA_RETURN0, _MIPIC_READ_DATA_RETURN0) \
+					+ 4 * (n)) /* n: 0...7 */
 
 #define _MIPIA_READ_DATA_VALID			(VLV_DISPLAY_BASE + 0xb138)
-#define _MIPIB_READ_DATA_VALID			(VLV_DISPLAY_BASE + 0xb938)
-#define MIPI_READ_DATA_VALID(pipe)	_PIPE(pipe, _MIPIA_READ_DATA_VALID, _MIPIB_READ_DATA_VALID)
+#define _MIPIC_READ_DATA_VALID			(VLV_DISPLAY_BASE + 0xb938)
+#define MIPI_READ_DATA_VALID(port)		_MIPI_PORT(port, \
+						_MIPIA_READ_DATA_VALID, \
+						_MIPIC_READ_DATA_VALID)
 #define  READ_DATA_VALID(n)				(1 << (n))
 
 /* Offsets to get info from */
-- 
1.7.9.5

