From cd74a1f4099f3adce5380f5339fba29bf8b4df4c Mon Sep 17 00:00:00 2001
From: Dinesh Kumar Sharma <dinesh.sharma@intel.com>
Date: Tue, 17 Jun 2014 04:31:40 -0400
Subject: [PATCH] DGNSS: Add driver for BCM4752

Adding the driver for BCM4752 DGNSS chip and the
necessary config and makefile changes for the same.

Issue: AREQ-1511

Signed-off-by: Dinesh Sharma <dinesh.sharma@intel.com>

Change-Id: I4ba6e5af472cab0031b8b0aa10113b7ba9d22a90
---
 drivers/misc/Kconfig        |    1 
 drivers/misc/Makefile       |    1 
 drivers/misc/dgnss/Kconfig  |   12 ++
 drivers/misc/dgnss/Makefile |    1 
 drivers/misc/dgnss/dgnss.c  |  201 ++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 216 insertions(+)
 create mode 100644 drivers/misc/dgnss/Kconfig
 create mode 100644 drivers/misc/dgnss/Makefile
 create mode 100644 drivers/misc/dgnss/dgnss.c

Index: b/drivers/misc/Kconfig
===================================================================
--- a/drivers/misc/Kconfig	2015-11-16 11:10:36.670893118 -0800
+++ b/drivers/misc/Kconfig	2015-11-16 11:11:02.303018340 -0800
@@ -541,4 +541,5 @@
 source "drivers/misc/vmw_vmci/Kconfig"
 source "drivers/misc/mic/Kconfig"
 source "drivers/misc/genwqe/Kconfig"
+source "drivers/misc/dgnss/Kconfig"
 endmenu
Index: b/drivers/misc/Makefile
===================================================================
--- a/drivers/misc/Makefile	2015-11-16 11:10:36.670893118 -0800
+++ b/drivers/misc/Makefile	2015-11-16 11:11:30.183160300 -0800
@@ -58,3 +58,4 @@
 obj-$(CONFIG_GENWQE)		+= genwqe/
 obj-$(CONFIG_UID_CPUTIME) += uid_cputime.o
 obj-$(CONFIG_VLV2_PLAT_CLK)     += vlv2_plat_clock.o
+obj-$(CONFIG_DGNSS)             += dgnss/
Index: b/drivers/misc/dgnss/Kconfig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/dgnss/Kconfig	2015-11-16 11:11:02.303018340 -0800
@@ -0,0 +1,12 @@
+#
+# Intel DGNSS driver.
+#
+
+config  DGNSS
+	tristate "Intel DGNSS driver"
+	default n
+	help
+	  Select this driver to enable kernel interface for GPS devices
+	  used in Intel core platforms.
+	  This driver exports GPIO to user space GPS software
+	  that use a standard tty to communicate with the GPS device.
Index: b/drivers/misc/dgnss/Makefile
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/dgnss/Makefile	2015-11-16 11:11:02.303018340 -0800
@@ -0,0 +1 @@
+obj-$(CONFIG_DGNSS) += dgnss.o
Index: b/drivers/misc/dgnss/dgnss.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/dgnss/dgnss.c	2015-11-16 11:11:02.303018340 -0800
@@ -0,0 +1,201 @@
+/*
+ * dgnss.c: Intel interface for gps devices
+ *
+ * (C) Copyright 2013 Intel Corporation
+ * Author: Venkat Raghavulu
+ *		 Dinesh Sharma
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; version 2
+ * of the License.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/acpi.h>
+#include <linux/pm.h>
+
+#define DRIVER_NAME "dgnss"
+
+#ifdef CONFIG_ACPI
+#define ACPI_DEVICE_ID_BCM4752 "BCM4752"
+#endif
+
+static int dgnss_enable_status;
+
+/*********************************************************************
+ *		Driver sysfs attribute functions
+ *********************************************************************/
+
+static ssize_t dgnss_enable_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	long int enable;
+	int ret = 0;
+
+	ret = kstrtol(buf, 10, &enable);
+	if (ret < 0) {
+		dev_err(dev, "Failed to convert buffer to a valid value\n");
+		return ret;
+	}
+
+	/* This driver uses _PSx routines to control power because the GPIO
+		PIN and its state may vary by platform and/or board.*/
+#ifdef CONFIG_ACPI
+	if (enable)
+		ret = acpi_evaluate_object(ACPI_HANDLE(dev),
+			"_PS0", NULL, NULL);
+	else
+		ret = acpi_evaluate_object(ACPI_HANDLE(dev),
+			"_PS3", NULL, NULL);
+
+	if (ACPI_FAILURE(ret))
+		dev_err(dev, "Failed to %s the dGNSS device\n",
+				(enable ? "Enable":"Disable"));
+	else
+		dgnss_enable_status = enable;
+#endif
+
+	return size;
+}
+
+
+static DEVICE_ATTR(enable, S_IRUGO|S_IWUSR, NULL, dgnss_enable_store);
+
+static struct attribute *dgnss_attrs[] = {
+	&dev_attr_enable.attr,
+	NULL,
+};
+
+static struct attribute_group dgnss_attr_group = {
+	.name = DRIVER_NAME,
+	.attrs = dgnss_attrs,
+};
+
+/*********************************************************************
+ *		Driver GPIO probe/remove functions
+ *********************************************************************/
+
+static int dgnss_runtime_suspend(struct device *dev)
+{
+	int ret = 0;
+
+#ifdef CONFIG_ACPI
+	if (dgnss_enable_status) {
+		ret = acpi_evaluate_object(ACPI_HANDLE(dev),
+				"_PS3", NULL, NULL);
+
+		if (ACPI_FAILURE(ret))
+			dev_err(dev, "Failed to suspend dgnss device\n");
+		else
+			dgnss_enable_status = !dgnss_enable_status;
+	}
+#endif
+
+	return ret;
+}
+
+static int dgnss_runtime_resume(struct device *dev)
+{
+	int ret = 0;
+
+#ifdef CONFIG_ACPI
+	if (!dgnss_enable_status) {
+		ret = acpi_evaluate_object(ACPI_HANDLE(dev),
+				"_PS0", NULL, NULL);
+
+		if (ACPI_FAILURE(ret))
+			dev_err(dev, "Failed to resume dgnss device\n");
+		else
+			dgnss_enable_status = !dgnss_enable_status;
+	}
+#endif
+
+	return ret;
+}
+
+static int dgnss_runtime_idle(struct device *dev)
+{
+	return 0;
+}
+
+static int dgnss_probe(struct platform_device *pdev)
+{
+	int ret = sysfs_create_group(&pdev->dev.kobj, &dgnss_attr_group);
+
+	if (ret)
+		dev_err(&pdev->dev, "Failed to create dgnss sysfs interface\n");
+
+	return ret;
+}
+
+static int dgnss_remove(struct platform_device *pdev)
+{
+	sysfs_remove_group(&pdev->dev.kobj, &dgnss_attr_group);
+
+	return 0;
+}
+
+static void dgnss_shutdown(struct platform_device *pdev)
+{
+}
+
+/*********************************************************************
+ *		Driver initialisation and finalization
+ *********************************************************************/
+
+#ifdef CONFIG_ACPI
+static const struct acpi_device_id acpi_gps_id_table[] = {
+	/* ACPI IDs here */
+	{ACPI_DEVICE_ID_BCM4752},
+	{ }
+};
+MODULE_DEVICE_TABLE(acpi, acpi_gps_id_table);
+#endif
+
+static const struct dev_pm_ops dgnss_pm_ops = {
+	.runtime_suspend = dgnss_runtime_suspend,
+	.runtime_resume = &dgnss_runtime_resume,
+	.runtime_idle = &dgnss_runtime_idle,
+
+};
+
+
+static struct platform_driver dgnss_driver = {
+	.probe		= dgnss_probe,
+	.remove		= dgnss_remove,
+	.driver		= {
+		.name	= DRIVER_NAME,
+		.owner	= THIS_MODULE,
+#ifdef CONFIG_ACPI
+		.acpi_match_table = ACPI_PTR(acpi_gps_id_table),
+#endif
+				.pm = &dgnss_pm_ops,
+	},
+	.shutdown	= dgnss_shutdown,
+};
+
+static int __init dgnss_driver_init(void)
+{
+	return platform_driver_register(&dgnss_driver);
+};
+
+
+static void __exit dgnss_driver_exit(void)
+{
+	platform_driver_unregister(&dgnss_driver);
+}
+
+module_init(dgnss_driver_init);
+module_exit(dgnss_driver_exit);
+
+MODULE_AUTHOR("Dinesh Sharma");
+MODULE_DESCRIPTION("DGNSS driver");
+MODULE_LICENSE("GPL");
