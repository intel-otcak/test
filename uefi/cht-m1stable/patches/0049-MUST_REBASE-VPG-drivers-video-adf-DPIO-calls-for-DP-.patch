From ef8d695efc058ee2fb445fdc7431b1fa450a1890 Mon Sep 17 00:00:00 2001
Message-Id: <ef8d695efc058ee2fb445fdc7431b1fa450a1890.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: rtshiva <sivakumar.thulasimani@intel.com>
Date: Sat, 31 Jan 2015 00:33:07 +0530
Subject: [PATCH 49/95] MUST_REBASE [VPG]: drivers/video/adf: DPIO calls for
 DP & HDMI

This patch adds common dpio code that will be used by both DP/eDP
and HDMI panels.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

Issue: GMINL-5517
Change-Id: I5d466366745e8177a1be2746fde5b3c468c14c69
Signed-off-by: Thulasimani, Sivakumar <sivakumar.thulasimani@intel.com>
---
 drivers/video/adf/intel/core/vlv/chv_dpio.c        |  505 ++++++++++----------
 drivers/video/adf/intel/core/vlv/vlv_pipeline.c    |   45 +-
 drivers/video/adf/intel/include/core/vlv/dpio.h    |   14 +-
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |   29 ++
 4 files changed, 308 insertions(+), 285 deletions(-)

diff --git a/drivers/video/adf/intel/core/vlv/chv_dpio.c b/drivers/video/adf/intel/core/vlv/chv_dpio.c
index e9af212..2f1df24 100644
--- a/drivers/video/adf/intel/core/vlv/chv_dpio.c
+++ b/drivers/video/adf/intel/core/vlv/chv_dpio.c
@@ -17,6 +17,46 @@
 #include <drm/drmP.h>
 #include <core/vlv/dpio.h>
 
+#define VCO_540K	540000
+#define VCO_620K	620000
+#define VCO_648K	648000
+
+#define MHZ(x)		((x) * 1000000)
+#define M2_FRACTION_MASK	(0x3FFFFF)
+#define BYTE0 (0xFF)
+#define BYTE1 (BYTE0 << 8)
+#define BYTE2 (BYTE0 << 16)
+#define BYTE3 (BYTE0 << 24)
+
+#define SPARE_1	(1 << 30)
+#define SPARE_2	(1 << 31)
+
+struct edp_vswing_preemp {
+	u32 deemp;
+	u32 transcale;
+	u32 downscale;
+	u32 deempscale;
+};
+
+struct edp_vswing_preemp edp_values[] = {
+	{0x02020000, 0x001a9800, 0x041a0000, 0x80800000}, /* 200mV 0db */
+	{0x02020000, 0x00269800, 0x04260000, 0x70700000}, /* 200mV 3.5db */
+	{0x02020000, 0x00309800, 0x04300000, 0x60600000}, /* 200mV 6db */
+	{0x02020000, 0x00369800, 0x04360000, 0x45450000}, /* 200mV 9.5db */
+	{0x02020000, 0x00209800, 0x04200000, 0x80800000}, /* 250mV 0db */
+	{0x02020000, 0x00309800, 0x04300000, 0x68680000}, /* 250mV 3.5db */
+	{0x02020000, 0x00369800, 0x04360000, 0x55550000}, /* 250mV 6db */
+	{0x0       , 0x0       , 0x0       , 0x0       }, /* invalid */
+	{0x02020000, 0x00269800, 0x04260000, 0x80800000}, /* 300mV 0db */
+	{0x02020000, 0x00369800, 0x04360000, 0x65650000}, /* 300mV 3.5db */
+	{0x0       , 0x0       , 0x0       , 0x0       }, /* invalid */
+	{0x0       , 0x0       , 0x0       , 0x0       }, /* invalid */
+	{0x02020000, 0x00309800, 0x04300000, 0x80800000}, /* 350mV 0db */
+	{0x0       , 0x0       , 0x0       , 0x0       }, /* invalid */
+	{0x0       , 0x0       , 0x0       , 0x0       }, /* invalid */
+	{0x0       , 0x0       , 0x0       , 0x0       }, /* invalid */
+};
+
 enum dpio_channel {
 	DPIO_CH0,
 	DPIO_CH1,
@@ -43,6 +83,15 @@ u32 dpio_signal_levels[4][4][5] = {
 	}
 };
 
+u32 hdmi_swing_values[2][5] = {
+	{0x2020000, 0x809800, 0x4800000, 0x80800000, 0},
+	{0x2020000, 0xa09800, 0x4a00000, 0x60600000, 0x80800000},
+};
+
+/* Physical Access Coding Sub-Layer register values for differnt frequencies */
+u32 ps0_values[5] = {0x61f42, 0x61f44, 0x61f47, 0x61f4d, 0x61f58};
+u32 ps1_values[5] = {0x571f42, 0x571f44, 0x571f47, 0x571f4d, 0x571f58};
+
 static inline struct vlv_dc_config *get_vlv_dc_config(
 	struct vlv_pipeline *disp)
 {
@@ -115,249 +164,161 @@ void chv_dpio_update_clock(struct intel_pipeline *pipeline,
 		struct intel_clock *clock)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	enum dpio_channel port = vlv_disp_to_port(disp);
-	u32 bestn, bestm1, bestm2, bestp1, bestp2, bestm2_frac;
+	enum dpio_channel ch = vlv_disp_to_port(disp);
 	struct vlv_dc_config *config = get_vlv_dc_config(disp);
-	u32  loopfilter;
-	u32 old_val = 0, val = 0;
-	bestn = clock->n;
-	bestm1 = clock->m1;
-	bestm2 = clock->m2 >> 22;
-	bestm2_frac = clock->m2 & 0x3fffff;
-	bestp1 = clock->p1;
-	bestp2 = clock->p2;
+	u32 val, temp;
 
 	mutex_lock(&config->dpio_lock);
 
-	/* p1 and p2 divider */
-	val = 5 << DPIO_CHV_S1_DIV_SHIFT |
-		bestp1 << DPIO_CHV_P1_DIV_SHIFT |
-		bestp2 << DPIO_CHV_P2_DIV_SHIFT |
-		1 << DPIO_CHV_K_DIV_SHIFT;
-	old_val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW13(port));
-	pr_err("old = %x new = %x\n", old_val, val);
-	vlv_dpio_write(disp->dpio_id, CHV_CMN_DW13(port), val);
-
-	/* Feedback post-divider - m2 */
-	old_val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW0(port));
-	pr_err("old = %x new = %x\n", old_val, bestm2);
-	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW0(port), bestm2);
-
-	/* Feedback refclk divider - n and m1 */
-	val = DPIO_CHV_M1_DIV_BY_2 |
-		1 << DPIO_CHV_N_DIV_SHIFT;
-	old_val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW1(port));
-	pr_err("old = %x new = %x\n", old_val, val);
-	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW1(port), val);
-
-	/* M2 fraction division */
-	old_val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW2(port));
-	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW2(port), bestm2_frac);
-	pr_err("old = %x new = %x\n", old_val, bestm2_frac);
-
-	/* M2 fraction division enable */
-	val = DPIO_CHV_FRAC_DIV_EN |
-		(2 << DPIO_CHV_FEEDFWD_GAIN_SHIFT);
-	old_val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW3(port));
-	pr_err("old = %x new = %x\n", old_val, val);
-	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW3(port), val);
-
-	/* Loop filter */
-	loopfilter = 5 << DPIO_CHV_PROP_COEFF_SHIFT |
-		2 << DPIO_CHV_GAIN_CTRL_SHIFT;
-
-	loopfilter |= 11 << DPIO_CHV_INT_COEFF_SHIFT;
-	old_val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW6(port));
-	pr_err("old = %x new = %x\n", old_val, val);
-	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW6(port), loopfilter);
-
-	/* AFC Recal */
-	vlv_dpio_write(disp->dpio_id, CHV_CMN_DW14(port),
-			vlv_dpio_read(disp->dpio_id, CHV_CMN_DW14(port)) |
-			DPIO_AFC_RECAL);
+	val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW14(ch));
+	val &= ~(DPIO_DCLKP_EN);
+	vlv_dpio_write(disp->dpio_id, CHV_CMN_DW14(ch), val);
 
-	mutex_unlock(&config->dpio_lock);
-}
+	temp = ((clock->p1 & 0x7) << 5) | (clock->p2 & 0x1f);
+	val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW13(ch));
+	val &= ~(BYTE1);
+	val |= ((temp & BYTE0) << DPIO_CHV_P2_DIV_SHIFT);
+	vlv_dpio_write(disp->dpio_id, CHV_CMN_DW13(ch), val);
 
+	temp = (clock->m2 >> 24);
+	val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW0(ch));
+	val = (val  & (~BYTE0)) | temp;
+	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW0(ch), val);
 
-void chv_dpio_update_channel(struct intel_pipeline *pipeline)
-{
-	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	struct vlv_dc_config *config = get_vlv_dc_config(disp);
-	enum dpio_channel ch = vlv_disp_to_port(disp);
-	u32 val = 0;
-	mutex_lock(&config->dpio_lock);
+	temp = (clock->n & BYTE0) << DPIO_CHV_N_DIV_SHIFT;
+	val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW1(ch));
+	val = (val  & (~BYTE1)) | temp;
+	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW1(ch), val);
+
+	if (clock->m2 & M2_FRACTION_MASK) {
+		val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW2(ch));
+		val = (val & BYTE3) | (clock->m2 & M2_FRACTION_MASK);
+		vlv_dpio_write(disp->dpio_id, CHV_PLL_DW2(ch), val);
+
+		val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW3(ch));
+		val  |= (DPIO_CHV_FRAC_DIV_EN);
+		vlv_dpio_write(disp->dpio_id, CHV_PLL_DW3(ch), val);
+
+		val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW9(ch));
+		val = ((val & (0xFFFFFFF0)) | (0x5 << 1));
+		vlv_dpio_write(disp->dpio_id, CHV_PLL_DW9(ch), val);
 
-	/* program left/right clock distribution */
-	if (disp->pipe.pipe_id != PIPE_B) {
-		val = vlv_dpio_read(disp->dpio_id, _CHV_CMN_DW5_CH0);
-		val &= ~(CHV_BUFLEFTENA1_MASK | CHV_BUFRIGHTENA1_MASK);
-		if (ch == DPIO_CH0)
-			val |= CHV_BUFLEFTENA1_FORCE;
-		if (ch == DPIO_CH1)
-			val |= CHV_BUFRIGHTENA1_FORCE;
-		vlv_dpio_write(disp->dpio_id, _CHV_CMN_DW5_CH0, val);
 	} else {
-		val = vlv_dpio_read(disp->dpio_id, _CHV_CMN_DW1_CH1);
-		val &= ~(CHV_BUFLEFTENA2_MASK | CHV_BUFRIGHTENA2_MASK);
-		if (ch == DPIO_CH0)
-			val |= CHV_BUFLEFTENA2_FORCE;
-		if (ch == DPIO_CH1)
-			val |= CHV_BUFRIGHTENA2_FORCE;
-		vlv_dpio_write(disp->dpio_id, _CHV_CMN_DW1_CH1, val);
+		val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW3(ch));
+		val  &= ~(DPIO_CHV_FRAC_DIV_EN);
+		vlv_dpio_write(disp->dpio_id, CHV_PLL_DW3(ch), val);
+
+		val = vlv_dpio_read(disp->dpio_id, VLV_PLL_DW9(ch));
+		val = ((val & (0xFFFFFFF0)) | (0x5 << 1) | 1);
+		vlv_dpio_write(disp->dpio_id, VLV_PLL_DW9(ch), val);
 	}
 
-	/* program clock channel usage */
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW8(ch));
-	val |= CHV_PCS_USEDCLKCHANNEL_OVRRIDE;
-	if (disp->pipe.pipe_id != PIPE_B)
-		val &= ~CHV_PCS_USEDCLKCHANNEL;
-	else
-		val |= CHV_PCS_USEDCLKCHANNEL;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW8(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW8(ch));
-	val |= CHV_PCS_USEDCLKCHANNEL_OVRRIDE;
-	if (disp->pipe.pipe_id != PIPE_B)
-		val &= ~CHV_PCS_USEDCLKCHANNEL;
-	else
-		val |= CHV_PCS_USEDCLKCHANNEL;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW8(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW19(ch));
-	if (disp->pipe.pipe_id != PIPE_B)
-		val &= ~CHV_CMN_USEDCLKCHANNEL;
-	else
-		val |= CHV_CMN_USEDCLKCHANNEL;
-	vlv_dpio_write(disp->dpio_id, CHV_CMN_DW19(ch), val);
+	if (clock->vco == VCO_540K)
+		temp = 0x10803;
+	else if (clock->vco <= VCO_620K)
+		temp = 0x30B05;
+	else if (clock->vco <= VCO_648K)
+		temp = 0x30904;
+	val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW6(ch));
+	val = (val & BYTE3) | temp;
+	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW6(ch), val);
+
+	val = vlv_dpio_read(disp->dpio_id, CHV_PLL_DW8(ch));
+	val &= ~(BYTE0);
+	if (clock->vco <= VCO_620K)
+		val = val | 0x9;
+	else if (clock->vco <= VCO_648K)
+		val = val | 0x8;
+	vlv_dpio_write(disp->dpio_id, CHV_PLL_DW8(ch), val);
 
 	val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW14(ch));
-	val |= DPIO_DCLKP_EN;
+	val  |= (DPIO_DCLKP_EN | DPIO_AFC_RECAL);
 	vlv_dpio_write(disp->dpio_id, CHV_CMN_DW14(ch), val);
 
 	mutex_unlock(&config->dpio_lock);
-
-	udelay(1);
 }
 
-void chv_dpio_pre_port_enable(struct intel_pipeline *pipeline)
+void chv_dpio_enable_staggering(struct intel_pipeline *pipeline, u32 dotclock)
 {
-	int i = 0, val = 0, data = 0;
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	struct vlv_dc_config *config = get_vlv_dc_config(disp);
 	enum dpio_channel ch = vlv_disp_to_port(disp);
+	struct vlv_dc_config *config = get_vlv_dc_config(disp);
+	u32 pcs0 = 0, pcs1 = 0;
+	u32 pcs0_offset = 0, pcs1_offset = 0;
+	u32 tx0 = 0, tx1 = 0, tx2 = 0;
+
+	pcs0_offset = VLV_PCS01_DW12(ch);
+	pcs1_offset = VLV_PCS23_DW12(ch);
+
+	tx0 = CHV_TX0_DW15(ch);
+	tx1 = CHV_TX2_DW15(ch);
+	tx2 = CHV_TX3_DW15(ch);
+
+	if (dotclock >= MHZ(25) && dotclock <= MHZ(33)) {
+		pcs0 = ps0_values[0];
+		pcs1 = ps1_values[0];
+	} else if (dotclock <= MHZ(67)) {
+		pcs0 = ps0_values[1];
+		pcs1 = ps1_values[1];
+	} else if (dotclock <= MHZ(135)) {
+		pcs0 = ps0_values[2];
+		pcs1 = ps1_values[2];
+	} else if (dotclock <= MHZ(270)) {
+		pcs0 = ps0_values[3];
+		pcs1 = ps1_values[3];
+	} else if (dotclock <= MHZ(540)) {
+		pcs0 = ps0_values[4];
+		pcs1 = ps1_values[4];
+	}
 
 	mutex_lock(&config->dpio_lock);
 
-	/* allow hardware to manage TX FIFO reset source */
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW11(ch));
-	val &= ~DPIO_LANEDESKEW_STRAP_OVRD;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW11(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW11(ch));
-	val &= ~DPIO_LANEDESKEW_STRAP_OVRD;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW11(ch), val);
-
-	/* Deassert soft data lane reset*/
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW1(ch));
-	val |= CHV_PCS_REQ_SOFTRESET_EN;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW1(ch), val);
+	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW12(ch), pcs0);
+	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW12(ch), pcs1);
 
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW1(ch));
-	val |= CHV_PCS_REQ_SOFTRESET_EN;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW1(ch), val);
+	/* skew */
+	vlv_dpio_write(disp->dpio_id, tx0, SPARE_1);
+	vlv_dpio_write(disp->dpio_id, tx1, SPARE_1);
+	vlv_dpio_write(disp->dpio_id, tx2, SPARE_1);
 
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW0(ch));
-	val |= (DPIO_PCS_TX_LANE2_RESET | DPIO_PCS_TX_LANE1_RESET);
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW0(ch), val);
+	mutex_unlock(&config->dpio_lock);
+}
 
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW0(ch));
-	val |= (DPIO_PCS_TX_LANE2_RESET | DPIO_PCS_TX_LANE1_RESET);
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW0(ch), val);
+void chv_dpio_update_channel(struct intel_pipeline *pipeline)
+{
+	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
+	enum dpio_channel ch = vlv_disp_to_port(disp);
+	struct vlv_dc_config *config = get_vlv_dc_config(disp);
+	u32 val = 0;
+	u32 port = 0;
+	u32 pll = disp->pll.pll_id;
 
-	/* Program Tx lane latency optimal setting*/
-	for (i = 0; i < 4; i++) {
-		/* Set the latency optimal bit */
-		data = (i == 1) ? 0x0 : 0x6;
-		vlv_dpio_write(disp->dpio_id, CHV_TX_DW11(ch, i),
-				data << DPIO_FRC_LATENCY_SHFIT);
-
-		/* Set the upar bit */
-		data = (i == 1) ? 0x0 : 0x1;
-		vlv_dpio_write(disp->dpio_id, CHV_TX_DW14(ch, i),
-				data << DPIO_UPAR_SHIFT);
-	}
+	mutex_lock(&config->dpio_lock);
 
-	if (disp->type != INTEL_PIPE_HDMI) {
-		mutex_unlock(&config->dpio_lock);
-		return;
-	}
+	/* Need to program for cross linking alone, otherwise use default */
+	if ((port == PORT_B) && (pll == PLL_B)) {
+		val = vlv_dpio_read(disp->dpio_id, VLV_PCS_DW8(ch));
+		val = (val  & (~BYTE2)) | (0x30 << 16);
+		vlv_dpio_write(disp->dpio_id, VLV_PCS_DW8(ch), val);
 
-	/* FIXME: Fix up value only after power analysis */
-
-	/* Data lane stagger programming */
-
-	/* Clear calc init */
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW10(ch));
-	val &= ~(DPIO_PCS_SWING_CALC_TX0_TX2 | DPIO_PCS_SWING_CALC_TX1_TX3);
-	val &= ~(DPIO_PCS_TX1DEEMP_MASK | DPIO_PCS_TX2DEEMP_MASK);
-	val |= DPIO_PCS_TX1DEEMP_9P5 | DPIO_PCS_TX2DEEMP_9P5;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW10(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW10(ch));
-	val &= ~(DPIO_PCS_SWING_CALC_TX0_TX2 | DPIO_PCS_SWING_CALC_TX1_TX3);
-	val &= ~(DPIO_PCS_TX1DEEMP_MASK | DPIO_PCS_TX2DEEMP_MASK);
-	val |= DPIO_PCS_TX1DEEMP_9P5 | DPIO_PCS_TX2DEEMP_9P5;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW10(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW9(ch));
-	val &= ~(DPIO_PCS_TX1MARGIN_MASK | DPIO_PCS_TX2MARGIN_MASK);
-	val |= DPIO_PCS_TX1MARGIN_000 | DPIO_PCS_TX2MARGIN_000;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW9(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW9(ch));
-	val &= ~(DPIO_PCS_TX1MARGIN_MASK | DPIO_PCS_TX2MARGIN_MASK);
-	val |= DPIO_PCS_TX1MARGIN_000 | DPIO_PCS_TX2MARGIN_000;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW9(ch), val);
-
-	/* FIXME: Program the support xxx V-dB */
-	/* Use 800mV-0dB */
-	for (i = 0; i < 4; i++) {
-		val = vlv_dpio_read(disp->dpio_id, CHV_TX_DW4(ch, i));
-		val &= ~DPIO_SWING_DEEMPH9P5_MASK;
-		val |= 128 << DPIO_SWING_DEEMPH9P5_SHIFT;
-		vlv_dpio_write(disp->dpio_id, CHV_TX_DW4(ch, i), val);
-	}
+		val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW19(ch));
+		val = (val  & (~BYTE1)) | (0xA3 << 8);
+		vlv_dpio_write(disp->dpio_id, CHV_CMN_DW19(ch), val);
 
-	for (i = 0; i < 4; i++) {
-		val = vlv_dpio_read(disp->dpio_id, CHV_TX_DW2(ch, i));
-		val &= ~DPIO_SWING_MARGIN000_MASK;
-		val |= 102 << DPIO_SWING_MARGIN000_SHIFT;
-		vlv_dpio_write(disp->dpio_id, CHV_TX_DW2(ch, i), val);
-	}
+	} else if ((port == PORT_C) && (pll == PLL_A)) {
+		val = vlv_dpio_read(disp->dpio_id, VLV_PCS_DW8(ch));
+		val = (val  & (~BYTE2)) | (0x10 << 16);
+		vlv_dpio_write(disp->dpio_id, VLV_PCS_DW8(ch), val);
 
-	/* Disable unique transition scale */
-	for (i = 0; i < 4; i++) {
-		val = vlv_dpio_read(disp->dpio_id, CHV_TX_DW3(ch, i));
-		val &= ~DPIO_TX_UNIQ_TRANS_SCALE_EN;
-		vlv_dpio_write(disp->dpio_id, CHV_TX_DW3(ch, i), val);
+		val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW19(ch));
+		val = (val  & (~BYTE1)) | (0x83 << 8);
+		vlv_dpio_write(disp->dpio_id, CHV_CMN_DW19(ch), val);
 	}
 
-	/* Additional steps for 1200mV-0dB */
-	/* Start swing calculation */
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW10(ch));
-	val |= DPIO_PCS_SWING_CALC_TX0_TX2 | DPIO_PCS_SWING_CALC_TX1_TX3;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW10(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW10(ch));
-	val |= DPIO_PCS_SWING_CALC_TX0_TX2 | DPIO_PCS_SWING_CALC_TX1_TX3;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW10(ch), val);
-
-	/* LRC Bypass */
-	val = vlv_dpio_read(disp->dpio_id, CHV_CMN_DW30);
-	val |= DPIO_LRC_BYPASS;
-	vlv_dpio_write(disp->dpio_id, CHV_CMN_DW30, val);
-
+	/*
+	 * Default values should be enough
+	 * assuming phy was ungated for other combinations
+	 */
 	mutex_unlock(&config->dpio_lock);
 }
 
@@ -393,36 +354,6 @@ void chv_dpio_lane_reset_en(struct intel_pipeline *pipeline, bool enable)
 	mutex_unlock(&config->dpio_lock);
 }
 
-void chv_dpio_post_disable(struct intel_pipeline *pipeline)
-{
-	int val = 0;
-	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	struct vlv_dc_config *config = get_vlv_dc_config(disp);
-	enum dpio_channel ch = vlv_disp_to_port(disp);
-
-	mutex_lock(&config->dpio_lock);
-
-	/* Propagate soft reset to data lane reset */
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW1(ch));
-	val |= CHV_PCS_REQ_SOFTRESET_EN;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW1(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW1(ch));
-	val |= CHV_PCS_REQ_SOFTRESET_EN;
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW1(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS01_DW0(ch));
-	val &= ~(DPIO_PCS_TX_LANE2_RESET | DPIO_PCS_TX_LANE1_RESET);
-	vlv_dpio_write(disp->dpio_id, VLV_PCS01_DW0(ch), val);
-
-	val = vlv_dpio_read(disp->dpio_id, VLV_PCS23_DW0(ch));
-	val &= ~(DPIO_PCS_TX_LANE2_RESET | DPIO_PCS_TX_LANE1_RESET);
-	vlv_dpio_write(disp->dpio_id, VLV_PCS23_DW0(ch), val);
-
-	mutex_unlock(&config->dpio_lock);
-}
-
-
 void chv_dpio_post_pll_disable(struct intel_pipeline *pipeline)
 {
 	int val = 0;
@@ -451,31 +382,20 @@ void chv_dpio_post_pll_disable(struct intel_pipeline *pipeline)
 	mutex_unlock(&config->dpio_lock);
 }
 
-void chv_dpio_lane_reset(struct intel_pipeline *pipeline)
-{
-	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	struct vlv_dc_config *config = get_vlv_dc_config(disp);
-
-	mutex_lock(&config->dpio_lock);
-
-	vlv_dpio_write(disp->dpio_id, 0x8200, 0x00000000);
-	vlv_dpio_write(disp->dpio_id, 0x8204, 0x00e00060);
-
-	mutex_unlock(&config->dpio_lock);
-}
-
 void chv_dpio_signal_levels(struct intel_pipeline *pipeline,
-	u32 deemp, u32 margin)
+	u32 margin, u32 deemp)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dc_config *config = get_vlv_dc_config(disp);
-
-	u32 trigreg = 0x8228;
+	enum dpio_channel ch = vlv_disp_to_port(disp);
+	u32 trigreg;
 	u32 reglist[3] = {0};
 	u32 *vallist;
-	reglist[0] = 0x8288;
-	reglist[1] = 0x828C;
-	reglist[2] = 0x8290;
+
+	trigreg = CHV_PCS_DW10(ch);
+	reglist[0] = VLV_TX_DW2(ch);
+	reglist[1] = VLV_TX_DW3(ch);
+	reglist[2] = VLV_TX_DW4(ch);
 
 	vallist = dpio_signal_levels[deemp][margin];
 
@@ -496,3 +416,72 @@ void vlv_dpio_signal_levels(struct intel_pipeline *pipeline,
 	/* FIXME: to be implemetned */
 	BUG();
 }
+
+void chv_dpio_edp_signal_levels(struct intel_pipeline *pipeline, u32 v, u32 p)
+{
+	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
+	struct vlv_dc_config *config = get_vlv_dc_config(disp);
+	enum dpio_channel ch = vlv_disp_to_port(disp);
+	u32 reg_list[3] = {0};
+	u32 val_list[3] = {0};
+	u32 trigreg = 0;
+	u32 i = 0;
+	u32 count = 0;
+	trigreg = CHV_PCS_DW10(ch);
+	reg_list[0] = VLV_TX_DW2(ch);
+	reg_list[1] = VLV_TX_DW3(ch);
+	reg_list[2] = VLV_TX_DW4(ch);
+
+	/* select the appropriate row */
+	count = 4 * v + p;
+
+	val_list[0] = edp_values[count].transcale;
+	val_list[1] = edp_values[count].downscale;
+	val_list[2] = edp_values[count].deempscale;
+
+	mutex_lock(&config->dpio_lock);
+
+	vlv_dpio_write(disp->dpio_id, trigreg, edp_values[count].deemp);
+
+	for (i = 0; i < 3; i++)
+		vlv_dpio_write(disp->dpio_id, reg_list[i], val_list[i]);
+
+	vlv_dpio_write(disp->dpio_id, trigreg, 0);
+	mutex_unlock(&config->dpio_lock);
+}
+
+void chv_dpio_hdmi_swing_levels(struct intel_pipeline *pipeline, u32 dotclock)
+{
+	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
+	struct vlv_dc_config *config = get_vlv_dc_config(disp);
+	enum dpio_channel ch = vlv_disp_to_port(disp);
+	u32 deemp, transscale, preemp, vswing, tx3clock;
+
+	if (dotclock <= MHZ(162)) {
+		deemp = hdmi_swing_values[0][0];
+		transscale = hdmi_swing_values[0][1];
+		preemp = hdmi_swing_values[0][2];
+		vswing = hdmi_swing_values[0][3];
+		tx3clock = hdmi_swing_values[0][4];
+	} else {
+		deemp = hdmi_swing_values[1][0];
+		transscale = hdmi_swing_values[1][1];
+		preemp = hdmi_swing_values[1][2];
+		vswing = hdmi_swing_values[1][3];
+		tx3clock = hdmi_swing_values[1][4];
+	}
+
+	mutex_lock(&config->dpio_lock);
+
+	vlv_dpio_write(disp->dpio_id, CHV_PCS_DW10(ch), deemp);
+	vlv_dpio_write(disp->dpio_id, VLV_TX_DW2(ch), transscale);
+	vlv_dpio_write(disp->dpio_id, VLV_TX_DW3(ch), preemp);
+	vlv_dpio_write(disp->dpio_id, VLV_TX_DW4(ch), vswing);
+
+	if (dotclock > MHZ(162))
+		vlv_dpio_write(disp->dpio_id, VLV_TX3_DW4(ch), tx3clock);
+
+	vlv_dpio_write(disp->dpio_id, CHV_PCS_DW10(ch), 0);
+
+	mutex_unlock(&config->dpio_lock);
+}
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
index 0bb251a..5e2c313 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
@@ -34,7 +34,7 @@ enum port vlv_get_connected_port(struct intel_pipe *intel_pipe)
 
 	/*
 	 * This function is only for hot pluggable displays,
-	 * like HDMI. SO handle only these.
+	 * like HDMI and DP. SO handle only these.
 	 */
 	if (intel_pipe->type == INTEL_PIPE_HDMI) {
 		struct vlv_hdmi_port *port = &vlv_pipeline->port.hdmi_port;
@@ -143,6 +143,7 @@ out:
 	return err;
 }
 
+
 u32 vlv_port_enable(struct intel_pipeline *pipeline,
 		struct drm_mode_modeinfo *mode)
 {
@@ -187,7 +188,8 @@ u32 vlv_port_enable(struct intel_pipeline *pipeline,
 			pr_err("ADF: %s Enable DSI port failed\n", __func__);
 	} else if (disp->type == INTEL_PIPE_HDMI) {
 		/* HDMI pre port enable */
-		chv_dpio_pre_port_enable(pipeline);
+		chv_dpio_hdmi_swing_levels(pipeline, mode->clock * 1000);
+		chv_dpio_lane_reset_en(pipeline, true);
 		ret = vlv_hdmi_port_enable(&disp->port.hdmi_port);
 		if (ret)
 			pr_err("ADF: HDMI: %s Enable port failed\n", __func__);
@@ -203,9 +205,9 @@ u32 vlv_port_enable(struct intel_pipeline *pipeline,
 
 /*
  * DSI is a special beast that requires 3 calls to pipeline
- *	1) setup pll : dsi_prepare_on
- *	2) setup port: dsi_pre_pipeline_on
- *	3) enable port, pipe, plane etc : pipeline_on
+ * 1) setup pll : dsi_prepare_on
+ * 2) setup port: dsi_pre_pipeline_on
+ * 3) enable port, pipe, plane etc : pipeline_on
  * this is because of the panel calls needed to be performed
  * between these operations and hence we return to common code
  * to make these calls.
@@ -219,6 +221,8 @@ u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 	struct vlv_plane_params plane_params;
 	struct vlv_pll *pll = &disp->pll;
 	struct intel_clock clock;
+	u32 dotclock = 0;
+	bool ret = 0;
 	u32 err = 0;
 	u8 bpp = 0;
 
@@ -229,20 +233,31 @@ u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 
 	pr_info("ADF: %s: mode=%s\n", __func__, mode->name);
 
+	vlv_pll_disable(pll);
 	/* pll enable */
 	if (disp->type != INTEL_PIPE_DSI) {
 		err = vlv_pll_program_timings(pll, mode, &clock);
 		if (err)
 			pr_err("ADF: %s: clock calculation failed\n", __func__);
 
+		if (disp->type == INTEL_PIPE_HDMI) {
+			pr_err("HARDCODING clock for 19x10 HDMI\n");
+			clock.p1 = 4;
+			clock.p2 = 2;
+			clock.m1 = 2;
+			clock.m2 = 0x1d2cccc0;
+			clock.n = 1;
+			clock.vco = 0x9104f;
+		}
 		chv_dpio_update_clock(pipeline, &clock);
 		chv_dpio_update_channel(pipeline);
-
 		err = vlv_pll_enable(pll, mode);
 		if (err) {
 			pr_err("ADF: %s: clock calculation failed\n", __func__);
 			goto out_on;
 		}
+
+		chv_dpio_enable_staggering(pipeline, dotclock);
 	}
 
 	/* port enable */
@@ -279,15 +294,9 @@ u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 	if (err)
 		pr_err("ADF: %s: update primary failed\n", __func__);
 
-	err = vlv_pipe_vblank_on(pipe);
-	if (err != true)
+	ret = vlv_pipe_vblank_on(pipe);
+	if (ret != true)
 		pr_err("ADF: %s: enable vblank failed\n", __func__);
-	else
-		/*
-		 * Reset the last success value (bool true) to zero else
-		 * this will give caller an illusion of failure
-		 */
-		 err = 0;
 
 	/*
 	 * FIXME: enable dpst call once dpst is fixed
@@ -456,9 +465,8 @@ u32 vlv_pipeline_off(struct intel_pipeline *pipeline)
 		goto out;
 	}
 
-	chv_dpio_post_pll_disable(pipeline);
 	if (disp->type == INTEL_PIPE_HDMI)
-		chv_dpio_lane_reset(pipeline);
+		chv_dpio_lane_reset_en(pipeline, false);
 
 	/* FIXME: disable water mark/ddl etc */
 
@@ -515,12 +523,11 @@ u32 chv_pipeline_off(struct intel_pipeline *pipeline)
 		goto out;
 	}
 
-	chv_dpio_post_pll_disable(pipeline);
 	if (disp->type == INTEL_PIPE_HDMI)
-		chv_dpio_lane_reset(pipeline);
+		chv_dpio_lane_reset_en(pipeline, false);
 
 
-	/* TODO: Disable watermark */
+	/* TODO: Disable pm here*/
 out:
 	pr_debug("%s: exit status %x\n", __func__, err);
 	return err;
diff --git a/drivers/video/adf/intel/include/core/vlv/dpio.h b/drivers/video/adf/intel/include/core/vlv/dpio.h
index 8cb1c2b..593b8b1 100644
--- a/drivers/video/adf/intel/include/core/vlv/dpio.h
+++ b/drivers/video/adf/intel/include/core/vlv/dpio.h
@@ -22,20 +22,18 @@
 void chv_dpio_update_clock(struct intel_pipeline *pipeline,
 		struct intel_clock *clock);
 void chv_dpio_update_channel(struct intel_pipeline *pipeline);
-void chv_dpio_pre_port_enable(struct intel_pipeline *pipeline);
-
 void chv_dpio_set_signal_levels(struct intel_pipeline *pipeline,
 	u32 deemph_reg_value, u32 margin_reg_value);
 void chv_dpio_lane_reset_en(struct intel_pipeline *pipeline, bool enable);
-
-void chv_dpio_post_disable(struct intel_pipeline *pipeline);
 void chv_dpio_post_pll_disable(struct intel_pipeline *pipeline);
-void chv_dpio_lane_reset(struct intel_pipeline *pipeline);
 void chv_dpio_signal_levels(struct intel_pipeline *pipeline,
 	u32 deemp, u32 margin);
-
-
+void chv_dpio_edp_signal_levels(struct intel_pipeline *pipeline,
+	u32 deemp, u32 margin);
+void chv_dpio_hdmi_swing_levels(struct intel_pipeline *pipeline,
+	u32 dotclock);
 void vlv_dpio_signal_levels(struct intel_pipeline *pipeline,
 	u32 deemp, u32 margin);
-
+void chv_dpio_enable_staggering(struct intel_pipeline *pipeline,
+	u32 dotclock);
 #endif /* _CHV_DPIO_H_ */
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index f19e6b1..c1cabcc 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -559,6 +559,21 @@ extern int chv_cursor_offsets[];
 #define _VLV_PLL_DW11_CH1		0x806c
 #define VLV_PLL_DW11(ch) _PIPE(ch, _VLV_PLL_DW11_CH0, _VLV_PLL_DW11_CH1)
 
+#define _CHV_PLL_DW8_CH0		0x8020
+#define _CHV_PLL_DW8_CH1		0x81A0
+#define CHV_PLL_DW8(ch) _PIPE(ch, _CHV_PLL_DW8_CH0, _CHV_PLL_DW8_CH1)
+
+#define _CHV_PLL_DW9_CH0		0x8024
+#define _CHV_PLL_DW9_CH1		0x81A4
+#define CHV_PLL_DW9(ch) _PIPE(ch, _CHV_PLL_DW9_CH0, _CHV_PLL_DW9_CH1)
+
+#define _VLV_PCS01_DW12_CH0		0x0230
+#define _VLV_PCS23_DW12_CH0		0x0430
+#define _VLV_PCS01_DW12_CH1		0x2630
+#define _VLV_PCS23_DW12_CH1		0x2830
+#define VLV_PCS01_DW12(ch) _PORT(ch, _VLV_PCS01_DW12_CH0, _VLV_PCS01_DW12_CH1)
+#define VLV_PCS23_DW12(ch) _PORT(ch, _VLV_PCS23_DW12_CH0, _VLV_PCS23_DW12_CH1)
+
 /* Spec for ref block start counts at DW10 */
 #define VLV_REF_DW13			0x80ac
 
@@ -716,6 +731,18 @@ extern int chv_cursor_offsets[];
 #define _VLV_TX_DW14_CH1		0x84b8
 #define VLV_TX_DW14(ch) _PORT(ch, _VLV_TX_DW14_CH0, _VLV_TX_DW14_CH1)
 
+#define _CHV_TX0_DW15_CH0		0xB8
+#define _CHV_TX0_DW15_CH1		0x24B8
+#define CHV_TX0_DW15(ch) _PORT(ch, _CHV_TX0_DW15_CH0, _CHV_TX0_DW15_CH1)
+
+#define _CHV_TX2_DW15_CH0		0x4B8
+#define _CHV_TX2_DW15_CH1		0x28B8
+#define CHV_TX2_DW15(ch) _PORT(ch, _CHV_TX2_DW15_CH0, _CHV_TX2_DW15_CH1)
+
+#define _CHV_TX3_DW15_CH0		0x6B8
+#define _CHV_TX3_DW15_CH1		0x2AB8
+#define CHV_TX3_DW15(ch) _PORT(ch, _CHV_TX3_DW15_CH0, _CHV_TX3_DW15_CH1)
+
 /* CHV dpPhy registers */
 #define _CHV_PLL_DW0_CH0		0x8000
 #define _CHV_PLL_DW0_CH1		0x8180
@@ -3245,6 +3272,8 @@ extern int chv_cursor_offsets[];
 #define   DP_PORT_EN			(1 << 31)
 #define   DP_PIPEB_SELECT		(1 << 30)
 #define   DP_PIPE_MASK			(1 << 30)
+#define   DP_PIPE_SELECT_CHV(pipe)      ((pipe) << 16)
+#define   DP_PIPE_MASK_CHV              (3 << 16)
 
 /* Link training mode - select a suitable mode for each stage */
 #define   DP_LINK_TRAIN_PAT_1		(0 << 28)
-- 
1.7.9.5

