From abadda464ebe72a66a8bc52fbe464071f1bc34ab Mon Sep 17 00:00:00 2001
Message-Id: <abadda464ebe72a66a8bc52fbe464071f1bc34ab.1417780878.git.chang-joon.lee@intel.com>
In-Reply-To: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
References: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
From: Chandra Konduru <chandra.konduru@intel.com>
Date: Thu, 26 Jun 2014 11:57:48 -0700
Subject: [PATCH 25/34] FOR_UPSTREAM [VPG]: drm/i915: Add support for CHT B0 -
 Prog Sprite CSC

This patch is adding support for Cherryview B0 Display programmable
sprite planes color space conversion. It provides support for
1) BT601 --> RGB partial range
2) BT709 --> RGB partial range
3) BT601 --> RGB full range
4) BT709 --> RGB full range

Issue: GMINL-4138
Change-Id: I4346f6a1d28ef7a651a298fb8340b4a9a6078534
Signed-off-by: Chandra Konduru <chandra.konduru@intel.com>
Signed-off-by: Sangani Suryanarayana Raju <suryanarayana.r.sangani@intel.com>
---
 drivers/gpu/drm/i915/Makefile          |    3 +-
 drivers/gpu/drm/i915/i915_reg.h        |   72 +++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_sprite_csc.c |   91 ++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_drv.h       |   28 ++++++++++
 drivers/gpu/drm/i915/intel_sprite.c    |   68 ++++++++++++++++++++++++
 5 files changed, 261 insertions(+), 1 deletion(-)
 create mode 100644 drivers/gpu/drm/i915/i915_sprite_csc.c

diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index 2a21cea..576f139 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -75,7 +75,8 @@ i915-y += dvo_ch7017.o \
 	  intel_sdvo.o \
 	  intel_tv.o \
 	  i915_dpst.o \
-	  intel_clrmgr.o
+	  intel_clrmgr.o \
+	  i915_sprite_csc.o
 
 # legacy horrors
 i915-y += i915_dma.o \
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 4eb2dd4..e328a83 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4554,6 +4554,78 @@ enum punit_power_well {
 #define CHV_PRIMPOS_B (dev_priv->info.display_mmio_offset + 0x61A08)
 #define CHV_PRIMSIZE_B (dev_priv->info.display_mmio_offset + 0x61A0C)
 
+#define CHV_SPC_CSC_YGOFF      (dev_priv->info.display_mmio_offset + 0x6D900)
+#define CHV_SPC_CSC_YGICLAMP   (dev_priv->info.display_mmio_offset + 0x6D920)
+#define CHV_SPC_CSC_YGOCLAMP   (dev_priv->info.display_mmio_offset + 0x6D92C)
+#define CHV_SPC_CSC_CBOFF      (dev_priv->info.display_mmio_offset + 0x6D904)
+#define CHV_SPC_CSC_CBICLAMP   (dev_priv->info.display_mmio_offset + 0x6D924)
+#define CHV_SPC_CSC_CBOCLAMP   (dev_priv->info.display_mmio_offset + 0x6D930)
+#define CHV_SPC_CSC_CROFF      (dev_priv->info.display_mmio_offset + 0x6D908)
+#define CHV_SPC_CSC_CRICLAMP   (dev_priv->info.display_mmio_offset + 0x6D928)
+#define CHV_SPC_CSC_CROCLAMP   (dev_priv->info.display_mmio_offset + 0x6D934)
+#define CHV_SPC_CSC_C01        (dev_priv->info.display_mmio_offset + 0x6D90C)
+#define CHV_SPC_CSC_C23        (dev_priv->info.display_mmio_offset + 0x6D910)
+#define CHV_SPC_CSC_C45        (dev_priv->info.display_mmio_offset + 0x6D914)
+#define CHV_SPC_CSC_C67        (dev_priv->info.display_mmio_offset + 0x6D918)
+#define CHV_SPC_CSC_C8         (dev_priv->info.display_mmio_offset + 0x6D91C)
+
+#define CHV_SPD_CSC_YGOFF      (dev_priv->info.display_mmio_offset + 0x6E900)
+#define CHV_SPD_CSC_YGICLAMP   (dev_priv->info.display_mmio_offset + 0x6E920)
+#define CHV_SPD_CSC_YGOCLAMP   (dev_priv->info.display_mmio_offset + 0x6E92C)
+#define CHV_SPD_CSC_CBOFF      (dev_priv->info.display_mmio_offset + 0x6E904)
+#define CHV_SPD_CSC_CBICLAMP   (dev_priv->info.display_mmio_offset + 0x6E924)
+#define CHV_SPD_CSC_CBOCLAMP   (dev_priv->info.display_mmio_offset + 0x6E930)
+#define CHV_SPD_CSC_CROFF      (dev_priv->info.display_mmio_offset + 0x6E908)
+#define CHV_SPD_CSC_CRICLAMP   (dev_priv->info.display_mmio_offset + 0x6E928)
+#define CHV_SPD_CSC_CROCLAMP   (dev_priv->info.display_mmio_offset + 0x6E934)
+#define CHV_SPD_CSC_C01        (dev_priv->info.display_mmio_offset + 0x6E90C)
+#define CHV_SPD_CSC_C23        (dev_priv->info.display_mmio_offset + 0x6E910)
+#define CHV_SPD_CSC_C45        (dev_priv->info.display_mmio_offset + 0x6E914)
+#define CHV_SPD_CSC_C67        (dev_priv->info.display_mmio_offset + 0x6E918)
+#define CHV_SPD_CSC_C8         (dev_priv->info.display_mmio_offset + 0x6E91C)
+
+#define CHV_SPCSC_YGOFF(plane) (!plane ? CHV_SPC_CSC_YGOFF : CHV_SPD_CSC_YGOFF)
+#define CHV_SPCSC_CBOFF(plane) (!plane ? CHV_SPC_CSC_CBOFF : CHV_SPD_CSC_CBOFF)
+#define CHV_SPCSC_CROFF(plane) (!plane ? CHV_SPC_CSC_CROFF : CHV_SPD_CSC_CROFF)
+#define CHV_SPCSC_YGICLAMP(plane) (!plane ? CHV_SPC_CSC_YGICLAMP : \
+						CHV_SPD_CSC_YGICLAMP)
+#define CHV_SPCSC_CBICLAMP(plane) (!plane ? CHV_SPC_CSC_CBICLAMP : \
+						CHV_SPD_CSC_CBICLAMP)
+#define CHV_SPCSC_CRICLAMP(plane) (!plane ? CHV_SPC_CSC_CRICLAMP : \
+						CHV_SPD_CSC_CRICLAMP)
+#define CHV_SPCSC_YGOCLAMP(plane) (!plane ? CHV_SPC_CSC_YGOCLAMP : \
+						CHV_SPD_CSC_YGOCLAMP)
+#define CHV_SPCSC_CBOCLAMP(plane) (!plane ? CHV_SPC_CSC_CBOCLAMP : \
+						CHV_SPD_CSC_CBOCLAMP)
+#define CHV_SPCSC_CROCLAMP(plane) (!plane ? CHV_SPC_CSC_CROCLAMP : \
+						CHV_SPD_CSC_CROCLAMP)
+
+#define CHV_SPCSC_C01(plane) (!plane ? CHV_SPC_CSC_C01 : CHV_SPD_CSC_C01)
+#define CHV_SPCSC_C23(plane) (!plane ? CHV_SPC_CSC_C23 : CHV_SPD_CSC_C23)
+#define CHV_SPCSC_C45(plane) (!plane ? CHV_SPC_CSC_C45 : CHV_SPD_CSC_C45)
+#define CHV_SPCSC_C67(plane) (!plane ? CHV_SPC_CSC_C67 : CHV_SPD_CSC_C67)
+#define CHV_SPCSC_C8(plane)  (!plane ? CHV_SPC_CSC_C8  : CHV_SPD_CSC_C8)
+
+#define CHV_SPCSC_CLAMP(plane, channel, inout) \
+	(!channel ? (!inout ? CHV_SPCSC_YGICLAMP(plane) : \
+		CHV_SPCSC_YGOCLAMP(plane)) : \
+	(channel == 1 ? (!inout ? CHV_SPCSC_CBICLAMP(plane) : \
+		CHV_SPCSC_CBOCLAMP(plane)) : \
+	(!inout ? CHV_SPCSC_CRICLAMP(plane) : \
+		CHV_SPCSC_CROCLAMP(plane))))
+
+#define CHV_SPCSC_OFFSET(plane, channel) \
+	(!channel ? CHV_SPCSC_YGOFF(plane) : \
+	(channel == 1 ? CHV_SPCSC_CBOFF(plane) : \
+		 CHV_SPCSC_CROFF(plane)))
+
+#define CHV_SPCSC_COEFFS(plane, coeff_index) \
+	(!coeff_index ? CHV_SPCSC_C01(plane) : \
+	(coeff_index == 2 ? CHV_SPCSC_C23(plane) : \
+	(coeff_index == 4 ? CHV_SPCSC_C45(plane) : \
+	(coeff_index == 6 ? CHV_SPCSC_C67(plane) : \
+		CHV_SPCSC_C8(plane)))))
+
 #define SPRCTL(pipe) _PIPE(pipe, _SPRA_CTL, _SPRB_CTL)
 #define SPRLINOFF(pipe) _PIPE(pipe, _SPRA_LINOFF, _SPRB_LINOFF)
 #define SPRSTRIDE(pipe) _PIPE(pipe, _SPRA_STRIDE, _SPRB_STRIDE)
diff --git a/drivers/gpu/drm/i915/i915_sprite_csc.c b/drivers/gpu/drm/i915/i915_sprite_csc.c
new file mode 100644
index 0000000..8d30198
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_sprite_csc.c
@@ -0,0 +1,91 @@
+/*
+ * Copyright Â© 2014 Intel Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ * Authors:
+ * Chandra Konduru <chandra.konduru@intel.com>
+ */
+
+#include "intel_drv.h"
+
+/* chv csc coefficients */
+static struct chv_sprite_csc coef_bt601_to_rgb_no_range = {
+	{
+		{ {0, 0x3ff, 0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} }
+	},
+	{
+		0x15ef, 0x1000, 0x0000, /*  1.3710,  1.0000,  0.0000 */
+		0x74d5, 0x1000, 0x7aa0, /* -0.6980,  1.0000, -0.3360 */
+		0x0000, 0x1000, 0x1bb6  /*  0.0000,  1.0000,  1.7320 */
+	}
+};
+
+static struct chv_sprite_csc coef_bt709_to_rgb_no_range = {
+	{
+		{ {0, 0x3ff, 0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} }
+	},
+	{
+		0x18a3, 0x1000, 0x0000, /*  1.5400,  1.0000,  0.0000 */
+		0x78a8, 0x1000, 0x7d13, /* -0.4590,  1.0000, -0.1830 */
+		0x0000, 0x1000, 0x1d0e /*  0.0000,  1.0000,  1.8160 */
+	}
+};
+
+static struct chv_sprite_csc coef_bt601_to_rgb = {
+	{
+		{ {0, 0x3ff, 0x7c0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} }
+	},
+	{
+		0x1989, 0x129f, 0x0000, /*  1.5960,  1.1640,  0.0000 */
+		0x72fe, 0x129f, 0x79bf, /* -0.8130,  1.1640, -0.3910 */
+		0x0000, 0x129f, 0x2049  /*  0.0000,  1.1640,  2.0180 */
+	}
+};
+
+static struct chv_sprite_csc coef_bt709_to_rgb = {
+	{
+		{ {0, 0x3ff, 0x7c0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} },
+		{ {0x600, 0x1ff, 0}, {0, 1023, 0} }
+	},
+	{
+		0x1cb0, 0x129f, 0x0000, /*  1.7930,  1.1640,  0.0000 */
+		0x7775, 0x129f, 0x7c98, /* -0.5340,  1.1640, -0.2130 */
+		0x0000, 0x129f, 0x21d7  /*  0.0000,  1.1640,  2.1150 */
+	}
+};
+
+struct chv_sprite_csc *chv_sprite_cscs[] = {
+	&coef_bt601_to_rgb_no_range,
+	&coef_bt709_to_rgb_no_range,
+	&coef_bt601_to_rgb,
+	&coef_bt709_to_rgb,
+};
+
+const uint32_t chv_sprite_csc_num_entries =
+	sizeof(chv_sprite_cscs)/sizeof(chv_sprite_cscs[0]);
+
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index b1d1ebc..4a85b2b 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -88,6 +88,16 @@
 #define INTEL_I2C_BUS_DVO 1
 #define INTEL_I2C_BUS_SDVO 2
 
+/* CHV Sprite CSC programming macros */
+#define CHV_NUM_SPCSC_YCBCR 3
+#define CHV_NUM_SPCSC_IO 2
+#define CHV_NUM_SPCSC_COEFFS 9
+#define SPCSC_YG 0
+#define SPCSC_CB 1
+#define SPCSC_CR 2
+#define SPCSC_IN 0
+#define SPCSC_OUT 1
+
 /* these are outputs from the chip - integrated only
    external chips are via DVO or SDVO output */
 #define INTEL_OUTPUT_UNUSED 0
@@ -504,6 +514,7 @@ struct intel_plane {
 	bool can_scale;
 	int max_downscale;
 	bool rotate180;
+	uint32_t csc_profile;
 	u32 lut_r[1024], lut_g[1024], lut_b[1024];
 	u32 flags;
 	__u32 z_order;
@@ -525,6 +536,7 @@ struct intel_plane {
 	struct work_struct work;
 	struct intel_disp_reg reg;
 	bool pri_update;
+	struct drm_property *csc_profile_property;
 
 	void (*update_plane)(struct drm_plane *plane,
 			     struct drm_crtc *crtc,
@@ -1161,4 +1173,20 @@ extern void intel_unpin_sprite_work_fn(struct work_struct *__work);
 extern bool intel_pipe_has_type(struct drm_crtc *crtc, int type);
 bool vlv_calculate_ddl(struct drm_crtc *crtc, int pixel_size,
 	int *prec_multi, int *ddl);
+
+struct sprite_csc {
+	int16_t min_clamp;
+	int16_t max_clamp;
+	int16_t offset;
+};
+
+struct chv_sprite_csc {
+	struct sprite_csc csc_val[CHV_NUM_SPCSC_YCBCR][CHV_NUM_SPCSC_IO];
+	uint16_t coeff[CHV_NUM_SPCSC_COEFFS];
+};
+
+/* externs */
+extern struct chv_sprite_csc *chv_sprite_cscs[];
+extern const uint32_t chv_sprite_csc_num_entries;
+
 #endif /* __INTEL_DRV_H__ */
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 0033fa4..ed2c819 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -406,12 +406,14 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	u32 sprctl;
 	bool rotate = false;
 	bool alpha_changed = false;
+	bool yuv_format = false;
 	unsigned long sprsurf_offset, linear_offset;
 	int pixel_size = drm_format_plane_cpp(fb->pixel_format, 0);
 	struct drm_display_mode *mode = &intel_crtc->config.requested_mode;
 	u32 start_vbl_count;
 	bool atomic_update = false;
 	int sprite_ddl, sp_prec_multi;
+	int ch, index;
 	u32 mask, shift;
 
 	sprctl = I915_READ(SPCNTR(pipe, plane));
@@ -441,15 +443,19 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	switch (fb->pixel_format) {
 	case DRM_FORMAT_YUYV:
 		sprctl |= SP_FORMAT_YUV422 | SP_YUV_ORDER_YUYV;
+		yuv_format = true;
 		break;
 	case DRM_FORMAT_YVYU:
 		sprctl |= SP_FORMAT_YUV422 | SP_YUV_ORDER_YVYU;
+		yuv_format = true;
 		break;
 	case DRM_FORMAT_UYVY:
 		sprctl |= SP_FORMAT_YUV422 | SP_YUV_ORDER_UYVY;
+		yuv_format = true;
 		break;
 	case DRM_FORMAT_VYUY:
 		sprctl |= SP_FORMAT_YUV422 | SP_YUV_ORDER_VYUY;
+		yuv_format = true;
 		break;
 	case DRM_FORMAT_RGB565:
 		sprctl |= SP_FORMAT_BGR565;
@@ -612,6 +618,35 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 	else
 		sprctl &= ~DISPPLANE_180_ROTATION_ENABLE;
 
+	/* program csc registers */
+	if (IS_CHERRYVIEW(dev) && STEP_FROM(STEP_B0) &&
+		intel_plane->pipe == PIPE_B && yuv_format) {
+		struct chv_sprite_csc *sp_csc =
+			chv_sprite_cscs[intel_plane->csc_profile - 1];
+
+		for (ch = SPCSC_YG; ch <= SPCSC_CR; ch++) {
+			I915_WRITE(CHV_SPCSC_OFFSET(plane, ch),
+				sp_csc->csc_val[ch][SPCSC_OUT].offset << 16 |
+				sp_csc->csc_val[ch][SPCSC_IN].offset);
+
+			I915_WRITE(CHV_SPCSC_CLAMP(plane, ch, SPCSC_IN),
+				sp_csc->csc_val[ch][SPCSC_IN].max_clamp << 16 |
+				sp_csc->csc_val[ch][SPCSC_IN].min_clamp);
+
+			I915_WRITE(CHV_SPCSC_CLAMP(plane, ch, SPCSC_OUT),
+				sp_csc->csc_val[ch][SPCSC_OUT].max_clamp << 16 |
+				sp_csc->csc_val[ch][SPCSC_OUT].min_clamp);
+		}
+
+		for (index = 0; index < (CHV_NUM_SPCSC_COEFFS-1); index += 2) {
+			I915_WRITE(CHV_SPCSC_COEFFS(plane, index),
+					sp_csc->coeff[index+1] << 16 |
+					sp_csc->coeff[index]);
+		}
+		I915_WRITE(CHV_SPCSC_C8(plane),
+				sp_csc->coeff[CHV_NUM_SPCSC_COEFFS-1]);
+	}
+
 	/* When in maxfifo dspcntr cannot be changed */
 	if (sprctl != I915_READ(SPCNTR(pipe, plane)) &&
 				dev_priv->maxfifo_enabled &&
@@ -1843,6 +1878,13 @@ static void intel_destroy_plane(struct drm_plane *plane)
 {
 	struct intel_plane *intel_plane = to_intel_plane(plane);
 	intel_disable_plane(plane);
+
+	if (intel_plane->csc_profile_property) {
+		drm_property_destroy(plane->dev,
+				intel_plane->csc_profile_property);
+		intel_plane->csc_profile_property = NULL;
+	}
+
 	drm_plane_cleanup(plane);
 	kfree(intel_plane);
 }
@@ -1931,10 +1973,27 @@ void intel_plane_disable(struct drm_plane *plane)
 	intel_disable_plane(plane);
 }
 
+static int intel_plane_set_property(struct drm_plane *plane,
+	struct drm_property *property, uint64_t val)
+{
+	struct intel_plane *intel_plane = to_intel_plane(plane);
+	struct drm_device *dev = plane->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	if (IS_CHERRYVIEW(dev) && STEP_FROM(STEP_B0) &&
+		intel_plane->pipe == PIPE_B) {
+		if (property == intel_plane->csc_profile_property)
+			intel_plane->csc_profile = (uint32_t) val;
+		return 0;
+	}
+	return -EINVAL;
+}
+
 static const struct drm_plane_funcs intel_plane_funcs = {
 	.update_plane = intel_update_plane,
 	.disable_plane = intel_disable_plane,
 	.destroy = intel_destroy_plane,
+	.set_property = intel_plane_set_property,
 };
 
 static uint32_t ilk_plane_formats[] = {
@@ -1971,6 +2030,7 @@ static uint32_t vlv_plane_formats[] = {
 int
 intel_plane_init(struct drm_device *dev, enum pipe pipe, int plane)
 {
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_plane *intel_plane;
 	unsigned long possible_crtcs;
 	const uint32_t *plane_formats;
@@ -2051,5 +2111,13 @@ intel_plane_init(struct drm_device *dev, enum pipe pipe, int plane)
 	if (ret)
 		kfree(intel_plane);
 
+	if (IS_CHERRYVIEW(dev) && STEP_FROM(STEP_B0) && pipe == PIPE_B) {
+		intel_plane->csc_profile = 4;
+		intel_plane->csc_profile_property =
+			drm_property_create_range(dev, 0, "csc profile", 1,
+				chv_sprite_csc_num_entries);
+		drm_object_attach_property(&intel_plane->base.base,
+			intel_plane->csc_profile_property, 4);
+	}
 	return ret;
 }
-- 
1.7.9.5

