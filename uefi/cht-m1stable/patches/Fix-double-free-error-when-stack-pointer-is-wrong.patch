From 9ca87d59945c21764174b91cc424ad6ec79bbe14 Mon Sep 17 00:00:00 2001
From: Jean-Christophe PINCE <jean-christophe.pince@intel.com>
Date: Thu, 28 May 2015 09:07:22 +0200
Subject: [PATCH] Fix double free error when stack pointer is wrong.

When the stack pointer is wrong, a double free error happens
when reading its contents. This patch makes sure that its memory is
accessible before dumping it.

Change-Id: Ie71423ce79250bf060497d32d5bc501472804df2
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-35870
Signed-off-by: Jean-Christophe PINCE <jean-christophe.pince@intel.com>
---
 arch/x86/kernel/dumpstack_64.c | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/arch/x86/kernel/dumpstack_64.c b/arch/x86/kernel/dumpstack_64.c
index 6ec91c541687..11a2cdd7fbff 100644
--- a/arch/x86/kernel/dumpstack_64.c
+++ b/arch/x86/kernel/dumpstack_64.c
@@ -195,6 +195,13 @@ void dump_trace(struct task_struct *task, struct pt_regs *regs,
 }
 EXPORT_SYMBOL(dump_trace);
 
+static int bad_stack_address(void *sp)
+{
+	unsigned long dummy;
+
+	return probe_kernel_address((unsigned long *)sp, dummy);
+}
+
 void
 show_stack_log_lvl(struct task_struct *task, struct pt_regs *regs,
 		   unsigned long *sp, unsigned long bp, char *log_lvl)
@@ -222,6 +229,15 @@ show_stack_log_lvl(struct task_struct *task, struct pt_regs *regs,
 			sp = (unsigned long *)&sp;
 	}
 
+	if (bad_stack_address(sp)) {
+		/* stack corrupted, prevent the wrong stack
+		 * access and unwinding and finally the double fault
+		 */
+		preempt_enable();
+		pr_cont("Wrong stack pointer %016lx!\n", (unsigned long)sp);
+		return;
+	}
+
 	stack = sp;
 	for (i = 0; i < kstack_depth_to_print; i++) {
 		if (stack >= irq_stack && stack <= irq_stack_end) {
-- 
1.9.1

