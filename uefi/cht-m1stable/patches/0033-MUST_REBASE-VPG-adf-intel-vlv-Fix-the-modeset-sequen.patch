From 64b8ee3c08519df2de9e8545f5e1591084a5ce55 Mon Sep 17 00:00:00 2001
Message-Id: <64b8ee3c08519df2de9e8545f5e1591084a5ce55.1421709247.git.chang-joon.lee@intel.com>
In-Reply-To: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
References: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
From: Shobhit Kumar <shobhit.kumar@intel.com>
Date: Fri, 26 Sep 2014 15:37:26 +0530
Subject: [PATCH 33/75] MUST_REBASE [VPG]: adf/intel/vlv: Fix the modeset
 sequence

Clearly align the sequence in display_on/off fucntions vlv_display_on and
vlv_display_off takes care of complete enabling and disabling display.
Makes it easier for power gating path as well for S0ix. DPMS on/off just
needs to call vlv_display_on/off

v2: During DPMS calls we can now use vlv_display_off and vlv_display_on.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-3547
Change-Id: I76d8fe1e07bcb1a81e70eeb875d3df9ae42661f7
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
---
 .../video/adf/intel/core/common/dsi/dsi_pipe_ops.c |    3 --
 .../video/adf/intel/core/common/dsi/gen_dsi_pipe.c |   36 ++++++++++++------
 drivers/video/adf/intel/core/vlv/vlv_mode_set.c    |   39 +++++++++++++++++---
 .../adf/intel/include/core/common/dsi/dsi_pipe.h   |    1 +
 4 files changed, 59 insertions(+), 20 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c b/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c
index 56c4438..bca0f5e 100644
--- a/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c
+++ b/drivers/video/adf/intel/core/common/dsi/dsi_pipe_ops.c
@@ -411,9 +411,6 @@ int intel_dsi_pre_enable(struct dsi_pipe *dsi_pipe)
 	 * recommendation, port should be enabled befor plane & pipe */
 	intel_dsi_enable(dsi_pipe);
 
-	/* enable pipe */
-	pipe_mode_set(&dsi_pipe->base, &mode);
-
 	return 0;
 }
 
diff --git a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
index 67b6c7b..1fd335f 100644
--- a/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
+++ b/drivers/video/adf/intel/core/common/dsi/gen_dsi_pipe.c
@@ -11,6 +11,7 @@
 #include <core/intel_dc_config.h>
 #include <core/vlv/vlv_dc_regs.h>
 #include <core/vlv/vlv_dc_hw.h>
+#include <core/vlv/vlv_dc_config.h>
 #include <core/common/dsi/dsi_pipe.h>
 #include <core/common/dsi/dsi_config.h>
 #include <intel_adf_device.h>
@@ -115,17 +116,30 @@ static int dsi_dpms(struct intel_pipe *pipe, u8 state)
 	struct dsi_config *config = &dsi_pipe->config;
 	int err = 0;
 
-	if (!config)
+	pr_debug("ADF: %s current_state = %d, requested_state = %d\n",
+			__func__, dsi_pipe->dpms_state, state);
+
+	if (!config) {
+		pr_err("ADF: %s config not set!!\n", __func__);
 		return -EINVAL;
+	}
 
 	mutex_lock(&config->ctx_lock);
 
+	if (dsi_pipe->dpms_state == state) {
+		pr_err("ADF: %s: Current DPMS State same as requested = %s\n",
+				__func__, state ? "DPMS_OFF" : "DPMS_ON");
+
+		mutex_unlock(&config->ctx_lock);
+		return 0;
+	}
+
 	switch (state) {
 	case DRM_MODE_DPMS_ON:
-		err = dsi_pipe->ops.power_on(dsi_pipe);
+		err = vlv_display_on(pipe);
 		break;
 	case DRM_MODE_DPMS_OFF:
-		err = dsi_pipe->ops.power_off(dsi_pipe);
+		err = vlv_display_off(pipe);
 		break;
 	case DRM_MODE_DPMS_STANDBY:
 	case DRM_MODE_DPMS_SUSPEND:
@@ -146,6 +160,8 @@ static int dsi_modeset(struct intel_pipe *pipe,
 	struct dsi_config *config = &dsi_pipe->config;
 	int err = 0;
 
+	pr_debug("ADF: %s\n", __func__);
+
 	if (!mode) {
 		pr_err("%s: invalid mode\n", __func__);
 		err = -EINVAL;
@@ -159,15 +175,10 @@ static int dsi_modeset(struct intel_pipe *pipe,
 	}
 
 	mutex_lock(&config->ctx_lock);
-
-	err = dsi_pipe->ops.mode_set(dsi_pipe, mode);
-	if (err) {
-		pr_err("%s: failed to set mode\n", __func__);
-		goto out_err;
-	}
-
-out_err:
+	vlv_display_off(pipe);
+	vlv_display_on(pipe);
 	mutex_unlock(&config->ctx_lock);
+
 	return err;
 }
 
@@ -216,7 +227,7 @@ static u32 dsi_get_supported_events(struct intel_pipe *pipe)
 	return INTEL_PIPE_EVENT_VSYNC;
 }
 
-static int dsi_set_event(struct intel_pipe *pipe, u16 event, bool enabled)
+int dsi_set_event(struct intel_pipe *pipe, u16 event, bool enabled)
 {
 	struct dsi_pipe *dsi_pipe = to_dsi_pipe(pipe);
 
@@ -442,6 +453,7 @@ int dsi_pipe_init(struct dsi_pipe *pipe, struct device *dev,
 	pipe->ops.set_event = intel_dsi_set_events;
 	pipe->ops.get_events = intel_dsi_get_events;
 	pipe->ops.handle_events = intel_dsi_handle_events;
+	pipe->dpms_state = DRM_MODE_DPMS_OFF;
 
 	pipe->panel = panel;
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_mode_set.c b/drivers/video/adf/intel/core/vlv/vlv_mode_set.c
index 7788c85..3495f9a 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_mode_set.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_mode_set.c
@@ -72,7 +72,9 @@ void vlv_wait_for_pipe_off(int pipe)
 
 int vlv_display_on(struct intel_pipe *pipe)
 {
-	int reg;
+	struct dsi_pipe *dsi_pipe;
+	struct drm_mode_modeinfo mode;
+	int reg, i;
 	u32 val = 0;
 	u8 index;
 
@@ -85,6 +87,26 @@ int vlv_display_on(struct intel_pipe *pipe)
 
 	reg = PALETTE(0);
 
+	if (pipe->type == INTEL_PIPE_DSI) {
+		dsi_pipe = to_dsi_pipe(pipe);
+
+		/* encoder enable */
+		dsi_pipe->ops.power_on(dsi_pipe);
+
+		for (i = 0; i < 256; i++) {
+			REG_WRITE(reg + 4 * i,
+				(dsi_pipe->config.lut_r[i] << 16) |
+				(dsi_pipe->config.lut_g[i] << 8) |
+				(dsi_pipe->config.lut_b[i]));
+		}
+
+		/* get the configured mode */
+		dsi_pipe->panel->ops->get_config_mode(&dsi_pipe->config, &mode);
+		dsi_pipe->dpms_state = DRM_MODE_DPMS_ON;
+	}
+
+	pipe_mode_set(pipe, &mode);
+
 	/* Enable pipe */
 	reg = PIPECONF(index);
 	val = REG_READ(reg);
@@ -109,7 +131,9 @@ int vlv_display_on(struct intel_pipe *pipe)
 	REG_WRITE(DSPSURF(index), REG_READ(DSPSURF(index)));
 	REG_POSTING_READ(DSPSURF(index));
 
-	/* TODO Encoder Enable */
+	/* enable vsyncs */
+	pipe->ops->set_event(pipe, INTEL_PIPE_EVENT_VSYNC, true);
+
 	return 0;
 }
 
@@ -121,11 +145,16 @@ int vlv_display_off(struct intel_pipe *pipe)
 	struct dsi_pipe *dsi = NULL;
 	int is_dsi = pipe->type == INTEL_PIPE_DSI ? true : false;
 
+	pr_debug("ADF: %s\n", __func__);
+
 	if (!pipe)
 		return -EINVAL;
 
 	index = pipe->base.idx;
 
+	/* disable vsyncs */
+	pipe->ops->set_event(pipe, INTEL_PIPE_EVENT_VSYNC, false);
+
 	 /* encoder specifific disabling if needed */
 	if (is_dsi) {
 		dsi = to_dsi_pipe(pipe);
@@ -173,8 +202,10 @@ int vlv_display_off(struct intel_pipe *pipe)
 	* Interface specific encoder post disable should be done here */
 
 	/* encoder off interface specific */
-	if (is_dsi)
+	if (is_dsi) {
 		dsi->ops.power_off(dsi);
+		dsi->dpms_state = DRM_MODE_DPMS_OFF;
+	}
 	/*
 	 * Disable PLL
 	 * Needed for interfaces other than DSI
@@ -245,7 +276,5 @@ int pipe_mode_set(struct intel_pipe *pipe, struct drm_mode_modeinfo *mode)
 
 	/* TODO primary plane fb update */
 
-	vlv_display_on(pipe);
-
 	return 0;
 }
diff --git a/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h b/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
index 6e94747..4609523 100644
--- a/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
+++ b/drivers/video/adf/intel/include/core/common/dsi/dsi_pipe.h
@@ -65,6 +65,7 @@ struct dsi_pipe {
 	struct dsi_pkg_sender sender;
 #endif
 	struct dsi_panel *panel;
+	u8 dpms_state;
 };
 
 static inline struct dsi_pipe *to_dsi_pipe(struct intel_pipe *pipe)
-- 
1.7.9.5

