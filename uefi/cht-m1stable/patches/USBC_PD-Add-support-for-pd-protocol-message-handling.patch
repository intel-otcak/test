From 2b63cd5d36363c833bec3fed2bac7717e2359a38 Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Thu, 28 May 2015 18:12:47 +0530
Subject: [PATCH] [USBC_PD]: Add support for pd protocol message handling

The PD messages has to be handled in the PD protocol layer. This
implements the PD protocol and handling the PD messages in protocol
layer in the PD framework.

Change-Id: I3815c32fd57e04c518551e501d408b69bc6a34ea
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-37758
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
Signed-off-by: R, Kannappan <r.kannappan@intel.com>
---
 drivers/usb/typec/pd/Makefile        |   1 +
 drivers/usb/typec/pd/devpolicy_mgr.c |  10 +
 drivers/usb/typec/pd/message.c       |  65 ++++++
 drivers/usb/typec/pd/message.h       | 319 ++++++++++++++++++++++++++
 drivers/usb/typec/pd/protocol.c      | 419 +++++++++++++++++++++++++++++++++++
 drivers/usb/typec/pd/protocol.h      | 125 +++++++++++
 include/linux/usb_typec_phy.h        |   2 +-
 7 files changed, 940 insertions(+), 1 deletion(-)
 create mode 100644 drivers/usb/typec/pd/message.c
 create mode 100644 drivers/usb/typec/pd/message.h
 create mode 100644 drivers/usb/typec/pd/protocol.c
 create mode 100644 drivers/usb/typec/pd/protocol.h

diff --git a/drivers/usb/typec/pd/Makefile b/drivers/usb/typec/pd/Makefile
index a1a145cacf36..0b4ce89f88f5 100644
--- a/drivers/usb/typec/pd/Makefile
+++ b/drivers/usb/typec/pd/Makefile
@@ -3,6 +3,7 @@
 #
 
 pd_policy-y	:= devpolicy_mgr.o
+pd_policy-y	+= message.o protocol.o
 
 obj-$(CONFIG_USBC_PD_POLICY)		+= pd_policy.o
 obj-$(CONFIG_USBC_SYSTEM_POLICY)	+= system_policy.o
diff --git a/drivers/usb/typec/pd/devpolicy_mgr.c b/drivers/usb/typec/pd/devpolicy_mgr.c
index 85fc92436458..e47e5090eb78 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.c
+++ b/drivers/usb/typec/pd/devpolicy_mgr.c
@@ -33,6 +33,7 @@
 #include <linux/extcon.h>
 #include <linux/usb_typec_phy.h>
 #include "devpolicy_mgr.h"
+#include "protocol.h"
 
 static struct power_cap spcaps[] = {
 	{
@@ -534,8 +535,16 @@ struct devpolicy_mgr *dpm_register_syspolicy(struct typec_phy *phy,
 		goto error1;
 	}
 
+	ret = protocol_bind_dpm(dpm->phy);
+	if (ret < 0) {
+		pr_err("DPM: failed in binding protocol\n");
+		goto error2;
+	}
+
 	return dpm;
 
+error2:
+	extcon_unregister_interest(&dpm->provider_cable_nb);
 error1:
 	extcon_unregister_interest(&dpm->consumer_cable_nb);
 error0:
@@ -547,6 +556,7 @@ EXPORT_SYMBOL(dpm_register_syspolicy);
 void dpm_unregister_syspolicy(struct devpolicy_mgr *dpm)
 {
 	if (dpm) {
+		protocol_unbind_dpm(dpm->phy);
 		extcon_unregister_interest(&dpm->provider_cable_nb);
 		extcon_unregister_interest(&dpm->consumer_cable_nb);
 		kfree(dpm);
diff --git a/drivers/usb/typec/pd/message.c b/drivers/usb/typec/pd/message.c
new file mode 100644
index 000000000000..355f2204702f
--- /dev/null
+++ b/drivers/usb/typec/pd/message.c
@@ -0,0 +1,65 @@
+/*
+ * message.c: PD Protocol framework for creating PD messages
+ *
+ * Copyright (C) 2015 Intel Corporation
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Seee the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ * Author: Kannappan, R <r.kannappan@intel.com>
+ * Author: Albin, B <albin.bala.krishnan@intel.com>
+ */
+
+#include <linux/mutex.h>
+#include <linux/types.h>
+#include "protocol.h"
+#include "message.h"
+
+int pd_ctrl_msg(struct pd_prot *pd, u8 msg_type, u8 msg_id)
+{
+	struct pd_packet *buf = &pd->tx_buf;
+	struct pd_pkt_header *header = &buf->header;
+
+	header->msg_type = msg_type & PD_MSG_HEAD_MSG_TYPE;
+	header->data_role = pd->new_data_role & PD_MSG_HEADER_ROLE_BITS_MASK;
+	header->rev_id = PD_REV_ID_2 & PD_MSG_HEADER_REVID_BITS_MASK;
+	if (pd->new_pwr_role == PD_POWER_ROLE_PROVIDER)
+		header->pwr_role = 1;
+	else
+		header->pwr_role = 0;
+	header->msg_id = msg_id & PD_MSG_HEADER_MSGID_BITS_MASK;
+	header->num_data_obj = 0;
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pd_ctrl_msg);
+
+int pd_data_msg(struct pd_prot *pd, int len, u8 msg_type)
+{
+	struct pd_packet *buf = &pd->tx_buf;
+	struct pd_pkt_header *header = &buf->header;
+
+	header->msg_type = msg_type & PD_MSG_HEAD_MSG_TYPE;
+	header->data_role = pd->new_data_role & PD_MSG_HEADER_ROLE_BITS_MASK;
+	header->rev_id = PD_REV_ID_2 & PD_MSG_HEADER_REVID_BITS_MASK;
+	if (pd->new_pwr_role == PD_POWER_ROLE_PROVIDER)
+		header->pwr_role = 1;
+	else
+		header->pwr_role = 0;
+	header->msg_id = pd->tx_msg_id & PD_MSG_HEADER_MSGID_BITS_MASK;
+	header->num_data_obj = len & PD_MSG_HEADER_N_DOBJ_BITS_MASK;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pd_data_msg);
diff --git a/drivers/usb/typec/pd/message.h b/drivers/usb/typec/pd/message.h
new file mode 100644
index 000000000000..f272ebc91e44
--- /dev/null
+++ b/drivers/usb/typec/pd/message.h
@@ -0,0 +1,319 @@
+/*
+ * message.h: usb type-c Power Delivery message header file
+ *
+ * Copyright (C) 2015 Intel Corporation
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Seee the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ * Author: Kannappan, R <r.kannappan@intel.com>
+ * Author: Albin, B <albin.bala.krishnan@intel.com>
+ */
+
+#ifndef __PD_MESSAGE_H__
+#define __PD_MESSAGE_H__
+
+#define PD_REV_ID_1		0
+#define PD_REV_ID_2		1
+#define PD_REV_ID_RESERVED	3
+
+/* PD Message Header Details */
+#define PD_MSG_HEAD_RSV15		(1 << 15)
+#define PD_MSG_HEAD_NUM_DATA_OBJS	(7 << 12)
+#define PD_MSG_HEAD_MSG_ID		(7 << 9)
+#define PD_MSG_HEAD_PORT_PWR_ROLE	(1 << 8)
+#define PD_MSG_HEAD_SPEC_REV		(3 << 6)
+#define PD_MSG_HEAD_PORT_DATA_ROLE	(1 << 5)
+#define PD_MSG_HEAD_RSV4		(1 << 4)
+#define PD_MSG_HEAD_MSG_TYPE		(0xf << 0)
+
+/* PD Control Message Types */
+#define PD_CTRL_MSG_RESERVED_0		0
+#define PD_CTRL_MSG_GOODCRC		1
+#define PD_CTRL_MSG_GOTOMIN		2
+#define PD_CTRL_MSG_ACCEPT		3
+#define PD_CTRL_MSG_REJECT		4
+#define PD_CTRL_MSG_PING		5
+#define PD_CTRL_MSG_PS_RDY		6
+#define PD_CTRL_MSG_GET_SRC_CAP		7
+#define PD_CTRL_MSG_GET_SINK_CAP	8
+#define PD_CTRL_MSG_DR_SWAP		9
+#define PD_CTRL_MSG_PR_SWAP		10
+#define PD_CTRL_MSG_VCONN_SWAP		11
+#define PD_CTRL_MSG_WAIT		12
+#define PD_CTRL_MSG_SOFT_RESET		13
+
+#define PD_DATA_MSG_RESERVED_0		0
+#define PD_DATA_MSG_SRC_CAP		1
+#define PD_DATA_MSG_REQUEST		2
+#define PD_DATA_MSG_BIST		3
+#define PD_DATA_MSG_SINK_CAP		4
+#define PD_DATA_MSG_RESERVED_5		5
+#define PD_DATA_MSG_RESERVED_6		6
+#define PD_DATA_MSG_RESERVED_7		7
+#define PD_DATA_MSG_RESERVED_8		8
+#define PD_DATA_MSG_RESERVED_9		9
+#define PD_DATA_MSG_RESERVED_10		10
+#define PD_DATA_MSG_RESERVED_11		11
+#define PD_DATA_MSG_RESERVED_12		12
+#define PD_DATA_MSG_RESERVED_13		13
+#define PD_DATA_MSG_RESERVED_14		14
+#define PD_DATA_MSG_VENDOR_DEF		15
+
+#define PD_CMD_HARD_RESET		16
+#define PD_CMD_PROTOCOL_RESET		17
+#define PD_CMD_HARD_RESET_COMPLETE	18
+
+#define SUPPLY_TYPE_FIXED		0
+#define SUPPLY_TYPE_BATTERY		1
+#define SUPPLY_TYPE_VARIABLE		2
+#define SUPPLY_TYPE_UNKNOWN		3
+
+#define PD_MSG_HEADER_SIZE		2
+#define PD_MSG_SIZE_PER_DATA_OBJ	4
+#define	MAX_NUM_DATA_OBJ		7
+
+#define PD_MSG_HEADER_ROLE_BITS_MASK	0x1
+#define PD_MSG_HEADER_REVID_BITS_MASK	0x3
+#define PD_MSG_HEADER_MSGID_BITS_MASK	0x7
+#define PD_MSG_HEADER_N_DOBJ_BITS_MASK	0x7
+
+enum vdm_cmd_type {
+	INITIATOR,
+	REP_ACK,
+	REP_NACK,
+	REP_BUSY,
+};
+
+enum vdm_cmd {
+	RESVD,
+	DISCOVER_IDENTITY,
+	DISCOVER_SVID,
+	DISCOVER_MODE,
+	ENTER_MODE,
+	EXIT_MODE,
+	ATTENTION,
+	DP_STATUS_UPDATE = 0x10,
+	DP_CONFIGURE,
+};
+
+struct pd_pkt_header {
+	u8 msg_type:4;
+	u8 rsvd_a:1;
+	u8 data_role:1;
+	u8 rev_id:2;
+	u8 pwr_role:1;
+	u8 msg_id:3;
+	u8 num_data_obj:3;
+	u8 rsvd_b:1;
+} __packed;
+
+struct vdm_msg_header {
+	u8 msg_type:4;
+	u8 rsvd_a:2;
+	u8 spec_rev:2;
+	u8 pwr_role:1;
+	u8 msg_id:3;
+	u8 num_data_obj:3;
+	u8 rsvd_b:1;
+} __packed;
+
+struct vdm_header {
+	u8 cmd:5;
+	u8 rsvd_a:1;
+	u8 cmd_type:2;
+	u8 obj_pos:3;
+	u8 rsvd_b:2;
+	u8 str_vdm_version:2;
+	u8 vdm_type:1;
+	u16 svid;
+} __packed;
+
+struct id_header {
+	u16 vendor_id;
+	u16 rsvd:10;
+	u16 modal_op_supported:1;
+	u16 product_type:3;
+	u16 is_usb_dev_capable:1;
+	u16 is_usb_host_capable:1;
+} __packed;
+
+struct cert_stat_vdo {
+	u32 tid:20;
+	u32 rsvd:12;
+} __packed;
+
+struct cable_vdo {
+	u32 superspeed_signal_support:3;
+	u32 sop_controller_present:1;
+	u32 vbus_through_cable:1;
+	u32 vbus_current_cap:2;
+	u32 ssrx2_support:1;
+	u32 ssrx1_support:1;
+	u32 sstx2_support:1;
+	u32 sstx1_support:1;
+	u32 cable_term_type:2;
+	u32 cable_latency:4;
+	u32 typec_to_plug:1;
+	u32 typec_typeabc:2;
+	u32 rsvd:4;
+	u32 cable_fw_ver:4;
+	u32 cable_hw_ver:4;
+} __packed;
+
+struct product_vdo {
+	u16 bcd_dev;
+	u16 product_id;
+} __packed;
+
+struct vdm_req_pkt {
+	struct pd_pkt_header msg_hdr;
+	struct vdm_header vdm_hdr;
+} __packed;
+
+struct dis_id_response_cable_pkt {
+	struct pd_pkt_header msg_hdr;
+	struct vdm_header vdm_hdr;
+	struct id_header id_hdr;
+	struct cert_stat_vdo vdo1;
+	struct cable_vdo vdo2;
+} __packed;
+
+struct dis_id_response_hub_pkt {
+	struct pd_pkt_header msg_hdr;
+	struct vdm_header vdm_hdr;
+	struct id_header id_hdr;
+	struct cert_stat_vdo vdo1;
+	struct product_vdo vdo2;
+} __packed;
+
+struct dp_vdo {
+	u16 svid0;
+	u16 svid1;
+} __packed;
+
+struct dis_svid_response_pkt {
+	struct pd_pkt_header msg_hdr;
+	struct vdm_header vdm_hdr;
+	struct dp_vdo vdo[6];
+} __packed;
+
+struct dis_mode_response_pkt {
+	struct pd_pkt_header msg_hdr;
+	struct vdm_header vdm_hdr;
+	u32 mode[6];
+} __packed;
+
+struct pd_sink_fixed_pdo {
+	u32 max_cur:10;
+	u32 volt:10;
+	u32 rsvd:5;
+	u32 data_role_swap:1;
+	u32 usb_comm:1;
+	u32 ext_powered:1;
+	u32 higher_cap:1;
+	u32 dual_role_pwr:1;
+	u32 supply_type:2;
+} __packed;
+
+struct pd_fixed_supply_pdo {
+	u32 max_cur:10;
+	u32 volt:10;
+	u32 peak_cur:2;
+	u32 rsvd:3;
+	u32 data_role_swap:1;
+	u32 usb_comm:1;
+	u32 ext_powered:1;
+	u32 usb_suspend:1;
+	u32 dual_role_pwr:1;
+	u32 fixed_supply:2;
+} __packed;
+
+struct pd_src_variable_pdo {
+	u32 max_cur:10;
+	u32 min_volt:10;
+	u32 max_volt:10;
+	u32 supply_type:2;
+} __packed;
+
+struct pd_src_battery_pdo {
+	u32 max_power:10;
+	u32 min_volt:10;
+	u32 max_volt:10;
+	u32 supply_type:2;
+} __packed;
+
+
+struct pd_fixed_var_rdo {
+	u32 max_cur:10;
+	u32 op_cur:10;
+	u32 rsvd1:4;
+	u32 no_usb_susp:1;
+	u32 usb_comm_capable:1;
+	u32 cap_mismatch:1;
+	u32 give_back:1;
+	u32 obj_pos:3;
+	u32 rsvd2:1;
+} __packed;
+
+struct pd_packet {
+	struct pd_pkt_header header;
+	u32 data_obj[MAX_NUM_DATA_OBJ+1]; /* +1 is for CRC */
+} __packed;
+
+struct pd_buffer {
+	struct pd_packet pkt;
+	struct list_head node;
+};
+
+#define PD_MSG_NUM_DATA_OBJS(header)	((header)->num_data_obj)
+#define IS_CTRL_MSG(header)		!PD_MSG_NUM_DATA_OBJS(header)
+#define IS_DATA_MSG(header)		(PD_MSG_NUM_DATA_OBJS(header) != 0)
+#define PD_MSG_TYPE(header)		((header)->msg_type)
+#define PD_MSG_ID(header)		((header)->msg_id)
+#define PD_MSG_LEN(header)		(PD_MSG_NUM_DATA_OBJS(header)	\
+						* PD_MSG_SIZE_PER_DATA_OBJ)
+#define IS_DATA_VDM(header)	((PD_MSG_TYPE(header) ==	\
+					PD_DATA_MSG_VENDOR_DEF) ? 1 : 0)
+
+static inline int to_pd_revision(int rev)
+{
+	if (rev == 1)
+		return PD_REV_ID_1;
+	else if (rev == 2)
+		return PD_REV_ID_2;
+	else
+		return PD_REV_ID_RESERVED;
+}
+
+static inline u32 pd_fixed_pdo_to_current(u32 pdo)
+{
+	return (pdo & 0x3ff) * 10;
+}
+
+static inline u32 pd_cur_to_fixed_pdo(u32 cur)
+{
+	return cur / 10; /* 10s of mA */
+}
+
+static inline u32 pd_fixed_pdo_to_volt(u32 pdo)
+{
+	return (pdo & 0x3ff) * 50;
+}
+
+struct pd_prot;
+extern int pd_ctrl_msg(struct pd_prot *pd, u8 msg_type, u8 msg_id);
+extern int pd_data_msg(struct pd_prot *pd, int len, u8 msg_type);
+#endif /* __PD_MESSAGE_H__ */
diff --git a/drivers/usb/typec/pd/protocol.c b/drivers/usb/typec/pd/protocol.c
new file mode 100644
index 000000000000..0f35ee194219
--- /dev/null
+++ b/drivers/usb/typec/pd/protocol.c
@@ -0,0 +1,419 @@
+/*
+ * protocol.c: PD Protocol framework for handling PD messages
+ *
+ * Copyright (C) 2015 Intel Corporation
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Seee the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ * Author: Kannappan, R <r.kannappan@intel.com>
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/workqueue.h>
+#include <linux/extcon.h>
+#include <linux/usb_typec_phy.h>
+#include <linux/errno.h>
+#include "message.h"
+#include "protocol.h"
+#include "devpolicy_mgr.h"
+
+static LIST_HEAD(protocol_list);
+static DEFINE_SPINLOCK(protocol_lock);
+
+static int pd_extcon_ufp_ntf(struct notifier_block *nb,
+				unsigned long event, void *param)
+{
+	struct pd_prot *prot =
+		container_of(nb, struct pd_prot, ufp_nb);
+	struct extcon_dev *edev = param;
+	bool cable_state;
+
+	if (!edev)
+		return NOTIFY_DONE;
+
+	prot->init_data_role = PD_DATA_ROLE_UFP;
+	prot->new_data_role = PD_DATA_ROLE_UFP;
+	prot->init_pwr_role = PD_POWER_ROLE_CONSUMER;
+	prot->new_pwr_role = PD_POWER_ROLE_CONSUMER;
+
+	cable_state = extcon_get_cable_state(edev, CABLE_CONSUMER);
+	if (cable_state)
+		queue_work(system_nrt_wq, &prot->cable_event_work);
+
+	return NOTIFY_OK;
+}
+
+static int pd_extcon_dfp_ntf(struct notifier_block *nb,
+				unsigned long event, void *param)
+{
+	struct pd_prot *prot =
+		container_of(nb, struct pd_prot, dfp_nb);
+	struct extcon_dev *edev = param;
+	bool cable_state;
+
+	if (!edev)
+		return NOTIFY_DONE;
+
+	prot->init_data_role = PD_DATA_ROLE_DFP;
+	prot->new_data_role = PD_DATA_ROLE_DFP;
+	prot->init_pwr_role = PD_POWER_ROLE_PROVIDER;
+	prot->new_pwr_role = PD_POWER_ROLE_PROVIDER;
+
+	cable_state = extcon_get_cable_state(edev, CABLE_PROVIDER);
+	if (cable_state)
+		queue_work(system_nrt_wq, &prot->cable_event_work);
+
+	return NOTIFY_OK;
+}
+
+static void pd_reset_counters(struct pd_prot *pd)
+{
+	mutex_lock(&pd->tx_lock);
+	pd->event = PROT_EVENT_NONE;
+	pd->tx_msg_id = 0;
+	pd->retry_counter = 0;
+	mutex_unlock(&pd->tx_lock);
+}
+
+static int do_tx_msg_flush(struct pd_prot *pd)
+{
+	pd_prot_flush_fifo(pd, FIFO_TYPE_TX);
+	pd->retry_counter = 0;
+	return 0;
+}
+
+static int pd_prot_handle_reset(struct pd_prot *pd, enum typec_phy_evts evt)
+{
+	pd_prot_flush_fifo(pd, FIFO_TYPE_TX);
+	pd_prot_flush_fifo(pd, FIFO_TYPE_RX);
+	pd->event = PROT_PHY_EVENT_RESET;
+	complete(&pd->tx_complete);
+	pd_reset_counters(pd);
+	/*TODO: check if the the work is completed */
+	pd->event = PROT_PHY_EVENT_NONE;
+
+	return 0;
+}
+
+static int pd_tx_fsm_state(struct pd_prot *pd, int tx_state)
+{
+	switch (tx_state) {
+	case PROT_TX_PHY_LAYER_RESET:
+		do_tx_msg_flush(pd);
+		/* pd_prot_reset_phy(pd); */
+		break;
+	default:
+		return -EINVAL;
+	}
+	pd->cur_tx_state = tx_state;
+	return 0;
+}
+
+static void pd_prot_tx_work(struct pd_prot *prot)
+{
+	int len;
+
+	len = PD_MSG_LEN(&prot->tx_buf.header) + PD_MSG_HEADER_SIZE;
+	pd_prot_send_phy_packet(prot, &prot->tx_buf, len);
+
+}
+
+static int pd_prot_rcv_pkt_from_policy(struct pd_prot *prot, u8 msg_type,
+						void *buf, int len)
+{
+	struct pd_packet *pkt;
+
+	if (msg_type == PD_CMD_HARD_RESET)
+		return pd_prot_reset_phy(prot);
+	else if (msg_type == PD_CMD_PROTOCOL_RESET)
+		return pd_tx_fsm_state(prot, PROT_TX_PHY_LAYER_RESET);
+
+	pkt = &prot->tx_buf;
+	pkt->header.msg_type = msg_type;
+	pkt->header.data_role = prot->new_data_role;
+	if (prot->pd_version == 2)
+		pkt->header.rev_id = 1;
+	else
+		pkt->header.rev_id = 0;
+	pkt->header.pwr_role = prot->new_pwr_role;
+	pkt->header.msg_id = prot->tx_msg_id;
+	pkt->header.num_data_obj = len / 4;
+	memcpy((u8 *)pkt + sizeof(struct pd_pkt_header), buf, len);
+
+	pd_prot_tx_work(prot);
+
+	return 0;
+}
+
+int prot_rx_send_goodcrc(struct pd_prot *pd, u8 msg_id)
+{
+	mutex_lock(&pd->tx_data_lock);
+	pd_ctrl_msg(pd, PD_CTRL_MSG_GOODCRC, msg_id);
+	pd_prot_send_phy_packet(pd, &pd->tx_buf, PD_MSG_HEADER_SIZE);
+	mutex_unlock(&pd->tx_data_lock);
+	return 0;
+}
+
+static void pd_tx_discard_msg(struct pd_prot *pd)
+{
+	mutex_lock(&pd->tx_lock);
+	pd->event = PROT_EVENT_DISCARD;
+	pd->tx_msg_id = (pd->tx_msg_id + 1) % PD_MAX_MSG_ID;
+	mutex_unlock(&pd->tx_lock);
+	complete(&pd->tx_complete);
+	pd_tx_fsm_state(pd, PROT_TX_PHY_LAYER_RESET);
+}
+
+static void pd_prot_rx_work(struct pd_prot *pd)
+{
+	u8 msg_id;
+	struct pd_packet *buf;
+	u8 msg_type;
+
+	/* wait for goodcrc sent */
+	if (!pd->phy->support_auto_goodcrc)
+		wait_for_completion(&pd->tx_complete);
+
+	if (pd->event == PROT_PHY_EVENT_RESET)
+		goto end;
+
+	buf = &pd->cached_rx_buf;
+
+	msg_id = PD_MSG_ID(&buf->header);
+	msg_type = PD_MSG_TYPE(&buf->header);
+
+	if (pd->rx_msg_id != msg_id) {
+		pd_tx_discard_msg(pd);
+		pd->rx_msg_id = msg_id;
+
+	}
+end:
+	if (!pd->phy->support_auto_goodcrc)
+		reinit_completion(&pd->tx_complete);
+}
+
+static inline void prot_rx_reset(struct pd_prot *pd)
+{
+	pd_reset_counters(pd);
+	pd_prot_reset_phy(pd); /* flush both the fifo */
+}
+
+static void pd_prot_phy_rcv(struct pd_prot *pd)
+{
+	struct pd_packet rcv_buf;
+	int len, event, send_good_crc, msg_type, msg_id;
+
+	mutex_lock(&pd->rx_data_lock);
+
+	len = pd_prot_recv_phy_packet(pd, &rcv_buf);
+	if (len == 0)
+		goto end;
+
+	msg_type = PD_MSG_TYPE(&rcv_buf.header);
+	msg_id = PD_MSG_ID(&rcv_buf.header);
+	send_good_crc = 1;
+	switch (msg_type) {
+	case PD_CTRL_MSG_SOFT_RESET:
+		prot_rx_reset(pd);
+		break;
+	case PD_CTRL_MSG_PING:
+		break;
+	case PD_CTRL_MSG_GOODCRC:
+		if (!IS_CTRL_MSG(&rcv_buf.header))
+			/* data message (source capability :)) */
+			break;
+		send_good_crc = 0;
+		if (msg_id == pd->tx_msg_id) {
+			pd->tx_msg_id = (pd->tx_msg_id + 1) % PD_MAX_MSG_ID;
+			event = PROT_EVENT_NONE;
+			/* notify policy */
+		} else {
+			event = PROT_EVENT_MSGID_MISMATCH;
+		}
+		mutex_lock(&pd->tx_lock);
+		pd->event = event;
+		mutex_unlock(&pd->tx_lock);
+		complete(&pd->tx_complete);
+		break;
+	default:
+		/*  process all other messages */
+		dev_dbg(pd->phy->dev, "PROT: %s msg_type: %d\n",
+				__func__, msg_type);
+		break;
+	}
+
+	if (send_good_crc) {
+		if (!pd->phy->support_auto_goodcrc) {
+			reinit_completion(&pd->tx_complete);
+			prot_rx_send_goodcrc(pd, msg_id);
+		}
+		memcpy(&pd->cached_rx_buf, &rcv_buf, len);
+		pd_prot_rx_work(pd);
+	}
+end:
+	mutex_unlock(&pd->rx_data_lock);
+}
+
+static int pd_handle_phy_ntf(struct notifier_block *nb,
+			unsigned long event, void *data)
+{
+	return NOTIFY_OK;
+}
+
+static void pd_notify_protocol(struct typec_phy *phy, unsigned long event)
+{
+	struct pd_prot *pd = phy->proto;
+
+	switch (event) {
+	case PROT_PHY_EVENT_TX_SENT:
+		mutex_lock(&pd->tx_lock);
+		pd->event = PROT_EVENT_TX_COMPLETED;
+		mutex_unlock(&pd->tx_lock);
+		complete(&pd->tx_complete);
+		break;
+	case PROT_PHY_EVENT_COLLISION:
+		mutex_lock(&pd->tx_lock);
+		pd->event = PROT_EVENT_COLLISION;
+		mutex_unlock(&pd->tx_lock);
+		complete(&pd->tx_complete);
+		break;
+	case PROT_PHY_EVENT_MSG_RCV:
+		pd_prot_phy_rcv(pd);
+		break;
+	case PROT_PHY_EVENT_GOODCRC_SENT:
+		dev_dbg(phy->dev, "%s: PROT_PHY_EVENT_GOODCRC_SENT\n",
+				__func__);
+		break;
+	case PROT_PHY_EVENT_HARD_RST: /* recv HRD_RST */
+	case PROT_PHY_EVENT_SOFT_RST:
+		pd_prot_handle_reset(pd, event);
+		/* wait for activity complete */
+		break;
+	case PROT_PHY_EVENT_TX_FAIL:
+		mutex_lock(&pd->tx_lock);
+		pd->event = PROT_EVENT_TX_FAIL;
+		mutex_unlock(&pd->tx_lock);
+		complete(&pd->tx_complete);
+		break;
+	case PROT_PHY_EVENT_SOFT_RST_FAIL:
+		break;
+	case PROT_PHY_EVENT_TX_HARD_RST: /* sent HRD_RST */
+		break;
+	default:
+		break;
+	}
+}
+
+static void prot_cable_worker(struct work_struct *work)
+{
+	struct pd_prot *prot =
+		container_of(work, struct pd_prot, cable_event_work);
+
+	pd_prot_setup_role(prot, prot->new_data_role, prot->new_pwr_role);
+}
+
+int protocol_bind_dpm(struct typec_phy *phy)
+{
+	int ret;
+	struct pd_prot *prot;
+
+	prot = devm_kzalloc(phy->dev, sizeof(struct pd_prot), GFP_KERNEL);
+	if (!prot)
+		return -ENOMEM;
+
+	prot->phy = phy;
+	prot->pd_version = phy->get_pd_version(phy);
+
+	if (prot->pd_version == 0) {
+		kfree(prot);
+		return -EINVAL;
+	}
+
+	phy->proto = prot;
+	prot->phy->notify_protocol = pd_notify_protocol;
+	prot->phy_nb.notifier_call = pd_handle_phy_ntf;
+
+	ret = typec_register_prot_notifier(phy, &prot->phy_nb);
+	if (ret < 0) {
+		dev_err(phy->dev, "%s: unable to register notifier", __func__);
+		kfree(prot);
+		return -EIO;
+	}
+
+	INIT_LIST_HEAD(&prot->list);
+
+	mutex_init(&prot->tx_lock);
+	mutex_init(&prot->tx_data_lock);
+	mutex_init(&prot->rx_data_lock);
+	init_completion(&prot->tx_complete);
+
+	prot->init_data_role = PD_DATA_ROLE_UFP;
+	prot->new_data_role = PD_DATA_ROLE_UFP;
+	prot->init_pwr_role = PD_POWER_ROLE_CONSUMER;
+	prot->new_pwr_role = PD_POWER_ROLE_CONSUMER;
+
+	prot->rx_msg_id = -1; /* no message is stored */
+	pd_reset_counters(prot);
+	pd_tx_fsm_state(prot, PROT_TX_PHY_LAYER_RESET);
+	INIT_WORK(&prot->cable_event_work, prot_cable_worker);
+
+	prot->ufp_nb.notifier_call = pd_extcon_ufp_ntf;
+	extcon_register_interest(&prot->cable_ufp, "usb-typec",
+					"USB_TYPEC_UFP", &prot->ufp_nb);
+	prot->dfp_nb.notifier_call = pd_extcon_dfp_ntf;
+	extcon_register_interest(&prot->cable_dfp, "usb-typec",
+					"USB_TYPEC_DFP", &prot->dfp_nb);
+	prot->policy_fwd_pkt = pd_prot_rcv_pkt_from_policy;
+	list_add_tail(&prot->list, &protocol_list);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(protocol_bind_dpm);
+
+static void remove_protocol(struct pd_prot *prot)
+{
+	if (!prot)
+		return;
+
+	extcon_unregister_interest(&prot->cable_dfp);
+	extcon_unregister_interest(&prot->cable_ufp);
+	typec_unregister_prot_notifier(prot->phy, &prot->phy_nb);
+	kfree(prot);
+}
+
+void protocol_unbind_dpm(struct typec_phy *phy)
+{
+	struct pd_prot *prot, *temp;
+
+	if (list_empty(&protocol_list))
+		return;
+
+	spin_lock(&protocol_lock);
+	list_for_each_entry_safe(prot, temp, &protocol_list, list) {
+		if (prot->phy == phy) {
+			list_del(&prot->list);
+			remove_protocol(prot);
+			break;
+		}
+	}
+	spin_unlock(&protocol_lock);
+}
+EXPORT_SYMBOL_GPL(protocol_unbind_dpm);
+
+MODULE_AUTHOR("Kannappan, R <r.kannappan@intel.com>");
+MODULE_DESCRIPTION("PD Protocol Layer");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/usb/typec/pd/protocol.h b/drivers/usb/typec/pd/protocol.h
new file mode 100644
index 000000000000..477f337f9c60
--- /dev/null
+++ b/drivers/usb/typec/pd/protocol.h
@@ -0,0 +1,125 @@
+
+#ifndef __USB_PD_PROT_H__
+#define __USB_PD_PROT_H__
+
+#include <linux/list.h>
+#include <linux/mutex.h>
+#include <linux/extcon.h>
+#include <linux/usb_typec_phy.h>
+#include "message.h"
+
+#define PD_MAX_MSG_ID	8
+
+enum {
+	PROT_EVENT_NONE,
+	PROT_EVENT_COLLISION,
+	PROT_EVENT_DISCARD,
+	PROT_EVENT_MSGID_MISMATCH,
+	PROT_EVENT_TX_FAIL,
+	PROT_EVENT_TX_COMPLETED,
+};
+
+enum prot_tx_fsm {
+	PROT_TX_PHY_LAYER_RESET,
+	PROT_TX_MSG_RCV,
+	PROT_TX_MSG_SENT,
+	PROT_TX_MSG_ERROR,
+};
+
+struct pd_prot {
+	struct typec_phy *phy;
+	u32 retry_count;
+	u8 pd_version;
+
+	u8 init_data_role;
+	u8 new_data_role;
+	u8 assumed_data_role;
+	u8 init_pwr_role;
+	u8 new_pwr_role;
+	u8 assumed_pwr_role;
+	u8 event;
+	u8 tx_msg_id;
+	s8 rx_msg_id;
+	u8 retry_counter;
+
+	u8 cur_tx_state;
+	struct pd_packet tx_buf;
+	struct pd_packet cached_rx_buf;
+
+	struct completion tx_complete;
+	struct completion goodcrc_sent;
+
+	struct mutex rx_data_lock;
+	struct mutex tx_data_lock;
+	struct mutex tx_lock;
+
+	struct list_head list;
+	struct work_struct cable_event_work;
+
+	struct extcon_specific_cable_nb cable_ufp;
+	struct extcon_specific_cable_nb cable_dfp;
+	struct notifier_block ufp_nb;
+	struct notifier_block dfp_nb;
+	struct notifier_block phy_nb;
+	int (*policy_fwd_pkt)(struct pd_prot *prot, u8 msg_type,
+					void *data, int len);
+};
+
+static inline int pd_prot_send_phy_packet(struct pd_prot *pd, void *buf,
+						int len)
+{
+	if (pd->phy->send_packet)
+		return pd->phy->send_packet(pd->phy, buf, len);
+
+	return -ENOTSUPP;
+}
+
+static inline int pd_prot_recv_phy_packet(struct pd_prot *pd, void *buf)
+{
+	if (pd->phy->recv_packet)
+		return pd->phy->recv_packet(pd->phy, buf);
+
+	return -ENOTSUPP;
+}
+
+static inline int pd_prot_reset_phy(struct pd_prot *pd)
+{
+	if (pd->phy->phy_reset)
+		return pd->phy->phy_reset(pd->phy);
+
+	return -ENOTSUPP;
+}
+
+static inline int pd_prot_flush_fifo(struct pd_prot *pd, int type)
+{
+	if (pd->phy->flush_fifo)
+		return pd->phy->flush_fifo(pd->phy, type);
+
+	return -ENOTSUPP;
+}
+
+static inline int pd_prot_setup_role(struct pd_prot *pd,
+			int data_role, int power_role)
+{
+	if (pd->phy->setup_role)
+		return pd->phy->setup_role(pd->phy,
+				data_role, power_role);
+
+	return -ENOTSUPP;
+}
+
+#if defined(CONFIG_USBC_PD) && defined(CONFIG_USBC_PD_POLICY)
+extern int protocol_bind_dpm(struct typec_phy *phy);
+extern void protocol_unbind_dpm(struct typec_phy *phy);
+#else /* CONFIG_USBC_PD && CONFIG_USBC_PD_POLICY */
+static inline int protocol_bind_dpm(struct typec_phy *phy)
+{
+	return 0;
+}
+static inline void protocol_unbind_dpm(struct typec_phy *phy)
+{ }
+#endif /* CONFIG_USBC_PD && CONFIG_USBC_PD_POLICY */
+
+extern int pd_ctrl_msg(struct pd_prot *pd, u8 msg_type, u8 msg_id);
+extern int pd_data_msg(struct pd_prot *pd, int len, u8 msg_type);
+#endif /* __USB_PD_PROT_H__ */
diff --git a/include/linux/usb_typec_phy.h b/include/linux/usb_typec_phy.h
index 1d7a7862b4d7..dcda358454c5 100644
--- a/include/linux/usb_typec_phy.h
+++ b/include/linux/usb_typec_phy.h
@@ -178,7 +178,7 @@ struct typec_phy {
 	int (*send_packet)(struct typec_phy *phy, u8 *msg, int len);
 	int (*recv_packet)(struct typec_phy *phy, u8 *msg);
 	int (*setup_role)(struct typec_phy *phy, int data_role, int pwr_role);
-	int (*notify_protocol)(struct typec_phy *phy, unsigned long event);
+	void (*notify_protocol)(struct typec_phy *phy, unsigned long event);
 	bool (*is_pd_capable)(struct typec_phy *phy);
 	int (*enable_autocrc)(struct typec_phy *phy, bool en);
 };
-- 
1.9.1

