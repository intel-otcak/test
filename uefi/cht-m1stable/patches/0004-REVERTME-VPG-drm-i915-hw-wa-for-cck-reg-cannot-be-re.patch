From 36211f5183bfc40bde99b40bd2255554376a82bf Mon Sep 17 00:00:00 2001
Message-Id: <36211f5183bfc40bde99b40bd2255554376a82bf.1414143271.git.chang-joon.lee@intel.com>
In-Reply-To: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
References: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
From: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
Date: Wed, 15 Oct 2014 15:15:01 +0530
Subject: [PATCH 04/26] REVERTME [VPG]: drm/i915: hw wa for cck reg cannot be
 read

There is a hardware bug that cck register cannot be read.
This hw bug is present in CHT A steppings.

REVERTME: This patch can be reverted once everyone in intel
has stopped using CHT A stepping.

For: GMINL-1532
Change-Id: I7989af9628770eca9938be1ae9e0e26dcaecfe9d
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/intel_dsi_pll.c |   16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dsi_pll.c b/drivers/gpu/drm/i915/intel_dsi_pll.c
index 98b8589..719eed9 100644
--- a/drivers/gpu/drm/i915/intel_dsi_pll.c
+++ b/drivers/gpu/drm/i915/intel_dsi_pll.c
@@ -250,6 +250,8 @@ static int dsi_calc_mnp(struct drm_i915_private *dev_priv,
 	return 0;
 }
 
+struct dsi_mnp dsi_mnp;
+
 /*
  * XXX: The muxing and gating is hard coded for now. Need to add support for
  * sharing PLLs with two DSI outputs.
@@ -261,7 +263,6 @@ static void vlv_configure_dsi_pll(struct intel_encoder *encoder)
 	const struct drm_display_mode *mode = &intel_crtc->config.adjusted_mode;
 	struct intel_dsi *intel_dsi = enc_to_intel_dsi(&encoder->base);
 	int ret;
-	struct dsi_mnp dsi_mnp;
 	u32 dsi_clk;
 
 	dsi_clk = dsi_clk_from_pclk(mode, intel_dsi->pixel_format,
@@ -310,7 +311,12 @@ void vlv_enable_dsi_pll(struct intel_encoder *encoder)
 	 */
 	udelay(1000);
 
-	tmp = vlv_cck_read(dev_priv, CCK_REG_DSI_PLL_CONTROL);
+
+	if (IS_CHERRYVIEW(dev_priv->dev) && STEP_BELOW(STEP_B1))
+		tmp = dsi_mnp.dsi_pll_ctrl;
+	else
+		tmp = vlv_cck_read(dev_priv, CCK_REG_DSI_PLL_CONTROL);
+
 	tmp |= DSI_PLL_VCO_EN;
 	vlv_cck_write(dev_priv, CCK_REG_DSI_PLL_CONTROL, tmp);
 
@@ -333,7 +339,11 @@ void vlv_disable_dsi_pll(struct intel_encoder *encoder)
 
 	mutex_lock(&dev_priv->dpio_lock);
 
-	tmp = vlv_cck_read(dev_priv, CCK_REG_DSI_PLL_CONTROL);
+	if (IS_CHERRYVIEW(dev_priv->dev) && STEP_BELOW(STEP_B1))
+		tmp = dsi_mnp.dsi_pll_ctrl;
+	else
+		tmp = vlv_cck_read(dev_priv, CCK_REG_DSI_PLL_CONTROL);
+
 	tmp &= ~DSI_PLL_VCO_EN;
 	tmp |= DSI_PLL_LDO_GATE;
 	vlv_cck_write(dev_priv, CCK_REG_DSI_PLL_CONTROL, tmp);
-- 
1.7.9.5

