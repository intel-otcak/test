From 59b1167b14eb64f92478127c9deae9b77fedf027 Mon Sep 17 00:00:00 2001
Message-Id: <59b1167b14eb64f92478127c9deae9b77fedf027.1440106296.git.chang-joon.lee@intel.com>
In-Reply-To: <1f426693c14c79e65ad8e62ef6bb4b07d6484040.1440106296.git.chang-joon.lee@intel.com>
References: <1f426693c14c79e65ad8e62ef6bb4b07d6484040.1440106296.git.chang-joon.lee@intel.com>
From: Makarand R Muley <makarand.r.muley@intel.com>
Date: Fri, 31 Jul 2015 22:28:50 +0530
Subject: [PATCH 08/11] FOR_UPSTREAM [VPG]: drm/i915: Programming DPIO
 registers with golden values.

HDMI Eye diagram test is part of Phy compliance Test suite. At present
it is failing due to incorrect DPIO register programming.This patch
fixes this problem by including golden values for required registers.
It also streamlines DPIO programming sequence for these registers.

Tracked-On: https://vthsd.fm.intel.com/hsd/pcgsw/default.aspx#bug/default.aspx?bug_id=8158182
Change-Id: Iaa92943a7f6b6e656105290ebacd306bf681cc5a
Signed-off-by: Muley, Makarand R <makarand.r.muley@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h   |  10 ++-
 drivers/gpu/drm/i915/intel_hdmi.c | 134 +++++++++++++++++++++++++++-----------
 2 files changed, 104 insertions(+), 40 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index e95af3a..f487119 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -941,8 +941,14 @@ enum punit_power_well {
 
 #define _CHV_PCS_DW10_CH0		0x8228
 #define _CHV_PCS_DW10_CH1		0x8428
+#define   DPIO_PCS_SWING_DEEMPH_CALC_SHIFT	16
+#define   DPIO_PCS_SWING_DEEMPH_CALC_MASK	(0xcf0f << DPIO_PCS_SWING_DEEMPH_CALC_SHIFT)
 #define   DPIO_PCS_SWING_CALC_TX0_TX2	(1<<30)
 #define   DPIO_PCS_SWING_CALC_TX1_TX3	(1<<31)
+#define	  DPIO_PCS_DEEMPH_CALC_TX0_TX2	(2<<24)
+#define	  DPIO_PCS_DEEMPH_CALC_TX1_TX3	(2<<16)
+#define	  DPIO_PCS_DEEMPH_4K_CALC_TX0_TX2	(6<<28)
+#define	  DPIO_PCS_DEEMPH_4K_CALC_TX1_TX3	(6<<20)
 #define   DPIO_PCS_TX2DEEMP_MASK	(0xf<<24)
 #define   DPIO_PCS_TX2DEEMP_9P5		(0<<24)
 #define   DPIO_PCS_TX2DEEMP_6P0		(2<<24)
@@ -1002,12 +1008,14 @@ enum punit_power_well {
 #define   DPIO_SWING_MARGIN000_SHIFT	16
 #define   DPIO_SWING_MARGIN000_MASK	(0xff << DPIO_SWING_MARGIN000_SHIFT)
 #define   DPIO_UNIQ_TRANS_SCALE_SHIFT	8
+#define   DPIO_UNIQ_TRANS_SCALE_MASK	(0xff << DPIO_UNIQ_TRANS_SCALE_SHIFT)
 #define VLV_TX_DW2(ch) _PORT(ch, _VLV_TX_DW2_CH0, _VLV_TX_DW2_CH1)
 
 #define _VLV_TX_DW3_CH0			0x828c
 #define _VLV_TX_DW3_CH1			0x848c
 /* The following bit for CHV phy */
-#define   DPIO_TX_UNIQ_TRANS_SCALE_EN	(1<<27)
+#define   DPIO_TX_UNIQ_TRANS_SCALE_EN	(0xfff << 16)
+#define   DPIO_DOWN_SCALE_AMP_METHOD_SHIFT	24
 #define   DPIO_TX_UNIQ_TRANS_SCALE_CH1  (1 << 3)
 #define   DPIO_TX_UNIQ_TRANS_SCALE_CH0  (1 << 2)
 #define   DPIO_SWING_MARGIN101_SHIFT	16
diff --git a/drivers/gpu/drm/i915/intel_hdmi.c b/drivers/gpu/drm/i915/intel_hdmi.c
index 78510f5..34d5bc1 100644
--- a/drivers/gpu/drm/i915/intel_hdmi.c
+++ b/drivers/gpu/drm/i915/intel_hdmi.c
@@ -1152,6 +1152,7 @@ void intel_hdmi_hot_plug(struct intel_encoder *intel_encoder)
 	 * Lets try to get EDID
 	 */
 	edid = intel_hdmi_get_edid(connector, false);
+
 	if (edid) {
 		if (connector->status == connector_status_connected) {
 			DRM_DEBUG_DRIVER("Hdmi: Monitor connected\n");
@@ -1804,50 +1805,105 @@ static void chv_hdmi_pre_enable(struct intel_encoder *encoder)
 	val |= DPIO_PCS_TX1MARGIN_000 | DPIO_PCS_TX2MARGIN_000;
 	vlv_dpio_write(dev_priv, pipe, VLV_PCS23_DW9(ch), val);
 
-	/* FIXME: Program the support xxx V-dB */
-	/* Use 800mV-0dB */
-	for (i = 0; i < 4; i++) {
-		val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW4(ch, i));
-		val &= ~DPIO_SWING_DEEMPH9P5_MASK;
-		val |= 128 << DPIO_SWING_DEEMPH9P5_SHIFT;
-		vlv_dpio_write(dev_priv, pipe, CHV_TX_DW4(ch, i), val);
-	}
+	/* Program 4k and non-4k modes based on clock value */
+	if (adjusted_mode->clock <= 162000) {
+		/* Programs non-4k modes here */
+		/* FIXME: Program the support xxx V-dB */
+		/* Use 800 mV-0dB */
+		for (i = 0; i < 4; i++) {
+			val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW4(ch, i));
+			val &= ~DPIO_SWING_DEEMPH9P5_MASK;
+			val &= ~DPIO_SWING_DEEMPH6P0_MASK;
+			val |= 0x80 << DPIO_SWING_DEEMPH9P5_SHIFT;
+			val |= 0x80 << DPIO_SWING_DEEMPH6P0_SHIFT;
+			vlv_dpio_write(dev_priv, pipe, CHV_TX_DW4(ch, i), val);
+		}
 
-	for (i = 0; i < 4; i++) {
-		val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW2(ch, i));
-		val &= ~DPIO_SWING_MARGIN000_MASK;
-		val |= 102 << DPIO_SWING_MARGIN000_SHIFT;
-		vlv_dpio_write(dev_priv, pipe, CHV_TX_DW2(ch, i), val);
-	}
+		for (i = 0; i < 4; i++) {
+			val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW2(ch, i));
+			val &= ~DPIO_SWING_MARGIN000_MASK;
+			val &= ~DPIO_UNIQ_TRANS_SCALE_MASK;
+			val |= 0x80 << DPIO_SWING_MARGIN000_SHIFT;
+			val |= 0x98 << DPIO_UNIQ_TRANS_SCALE_SHIFT;
+			vlv_dpio_write(dev_priv, pipe, CHV_TX_DW2(ch, i), val);
+		}
 
-	/* Disable unique transition scale */
-	for (i = 0; i < 4; i++) {
-		val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW3(ch, i));
-		val &= ~DPIO_TX_UNIQ_TRANS_SCALE_EN;
-		vlv_dpio_write(dev_priv, pipe, CHV_TX_DW3(ch, i), val);
-	}
+		/* Disable unique transition scale */
+		for (i = 0; i < 4; i++) {
+			val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW3(ch, i));
+			val &= ~DPIO_TX_UNIQ_TRANS_SCALE_EN;
+			val |= 0x80 << DPIO_SWING_MARGIN101_SHIFT;
+			val |= 0x4 << DPIO_DOWN_SCALE_AMP_METHOD_SHIFT;
+			vlv_dpio_write(dev_priv, pipe, CHV_TX_DW3(ch, i), val);
+		}
+		/* Start swing calculation */
+			val = vlv_dpio_read(dev_priv, pipe, VLV_PCS01_DW10(ch));
+			val &= ~DPIO_PCS_SWING_DEEMPH_CALC_MASK;
+			val |= DPIO_PCS_DEEMPH_CALC_TX0_TX2 |
+				DPIO_PCS_DEEMPH_CALC_TX1_TX3;
+			vlv_dpio_write(dev_priv, pipe, VLV_PCS01_DW10(ch), val);
+
+			val = vlv_dpio_read(dev_priv, pipe, VLV_PCS23_DW10(ch));
+			val &= ~DPIO_PCS_SWING_DEEMPH_CALC_MASK;
+			val |= DPIO_PCS_DEEMPH_CALC_TX0_TX2 |
+				DPIO_PCS_DEEMPH_CALC_TX1_TX3;
+			vlv_dpio_write(dev_priv, pipe, VLV_PCS23_DW10(ch), val);
+	} else {
+		/* Programs 4k-modes here */
+		/* Use 800 mV-0dB */
+		for (i = 0; i < 4; i++) {
+			if (i == 3) {
+				val = vlv_dpio_read(dev_priv, pipe,
+					CHV_TX_DW4(ch, i));
+				val &= ~DPIO_SWING_DEEMPH9P5_MASK;
+				val &= ~DPIO_SWING_DEEMPH6P0_MASK;
+				val |= 0x80 << DPIO_SWING_DEEMPH9P5_SHIFT;
+				val |= 0x80 << DPIO_SWING_DEEMPH6P0_SHIFT;
+				vlv_dpio_write(dev_priv, pipe,
+					CHV_TX_DW4(ch, i), val);
+			} else {
+				val = vlv_dpio_read(dev_priv, pipe,
+					CHV_TX_DW4(ch, i));
+				val &= ~DPIO_SWING_DEEMPH9P5_MASK;
+				val &= ~DPIO_SWING_DEEMPH6P0_MASK;
+				val |= 0x60 << DPIO_SWING_DEEMPH9P5_SHIFT;
+				val |= 0x60 << DPIO_SWING_DEEMPH6P0_SHIFT;
+				vlv_dpio_write(dev_priv, pipe,
+					CHV_TX_DW4(ch, i), val);
+			}
+		}
 
-	/* Additional steps for 1200mV-0dB */
-#if 0
-	val = vlv_dpio_read(dev_priv, pipe, VLV_TX_DW3(ch));
-	if (ch)
-		val |= DPIO_TX_UNIQ_TRANS_SCALE_CH1;
-	else
-		val |= DPIO_TX_UNIQ_TRANS_SCALE_CH0;
-	vlv_dpio_write(dev_priv, pipe, VLV_TX_DW3(ch), val);
+		for (i = 0; i < 4; i++) {
+			val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW2(ch, i));
+			val &= ~DPIO_SWING_MARGIN000_MASK;
+			val &= ~DPIO_UNIQ_TRANS_SCALE_MASK;
+			val |= 0xa0 << DPIO_SWING_MARGIN000_SHIFT;
+			val |= 0x98 << DPIO_UNIQ_TRANS_SCALE_SHIFT;
+			vlv_dpio_write(dev_priv, pipe, CHV_TX_DW2(ch, i), val);
+		}
 
-	vlv_dpio_write(dev_priv, pipe, VLV_TX_DW2(ch),
-			vlv_dpio_read(dev_priv, pipe, VLV_TX_DW2(ch)) |
-				(0x9a << DPIO_UNIQ_TRANS_SCALE_SHIFT));
-#endif
-	/* Start swing calculation */
-	val = vlv_dpio_read(dev_priv, pipe, VLV_PCS01_DW10(ch));
-	val |= DPIO_PCS_SWING_CALC_TX0_TX2 | DPIO_PCS_SWING_CALC_TX1_TX3;
-	vlv_dpio_write(dev_priv, pipe, VLV_PCS01_DW10(ch), val);
+		/* Disable unique transition scale */
+		for (i = 0; i < 4; i++) {
+			val = vlv_dpio_read(dev_priv, pipe, CHV_TX_DW3(ch, i));
+			val &= ~DPIO_TX_UNIQ_TRANS_SCALE_EN;
+			val |= 0xa0 << DPIO_SWING_MARGIN101_SHIFT;
+			val |= 0x4 << DPIO_DOWN_SCALE_AMP_METHOD_SHIFT;
+			vlv_dpio_write(dev_priv, pipe, CHV_TX_DW3(ch, i), val);
+		}
 
-	val = vlv_dpio_read(dev_priv, pipe, VLV_PCS23_DW10(ch));
-	val |= DPIO_PCS_SWING_CALC_TX0_TX2 | DPIO_PCS_SWING_CALC_TX1_TX3;
-	vlv_dpio_write(dev_priv, pipe, VLV_PCS23_DW10(ch), val);
+		/* Start swing calculation */
+			val = vlv_dpio_read(dev_priv, pipe, VLV_PCS01_DW10(ch));
+			val &= ~DPIO_PCS_SWING_DEEMPH_CALC_MASK;
+			val |= DPIO_PCS_DEEMPH_CALC_TX0_TX2 |
+				DPIO_PCS_DEEMPH_CALC_TX1_TX3;
+			vlv_dpio_write(dev_priv, pipe, VLV_PCS01_DW10(ch), val);
+
+			val = vlv_dpio_read(dev_priv, pipe, VLV_PCS23_DW10(ch));
+			val &= ~DPIO_PCS_SWING_DEEMPH_CALC_MASK;
+			val |= DPIO_PCS_DEEMPH_CALC_TX0_TX2 |
+				DPIO_PCS_DEEMPH_CALC_TX1_TX3;
+			vlv_dpio_write(dev_priv, pipe, VLV_PCS23_DW10(ch), val);
+	}
 
 	/* LRC Bypass */
 	val = vlv_dpio_read(dev_priv, pipe, CHV_CMN_DW30);
-- 
1.9.1

