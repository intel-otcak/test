From bdf81a05f78992375a074bebea25ddba1042c54d Mon Sep 17 00:00:00 2001
Message-Id: <bdf81a05f78992375a074bebea25ddba1042c54d.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Thu, 24 Jul 2014 12:24:15 +0530
Subject: [PATCH 167/312] FROM_UPSTREAM [VPG]: drm: Allow reenabling of vblank
 interrupts even if refcount>0.

The following change has been taken from:
[PATCH 4/5] drm: Allow reenabling of vblank interrupts even if	refcount>0
From: Ville Syrjala <ville.syrjala@linux.intel.com>
Reference Link: http://lists.freedesktop.org/archives/dri-devel/2014-February/054375.html

Description:
If someone holds a vblank reference across the modeset, and after/during
the modeset someone tries to grab a vblank reference, the current code
won't re-enable the vblank interrupts. That's not good, so instead allow
the driver to choose whether drm_vblank_get() should always enable the
interrupts regardless of the refcount.
Combined with the drm_vblank_off/drm_vblank_on reject mechanism, this
can also be used to allow drivers to use vblank interrupts during
modeset, whether or not someone is currently holding a vblank reference

Issue: GMIN-2718
Change-Id: I26e7f96965212c3a94b067d1a4ba53ebf5c20eaa
Signed-off-by: Ville Syrjala <ville.syrjala@linux.intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/drm_irq.c       |    3 ++-
 drivers/gpu/drm/i915/i915_dma.c |    3 +++
 include/drm/drmP.h              |    6 ++++++
 3 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/drm_irq.c b/drivers/gpu/drm/drm_irq.c
index 0de123a..0a8a3a1 100644
--- a/drivers/gpu/drm/drm_irq.c
+++ b/drivers/gpu/drm/drm_irq.c
@@ -929,7 +929,8 @@ int drm_vblank_get(struct drm_device *dev, int crtc)
 
 	spin_lock_irqsave(&dev->vbl_lock, irqflags);
 	/* Going from 0->1 means we have to enable interrupts again */
-	if (atomic_add_return(1, &dev->vblank[crtc].refcount) == 1) {
+	if (atomic_add_return(1, &dev->vblank[crtc].refcount) == 1 ||
+		dev->vblank_always_enable_on_get) {
 		ret = drm_vblank_enable(dev, crtc);
 	} else {
 		if (!dev->vblank[crtc].enabled) {
diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index a51451d..4039458 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -1769,6 +1769,9 @@ int i915_driver_load(struct drm_device *dev, unsigned long flags)
 	i915_setup_sysfs(dev);
 	dev_priv->is_first_modeset = true;
 
+	if (IS_VALLEYVIEW(dev))
+		dev->vblank_always_enable_on_get = true;
+
 	if (INTEL_INFO(dev)->num_pipes) {
 		/* Must be done after probing outputs */
 		intel_opregion_init(dev);
diff --git a/include/drm/drmP.h b/include/drm/drmP.h
index a06bc78..f7aa21f 100644
--- a/include/drm/drmP.h
+++ b/include/drm/drmP.h
@@ -1117,6 +1117,12 @@ struct drm_device {
 	 */
 	bool vblank_disable_allowed;
 
+	/*
+	 * Should a non-rejected drm_vblank_get() always enable the
+	 * vblank interrupt regardless of the current refcount?
+	 */
+	bool vblank_always_enable_on_get;
+
 	/* array of size num_crtcs */
 	struct drm_vblank_crtc *vblank;
 
-- 
1.7.9.5

