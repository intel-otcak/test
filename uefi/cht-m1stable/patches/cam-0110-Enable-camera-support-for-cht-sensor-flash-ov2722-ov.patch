From d85b21fdcfc9f77f93b9b26147f58fe4e6e53c67 Mon Sep 17 00:00:00 2001
From: Ding Yunliang <yunliang.ding@intel.com>
Date: Fri, 5 Sep 2014 11:58:35 +0800
Subject: [PATCH 110/117] Enable camera support for cht sensor/flash
 ov2722/ov5693/imx175

1.Fixed v1p8 gpio shared issue, v1p8 enable pin is shared by both sensors
2.config variables will be achieved based on efi oemvars design
3.add crystal cove pmic hack for camera power up
4.ov2722 pwdn pin active high when pull down

Change-Id: Iea06ee31cd73552afa13191efa1d925b7e992560
Tracked-On: https://bz01p-vied.ir.intel.com/show_bug.cgi?id=4396
Tracked-On: https://jira01.devtools.intel.com/browse/GMIN-3345
Signed-off-by: Ding Yunliang <yunliang.ding@intel.com>
---
 .../x86/platform/intel-mid/atomisp_gmin_platform.c | 61 ++++++++++++++++++----
 .../camera/drivers/media/i2c/imx/imx.c             | 35 +++++++------
 .../camera/drivers/media/i2c/lm3554.c              | 45 ++++++++++++++++
 3 files changed, 115 insertions(+), 26 deletions(-)

diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
index d5aaf84..67409c7 100644
--- a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -27,6 +27,7 @@ EXPORT_SYMBOL(spid);
 
 #define DEVNAME_PMIC_AXP "INT33F4:00"
 #define DEVNAME_PMIC_TI  "INT33F5:00"
+#define DEVNAME_PMIC_CRYSTALCOVE "INT33FD:00"
 
 /* Should be defined in vlv2_plat_clock API, isn't: */
 #define VLV2_CLK_19P2MHZ 1
@@ -60,6 +61,12 @@ EXPORT_SYMBOL(spid);
 #define LDO_1P8V_ON	0x59 /* 0x58 selects 1.80V ...      */
 #define LDO_1P8V_OFF	0x58 /* ... bottom bit is "enabled" */
 
+/* CRYSTAL COVE PMIC register hackery */
+#define CRYSTAL_1P8V_REG        0x5d
+#define CRYSTAL_2P8V_REG        0x66
+#define CRYSTAL_ON      0x63
+#define CRYSTAL_OFF     0x62
+
 struct gmin_subdev {
 	struct v4l2_subdev *subdev;
 	int clock_num;
@@ -77,7 +84,8 @@ struct gmin_subdev {
 
 static struct gmin_subdev gmin_subdevs[MAX_SUBDEVS];
 
-static enum { PMIC_UNSET=0, PMIC_REGULATOR, PMIC_AXP, PMIC_TI } pmic_id;
+static enum { PMIC_UNSET = 0, PMIC_REGULATOR, PMIC_AXP, PMIC_TI ,
+	PMIC_CRYSTALCOVE} pmic_id;
 
 /* The atomisp uses type==0 for the end-of-list marker, so leave space. */
 static struct intel_v4l2_subdev_table pdata_subdevs[MAX_SUBDEVS+1];
@@ -96,6 +104,15 @@ static const struct atomisp_platform_data pdata = {
 enum { V2P8_GPIO_UNSET = -2, V2P8_GPIO_NONE = -1 };
 static int v2p8_gpio = V2P8_GPIO_UNSET;
 
+/*
+ * Something of a hack. The CHT RVP board drives camera 1.8v from an
+ * external regulator instead of the PMIC just like ECS E7 board, see the
+ * comments above.
+ */
+enum { V1P8_GPIO_UNSET = -2, V1P8_GPIO_NONE = -1 };
+static int v1p8_gpio = V1P8_GPIO_UNSET;
+
+
 static struct gmin_subdev *find_gmin_subdev(struct v4l2_subdev *subdev);
 
 /*
@@ -276,6 +293,8 @@ static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
 			pmic_id = PMIC_AXP;
 		else if (i2c_dev_exists(DEVNAME_PMIC_TI))
 			pmic_id = PMIC_TI;
+		else if (i2c_dev_exists(DEVNAME_PMIC_CRYSTALCOVE))
+			pmic_id = PMIC_CRYSTALCOVE;
 		else
 			pmic_id = PMIC_REGULATOR;
 	}
@@ -294,10 +313,10 @@ static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
 
 	gmin_subdevs[i].subdev = subdev;
 	gmin_subdevs[i].clock_num = gmin_get_var_int(dev, "CamClk", 0);
-	gmin_subdevs[i].gpio0 = gpiod_get_index(dev, "cam_gpio0", 0);
-	gmin_subdevs[i].gpio1 = gpiod_get_index(dev, "cam_gpio1", 1);
 	gmin_subdevs[i].csi_port = gmin_get_var_int(dev, "CsiPort", 0);
 	gmin_subdevs[i].csi_lanes = gmin_get_var_int(dev, "CsiLanes", 1);
+	gmin_subdevs[i].gpio0 = gpiod_get_index(dev, "cam_gpio0", 0);
+	gmin_subdevs[i].gpio1 = gpiod_get_index(dev, "cam_gpio1", 1);
 
 	if (!IS_ERR(gmin_subdevs[i].gpio0)) {
 		ret = gpiod_direction_output(gmin_subdevs[i].gpio0, 0);
@@ -342,7 +361,6 @@ static struct gmin_subdev *find_gmin_subdev(struct v4l2_subdev *subdev)
 static int gmin_gpio0_ctrl(struct v4l2_subdev *subdev, int on)
 {
 	struct gmin_subdev *gs = find_gmin_subdev(subdev);
-
 	if (gs && gs->gpio0) {
 		gpiod_set_value(gs->gpio0, on);
 		return 0;
@@ -432,12 +450,31 @@ static int axp_v2p8_off(void)
 int gmin_v1p8_ctrl(struct v4l2_subdev *subdev, int on)
 {
 	struct gmin_subdev *gs = find_gmin_subdev(subdev);
+	int ret;
+
+	if (v1p8_gpio == V1P8_GPIO_UNSET) {
+		v1p8_gpio = gmin_get_var_int(NULL, "V1P8GPIO", V1P8_GPIO_NONE);
+		if (v1p8_gpio != V1P8_GPIO_NONE) {
+			pr_info("atomisp_gmin_platform: 1.8v power on GPIO %d\n",
+				v1p8_gpio);
+			ret = gpio_request(v1p8_gpio, "camera_v1p8_en");
+			if (!ret)
+				ret = gpio_direction_output(v1p8_gpio, 0);
+			if (ret)
+				pr_err("V1P8 GPIO initialization failed\n");
+		}
+	}
 
 	if (gs && gs->v1p8_on == on)
 		return 0;
 	gs->v1p8_on = on;
 
-	if (gs && gs->v1p8_reg) {
+	if (v1p8_gpio >= 0) {
+		gpio_set_value(v1p8_gpio, on);
+		return 0;
+	}
+
+	if (gs->v1p8_reg) {
 		if (on)
 			return regulator_enable(gs->v1p8_reg);
 		else
@@ -480,17 +517,16 @@ int gmin_v2p8_ctrl(struct v4l2_subdev *subdev, int on)
 		}
 	}
 
-
 	if (gs && gs->v2p8_on == on)
 		return 0;
 	gs->v2p8_on = on;
 
-	if (gs && v2p8_gpio >= 0) {
+	if (v2p8_gpio >= 0) {
 		gpio_set_value(v2p8_gpio, on);
 		return 0;
 	}
 
-	if (gs && gs->v2p8_reg) {
+	if (gs->v2p8_reg) {
 		if (on)
 			return regulator_enable(gs->v2p8_reg);
 		else
@@ -511,6 +547,13 @@ int gmin_v2p8_ctrl(struct v4l2_subdev *subdev, int on)
 			return intel_soc_pmic_writeb(LDO9_REG, LDO_2P8V_OFF);
 	}
 
+	if (pmic_id == PMIC_CRYSTALCOVE) {
+		if (on)
+			return intel_soc_pmic_writeb(CRYSTAL_2P8V_REG, CRYSTAL_ON);
+		else
+			return intel_soc_pmic_writeb(CRYSTAL_2P8V_REG, CRYSTAL_OFF);
+	}
+
 	return -EINVAL;
 }
 
@@ -647,7 +690,7 @@ EXPORT_SYMBOL_GPL(gmin_get_config_var);
 
 int gmin_get_var_int(struct device *dev, const char *var, int def)
 {
-	char val[16];
+	char val[CFG_VAR_NAME_MAX];
 	size_t len = sizeof(val);
 	long result;
 	int ret;
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
index a2900d4..01bc1f9 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
@@ -560,8 +560,9 @@ static int power_ctrl(struct v4l2_subdev *sd, int flag)
 	if (dev->platform_data->power_ctrl)
 		return dev->platform_data->power_ctrl(sd, flag);
 
-	/* G-Min only supports imx134 */
-	if (dev->sensor_id && dev->sensor_id != IMX134_ID)
+	/* G-Min only supports imx134/imx175 */
+	if (dev->sensor_id && dev->sensor_id != IMX134_ID
+		&& dev->sensor_id != IMX175_ID)
 		return -EINVAL;
 
 	if (flag) {
@@ -591,15 +592,16 @@ static int gpio_ctrl(struct v4l2_subdev *sd, int flag)
 	if (dev->platform_data->gpio_ctrl)
 		return dev->platform_data->gpio_ctrl(sd, flag);
 
-	/* G-Min only supports imx134 */
-	if (dev->sensor_id && dev->sensor_id != IMX134_ID)
+	/* G-Min only supports imx134/imx175 */
+	if (dev->sensor_id && dev->sensor_id != IMX134_ID
+		&& dev->sensor_id != IMX175_ID)
 		return -EINVAL;
 
 	ret = dev->platform_data->gpio0_ctrl(sd, flag);
 
-	/* From original platform_imx134.c:
+	/* From original platform_imx134/175.c:
 	 *
-	 * imx134 core silicon initializing time - t1+t2+t3
+	 * imx134/175 core silicon initializing time - t1+t2+t3
 	 * 400us(t1) - Time to VDDL is supplied after REGEN high
 	 * 600us(t2) - imx134 core Waking up time
 	 * 459us(t3, 8825clocks) -Initializing time of silicon */
@@ -2274,6 +2276,15 @@ static int __imx_init_ctrl_handler(struct imx_device *dev)
 	return 0;
 }
 
+static const struct i2c_device_id imx_ids[] = {
+	{IMX_NAME_175, IMX175_ID},
+	{IMX_NAME_135, IMX135_ID},
+	{IMX_NAME_135_FUJI, IMX135_FUJI_ID},
+	{IMX_NAME_134, IMX134_ID},
+	{IMX_NAME_132, IMX132_ID},
+	{}
+};
+
 static int imx_probe(struct i2c_client *client,
 			 const struct i2c_device_id *id)
 {
@@ -2283,8 +2294,6 @@ static int imx_probe(struct i2c_client *client,
 	char *msr_file_name = NULL;
 	struct camera_sensor_platform_data *pdata = NULL;
 
-
-
 	/* allocate sensor device & init sub device */
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
@@ -2385,18 +2394,10 @@ out_free:
 	return ret;
 }
 
-static const struct i2c_device_id imx_ids[] = {
-	{IMX_NAME_175, IMX175_ID},
-	{IMX_NAME_135, IMX135_ID},
-	{IMX_NAME_135_FUJI, IMX135_FUJI_ID},
-	{IMX_NAME_134, IMX134_ID},
-	{IMX_NAME_132, IMX132_ID},
-	{}
-};
-
 MODULE_DEVICE_TABLE(i2c, imx_ids);
 
 static struct acpi_device_id imx_acpi_match[] = {
+	{ "INTCF1A" },
 	{ "INTCF1B" },
 	{},
 };
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/lm3554.c b/drivers/external_drivers/camera/drivers/media/i2c/lm3554.c
index f06d064..17b15b4 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/lm3554.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/lm3554.c
@@ -28,6 +28,9 @@
 #include <media/lm3554.h>
 #include <media/v4l2-ctrls.h>
 #include <media/v4l2-device.h>
+#include <linux/acpi.h>
+#include <linux/gpio/consumer.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #include <linux/atomisp.h>
 
@@ -799,6 +802,36 @@ static int lm3554_gpio_uninit(struct i2c_client *client)
 	return 0;
 }
 
+void *lm3554_platform_data_func(struct i2c_client *client)
+{
+	static struct lm3554_platform_data platform_data;
+
+	if (ACPI_COMPANION(&client->dev)) {
+		platform_data.gpio_reset  =
+			desc_to_gpio(gpiod_get_index(&(client->dev), "lm3554_gpio2", 2));
+		platform_data.gpio_strobe =
+			desc_to_gpio(gpiod_get_index(&(client->dev), "lm3554_gpio0", 0));
+		platform_data.gpio_torch  =
+			desc_to_gpio(gpiod_get_index(&(client->dev), "lm3554_gpio1", 1));
+	}
+
+	dev_info(&client->dev, "camera pdata: lm3554: reset: %d strobe %d torch %d\n",
+		platform_data.gpio_reset, platform_data.gpio_strobe,
+		platform_data.gpio_torch);
+
+	/* Set to TX2 mode, then ENVM/TX2 pin is a power amplifier sync input:
+	 * ENVM/TX pin asserted, flash forced into torch;
+	 * ENVM/TX pin desserted, flash set back;
+	 */
+	platform_data.envm_tx2 = 1;
+	platform_data.tx2_polarity = 0;
+
+	/* set peak current limit to be 1000mA */
+	platform_data.current_limit = 0;
+
+	return &platform_data;
+}
+
 static int lm3554_probe(struct i2c_client *client,
 				  const struct i2c_device_id *id)
 {
@@ -818,6 +851,9 @@ static int lm3554_probe(struct i2c_client *client,
 
 	flash->pdata = client->dev.platform_data;
 
+	if (!flash->pdata || ACPI_COMPANION(&client->dev))
+		flash->pdata = lm3554_platform_data_func(client);
+
 	v4l2_i2c_subdev_init(&flash->sd, client, &lm3554_ops);
 	flash->sd.internal_ops = &lm3554_internal_ops;
 	flash->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
@@ -843,6 +879,9 @@ static int lm3554_probe(struct i2c_client *client,
 		goto fail2;
 	}
 
+	if (ACPI_HANDLE(&client->dev))
+		err = atomisp_register_i2c_module(&flash->sd, NULL, LED_FLASH);
+
 	return 0;
 fail2:
 	media_entity_cleanup(&flash->sd.entity);
@@ -888,11 +927,17 @@ static const struct dev_pm_ops lm3554_pm_ops = {
 	.resume = lm3554_resume,
 };
 
+static struct acpi_device_id lm3554_acpi_match[] = {
+	{ "INTCF1C" },
+	{},
+};
+
 static struct i2c_driver lm3554_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = LM3554_NAME,
 		.pm   = &lm3554_pm_ops,
+		.acpi_match_table = ACPI_PTR(lm3554_acpi_match),
 	},
 	.probe = lm3554_probe,
 	.remove = lm3554_remove,
-- 
1.9.3

