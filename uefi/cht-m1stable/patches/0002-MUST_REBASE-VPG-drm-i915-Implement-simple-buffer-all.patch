From e75dfb69732b98a8bec80dacf911c0013e4a0836 Mon Sep 17 00:00:00 2001
Message-Id: <e75dfb69732b98a8bec80dacf911c0013e4a0836.1424979244.git.feitong.yi@intel.com>
In-Reply-To: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
References: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
From: Gajanan Bhat <gajanan.bhat@intel.com>
Date: Tue, 17 Feb 2015 17:32:56 +0530
Subject: [PATCH 02/28] MUST_REBASE [VPG]: drm/i915: Implement simple buffer
 alloc

ADF expects adf_simple_buffer_alloc to create memory for framebuffer.
Implement this function to call GEM create in i915 and export it as dma_buf.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5535
Change-Id: I9adcc7399f030268ece9132419dc1d8fa480436c
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
---
 drivers/gpu/drm/i915/i915_adf_wrapper.c |   46 +++++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_adf_wrapper.c b/drivers/gpu/drm/i915/i915_adf_wrapper.c
index 2c6a233..00e4868 100644
--- a/drivers/gpu/drm/i915/i915_adf_wrapper.c
+++ b/drivers/gpu/drm/i915/i915_adf_wrapper.c
@@ -223,6 +223,52 @@ unsigned short *intel_get_vbt_pps_delays(void)
 	return (unsigned short *)&i915_adf_dev->vbt.edp_pps;
 }
 EXPORT_SYMBOL(intel_get_vbt_pps_delays);
+
+int i915_adf_simple_buffer_alloc(u16 w, u16 h, u8 bpp, struct dma_buf **dma_buf,
+				u32 *offset, u32 *pitch)
+{
+	struct drm_i915_gem_object *obj;
+	struct drm_i915_private *dev_priv;
+	struct drm_device *dev;
+	int size, ret = 0;
+
+	if (!i915_adf_dev) {
+		ret = -1;
+		goto out;
+	}
+
+	dev_priv = i915_adf_dev;
+	dev = dev_priv->dev;
+
+	/* we don't do packed 24bpp */
+	if (bpp == 24)
+		bpp = 32;
+
+	*pitch = ALIGN(w * DIV_ROUND_UP(bpp, 8), 64);
+
+	size = *pitch * h;
+	size = ALIGN(size, PAGE_SIZE);
+
+	obj = i915_gem_alloc_object(dev, size);
+	if (!obj) {
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	ret = intel_pin_and_fence_fb_obj(dev, obj, NULL);
+	if (ret)
+		goto out_unref;
+
+	*dma_buf = i915_gem_prime_export(dev, &obj->base, O_RDWR);
+
+	return ret;
+
+out_unref:
+	drm_gem_object_unreference(&obj->base);
+out:
+	return ret;
+}
+EXPORT_SYMBOL(i915_adf_simple_buffer_alloc);
 #else
 int intel_adf_context_on_event(void) { return 0; }
 
-- 
1.7.9.5

