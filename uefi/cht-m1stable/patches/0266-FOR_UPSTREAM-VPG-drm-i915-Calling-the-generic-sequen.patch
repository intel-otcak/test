From 4b32316121c7947b4a617b2da8847d05b68747e8 Mon Sep 17 00:00:00 2001
Message-Id: <4b32316121c7947b4a617b2da8847d05b68747e8.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Deepak M <m.deepak@intel.com>
Date: Fri, 19 Sep 2014 08:23:12 +0530
Subject: [PATCH 266/312] FOR_UPSTREAM [VPG]: drm/i915: Calling the generic
 sequences

Instead of using the GPIO set function, the sequence for the
respective are added in the VBT and are
executing the same in the required senarios.

Issue: IRDA-821
Change-Id: Ic9165631532d5bd59400ac6df928b9491200cfbe
Signed-off-by: Deepak M <m.deepak@intel.com>
Signed-off-by: Rafael Barbalho <rafael.barbalho@intel.com>
---
 drivers/gpu/drm/i915/intel_dsi.c           |  122 ++++++++++++++++++++++++++--
 drivers/gpu/drm/i915/intel_dsi.h           |    8 +-
 drivers/gpu/drm/i915/intel_dsi_panel_vbt.c |   11 +++
 drivers/gpu/drm/i915/intel_panel.c         |   55 +++++++------
 4 files changed, 164 insertions(+), 32 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index 027cd6a..75a36bc 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -35,7 +35,7 @@
 #include <linux/mfd/intel_soc_pmic.h>
 
 /* the sub-encoders aka panel drivers */
-static const struct intel_dsi_device intel_dsi_devices[] = {
+static struct intel_dsi_device intel_dsi_devices[] = {
 	{
 		.panel_id = MIPI_DSI_GENERIC_PANEL_ID,
 		.name = "vbt-generic-dsi-vid-mode-display",
@@ -57,7 +57,7 @@ static void band_gap_reset(struct drm_i915_private *dev_priv)
 	mutex_unlock(&dev_priv->dpio_lock);
 }
 
-static struct intel_dsi *intel_attached_dsi(struct drm_connector *connector)
+struct intel_dsi *intel_attached_dsi(struct drm_connector *connector)
 {
 	return container_of(intel_attached_encoder(connector),
 			    struct intel_dsi, base);
@@ -162,8 +162,32 @@ static void intel_dsi_enable(struct intel_encoder *encoder)
 	if (dev_priv->display.enable_backlight)
 		dev_priv->display.enable_backlight(intel_connector);
 
-	if (intel_dsi->dev.dev_ops->enable_backlight)
-		intel_dsi->dev.dev_ops->enable_backlight(&intel_dsi->dev);
+}
+
+static void intel_dsi_soc_power_on(struct intel_dsi_device *dsi)
+{
+	struct intel_dsi *intel_dsi = container_of(dsi, struct intel_dsi, dev);
+	struct drm_device *dev = intel_dsi->base.base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	/*  cabc disable */
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_VDDEN_GPIONC_9_PCONF0, 0x2000CC00);
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_VDDEN_GPIONC_9_PAD, 0x00000004);
+
+	/* panel enable */
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTCTL_GPIONC_11_PCONF0, 0x2000CC00);
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTCTL_GPIONC_11_PAD, 0x00000005);
+	udelay(500);
+
+}
+
+static void intel_dsi_pmic_power_on(struct intel_dsi_device *dsi)
+{
+	intel_soc_pmic_writeb(PMIC_PANEL_EN, 0x01);
 }
 
 static void intel_dsi_pre_enable(struct intel_encoder *encoder)
@@ -176,7 +200,9 @@ static void intel_dsi_pre_enable(struct intel_encoder *encoder)
 	DRM_DEBUG_KMS("\n");
 
 	/* Panel Enable */
-	intel_soc_pmic_writeb(PMIC_PANEL_EN, 0x01);
+	if (intel_dsi->dev.dev_ops->power_on)
+		intel_dsi->dev.dev_ops->power_on(&intel_dsi->dev);
+
 	msleep(intel_dsi->panel_on_delay);
 
 	tmp = I915_READ(DSPCLK_GATE_D);
@@ -308,6 +334,24 @@ static void intel_dsi_clear_device_ready(struct intel_encoder *encoder)
 	vlv_disable_dsi_pll(encoder);
 }
 
+static void intel_dsi_soc_power_off(struct intel_dsi_device *dsi)
+{
+	struct intel_dsi *intel_dsi = container_of(dsi, struct intel_dsi, dev);
+	struct drm_device *dev = intel_dsi->base.base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTCTL_GPIONC_11_PCONF0, 0x2000CC00);
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTCTL_GPIONC_11_PAD, 0x00000004);
+	udelay(500);
+}
+
+static void intel_dsi_pmic_power_off(struct intel_dsi_device *dsi)
+{
+	intel_soc_pmic_writeb(PMIC_PANEL_EN, 0x00);
+}
+
 static void intel_dsi_post_disable(struct intel_encoder *encoder)
 {
 	struct drm_i915_private *dev_priv = encoder->base.dev->dev_private;
@@ -328,7 +372,8 @@ static void intel_dsi_post_disable(struct intel_encoder *encoder)
 		intel_dsi->dev.dev_ops->disable_panel_power(&intel_dsi->dev);
 
 	/* Disable Panel */
-	intel_soc_pmic_writeb(PMIC_PANEL_EN, 0x00);
+	if (intel_dsi->dev.dev_ops->power_off)
+		intel_dsi->dev.dev_ops->power_off(&intel_dsi->dev);
 
 	msleep(intel_dsi->panel_off_delay);
 	msleep(intel_dsi->panel_pwr_cycle_delay);
@@ -714,6 +759,48 @@ static const struct drm_connector_funcs intel_dsi_connector_funcs = {
 	.fill_modes = drm_helper_probe_single_connector_modes,
 };
 
+void intel_dsi_pmic_backlight_on(struct intel_dsi_device *dsi)
+{
+	intel_soc_pmic_writeb(PMIC_BKL_EN, 0xFF);
+	intel_soc_pmic_writeb(PMIC_PWM_EN, 0x01);
+
+	generic_enable_bklt(dsi);
+}
+
+void intel_dsi_soc_backlight_on(struct intel_dsi_device *dsi)
+{
+	struct intel_dsi *intel_dsi = container_of(dsi, struct intel_dsi, dev);
+	struct drm_device *dev = intel_dsi->base.base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTEN_GPIONC_10_PCONF0, 0x2000CC00);
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTEN_GPIONC_10_PAD, 0x00000005);
+	udelay(500);
+}
+
+void intel_dsi_pmic_backlight_off(struct intel_dsi_device *dsi)
+{
+	generic_disable_bklt(dsi);
+
+	intel_soc_pmic_writeb(PMIC_PWM_EN, 0x00);
+	intel_soc_pmic_writeb(PMIC_BKL_EN, 0x7F);
+}
+
+void intel_dsi_soc_backlight_off(struct intel_dsi_device *dsi)
+{
+	struct intel_dsi *intel_dsi = container_of(dsi, struct intel_dsi, dev);
+	struct drm_device *dev = intel_dsi->base.base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTEN_GPIONC_10_PCONF0, 0x2000CC00);
+	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
+			PANEL1_BKLTEN_GPIONC_10_PAD, 0x00000004);
+	udelay(500);
+}
+
 bool intel_dsi_init(struct drm_device *dev)
 {
 	struct intel_dsi *intel_dsi;
@@ -807,6 +894,29 @@ bool intel_dsi_init(struct drm_device *dev)
 		goto err;
 	}
 
+	if (dev_priv->vbt.dsi.seq_version < 3) {
+		if (dev_priv->vbt.dsi.config->pmic_soc_blc) {
+			intel_dsi->dev.dev_ops->power_on =
+						intel_dsi_soc_power_on;
+			intel_dsi->dev.dev_ops->power_off =
+						intel_dsi_soc_power_off;
+			intel_dsi->dev.dev_ops->enable_backlight =
+						intel_dsi_soc_backlight_on;
+			intel_dsi->dev.dev_ops->disable_backlight =
+						intel_dsi_soc_backlight_off;
+
+		} else {
+			intel_dsi->dev.dev_ops->power_on =
+						intel_dsi_pmic_power_on;
+			intel_dsi->dev.dev_ops->power_off =
+						intel_dsi_pmic_power_off;
+			intel_dsi->dev.dev_ops->enable_backlight =
+						intel_dsi_pmic_backlight_on;
+			intel_dsi->dev.dev_ops->disable_backlight =
+						intel_dsi_pmic_backlight_off;
+		}
+	}
+
 	fixed_mode->type |= DRM_MODE_TYPE_PREFERRED;
 	intel_panel_init(&intel_connector->panel, fixed_mode, NULL);
 
diff --git a/drivers/gpu/drm/i915/intel_dsi.h b/drivers/gpu/drm/i915/intel_dsi.h
index 4e9f218..015b284 100644
--- a/drivers/gpu/drm/i915/intel_dsi.h
+++ b/drivers/gpu/drm/i915/intel_dsi.h
@@ -388,7 +388,7 @@
 struct intel_dsi_device {
 	unsigned int panel_id;
 	const char *name;
-	const struct intel_dsi_dev_ops *dev_ops;
+	struct intel_dsi_dev_ops *dev_ops;
 	void *dev_priv;
 };
 
@@ -412,6 +412,8 @@ struct intel_dsi_dev_ops {
 
 	void (*enable_backlight)(struct intel_dsi_device *dsi);
 
+	void (*disable_backlight)(struct intel_dsi_device *dsi);
+
 	int (*mode_valid)(struct intel_dsi_device *dsi,
 			  struct drm_display_mode *mode);
 
@@ -497,5 +499,9 @@ extern void vlv_enable_dsi_pll(struct intel_encoder *encoder);
 extern void vlv_disable_dsi_pll(struct intel_encoder *encoder);
 
 extern struct intel_dsi_dev_ops vbt_generic_dsi_display_ops;
+extern struct intel_dsi *intel_attached_dsi(struct drm_connector *connector);
+
 
+void generic_enable_bklt(struct intel_dsi_device *dsi);
+void generic_disable_bklt(struct intel_dsi_device *dsi);
 #endif /* _INTEL_DSI_H */
diff --git a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
index ac7c2c8..852fe35 100644
--- a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
+++ b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
@@ -859,6 +859,16 @@ void generic_enable_bklt(struct intel_dsi_device *dsi)
 	generic_exec_sequence(intel_dsi, sequence);
 }
 
+void generic_disable_bklt(struct intel_dsi_device *dsi)
+{
+	struct intel_dsi *intel_dsi = container_of(dsi, struct intel_dsi, dev);
+	struct drm_device *dev = intel_dsi->base.base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	char *sequence = dev_priv->vbt.dsi.sequence[MIPI_SEQ_BACKLIGHT_OFF];
+	generic_exec_sequence(intel_dsi, sequence);
+}
+
 static enum drm_connector_status generic_detect(struct intel_dsi_device *dsi)
 {
 	return connector_status_connected;
@@ -913,6 +923,7 @@ struct intel_dsi_dev_ops vbt_generic_dsi_display_ops = {
 	.enable = generic_enable,
 	.disable = generic_disable,
 	.enable_backlight = generic_enable_bklt,
+	.disable_backlight = generic_disable_bklt,
 	.detect = generic_detect,
 	.get_hw_state = generic_get_hw_state,
 	.get_modes = generic_get_modes,
diff --git a/drivers/gpu/drm/i915/intel_panel.c b/drivers/gpu/drm/i915/intel_panel.c
index de84bb5..b640c46 100644
--- a/drivers/gpu/drm/i915/intel_panel.c
+++ b/drivers/gpu/drm/i915/intel_panel.c
@@ -691,20 +691,24 @@ static void vlv_disable_mipi_backlight(struct intel_connector *connector)
 {
 	struct drm_device *dev = connector->base.dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct intel_dsi *intel_dsi = NULL;
+	struct drm_crtc *crtc = NULL;
+	struct intel_encoder *encoder = NULL;
+
+	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
+		for_each_encoder_on_crtc(dev, crtc, encoder) {
+			if (encoder->type == INTEL_OUTPUT_DSI)
+				intel_dsi = enc_to_intel_dsi(&encoder->base);
+		}
+	}
 
 	intel_panel_actually_set_backlight(connector, 0);
 
+	if (intel_dsi->dev.dev_ops->disable_backlight)
+		intel_dsi->dev.dev_ops->disable_backlight(&intel_dsi->dev);
+
 	if (dev_priv->vbt.dsi.config->pmic_soc_blc) {
-		/* disable the backlight enable signal */
-		vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
-				PANEL1_BKLTEN_GPIONC_10_PCONF0, 0x2000CC00);
-		vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
-				PANEL1_BKLTEN_GPIONC_10_PAD, 0x00000004);
-		udelay(500);
 		lpio_bl_write_bits(0, LPIO_PWM_CTRL, 0x00, 0x80000000);
-	} else {
-		intel_soc_pmic_writeb(PMIC_PWM_EN, 0x00);
-		intel_soc_pmic_writeb(PMIC_BKL_EN, 0x7F);
 	}
 }
 
@@ -811,10 +815,11 @@ static uint32_t compute_pwm_base(uint16_t freq)
 	return base_unit;
 }
 
-static void lpio_enable_backlight(struct drm_i915_private *dev_priv)
+static void lpio_enable_backlight(struct drm_device *dev)
 {
 	uint32_t val;
 	uint32_t pwm_base;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 
 	/* GPIOC_94 config to PWM0 function */
 	val = vlv_gps_core_read(dev_priv, GP_CAMERASB07_GPIONC_22_PCONF0);
@@ -832,13 +837,6 @@ static void lpio_enable_backlight(struct drm_i915_private *dev_priv)
 	lpio_bl_write_bits(0, LPIO_PWM_CTRL, 0x80000000,
 			0x80000000);
 	lpio_bl_update(0, LPIO_PWM_CTRL);
-
-	/* Backlight enable */
-	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
-				PANEL1_BKLTEN_GPIONC_10_PCONF0, 0x2000CC00);
-	vlv_gpio_write(dev_priv, IOSF_PORT_GPIO_NC,
-				PANEL1_BKLTEN_GPIONC_10_PAD, 0x00000005);
-	udelay(500);
 }
 
 static void pch_enable_backlight(struct intel_connector *connector)
@@ -991,16 +989,23 @@ static void vlv_enable_mipi_backlight(struct intel_connector *connector)
 
 	struct drm_device *dev = connector->base.dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	/* Adding the check whether we are using the SOC PWM or
-	 * PMIC PWM
-	 */
-	if (dev_priv->vbt.dsi.config->pmic_soc_blc) {
-		lpio_enable_backlight(dev_priv);
-	} else {
-		intel_soc_pmic_writeb(PMIC_BKL_EN, 0xFF);
-		intel_soc_pmic_writeb(PMIC_PWM_EN, 0x01);
+	struct intel_dsi *intel_dsi = NULL;
+	struct drm_crtc *crtc = NULL;
+	struct intel_encoder *encoder = NULL;
+
+	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
+		for_each_encoder_on_crtc(dev, crtc, encoder) {
+			if (encoder->type == INTEL_OUTPUT_DSI)
+				intel_dsi = enc_to_intel_dsi(&encoder->base);
+		}
 	}
 
+	if (dev_priv->vbt.dsi.config->pmic_soc_blc)
+		lpio_enable_backlight(dev);
+
+	if (intel_dsi->dev.dev_ops->enable_backlight)
+		intel_dsi->dev.dev_ops->enable_backlight(&intel_dsi->dev);
+
 	intel_panel_actually_set_backlight(connector, panel->backlight.level);
 }
 
-- 
1.7.9.5

