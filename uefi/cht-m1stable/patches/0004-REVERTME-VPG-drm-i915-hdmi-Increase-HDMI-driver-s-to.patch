From 45e0ac036afed7ecf0fbbedec1bc91df7510d794 Mon Sep 17 00:00:00 2001
Message-Id: <45e0ac036afed7ecf0fbbedec1bc91df7510d794.1417780177.git.chang-joon.lee@intel.com>
In-Reply-To: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
References: <e293659a31a2970805251d9fed030ac809a9a6d0.1417780177.git.chang-joon.lee@intel.com>
From: Shashank Sharma <shashank.sharma@intel.com>
Date: Mon, 14 Apr 2014 14:36:04 +0530
Subject: [PATCH 04/30] REVERTME [VPG]: drm/i915/hdmi: Increase HDMI driver's
 tolerance for Live status

This patch does following changes:
1. Save hot plug status in top half, to be re-used in bottom halves
   of hot pluggable displays. Some of the monitor's can't set live status
   reliably, which confuses bottom halves while EDID read scenario.
2. Use this saved status for EDID reading decision making. Try to read
   the EDID if any of the status (current or saved) shows up.
3. Wait for some time (30ms max) while checking live status of HDMI,
   allow live status to settle down.
4. Re-try reading EDID over DDC line 3 times (Again 30ms max).

Revertme since New designed patches are waiting to be upstreamed.

Change-Id: If9d002e95b689adc73294c6c998adf0cf39d36a5
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-3422
Signed-off-by: Shashank Sharma <shashank.sharma@intel.com>
Signed-off-by: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h   |    1 +
 drivers/gpu/drm/i915/i915_irq.c   |   10 ++++++++++
 drivers/gpu/drm/i915/intel_drv.h  |    3 +++
 drivers/gpu/drm/i915/intel_hdmi.c |   38 ++++++++++++++++++++++++++++++++++---
 4 files changed, 49 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index b3821c8..20e820b 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1574,6 +1574,7 @@ struct drm_i915_private {
 	} hpd_stats[HPD_NUM_PINS];
 	u32 hpd_event_bits;
 	struct timer_list hotplug_reenable_timer;
+	u32 hotplug_status;
 
 	struct i915_fbc fbc;
 	struct i915_drrs drrs;
diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index 65e489d..f008875 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -1194,6 +1194,9 @@ static void i915_hotplug_work_func(struct work_struct *work)
 				changed = true;
 		}
 	}
+
+	/* Encoder hotplug fn is supposed to use this, now clear it */
+	dev_priv->hotplug_status = 0;
 	mutex_unlock(&mode_config->mutex);
 
 	if (changed)
@@ -2157,6 +2160,13 @@ static void i9xx_hpd_irq_handler(struct drm_device *dev)
 
 			/* Ignore short pulse interrupts */
 			if (!(hotplug_trigger & HPD_SHORT_PULSE)) {
+
+				/*
+				 * Few display's cant set the status for long
+				 * time. Lets save this status for future
+				 * references like in bottom halves
+				 */
+				dev_priv->hotplug_status = hotplug_status;
 				intel_hpd_irq_handler(dev, hotplug_trigger,
 							hpd_status_i915);
 			}
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 68e0403..450abbf 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -576,6 +576,9 @@ struct cxsr_latency {
 #define   HDMIB_HOTPLUG_LIVE_STATUS             (1 << 29)
 #define   HDMIC_HOTPLUG_LIVE_STATUS             (1 << 28)
 #define   HDMID_HOTPLUG_LIVE_STATUS             (1 << 27)
+#define   HDMI_LIVE_STATUS_BASE					30
+#define   HDMI_LIVE_STATUS_DELAY_STEP			10
+#define   HDMI_EDID_RETRY_COUNT					3
 
 struct intel_hdmi {
 	u32 hdmi_reg;
diff --git a/drivers/gpu/drm/i915/intel_hdmi.c b/drivers/gpu/drm/i915/intel_hdmi.c
index 540634f..39f967f 100644
--- a/drivers/gpu/drm/i915/intel_hdmi.c
+++ b/drivers/gpu/drm/i915/intel_hdmi.c
@@ -1059,21 +1059,42 @@ void intel_hdmi_send_uevent(struct drm_device *dev, char *uevent)
 struct edid *intel_hdmi_get_edid(struct drm_connector *connector, bool force)
 {
 	bool current_state = false;
+	bool saved_state = false;
 	struct edid *new_edid = NULL;
 	struct i2c_adapter *adapter = NULL;
 	struct drm_device *dev = connector->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_hdmi *intel_hdmi = intel_attached_hdmi(connector);
+	u32 hotplug_status = dev_priv->hotplug_status;
+	enum port hdmi_port = hdmi_to_dig_port(intel_hdmi)->port;
+	unsigned int retry = HDMI_EDID_RETRY_COUNT;
 
 	if (!intel_hdmi) {
 		DRM_ERROR("Invalid input to get hdmi\n");
 		return NULL;
 	}
 
-	current_state = intel_hdmi_live_status(connector);
+	/* Get the saved status from top half */
+	saved_state = hotplug_status &
+		(1 << (HDMI_LIVE_STATUS_BASE - hdmi_port));
 
-	/* Read EDID if live status is up */
-	if (current_state || force) {
+	/*
+	 * A few monitors are slow to respond on EDID and
+	 * live status, So read live status multiple times
+	 * within a max delay of 30ms
+	 */
+	do {
+		mdelay(HDMI_LIVE_STATUS_DELAY_STEP);
+		current_state = intel_hdmi_live_status(connector);
+		if (current_state)
+			break;
+	} while (retry--);
+
+	if (current_state != saved_state)
+		DRM_DEBUG_DRIVER("Saved HDMI status != current status\n");
+
+	/* Read EDID if live status or saved status is up, or we are forced */
+	if (current_state || saved_state || force) {
 
 		adapter = intel_gmbus_get_adapter(dev_priv,
 					intel_hdmi->ddc_bus);
@@ -1082,8 +1103,19 @@ struct edid *intel_hdmi_get_edid(struct drm_connector *connector, bool force)
 			return NULL;
 		}
 
+		/*
+		 * A few monitors issue EDID after some delay, so give them
+		 * a few chances but no longer than 30ms
+		 */
+		retry = 3;
+READ_EDID:
 		new_edid = drm_get_edid(connector, adapter);
 		if (!new_edid) {
+			if (retry--) {
+				mdelay(HDMI_LIVE_STATUS_DELAY_STEP);
+				goto READ_EDID;
+			}
+
 			DRM_ERROR("Get_hdmi cant read edid\n");
 			return NULL;
 		}
-- 
1.7.9.5

