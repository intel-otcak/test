From ead549cee8e826b27dd22598dd6c2b80bb395d68 Mon Sep 17 00:00:00 2001
From: "R, Kannappan" <r.kannappan@intel.com>
Date: Wed, 10 Sep 2014 20:14:00 +0530
Subject: [PATCH 1/2] max17042: enhance max17042 driver to support charging
 framework

added charging framework and ACPI support for max17042 driver
Added support
1. to report battery status, health, model, serial number,
   current charge vaule(charge_now) in sysfs
2. detect the over voltage/dead condition with vmin/vmax data
   from oem0 table
3. detect battery overheat conditons.
4. capacity report 0% when ocv < vmin.

v1 - Add invalid battery handling to maxim driver: (AKP-582)
Description: For an invalid battery the health should be reported
as Unknown and charging should not be allowed. This patch will fix
the battery health issue and adds invalid battery handling.

v2 - Fix SOC interrupt issue during discharge. (AKP-631)
During SOC (state of charge) threshold setting the current soc's
fraction value is ignored instead of rounded of to nearest decimal
value. This is causing missing some of 1% change interrupts. This
patch will fix this issue by rounding-off the current
soc before setting the soc threshold.

Issue: GMINL-1366
Change-Id: Iac43f2dee5e4951094bbd4b0eb332a8fe0b9abfd
Signed-off-by: R, Kannappan <r.kannappan@intel.com>
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
---
 drivers/power/max17042_battery.c       |  338 +++++++++++++++++++++++++++++---
 include/linux/power/max17042_battery.h |   15 +-
 2 files changed, 324 insertions(+), 29 deletions(-)

diff --git a/drivers/power/max17042_battery.c b/drivers/power/max17042_battery.c
index 66da691c41cf..aed43864e42d 100644
--- a/drivers/power/max17042_battery.c
+++ b/drivers/power/max17042_battery.c
@@ -34,6 +34,10 @@
 #include <linux/power/max17042_battery.h>
 #include <linux/of.h>
 #include <linux/regmap.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/acpi.h>
+#include <linux/power/battery_id.h>
 
 /* Status register bits */
 #define STATUS_POR_BIT         (1 << 1)
@@ -63,6 +67,16 @@
 #define dP_ACC_100	0x1900
 #define dP_ACC_200	0x3200
 
+#define SOC_ROUNDOFF_MASK      0x80
+
+#define MAX17042_TEMP_REG_SHIFT	8
+#define MAX17042_VOLTAGE_CONV_FCTR	625
+#define MAX17042_CHRG_CONV_FCTR	500
+#define MAX17042_CURR_CONV_FCTR	1562500
+#define MAX17042_VMAX_OFFSET	50
+#define BATTID_UNKNOWN		"UNKNOWNB"
+#define BATTID_LENGTH		8
+
 #define MAX17042_IC_VERSION	0x0092
 #define MAX17047_IC_VERSION	0x00AC	/* same for max17050 */
 
@@ -74,6 +88,8 @@ struct max17042_chip {
 	struct max17042_platform_data *pdata;
 	struct work_struct work;
 	int    init_complete;
+	int    status;
+	int    health;
 };
 
 static enum power_supply_property max17042_battery_props[] = {
@@ -88,10 +104,81 @@ static enum power_supply_property max17042_battery_props[] = {
 	POWER_SUPPLY_PROP_CHARGE_FULL,
 	POWER_SUPPLY_PROP_CHARGE_COUNTER,
 	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_HEALTH,
+	POWER_SUPPLY_PROP_CHARGE_NOW,
+	POWER_SUPPLY_PROP_MODEL_NAME,
+	POWER_SUPPLY_PROP_SERIAL_NUMBER,
+	POWER_SUPPLY_PROP_TEMP_ALERT_MIN,
+	POWER_SUPPLY_PROP_TEMP_ALERT_MAX,
+	POWER_SUPPLY_PROP_TECHNOLOGY,
 	POWER_SUPPLY_PROP_CURRENT_NOW,
 	POWER_SUPPLY_PROP_CURRENT_AVG,
 };
 
+
+static int max17042_get_temperature(struct max17042_chip *chip, int *temp)
+{
+	int ret;
+	u32 data;
+	struct regmap *map = chip->regmap;
+
+	if (!temp)
+		return -EINVAL;
+
+	ret = regmap_read(map, MAX17042_TEMP, &data);
+	if (ret < 0)
+		return ret;
+
+	*temp = data;
+
+	/* The value is signed. */
+	if (*temp & 0x8000) {
+		*temp = (0x7fff & ~*temp) + 1;
+		*temp *= -1;
+	}
+	/* Units of LSB = 1 / 256 degree Celsius */
+	*temp >>= MAX17042_TEMP_REG_SHIFT;
+	/* The value is converted into deci-centigrade scale */
+	*temp *= 10;
+	return 0;
+}
+
+static int max17042_get_battery_health(struct max17042_chip *chip)
+{
+	int temp, ret;
+	u32 val;
+
+	/* Cannot judge health of an unknown battery */
+	if (!strncmp(chip->pdata->battid, BATTID_UNKNOWN, BATTID_LENGTH))
+		return POWER_SUPPLY_HEALTH_UNKNOWN;
+
+	ret = regmap_read(chip->regmap, MAX17042_AvgVCELL, &val);
+	if (ret < 0)
+		return POWER_SUPPLY_HEALTH_UNSPEC_FAILURE;
+	else {
+		/* bits [0-3] unused */
+		val *= MAX17042_VOLTAGE_CONV_FCTR / 8;
+		/* Convert to milli volts */
+		val /= 1000;
+		if (val < chip->pdata->vmin)
+			return POWER_SUPPLY_HEALTH_DEAD;
+
+		if (val > chip->pdata->vmax + MAX17042_VMAX_OFFSET)
+			return POWER_SUPPLY_HEALTH_OVERVOLTAGE;
+	}
+
+	ret = max17042_get_temperature(chip, &temp);
+
+	if (ret < 0)
+		return POWER_SUPPLY_HEALTH_UNSPEC_FAILURE;
+	else if (temp <= chip->pdata->temp_min ||
+		temp >= chip->pdata->temp_max)
+		return POWER_SUPPLY_HEALTH_OVERHEAT;
+
+	return POWER_SUPPLY_HEALTH_GOOD;
+}
+
 static int max17042_get_property(struct power_supply *psy,
 			    enum power_supply_property psp,
 			    union power_supply_propval *val)
@@ -100,12 +187,25 @@ static int max17042_get_property(struct power_supply *psy,
 				struct max17042_chip, battery);
 	struct regmap *map = chip->regmap;
 	int ret;
-	u32 data;
+	u32 data, ocv;
 
 	if (!chip->init_complete)
 		return -EAGAIN;
 
 	switch (psp) {
+	case POWER_SUPPLY_PROP_STATUS:
+		if (chip->status < 0)
+			return chip->status;
+		else
+			val->intval = chip->status;
+		break;
+	case POWER_SUPPLY_PROP_HEALTH:
+		chip->health = max17042_get_battery_health(chip);
+		if (chip->health < 0)
+			return chip->health;
+		else
+			val->intval = chip->health;
+		break;
 	case POWER_SUPPLY_PROP_PRESENT:
 		ret = regmap_read(map, MAX17042_STATUS, &data);
 		if (ret < 0)
@@ -147,57 +247,66 @@ static int max17042_get_property(struct power_supply *psy,
 		if (ret < 0)
 			return ret;
 
-		val->intval = data * 625 / 8;
+		/* bits[0-3] don't care */
+		val->intval = data * MAX17042_VOLTAGE_CONV_FCTR / 8;
 		break;
 	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
 		ret = regmap_read(map, MAX17042_AvgVCELL, &data);
 		if (ret < 0)
 			return ret;
 
-		val->intval = data * 625 / 8;
+		/* bits[0-3] don't care */
+		val->intval = data * MAX17042_VOLTAGE_CONV_FCTR / 8;
 		break;
 	case POWER_SUPPLY_PROP_VOLTAGE_OCV:
 		ret = regmap_read(map, MAX17042_OCVInternal, &data);
 		if (ret < 0)
 			return ret;
 
-		val->intval = data * 625 / 8;
+		/* bits[0-3] don't care */
+		val->intval = data * MAX17042_VOLTAGE_CONV_FCTR / 8;
 		break;
 	case POWER_SUPPLY_PROP_CAPACITY:
+		ret = regmap_read(map, MAX17042_OCVInternal, &data);
+		if (ret < 0)
+			return ret;
+		/* bits[0-3] don't care */
+		ocv = data * MAX17042_VOLTAGE_CONV_FCTR / 8;
+		if (ocv < chip->pdata->vmin) {
+			/* report 0% if voltage < vmin */
+			val->intval = 0;
+			break;
+		}
 		ret = regmap_read(map, MAX17042_RepSOC, &data);
 		if (ret < 0)
 			return ret;
 
 		val->intval = data >> 8;
+		/*
+		 * Check if MSB of lower byte is set
+		 * then round off the SOC to higher number
+		 */
+		if ((data & 0x80) && val->intval)
+			val->intval++;
 		break;
 	case POWER_SUPPLY_PROP_CHARGE_FULL:
 		ret = regmap_read(map, MAX17042_FullCAP, &data);
 		if (ret < 0)
 			return ret;
 
-		val->intval = data * 1000 / 2;
+		val->intval = data * MAX17042_CHRG_CONV_FCTR;
 		break;
 	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
 		ret = regmap_read(map, MAX17042_QH, &data);
 		if (ret < 0)
 			return ret;
 
-		val->intval = data * 1000 / 2;
+		val->intval = data * MAX17042_CHRG_CONV_FCTR;
 		break;
 	case POWER_SUPPLY_PROP_TEMP:
-		ret = regmap_read(map, MAX17042_TEMP, &data);
+		ret = max17042_get_temperature(chip, &val->intval);
 		if (ret < 0)
 			return ret;
-
-		val->intval = data;
-		/* The value is signed. */
-		if (val->intval & 0x8000) {
-			val->intval = (0x7fff & ~val->intval) + 1;
-			val->intval *= -1;
-		}
-		/* The value is converted into deci-centigrade scale */
-		/* Units of LSB = 1 / 256 degree Celsius */
-		val->intval = val->intval * 10 / 256;
 		break;
 	case POWER_SUPPLY_PROP_CURRENT_NOW:
 		if (chip->pdata->enable_current_sense) {
@@ -212,7 +321,8 @@ static int max17042_get_property(struct power_supply *psy,
 				val->intval++;
 				val->intval *= -1;
 			}
-			val->intval *= 1562500 / chip->pdata->r_sns;
+			val->intval *= MAX17042_CURR_CONV_FCTR /
+							chip->pdata->r_sns;
 		} else {
 			return -EINVAL;
 		}
@@ -230,17 +340,94 @@ static int max17042_get_property(struct power_supply *psy,
 				val->intval++;
 				val->intval *= -1;
 			}
-			val->intval *= 1562500 / chip->pdata->r_sns;
+			val->intval *= MAX17042_CURR_CONV_FCTR /
+							chip->pdata->r_sns;
 		} else {
 			return -EINVAL;
 		}
 		break;
+	case POWER_SUPPLY_PROP_CHARGE_NOW:
+		ret = regmap_read(map, MAX17042_RepCap, &data);
+		if (ret < 0)
+			return ret;
+		val->intval = data * MAX17042_CHRG_CONV_FCTR;
+		break;
+	case POWER_SUPPLY_PROP_MODEL_NAME:
+		if (!strncmp(chip->pdata->battid, BATTID_UNKNOWN,
+						BATTID_LENGTH))
+			val->strval = chip->pdata->battid;
+		else
+			val->strval = chip->pdata->model_name;
+		break;
+	case POWER_SUPPLY_PROP_SERIAL_NUMBER:
+		val->strval = chip->pdata->serial_num;
+		break;
+	case POWER_SUPPLY_PROP_TEMP_ALERT_MIN:
+		ret = regmap_read(map, MAX17042_TALRT_Th, &data);
+		if (ret < 0)
+			return ret;
+		/* LSB is Alert Minimum. In deci-centigrade */
+		val->intval = (data & 0xff) * 10;
+		break;
+	case POWER_SUPPLY_PROP_TEMP_ALERT_MAX:
+		ret = regmap_read(map, MAX17042_TALRT_Th, &data);
+		if (ret < 0)
+			return ret;
+		/* MSB is Alert Maximum. In deci-centigrade */
+		val->intval = (data >> 8) * 10;
+		break;
+	case POWER_SUPPLY_PROP_TECHNOLOGY:
+		val->intval = chip->pdata->technology;
+		break;
 	default:
 		return -EINVAL;
 	}
 	return 0;
 }
 
+static int max17042_set_property(struct power_supply *psy,
+			    enum power_supply_property psp,
+			    const union power_supply_propval *val)
+{
+	struct max17042_chip *chip = container_of(psy,
+					struct max17042_chip, battery);
+	struct regmap *map = chip->regmap;
+	int ret = 0;
+	u32 read_value;
+	int8_t temp;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_STATUS:
+		chip->status = val->intval;
+		break;
+	case POWER_SUPPLY_PROP_TEMP_ALERT_MIN:
+		regmap_read(map, MAX17042_TALRT_Th, &read_value);
+		/* Input in Deci-Centigrade, convert to centigrade */
+		temp = val->intval / 10;
+		/* force min < max */
+		if (temp >= (int8_t)(read_value >> 8))
+			temp = (int8_t)(read_value >> 8) - 1;
+		/* Write both MAX and MIN ALERT */
+		read_value = (read_value & 0xff00) + (uint8_t)temp;
+		regmap_write(map, MAX17042_TALRT_Th, read_value);
+		break;
+	case POWER_SUPPLY_PROP_TEMP_ALERT_MAX:
+		regmap_read(map, MAX17042_TALRT_Th, &read_value);
+		/* Input in Deci-Centigrade, convert to centigrade */
+		temp = val->intval / 10;
+		/* force max > min */
+		if (temp <= (int8_t)(read_value & 0xff))
+			temp = (int8_t)(read_value & 0xff) + 1;
+		/* Write both MAX and MIN ALERT */
+		read_value = (read_value & 0xff) + (temp << 8);
+		regmap_write(map, MAX17042_TALRT_Th, read_value);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+	return ret;
+}
+
 static int max17042_write_verify_reg(struct regmap *map, u8 reg, u32 value)
 {
 	int retries = 8;
@@ -478,7 +665,7 @@ static inline void max17042_override_por_values(struct max17042_chip *chip)
 	struct max17042_config_data *config = chip->pdata->config_data;
 
 	max17042_override_por(map, MAX17042_TGAIN, config->tgain);
-	max17042_override_por(map, MAx17042_TOFF, config->toff);
+	max17042_override_por(map, MAX17042_TOFF, config->toff);
 	max17042_override_por(map, MAX17042_CGAIN, config->cgain);
 	max17042_override_por(map, MAX17042_COFF, config->coff);
 
@@ -586,7 +773,10 @@ static void max17042_set_soc_threshold(struct max17042_chip *chip, u16 off)
 	 * get interrupt for every 'off' perc change in the soc
 	 */
 	regmap_read(map, MAX17042_RepSOC, &soc);
-	soc >>= 8;
+	if (soc & SOC_ROUNDOFF_MASK)
+		soc = (soc >> 8) + 1;
+	else
+		soc = soc >> 8;
 	soc_tr = (soc + off) << 8;
 	soc_tr |= (soc - off);
 	regmap_write(map, MAX17042_SALRT_Th, soc_tr);
@@ -595,15 +785,17 @@ static void max17042_set_soc_threshold(struct max17042_chip *chip, u16 off)
 static irqreturn_t max17042_thread_handler(int id, void *dev)
 {
 	struct max17042_chip *chip = dev;
-	u32 val;
+	u32 stat;
 
-	regmap_read(chip->regmap, MAX17042_STATUS, &val);
-	if ((val & STATUS_INTR_SOCMIN_BIT) ||
-		(val & STATUS_INTR_SOCMAX_BIT)) {
+	regmap_read(chip->regmap, MAX17042_STATUS, &stat);
+	if ((stat & STATUS_INTR_SOCMIN_BIT) ||
+		(stat & STATUS_INTR_SOCMAX_BIT)) {
 		dev_info(&chip->client->dev, "SOC threshold INTR\n");
 		max17042_set_soc_threshold(chip, 1);
 	}
 
+	chip->health = max17042_get_battery_health(chip);
+
 	power_supply_changed(&chip->battery);
 	return IRQ_HANDLED;
 }
@@ -654,10 +846,75 @@ max17042_get_pdata(struct device *dev)
 static struct max17042_platform_data *
 max17042_get_pdata(struct device *dev)
 {
-	return dev->platform_data;
+	struct max17042_platform_data *pdata;
+
+#ifdef CONFIG_POWER_SUPPLY_CHARGER
+	struct ps_batt_chg_prof batt_prof;
+	struct ps_pse_mod_prof *pse_prof;
+	int ret;
+#endif
+	if (!IS_ENABLED(CONFIG_ACPI))
+		return dev->platform_data;
+
+	pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
+	if (!pdata)
+		return NULL;
+
+#ifdef CONFIG_POWER_SUPPLY_CHARGER
+	ret = get_batt_prop(&batt_prof);
+	if (ret < 0) {
+		pdata->enable_current_sense = false;
+		snprintf(pdata->battid, (BATTID_LEN+1),
+			"%s", "UNKNOWNB");
+		pdata->technology = POWER_SUPPLY_TECHNOLOGY_UNKNOWN;
+	} else {
+		pdata->enable_current_sense = true;
+		pse_prof = (struct ps_pse_mod_prof *)batt_prof.batt_prof;
+		if (pse_prof) {
+			pdata->vmin = pse_prof->low_batt_mV;
+			pdata->vmax = pse_prof->voltage_max;
+			snprintf(pdata->battid, (BATTID_LEN+1),
+				"%s", pse_prof->batt_id);
+		}
+		pdata->technology = POWER_SUPPLY_TECHNOLOGY_LION;
+	}
+	snprintf(pdata->model_name, (MODEL_NAME_LEN + 1), "%s",
+				pdata->battid);
+	snprintf(pdata->serial_num, (SERIAL_NUM_LEN + 1), "%s",
+				pdata->battid + MODEL_NAME_LEN);
+	pdata->temp_min = 0;
+	pdata->temp_max = 600;
+#else
+	pdata->vmin = 3300; /* 3.3V */
+	pdata->vmax = 4350;
+	pdata->temp_min = 0;
+	pdata->temp_max = 600;
+#endif
+	return pdata;
 }
 #endif
 
+static int max17042_get_irq(struct i2c_client *client)
+{
+	struct gpio_desc *gpio_desc;
+	int irq;
+	struct device *dev = &client->dev;
+
+	if (client->irq > 0)
+		return client->irq;
+
+	gpio_desc = devm_gpiod_get_index(dev, "fg_alert", 0);
+
+	if (IS_ERR(gpio_desc))
+		return client->irq;
+
+	irq = gpiod_to_irq(gpio_desc);
+
+	gpiod_put(gpio_desc);
+
+	return irq;
+}
+
 static struct regmap_config max17042_regmap_config = {
 	.reg_bits = 8,
 	.val_bits = 16,
@@ -693,6 +950,9 @@ static int max17042_probe(struct i2c_client *client,
 		return -EINVAL;
 	}
 
+	if (IS_ENABLED(CONFIG_ACPI))
+		client->irq = max17042_get_irq(client);
+
 	i2c_set_clientdata(client, chip);
 
 	regmap_read(chip->regmap, MAX17042_DevName, &val);
@@ -710,6 +970,7 @@ static int max17042_probe(struct i2c_client *client,
 	chip->battery.name		= "max170xx_battery";
 	chip->battery.type		= POWER_SUPPLY_TYPE_BATTERY;
 	chip->battery.get_property	= max17042_get_property;
+	chip->battery.set_property	= max17042_set_property;
 	chip->battery.properties	= max17042_battery_props;
 	chip->battery.num_properties	= ARRAY_SIZE(max17042_battery_props);
 
@@ -733,6 +994,9 @@ static int max17042_probe(struct i2c_client *client,
 		regmap_write(chip->regmap, MAX17042_LearnCFG, 0x0007);
 	}
 
+	chip->health = POWER_SUPPLY_HEALTH_GOOD;
+	chip->status = POWER_SUPPLY_STATUS_DISCHARGING;
+
 	ret = power_supply_register(&client->dev, &chip->battery);
 	if (ret) {
 		dev_err(&client->dev, "failed: power supply register\n");
@@ -822,10 +1086,24 @@ static const struct of_device_id max17042_dt_match[] = {
 MODULE_DEVICE_TABLE(of, max17042_dt_match);
 #endif
 
+#ifdef CONFIG_ACPI
+static struct acpi_device_id max17042_acpi_match[] = {
+	{"MAX17042", 0},
+	{"MAX17047", 0},
+	{"MAX17050", 0},
+};
+MODULE_DEVICE_TABLE(acpi, max17042_acpi_match);
+#endif
+
 static const struct i2c_device_id max17042_id[] = {
 	{ "max17042", 0 },
-	{ "max17047", 1 },
-	{ "max17050", 2 },
+	{ "max17047", 0 },
+	{ "max17050", 0 },
+	{ "MAX17042", 0 },
+	{ "MAX17047", 0 },
+	{ "MAX17047:00", 0 },
+	{ "MAX17050", 0 },
+	{ "MAX17050:00", 0 },
 	{ }
 };
 MODULE_DEVICE_TABLE(i2c, max17042_id);
@@ -833,7 +1111,11 @@ MODULE_DEVICE_TABLE(i2c, max17042_id);
 static struct i2c_driver max17042_i2c_driver = {
 	.driver	= {
 		.name	= "max17042",
+#ifdef CONFIG_OF
 		.of_match_table = of_match_ptr(max17042_dt_match),
+#elif defined(CONFIG_ACPI)
+		.acpi_match_table = ACPI_PTR(max17042_acpi_match),
+#endif
 		.pm	= &max17042_pm_ops,
 	},
 	.probe		= max17042_probe,
diff --git a/include/linux/power/max17042_battery.h b/include/linux/power/max17042_battery.h
index 89dd84f47c6e..c6761d39f2d3 100644
--- a/include/linux/power/max17042_battery.h
+++ b/include/linux/power/max17042_battery.h
@@ -29,6 +29,10 @@
 
 #define MAX17042_CHARACTERIZATION_DATA_SIZE 48
 
+#define BATTID_LEN	8
+#define MODEL_NAME_LEN	2
+#define SERIAL_NUM_LEN	6
+
 enum max17042_register {
 	MAX17042_STATUS		= 0x00,
 	MAX17042_VALRT_Th	= 0x01,
@@ -75,7 +79,7 @@ enum max17042_register {
 	MAX17042_RelaxCFG	= 0x2A,
 	MAX17042_MiscCFG	= 0x2B,
 	MAX17042_TGAIN		= 0x2C,
-	MAx17042_TOFF		= 0x2D,
+	MAX17042_TOFF		= 0x2D,
 	MAX17042_CGAIN		= 0x2E,
 	MAX17042_COFF		= 0x2F,
 
@@ -208,6 +212,15 @@ struct max17042_platform_data {
 	 * the datasheet although it can be changed by board designers.
 	 */
 	unsigned int r_sns;
+
+	int         technology;
+	char        battid[BATTID_LEN + 1];
+	char        model_name[MODEL_NAME_LEN + 1];
+	char        serial_num[SERIAL_NUM_LEN + 1];
+	int         vmin;
+	int         vmax;
+	int         temp_min;
+	int         temp_max;
 };
 
 #endif /* __MAX17042_BATTERY_H_ */
-- 
1.7.9.5

