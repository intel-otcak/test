From 4ac4a5d6411878dda572520be11c3fb492ed00f9 Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Mon, 1 Feb 2016 19:16:34 +0530
Subject: [PATCH 14/24] [EM/USBC_PHY]: Add interface function start/stop BIST
 CM2 transmission

Added an interface function to start/stop the BIST Carrier Mode 2
data transmission. This can be invoked from the upper layer device
policy manager (dpm) for the same in case of BIST carrier mode 2.

Change-Id: I53990416f1d3becbddbad9dd7900b452681f0ff7
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-18342
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
Reviewed-on: https://android.intel.com:443/464815
---
 drivers/usb/typec/phy-fusb300.c | 37 +++++++++++++++++++++++++++++++++++++
 include/linux/usb_typec_phy.h   | 10 ++++++++++
 2 files changed, 47 insertions(+)

diff --git a/drivers/usb/typec/phy-fusb300.c b/drivers/usb/typec/phy-fusb300.c
index 35bc049..dc222a2 100644
--- a/drivers/usb/typec/phy-fusb300.c
+++ b/drivers/usb/typec/phy-fusb300.c
@@ -1177,6 +1177,42 @@ static int fusb300_enable_vconn(struct typec_phy *phy, bool en)
 	return ret;
 }
 
+static int fusb300_set_bist_cm2(struct typec_phy *phy, bool en)
+{
+	struct fusb300_chip *chip = dev_get_drvdata(phy->dev);
+	int ret;
+
+	mutex_lock(&chip->lock);
+	/* enable/disable BIST_MODE2 */
+	ret = regmap_update_bits(chip->map,
+		FUSB300_CONTROL1_REG, FUSB300_CONTROL1_BIST_MODE,
+		en ? FUSB300_CONTROL1_BIST_MODE : ~FUSB300_CONTROL1_BIST_MODE);
+	if (ret < 0) {
+		dev_err(phy->dev, "%s failed to update %d for bist mode2\n",
+				__func__, en);
+		goto error;
+	}
+
+	/* start/stop BIST_MODE2 transmission */
+	ret = regmap_update_bits(chip->map,
+		FUSB300_CONTROL0_REG, FUSB300_CONTROL0_TX_START,
+		en ? FUSB300_CONTROL0_TX_START : ~FUSB300_CONTROL0_TX_START);
+	if (ret < 0) {
+		dev_err(phy->dev, "%s failed to %s bist mode2\n",
+				__func__, en ? "start" : "stop");
+		goto error;
+	}
+	mutex_unlock(&chip->lock);
+
+	dev_dbg(phy->dev, "%s BIST Mode2 %s\n", __func__,
+			en ? "started" : "stopped");
+	return 0;
+
+error:
+	mutex_unlock(&chip->lock);
+	return ret;
+}
+
 static bool fusb300_is_vbus_on(struct typec_phy *phy)
 {
 	struct fusb300_chip *chip = dev_get_drvdata(phy->dev);
@@ -1862,6 +1898,7 @@ static int fusb300_probe(struct i2c_client *client,
 	chip->phy.ops.get_host_current = fusb300_get_host_current;
 	chip->phy.ops.is_vconn_enabled = fusb300_is_vconn_enabled;
 	chip->phy.ops.enable_vconn = fusb300_enable_vconn;
+	chip->phy.ops.set_bist_cm2 = fusb300_set_bist_cm2;
 	chip->phy.ops.switch_mode = fusb300_switch_mode;
 	chip->phy.ops.setup_cc = fusb300_setup_cc;
 	chip->phy.ops.enable_valid_pu = fusb300_enable_valid_pu;
diff --git a/include/linux/usb_typec_phy.h b/include/linux/usb_typec_phy.h
index 96ea9cb..f371f55 100644
--- a/include/linux/usb_typec_phy.h
+++ b/include/linux/usb_typec_phy.h
@@ -192,6 +192,7 @@ struct typec_ops {
 	int (*enable_valid_pu)(struct typec_phy *phy);
 	bool (*is_vconn_enabled)(struct typec_phy *phy);
 	int (*enable_vconn)(struct typec_phy *phy, bool en);
+	int (*set_bist_cm2)(struct typec_phy *phy, bool en);
 };
 
 
@@ -268,6 +269,15 @@ static inline int typec_set_host_current(struct typec_phy *phy,
 	return -ENOTSUPP;
 }
 
+static inline int typec_set_bist_cm2(struct typec_phy *phy,
+					bool en)
+{
+	if (phy && phy->ops.set_bist_cm2)
+		return phy->ops.set_bist_cm2(phy, en);
+
+	return -ENOTSUPP;
+}
+
 static inline bool typec_is_vconn_enabled(struct typec_phy *phy)
 {
 	if (phy && phy->ops.is_vconn_enabled)
-- 
1.9.1

