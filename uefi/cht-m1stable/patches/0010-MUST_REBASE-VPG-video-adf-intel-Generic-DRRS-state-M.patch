From 9328d48be5c9e122a1698126e58301e51d0eff74 Mon Sep 17 00:00:00 2001
Message-Id: <9328d48be5c9e122a1698126e58301e51d0eff74.1424979244.git.feitong.yi@intel.com>
In-Reply-To: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
References: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
From: Ramalingam C <ramalingam.c@intel.com>
Date: Mon, 2 Feb 2015 01:43:24 +0530
Subject: [PATCH 10/28] MUST_REBASE [VPG]: video/adf/intel: Generic DRRS state
 Machine

DRRS is a power saving feature, which will refresh the display
at the lowest supported refresh rate, based on the rate of change
of display content to be rendered.

This patch implements the Generic state machine for the Idleness DRRS.
Idleness DRRS is nothing but, when the content of the Display is not
changed for a certain duration, refresh rate will be set to the
minimum vrefresh supported by panel.

This will be extended for media playback DRRS. i.e based on the
display content's Frames Per Second, required lowest vrefresh to
support the FPS will be used to render the data. This involves
the Userspace and Kernel interaction.

Support for the encoders like DSI and eDP can be attached to this
through a callback function.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5610
Change-Id: I18287bc9218158876de8822bb60c8b02b8252f16
Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
---
 drivers/video/adf/intel/core/common/Makefile       |    1 +
 drivers/video/adf/intel/core/common/intel_drrs.c   |  307 ++++++++++++++++++++
 .../adf/intel/include/core/common/intel_drrs.h     |   29 ++
 .../video/adf/intel/include/core/intel_dc_config.h |   91 ++++++
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |    5 +
 5 files changed, 433 insertions(+)
 create mode 100644 drivers/video/adf/intel/core/common/intel_drrs.c
 create mode 100644 drivers/video/adf/intel/include/core/common/intel_drrs.h

diff --git a/drivers/video/adf/intel/core/common/Makefile b/drivers/video/adf/intel/core/common/Makefile
index 50e8036..9cea28d 100644
--- a/drivers/video/adf/intel/core/common/Makefile
+++ b/drivers/video/adf/intel/core/common/Makefile
@@ -5,6 +5,7 @@ obj-$(CONFIG_ADF_INTEL) += backlight_dev.o
 obj-$(CONFIG_ADF_INTEL) += intel_gen_backlight.o
 obj-y 			+= intel_adf_events.o
 obj-y			+= drm_modeinfo_ops.o
+obj-y 			+= intel_drrs.o
 
 obj-y			+= dsi/
 obj-y			+= hdmi/
diff --git a/drivers/video/adf/intel/core/common/intel_drrs.c b/drivers/video/adf/intel/core/common/intel_drrs.c
new file mode 100644
index 0000000..9db44a6
--- /dev/null
+++ b/drivers/video/adf/intel/core/common/intel_drrs.c
@@ -0,0 +1,307 @@
+/*
+ * Copyright (C) 2015, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Author:
+ * Ramalingam C <ramalingam.c@intel.com>
+ */
+
+#include <drm/i915_drm.h>
+#include <intel_adf_device.h>
+#include <linux/delay.h>
+#include <core/common/intel_drrs.h>
+
+void intel_set_drrs_state(struct intel_pipeline *pipeline)
+{
+	struct adf_drrs *drrs = pipeline->drrs;
+	struct drrs_info *drrs_state = &drrs->drrs_state;
+	struct drm_mode_modeinfo *target_mode;
+	int refresh_rate;
+
+	if (!drrs->has_drrs) {
+		pr_err("ADF: %s: DRRS is not supported on this pipe\n",
+								__func__);
+		return;
+	}
+
+	target_mode = drrs->panel_mode.target_mode;
+	if (target_mode == NULL) {
+		pr_err("ADF: %s: target_mode cannot be NULL\n", __func__);
+		return;
+	}
+	refresh_rate = target_mode->vrefresh;
+
+	if (refresh_rate <= 0) {
+		pr_err("ADF: %s: Refresh rate shud be positive non-zero.<%d>\n",
+							__func__, refresh_rate);
+		return;
+	}
+
+	if (drrs_state->target_rr_type >= DRRS_MAX_RR) {
+		pr_err("ADF: %s: Unknown refresh_rate_type\n", __func__);
+		return;
+	}
+
+	if (drrs_state->target_rr_type == drrs_state->current_rr_type) {
+		pr_info("ADF: %s: Requested for previously set RR. Ignoring\n",
+								__func__);
+		return;
+	}
+
+	/* TODO: If the display is not active return here */
+
+	drrs->encoder_ops->set_drrs_state(pipeline);
+
+	if (drrs_state->type != SEAMLESS_DRRS_SUPPORT_SW) {
+		drrs_state->current_rr_type = drrs_state->target_rr_type;
+
+		pr_info("ADF: %s: Refresh Rate set to : %dHz\n", __func__,
+								refresh_rate);
+	}
+}
+
+static void intel_idleness_drrs_work_fn(struct work_struct *__work)
+{
+	struct intel_idleness_drrs_work *work =
+		container_of(to_delayed_work(__work),
+				struct intel_idleness_drrs_work, work);
+	struct intel_pipeline *pipeline = work->pipeline;
+	struct adf_drrs *drrs = pipeline->drrs;
+	struct drrs_panel_mode *panel_mode = &drrs->panel_mode;
+
+	/* TODO: If DRRS is not supported on clone mode act here */
+	if (panel_mode->target_mode != NULL)
+		pr_err("ADF: %s: FIXME: We shouldn't be here\n", __func__);
+
+	mutex_lock(&drrs->drrs_state.mutex);
+	panel_mode->target_mode = panel_mode->downclock_mode;
+	drrs->drrs_state.target_rr_type = DRRS_LOW_RR;
+
+	intel_set_drrs_state(work->pipeline);
+
+	panel_mode->target_mode = NULL;
+	mutex_unlock(&drrs->drrs_state.mutex);
+}
+
+static void intel_cancel_idleness_drrs_work(struct adf_drrs *drrs)
+{
+	if (drrs->idleness_drrs_work == NULL)
+		return;
+
+	cancel_delayed_work_sync(&drrs->idleness_drrs_work->work);
+	drrs->panel_mode.target_mode = NULL;
+}
+
+static void intel_enable_idleness_drrs(struct intel_pipeline *pipeline)
+{
+	struct adf_drrs *drrs = pipeline->drrs;
+	bool force_enable_drrs = false;
+
+	if (!drrs || !drrs->has_drrs)
+		return;
+
+	intel_cancel_idleness_drrs_work(drrs);
+	mutex_lock(&drrs->drrs_state.mutex);
+
+	/* Capturing the deferred request for disable_drrs */
+	if (drrs->drrs_state.type == SEAMLESS_DRRS_SUPPORT_SW &&
+				drrs->encoder_ops->is_drrs_hr_state_pending) {
+		if (drrs->encoder_ops->is_drrs_hr_state_pending(pipeline))
+				force_enable_drrs = true;
+	}
+
+	if (drrs->drrs_state.current_rr_type != DRRS_LOW_RR ||
+							force_enable_drrs) {
+		drrs->idleness_drrs_work->pipeline = pipeline;
+
+		/*
+		 * Delay the actual enabling to let pageflipping cease and the
+		 * display to settle before starting DRRS
+		 */
+		schedule_delayed_work(&drrs->idleness_drrs_work->work,
+			msecs_to_jiffies(drrs->idleness_drrs_work->interval));
+	}
+	mutex_unlock(&drrs->drrs_state.mutex);
+}
+
+void intel_disable_idleness_drrs(struct intel_pipeline *pipeline)
+{
+	struct adf_drrs *drrs = pipeline->drrs;
+	struct drrs_panel_mode *panel_mode;
+
+	if (!drrs || !drrs->has_drrs)
+		return;
+
+	panel_mode = &drrs->panel_mode;
+
+	/* as part of disable DRRS, reset refresh rate to HIGH_RR */
+	if (drrs->drrs_state.current_rr_type == DRRS_LOW_RR) {
+		mutex_lock(&drrs->drrs_state.mutex);
+		intel_cancel_idleness_drrs_work(drrs);
+
+		if (panel_mode->target_mode != NULL)
+			pr_err("ADF: %s: FIXME: We shouldn't be here\n",
+								__func__);
+
+		panel_mode->target_mode = panel_mode->fixed_mode;
+		drrs->drrs_state.target_rr_type = DRRS_HIGH_RR;
+		intel_set_drrs_state(pipeline);
+		panel_mode->target_mode = NULL;
+		mutex_unlock(&drrs->drrs_state.mutex);
+	}
+}
+
+/* Stops and Starts the Idlenes detection */
+void intel_restart_idleness_drrs(struct intel_pipeline *pipeline)
+{
+	struct adf_drrs *drrs = pipeline->drrs;
+
+	if (!drrs || !drrs->has_drrs)
+		return;
+
+	/* TODO: Find clone mode here and act on it*/
+
+	intel_disable_idleness_drrs(pipeline);
+
+	/* re-enable idleness detection */
+	intel_enable_idleness_drrs(pipeline);
+}
+
+
+/* Idleness detection logic is initialized */
+int intel_adf_drrs_idleness_detection_init(struct intel_pipeline *pipeline)
+{
+	struct intel_idleness_drrs_work *work;
+
+	work = kzalloc(sizeof(struct intel_idleness_drrs_work), GFP_KERNEL);
+	if (!work) {
+		pr_err("ADF: %s: Failed to allocate DRRS work structure\n",
+								__func__);
+		return -ENOMEM;
+	}
+
+	pipeline->drrs->is_clone = false;
+	work->interval = DRRS_IDLENESS_INTERVAL_MS;
+	INIT_DELAYED_WORK(&work->work, intel_idleness_drrs_work_fn);
+
+	pipeline->drrs->idleness_drrs_work = work;
+	return 0;
+}
+
+/*
+ * intel_drrs_init : General entry for DRRS Unit. Called for each PIPE.
+ */
+int intel_drrs_init(struct intel_pipeline *pipeline)
+{
+	struct adf_drrs *drrs = pipeline->drrs;
+	int pipe_type = -1, gen, ret = 0;
+
+	gen = intel_adf_get_platform_id();
+
+	/*
+	 * DRRS will be extended to all gen 7+ platforms
+	 * gen 8 is considered as CHV here
+	 */
+	if (gen <= 6 || gen > 8) {
+		pr_err("ADF: %s: DRRS is not enabled on Gen %d\n",
+							__func__, gen);
+		return -EPERM;
+	}
+
+	if (!drrs) {
+		pipeline->drrs = kzalloc(sizeof(*drrs), GFP_KERNEL);
+		if (!pipeline->drrs) {
+			pr_err("ADF: %s: adf_drrs allocation failed\n",
+								__func__);
+			return -ENOMEM;
+		}
+		drrs = pipeline->drrs;
+	} else {
+		pr_err("ADF: %s: drrs is already allocated for this pipe\n",
+								__func__);
+		return -EINVAL;
+	}
+
+	if (IS_VALLEYVIEW() || IS_CHERRYVIEW())
+		pipe_type = vlv_pipeline_to_pipe_type(pipeline);
+
+	if (!drrs->encoder_ops) {
+		pr_err("ADF: %s: Encoder ops not initialized\n", __func__);
+		ret = -EINVAL;
+		goto err_out;
+	}
+
+	drrs->vbt.drrs_type = intel_get_vbt_drrs_support();
+
+	/*
+	 * This min_vrefresh from VBT is essential for MIPI DRRS.
+	 * But not for the eDP like panel, where EDID will provide
+	 * the min_vrefresh.
+	 */
+	drrs->vbt.drrs_min_vrefresh = intel_get_vbt_drrs_min_vrefresh();
+
+	/* First check if DRRS is enabled from VBT struct */
+	if (drrs->vbt.drrs_type != SEAMLESS_DRRS_SUPPORT) {
+		pr_info("ADF: %s: VBT doesn't support SEAMLESS DRRS\n",
+								__func__);
+		ret = -EPERM;
+		goto err_out;
+	}
+
+	if (!drrs->encoder_ops->init || !drrs->encoder_ops->exit ||
+					!drrs->encoder_ops->set_drrs_state) {
+		pr_err("ADF: %s: Essential func ptrs are NULL\n", __func__);
+		ret = -EINVAL;
+		goto err_out;
+	}
+
+	ret = drrs->encoder_ops->init(pipeline);
+	if (ret < 0) {
+		pr_err("ADF: %s: Encoder DRRS init failed\n", __func__);
+		goto err_out;
+	}
+
+	ret = intel_adf_drrs_idleness_detection_init(pipeline);
+	if (ret < 0) {
+		drrs->encoder_ops->exit(pipeline);
+		goto err_out;
+	}
+
+	/* SEAMLESS DRRS is supported and downclock mode also exist */
+	drrs->has_drrs = true;
+
+	mutex_init(&drrs->drrs_state.mutex);
+
+	drrs->drrs_state.type = drrs->vbt.drrs_type;
+	drrs->drrs_state.current_rr_type = DRRS_HIGH_RR;
+	pr_info("ADF: %s: SEAMLESS DRRS supported on this panel.\n", __func__);
+	return 0;
+
+err_out:
+	kfree(pipeline->drrs);
+	pipeline->drrs = NULL;
+	return ret;
+}
+
+void intel_drrs_exit(struct intel_pipeline *pipeline)
+{
+	struct adf_drrs *drrs = pipeline->drrs;
+
+	if (!drrs)
+		return;
+
+	drrs->has_drrs = false;
+
+	kfree(drrs->idleness_drrs_work);
+	drrs->encoder_ops->exit(pipeline);
+	kfree(pipeline->drrs);
+
+}
diff --git a/drivers/video/adf/intel/include/core/common/intel_drrs.h b/drivers/video/adf/intel/include/core/common/intel_drrs.h
new file mode 100644
index 0000000..d1892d1
--- /dev/null
+++ b/drivers/video/adf/intel/include/core/common/intel_drrs.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Author:
+ * Ramalingam C <ramalingam.c@intel.com>
+ */
+
+#ifndef INTEL_DRRS_H__
+#define INTEL_DRRS_H__
+
+#include <core/vlv/vlv_dc_config.h>
+
+#define DRRS_IDLENESS_INTERVAL_MS	1000
+#define DRRS_MIN_VREFRESH_HZ		55
+
+void intel_disable_idleness_drrs(struct intel_pipeline *pipeline);
+void intel_restart_idleness_drrs(struct intel_pipeline *pipeline);
+int intel_drrs_init(struct intel_pipeline *pipeline);
+
+#endif /* INTEL_DRRS_H__ */
diff --git a/drivers/video/adf/intel/include/core/intel_dc_config.h b/drivers/video/adf/intel/include/core/intel_dc_config.h
index 88d86d9..0da99a0 100644
--- a/drivers/video/adf/intel/include/core/intel_dc_config.h
+++ b/drivers/video/adf/intel/include/core/intel_dc_config.h
@@ -502,6 +502,96 @@ struct intel_dc_attachment {
 	u8 pll_id;
 };
 
+/**
+ * DRRS Support Type:
+ * DRRS_NOT_SUPPORTED		: DRRS not supported :)
+ * STATIC_DRRS_SUPPORT		: Need a complete modeset for DRRS
+ * SEAMLESS_DRRS_SUPPORT	: Seamless vrefresh switch is supported on HW
+ * SEAMLESS_DRRS_SUPPORT_SW	: Seamless vrefresh switch is supported on SW
+ */
+enum drrs_support_type {
+	DRRS_NOT_SUPPORTED = 0,
+	STATIC_DRRS_SUPPORT = 1,
+	SEAMLESS_DRRS_SUPPORT = 2,
+	SEAMLESS_DRRS_SUPPORT_SW = 3,
+};
+
+/**
+ * Different DRRS States:
+ * DRRS_HIGH_RR	: Refreshrate of Fixed mode. [Maximum Vrefresh]
+ * DRRS_LOW_RR	: Refreshrate of Downclock mode. [Minimum vrefresh]
+ */
+enum drrs_refresh_rate_type {
+	DRRS_HIGH_RR,
+	DRRS_LOW_RR,
+	DRRS_MAX_RR,
+};
+
+struct drrs_info {
+	enum drrs_support_type type;
+	enum drrs_refresh_rate_type current_rr_type;
+	enum drrs_refresh_rate_type target_rr_type;
+	struct mutex mutex;
+};
+
+struct vbt_drrs_data {
+	enum drrs_support_type drrs_type;
+	unsigned int drrs_min_vrefresh;
+};
+
+/**
+ * DRRS Panel Modes:
+ * fixed_mode		: Default preferred mode
+ * downclock_mode	: Fixed Mode with the lowest verefresh
+ * target_mode		: Mode that is requested to be set next
+ */
+struct drrs_panel_mode {
+	struct drm_mode_modeinfo *fixed_mode;
+	struct drm_mode_modeinfo *downclock_mode;
+	struct drm_mode_modeinfo *target_mode;
+};
+
+/**
+ * intel_idleness_drrs_work:
+ * work		: Deferred work to declare the Idleness, if not disturbed.
+ * pipeline	: Target pipeline
+ * interval	: Time to defer the deferred work
+ */
+struct intel_idleness_drrs_work {
+	struct delayed_work work;
+	struct intel_pipeline *pipeline;
+
+	/* Idleness interval in mSec*/
+	int interval;
+};
+
+/* Encoder related function pointers */
+struct drrs_encoder_ops {
+	int (*init)(struct intel_pipeline *);
+	void (*exit)(struct intel_pipeline *);
+	void (*set_drrs_state)(struct intel_pipeline *);
+	bool (*is_drrs_hr_state_pending)(struct intel_pipeline *);
+};
+
+struct adf_drrs {
+	/* Whether another pipe is enabled in parallel */
+	bool is_clone;
+
+	/* downclock mode && seamless DRRS */
+	bool has_drrs;
+
+	/* Holds the DRRS state machine states */
+	struct drrs_info drrs_state;
+	struct vbt_drrs_data vbt;
+
+	/* Panel's max, min and customer requested modes are stored */
+	struct drrs_panel_mode panel_mode;
+	struct intel_idleness_drrs_work *idleness_drrs_work;
+
+	/* Functions to hold encoder specific DRRS functions */
+	struct drrs_encoder_ops *encoder_ops;
+};
+
 union encoder_params {
 	/*
 	 * pass display specific params to pipeline code
@@ -525,6 +615,7 @@ union encoder_params {
 
 struct intel_pipeline {
 	union encoder_params params;
+	struct adf_drrs *drrs;
 };
 
 struct intel_dc_config {
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index 8163f91..6593a57 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -244,6 +244,11 @@ static inline struct vlv_pipeline *to_vlv_pipeline(
 	return container_of(intel_pipeline, struct vlv_pipeline, base);
 }
 
+static inline int vlv_pipeline_to_pipe_type(struct intel_pipeline *pipeline)
+{
+	return (to_vlv_pipeline(pipeline))->type;
+}
+
 bool vlv_intf_screen_connected(struct intel_pipeline *pipeline);
 u32 vlv_intf_vsync_counter(struct intel_pipeline *pipeline, u32 interval);
 
-- 
1.7.9.5

