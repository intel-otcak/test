From b472bfddd7cdf7baed26514db42c0006b8297eae Mon Sep 17 00:00:00 2001
From: Aubrey Li <aubrey.li@intel.com>
Date: Mon, 12 May 2014 00:40:28 -0500
Subject: [PATCH 113/152] Support low power idle via "echo mem >
 /sys/power/state"

Signed-off-by: Aubrey Li <aubrey.li@intel.com>
---
 drivers/acpi/sleep.c    |   54 +++++++++++++++++++++++++++++++++++++----------
 include/linux/suspend.h |    1 +
 2 files changed, 44 insertions(+), 11 deletions(-)

diff --git a/drivers/acpi/sleep.c b/drivers/acpi/sleep.c
index 90a0efa..9f3fd61 100644
--- a/drivers/acpi/sleep.c
+++ b/drivers/acpi/sleep.c
@@ -19,6 +19,7 @@
 #include <linux/acpi.h>
 #include <linux/module.h>
 #include <asm/io.h>
+#include <asm/mwait.h>
 
 #include "internal.h"
 #include "sleep.h"
@@ -380,7 +381,12 @@ static int __acpi_pm_prepare(void)
  */
 static int acpi_pm_prepare(void)
 {
-	int error = __acpi_pm_prepare();
+	int error = 0;
+
+	if (acpi_target_sleep_state == ACPI_STATE_S0)
+		return error;
+
+	error = __acpi_pm_prepare();
 	if (!error)
 		error = acpi_pm_pre_suspend();
 
@@ -406,12 +412,12 @@ static void acpi_pm_finish(void)
 	struct device *pwr_btn_dev;
 	u32 acpi_state = acpi_target_sleep_state;
 
-	acpi_ec_unblock_transactions();
-	suspend_nvs_free();
-
 	if (acpi_state == ACPI_STATE_S0)
 		return;
 
+	acpi_ec_unblock_transactions();
+	suspend_nvs_free();
+
 	printk(KERN_INFO PREFIX "Waking up from system sleep state S%d\n",
 		acpi_state);
 	acpi_disable_wakeup_devices(acpi_state);
@@ -457,6 +463,9 @@ static void acpi_pm_start(u32 acpi_state)
  */
 static void acpi_pm_end(void)
 {
+	if (acpi_target_sleep_state == ACPI_STATE_S0)
+		return;
+
 	acpi_scan_lock_release();
 	/*
 	 * This is necessary in case acpi_pm_finish() is not called during a
@@ -484,18 +493,33 @@ static u32 acpi_suspend_states[] = {
  */
 static int acpi_suspend_begin(suspend_state_t pm_state)
 {
-	u32 acpi_state = acpi_suspend_states[pm_state];
+	u32 acpi_state;
 	int error;
 
-	error = (nvs_nosave || nvs_nosave_s3) ? 0 : suspend_nvs_alloc();
-	if (error)
-		return error;
+	acpi_state = acpi_suspend_states[pm_state];
 
 	if (!sleep_states[acpi_state]) {
-		pr_err("ACPI does not support sleep state S%u\n", acpi_state);
-		return -ENOSYS;
+		/*
+		 * exception: if the platform architectures support
+		 * low power S0idle mode, we should return ACPI_STATE_S0
+		 * here to let the hardware manage power autonomously
+		 */
+		if (pm_state == PM_SUSPEND_MEM && low_power_s0idle) {
+			acpi_state = ACPI_STATE_S0;
+		} else {
+			pr_err("ACPI does not support sleep state S%u\n",
+				acpi_state);
+			return -ENOSYS;
+		}
 	}
 
+	if (acpi_state == ACPI_STATE_S0)
+		return 0;
+
+	error = (nvs_nosave || nvs_nosave_s3) ? 0 : suspend_nvs_alloc();
+	if (error)
+		return error;
+
 	acpi_pm_start(acpi_state);
 	return 0;
 }
@@ -511,12 +535,20 @@ static int acpi_suspend_begin(suspend_state_t pm_state)
 static int acpi_suspend_enter(suspend_state_t pm_state)
 {
 	acpi_status status = AE_OK;
-	u32 acpi_state = acpi_target_sleep_state;
+	u32 acpi_state = acpi_target_sleep_state, tmp;
 	int error;
 
 	ACPI_FLUSH_CPU_CACHE();
 
 	switch (acpi_state) {
+	case ACPI_STATE_S0:
+		pm_suspend_dev_state();
+		pr_info(PREFIX "suspend to mwait\n");
+		__monitor((void *)&tmp, 0, 0);
+		smp_mb();
+		__mwait(0x64, 1);
+		pr_info(PREFIX "resume from mwait\n");
+		return 0;
 	case ACPI_STATE_S1:
 		barrier();
 		status = acpi_enter_sleep_state(acpi_state);
diff --git a/include/linux/suspend.h b/include/linux/suspend.h
index ff0af95..a661b51 100644
--- a/include/linux/suspend.h
+++ b/include/linux/suspend.h
@@ -465,6 +465,7 @@ static inline void page_key_write(void *address) {}
 #endif /* !CONFIG_ARCH_SAVE_PAGE_KEYS */
 
 extern bool pm_suspend_debug;
+extern void pm_suspend_dev_state(void);
 #define pm_suspend_dbg(fmt, arg...)                                     \
 do {                                                                    \
         if (pm_suspend_debug)                                           \
-- 
1.7.10.4

