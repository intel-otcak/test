From ed7a675fac073c6c3868ea11172fd832edf8b268 Mon Sep 17 00:00:00 2001
Message-Id: <ed7a675fac073c6c3868ea11172fd832edf8b268.1434058173.git.chang-joon.lee@intel.com>
In-Reply-To: <cb13d6abcebb263859514735a399f7f8b895c27a.1434058173.git.chang-joon.lee@intel.com>
References: <cb13d6abcebb263859514735a399f7f8b895c27a.1434058173.git.chang-joon.lee@intel.com>
From: Tim Gore <tim.gore@intel.com>
Date: Wed, 3 Jun 2015 13:58:13 +0100
Subject: [PATCH 4/6] FOR_UPSTREAM [VPG]: drm/i915 changes to simulated hangs

Simulated hangs, as used by drv_hangman and some other
IGT tests, are not handled correctly in the Android driver.
This patch fixes several issues needed to get them working
in the execlist case.

1) The "simulated" hang is effected by not submitting
   a particular batch buffer to the hardware. In this
   way it is not handled by the hardware are hence
   remains in the software queue, leading the TDR
   mechanism to declare a hang. The place where the
   submission of the batch was being blocked was in
   intel_logical_ring_advance_and_submit. Because this
   means the request never enters the execlist_queue, the
   TDR mechanism does not detect a hang and the situation
   is never cleared. Also, blocking the batch buffer here
   is before the intel_ctx_submit_request object gets
   allocated. During TDR we need to actually complete the
   submission process to unhang the ring, but we are not in
   user context so cannot allocate the request object.
   To overcome both these issues I moved the place where
   submission is blocked to execlists_context_unqueue. This
   means that the request enters the ring->execlist_queue,
   so the TDR mechanism detects the hang and can resubmit
   the request after the stop_rings bit is cleared.

2) A further problem arises from a workaround in
   i915_hangcheck_sample to deal with a context submission
   status of "...SUBMITTED" being reported by
   i915_gem_context_get_current_context when the context id
   is 0. A simulated hang, because it causes the sw and hw
   context id's to be out of sync, results in a context
   submission status of "...SUBMITTED" being reported,
   triggering this workaround which resubmits the batch
   and clears the hang, avoiding a ring reset. But we
   want the ring reset to occur, since this is part of
   what we are testing. So, I have made
   i915_gem_context_get_current_context aware of simulated
   hangs, so that it returns a status of OK in this case.
   This avoids the workaround being triggered, leading to
   the TDR mechanism declaring a ring hang and doing a ring
   reset.

3) Finally, when the TDR mechanism does a ring reset, the
   hw pointer into the context status buffer gets reset to
   7 (the power on value). But the software read pointer
   into this buffer (ring->next_context_status_buffer) was
   not getting reset, so that after the ring reset some
   context status buffer updates could get missed, leading
   the test to hang. So, in gen8_init_common_ring I
   initialize next_context_status_buffer to 5. In spite
   of its name, this is used by the driver to point to the
   last context status entry read from the buffer, so the
   next entry to be read will be ((++5)%6) = 0, which
   agrees with where the hardware writes the first context
   status entry after a reset.

Issue: VIZ-5488
Change-Id: I3e3446b54176607bb08c5db74aac60526015f79f
Signed-off-by: Tim Gore <tim.gore@intel.com>
---
 drivers/gpu/drm/i915/intel_lrc.c |   40 ++++++++++++++++++++++++++++-----------
 drivers/gpu/drm/i915/intel_lrc.h |    2 +
 2 files changed, 31 insertions(+), 11 deletions(-)

Index: b/drivers/gpu/drm/i915/intel_lrc.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_lrc.c	2016-03-09 23:55:18.520325339 +0800
+++ b/drivers/gpu/drm/i915/intel_lrc.c	2016-03-10 00:02:25.087027440 +0800
@@ -803,6 +803,16 @@
 
 	execlists_fetch_requests(ring, &req0, &req1);
 
+	/* check for a simulated hang request */
+	if (intel_ring_stopped(ring)) {
+		/*
+		 * mark the request at the head of the queue as submitted
+		 * but dont actually submit it
+		 */
+		req0->elsp_submitted++;
+		return;
+	}
+
 	WARN_ON(req1 && req1->elsp_submitted);
 
 	WARN_ON(execlists_submit_context(ring, req0->ctx, req0->tail,
@@ -951,9 +961,20 @@
 	}
 
 	if (tmpctx) {
-		status = ((hw_context == sw_context) && (0 != hw_context)) ?
-			CONTEXT_SUBMISSION_STATUS_OK :
-			CONTEXT_SUBMISSION_STATUS_SUBMITTED;
+		/*
+		 * Check for simuated hang. In this case the head entry in the
+		 * sw execlist queue will not have been submitted to the ELSP, so
+		 * the hw and sw context id's may well disagree, but we still want
+		 * to proceed with hang recovery. So we return OK which allows
+		 * the TDR recovery mechanism to proceed with a ring reset.
+		 */
+		if (intel_ring_stopped(ring)) {
+			status = CONTEXT_SUBMISSION_STATUS_OK;
+		} else {
+			status = ((hw_context == sw_context) && (0 != hw_context)) ?
+				CONTEXT_SUBMISSION_STATUS_OK :
+				CONTEXT_SUBMISSION_STATUS_SUBMITTED;
+		}
 	} else {
 		/*
 		 * If we don't have any queue entries and the
@@ -1086,15 +1107,15 @@
 	status_pointer = I915_READ(RING_CONTEXT_STATUS_PTR(ring));
 
 	read_pointer = ring->next_context_status_buffer;
-	write_pointer = status_pointer & 0x07;
+	write_pointer = status_pointer & GEN8_CSB_PTR_MASK;
 	if (read_pointer > write_pointer)
-		write_pointer += 6;
+		write_pointer += GEN8_CSB_ENTRIES;
 
 	while (read_pointer < write_pointer) {
 		read_pointer++;
 
 		status = I915_READ(RING_CONTEXT_STATUS_BUF(ring) +
-				(read_pointer % 6) * 8);
+				(read_pointer % GEN8_CSB_ENTRIES) * 8);
 
 		if (status & GEN8_CTX_STATUS_PREEMPTED) {
 			if (status & GEN8_CTX_STATUS_LITE_RESTORE) {
@@ -1136,10 +1157,10 @@
 		execlists_context_unqueue(ring);
 
 	WARN(submit_contexts > 2, "More than two context complete events?\n");
-	ring->next_context_status_buffer = write_pointer % 6;
+	ring->next_context_status_buffer = write_pointer % GEN8_CSB_ENTRIES;
 
 	I915_WRITE(RING_CONTEXT_STATUS_PTR(ring),
-		   ((u32)ring->next_context_status_buffer & 0x07) << 8);
+		((u32)ring->next_context_status_buffer & GEN8_CSB_PTR_MASK) << 8);
 
 exit:
 	if (do_lock)
@@ -1863,9 +1884,6 @@
 
 	intel_logical_ring_advance(ringbuf);
 
-	if (intel_ring_stopped(ring))
-		return;
-
 	execlists_context_queue(ring, ctx, ringbuf->tail);
 }
 
Index: b/drivers/gpu/drm/i915/intel_lrc.h
===================================================================
--- a/drivers/gpu/drm/i915/intel_lrc.h	2016-03-09 23:55:18.520325339 +0800
+++ b/drivers/gpu/drm/i915/intel_lrc.h	2016-03-09 23:55:18.520325339 +0800
@@ -25,6 +25,8 @@
 #define _INTEL_LRC_H_
 
 #define GEN8_LR_CONTEXT_ALIGN 4096
+#define GEN8_CSB_ENTRIES 6
+#define GEN8_CSB_PTR_MASK 0x7
 
 /* Execlists regs */
 #define RING_ELSP(ring)			((ring)->mmio_base+0x230)
