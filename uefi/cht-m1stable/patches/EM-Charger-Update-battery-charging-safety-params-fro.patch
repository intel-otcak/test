From 2a7f4fcc7cf3e51a7cbca0f14471dc87e363a218 Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Wed, 5 Aug 2015 13:48:40 +0530
Subject: [PATCH] [EM/Charger]: Update battery charging safety params from OEM0
 table

To charge the battery safely, the max and min temperature should be
based on the profile which is supported by the platform. Currently
the battery min and max temperature values are hardcoded in the
charger driver. This will cause an issue when the charging profile
temp value varies from the hardcoded values. Hence the min and max
temp values are updated based on the OEMO table data.

Change-Id: I2bb5807ece5c6a46260b74e72db113d596c32ae7
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-13901
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
---
 arch/x86/include/asm/intel_em_config.h |  5 +++++
 drivers/power/bq24192_charger.c        | 40 ++++++++++++++++++++++++++++++++++
 2 files changed, 45 insertions(+)

diff --git a/arch/x86/include/asm/intel_em_config.h b/arch/x86/include/asm/intel_em_config.h
index 949523e2c770..78a85b4739f7 100644
--- a/arch/x86/include/asm/intel_em_config.h
+++ b/arch/x86/include/asm/intel_em_config.h
@@ -74,6 +74,11 @@ int em_config_get_oem1_data(struct em_config_oem1_data *data);
 
 #else
 
+static int em_config_get_oem0_data(struct em_config_oem0_data *data)
+{
+	return 0;
+}
+
 static int em_config_get_oem1_data(struct em_config_oem1_data *data)
 {
 	return 0;
diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index aee4722fd820..fdeb6d917fae 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -2167,6 +2167,43 @@ static inline int register_cooling_device(struct bq24192_chip *chip)
 	return 0;
 }
 
+static int bq24194_get_max_temp(struct em_config_oem0_data *oem0)
+{
+	int tz;
+	int max_tz;
+	int max_temp = 0;
+
+	if (!oem0)
+		return 0;
+
+	max_tz = oem0->temp_mon_ranges;
+	for (tz = 0; tz < max_tz; tz++) {
+		/* considering the temp zone only if the cc and cv is valid */
+		if (oem0->temp_mon_range[tz].full_chrg_vol &&
+			oem0->temp_mon_range[tz].full_chrg_cur)
+			max_temp = max_t(int, max_temp,
+					oem0->temp_mon_range[tz].temp_up_lim);
+	}
+
+	return max_temp;
+}
+
+static void bq24192_update_safety_charger_params(struct bq24192_chip *chip)
+{
+	int ret;
+	struct em_config_oem0_data oem0_data;
+
+	ret = em_config_get_oem0_data(&oem0_data);
+	if (!ret)
+		dev_warn(&chip->client->dev,
+			"Failed to fetch OEM0 table\n");
+	else {
+		/* update only OEM0 table is pressent */
+		chip->pdata->min_temp = oem0_data.temp_low_lim;
+		chip->pdata->max_temp = bq24194_get_max_temp(&oem0_data);
+	}
+}
+
 static int bq24192_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
@@ -2233,6 +2270,9 @@ static int bq24192_probe(struct i2c_client *client,
 		/* 0 - usb compliance, 1 - no usb compliance */
 		chip->chrg_usb_compliance =
 			!(em_config.fpo_0 & FPO0_USB_COMP_OFFSET);
+
+	/* update battery charging safety parameters from OEM0 table */
+	bq24192_update_safety_charger_params(chip);
 #endif
 	/*assigning default value for min and max temp*/
 	chip->max_temp = chip->pdata->max_temp;
-- 
1.9.1

