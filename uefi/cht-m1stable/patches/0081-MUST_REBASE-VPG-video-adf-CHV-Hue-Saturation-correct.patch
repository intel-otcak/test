From 2906bca9057bfc6843f90e0f0a08b351939b4400 Mon Sep 17 00:00:00 2001
Message-Id: <2906bca9057bfc6843f90e0f0a08b351939b4400.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Kausal Malladi <Kausal.Malladi@intel.com>
Date: Sat, 31 Jan 2015 16:45:53 +0530
Subject: [PATCH 81/95] MUST_REBASE [VPG]: video/adf: CHV Hue Saturation
 correction

This patch implements core functions that programs
Hue and Saturation correction registers, on CHV platform.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-4166
Change-Id: I92af6e59c0a7141c4489e71781571620efd0d730
Signed-off-by: Kausal Malladi <Kausal.Malladi@intel.com>
---
 .../adf/intel/core/vlv/chv_color_correction.c      |   85 ++++++++++++++++++++
 1 file changed, 85 insertions(+)

diff --git a/drivers/video/adf/intel/core/vlv/chv_color_correction.c b/drivers/video/adf/intel/core/vlv/chv_color_correction.c
index 32c105f..12ef507 100644
--- a/drivers/video/adf/intel/core/vlv/chv_color_correction.c
+++ b/drivers/video/adf/intel/core/vlv/chv_color_correction.c
@@ -97,6 +97,8 @@ const struct color_property chv_plane_color_corrections[] = {
 		.prop_id = hue,
 		.len = CHV_HS_VALS,
 		.name = "hue",
+		.set_property = chv_set_hue,
+		.disable_property = chv_disable_hue,
 		.validate = chv_validate
 	},
 
@@ -105,6 +107,8 @@ const struct color_property chv_plane_color_corrections[] = {
 		.prop_id = saturation,
 		.len = CHV_HS_VALS,
 		.name = "saturation",
+		.set_property = chv_set_saturation,
+		.disable_property = chv_disable_saturation,
 		.validate = chv_validate
 	}
 };
@@ -158,6 +162,87 @@ const u16 deGamma_LUT_B[CHV_DEGAMMA_VALS] = {
 	14181, 14723, 15276, 15842, 16383
 };
 
+bool chv_set_saturation(struct color_property *property, u64 *data, u8 plane_id)
+{
+	u32 reg, sprite, val, new_val;
+
+	/* If sprite plane enabled */
+	sprite = plane_id;
+	if (!(REG_READ(CHV_CLRMGR_SPCNTR(sprite)) &
+			SP_ENABLE)) {
+		pr_err("ADF: CM: Sprite plane %d not enabled\n", sprite);
+		return false;
+	}
+
+	reg = CHV_CLRMGR_SPHS(sprite);
+
+	/* Clear current values */
+	val = REG_READ(reg) & ~(CHV_SATURATION_MASK);
+
+	/* Get new values */
+	new_val = *data & CHV_SATURATION_MASK;
+	val |= new_val;
+
+	/* Update */
+	REG_WRITE(reg, val);
+	property->lut[0] = new_val;
+
+	/* Set status */
+	if (new_val == CHV_SATURATION_DEFAULT)
+		property->status = false;
+	else
+		property->status = true;
+
+	pr_info("ADF: CM: Set Saturation to 0x%x successful\n", new_val);
+	return true;
+
+}
+bool chv_disable_saturation(struct color_property *property, u8 plane_id)
+{
+	u64 data = CHV_SATURATION_DEFAULT;
+	return chv_set_saturation(property, &data, plane_id);
+}
+
+bool chv_set_hue(struct color_property *property, u64 *data, u8 plane_id)
+{
+	u32 reg, sprite, val, new_val;
+
+	/* If sprite plane enabled */
+	sprite = plane_id;
+	if (!(REG_READ(CHV_CLRMGR_SPCNTR(sprite)) &
+			SP_ENABLE)) {
+		pr_err("ADF: CM: Sprite plane %d not enabled\n", sprite);
+		return false;
+	}
+
+	reg = CHV_CLRMGR_SPHS(sprite);
+
+	/* Clear current hue values */
+	val = REG_READ(reg) & ~(CHV_HUE_MASK << CHV_HUE_SHIFT);
+
+	/* Get the new values */
+	new_val = *data & CHV_HUE_MASK;
+	val |= (new_val << CHV_HUE_SHIFT);
+
+	/* Update */
+	REG_WRITE(reg, new_val);
+	property->lut[0] = new_val;
+
+	/* Set status */
+	if (new_val == CHV_HUE_DEFAULT)
+		property->status = false;
+	else
+		property->status = true;
+	pr_info("ADF: CM: Set Hue to 0x%x successful\n", new_val);
+	return true;
+}
+
+bool chv_disable_hue(struct color_property *property, u8 plane_id)
+{
+	u64 data = CHV_HUE_DEFAULT;
+	return chv_set_hue(property, &data, plane_id);
+}
+
 bool chv_set_brightness(struct color_property *property, u64 *data, u8 plane_id)
 {
 	u32 val, new_val, reg, sprite;
-- 
1.7.9.5

