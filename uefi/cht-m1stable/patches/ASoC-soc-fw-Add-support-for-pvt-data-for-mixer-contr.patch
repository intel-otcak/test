From 9aab2b62f74839929c85f94c254b354f2a75ade8 Mon Sep 17 00:00:00 2001
From: Mythri P K <mythri.p.k@intel.com>
Date: Tue, 22 Apr 2014 18:13:50 +0530
Subject: [PATCH 10/39] ASoC: soc-fw: Add support for pvt data for mixer
 control

Issue: GMINL-3679

Component drivers/vendors can use the generic controls type but
have their vendor specific data associated with the controls
(pvt_data), so this patch adds support for private data and length
in the soc_mixer_control and corresponding change to add the size
while allocating memory in mixer create funtions.

Change-Id: Ic2f82f6b0da0c3c521925565ac3e8f0b8126a80f
Signed-off-by: Mythri P K <mythri.p.k@intel.com>
---
 include/sound/soc.h       |  3 +++
 include/uapi/sound/asoc.h |  3 +++
 sound/soc/soc-fw.c        | 17 +++++++++++++----
 3 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/include/sound/soc.h b/include/sound/soc.h
index 5290b7b..9e6a08c 100644
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@ -861,6 +861,9 @@ struct soc_mixer_control {
 	struct list_head list;
 	struct snd_kcontrol *dcontrol;
 	int index;
+
+	unsigned int pvt_data_len;
+	char *pvt_data;
 };
 
 struct soc_bytes {
diff --git a/include/uapi/sound/asoc.h b/include/uapi/sound/asoc.h
index cfd0dbb..e9e3911 100644
--- a/include/uapi/sound/asoc.h
+++ b/include/uapi/sound/asoc.h
@@ -822,6 +822,9 @@ struct snd_soc_fw_mixer_control {
 	__le32 rshift;
 	__le32 invert;
 	__le32 autodisable;
+	__le32 reserved[12]; /* Reserved for future use */
+	__le32 pvt_data_len;
+	char pvt_data[0];
 } __attribute__((packed));
 
 /*
diff --git a/sound/soc/soc-fw.c b/sound/soc/soc-fw.c
index e9ab2d1..1fd5426 100644
--- a/sound/soc/soc-fw.c
+++ b/sound/soc/soc-fw.c
@@ -428,14 +428,15 @@ static int soc_fw_dmixer_create(struct soc_fw *sfw, unsigned int count,
 
 	for (i = 0; i < count; i++) {
 		mc = (struct snd_soc_fw_mixer_control *)sfw->pos;
-		sfw->pos += sizeof(struct snd_soc_fw_mixer_control);
+		sfw->pos += (sizeof(struct snd_soc_fw_mixer_control) + mc->pvt_data_len);
+
 
 		/* validate kcontrol */
 		if (strnlen(mc->hdr.name, SND_SOC_FW_TEXT_SIZE) ==
 			SND_SOC_FW_TEXT_SIZE)
 			return -EINVAL;
 
-		sm = kzalloc(sizeof(*sm), GFP_KERNEL);
+		sm = kzalloc(sizeof(*sm) + mc->pvt_data_len, GFP_KERNEL);
 		if (!sm)
 			return -ENOMEM;
 
@@ -458,6 +459,9 @@ static int soc_fw_dmixer_create(struct soc_fw *sfw, unsigned int count,
 		sm->invert = mc->invert;
 		sm->platform_max = mc->platform_max;
 		sm->index = sfw->index;
+		if (mc->pvt_data_len)
+			soc_fw_init_pvt_data(sfw, mc->hdr.index, (unsigned long)sm, (unsigned long)mc);
+
 		INIT_LIST_HEAD(&sm->list);
 
 		/* map standard io handlers and check for external handlers */
@@ -774,12 +778,13 @@ static struct snd_kcontrol_new *soc_fw_dapm_widget_dmixer_create(struct soc_fw *
 		return NULL;
 
 	for (i = 0; i < num_kcontrols; i++) {
-		sm = kzalloc(sizeof(*sm), GFP_KERNEL);
+		mc = (struct snd_soc_fw_mixer_control *)sfw->pos;
+		sm = kzalloc(sizeof(*sm) + mc->pvt_data_len, GFP_KERNEL);
 		if (!sm)
 			goto err;
 
 		mc = (struct snd_soc_fw_mixer_control *)sfw->pos;
-		sfw->pos += sizeof(struct snd_soc_fw_mixer_control);
+		sfw->pos += (sizeof(struct snd_soc_fw_mixer_control) + mc->pvt_data_len);
 
 		/* validate kcontrol */
 		if (strnlen(mc->hdr.name, SND_SOC_FW_TEXT_SIZE) ==
@@ -803,6 +808,10 @@ static struct snd_kcontrol_new *soc_fw_dapm_widget_dmixer_create(struct soc_fw *
 		sm->invert = mc->invert;
 		sm->platform_max = mc->platform_max;
 		sm->index = sfw->index;
+
+		if (mc->pvt_data_len)
+			soc_fw_init_pvt_data(sfw, mc->hdr.index, (unsigned long)sm, (unsigned long)mc);
+
 		INIT_LIST_HEAD(&sm->list);
 
 		/* map standard io handlers and check for external handlers */
-- 
1.9.1

