From 25e0eb336725a01255d00eec42e4062867947bdc Mon Sep 17 00:00:00 2001
From: Albin Balakrishnan <albin.bala.krishnan@intel.com>
Date: Fri, 12 Feb 2016 16:15:22 +0530
Subject: [PATCH 2/2] [EM/typec_detect]: Notify cable events to PMIC by private
 interface

To configure the HS and SS lanes both will be based on the extcon
notifications received same time. So not sure which will configure
first. This may cause underline enumeration issue. So to make sure
HS lane should configure first before configuring SS lane made an
interface function instead of doing based on the extcon events in
pmic ccsm driver and which will be called before posting cable
events to extcon.

Change-Id: I264eb7c8c22ddd1f259aba0dd10f059431f26996
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-25189
Signed-off-by: Albin Balakrishnan <albin.bala.krishnan@intel.com>
Reviewed-on: https://android.intel.com:443/469661
(cherry picked from commit 2e95de0f0e389a21a0f80d443b8cea8cf9abcf39)
Reviewed-on: https://android.intel.com:443/475231
---
 drivers/usb/typec/usb_typec_detect.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/drivers/usb/typec/usb_typec_detect.c b/drivers/usb/typec/usb_typec_detect.c
index 8406b8e..0080d98 100644
--- a/drivers/usb/typec/usb_typec_detect.c
+++ b/drivers/usb/typec/usb_typec_detect.c
@@ -38,6 +38,7 @@
 #include <linux/mfd/intel_soc_pmic.h>
 #include <linux/usb_typec_phy.h>
 #include "usb_typec_detect.h"
+#include "../../power/intel_pmic_ccsm.h"
 
 #define CC_OPEN(x)		(x == USB_TYPEC_CC_VRD_UNKNOWN)
 #define CC_RD(x)		(x > USB_TYPEC_CC_VRA)
@@ -72,7 +73,6 @@ static void detect_update_ufp_state(struct typec_detect *detect);
 static int detect_measure_cc(struct typec_detect *detect,
 				enum typec_cc_pin pin_id);
 
-
 static const char *pd_extcon_cable[] = {
 	TYPEC_CABLE_USB,
 	TYPEC_CABLE_USB_HOST,
@@ -200,6 +200,7 @@ static void typec_detect_notify_extcon(struct typec_detect *detect,
 						char *type, bool state)
 {
 	enum typec_cable_type cbl_type;
+	enum cable_type pmic_ctype;
 
 	dev_dbg(detect->phy->dev, "%s: type = %s state = %d\n",
 				 __func__, type, state);
@@ -208,6 +209,7 @@ static void typec_detect_notify_extcon(struct typec_detect *detect,
 
 	switch (cbl_type) {
 	case E_TYPEC_CABLE_USB_SNK:
+		pmic_ctype = CABLE_TYPE_SINK;
 		if (detect->snk_state == state)
 			break;
 		detect->snk_state = state;
@@ -220,6 +222,7 @@ static void typec_detect_notify_extcon(struct typec_detect *detect,
 		break;
 
 	case E_TYPEC_CABLE_USB_SRC:
+		pmic_ctype = CABLE_TYPE_SOURCE;
 		if (detect->src_state == state)
 			break;
 
@@ -231,6 +234,7 @@ static void typec_detect_notify_extcon(struct typec_detect *detect,
 		break;
 
 	case E_TYPEC_CABLE_USB_HOST:
+		pmic_ctype = CABLE_TYPE_HOST;
 		if (detect->usb_host_state == state)
 			break;
 
@@ -238,6 +242,7 @@ static void typec_detect_notify_extcon(struct typec_detect *detect,
 		break;
 
 	case E_TYPEC_CABLE_USB:
+		pmic_ctype = CABLE_TYPE_USB;
 		if (detect->usb_state == state)
 			break;
 
@@ -251,6 +256,11 @@ static void typec_detect_notify_extcon(struct typec_detect *detect,
 		goto notify_ext_err;
 	}
 
+	if (cbl_type != E_TYPEC_CABLE_DP_SRC) {
+		dev_dbg(detect->phy->dev,
+			"%s: cable status change notify to pmic\n", __func__);
+		pmic_set_cable_state(pmic_ctype, state);
+	}
 	extcon_set_cable_state(detect->edev, type, state);
 
 notify_ext_err:
-- 
1.9.1

