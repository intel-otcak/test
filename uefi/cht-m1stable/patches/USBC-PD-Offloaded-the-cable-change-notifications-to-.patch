From 5e92eb1227540c2f79be77a17c53e499c05e3b84 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Fri, 21 Aug 2015 21:08:14 +0530
Subject: [PATCH] USBC-PD: Offloaded the cable change notifications to worker.

The cable change notifications form dpm are offloaded to new
worker thread to unblock the calling process. This helps in quicker
response to port partner's request during role swap.

Change-Id: I804cf0d05afd10b5f1a7f7a63c8551a3d11d3f31
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17052
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
---
 drivers/usb/typec/pd/devpolicy_mgr.c | 86 ++++++++++++++++++++++++++++++++++--
 drivers/usb/typec/pd/devpolicy_mgr.h |  3 ++
 2 files changed, 85 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/typec/pd/devpolicy_mgr.c b/drivers/usb/typec/pd/devpolicy_mgr.c
index fc71a5391785..ef4ec86bf8b8 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.c
+++ b/drivers/usb/typec/pd/devpolicy_mgr.c
@@ -69,6 +69,12 @@ static struct power_cap spcaps[] = {
 ATOMIC_NOTIFIER_HEAD(devpolicy_mgr_notifier);
 EXPORT_SYMBOL_GPL(devpolicy_mgr_notifier);
 
+struct dpm_cable_state {
+	struct list_head node;
+	char *cbl_type;
+	bool cbl_state;
+};
+
 static inline struct power_supply *dpm_get_psy(enum psy_type type)
 {
 	struct class_dev_iter iter;
@@ -374,6 +380,54 @@ static bool dpm_get_vbus_state(struct devpolicy_mgr *dpm)
 	return false;
 }
 
+static void dpm_notify_cable_state_worker(struct work_struct *work)
+{
+	struct devpolicy_mgr *dpm =
+		container_of(work, struct devpolicy_mgr, cable_notify_work);
+
+	struct dpm_cable_state *cbl, *tmp;
+	struct list_head new_list;
+
+	mutex_lock(&dpm->cable_notify_lock);
+	if (list_empty(&dpm->cable_notify_list)) {
+		mutex_unlock(&dpm->cable_notify_lock);
+		return;
+	}
+
+	list_replace_init(&dpm->cable_notify_list, &new_list);
+	mutex_unlock(&dpm->cable_notify_lock);
+
+	list_for_each_entry_safe(cbl, tmp, &new_list, node) {
+
+		typec_notify_cable_state(dpm->phy,
+					cbl->cbl_type, cbl->cbl_state);
+		kfree(cbl);
+	}
+}
+
+static int dpm_notify_cable_state(struct devpolicy_mgr *dpm,
+					char *cbl_type, bool cbl_state)
+{
+	struct dpm_cable_state *cbl;
+
+	cbl = kzalloc(sizeof(struct dpm_cable_state), GFP_KERNEL);
+	if (!cbl) {
+		pr_err("DPM:%s: Failed to allocate memory for cbl\n",
+					__func__);
+		return -ENOMEM;
+	}
+
+	cbl->cbl_type = cbl_type;
+	cbl->cbl_state = cbl_state;
+
+	mutex_lock(&dpm->cable_notify_lock);
+	list_add_tail(&cbl->node, &dpm->cable_notify_list);
+	mutex_unlock(&dpm->cable_notify_lock);
+
+	schedule_work(&dpm->cable_notify_work);
+	return 0;
+}
+
 static void dpm_update_data_role(struct devpolicy_mgr *dpm,
 				enum data_role drole)
 {
@@ -431,7 +485,7 @@ static void dpm_update_data_role(struct devpolicy_mgr *dpm,
 	}
 	dpm->prev_drole = dpm->cur_drole;
 	dpm->cur_drole = drole;
-	typec_notify_cable_state(dpm->phy, cbl_type, cbl_state);
+	dpm_notify_cable_state(dpm, cbl_type, cbl_state);
 
 drole_err:
 	mutex_unlock(&dpm->role_lock);
@@ -497,7 +551,7 @@ static void dpm_update_power_role(struct devpolicy_mgr *dpm,
 			set_pu_pd = true;
 			pu_pd = false;
 			dpm->provider_state = CABLE_DETACHED;
-			typec_notify_cable_state(dpm->phy, "USB_TYPEC_SRC",
+			dpm_notify_cable_state(dpm, "USB_TYPEC_SRC",
 						CABLE_DETACHED);
 		}
 		dpm->consumer_state = CABLE_ATTACHED;
@@ -537,7 +591,7 @@ static void dpm_update_power_role(struct devpolicy_mgr *dpm,
 	}
 	dpm->prev_prole = cur_prole;
 	dpm->cur_prole = prole;
-	typec_notify_cable_state(dpm->phy, cbl_type, cbl_state);
+	dpm_notify_cable_state(dpm, cbl_type, cbl_state);
 	if (set_pu_pd)
 		dpm_set_pu_pd(dpm, pu_pd);
 update_prole_err:
@@ -553,7 +607,7 @@ static int dpm_set_display_port_state(struct devpolicy_mgr *dpm,
 	dpm->phy->dp_type = type;
 	if (dpm->dp_state != state) {
 		dpm->dp_state = state;
-		typec_notify_cable_state(dpm->phy,
+		dpm_notify_cable_state(dpm,
 			"USB_TYPEC_DP_SOURCE", state);
 	}
 	mutex_unlock(&dpm->role_lock);
@@ -1003,6 +1057,25 @@ static void dpm_unregister_pd_class_dev(struct devpolicy_mgr *dpm)
 	put_device(dev);
 }
 
+static void dpm_clear_notify_list(struct devpolicy_mgr *dpm)
+{
+	struct dpm_cable_state *cbl, *tmp;
+
+	mutex_lock(&dpm->cable_notify_lock);
+	if (list_empty(&dpm->cable_notify_list)) {
+		mutex_unlock(&dpm->cable_notify_lock);
+		return;
+	}
+
+	/* As this clearing list is on exit, temp list not required */
+	list_for_each_entry_safe(cbl, tmp, &dpm->cable_notify_list, node) {
+		/*Free the event*/
+		kfree(cbl);
+	}
+	INIT_LIST_HEAD(&dpm->cable_notify_list);
+	mutex_unlock(&dpm->cable_notify_lock);
+}
+
 static struct dpm_interface interface = {
 	.get_max_srcpwr_cap = dpm_get_max_srcpwr_cap,
 	.get_max_snkpwr_cap = dpm_get_max_snkpwr_cap,
@@ -1046,6 +1119,10 @@ struct devpolicy_mgr *dpm_register_syspolicy(struct typec_phy *phy,
 	mutex_init(&dpm->role_lock);
 	mutex_init(&dpm->charger_lock);
 
+	INIT_WORK(&dpm->cable_notify_work, dpm_notify_cable_state_worker);
+	mutex_init(&dpm->cable_notify_lock);
+	INIT_LIST_HEAD(&dpm->cable_notify_list);
+
 	/* register for extcon notifier */
 	dpm->consumer_nb.notifier_call = dpm_consumer_cable_event;
 	dpm->provider_nb.notifier_call = dpm_provider_cable_event;
@@ -1105,6 +1182,7 @@ EXPORT_SYMBOL(dpm_register_syspolicy);
 void dpm_unregister_syspolicy(struct devpolicy_mgr *dpm)
 {
 	if (dpm) {
+		dpm_clear_notify_list(dpm);
 		dpm_unregister_pd_class_dev(dpm);
 		policy_engine_unbind_dpm(dpm);
 		protocol_unbind_dpm(dpm->phy);
diff --git a/drivers/usb/typec/pd/devpolicy_mgr.h b/drivers/usb/typec/pd/devpolicy_mgr.h
index 94a8d5d0ad3e..e89867bc816d 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.h
+++ b/drivers/usb/typec/pd/devpolicy_mgr.h
@@ -163,6 +163,9 @@ struct devpolicy_mgr {
 	struct policy_engine *pe;
 	/* power delivery class device*/
 	struct device *pd_dev;
+	struct work_struct cable_notify_work;
+	struct mutex cable_notify_lock;
+	struct list_head cable_notify_list;
 };
 
 struct dpm_interface {
-- 
1.9.1

