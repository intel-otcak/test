From be523416cf99aae1d463b3d7a47e67a41b3d97fc Mon Sep 17 00:00:00 2001
Message-Id: <be523416cf99aae1d463b3d7a47e67a41b3d97fc.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Deepak S <deepak.s@intel.com>
Date: Sat, 31 Jan 2015 13:45:11 +0530
Subject: [PATCH 92/95] FOR_UPSTREAM [VPG]: drm/i915/vlv: Perform modeset
 based on DPMS state during resume

In kernel we have different wakeup calls which might need gfx to be in
D0 state. Since we are doing modeset during resume independent of DPMS,
we resume the Gfx device and never suspend again until we get DPMS
ON/OFF calls. This results power consumptoion due to display wells kept ON.

This patch during resume perform modeset based on DPMS state and turnoff
the Display wells if the resume request came from wakeup source.

Issue: GMINL-5601
Change-Id: Id30b46249c07263a6b87192aec630c0c4f153c3d
Signed-off-by: Deepak S <deepak.s@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.c |   36 ++++++++++++++++++++++++++++++++++--
 1 file changed, 34 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index f634256..8891f5a 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -676,6 +676,31 @@ void intel_console_resume(struct work_struct *work)
 	console_unlock();
 }
 
+static bool display_is_on(struct drm_device *dev)
+{
+	struct drm_connector *connector;
+	bool display_is_on = false;
+
+	drm_modeset_lock_all(dev);
+	list_for_each_entry(connector, &dev->mode_config.connector_list, head) {
+		if (!connector->encoder || !connector->encoder->crtc)
+			continue;
+		/*
+		 * If Display wasn't turned off, before going to suspend then
+		 * it should be re-enabled now, as we don't expect the DPMS on
+		 * call to come in that cases
+		 */
+		if (connector->dpms != DRM_MODE_DPMS_OFF) {
+			DRM_DEBUG_KMS("Display was on before suspend\n");
+			display_is_on = true;
+			break;
+		}
+	}
+	drm_modeset_unlock_all(dev);
+
+	return display_is_on;
+}
+
 static int i915_drm_thaw_early(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
@@ -743,8 +768,7 @@ static int __i915_drm_thaw(struct drm_device *dev, bool restore_gtt_mappings)
 		if (ret == 0)
 			intel_chv_huc_load(dev);
 
-		if (!IS_VALLEYVIEW(dev) || IS_CHERRYVIEW(dev)
-						|| display_is_on(dev)) {
+		if (display_is_on(dev)) {
 			drm_modeset_lock_all(dev);
 			intel_modeset_setup_hw_state(dev, true);
 			drm_modeset_unlock_all(dev);
@@ -779,6 +803,14 @@ static int __i915_drm_thaw(struct drm_device *dev, bool restore_gtt_mappings)
 	dev_priv->modeset_restore = MODESET_DONE;
 	mutex_unlock(&dev_priv->modeset_restore_lock);
 
+	/*
+	 * VLV has a special case and we need to avoid the display going to D0
+	 * until we get suspend.
+	 * */
+	if ((!IS_VALLEYVIEW(dev) || IS_CHERRYVIEW(dev))
+			&& display_is_on(dev))
+		intel_display_set_init_power(dev_priv, false);
+
 	sysfs_notify(&dev->primary->kdev->kobj, NULL, "thaw");
 
 	return 0;
-- 
1.7.9.5

