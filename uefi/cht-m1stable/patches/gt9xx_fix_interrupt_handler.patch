From: David Cohen <david.a.cohen@intel.com>
Subject: gt9xx: fix interrupt handler

Touchscreen gt911 module does not provide smooth movements some times due to
missing interrupt events. This patch fixes this error by changing gt9xx
driver's interrupt handler:

- IRQF_ONESHOT should be set, instead of manually enabling/disabling interrupt
  during hard irq and threaded irq handlers.
- If GT9XX_STATUS_REG_MASK_VALID bit is not set, we should not discard the
  event right away, but retry few times until it becomes 1.

Signed-off-by: David Cohen <david.a.cohen@intel.com>
---
 drivers/input/touchscreen/gt9xx.c |   43 +++++++++++++++++++++++---------------
 1 file changed, 27 insertions(+), 16 deletions(-)

Index: linux/drivers/input/touchscreen/gt9xx.c
===================================================================
--- linux.orig/drivers/input/touchscreen/gt9xx.c	2015-01-16 09:31:11.760317069 -0800
+++ linux/drivers/input/touchscreen/gt9xx.c	2015-01-16 09:31:35.952559742 -0800
@@ -196,14 +196,6 @@
 	kfree(buf.pointer);
 }
 
-static irqreturn_t gt9xx_irq_handler(int irq, void *arg)
-{
-	struct gt9xx_ts *ts = arg;
-
-	gt9xx_irq_disable(ts, true);
-	return IRQ_WAKE_THREAD;
-}
-
 #define GT9XX_STATUS_REG_MASK_TOUCHES		0x0F
 #define GT9XX_STATUS_REG_MASK_VALID		0x80
 
@@ -222,13 +214,33 @@
 	u8 status;
 	int ret;
 	int i;
+	int retries = 5;
 
-	ret = gt9xx_i2c_read(ts->client, GT9XX_REG_STATUS, &status, 1);
-	if (ret)
-		goto out;
+	while (--retries) {
+		ret = gt9xx_i2c_read(ts->client, GT9XX_REG_STATUS, &status, 1);
+		if (ret)
+			goto out;
+
+		if (status & GT9XX_STATUS_REG_MASK_VALID)
+			break;
+
+		/*
+		 * If we reach this place, it means the interrupt may be out of
+		 * sync with GT9XX_STATUS_REG_MASK_VALID bit. In other words,
+		 * the interrupt event is coming too early while the buffer of
+		 * events is not ready yet.
+		 * Our tests show this bit will (almost) always be set if user
+		 * is still pressing screen and we wait a bit. So we'll wait
+		 * and retry few times before discard the buffer for good.
+		 */
+		usleep_range(1000, 1500);
+	}
 
-	if (!(status & GT9XX_STATUS_REG_MASK_VALID))
+	if (!retries) {
+		/* GT9XX_STATUS_REG_MASK_VALID was never set. Bad data? */
+		dev_dbg(&ts->client->dev, "buffer status was never set\n");
 		goto out;
+	}
 
 	touches = status & GT9XX_STATUS_REG_MASK_TOUCHES;
 	if (touches > GT9XX_MAX_TOUCHES) {
@@ -284,8 +296,6 @@
 out:
 	gt9xx_i2c_write_u8(ts->client, GT9XX_REG_STATUS, 0);
 
-	gt9xx_irq_enable(ts);
-
 	return IRQ_HANDLED;
 }
 
@@ -544,8 +554,9 @@
 	if (ret)
 		return ret;
 
-	ret = devm_request_threaded_irq(dev, client->irq, gt9xx_irq_handler,
-					gt9xx_thread_handler, ts->irq_type,
+	ret = devm_request_threaded_irq(dev, client->irq, NULL,
+					gt9xx_thread_handler,
+					ts->irq_type | IRQF_ONESHOT,
 					client->name, ts);
 	if (ret) {
 		dev_err(dev, "request IRQ failed: %d", ret);
