From c0e2506ea82c65ce2aa202511675886740f73888 Mon Sep 17 00:00:00 2001
From: Sourab Gupta <sourab.gupta@intel.com>
Date: Tue, 1 Mar 2016 14:17:44 +0530
Subject: [PATCH 1/2] SQUASHME! [VPG]: drm/i915: Handle the fallocate/swap
 conditions in memtracker

The fallocate ioctl allows any specific memory pages to be unmapped
and later remapped if required. Thus the obj->base.size is not always
equal to the actual number of physical memory pages being used.
The same condition may arise when the swap is enabled, which may lead to
object pages not resident in RAM, even while object is in allocated
state.

This patch adds support in memtracker to handle these cases, by relying on
shmem inode info for retrieving object pages resident in RAM instead of
obj size used earlier.

    SQUASHME! - This patch should be squashed into the following patch:
	Author: Sourab Gupta <sourab.gupta@intel.com>
	Date:   Mon Aug 11 13:12:04 2014 +0530
	Change-Id: I02552d54a753fcfb94b5bdd9bc9c82702bbf514d
	MUST_REBASE [VPG]: drm/i915: Sysfs interface to get GFX shmem usage
		stats per process

v2: Having u64 data type for nr_pages instead of unsigned long

Change-Id: I7e3398d89ada56a390da90ec7dc404730da013d5
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-29134
Signed-off-by: Sourab Gupta <sourab.gupta@intel.com>
Reviewed-on: https://android.intel.com:443/484424
Reviewed-on: https://android.intel.com:443/507608
---
 drivers/gpu/drm/i915/i915_gem_debug.c | 64 +++++++++++++++++------------------
 1 file changed, 31 insertions(+), 33 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_debug.c b/drivers/gpu/drm/i915/i915_gem_debug.c
index a6e497a..43a3764 100644
--- a/drivers/gpu/drm/i915/i915_gem_debug.c
+++ b/drivers/gpu/drm/i915/i915_gem_debug.c
@@ -243,9 +243,9 @@ out:
 	return 0;
 }
 
-static int i915_obj_get_shmem_pages_alloced(struct drm_i915_gem_object *obj)
+static unsigned long i915_obj_get_shmem_pages_alloced(struct drm_i915_gem_object *obj)
 {
-	int ret;
+	unsigned long ret;
 
 	if (obj->base.filp) {
 		struct inode *inode = file_inode(obj->base.filp);
@@ -605,27 +605,29 @@ i915_describe_obj(struct get_obj_stats_buf *obj_stat_buf,
 	struct per_file_obj_mem_info *stats = &pid_entry->stats;
 	int obj_shared_count = 0;
 	bool discard = false;
-
+	u64 nr_bytes = 0;
 
 	obj_shared_count = i915_obj_shared_count(obj, pid_entry, &discard);
 	if (obj_shared_count < 0)
 		return obj_shared_count;
 
+	if (!obj->stolen)
+		nr_bytes = i915_obj_get_shmem_pages_alloced(obj)*PAGE_SIZE;
+
 	if (!discard && !obj->stolen &&
-			(obj->madv != __I915_MADV_PURGED) &&
-			(i915_obj_get_shmem_pages_alloced(obj) != 0)) {
+			(obj->madv != __I915_MADV_PURGED) && (nr_bytes != 0)) {
 		if (obj_shared_count > 1)
 			stats->phys_space_shared_proportion +=
-				obj->base.size/obj_shared_count;
+				(nr_bytes)/obj_shared_count;
 		else
-			stats->phys_space_allocated_priv +=
-				obj->base.size;
+			stats->phys_space_allocated_priv += nr_bytes;
 	}
 
 	err_printf(m,
-		"%p: %7zdK  %s    %s     %s      %s     %s      %s       %s     ",
+		"%p: %7zdK  %10zdK %s    %s     %s      %s     %s      %s       %s     ",
 		   &obj->base,
 		   obj->base.size / 1024,
+		   (size_t)nr_bytes / 1024,
 		   get_pin_flag(obj),
 		   get_tiling_flag(obj),
 		   obj->dirty ? "Y" : "N",
@@ -638,7 +640,7 @@ i915_describe_obj(struct get_obj_stats_buf *obj_stat_buf,
 		err_puts(m, " purged    ");
 	else if (obj->madv == I915_MADV_DONTNEED)
 		err_puts(m, " purgeable   ");
-	else if (i915_obj_get_shmem_pages_alloced(obj) != 0)
+	else if (obj->has_backing_pages != 0)
 		err_puts(m, " allocated   ");
 	else
 		err_puts(m, "             ");
@@ -749,31 +751,27 @@ i915_drm_gem_object_per_file_summary(int id, void *ptr, void *data)
 		stats->stolen_space_allocated += obj->base.size;
 	} else if (obj->madv == __I915_MADV_PURGED) {
 		stats->num_obj_purged++;
-	} else if (obj->madv == I915_MADV_DONTNEED) {
-		stats->num_obj_purgeable++;
-		stats->num_obj_allocated++;
-		if (i915_obj_get_shmem_pages_alloced(obj) != 0) {
-			stats->phys_space_purgeable += obj->base.size;
+	} else {
+		u64 nr_bytes =
+			i915_obj_get_shmem_pages_alloced(obj)*PAGE_SIZE;
+
+		if (obj->has_backing_pages)
+			stats->num_obj_allocated++;
+
+		if (obj->madv == I915_MADV_DONTNEED) {
+			stats->num_obj_purgeable++;
+			if (nr_bytes != 0)
+				stats->phys_space_purgeable += nr_bytes;
+		}
+
+		if (nr_bytes != 0) {
 			if (obj_shared_count > 1) {
-				stats->phys_space_allocated_shared +=
-					obj->base.size;
+				stats->phys_space_allocated_shared += nr_bytes;
 				stats->phys_space_shared_proportion +=
-					obj->base.size/obj_shared_count;
+					nr_bytes/obj_shared_count;
 			} else
-				stats->phys_space_allocated_priv +=
-					obj->base.size;
-		} else
-			WARN_ON(1);
-	} else if (i915_obj_get_shmem_pages_alloced(obj) != 0) {
-		stats->num_obj_allocated++;
-			if (obj_shared_count > 1) {
-				stats->phys_space_allocated_shared +=
-					obj->base.size;
-				stats->phys_space_shared_proportion +=
-					obj->base.size/obj_shared_count;
-			}
-		else
-			stats->phys_space_allocated_priv += obj->base.size;
+				stats->phys_space_allocated_priv += nr_bytes;
+		}
 	}
 	if (obj->fault_mappable) {
 		stats->num_obj_fault_mappable++;
@@ -980,7 +978,7 @@ __i915_gem_get_obj_info(struct drm_i915_error_state_buf *m,
 
 		file_priv_reqd = file_priv;
 		err_puts(m,
-			"\n Obj Identifier       Size Pin Tiling Dirty Shared Vmap Stolen Mappable  AllocState Global/PP  GttOffset (PID: handle count: user virt addrs)\n");
+			"\n Obj Identifier   Obj-Size Resident-Size Pin Tiling Dirty Shared Vmap Stolen Mappable  AllocState Global/PP  GttOffset (PID: handle count: user virt addrs)\n");
 		spin_lock(&file->table_lock);
 		ret = idr_for_each(&file->object_idr,
 				&i915_drm_gem_obj_info, &obj_stat_buf);
-- 
1.9.1

