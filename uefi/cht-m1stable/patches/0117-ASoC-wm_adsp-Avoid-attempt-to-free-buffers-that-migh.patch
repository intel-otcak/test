From abf3e6d1cd2c5729135245bffb8446359b1e859e Mon Sep 17 00:00:00 2001
From: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date: Wed, 12 Feb 2014 13:58:56 +0000
Subject: [PATCH 117/351] ASoC: wm_adsp: Avoid attempt to free buffers that
 might still be in use

We should not free any buffers associated with writing out coefficients
to the DSP until all the async writes have completed. This patch updates
the out of memory path when allocating a new buffer to include a call to
regmap_async_complete.

Change-Id: Id062aad319255f05f8203a64e558fb6c4e65f3b2
Reported-by: JS Park <aitdark.park@samsung.com>
Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Signed-off-by: Nikesh Oswal <Nikesh.Oswal@wolfsonmicro.com>
---
 sound/soc/codecs/wm_adsp.c |   17 +++++++++++------
 1 file changed, 11 insertions(+), 6 deletions(-)

--- linux.orig/sound/soc/codecs/wm_adsp.c
+++ linux/sound/soc/codecs/wm_adsp.c
@@ -1598,7 +1598,8 @@ static int wm_adsp_load_coeff(struct wm_
 	const struct wm_adsp_region *mem;
 	struct wm_adsp_alg_region *alg_region;
 	const char *region_name;
-	int ret, pos, blocks, type, offset, reg;
+	int ret = 0;
+	int err, pos, blocks, type, offset, reg;
 	char *file;
 	struct wm_adsp_buf *buf;
 	int tmp;
@@ -1740,7 +1741,7 @@ static int wm_adsp_load_coeff(struct wm_
 			if (!buf) {
 				adsp_err(dsp, "Out of memory\n");
 				ret = -ENOMEM;
-				goto out_fw;
+				goto out_async;
 			}
 
 			adsp_dbg(dsp, "%s.%d: Writing %d bytes at %x\n",
@@ -1764,14 +1765,18 @@ static int wm_adsp_load_coeff(struct wm_
 		blocks++;
 	}
 
-	ret = regmap_async_complete(regmap);
-	if (ret != 0)
-		adsp_err(dsp, "Failed to complete async write: %d\n", ret);
-
 	if (pos > firmware->size)
 		adsp_warn(dsp, "%s.%d: %zu bytes at end of file\n",
 			  file, blocks, pos - firmware->size);
 
+out_async:
+	err = regmap_async_complete(regmap);
+	if (err != 0) {
+		adsp_err(dsp, "Failed to complete async write: %d\n", err);
+		if (!ret)
+			ret = err;
+	}
+
 out_fw:
 	regmap_async_complete(regmap);
 	release_firmware(firmware);
