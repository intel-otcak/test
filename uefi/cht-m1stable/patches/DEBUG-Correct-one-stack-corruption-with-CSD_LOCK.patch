From b04d60d24bae3919c248b80bd3bc39d56f285072 Mon Sep 17 00:00:00 2001
From: Emmanuel Berthier <emmanuel.berthier@intel.com>
Date: Mon, 4 May 2015 11:58:27 +0200
Subject: [PATCH] [DEBUG] Correct one stack corruption with CSD_LOCK

The idea of the bug is the following:
1 - A core X asks a core Y to execute a smp function and waits for a lock
released when done (see generic_exec_single)
2 - A core Y executes the smp function, releases the lock and reset a lock's
variable (cpu variable)

The race condition is when the core Y clears the lock's bit CSD_FLAG_LOCK and
the core X reuses the memory holding the lock before the core Y finally resets
the lock's cpu variable.

Patch on a Debug patch. Intel Internal use only.

Change-Id: I554ad2570c572c723a9645be86cc6f135903513c
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-33668
Signed-off-by: Emmanuel Berthier <emmanuel.berthier@intel.com>
---
 kernel/smp.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/smp.c b/kernel/smp.c
index 9208ebd03758..a15dda9c995e 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -99,7 +99,7 @@ static void csd_lock_wait(struct call_single_data *csd)
 		if (time_after(jiffies, timeout)) {
 			timeout = jiffies + 5 * HZ;
 			pr_emerg("BUG: CPU %d waiting for CSD lock held by CPU %d\n",
-				get_cpu(), csd->cpu);
+				smp_processor_id(), csd->cpu);
 			dump_stack();
 			trigger_all_cpu_backtrace();
 		}
@@ -124,13 +124,13 @@ static void csd_unlock(struct call_single_data *csd)
 {
 	WARN_ON((csd->flags & CSD_FLAG_WAIT) && !(csd->flags & CSD_FLAG_LOCK));
 
+	csd->cpu = -1;
 	/*
 	 * ensure we're all done before releasing data:
 	 */
 	smp_mb();
 
 	csd->flags &= ~CSD_FLAG_LOCK;
-	csd->cpu = -1;
 }
 
 /*
-- 
1.9.1

