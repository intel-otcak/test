From 5d924c5b8415fa51b0f7db459aa962c3de644b7d Mon Sep 17 00:00:00 2001
From: Jenny TC <jenny.tc@intel.com>
Date: Tue, 9 Dec 2014 09:41:14 +0530
Subject: [PATCH 1/2] power_supply: Enable Raw Current Throttling support

Enable charge current throttling to allow throttling services
to select charge current throttling with 100mA granularity. Maximum
throttling state is decided based on the max charger current setting
for the charger.

Change-Id: Ic5d70001fcff9069e943e8c3325dd240b104f7e6
Signed-off-by: Jenny TC <jenny.tc@intel.com>
---
 drivers/power/Kconfig                |  5 +++++
 drivers/power/power_supply_charger.c | 10 ++++++----
 drivers/power/power_supply_charger.h | 35 ++++++++++++++++++++++++++++-------
 3 files changed, 39 insertions(+), 11 deletions(-)

diff --git a/drivers/power/Kconfig b/drivers/power/Kconfig
index becdeae..f4f3027 100644
--- a/drivers/power/Kconfig
+++ b/drivers/power/Kconfig
@@ -37,6 +37,11 @@ config POWER_SUPPLY_BATTID
          framework. The framework would allow different battery identification
          drivers to interface with power supply subsystem. Also it allows consumer
          drivers to register for notification from the power_supply subsystem.
+config RAW_CC_THROTTLE
+	bool "Raw Charge Current Throttle"
+	help
+	  Say Y here to enable raw charge current throttling. This feature will
+	  expose n states where n is defined as (max_current_mA/100_mA)
 
 config POWER_SUPPLY_DEBUG
 	bool "Power supply debug"
diff --git a/drivers/power/power_supply_charger.c b/drivers/power/power_supply_charger.c
index bd21e62..5422826 100644
--- a/drivers/power/power_supply_charger.c
+++ b/drivers/power/power_supply_charger.c
@@ -1009,14 +1009,13 @@ int psy_charger_throttle_charger(struct power_supply *psy,
 	if (!IS_PRESENT(psy))
 		return 0;
 
-	if (state < 0 || state > MAX_THROTTLE_STATE(psy))
+	if (state < 0 || state >= MAX_THROTTLE_STATE(psy))
 		return -EINVAL;
 
 	mutex_lock(&psy_chrgr.evt_lock);
 
 	switch THROTTLE_ACTION(psy, state)
 	{
-
 		case PSY_THROTTLE_DISABLE_CHARGER:
 			SET_MAX_CC(psy, 0);
 			disable_charger(psy);
@@ -1026,10 +1025,10 @@ int psy_charger_throttle_charger(struct power_supply *psy,
 			disable_charging(psy);
 			break;
 		case PSY_THROTTLE_CC_LIMIT:
-			SET_MAX_CC(psy, THROTTLE_CC_VALUE(psy, state));
+			SET_MAX_CC(psy, THROTTLE_VALUE(psy, state));
 			break;
 		case PSY_THROTTLE_INPUT_LIMIT:
-			set_inlmt(psy, THROTTLE_CC_VALUE(psy, state));
+			set_inlmt(psy, THROTTLE_VALUE(psy, state));
 			break;
 		default:
 			pr_err("%s:Invalid throttle action for %s\n",
@@ -1059,6 +1058,9 @@ int power_supply_register_charger(struct power_supply *psy)
 		INIT_WORK(&psy_chrgr.algo_trigger_work, trigger_algo_psy_class);
 		psy_chrgr.is_cable_evt_reg = true;
 	}
+
+	SET_MAX_THROTTLE_STATE(psy);
+
 	return ret;
 }
 EXPORT_SYMBOL(power_supply_register_charger);
diff --git a/drivers/power/power_supply_charger.h b/drivers/power/power_supply_charger.h
index 4f64a70..d533df7 100644
--- a/drivers/power/power_supply_charger.h
+++ b/drivers/power/power_supply_charger.h
@@ -209,21 +209,42 @@ static inline int get_ps_int_property(struct power_supply *psy,
 	(bat_cache.health != bat_prop.health) || \
 	(bat_cache.throttle_state != bat_prop.throttle_state))
 
-#define THROTTLE_ACTION(psy, state)\
-		(((psy->throttle_states)+state)->throttle_action)
-
 #define MAX_THROTTLE_STATE(psy)\
-		((psy->num_throttle_states))
+		(get_ps_int_property(psy,\
+			POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX))
 
 #define CURRENT_THROTTLE_STATE(psy)\
 		(get_ps_int_property(psy,\
 			POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT))
 
-#define CURRENT_THROTTLE_ACTION(psy)\
-		THROTTLE_ACTION(psy, CURRENT_THROTTLE_STATE(psy))
+#ifndef CONFIG_RAW_CC_THROTTLE
+
+#define THROTTLE_ACTION(psy, state)\
+		(((psy->throttle_states)+state)->throttle_action)
 
-#define THROTTLE_CC_VALUE(psy, state)\
+#define THROTTLE_VALUE(psy, state)\
 		(((psy->throttle_states)+state)->throttle_val)
+#define SET_MAX_THROTTLE_STATE(psy) \
+		(set_ps_int_property(psy,\
+			POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX,\
+			psy->num_throttle_states + 1))
+#else
+#define RAW_CC_STEP 100 /* 100 ma*/
+#define THROTTLE_ACTION(psy, state)\
+		(CURRENT_THROTTLE_STATE(psy) < (MAX_THROTTLE_STATE(psy) - 1) ?\
+			PSY_THROTTLE_CC_LIMIT : PSY_THROTTLE_DISABLE_CHARGING)
+
+#define THROTTLE_VALUE(psy, state)\
+		((MAX_THROTTLE_STATE(psy) - CURRENT_THROTTLE_STATE(psy) - 1) * \
+			RAW_CC_STEP)
+#define SET_MAX_THROTTLE_STATE(psy)\
+		(set_ps_int_property(psy,\
+			POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX,\
+			DIV_ROUND_CLOSEST(MAX_CC(psy), RAW_CC_STEP) + 1))
+#endif
+
+#define CURRENT_THROTTLE_ACTION(psy)\
+		THROTTLE_ACTION(psy, CURRENT_THROTTLE_STATE(psy))
 
 #define IS_CHARGER_CAN_BE_ENABLED(psy) \
 	(CURRENT_THROTTLE_ACTION(psy) != PSY_THROTTLE_DISABLE_CHARGER)
-- 
1.9.1

