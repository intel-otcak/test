From f10443ce60eb53b4c5205927d1857fd31df66b03 Mon Sep 17 00:00:00 2001
From: Zhuang Jin Can <jin.can.zhuang@intel.com>
Date: Fri, 3 Apr 2015 23:28:50 +0800
Subject: [PATCH] xhci: prevent bus suspend if SS port is resuming

xhci_bus_suspend() suspends a port if the link is in U0. However, if the
link is just resumed and enters U0, it should not suspend it. Instead,
it should returns -EBUSY. hub_event thread will then be able to process
the wakeup event of the port.

Change-Id: I2c8263e4f9ab6e14bcf4a8bc29d9bede7d85b78d
Signed-off-by: Zhuang Jin Can <jin.can.zhuang@intel.com>
---
 drivers/usb/core/hub.c      |   14 ++++++++++++++
 drivers/usb/host/xhci-hub.c |    7 +++++++
 include/linux/usb/hcd.h     |    1 +
 3 files changed, 22 insertions(+)

--- linux.orig/drivers/usb/core/hub.c
+++ linux/drivers/usb/core/hub.c
@@ -606,6 +606,20 @@ void usb_wakeup_notification(struct usb_
 }
 EXPORT_SYMBOL_GPL(usb_wakeup_notification);
 
+unsigned long usb_hub_port_waking_up(struct usb_device *hdev)
+{
+	struct usb_hub *hub;
+
+	if (!hdev)
+		return 0;
+
+	hub = usb_hub_to_struct_hub(hdev);
+	if (!hub)
+		return 0;
+	return *hub->wakeup_bits;
+}
+EXPORT_SYMBOL_GPL(usb_hub_port_waking_up);
+
 /* completion function, fires on port status changes and various faults */
 static void hub_irq(struct urb *urb)
 {
--- linux.orig/drivers/usb/host/xhci-hub.c
+++ linux/drivers/usb/host/xhci-hub.c
@@ -1187,6 +1187,13 @@ int xhci_bus_suspend(struct usb_hcd *hcd
 			xhci_dbg(xhci, "suspend failed because a port is resuming\n");
 			return -EBUSY;
 		}
+		if (usb_hub_port_waking_up(hcd->self.root_hub)) {
+			spin_unlock_irqrestore(&xhci->lock, flags);
+			xhci_dbg(xhci,
+				"suspend failed as a SS port is resuming\n");
+			return -EBUSY;
+		}
+
 	}
 
 	port_index = max_ports;
--- linux.orig/include/linux/usb/hcd.h
+++ linux/include/linux/usb/hcd.h
@@ -463,6 +463,7 @@ extern void usb_hc_died(struct usb_hcd *
 extern void usb_hcd_poll_rh_status(struct usb_hcd *hcd);
 extern void usb_wakeup_notification(struct usb_device *hdev,
 		unsigned int portnum);
+extern unsigned long usb_hub_port_waking_up(struct usb_device *hdev);
 
 extern void usb_hcd_start_port_resume(struct usb_bus *bus, int portnum);
 extern void usb_hcd_end_port_resume(struct usb_bus *bus, int portnum);
