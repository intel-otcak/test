From 9c6c3facdd5459962d529a3f36c8bf09456b3490 Mon Sep 17 00:00:00 2001
Message-Id: <9c6c3facdd5459962d529a3f36c8bf09456b3490.1427265330.git.chang-joon.lee@intel.com>
In-Reply-To: <b4c66aa6a04d2be0fca9fa4448c7188a581a57a5.1427265330.git.chang-joon.lee@intel.com>
References: <b4c66aa6a04d2be0fca9fa4448c7188a581a57a5.1427265330.git.chang-joon.lee@intel.com>
From: John Harrison <John.C.Harrison@Intel.com>
Date: Mon, 9 Mar 2015 18:14:14 +0000
Subject: [PATCH 17/22] SQUASHME! [VPG]: drm/i915: Fix location of watchdog
 check

There is a user requestable watchdog facility in the hardware. It only
exists on certain rings thus requesting it on other rings should be an
error that causes the execbuffer call to fail. Unfortunately, the
split of the execbuffer code for the scheduler put the watchdog
validity test on the wrong side of the split. Thus the failure could
not be reported to user land and the execbuffer call itself succeeded
(even though the batch buffer would fail to be executed).

This patch moves the validation test to the front half of the exec
buffer code. Errors will now be reported to user land.

This patch could be squashed into the one that originally moved the
watchdog enable code into the back half of execbuffer. That is, fix
the original patch to split the validation check from the hardware
operation. The original commit was:
  commit 50976e1376c6851ce162904a91a99dc9897ce2df
  Author: John Harrison <John.C.Harrison@Intel.com>
  Date:   Wed Apr 2 16:57:46 2014 +0100

  FOR_UPSTREAM [VPG]: drm/i915: Prelude to splitting i915_gem_do_execbuffer in two

  The scheduler decouples the submission of batch buffers to the
  driver with their submission to the hardware. This basically means
  splitting the execbuffer() function in half. This change rearranges
  some code ready for the split to occur.

  Change-Id: Icc9c8afaac18821f3eb8a151a49f918f90c068a3
  For: VIZ-1587
  Signed-off-by: John Harrison <John.C.Harrison@Intel.com>

Change-Id: I0dd260641486a2dbd7e1362688b6957c78fce7c9
For: VIZ-1587
For: VIZ-4741
Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
---
 drivers/gpu/drm/i915/i915_gem_execbuffer.c |   22 +++++++++++-----------
 drivers/gpu/drm/i915/intel_lrc.c           |   12 +-----------
 2 files changed, 12 insertions(+), 22 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index 0eb25f0..c8e07ca 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -1183,7 +1183,6 @@ int i915_gem_ringbuffer_submission_final(struct i915_execbuffer_params *params)
 	struct intel_engine_cs  *ring = params->ring;
 	u64 exec_start, exec_len;
 	int ret, i;
-	bool watchdog_running = 0;
 	uint32_t min_space;
 
 	/* The mutex must be acquired before calling this function */
@@ -1240,18 +1239,9 @@ int i915_gem_ringbuffer_submission_final(struct i915_execbuffer_params *params)
 
 	/* Start watchdog timer */
 	if (params->args_flags & I915_EXEC_ENABLE_WATCHDOG) {
-		if (!intel_ring_supports_watchdog(ring)) {
-			DRM_ERROR("%s does NOT support watchdog timeout!\n",
-					ring->name);
-			ret = -EINVAL;
-			goto error;
-		}
-
 		ret = intel_ring_start_watchdog(ring);
 		if (ret)
 			goto error;
-
-		watchdog_running = 1;
 	}
 
 	/* Request matches? */
@@ -1335,7 +1325,7 @@ int i915_gem_ringbuffer_submission_final(struct i915_execbuffer_params *params)
 		goto error;
 
 	/* Cancel watchdog timer */
-	if (watchdog_running) {
+	if (params->args_flags & I915_EXEC_ENABLE_WATCHDOG) {
 		ret = intel_ring_stop_watchdog(ring);
 		if (ret)
 			goto error;
@@ -1532,6 +1522,16 @@ i915_gem_do_execbuffer(struct drm_device *dev, void *data,
 		goto pre_mutex_err;
 	}
 
+	if (args->flags & I915_EXEC_ENABLE_WATCHDOG) {
+		if (!intel_ring_supports_watchdog(ring)) {
+			DRM_ERROR("%s does NOT support watchdog timeout!\n",
+					ring->name);
+			mutex_unlock(&dev->struct_mutex);
+			ret = -EINVAL;
+			goto pre_mutex_err;
+		}
+	}
+
 	i915_gem_context_reference(ctx);
 
 	if (ctx->ppgtt)
diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index ab76d52..9ea072f 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -1470,7 +1470,6 @@ int intel_execlists_submission_final(struct i915_execbuffer_params *params)
 	struct intel_ringbuffer *ringbuf = params->ctx->engine[ring->id].ringbuf;
 	u64 exec_start;
 	int ret;
-	bool watchdog_running = 0;
 	uint32_t min_space;
 
 	/* The mutex must be acquired before calling this function */
@@ -1520,18 +1519,9 @@ int intel_execlists_submission_final(struct i915_execbuffer_params *params)
 
 	/* Start watchdog timer */
 	if (params->args_flags & I915_EXEC_ENABLE_WATCHDOG) {
-		if (!intel_ring_supports_watchdog(ring)) {
-			DRM_ERROR("%s does NOT support watchdog timeout!\n",
-					ring->name);
-			ret = -EINVAL;
-			goto error;
-		}
-
 		ret = gen8_ring_start_watchdog(ringbuf);
 		if (ret)
 			goto error;
-
-		watchdog_running = 1;
 	}
 
 	/* Request matches? */
@@ -1594,7 +1584,7 @@ int intel_execlists_submission_final(struct i915_execbuffer_params *params)
 		goto error;
 
 	/* Cancel watchdog timer */
-	if (watchdog_running) {
+	if (params->args_flags & I915_EXEC_ENABLE_WATCHDOG) {
 		ret = gen8_ring_stop_watchdog(ringbuf);
 		if (ret)
 			return ret;
-- 
1.7.9.5

