From 8212c58135fbdd1fbe588a8dcea96b7d640ead42 Mon Sep 17 00:00:00 2001
From: huchen2 <hu1.chen@intel.com>
Date: Mon, 22 Dec 2014 22:03:20 +0800
Subject: [PATCH] REVERTME: Fix racing timers in suspend process

BZ: GMINL-4192

We notice similar patch and discussion on https://lkml.org/lkml/2014/7/25/635
Different with this patch, that patch also take hibernation process into
account.

If kernel sovle the race in future, this patch can be reverted.

Detail of the issue:

During "all radio on suspend" test (google acceptance test), we observed
that sometimes the system wake immediately, just after it enter mwait.
The trace shows that the racing tick_sched_timer cause this wakeup.

The race happening in a couple of location is:

  1. disable IRQs   		(e.g. arch_suspend_disable_irqs())
     ...
  2. syscore_suspend
      -> timekeeping_suspend()
       -> clockevents_notify(SUSPEND)
        -> tick_suspend()   	(timers are turned off here)
     ...
  3. mwait            		(wait for wake-IRQ here)

Between steps 1 and 2 the timers can still generate interrupts that are
not handled and stay pending until step 3. That pending IRQ causes an
immediate - spurious - wake. In our trace, it's always tick_sched_timer.

The solution is to move the clockevents suspend/resume notification out
of the syscore_suspend step and explictly call them at the appropriate
time in the suspend paths. I.e. timers are suspend before IRQs get
disabled.

Change-Id: I11df90b1433653d768a46e076633798b5d5822c0
Signed-off-by: huchen2 <hu1.chen@intel.com>

---
 kernel/power/suspend.c    |    4 ++++
 kernel/time/timekeeping.c |    1 -
 2 files changed, 4 insertions(+), 1 deletion(-)

--- linux.orig/kernel/power/suspend.c
+++ linux/kernel/power/suspend.c
@@ -12,6 +12,7 @@
 #include <linux/delay.h>
 #include <linux/errno.h>
 #include <linux/init.h>
+#include <linux/clockchips.h>
 #include <linux/console.h>
 #include <linux/cpu.h>
 #include <linux/syscalls.h>
@@ -238,6 +239,9 @@ static int suspend_enter(suspend_state_t
 		goto Enable_cpus;
 	}
 
+	/* quiesce timer, sched_timer etc */
+	clockevents_notify(CLOCK_EVT_NOTIFY_SUSPEND, NULL);
+
 	arch_suspend_disable_irqs();
 	BUG_ON(!irqs_disabled());
 
--- linux.orig/kernel/time/timekeeping.c
+++ linux/kernel/time/timekeeping.c
@@ -1030,7 +1030,6 @@ static int timekeeping_suspend(void)
 	write_seqcount_end(&timekeeper_seq);
 	raw_spin_unlock_irqrestore(&timekeeper_lock, flags);
 
-	clockevents_notify(CLOCK_EVT_NOTIFY_SUSPEND, NULL);
 	clocksource_suspend();
 	clockevents_suspend();
 
