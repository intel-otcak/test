From 082ffbb23a5e840ec3431cb2b76401df9e0ebbb8 Mon Sep 17 00:00:00 2001
From: George Sandu <georgex.sandu@intel.com>
Date: Thu, 22 Jan 2015 16:41:02 +0100
Subject: [PATCH] mcd: Implement M.2 power-on/off on different platforms

The M.2 modems power-on/off sequence differ from platform to
platform in terms of: signals, boot sequence and timings.
This patch makes the boot sequence more flexible by moving all
the modem pin controls (regardless if GPIO or PMIC) to one
single platform specific function: power_on. This function
will be called by the common function: mdm_ctrl_cold_boot.
This patch adds also the specific functions for M.2 controls
on the current available platforms.

Change-Id: I0bd3625c42f521bc62929a1c76f7385b6713edc3
Signed-off-by: George Sandu <georgex.sandu@intel.com>
---
 drivers/staging/modem_control/mcd_acpi.c |  19 +-
 drivers/staging/modem_control/mcd_cpu.c  |  61 ++++++-
 drivers/staging/modem_control/mcd_cpu.h  |   1 +
 drivers/staging/modem_control/mcd_mdm.c  | 305 +++++++++++++++++++++++++------
 drivers/staging/modem_control/mcd_mdm.h  |  10 +-
 drivers/staging/modem_control/mdm_ctrl.c |  76 +++-----
 drivers/staging/modem_control/mdm_util.c |   6 +-
 include/linux/mdm_ctrl.h                 |  12 ++
 include/linux/mdm_ctrl_board.h           |  11 +-
 9 files changed, 373 insertions(+), 128 deletions(-)

diff --git a/drivers/staging/modem_control/mcd_acpi.c b/drivers/staging/modem_control/mcd_acpi.c
index 903f6bf8aaab..5533580c656c 100644
--- a/drivers/staging/modem_control/mcd_acpi.c
+++ b/drivers/staging/modem_control/mcd_acpi.c
@@ -331,16 +331,23 @@ int mcd_finalize_cpu_data(struct mcd_base_info *mcd_reg_info)
 
 	/* finalize cpu data */
 	if (mcd_reg_info->board_type == BOARD_NGFF) {
-		cpu_data->gpio_wwan_disable = cpu_data->entries[0];
-		cpu_data->gpio_rst_bbn = cpu_data->entries[2];
-		cpu_data->gpio_rst_usbhub = cpu_data->entries[4];
+		cpu_data->gpio_pwr_on = cpu_data->entries[0];
+		cpu_data->gpio_wwan_disable = cpu_data->entries[1];
+		cpu_data->gpio_wake_on_wwan = cpu_data->entries[2];
+		cpu_data->gpio_rst_bbn = cpu_data->entries[3];
 
-		pr_info("%s: Setup GPIOs(WWAN_Disable:%d, RB:%d, rst_usbhub:%d)\n",
+		pr_info("%s: Setup GPIOs(PO:%d, WWAN_D:%d, WWAN_W:%d, RB:%d)",
 				__func__,
+				desc_to_gpio(cpu_data->gpio_pwr_on),
 				desc_to_gpio(cpu_data->gpio_wwan_disable),
-				desc_to_gpio(cpu_data->gpio_rst_bbn),
+				desc_to_gpio(cpu_data->gpio_wake_on_wwan),
+				desc_to_gpio(cpu_data->gpio_rst_bbn));
+		if (mcd_reg_info->usb_hub_ctrl) {
+			cpu_data->gpio_rst_usbhub = cpu_data->entries[4];
+			pr_info("%s: Setup GPIOs(RST_HUB:%d)",
+				__func__,
 				desc_to_gpio(cpu_data->gpio_rst_usbhub));
-
+		}
 	} else if (mcd_reg_info->board_type == BOARD_AOB) {
 		cpu_data->gpio_pwr_on = cpu_data->entries[0];
 		cpu_data->gpio_cdump = cpu_data->entries[1];
diff --git a/drivers/staging/modem_control/mcd_cpu.c b/drivers/staging/modem_control/mcd_cpu.c
index 73b7ae4f68ac..0f2fef66ed97 100644
--- a/drivers/staging/modem_control/mcd_cpu.c
+++ b/drivers/staging/modem_control/mcd_cpu.c
@@ -68,7 +68,8 @@ static inline int mdm_ctrl_configure_gpio(struct gpio_desc *gpio,
 
 int cpu_init_gpio(void *data)
 {
-	struct mdm_ctrl_cpu_data *cpu_data = data;
+	struct mdm_info *mdm = data;
+	struct mdm_ctrl_cpu_data *cpu_data = mdm->pdata->cpu_data;
 	int ret;
 
 	pr_debug("cpu_init");
@@ -196,23 +197,63 @@ int get_gpio_pwr(void *data)
 		return INVALID_GPIO;
 }
 
-int cpu_init_gpio_ngff(void *data)
+int get_gpio_rst_usbhub(void *data)
 {
 	struct mdm_ctrl_cpu_data *cpu_data = data;
+	if (cpu_data->gpio_rst_usbhub)
+		return desc_to_gpio(cpu_data->gpio_rst_usbhub);
+	else
+		return INVALID_GPIO;
+}
+
+int cpu_init_gpio_ngff(void *data)
+{
+	struct mdm_info *mdm = data;
+	struct mdm_ctrl_cpu_data *cpu_data = mdm->pdata->cpu_data;
 	int ret;
 
-	pr_debug("cpu_init");
+	pr_debug("cpu_init NGFF");
 
 	/* Configure the RESET_BB gpio */
-	ret = mdm_ctrl_configure_gpio(cpu_data->gpio_rst_bbn, 1, 0);
-	if (ret)
-		goto out;
+	if (cpu_data->gpio_rst_bbn) {
+		ret = mdm_ctrl_configure_gpio(cpu_data->gpio_rst_bbn, 1, 0);
+		if (ret) {
+			pr_err("Can't configure RST_BBN GPIO");
+			goto out;
+		}
+	} else
+		pr_info("No RST_BBN GPIO set");
 
-	ret = mdm_ctrl_configure_gpio(cpu_data->gpio_rst_usbhub, 1, 1);
+	if (mdm->pdata->pwr_on_ctrl == POWER_ON_GPIO) {
+		if (cpu_data->gpio_pwr_on) {
+			ret = mdm_ctrl_configure_gpio(cpu_data->gpio_pwr_on,
+				1, 0);
+			if (ret) {
+				pr_err("Can't configure Power ON GPIO");
+				goto out;
+			}
+		} else
+			pr_info("No PWR_ON GPIO set");
+	}
 
-	pr_info(DRVNAME ": GPIO (rst_bbn: %d, rst_usb_hub: %d)\n",
-				desc_to_gpio(cpu_data->gpio_rst_bbn),
-				desc_to_gpio(cpu_data->gpio_rst_usbhub));
+	if (mdm->pdata->usb_hub_ctrl) {
+		if (cpu_data->gpio_rst_usbhub) {
+			ret = mdm_ctrl_configure_gpio(cpu_data->gpio_rst_usbhub,
+				1, 1);
+			if (ret) {
+				pr_err("Can't configure Rst USBHUB GPIO");
+				goto out;
+			}
+		} else
+			pr_info("No Rst USBHUB GPIO");
+	}
+
+	pr_info(DRVNAME ": GPIO (rst_bbn: %d)\n",
+				desc_to_gpio(cpu_data->gpio_rst_bbn));
+
+	/* No irq for the NGFF module */
+	cpu_data->irq_cdump = INVALID_GPIO;
+	cpu_data->irq_reset = INVALID_GPIO;
 
 	return 0;
 
diff --git a/drivers/staging/modem_control/mcd_cpu.h b/drivers/staging/modem_control/mcd_cpu.h
index 26b8c27654e5..4561ebc3a4a5 100644
--- a/drivers/staging/modem_control/mcd_cpu.h
+++ b/drivers/staging/modem_control/mcd_cpu.h
@@ -27,6 +27,7 @@ int get_gpio_irq_rst(void *data);
 int get_gpio_mdm_state(void *data);
 int get_gpio_rst(void *data);
 int get_gpio_pwr(void *data);
+int get_gpio_rst_usbhub(void *data);
 int cpu_init_gpio_ngff(void *data);
 
 #endif
diff --git a/drivers/staging/modem_control/mcd_mdm.c b/drivers/staging/modem_control/mcd_mdm.c
index 8b19852f28e3..d67f5fd8d99c 100644
--- a/drivers/staging/modem_control/mcd_mdm.c
+++ b/drivers/staging/modem_control/mcd_mdm.c
@@ -31,6 +31,18 @@
 
 #include <linux/mdm_ctrl.h>
 
+
+/* NGFF specific timings */
+#define HUB_RST_PULSE_WIDTH 1000
+#define HUB_RST_CONFIG_DELAY 120000
+#define PWR_ON_DELAY_NGFF 10000
+#define POWER_OFF_DELAY_NGFF 1000000
+
+/* 2230 specific timings */
+#define PWR_ON_DELAY_2230 100000
+#define ON_KEY_DELAY 1000000
+#define ON_KEY_PULSE_WIDTH 150000
+
 /*****************************************************************************
  *
  * Modem Power/Reset functions
@@ -50,26 +62,55 @@ int mcd_mdm_init(void *data)
  *  - Set to HIGH the RESET_BB_N
  *  - Do a pulse on ON1
  */
-int mcd_mdm_cold_boot(void *data, int rst, int pwr_on)
+int mcd_mdm_cold_boot(void *data)
 {
-	struct mdm_ctrl_mdm_data *mdm_data = data;
-
-	if ((rst == INVALID_GPIO)
-		|| (pwr_on == INVALID_GPIO))
-		return -EINVAL;
-
-	/* Toggle the RESET_BB_N */
-	gpio_set_value(rst, 1);
-
-	/* Wait before doing the pulse on ON1 */
-	usleep_range(mdm_data->pre_on_delay, mdm_data->pre_on_delay + 1);
-
-	/* Do a pulse on ON1 */
-	gpio_set_value(pwr_on, 1);
-	usleep_range(mdm_data->on_duration, mdm_data->on_duration + 1);
-	gpio_set_value(pwr_on, 0);
-
-	return 0;
+	struct mdm_info *mdm = data;
+
+	struct cpu_ops *cpu = &mdm->pdata->cpu;
+	struct pmic_ops *pmic = &mdm->pdata->pmic;
+
+	struct mdm_ctrl_mdm_data *mdm_data = mdm->pdata->modem_data;
+	void *cpu_data = mdm->pdata->cpu_data;
+	void *pmic_data = mdm->pdata->pmic_data;
+
+	int ret = 0;
+	int rst = cpu->get_gpio_rst(cpu_data);
+	int pwr_on = cpu->get_gpio_pwr(cpu_data);
+	int pwr_on_ctrl = mdm->pdata->pwr_on_ctrl;
+
+	if (pwr_on_ctrl == POWER_ON_PMIC) {
+		/* Toggle modem ctrl signals using only PMIC */
+		if (pmic->power_on_mdm(pmic_data)) {
+			pr_err(DRVNAME ": Error PMIC power-ON.");
+			ret = -1;
+		}
+	} else if (pwr_on_ctrl == POWER_ON_PMIC_GPIO) {
+		/* Toggle power_on signal using PMIC */
+		if (pmic->power_on_mdm(pmic_data)) {
+			pr_err(DRVNAME ": Error PMIC power-ON.");
+			ret = -1;
+		}
+
+		if ((rst == INVALID_GPIO)
+			|| (pwr_on == INVALID_GPIO))
+			return -EINVAL;
+		/* Toggle the RESET_BB_N */
+		gpio_set_value(rst, 1);
+
+		/* Wait before doing the pulse on ON1 */
+		usleep_range(mdm_data->pre_on_delay,
+			mdm_data->pre_on_delay + 1);
+
+		/* Do a pulse on ON1 */
+		gpio_set_value(pwr_on, 1);
+		usleep_range(mdm_data->on_duration, mdm_data->on_duration + 1);
+		gpio_set_value(pwr_on, 0);
+	} else {
+		pr_err(DRVNAME ": Power on method not supported");
+		ret = -1;
+	}
+
+	return ret;
 }
 
 /**
@@ -103,21 +144,46 @@ int mcd_mdm_warm_reset(void *data, int rst)
  *  - Set to low the ON1
  *  - Write the PMIC reg
  */
-int mcd_mdm_power_off(void *data, int rst)
+int mcd_mdm_power_off(void *data)
 {
-	struct mdm_ctrl_mdm_data *mdm_data = data;
-
-	if (rst == INVALID_GPIO)
-		return -EINVAL;
-
-	/* Set the RESET_BB_N to 0 */
-	gpio_set_value(rst, 0);
-
-	/* Wait before doing the pulse on ON1 */
-	usleep_range(mdm_data->pre_pwr_down_delay,
-		mdm_data->pre_pwr_down_delay + 1);
-
-	return 0;
+	struct mdm_info *mdm = data;
+
+	struct cpu_ops *cpu = &mdm->pdata->cpu;
+	struct pmic_ops *pmic = &mdm->pdata->pmic;
+
+	struct mdm_ctrl_mdm_data *mdm_data = mdm->pdata->modem_data;
+	void *cpu_data = mdm->pdata->cpu_data;
+	void *pmic_data = mdm->pdata->pmic_data;
+
+	int ret = 0;
+	int rst = cpu->get_gpio_rst(cpu_data);
+	int pwr_on_ctrl = mdm->pdata->pwr_on_ctrl;
+
+	if (pwr_on_ctrl == POWER_ON_PMIC_GPIO) {
+
+		if (rst == INVALID_GPIO)
+			return -EINVAL;
+
+		/* Set the RESET_BB_N to 0 */
+		gpio_set_value(rst, 0);
+
+		/* Wait before doing the pulse on ON1 */
+		usleep_range(mdm_data->pre_pwr_down_delay,
+			mdm_data->pre_pwr_down_delay + 1);
+		if (pmic->power_off_mdm(pmic_data)) {
+			pr_err(DRVNAME ": Error PMIC power-OFF.");
+			ret = -1;
+		}
+	} else if (pwr_on_ctrl == POWER_ON_PMIC) {
+		if (pmic->power_off_mdm(pmic_data)) {
+			pr_err(DRVNAME ": Error PMIC power-OFF.");
+			ret = -1;
+		}
+	} else {
+		pr_err(DRVNAME ": Power on method not supported");
+		ret = -1;
+	}
+	return ret;
 }
 
 int mcd_mdm_get_cflash_delay(void *data)
@@ -141,37 +207,74 @@ int mcd_mdm_cleanup(void *data)
  *  mcd_mdm_cold_boot_ngff - Perform a NGFF modem cold boot sequence
  *  @drv: Reference to the driver structure
  *
+ *  - Reset USB hub if needed
  *  - Set to HIGH the RESET_BB_N
- *  - reset USB hub
+ *  - Set to HIGH the POWER_ON_OFF using PMIC
  */
-int mcd_mdm_cold_boot_ngff(void *data, int rst, int pwr_on)
+int mcd_mdm_cold_boot_ngff(void *data)
 {
+	struct mdm_info *mdm = data;
+
+	struct cpu_ops *cpu = &mdm->pdata->cpu;
+	void *cpu_data = mdm->pdata->cpu_data;
+
+	struct pmic_ops *pmic = &mdm->pdata->pmic;
+	void *pmic_data = mdm->pdata->pmic_data;
+
+	int ret = 0;
+	int rst = cpu->get_gpio_rst(cpu_data);
+	int pwr_on = cpu->get_gpio_pwr(cpu_data);
+	int rst_usbhub = cpu->get_gpio_rst_usbhub(cpu_data);
+	int pwr_on_ctrl = mdm->pdata->pwr_on_ctrl;
+
+	/* Reset the USB hub if needed */
+	if (mdm->pdata->usb_hub_ctrl) {
+		if (rst_usbhub == INVALID_GPIO)
+			return -EINVAL;
+		gpio_set_value(rst_usbhub, 0);
+		usleep_range(HUB_RST_PULSE_WIDTH, HUB_RST_PULSE_WIDTH + 1);
+		gpio_set_value(rst_usbhub, 1);
+		usleep_range(HUB_RST_CONFIG_DELAY, HUB_RST_CONFIG_DELAY + 1);
+	}
 
-	struct mdm_ctrl_cpu_data *cpu_data;
-	struct gpio_desc  *gpio_rst_desc = gpio_to_desc(rst);
-
-	cpu_data = container_of(&gpio_rst_desc, struct mdm_ctrl_cpu_data,
-				gpio_rst_bbn);
-
-	if ((rst == INVALID_GPIO) ||
-		(cpu_data->gpio_rst_usbhub == NULL))
+	if (rst == INVALID_GPIO)
 		return -EINVAL;
-
 	/* Toggle the RESET_BB_N */
 	gpio_set_value(rst, 1);
 
-	/* reset the USB hub here*/
-	usleep_range(1000, 1001);
-	gpiod_set_value(cpu_data->gpio_rst_usbhub, 0);
-	usleep_range(1000, 1001);
-	gpiod_set_value(cpu_data->gpio_rst_usbhub, 1);
-
-	return 0;
+	/* Wait before toggling POWER_ON_OFF, NGFF specific timing */
+	usleep_range(PWR_ON_DELAY_NGFF, PWR_ON_DELAY_NGFF + 1);
+
+	/* Toggle POWER_ON_OFF using PMIC or GPIO */
+	if (pwr_on_ctrl == POWER_ON_PMIC_GPIO) {
+		if (pmic->power_on_mdm(pmic_data)) {
+			pr_err(DRVNAME ": Error PMIC power-ON.");
+			ret = -1;
+		}
+	} else if (pwr_on_ctrl == POWER_ON_GPIO) {
+		if (pwr_on == INVALID_GPIO)
+			return -EINVAL;
+		gpio_set_value(pwr_on, 1);
+		ret = 0;
+	} else {
+		pr_err(DRVNAME ": Power on method not supported on NGFF");
+		ret = -1;
+	}
+	return ret;
 }
 
-int mcd_mdm_cold_boot_2230(void *data, int rst, int pwr_on)
+
+int mcd_mdm_cold_boot_2230(void *data)
 {
-	struct mdm_ctrl_mdm_data *mdm_data = data;
+	struct mdm_info *mdm = data;
+
+	struct cpu_ops *cpu = &mdm->pdata->cpu;
+	void *cpu_data = mdm->pdata->cpu_data;
+
+	struct mdm_ctrl_mdm_data *mdm_data = mdm->pdata->modem_data;
+
+	int rst = cpu->get_gpio_rst(cpu_data);
+	int pwr_on = cpu->get_gpio_pwr(cpu_data);
 
 	if ((rst == INVALID_GPIO)
 		&& (pwr_on == INVALID_GPIO))
@@ -182,15 +285,105 @@ int mcd_mdm_cold_boot_2230(void *data, int rst, int pwr_on)
 
 	/* Toggle the POWER_ON */
 	usleep_range(mdm_data->pre_on_delay, mdm_data->pre_on_delay + 1);
-	gpio_set_value(pwr_on, 0);
+	gpio_set_value_cansleep(pwr_on, 0);
 
 	/* Toggle RESET_BB_N */
 	usleep_range(mdm_data->on_duration, mdm_data->on_duration + 1);
 	gpio_set_value(rst, 1);
 
 	/* Toggle POWER_ON */
-	usleep_range(100000, 100001);
-	gpio_set_value(pwr_on, 1);
+	usleep_range(PWR_ON_DELAY_2230, PWR_ON_DELAY_2230 + 1);
+	gpio_set_value_cansleep(pwr_on, 1);
 
 	return 0;
 }
+
+/**
+ *  mcd_mdm_power_off_2230 - Perform a power off for modem 2230
+ *  @drv: Reference to the driver structure
+ *
+ *  - Set to LOW the PWRDWN_N
+ *  - Set to LOW the PWR ON pin
+ */
+int mcd_mdm_power_off_2230(void *data)
+{
+	struct mdm_info *mdm = data;
+
+	struct cpu_ops *cpu = &mdm->pdata->cpu;
+
+	struct mdm_ctrl_mdm_data *mdm_data = mdm->pdata->modem_data;
+	void *cpu_data = mdm->pdata->cpu_data;
+
+	int rst = cpu->get_gpio_rst(cpu_data);
+	int pwr_on = cpu->get_gpio_pwr(cpu_data);
+
+	if ((rst == INVALID_GPIO)
+		&& (pwr_on == INVALID_GPIO))
+		return -EINVAL;
+
+	/* Set the RESET_BB_N to 0 */
+	gpio_set_value(rst, 0);
+
+	/* Wait before doing the pull down battery on */
+	usleep_range(mdm_data->pre_pwr_down_delay,
+		mdm_data->pre_pwr_down_delay + 1);
+
+	gpio_set_value_cansleep(pwr_on, 0);
+
+	return 0;
+}
+
+/**
+ *  mcd_mdm_power_off - Perform the NGFF modem switch OFF sequence
+ *  @drv: Reference to the driver structure
+ *
+ *  - Set to low the RESET pin
+ *  - Write the PMIC reg or the GPIO
+ */
+int mcd_mdm_power_off_ngff(void *data)
+{
+	struct mdm_info *mdm = data;
+
+	struct cpu_ops *cpu = &mdm->pdata->cpu;
+	struct pmic_ops *pmic = &mdm->pdata->pmic;
+
+	struct mdm_ctrl_mdm_data *mdm_data = mdm->pdata->modem_data;
+	void *cpu_data = mdm->pdata->cpu_data;
+	void *pmic_data = mdm->pdata->pmic_data;
+
+
+	int ret = 0;
+	int rst = cpu->get_gpio_rst(cpu_data);
+	int pwr_on = cpu->get_gpio_pwr(cpu_data);
+	int pwr_on_ctrl = mdm->pdata->pwr_on_ctrl;
+
+	if (rst == INVALID_GPIO)
+		return -EINVAL;
+	/* Set the RESET_BB_N to 0 */
+	gpio_set_value(rst, 0);
+
+	/* Wait before doing the pulse on ON1 */
+	usleep_range(mdm_data->pre_pwr_down_delay,
+		     mdm_data->pre_pwr_down_delay + 1);
+
+	/* Toggle POWER_ON_OFF using PMIC or GPIO */
+	if (pwr_on_ctrl == POWER_ON_PMIC_GPIO) {
+		if (pmic->power_off_mdm(pmic_data)) {
+			pr_err(DRVNAME ": Error PMIC power-ON.");
+			ret = -1;
+		}
+	} else if (pwr_on_ctrl == POWER_ON_GPIO) {
+		if (rst == INVALID_GPIO)
+			return -EINVAL;
+		gpio_set_value(pwr_on, 0);
+		ret = 0;
+	} else {
+		pr_err(DRVNAME ": Error unkown power_on method");
+		ret = -1;
+	}
+
+	/* Wait after power off to meet the ngff modem settle down timings */
+	usleep_range(POWER_OFF_DELAY_NGFF, POWER_OFF_DELAY_NGFF + 1);
+
+	return ret;
+}
diff --git a/drivers/staging/modem_control/mcd_mdm.h b/drivers/staging/modem_control/mcd_mdm.h
index c6defb8698ee..cf2ac93ed34f 100644
--- a/drivers/staging/modem_control/mcd_mdm.h
+++ b/drivers/staging/modem_control/mcd_mdm.h
@@ -23,13 +23,15 @@
 #define _MDM_IMC_H
 
 int mcd_mdm_init(void *data);
-int mcd_mdm_cold_boot(void *data, int rst, int pwr_on);
+int mcd_mdm_cold_boot(void *data);
 int mcd_mdm_warm_reset(void *data, int rst);
-int mcd_mdm_power_off(void *data, int rst);
+int mcd_mdm_power_off(void *data);
 int mcd_mdm_get_cflash_delay(void *data);
 int mcd_mdm_get_wflash_delay(void *data);
 int mcd_mdm_cleanup(void *data);
-int mcd_mdm_cold_boot_ngff(void *data, int rst, int pwr_on);
-int mcd_mdm_cold_boot_2230(void *data, int rst, int pwr_on);
+int mcd_mdm_cold_boot_ngff(void *data);
+int mcd_mdm_power_off_ngff(void *data);
+int mcd_mdm_cold_boot_2230(void *data);
+int mcd_mdm_power_off_2230(void *data);
 
 #endif				/* _MDM_IMC_H */
diff --git a/drivers/staging/modem_control/mdm_ctrl.c b/drivers/staging/modem_control/mdm_ctrl.c
index 90c48d7e9df2..ee22c46e5a19 100644
--- a/drivers/staging/modem_control/mdm_ctrl.c
+++ b/drivers/staging/modem_control/mdm_ctrl.c
@@ -70,16 +70,13 @@ static void mdm_ctrl_handle_hangup(struct work_struct *work)
 static int mdm_ctrl_cold_boot(struct mdm_info *mdm)
 {
 	int ret = 0;
+	int cflash_delay;
+
 
 	struct mdm_ops *mdm_ops = &mdm->pdata->mdm;
 	struct cpu_ops *cpu = &mdm->pdata->cpu;
-	struct pmic_ops *pmic = &mdm->pdata->pmic;
-
 	void *mdm_data = mdm->pdata->modem_data;
 	void *cpu_data = mdm->pdata->cpu_data;
-	void *pmic_data = mdm->pdata->pmic_data;
-
-	int rst, pwr_on, cflash_delay;
 
 	pr_warn(DRVNAME ": Cold boot requested");
 
@@ -89,25 +86,13 @@ static int mdm_ctrl_cold_boot(struct mdm_info *mdm)
 	/* AP request => just ignore the modem reset */
 	atomic_set(&mdm->rst_ongoing, 1);
 
-	rst = cpu->get_gpio_rst(cpu_data);
-	pwr_on = cpu->get_gpio_pwr(cpu_data);
 	cflash_delay = mdm_ops->get_cflash_delay(mdm_data);
 
-	/* @TODO: remove this */
-	if (mdm->pdata->mdm_ver != MODEM_2230) {
-		if (pmic->power_on_mdm(pmic_data)) {
-			pr_err(DRVNAME ": Error PMIC power-ON.");
-			ret = -1;
-			goto end;
-		}
-	}
-
-	if (mdm->pdata->mdm_ver != MODEM_7360) {
-		if (mdm_ops->power_on(mdm_data, rst, pwr_on)) {
-			pr_err(DRVNAME ": Error MDM power-ON.");
-			ret = -1;
-			goto end;
-		}
+	/* Execute the modem power on sequence */
+	if (mdm_ops->power_on(mdm)) {
+		pr_err(DRVNAME ": Error on power on.");
+		ret = -1;
+		goto end;
 	}
 
 	mdm_ctrl_launch_timer(mdm, cflash_delay, MDM_TIMER_FLASH_ENABLE);
@@ -178,16 +163,7 @@ static int mdm_ctrl_flashing_warm_reset(struct mdm_info *mdm)
 static int mdm_ctrl_power_off(struct mdm_info *mdm)
 {
 	int ret = 0;
-
 	struct mdm_ops *mdm_ops = &mdm->pdata->mdm;
-	struct cpu_ops *cpu = &mdm->pdata->cpu;
-	struct pmic_ops *pmic = &mdm->pdata->pmic;
-
-	void *mdm_data = mdm->pdata->modem_data;
-	void *cpu_data = mdm->pdata->cpu_data;
-	void *pmic_data = mdm->pdata->pmic_data;
-
-	int rst;
 
 	pr_info(DRVNAME ": Power OFF requested");
 
@@ -197,22 +173,11 @@ static int mdm_ctrl_power_off(struct mdm_info *mdm)
 	/* Set the modem state to OFF */
 	mdm_ctrl_set_state(mdm, MDM_CTRL_STATE_OFF);
 
-	rst = cpu->get_gpio_rst(cpu_data);
-	if (mdm->pdata->mdm_ver != MODEM_7360) {
-		if (mdm_ops->power_off(mdm_data, rst)) {
-			pr_err(DRVNAME ": Error MDM power-OFF.");
-			ret = -1;
-			goto end;
-		}
+	if (mdm_ops->power_off(mdm)) {
+		pr_err(DRVNAME ": Error MDM power-OFF.");
+		ret = -1;
 	}
-	if (mdm->pdata->mdm_ver != MODEM_2230) {
-		if (pmic->power_off_mdm(pmic_data)) {
-			pr_err(DRVNAME ": Error PMIC power-OFF.");
-			ret = -1;
-			goto end;
-		}
-	}
-end:
+
 	return ret;
 }
 
@@ -397,7 +362,7 @@ static int mcd_init(struct mdm_info *mdm)
 	if (mdm->pdata->pmic.init)
 		mdm->pdata->pmic.init(mdm->pdata->pmic_data);
 
-	if (mdm->pdata->cpu.init(mdm->pdata->cpu_data)) {
+	if (mdm->pdata->cpu.init(mdm)) {
 		pr_err(DRVNAME ": CPU init failed...returning -ENODEV.");
 		ret = -ENODEV;
 		goto del_mdm;
@@ -504,15 +469,28 @@ long mdm_ctrl_dev_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
 			/* The modem family must be set first */
 			mcd_set_mdm(mdm->pdata, cfg.type);
 			mdm->pdata->board_type = cfg.board;
+			/* Set the power on method */
+			/* Temporary keep backward compatibility user space */
+			if ((cfg.pwr_on != POWER_ON_PMIC_GPIO)
+				&& (cfg.pwr_on != POWER_ON_GPIO)
+				&& (cfg.pwr_on != POWER_ON_PMIC)) {
+				mdm->pdata->pwr_on_ctrl = POWER_ON_PMIC_GPIO;
+			} else {
+				mdm->pdata->pwr_on_ctrl = cfg.pwr_on;
+			}
+			/* Set the usb hub control */
+			mdm->pdata->usb_hub_ctrl = cfg.usb_hub;
 
 			mdm_ctrl_set_mdm_cpu(mdm);
 			mdm_ctrl_set_pmic(mdm);
 			mcd_finalize_cpu_data(mdm->pdata);
 
 			ret = mcd_init(mdm);
+
 			if ((!ret) || (ret == -EIO))
-				pr_info(DRVNAME ": modem (board: %d, family: %d)",
-						cfg.board, cfg.type);
+				pr_info(DRVNAME ": modem (board: %d, family: %d,pwr:%d,hub:%d)",
+					cfg.board, cfg.type,
+					cfg.pwr_on, cfg.usb_hub);
 			else
 				mdm->is_mdm_ctrl_disabled = true;
 		} else {
diff --git a/drivers/staging/modem_control/mdm_util.c b/drivers/staging/modem_control/mdm_util.c
index 1d6538798edd..2621a95d6475 100644
--- a/drivers/staging/modem_control/mdm_util.c
+++ b/drivers/staging/modem_control/mdm_util.c
@@ -120,15 +120,19 @@ void mdm_ctrl_set_mdm_cpu(struct mdm_info *mdm)
 	pdata->cpu.get_irq_rst = get_gpio_irq_rst;
 	pdata->cpu.get_gpio_rst = get_gpio_rst;
 	pdata->cpu.get_gpio_pwr = get_gpio_pwr;
+	pdata->cpu.get_gpio_rst_usbhub = get_gpio_rst_usbhub;
 
 	switch (board_type) {
 	case BOARD_AOB:
-		if (mdm->pdata->mdm_ver == MODEM_2230)
+		if (mdm->pdata->mdm_ver == MODEM_2230) {
 			pdata->mdm.power_on = mcd_mdm_cold_boot_2230;
+			pdata->mdm.power_off = mcd_mdm_power_off_2230;
+		}
 		break;
 	case BOARD_NGFF:
 		pdata->mdm.power_on = mcd_mdm_cold_boot_ngff;
 		pdata->cpu.init = cpu_init_gpio_ngff;
+		pdata->mdm.power_off = mcd_mdm_power_off_ngff;
 		break;
 	default:
 		pr_info(DRVNAME ": Can't retrieve conf specific functions");
diff --git a/include/linux/mdm_ctrl.h b/include/linux/mdm_ctrl.h
index 38590fa3625c..5561da44f3bf 100644
--- a/include/linux/mdm_ctrl.h
+++ b/include/linux/mdm_ctrl.h
@@ -69,6 +69,14 @@ enum mdm_ctrl_board_type {
 	BOARD_PCIE,
 };
 
+/* Type of power on control */
+enum mdm_ctrl_pwr_on_type {
+	POWER_ON_UNSUP,
+	POWER_ON_PMIC_GPIO,
+	POWER_ON_GPIO,
+	POWER_ON_PMIC
+};
+
 /**
  * struct mdm_ctrl_cmd - Command parameters
  *
@@ -86,10 +94,14 @@ struct mdm_ctrl_cmd {
  *
  * @board board type
  * @type modem family type
+ * @pwr_on_ctrl power on method
+ * @usb_hub_ctrl usage of usb hub ctrl
  */
 struct mdm_ctrl_cfg {
 	enum mdm_ctrl_board_type board;
 	enum mdm_ctrl_mdm_type type;
+	enum mdm_ctrl_pwr_on_type pwr_on;
+	unsigned int usb_hub;
 };
 
 #define MDM_CTRL_MAGIC	0x87 /* FIXME: Revisit */
diff --git a/include/linux/mdm_ctrl_board.h b/include/linux/mdm_ctrl_board.h
index 44f53a0477f7..0bfa31e608a9 100644
--- a/include/linux/mdm_ctrl_board.h
+++ b/include/linux/mdm_ctrl_board.h
@@ -54,8 +54,8 @@ struct mdm_ops {
 	int	(*cleanup)(void *data);
 	int	(*get_cflash_delay)(void *data);
 	int	(*get_wflash_delay)(void *data);
-	int	(*power_on)(void *data, int gpio_rst, int gpio_pwr);
-	int	(*power_off)(void *data, int gpio_rst);
+	int	(*power_on)(void *data);
+	int	(*power_off)(void *data);
 	int	(*warm_reset)(void *data, int gpio_rst);
 };
 
@@ -67,6 +67,7 @@ struct cpu_ops {
 	int	(*get_irq_rst)(void *data);
 	int	(*get_gpio_rst)(void *data);
 	int	(*get_gpio_pwr)(void *data);
+	int	(*get_gpio_rst_usbhub)(void *data);
 };
 
 struct pmic_ops {
@@ -96,6 +97,11 @@ struct mcd_base_info {
 
 	/* board type */
 	int		board_type;
+
+	/* power on type */
+	int		pwr_on_ctrl;
+	/* usb hub cotrol */
+	int		usb_hub_ctrl;
 };
 
 /* GPIO names */
@@ -143,6 +149,7 @@ struct mdm_ctrl_cpu_data {
 	/* NGFF specific */
 	struct gpio_desc	*gpio_wwan_disable;
 	struct gpio_desc	*gpio_rst_usbhub;
+	struct gpio_desc	*gpio_wake_on_wwan;
 
 	/* IRQs */
 	int	irq_cdump;
-- 
2.1.0

