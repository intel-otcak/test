From 70257e0dad00a6cb77fb76af267c146deff986d4 Mon Sep 17 00:00:00 2001
Message-Id: <70257e0dad00a6cb77fb76af267c146deff986d4.1417780878.git.chang-joon.lee@intel.com>
In-Reply-To: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
References: <cb098d33cdac3271103834fbce08218248d7bddb.1417780878.git.chang-joon.lee@intel.com>
From: "Kumar, Mahesh" <mahesh1.kumar@intel.com>
Date: Wed, 19 Nov 2014 11:13:17 +0530
Subject: [PATCH 26/34] REVERTME [VPG]: drm/i915: Add gamma/csc control to
 sysfs

Add gamma/csc hue, saturation and CB control support to sysfs interface
Remove interface from debugfs.

REVERTME: IOCTL based interface will replace this implementation.

Issue: GMINL-4203
Change-Id: Ie78a235c1d0e129b0230da9e91a030992e88b340
Signed-off-by: Kumar, Mahesh <mahesh1.kumar@intel.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c |  541 -----------------------------------
 drivers/gpu/drm/i915/i915_sysfs.c   |  402 ++++++++++++++++++++++++++
 2 files changed, 402 insertions(+), 541 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index ee838bd..2cc4313 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -1791,510 +1791,6 @@ static int i915_emon_status(struct seq_file *m, void *unused)
 	return 0;
 }
 
-
-ssize_t i915_gamma_adjust_read(struct file *filp,
-		 char __user *ubuf,
-		 size_t max,
-		 loff_t *ppos)
-{
-	/* To do: Not implemented yet */
-	DRM_ERROR("Gamma adjust: Not implemented\n");
-	return -EINVAL;
-}
-
-ssize_t i915_gamma_adjust_write(struct file *filp,
-		  const char __user *ubuf,
-		  size_t count,
-		  loff_t *ppos)
-{
-	int ret = 0;
-	int bytes_count;
-	char *buf = NULL;
-	char *temp_buf = NULL;
-
-	/* Validate input */
-	if (!count) {
-		DRM_ERROR("Gamma adjust: insufficient data\n");
-		return -EINVAL;
-	}
-
-	buf = kzalloc(count, GFP_KERNEL);
-	if (!buf) {
-		DRM_ERROR("Gamma adjust: insufficient memory\n");
-		return -ENOMEM;
-	}
-
-	/* Get the data */
-	if (copy_from_user(buf, ubuf, count)) {
-		DRM_ERROR("Gamma adjust: copy failed\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	bytes_count = count;
-
-	/* Parse data and load the gamma  table */
-	ret = parse_clrmgr_input(gamma_softlut, buf,
-		GAMMA_CORRECT_MAX_COUNT, &bytes_count);
-	if (ret < GAMMA_CORRECT_MAX_COUNT) {
-		DRM_ERROR("Gamma table loading failed\n");
-		goto EXIT;
-	}
-	else
-		DRM_DEBUG("Gamma table loading done\n");
-
-	if (bytes_count < count) {
-		temp_buf = buf + bytes_count;
-
-		/* Number of bytes remaining */
-		bytes_count = count - bytes_count;
-
-		/* Parse data and load the gcmax table */
-		ret = parse_clrmgr_input(gcmax_softlut, temp_buf,
-				GC_MAX_COUNT, &bytes_count);
-
-		if (ret < GC_MAX_COUNT)
-			DRM_ERROR("GCMAX table loading failed\n");
-		else
-			DRM_DEBUG("GCMAX table loading done\n");
-	}
-
-EXIT:
-	kfree(buf);
-	if (ret < 0)
-		return ret;
-
-	return count;
-}
-
-ssize_t i915_gamma_enable_read(struct file *filp,
-		 char __user *ubuf,
-		 size_t max,
-		 loff_t *ppos)
-{
-	int len = 0;
-	char buf[10] = {0,};
-	struct drm_device *dev = filp->private_data;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	len = scnprintf(buf, sizeof(buf), "%s\n",
-		dev_priv->gamma_enabled ? "Enabled" : "Disabled");
-	return simple_read_from_buffer(ubuf, max, ppos,
-		(const void *) buf, len);
-}
-
-ssize_t i915_gamma_enable_write(struct file *filp,
-		  const char __user *ubuf,
-		  size_t count,
-		  loff_t *ppos)
-{
-	int ret = 0;
-	unsigned long status = 0;
-	struct drm_crtc *crtc = NULL;
-	struct drm_device *dev = filp->private_data;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	char *buf = NULL;
-
-	/* Validate input */
-	if (!count) {
-		DRM_ERROR("Gamma adjust: insufficient data\n");
-		return -EINVAL;
-	}
-
-	buf = kzalloc(count, GFP_KERNEL);
-	if (!buf) {
-		DRM_ERROR("Gamma enable: Out of mem\n");
-		return  -ENOMEM;
-	}
-
-	/* Get the data */
-	if (copy_from_user(buf, ubuf, count)) {
-		DRM_ERROR("Gamma adjust: copy failed\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	/* Finally, get the status */
-	if (kstrtoul((const char *)buf, 10,
-		&status)) {
-		DRM_ERROR("Gamma enable: Invalid limit\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-	dev_priv->gamma_enabled = status;
-
-	/* Search for a CRTC,
-	Assumption: Either MIPI or EDP is fix panel */
-	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
-		if ((intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) ||
-			(intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)))
-			break;
-	}
-
-	/* No CRTC */
-	if (!crtc) {
-		DRM_ERROR("Gamma adjust: No local panel found\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	/* if gamma enabled, apply gamma correction on PIPE */
-	if (dev_priv->gamma_enabled) {
-		if (intel_crtc_enable_gamma(crtc, PIPEA)) {
-			DRM_ERROR("Apply gamma correction failed\n");
-			ret = -EINVAL;
-		} else
-			ret = count;
-	} else {
-		/* Disable gamma on this plane */
-		intel_crtc_disable_gamma(crtc, PIPEA);
-		ret = count;
-	}
-
-EXIT:
-	kfree(buf);
-	return ret;
-}
-
-const struct file_operations i915_gamma_adjust_fops = {
-	.owner = THIS_MODULE,
-	.open = simple_open,
-	.read = i915_gamma_adjust_read,
-	.write = i915_gamma_adjust_write,
-	.llseek = default_llseek,
-};
-
-const struct file_operations i915_gamma_enable_fops = {
-	.owner = THIS_MODULE,
-	.open = simple_open,
-	.read = i915_gamma_enable_read,
-	.write = i915_gamma_enable_write,
-	.llseek = default_llseek,
-};
-
-ssize_t i915_cb_adjust_read(struct file *filp,
-		 char __user *ubuf,
-		 size_t max,
-		 loff_t *ppos)
-{
-	/* To do: Not implemented yet */
-	DRM_ERROR("Contrast Brightness adjust: Read Not implemented\n");
-	return -EINVAL;
-}
-
-ssize_t i915_cb_adjust_write(struct file *filp,
-		  const char __user *ubuf,
-		  size_t count,
-		  loff_t *ppos)
-{
-	int ret = 0;
-	int bytes_count = count;
-	struct drm_device *dev = filp->private_data;
-	struct cont_brightlut *cb_ptr = NULL;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	char *buf = NULL;
-
-	/* Validate input */
-	if (!count) {
-		DRM_ERROR("Contrast Brightness: insufficient data\n");
-		return -EINVAL;
-	}
-
-	buf = kzalloc(count, GFP_KERNEL);
-	if (!buf) {
-		DRM_ERROR("Contrast Brightness adjust: insufficient memory\n");
-		return -ENOMEM;
-	}
-
-	cb_ptr = kzalloc(sizeof(struct cont_brightlut), GFP_KERNEL);
-	if (!cb_ptr) {
-		DRM_ERROR("Contrast Brightness adjust: insufficient memory\n");
-		kfree(buf);
-		return -ENOMEM;
-	}
-
-	/* Get the data */
-	if (copy_from_user(buf, ubuf, count)) {
-		DRM_ERROR("Contrast Brightness: copy failed\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	/* Parse input data */
-	ret = parse_clrmgr_input((uint *)cb_ptr, buf, CB_MAX_COEFF_COUNT,
-			&bytes_count);
-	if (ret < CB_MAX_COEFF_COUNT) {
-		DRM_ERROR("Contrast Brightness loading failed\n");
-		goto EXIT;
-	}
-	else
-		DRM_DEBUG("Contrast Brightness loading done\n");
-
-	if (cb_ptr->sprite_no < SPRITEA || cb_ptr->sprite_no > SPRITED ||
-			cb_ptr->sprite_no == PLANEB) {
-		DRM_ERROR("Sprite value out of range. Enter 2,3, 5 or 6\n");
-		goto EXIT;
-	}
-
-	DRM_DEBUG("sprite = %d Val=0x%x,\n", cb_ptr->sprite_no, cb_ptr->val);
-
-	if (intel_sprite_cb_adjust(dev_priv, cb_ptr))
-		DRM_ERROR("Contrast Brightness update failed\n");
-
-EXIT:
-	kfree(cb_ptr);
-	kfree(buf);
-	if (ret < 0)
-		return ret;
-
-	return count;
-}
-
-ssize_t i915_hs_adjust_read(struct file *filp,
-		 char __user *ubuf,
-		 size_t max,
-		 loff_t *ppos)
-{
-	/* To do: Not implemented yet */
-	DRM_ERROR("Hue Saturation adjust: Read Not implemented\n");
-	return -EINVAL;
-}
-ssize_t i915_hs_adjust_write(struct file *filp,
-		  const char __user *ubuf,
-		  size_t count,
-		  loff_t *ppos)
-{
-	int ret = count;
-	int bytes_count = count;
-	struct drm_device *dev = filp->private_data;
-	struct hue_saturationlut *hs_ptr = NULL;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	char *buf = NULL;
-
-	/* Validate input */
-	if (!count) {
-		DRM_ERROR("Hue Saturation: insufficient data\n");
-		return -EINVAL;
-	}
-
-	buf = kzalloc(count, GFP_KERNEL);
-	if (!buf) {
-		DRM_ERROR("Hue Saturation adjust: insufficient memory\n");
-		return -ENOMEM;
-	}
-
-	hs_ptr = kzalloc(sizeof(struct hue_saturationlut), GFP_KERNEL);
-	if (!hs_ptr) {
-		DRM_ERROR("Hue Saturation adjust: insufficient memory\n");
-		kfree(buf);
-		return -ENOMEM;
-	}
-
-	/* Get the data */
-	if (copy_from_user(buf, ubuf, count)) {
-		DRM_ERROR("Hue Saturation: copy failed\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	/* Parse input data */
-	ret = parse_clrmgr_input((uint *)hs_ptr, buf, HS_MAX_COEFF_COUNT,
-			&bytes_count);
-	if (ret < HS_MAX_COEFF_COUNT) {
-		DRM_ERROR("Hue Saturation loading failed\n");
-		goto EXIT;
-	}
-	else
-		DRM_DEBUG("Hue Saturation loading done\n");
-
-	if (hs_ptr->sprite_no < SPRITEA || hs_ptr->sprite_no > SPRITED ||
-			hs_ptr->sprite_no == PLANEB) {
-		DRM_ERROR("sprite = %d Val=0x%x,\n", hs_ptr->sprite_no,
-					hs_ptr->val);
-		goto EXIT;
-	}
-
-	DRM_DEBUG("sprite = %d Val=0x%x,\n", hs_ptr->sprite_no, hs_ptr->val);
-
-	if (intel_sprite_hs_adjust(dev_priv, hs_ptr))
-		DRM_ERROR("Hue Saturation update failed\n");
-
-EXIT:
-	kfree(hs_ptr);
-	kfree(buf);
-
-	if (ret < 0)
-		return ret;
-
-	return count;
-}
-
-static const struct file_operations i915_cb_adjust_fops = {
-	.owner = THIS_MODULE,
-	.open = simple_open,
-	.read = i915_cb_adjust_read,
-	.write = i915_cb_adjust_write,
-	.llseek = default_llseek,
-};
-
-static const struct file_operations i915_hs_adjust_fops = {
-	.owner = THIS_MODULE,
-	.open = simple_open,
-	.read = i915_hs_adjust_read,
-	.write = i915_hs_adjust_write,
-	.llseek = default_llseek,
-};
-
-
-
-
-ssize_t i915_csc_adjust_write(struct file *filp,
-		  const char __user *ubuf,
-		  size_t count,
-		  loff_t *ppos)
-{
-	int ret = 0;
-	int bytes_count = count;
-	char *buf  = NULL;
-
-	if (!count) {
-		DRM_ERROR("CSC adjust: insufficient data\n");
-		return -EINVAL;
-	}
-
-	buf = kzalloc(count, GFP_KERNEL);
-	if (!buf) {
-		DRM_ERROR("CSC adjust: insufficient memory\n");
-		return -ENOMEM;
-	}
-
-	/* Get the data */
-	if (copy_from_user(buf, ubuf, count)) {
-		DRM_ERROR("CSC adjust: copy failed\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	/* Parse data and load the csc  table */
-	ret = parse_clrmgr_input(csc_softlut, buf,
-		CSC_MAX_COEFF_COUNT, &bytes_count);
-	if (ret < CSC_MAX_COEFF_COUNT)
-		DRM_ERROR("CSC table loading failed\n");
-	else
-		DRM_DEBUG("CSC table loading done\n");
-EXIT:
-	kfree(buf);
-	if (ret < 0)
-		return ret;
-
-	return count;
-}
-
-ssize_t i915_csc_enable_read(struct file *filp,
-		 char __user *ubuf,
-		 size_t max,
-		 loff_t *ppos)
-{
-	int len = 0;
-	char buf[10] = {0,};
-	struct drm_device *dev = filp->private_data;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	len = scnprintf(buf, sizeof(buf), "%s\n",
-		dev_priv->csc_enabled ? "Enabled" : "Disabled");
-	return simple_read_from_buffer(ubuf, max, ppos,
-		(const void *) buf, len);
-}
-
-ssize_t i915_csc_enable_write(struct file *filp,
-		  const char __user *ubuf,
-		  size_t count,
-		  loff_t *ppos)
-{
-	int ret = 0;
-	unsigned int status = 0;
-	char *buf = NULL;
-	struct drm_crtc *crtc = NULL;
-	struct drm_device *dev = filp->private_data;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	/* Validate input */
-	if (!count) {
-		DRM_ERROR("CSC enable: insufficient data\n");
-		return -EINVAL;
-	}
-
-	buf = kzalloc(count, GFP_KERNEL);
-	if (!buf) {
-		DRM_ERROR("CSC enable: Out of mem\n");
-		return -ENOMEM;
-	}
-
-	/* Get the data */
-	if (copy_from_user(buf, ubuf, count)) {
-		DRM_ERROR("CSC enable: copy failed\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	/* Finally, get the status */
-	if (kstrtouint((const char *)buf, 10,
-		&status)) {
-		DRM_ERROR("CSC enable: Invalid limit\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	dev_priv->csc_enabled = status;
-
-	/* Search for a CRTC,
-	Assumption: Either MIPI or EDP is fix panel */
-	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
-		if ((intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) ||
-			(intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)))
-			break;
-	}
-
-	/* No CRTC */
-	if (!crtc) {
-		DRM_ERROR("CSC enable: No local panel found\n");
-		ret = -EINVAL;
-		goto EXIT;
-	}
-
-	/* if CSC enabled, apply CSC correction */
-	if (dev_priv->csc_enabled) {
-		if (do_intel_enable_csc(dev,
-			(void *) csc_softlut, crtc)) {
-			DRM_ERROR("CSC correction failed\n");
-			ret = -EINVAL;
-		} else
-			ret = count;
-	} else {
-		/* Disable CSC on this CRTC */
-		do_intel_disable_csc(dev, crtc);
-		ret = count;
-	}
-
-EXIT:
-	kfree(buf);
-	return ret;
-}
-
-static const struct file_operations i915_csc_adjust_fops = {
-	.owner = THIS_MODULE,
-	.open = simple_open,
-	.write = i915_csc_adjust_write,
-	.llseek = default_llseek,
-};
-
-static const struct file_operations i915_csc_enable_fops = {
-	.owner = THIS_MODULE,
-	.open = simple_open,
-	.read = i915_csc_enable_read,
-	.write = i915_csc_enable_write,
-	.llseek = default_llseek,
-};
 static int i915_ring_freq_table(struct seq_file *m, void *unused)
 {
 	struct drm_info_node *node = m->private;
@@ -5333,43 +4829,6 @@ int i915_debugfs_init(struct drm_minor *minor)
 			return ret;
 	}
 
-	ret = i915_debugfs_create(minor->debugfs_root, minor,
-					"cb_adjust",
-					&i915_cb_adjust_fops);
-	if (ret)
-		return ret;
-
-	ret = i915_debugfs_create(minor->debugfs_root, minor,
-					"hs_adjust",
-					&i915_hs_adjust_fops);
-	if (ret)
-		return ret;
-
-	ret = i915_debugfs_create(minor->debugfs_root, minor,
-					"csc_adjust",
-					&i915_csc_adjust_fops);
-	if (ret)
-		return ret;
-
-	ret = i915_debugfs_create(minor->debugfs_root, minor,
-					"csc_enable",
-					&i915_csc_enable_fops);
-
-	if (ret)
-		return ret;
-
-	ret = i915_debugfs_create(minor->debugfs_root, minor,
-					"gamma_adjust",
-					&i915_gamma_adjust_fops);
-	if (ret)
-		return ret;
-
-	ret = i915_debugfs_create(minor->debugfs_root, minor,
-					"gamma_enable",
-					&i915_gamma_enable_fops);
-	if (ret)
-		return ret;
-
 
 	return drm_debugfs_create_files(i915_debugfs_list,
 					I915_DEBUGFS_ENTRIES,
diff --git a/drivers/gpu/drm/i915/i915_sysfs.c b/drivers/gpu/drm/i915/i915_sysfs.c
index 27189cd..3629f14 100644
--- a/drivers/gpu/drm/i915/i915_sysfs.c
+++ b/drivers/gpu/drm/i915/i915_sysfs.c
@@ -31,6 +31,7 @@
 #include <linux/sysfs.h>
 #include "intel_drv.h"
 #include "i915_drv.h"
+#include "intel_clrmgr.h"
 
 #define dev_to_drm_minor(d) dev_get_drvdata((d))
 
@@ -545,6 +546,401 @@ static ssize_t thaw_show(struct device *kdev, struct device_attribute *attr,
 }
 static DEVICE_ATTR(thaw, S_IRUGO, thaw_show, NULL);
 
+static ssize_t gamma_adjust_store(struct device *kdev,
+				     struct device_attribute *attr,
+				     const char *ubuf, size_t count)
+{
+	int ret = 0;
+	int bytes_count = 0;
+	int bytes_read = 0;
+	char *buf = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Gamma adjust: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+	bytes_count = count;
+
+	/* Parse data and load the gamma  table */
+	ret = parse_clrmgr_input(gamma_softlut, buf,
+		GAMMA_CORRECT_MAX_COUNT, &bytes_count);
+	if (ret < GAMMA_CORRECT_MAX_COUNT) {
+		DRM_ERROR("Gamma table loading failed\n");
+		goto EXIT;
+	} else
+		DRM_DEBUG("Gamma table loading done\n");
+
+	bytes_read = bytes_count;
+	if (bytes_count < count) {
+
+		/* Number of bytes remaining */
+		bytes_count = count - bytes_count;
+
+		/* Parse data and load the gcmax table */
+		ret = parse_clrmgr_input(gcmax_softlut, buf+bytes_read,
+				GC_MAX_COUNT, &bytes_count);
+
+		if (ret < GC_MAX_COUNT)
+			DRM_ERROR("GCMAX table loading failed\n");
+		else
+			DRM_DEBUG("GCMAX table loading done\n");
+	}
+
+EXIT:
+	kfree(buf);
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
+
+static ssize_t csc_enable_show(struct device *kdev,
+		struct device_attribute *attr, char *ubuf)
+{
+	int len = 0;
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	len = scnprintf(ubuf, PAGE_SIZE, "%s\n",
+		dev_priv->csc_enabled ? "Enabled" : "Disabled");
+
+	return len;
+}
+
+static ssize_t csc_enable_store(struct device *kdev,
+				     struct device_attribute *attr,
+				     const char *ubuf, size_t count)
+{
+	int ret = 0;
+	uint status = 0;
+	struct drm_crtc *crtc = NULL;
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("CSC enable: insufficient data\n");
+		return -EINVAL;
+	}
+
+	/* Finally, get the status */
+	if (kstrtouint(ubuf, 10, &status)) {
+		DRM_ERROR("CSC enable: Invalid limit\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	dev_priv->csc_enabled = status;
+
+	/* Search for a CRTC,
+	Assumption: Either MIPI or EDP is fix panel */
+	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
+		if ((intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) ||
+			(intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)))
+			break;
+	}
+
+	/* No CRTC */
+	if (!crtc) {
+		DRM_ERROR("CSC enable: No local panel found\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* if CSC enabled, apply CSC correction */
+	if (dev_priv->csc_enabled) {
+		if (do_intel_enable_csc(dev,
+			(void *) csc_softlut, crtc)) {
+			DRM_ERROR("CSC correction failed\n");
+			ret = -EINVAL;
+		} else
+			ret = count;
+	} else {
+		/* Disable CSC on this CRTC */
+		do_intel_disable_csc(dev, crtc);
+		ret = count;
+	}
+
+EXIT:
+	return ret;
+}
+
+static ssize_t csc_adjust_store(struct device *kdev,
+				     struct device_attribute *attr,
+				     const char *ubuf, size_t count)
+{
+	int bytes_count = count;
+	int ret = 0;
+	char *buf = NULL;
+
+	if (!count) {
+		DRM_ERROR("CSC adjust: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* Parse data and load the csc  table */
+	ret = parse_clrmgr_input(csc_softlut, buf,
+		CSC_MAX_COEFF_COUNT, &bytes_count);
+	if (ret < CSC_MAX_COEFF_COUNT)
+		DRM_ERROR("CSC table loading failed\n");
+	else
+		DRM_DEBUG("CSC table loading done\n");
+
+EXIT:
+	kfree(buf);
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
+static ssize_t gamma_enable_show(struct device *kdev,
+		struct device_attribute *attr,  char *ubuf)
+{
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	int len = 0;
+
+	len = scnprintf(ubuf, PAGE_SIZE, "%s\n",
+		dev_priv->gamma_enabled ? "Enabled" : "Disabled");
+
+	return len;
+}
+
+static ssize_t gamma_enable_store(struct device *kdev,
+				     struct device_attribute *attr,
+				     const char *ubuf, size_t count)
+{
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	int ret = 0;
+	struct drm_crtc *crtc = NULL;
+	long unsigned int status = 0;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Gamma adjust: insufficient data\n");
+		return -EINVAL;
+	}
+
+	/* Finally, get the status */
+	if (kstrtoul(ubuf, 10, &status)) {
+		DRM_ERROR("Gamma enable: Invalid limit\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+	dev_priv->gamma_enabled = status;
+
+	/* Search for a CRTC,
+	Assumption: Either MIPI or EDP is fix panel */
+	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
+		if ((intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) ||
+			(intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)))
+			break;
+	}
+
+	/* No CRTC */
+	if (!crtc) {
+		DRM_ERROR("Gamma adjust: No local panel found\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* if gamma enabled, apply gamma correction on PIPE */
+	if (dev_priv->gamma_enabled) {
+		if (intel_crtc_enable_gamma(crtc, PIPEA)) {
+			DRM_ERROR("Apply gamma correction failed\n");
+			ret = -EINVAL;
+		} else
+			ret = count;
+	} else {
+		/* Disable gamma on this plane */
+		intel_crtc_disable_gamma(crtc, PIPEA);
+		ret = count;
+	}
+
+EXIT:
+	return ret;
+}
+
+static ssize_t cb_adjust_store(struct device *kdev,
+				     struct device_attribute *attr,
+				     const char *ubuf, size_t count)
+{
+	int ret = 0;
+	int bytes_count = count;
+	struct cont_brightlut *cb_ptr = NULL;
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char *buf = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Contrast Brightness: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
+		kfree(buf);
+		return -EINVAL;
+	}
+
+	cb_ptr = kzalloc(sizeof(struct cont_brightlut), GFP_KERNEL);
+	if (!cb_ptr) {
+		DRM_ERROR("Contrast Brightness adjust: insufficient memory\n");
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	/* Parse input data */
+	ret = parse_clrmgr_input((uint *)cb_ptr, buf, CB_MAX_COEFF_COUNT,
+			&bytes_count);
+	if (ret < CB_MAX_COEFF_COUNT) {
+		DRM_ERROR("Contrast Brightness loading failed\n");
+		goto EXIT;
+	} else
+		DRM_DEBUG("Contrast Brightness loading done\n");
+
+	if (cb_ptr->sprite_no < SPRITEA || cb_ptr->sprite_no > SPRITED ||
+			cb_ptr->sprite_no == PLANEB) {
+		DRM_ERROR("Sprite value out of range. Enter 2,3, 5 or 6\n");
+		goto EXIT;
+	}
+
+	DRM_DEBUG("sprite = %d Val=0x%x,\n", cb_ptr->sprite_no, cb_ptr->val);
+
+	if (intel_sprite_cb_adjust(dev_priv, cb_ptr))
+		DRM_ERROR("Contrast Brightness update failed\n");
+
+EXIT:
+	kfree(buf);
+	kfree(cb_ptr);
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
+static ssize_t hs_adjust_store(struct device *kdev,
+				     struct device_attribute *attr,
+				     const char *ubuf, size_t count)
+{
+	int ret = count;
+	int bytes_count = count;
+	struct hue_saturationlut *hs_ptr = NULL;
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	char *buf = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Hue Saturation: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
+		kfree(buf);
+		return -EINVAL;
+	}
+
+	hs_ptr = kzalloc(sizeof(struct hue_saturationlut), GFP_KERNEL);
+	if (!hs_ptr) {
+		DRM_ERROR("Hue Saturation adjust: insufficient memory\n");
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	/* Parse input data */
+	ret = parse_clrmgr_input((uint *)hs_ptr, buf, HS_MAX_COEFF_COUNT,
+			&bytes_count);
+	if (ret < HS_MAX_COEFF_COUNT) {
+		DRM_ERROR("Hue Saturation loading failed\n");
+		goto EXIT;
+	} else
+		DRM_DEBUG("Hue Saturation loading done\n");
+
+	if (hs_ptr->sprite_no < SPRITEA || hs_ptr->sprite_no > SPRITED ||
+			hs_ptr->sprite_no == PLANEB) {
+		DRM_ERROR("sprite = %d Val=0x%x,\n", hs_ptr->sprite_no,
+					hs_ptr->val);
+		goto EXIT;
+	}
+
+	DRM_DEBUG("sprite = %d Val=0x%x,\n", hs_ptr->sprite_no, hs_ptr->val);
+
+	if (intel_sprite_hs_adjust(dev_priv, hs_ptr))
+		DRM_ERROR("Hue Saturation update failed\n");
+
+EXIT:
+	kfree(buf);
+	kfree(hs_ptr);
+
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
+
+static DEVICE_ATTR(gamma_enable, S_IRUGO | S_IWUSR, gamma_enable_show,
+						gamma_enable_store);
+static DEVICE_ATTR(gamma_adjust, S_IWUSR, NULL, gamma_adjust_store);
+static DEVICE_ATTR(csc_enable, S_IRUGO | S_IWUSR, csc_enable_show,
+						csc_enable_store);
+static DEVICE_ATTR(csc_adjust, S_IWUSR, NULL, csc_adjust_store);
+static DEVICE_ATTR(cb_adjust, S_IWUSR, NULL, cb_adjust_store);
+static DEVICE_ATTR(hs_adjust, S_IWUSR, NULL, hs_adjust_store);
+
 static const struct attribute *gen6_attrs[] = {
 	&dev_attr_gt_cur_freq_mhz.attr,
 	&dev_attr_gt_max_freq_mhz.attr,
@@ -565,6 +961,12 @@ static const struct attribute *vlv_attrs[] = {
 	&dev_attr_gt_RPn_freq_mhz.attr,
 	&dev_attr_vlv_rpe_freq_mhz.attr,
 	&dev_attr_thaw.attr,
+	&dev_attr_gamma_enable.attr,
+	&dev_attr_gamma_adjust.attr,
+	&dev_attr_csc_enable.attr,
+	&dev_attr_csc_adjust.attr,
+	&dev_attr_cb_adjust.attr,
+	&dev_attr_hs_adjust.attr,
 	NULL,
 };
 
-- 
1.7.9.5

