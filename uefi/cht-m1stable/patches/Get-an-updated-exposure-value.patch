From 5128189e53dcdba319d1d14611f584e26c1bd47a Mon Sep 17 00:00:00 2001
From: "Liu,Dalei" <daleix.liu@intel.com>
Date: Mon, 12 Oct 2015 10:39:54 +0800
Subject: [PATCH] Get an updated exposure value.

Sometimes the real value of exposure was not the value from
HAL setting.
So we need an interface to get real exposure value.

Change-Id: Ia356722ae6adbfd04f16fb1abf615a1333df2454
Original-Tracked-On: #H1504065822
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-7449
Signed-off-by: Liu,Dalei <daleix.liu@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/78618
Build: Dessert M BXT RVP (SC)
Approver: Bin B Han <bin.b.han@intel.com>
Reviewed-by: Bin B Han <bin.b.han@intel.com>
Validation-Android: Wei Tao <wei.tao@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
---
 .../camera/drivers/media/i2c/ov8858.c              | 24 ++++++++++++++++++++++
 .../atomisp_driver/atomisp_compat_ioctl32.c        |  1 +
 .../pci/atomisp2/atomisp_driver/atomisp_ioctl.c    |  3 +++
 3 files changed, 28 insertions(+)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c b/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c
index d5d31a6..9089132 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c
@@ -457,6 +457,26 @@ static int ov8858_set_exposure(struct v4l2_subdev *sd, int exposure, int gain,
 	return ret;
 }
 
+/*
+   When exposure gain value set to sensor, the sensor changed value.
+   So we need the function to get real value
+ */
+static int ov8858_g_update_exposure(struct v4l2_subdev *sd,
+				struct atomisp_update_exposure *exposure)
+{
+	struct ov8858_device *dev = to_ov8858_sensor(sd);
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int gain = exposure->gain;
+
+	dev_dbg(&client->dev, "%s: gain: %d, digi_gain: %d\n", __func__,
+			exposure->gain, exposure->digi_gain);
+	exposure->update_digi_gain = dev->digital_gain;
+	/* This real gain value fetching function is provided by vendor */
+	exposure->update_gain = (((gain & 0x700) >> 8) + 1) * (gain & 0xFF);
+
+	return 0;
+}
+
 static int ov8858_s_exposure(struct v4l2_subdev *sd,
 			     struct atomisp_exposure *exposure)
 {
@@ -691,6 +711,7 @@ static int ov8858_g_comp_delay(struct v4l2_subdev *sd, unsigned int *usec)
 
 	return 0;
 }
+
 static long ov8858_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
@@ -701,6 +722,9 @@ static long ov8858_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		return ov8858_g_priv_int_data(sd, arg);
 	case ATOMISP_IOC_G_DEPTH_SYNC_COMP:
 		return ov8858_g_comp_delay(sd, (unsigned int *)arg);
+	case ATOMISP_IOC_G_UPDATE_EXPOSURE:
+		return ov8858_g_update_exposure(sd,
+				(struct atomisp_update_exposure *)arg);
 	default:
 		dev_dbg(&client->dev, "Unhandled command 0x%X\n", cmd);
 		return -EINVAL;
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c
index 0441b70..ea16614 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_ioctl32.c
@@ -1178,6 +1178,7 @@ long atomisp_compat_ioctl32(struct file *file,
 	case ATOMISP_IOC_G_INVALID_FRAME_NUM:
 	case ATOMISP_IOC_S_ARRAY_RESOLUTION:
 	case ATOMISP_IOC_S_SENSOR_RUNMODE:
+	case ATOMISP_IOC_G_UPDATE_EXPOSURE:
 		ret = native_ioctl(file, cmd, arg);
 		break;
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index 99e78e3..61c3d4e 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -2754,6 +2754,7 @@ static long atomisp_vidioc_default(struct file *file, void *fh,
 	case ATOMISP_IOC_G_SENSOR_AE_BRACKETING_MODE:
 	case ATOMISP_IOC_S_SENSOR_AE_BRACKETING_LUT:
 	case ATOMISP_IOC_S_SENSOR_EE_CONFIG:
+	case ATOMISP_IOC_G_UPDATE_EXPOSURE:
 		/* we do not need take isp->mutex for these IOCTLs */
 		break;
 	default:
@@ -2933,6 +2934,7 @@ static long atomisp_vidioc_default(struct file *file, void *fh,
 	case ATOMISP_IOC_S_SENSOR_AE_BRACKETING_MODE:
 	case ATOMISP_IOC_G_SENSOR_AE_BRACKETING_MODE:
 	case ATOMISP_IOC_S_SENSOR_AE_BRACKETING_LUT:
+	case ATOMISP_IOC_G_UPDATE_EXPOSURE:
 		err = v4l2_subdev_call(isp->inputs[asd->input_curr].camera,
 					core, ioctl, cmd, arg);
 		break;
@@ -3047,6 +3049,7 @@ static long atomisp_vidioc_default(struct file *file, void *fh,
 	case ATOMISP_IOC_S_SENSOR_AE_BRACKETING_MODE:
 	case ATOMISP_IOC_G_SENSOR_AE_BRACKETING_MODE:
 	case ATOMISP_IOC_S_SENSOR_AE_BRACKETING_LUT:
+	case ATOMISP_IOC_G_UPDATE_EXPOSURE:
 		break;
 	default:
 		rt_mutex_unlock(&isp->mutex);
-- 
1.9.1

