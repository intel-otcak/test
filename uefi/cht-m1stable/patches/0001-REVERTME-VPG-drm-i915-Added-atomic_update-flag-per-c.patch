From d5c5d92d63b6e628bf5d8afb304cf222ef27b04e Mon Sep 17 00:00:00 2001
Message-Id: <d5c5d92d63b6e628bf5d8afb304cf222ef27b04e.1435806709.git.chang-joon.lee@intel.com>
From: Sonika Jindal <sonika.jindal@intel.com>
Date: Tue, 26 May 2015 11:42:04 +0530
Subject: [PATCH] REVERTME [VPG]: drm/i915: Added atomic_update flag per crtc

The atomic_update flag in dev_priv will be common across the crtc.
Hence there will be conflict when there is a flip on one of the crtc
and a modeset on another crtc. On the crtc which has flip will set
atomic_update whereas for the crtc on which modeset is occuring if
this flag is set the reg will not be written. Solution would be to
have a atomic_update flag for each crtc (intel_crtc).

REVERTME: This patch fixes an issue in VPG internal set_display IOCTL.
This entire IOCTL and related fixes can be reverted once the upstream
nuclear page flip / atomic mode set lands in this product kernel.

Issue: GMINL-10444
Change-Id: I3f735d792c3f1451a6ba306b1de11a6756ab98f0
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
Reviewed-by: Sonika Jindal <sonika.jindal@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |    1 
 drivers/gpu/drm/i915/intel_display.c |   22 ++++++------
 drivers/gpu/drm/i915/intel_drv.h     |    1 
 drivers/gpu/drm/i915/intel_sprite.c  |   63 ++++++++++++++++-------------------
 4 files changed, 41 insertions(+), 46 deletions(-)

Index: b/drivers/gpu/drm/i915/i915_drv.h
===================================================================
--- a/drivers/gpu/drm/i915/i915_drv.h	2016-03-08 10:19:45.033162661 -0800
+++ b/drivers/gpu/drm/i915/i915_drv.h	2016-03-08 10:19:52.717260587 -0800
@@ -1721,7 +1721,6 @@
 	/* Atomicity fixes */
 	u32 pfit_pipe;
 	bool pfit_changed;
-	bool atomic_update;
 	bool pri_update;
 	u32 dspcntr;
 	bool wait_vbl;
Index: b/drivers/gpu/drm/i915/intel_display.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_display.c	2016-03-08 10:19:45.037162712 -0800
+++ b/drivers/gpu/drm/i915/intel_display.c	2016-03-08 10:19:52.717260587 -0800
@@ -2772,7 +2772,7 @@
 	 * In case of atomic update, primary enable/disable is already cached as
 	 * part of sprite flip, make use of that over here
 	 */
-	if (intel_crtc->pri_update && dev_priv->atomic_update) {
+	if (intel_crtc->pri_update && intel_crtc->atomic_update) {
 		dspcntr = intel_crtc->reg.cntr;
 		intel_crtc->pri_update = false;
 	} else {
@@ -2883,7 +2883,7 @@
 			intel_crtc->reg.pfit_control =
 				intel_crtc->config.gmch_pfit.control;
 			intel_crtc->reg.pipesrc = intel_crtc->scaling_src_size;
-			if (!dev_priv->atomic_update) {
+			if (!intel_crtc->atomic_update) {
 				I915_WRITE(PFIT_CONTROL,
 					intel_crtc->reg.pfit_control);
 				I915_WRITE(PIPESRC(pipe),
@@ -2896,7 +2896,7 @@
 			intel_crtc->reg.pipesrc =
 				((mode->hdisplay - 1) <<
 				SCALING_SRCSIZE_SHIFT) | (mode->vdisplay - 1);
-			if (!dev_priv->atomic_update) {
+			if (!intel_crtc->atomic_update) {
 				I915_WRITE(PIPESRC(pipe),
 						intel_crtc->reg.pipesrc);
 				I915_WRITE(PFIT_CONTROL,
@@ -2908,7 +2908,7 @@
 
 	/* When in maxfifo dspcntr cannot be changed */
 	if (dspcntr != I915_READ(DSPCNTR(pipe)) && dev_priv->maxfifo_enabled
-			&& dev_priv->atomic_update) {
+			&& intel_crtc->atomic_update) {
 		intel_update_maxfifo(dev_priv, crtc, false);
 		dev_priv->wait_vbl = true;
 		dev_priv->vblcount =
@@ -2949,7 +2949,7 @@
 	}
 
 	intel_crtc->reg.cntr = dspcntr;
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		I915_WRITE(reg, intel_crtc->reg.cntr);
 
 	linear_offset = y * fb->pitches[0] + x * (fb->bits_per_pixel / 8);
@@ -2965,13 +2965,13 @@
 	}
 
 	intel_crtc->reg.stride = fb->pitches[0];
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		I915_WRITE(DSPSTRIDE(plane), intel_crtc->reg.stride);
 	if (INTEL_INFO(dev)->gen >= 4) {
 		intel_crtc->reg.surf = i915_gem_obj_ggtt_offset(obj) +
 						intel_crtc->dspaddr_offset;
 
-		if (!dev_priv->atomic_update) {
+		if (!intel_crtc->atomic_update) {
 			I915_MODIFY_DISPBASE(DSPSURF(plane),
 				intel_crtc->reg.surf);
 			intel_dsi_send_fb_on_crtc(crtc);
@@ -2984,7 +2984,7 @@
 			intel_crtc->reg.linoff = linear_offset +
 				(fb->height - 1) * fb->pitches[0] +
 				(fb->width - 1) * pixel_size;
-			if (!dev_priv->atomic_update) {
+			if (!intel_crtc->atomic_update) {
 				I915_WRITE(DSPTILEOFF(plane),
 					intel_crtc->reg.tileoff);
 				I915_WRITE(DSPLINOFF(plane),
@@ -2993,7 +2993,7 @@
 		} else {
 			intel_crtc->reg.tileoff = (y << 16) | x;
 			intel_crtc->reg.linoff = linear_offset;
-			if (!dev_priv->atomic_update) {
+			if (!intel_crtc->atomic_update) {
 				I915_WRITE(DSPTILEOFF(plane),
 					intel_crtc->reg.tileoff);
 				I915_WRITE(DSPLINOFF(plane),
@@ -11231,7 +11231,7 @@
 		DRM_ERROR("Atomicity version or struct size mismatch");
 		return -EINVAL;
 	}
-	dev_priv->atomic_update = true;
+	intel_crtc->atomic_update = true;
 
 	intel_runtime_pm_get(dev_priv);
 
@@ -11304,7 +11304,7 @@
 
 	dev_priv->prev_pipe_plane_stat = dev_priv->pipe_plane_stat;
 
-	dev_priv->atomic_update = false;
+	intel_crtc->atomic_update = false;
 
 	intel_runtime_pm_put(dev_priv);
 	return ret;
Index: b/drivers/gpu/drm/i915/intel_drv.h
===================================================================
--- a/drivers/gpu/drm/i915/intel_drv.h	2016-03-08 10:19:45.041162763 -0800
+++ b/drivers/gpu/drm/i915/intel_drv.h	2016-03-08 10:19:52.721260647 -0800
@@ -452,6 +452,7 @@
 	bool enableprimary;
 	bool lowfreq_avail;
 	bool pri_update;
+	bool atomic_update;
 	struct intel_overlay *overlay;
 
 	struct intel_unpin_work *unpin_work;
Index: b/drivers/gpu/drm/i915/intel_sprite.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_sprite.c	2016-03-08 10:19:45.041162763 -0800
+++ b/drivers/gpu/drm/i915/intel_sprite.c	2016-03-08 10:21:10.686253528 -0800
@@ -156,7 +156,7 @@
 			(I915_READ(dspreg) | DISPLAY_PLANE_ENABLE);
 		intel_crtc->pri_update = true;
 		intel_plane->pri_update = true;
-		if (!dev_priv->atomic_update)
+		if (!intel_crtc->atomic_update)
 			I915_WRITE(dspreg,
 				I915_READ(dspreg) | DISPLAY_PLANE_ENABLE);
 		dev_priv->pipe_plane_stat |=
@@ -169,7 +169,7 @@
 			I915_READ(dspreg) & ~DISPLAY_PLANE_ENABLE;
 		intel_crtc->pri_update = true;
 		intel_plane->pri_update = true;
-		if (!dev_priv->atomic_update) {
+		if (!intel_crtc->atomic_update) {
 			I915_WRITE(dspreg,
 				I915_READ(dspreg) & ~DISPLAY_PLANE_ENABLE);
 			I915_WRITE(DSPSURF(plane),
@@ -253,10 +253,6 @@
 	struct drm_mode_object *drmmode_obj;
 	struct intel_crtc *intel_crtc;
 
-	/* Alpha is handled in update plane */
-	if (dev_priv->atomic_update)
-		return 0;
-
 	drmmode_obj = drm_mode_object_find(dev, plane,
 			DRM_MODE_OBJECT_PLANE);
 
@@ -352,7 +348,7 @@
 	s2_zorder = (order >> 1) & 0x1;
 	s2_bottom = (order >> 0) & 0x1;
 
-	if (dev_priv->atomic_update)
+	if (intel_crtc->atomic_update)
 		goto calc_zorder;
 
 	/* Clear the older Z-order */
@@ -375,18 +371,18 @@
 calc_zorder:
 
 	/* Program new Z-order */
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		val = I915_READ(SPCNTR(pipe, 0));
 	if (s1_zorder)
 		val |= SPRITE_ZORDER_ENABLE;
 	if (s1_bottom)
 		val |= SPRITE_FORCE_BOTTOM;
-	if (dev_priv->atomic_update)
+	if (intel_crtc->atomic_update)
 		intel_crtc->reg.spacntr = val;
 	else
 		I915_WRITE(SPCNTR(pipe, 0), val);
 
-	if (dev_priv->atomic_update)
+	if (intel_crtc->atomic_update)
 		val = 0;
 	else
 		val = I915_READ(SPCNTR(pipe, 1));
@@ -394,7 +390,7 @@
 		val |= SPRITE_ZORDER_ENABLE;
 	if (s2_bottom)
 		val |= SPRITE_FORCE_BOTTOM;
-	if (dev_priv->atomic_update)
+	if (intel_crtc->atomic_update)
 		intel_crtc->reg.spbcntr = val;
 	else
 		I915_WRITE(SPCNTR(pipe, 1), val);
@@ -512,7 +508,7 @@
 
 	sprctl |= SP_ENABLE;
 
-	if (!dev_priv->atomic_update) {
+	if (!intel_crtc->atomic_update) {
 		intel_update_sprite_watermarks(dplane, crtc, src_w, pixel_size,
 				true, src_w != crtc_w || src_h != crtc_h);
 	}
@@ -527,7 +523,7 @@
 	crtc_h--;
 
 	intel_plane->reg.pos = (crtc_y << 16) | crtc_x;
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		I915_WRITE(SPPOS(pipe, plane), intel_plane->reg.pos);
 
 	linear_offset = y * fb->pitches[0] + x * pixel_size;
@@ -537,7 +533,7 @@
 							fb->pitches[0]);
 	linear_offset -= sprsurf_offset;
 
-	if (!dev_priv->atomic_update) {
+	if (!intel_crtc->atomic_update) {
 		atomic_update = intel_pipe_update_start(intel_crtc,
 			&start_vbl_count);
 		intel_update_primary_plane(dplane, intel_crtc);
@@ -549,7 +545,7 @@
 		intel_plane->reg.pfit_control =
 				intel_crtc->config.gmch_pfit.control;
 		intel_plane->reg.pipesrc = intel_crtc->scaling_src_size;
-		if (!dev_priv->atomic_update) {
+		if (!intel_crtc->atomic_update) {
 			I915_WRITE(PFIT_CONTROL, intel_plane->reg.pfit_control);
 			I915_WRITE(PIPESRC(pipe), intel_plane->reg.pipesrc);
 			intel_crtc->pfit_en_status = true;
@@ -561,7 +557,7 @@
 		intel_plane->reg.pipesrc =
 			((mode->hdisplay - 1) << SCALING_SRCSIZE_SHIFT) |
 			(mode->vdisplay - 1);
-		if (!dev_priv->atomic_update) {
+		if (!intel_crtc->atomic_update) {
 			I915_WRITE(PIPESRC(pipe), intel_plane->reg.pipesrc);
 			I915_WRITE(PFIT_CONTROL, intel_plane->reg.pfit_control);
 			intel_crtc->pfit_en_status = false;
@@ -569,7 +565,7 @@
 	}
 
 	intel_plane->reg.stride = fb->pitches[0];
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		I915_WRITE(SPSTRIDE(pipe, plane), intel_plane->reg.stride);
 
 	if (obj->tiling_mode != I915_TILING_NONE) {
@@ -578,7 +574,7 @@
 				((y + crtc_h) << 16) | (x + crtc_w);
 		else
 			intel_plane->reg.tileoff = (y << 16) | x;
-		if (!dev_priv->atomic_update)
+		if (!intel_crtc->atomic_update)
 			I915_WRITE(SPTILEOFF(pipe, plane),
 				intel_plane->reg.tileoff);
 	} else {
@@ -588,13 +584,13 @@
 					 (crtc_w + 1) * pixel_size;
 		else
 			intel_plane->reg.linoff = linear_offset;
-		if (!dev_priv->atomic_update)
+		if (!intel_crtc->atomic_update)
 			I915_WRITE(SPLINOFF(pipe, plane),
 				intel_plane->reg.linoff);
 	}
 
 	intel_plane->reg.size = (crtc_h << 16) | crtc_w;
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		I915_WRITE(SPSIZE(pipe, plane), intel_plane->reg.size);
 
 	if (rotate)
@@ -634,7 +630,7 @@
 	/* When in maxfifo dspcntr cannot be changed */
 	if (sprctl != I915_READ(SPCNTR(pipe, plane)) &&
 				dev_priv->maxfifo_enabled &&
-				dev_priv->atomic_update) {
+				intel_crtc->atomic_update) {
 		intel_update_maxfifo(dev_priv, crtc, false);
 		dev_priv->wait_vbl = true;
 		dev_priv->vblcount =
@@ -686,7 +682,7 @@
 	intel_plane->reg.cntr = sprctl;
 	intel_plane->reg.surf &= ~DISP_BASEADDR_MASK;
 	intel_plane->reg.surf |= i915_gem_obj_ggtt_offset(obj) + sprsurf_offset;
-	if (!dev_priv->atomic_update) {
+	if (!intel_crtc->atomic_update) {
 		I915_WRITE(SPCNTR(pipe, plane), sprctl);
 		I915_MODIFY_DISPBASE(SPSURF(pipe, plane),
 			i915_gem_obj_ggtt_offset(obj) + sprsurf_offset);
@@ -697,17 +693,17 @@
 	dev_priv->pipe_plane_stat |=
 			VLV_UPDATEPLANE_STAT_SP_PER_PIPE(pipe, plane);
 
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		intel_flush_primary_plane(dev_priv, intel_crtc->plane);
 
 	if (event == NULL)
 		POSTING_READ(SPSURF(pipe, plane));
 
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		intel_update_sprite_watermarks(dplane, crtc, src_w, pixel_size,
 				true, src_w != crtc_w || src_h != crtc_h);
 
-	if (!dev_priv->atomic_update) {
+	if (!intel_crtc->atomic_update) {
 		if (atomic_update)
 			intel_pipe_update_end(intel_crtc, start_vbl_count);
 	}
@@ -726,7 +722,7 @@
 	bool atomic_update = false;
 	u32 mask, shift;
 
-	if (!dev_priv->atomic_update) {
+	if (!intel_crtc->atomic_update) {
 		atomic_update = intel_pipe_update_start(intel_crtc,
 			&start_vbl_count);
 		intel_update_primary_plane(dplane, intel_crtc);
@@ -736,24 +732,24 @@
 			~VLV_UPDATEPLANE_STAT_SP_PER_PIPE(pipe, plane);
 
 	intel_plane->reg.cntr = I915_READ(SPCNTR(pipe, plane)) & ~SP_ENABLE;
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		I915_WRITE(SPCNTR(pipe, plane), I915_READ(SPCNTR(pipe, plane)) &
 			~SP_ENABLE);
 
 	/* Activate double buffered register update */
 	intel_plane->reg.surf = 0;
-	if (!dev_priv->atomic_update) {
+	if (!intel_crtc->atomic_update) {
 		I915_MODIFY_DISPBASE(SPSURF(pipe, plane), 0);
 		POSTING_READ(SPSURF(pipe, plane));
 	}
 
-	if (!dev_priv->atomic_update) {
+	if (!intel_crtc->atomic_update) {
 		intel_flush_primary_plane(dev_priv, intel_crtc->plane);
 		if (atomic_update)
 			intel_pipe_update_end(intel_crtc, start_vbl_count);
 	}
 
-	if (!dev_priv->atomic_update)
+	if (!intel_crtc->atomic_update)
 		intel_update_sprite_watermarks(dplane,
 			crtc, 0, 0, false, false);
 	intel_plane->last_plane_state = INTEL_PLANE_STATE_DISABLED;
@@ -1431,7 +1427,6 @@
 		   struct drm_pending_vblank_event *event)
 {
 	struct drm_device *dev = plane->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 	struct intel_plane *intel_plane = to_intel_plane(plane);
 	struct intel_framebuffer *intel_fb = to_intel_framebuffer(fb);
@@ -1741,7 +1736,7 @@
 			/* Enable for non-VLV if required */
 			if (IS_VALLEYVIEW(dev)) {
 				intel_crtc->primary_enabled = true;
-				if (dev_priv->atomic_update)
+				if (intel_crtc->atomic_update)
 					intel_update_primary_plane(plane,
 						intel_crtc);
 				intel_post_enable_primary(crtc);
@@ -1765,7 +1760,7 @@
 			if (IS_VALLEYVIEW(dev)) {
 				intel_crtc->primary_enabled = false;
 				intel_pre_disable_primary(crtc);
-				if (dev_priv->atomic_update)
+				if (intel_crtc->atomic_update)
 					intel_update_primary_plane(plane,
 						intel_crtc);
 			}
@@ -1852,7 +1847,7 @@
 		intel_crtc->primary_enabled = true;
 		intel_plane->disable_plane(plane, plane->crtc);
 		if (!primary_was_enabled && intel_crtc->primary_enabled) {
-			if (dev_priv->atomic_update)
+			if (intel_crtc->atomic_update)
 				intel_update_primary_plane(plane, intel_crtc);
 			intel_post_enable_primary(plane->crtc);
 		}
