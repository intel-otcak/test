From 7501c0f5eb025d98096fdd80a11ee3ff6be51423 Mon Sep 17 00:00:00 2001
From: John Harrison <John.C.Harrison@Intel.com>
Date: Wed, 4 Nov 2015 14:23:36 +0000
Subject: [PATCH] REVERTME [VPG]: drm/i915: Initialise the seqno to 1 instead
 of -0x1000

There is race condition deadlock when the seqno wraps around zero. The
wrap around idles the GPU and retires all completed work. This can
lead to a context reference count going to zero which in turn will
free up the VMA of that context. The VMA unbind code waits for _all_
outstanding rendering on the VMA's object to complete rather than just
the rendering that is using the specific VMA being freed. In the case
where the last submitted batch buffer using the object is still queued
in the scheduler, that triggers a batch buffer submission. The
submission requires allocating a brand new seqno. That causes the
seqno to wrap around zero which is a recursive dead lock situation.

Fixing this properly is going to be a large, complicated and risky
change to the driver. That is not desirable for a customer in the
process of final Q/A prior to shipping end products. As the deadlock
is a rare race condition that only occurs when the seqno wraps around,
the simplest solution is to reduce the wrap frequency. The reason the
seqno defaults to -0x1000 is to trap wrap around issues in testing.
Changing that to +1 instead will mean the wrap only occurs after 4GB
requests have been submitted. The seqno is reset to its start of day
value on every suspend/resume cycle thus to reach the wrap means 4GB
requests without ever suspending. For an Android tablet, this is an
extremely unlikely event on top of an extremely unlikely event.

Some experimentation was done on a customer board running the Monkey
stress test and GLBenchmark in a continuous loop. Extrapolating the
seqno usage gives an estimate of 1600 days before wrap for Monkey and
1100 days for GLBenchmark - so 3 to 4 years.

Note that this patch is a REVERTME because the bug is still present
and should be fixed properly. When such a fix is available and has
been suitably tested, this patch can be reverted.

Change-Id: I87557ff98c71742f5aee5c99803cde2865a01eab
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-7939
Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
---
 drivers/gpu/drm/i915/i915_gem.c  | 2 +-
 drivers/gpu/drm/i915/intel_lrc.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 1224e84..c01558e 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -5703,7 +5703,7 @@ int i915_gem_init_rings(struct drm_device *dev)
 			goto cleanup_vebox_ring;
 	}
 
-	ret = i915_gem_set_seqno(dev, ((u32)~0 - 0x1000));
+	ret = i915_gem_set_seqno(dev, 1);
 	if (ret)
 		goto cleanup_bsd2_ring;
 
diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index f76cb07..7d4f687 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -3239,7 +3239,7 @@ int intel_logical_rings_init(struct drm_device *dev)
 			goto cleanup_vebox_ring;
 	}
 
-	ret = i915_gem_set_seqno(dev, ((u32)~0 - 0x1000));
+	ret = i915_gem_set_seqno(dev, 1);
 	if (ret)
 		goto cleanup_bsd2_ring;
 
-- 
1.9.1

