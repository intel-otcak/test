From 60312e455f369e63ef0be7b4d7ee35cf21d8437d Mon Sep 17 00:00:00 2001
Message-Id: <60312e455f369e63ef0be7b4d7ee35cf21d8437d.1426052288.git.chang-joon.lee@intel.com>
In-Reply-To: <99f2c84a457bac958678aa60ef795f22948aa382.1426052288.git.chang-joon.lee@intel.com>
References: <99f2c84a457bac958678aa60ef795f22948aa382.1426052288.git.chang-joon.lee@intel.com>
From: Praveen Paneri <praveen.paneri@intel.com>
Date: Tue, 10 Mar 2015 15:27:09 +0530
Subject: [PATCH 5/5] FROM_UPSTREAM [VPG] drm/i915: add missing rpm ref to
 i915_gem_pwrite_ioctl

Without this RPM ref we can hit the device suspended WARN via:
i915_gem_object_pin()->ggtt_bind_vma->gen6_ggtt_insert_entries(). I
noticed this on my BYT while keeping the i915 device in runtime
suspended state for a while. I chose this place to take the ref to
avoid the possible deadlock via the mutex_lock taken both later in this
function and in the runtime suspend handler. This can happen if an RPM
suspend event is queued and need to be flushed before taking the RPM
ref.

Issue: GMINL-6913
Change-Id: I1a1b78f8c0745ef782cb8defc345107aaa1b14c4
Upstream-Repo: git://people.freedesktop.org/~danvet/drm-intel
Upstream-commit: 5d77d9c5e177d2182df5d9fd61ba986facb64415
Signed-off-by: Imre Deak <imre.deak@intel.com>
Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Signed-off-by: Praveen Paneri <praveen.paneri@intel.com>
---
 drivers/gpu/drm/i915/i915_gem.c |    8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 16febb4..cc778ce 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -1039,6 +1039,7 @@ int
 i915_gem_pwrite_ioctl(struct drm_device *dev, void *data,
 		      struct drm_file *file)
 {
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct drm_i915_gem_pwrite *args = data;
 	struct drm_i915_gem_object *obj;
 	int ret;
@@ -1058,9 +1059,11 @@ i915_gem_pwrite_ioctl(struct drm_device *dev, void *data,
 			return -EFAULT;
 	}
 
+	intel_runtime_pm_get(dev_priv);
+
 	ret = i915_mutex_lock_interruptible(dev);
 	if (ret)
-		return ret;
+		goto put_rpm;
 
 	obj = to_intel_bo(drm_gem_object_lookup(dev, file, args->handle));
 	if (&obj->base == NULL) {
@@ -1113,6 +1116,9 @@ out:
 	drm_gem_object_unreference(&obj->base);
 unlock:
 	mutex_unlock(&dev->struct_mutex);
+put_rpm:
+	intel_runtime_pm_put(dev_priv);
+
 	return ret;
 }
 
-- 
1.7.9.5

