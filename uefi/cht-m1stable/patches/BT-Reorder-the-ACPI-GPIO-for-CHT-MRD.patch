From 0818ed46b75b5cecb00bbe3b3ca51e20ebb7e8ea Mon Sep 17 00:00:00 2001
From: Marco Chiotti <marcox.chiotti@intel.com>
Date: Tue, 22 Mar 2016 15:21:49 +0100
Subject: [PATCH 1/7] [BT] Reorder the ACPI GPIO for CHT MRD

CHT MRD has the wake and enable GPIOs
swapped with respect of the other CHT
devices
This patch gets the target device from
the bios version and uses this info
for using the correct GPIO
This is a temporary workaround before
a proper solution will be found

Change-Id: I579a58941f7721c07022e31610868c27ca6bdbef
Signed-off-by: Marco Chiotti <marcox.chiotti@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-22931
Reviewed-on: https://android.intel.com:443/484888
---
 drivers/misc/bt_lpm/bt_lpm.c | 41 ++++++++++++++++++++++++++++++++++++++---
 1 file changed, 38 insertions(+), 3 deletions(-)

diff --git a/drivers/misc/bt_lpm/bt_lpm.c b/drivers/misc/bt_lpm/bt_lpm.c
index f70d003..8c21826 100644
--- a/drivers/misc/bt_lpm/bt_lpm.c
+++ b/drivers/misc/bt_lpm/bt_lpm.c
@@ -27,10 +27,20 @@
 #include <linux/pm_runtime.h>
 #include <linux/delay.h>
 #include <linux/serial_hsu.h>
+#include <linux/dmi.h>
+
+static const struct dmi_system_id mrd_bt_gpio[] = {
+	{
+		.matches = {DMI_MATCH(DMI_BIOS_VERSION, "CHTMRD"),},
+	},
+	{}
+};
+
+static bool isMrdBoard;
 
 enum {
-	gpio_enable_bt_acpi_idx,
 	gpio_wake_acpi_idx,
+	gpio_enable_bt_acpi_idx,
 	host_wake_acpi_idx
 };
 static struct gpio_desc *bt_lpm_gpiod;
@@ -109,14 +119,32 @@ static int bt_lpm_acpi_probe(struct platform_device *pdev)
 {
 	acpi_handle handle;
 	acpi_integer port;
+	const struct dmi_system_id *dmi_id;
+
+	isMrdBoard = false;
+	dmi_id = dmi_first_match(mrd_bt_gpio);
+	if (dmi_id) {
+		pr_debug("CHT MRD found - reordering GPIO\n");
+		isMrdBoard = true;
+	}
 
 	/*
 	 * Handle ACPI specific initializations.
 	 */
 	dev_dbg(&pdev->dev, "ACPI specific probe\n");
 
-	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "enable_bt",
+	/*
+	 * In CHT MRD the gpio_wake_acpi_idx and gpio_enable_bt_acpi_idx
+	 * coming from the ACPI table are swapped
+	 * This is a temporary fix waiting for the correct ACPI table
+	 */
+	if (isMrdBoard) {
+		bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "enable_bt",
+						gpio_wake_acpi_idx);
+	} else {
+		bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "enable_bt",
 						gpio_enable_bt_acpi_idx);
+	}
 	bt_lpm.gpio_enable_bt = desc_to_gpio(bt_lpm_gpiod);
 	if (!gpio_is_valid(bt_lpm.gpio_enable_bt)) {
 		pr_err("%s: gpio %d for gpio_enable_bt not valid\n", __func__,
@@ -125,8 +153,13 @@ static int bt_lpm_acpi_probe(struct platform_device *pdev)
 	}
 
 #ifndef DBG_DISABLE_BT_LOW_POWER
-	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "host_wake_bt",
+	if (isMrdBoard) {
+		bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "host_wake_bt",
+						gpio_enable_bt_acpi_idx);
+	} else {
+		bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "host_wake_bt",
 						gpio_wake_acpi_idx);
+	}
 	bt_lpm.gpio_wake = desc_to_gpio(bt_lpm_gpiod);
 	if (!gpio_is_valid(bt_lpm.gpio_wake)) {
 		pr_err("%s: gpio %d for gpio_wake not valid\n", __func__,
@@ -242,6 +275,8 @@ static enum hrtimer_restart enter_lpm(struct hrtimer *timer)
 {
 	pr_debug("%s\n", __func__);
 
+	set_wake_locked(0);
+
 	return HRTIMER_NORESTART;
 }
 
-- 
1.9.1

