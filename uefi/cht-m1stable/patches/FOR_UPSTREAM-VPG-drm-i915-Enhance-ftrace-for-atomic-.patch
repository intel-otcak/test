From aa4d0de7ff3ae42c6af19d3de087534d05ad3bc1 Mon Sep 17 00:00:00 2001
From: lei shen <lei.shen@intel.com>
Date: Tue, 24 Nov 2015 20:16:00 +0800
Subject: [PATCH 01/10] FOR_UPSTREAM [VPG]: drm/i915: Enhance ftrace for atomic
 update

This commit is used to enhance trace for atomic update:
1.trace atomic update start with scanline, vblcount, panel fitter etc.
2.trace atomic update end with scanline and vblcount
3.trace maxfifo on/off with scanline and vblcount
4.trace plane/display flip info(fb id, flags) sent to kernel.

Tracked-On: https://jira01.devtools.intel.com/browse/OAM-26200
Change-Id: Iad99c4fb5051d651ef2bd4913ba8e3fa4f535a66
Signed-off-by: Shen, Lei <lei.shen@intel.com>
Reviewed-on: https://android.intel.com:443/477648
---
 drivers/gpu/drm/i915/i915_trace.h    | 103 +++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_display.c |   5 +-
 drivers/gpu/drm/i915/intel_pm.c      |   1 +
 3 files changed, 108 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/i915_trace.h b/drivers/gpu/drm/i915/i915_trace.h
index d78bbed..a238aa0 100644
--- a/drivers/gpu/drm/i915/i915_trace.h
+++ b/drivers/gpu/drm/i915/i915_trace.h
@@ -16,6 +16,109 @@
 #define TRACE_SYSTEM_STRING __stringify(TRACE_SYSTEM)
 #define TRACE_INCLUDE_FILE i915_trace
 
+/* atomic update */
+TRACE_EVENT(i915_atomic_update_start,
+	    TP_PROTO(struct intel_crtc *crtc),
+	    TP_ARGS(crtc),
+	    TP_STRUCT__entry(
+			     __field(enum pipe, pipe)
+			     __field(bool, pfit_changed)
+			     __field(u32, pfit_control)
+			     __field(u32, scaling_src_size)
+			     __field(u32, frame)
+			     __field(u32, scanline)
+			     ),
+
+	    TP_fast_assign(
+			   __entry->pipe = crtc->pipe;
+			   __entry->pfit_changed = ((struct drm_i915_private *)
+			     crtc->base.dev->dev_private)->pfit_changed;
+			   __entry->pfit_control = crtc->pfit_control;
+			   __entry->scaling_src_size = crtc->scaling_src_size;
+			   __entry->frame =
+			     crtc->base.dev->driver->get_vblank_counter(
+			     crtc->base.dev, crtc->pipe);
+			   __entry->scanline = intel_get_crtc_scanline(crtc);
+			   ),
+
+	    TP_printk("pipe %c, frame=%u, scanline=%u, pf[%s]:ctrl=%x size=%x",
+		      pipe_name(__entry->pipe), __entry->frame,
+		       __entry->scanline, __entry->pfit_changed ? "Y":"N",
+		       __entry->pfit_control, __entry->scaling_src_size)
+);
+
+TRACE_EVENT(i915_atomic_update_end,
+	    TP_PROTO(struct intel_crtc *crtc),
+	    TP_ARGS(crtc),
+	    TP_STRUCT__entry(
+			     __field(enum pipe, pipe)
+			     __field(u32, frame)
+			     __field(u32, scanline)
+			     ),
+
+	    TP_fast_assign(
+			   __entry->pipe = crtc->pipe;
+			   __entry->frame =
+			     crtc->base.dev->driver->get_vblank_counter(
+			     crtc->base.dev, crtc->pipe);
+			   __entry->scanline = intel_get_crtc_scanline(crtc);
+			   ),
+
+	    TP_printk("pipe %c, frame=%u, scanline=%u",
+		      pipe_name(__entry->pipe), __entry->frame,
+		       __entry->scanline)
+);
+
+TRACE_EVENT(i915_maxfifo_update,
+	    TP_PROTO(struct intel_crtc *crtc, bool enable),
+	    TP_ARGS(crtc, enable),
+	    TP_STRUCT__entry(
+			     __field(enum pipe, pipe)
+			     __field(u32, frame)
+			     __field(u32, scanline)
+			     __field(bool, enable)
+			     ),
+
+	    TP_fast_assign(
+			   __entry->pipe = crtc->pipe;
+			   __entry->frame =
+			     crtc->base.dev->driver->get_vblank_counter(
+			     crtc->base.dev, crtc->pipe);
+			   __entry->scanline = intel_get_crtc_scanline(crtc);
+			   __entry->enable = enable;
+			   ),
+
+	    TP_printk("pipe %c, frame=%u, scanline=%u, maxfifo=%s",
+		      pipe_name(__entry->pipe), __entry->frame,
+		       __entry->scanline,
+		       __entry->enable ? "Enabled":"Disabled")
+);
+
+TRACE_EVENT(i915_plane_info,
+	    TP_PROTO(struct intel_crtc *crtc,
+		     struct drm_mode_set_display_plane *plane, u32 disp_flag),
+	    TP_ARGS(crtc, plane, disp_flag),
+	    TP_STRUCT__entry(
+			     __field(enum pipe, pipe)
+			     __field(u32, obj_type)
+			     __field(u32, fb_id)
+			     __field(u32, flags)
+			     __field(u32, disp_flag)
+			     ),
+
+	    TP_fast_assign(
+			   __entry->pipe = crtc->pipe;
+			   __entry->obj_type = plane->obj_type;
+			   __entry->fb_id = plane->fb_id;
+			   __entry->flags = plane->flags;
+			   __entry->disp_flag = disp_flag;
+			   ),
+
+	    TP_printk("pipe %c, obj_type=%x, fb_id=%u, flags=%x, disp_flag=%x",
+		      pipe_name(__entry->pipe), __entry->obj_type,
+		       __entry->fb_id, __entry->flags,  __entry->disp_flag)
+);
+
 /* pipe updates */
 
 TRACE_EVENT(i915_pipe_update_start,
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 61bc95d4..58c7a05 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -11481,6 +11481,8 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 
 	/* make sure to start from a fresh vblank */
 	for (i = disp->num_planes-1; i >= 0; i--) {
+		trace_i915_plane_info(intel_crtc, &disp->plane[i],
+			disp->update_flag);
 		if (disp->plane[i].update_flag &
 				DRM_MODE_SET_DISPLAY_PLANE_UPDATE_PRESENT)
 			plane_cnt++;
@@ -11541,13 +11543,14 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 	}
 
 	preempt_disable();
-
+	trace_i915_atomic_update_start(intel_crtc);
 	/* Commit to registers */
 	ret = intel_set_disp_commit_regs(disp, dev, intel_crtc, intel_disp_ptr);
 
 	if (IS_CHERRYVIEW(dev))
 		vlv_update_dsparb(intel_crtc);
 
+	trace_i915_atomic_update_end(intel_crtc);
 	preempt_enable();
 
 	/* Enable maxfifo if needed */
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 8693fbe..5951055 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -1728,6 +1728,7 @@ void intel_update_maxfifo(struct drm_i915_private *dev_priv,
 			I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
 		dev_priv->maxfifo_enabled = false;
 	}
+	trace_i915_maxfifo_update(to_intel_crtc(crtc), enable);
 }
 
 void
-- 
1.9.1

