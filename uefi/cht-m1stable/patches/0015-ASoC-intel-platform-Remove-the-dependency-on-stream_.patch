From fffda40256963200c5ae6cf96941db896f044a2b Mon Sep 17 00:00:00 2001
From: Samreen Nilofer <samreen.nilofer@intel.com>
Date: Thu, 27 Nov 2014 10:38:55 +0530
Subject: [PATCH 15/24] ASoC: intel: platform: Remove the dependency on
 stream_map

Issue: GMINL-4319

Derive the pipe id and task id details from the connective
widgets instead of the stream map.

Change-Id: I7b5e0f08c715530b37d5c8c70ae09901cec5871e
Signed-off-by: Samreen Nilofer <samreen.nilofer@intel.com>
---
 sound/soc/intel/pcm.c                            | 73 ++++++++++++++++++++++--
 sound/soc/intel/platform-libs/controls_v2_dpcm.c | 45 ++++++++-------
 sound/soc/intel/platform-libs/sst_widgets.h      | 14 ++++-
 sound/soc/intel/sst/sst_platform.c               |  8 +--
 4 files changed, 107 insertions(+), 33 deletions(-)

diff --git a/sound/soc/intel/pcm.c b/sound/soc/intel/pcm.c
index a04c84d..1269d13 100644
--- a/sound/soc/intel/pcm.c
+++ b/sound/soc/intel/pcm.c
@@ -37,6 +37,7 @@
 #include "platform_ipc_v2.h"
 #include "sst_platform.h"
 #include "sst_platform_pvt.h"
+#include "platform-libs/sst_widgets.h"
 
 struct device *sst_pdev;
 struct sst_device *sst_dsp;
@@ -203,17 +204,30 @@ int sst_fill_stream_params(void *substream,
 	struct sst_dev_stream_map *map;
 	struct snd_pcm_substream *pstream = NULL;
 	struct snd_compr_stream *cstream = NULL;
+	struct snd_soc_pcm_runtime *rtd = NULL;
+	struct snd_soc_dai *cpu_dai = NULL;
+	struct snd_soc_dapm_widget *w = NULL;
+	struct snd_soc_dapm_path *p = NULL;
 
 	map = ctx->pdata->pdev_strm_map;
 	map_size = ctx->pdata->strm_map_size;
 
-	if (is_compress == true)
+	if (is_compress == true) {
 		cstream = (struct snd_compr_stream *)substream;
-	else
+		rtd = cstream->private_data;
+	} else {
 		pstream = (struct snd_pcm_substream *)substream;
+		rtd = pstream->private_data;
+	}
 
 	str_params->stream_type = SST_STREAM_TYPE_MUSIC;
 
+	cpu_dai = rtd->cpu_dai;
+	if (cpu_dai == NULL) {
+		pr_err("%s: cpu_dai is NULL\n", __func__);
+		return -EINVAL;
+	}
+
 	/* For pcm streams */
 	if (pstream) {
 		index = sst_get_stream_mapping(pstream->pcm->device,
@@ -223,8 +237,40 @@ int sst_fill_stream_params(void *substream,
 			return -EINVAL;
 
 		str_params->stream_id = index;
-		str_params->device_type = map[index].device_id;
-		str_params->task = map[index].task_id;
+		w = (pstream->stream == SNDRV_PCM_STREAM_PLAYBACK) ?
+			cpu_dai->playback_widget : cpu_dai->capture_widget;
+
+		if (pstream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+			list_for_each_entry(p, &w->sinks, list_source) {
+
+				pr_debug("connect %d is_widget %d\n",
+						p->connect,
+						is_sst_dapm_widget(p->sink));
+
+				if (p->connect && is_sst_dapm_widget(p->sink)) {
+					struct sst_ids *ids = p->sink->priv;
+					u8 devtype = ids->location_id >> 8;
+
+					pr_debug("widget type=%d name=%s\n",
+						p->sink->id, p->sink->name);
+					str_params->device_type = devtype;
+					str_params->task = ids->task_id;
+				}
+			}
+		} else if (pstream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+			list_for_each_entry(p, &w->sources, list_sink) {
+
+			if (p->connect && is_sst_dapm_widget(p->source)) {
+				struct sst_ids *ids = p->source->priv;
+				u8 devtype = ids->location_id >> 8;
+
+				pr_debug("cap widget type=%d name=%s\n",
+						p->source->id, p->source->name);
+				str_params->device_type = devtype;
+				str_params->task = ids->task_id;
+				}
+			}
+		}
 
 		if (str_params->device_type == SST_PROBE_IN)
 			str_params->stream_type = SST_STREAM_TYPE_PROBE;
@@ -245,8 +291,23 @@ int sst_fill_stream_params(void *substream,
 		if (index <= 0)
 			return -EINVAL;
 		str_params->stream_id = index;
-		str_params->device_type = map[index].device_id;
-		str_params->task = map[index].task_id;
+
+		if (cstream->direction == SND_COMPRESS_PLAYBACK) {
+			w = cpu_dai->playback_widget;
+
+			list_for_each_entry(p, &w->sinks, list_source) {
+				if (p->connect && is_sst_dapm_widget(p->sink)) {
+					struct sst_ids *ids = p->sink->priv;
+					u8 devtype = ids->location_id >> 8;
+
+					pr_debug("comp widget type=%d name=%s\n",
+						p->sink->id, p->sink->name);
+					str_params->device_type = devtype;
+					str_params->task = ids->task_id;
+				}
+			}
+		}
+
 		pr_debug("compress str_id = %d, device_type = 0x%x, task = %d",
 			 str_params->stream_id, str_params->device_type,
 			 str_params->task);
diff --git a/sound/soc/intel/platform-libs/controls_v2_dpcm.c b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
index 26d4f98..76887e1 100644
--- a/sound/soc/intel/platform-libs/controls_v2_dpcm.c
+++ b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
@@ -546,7 +546,7 @@ static void sst_find_and_send_pipe_algo(struct sst_data *sst,
 {
 	struct soc_bytes_ext *sb;
 	struct sst_algo_data *bc;
-	struct module *algo = NULL;
+	struct sst_module *algo = NULL;
 
 	pr_debug("Enter: %s, widget=%s\n", __func__, pipe);
 
@@ -857,7 +857,7 @@ static void sst_set_pipe_gain(struct sst_ids *ids, struct sst_data *sst, int mut
 	struct soc_mixer_control *sm;
 	struct sst_gain_data *mc;
 	struct sst_gain_value *gv;
-	struct module *gain = NULL;
+	struct sst_module *gain = NULL;
 
 	list_for_each_entry(gain, &ids->gain_list, node) {
 		struct snd_kcontrol *kctl = gain->kctl;
@@ -1334,12 +1334,13 @@ static int sst_tone_generator_event(struct snd_soc_dapm_widget *w,
 	/* in case of tone generator, the params are combined with the ON cmd */
 	if (SND_SOC_DAPM_EVENT_ON(event)) {
 		int len;
-		struct module *algo;
+		struct sst_module *algo;
 		struct soc_bytes_ext *sb;
 		struct sst_algo_data *bc;
 		struct sst_cmd_set_params *cmd;
 
-		algo = list_first_entry(&ids->algo_list, struct module, node);
+		algo = list_first_entry(&ids->algo_list, struct sst_module,
+									node);
 		if (algo == NULL)
 			return -EINVAL;
 		sb = (void *)algo->kctl->private_value;
@@ -1564,6 +1565,16 @@ static const struct snd_soc_dapm_widget sst_dapm_widgets[] = {
 	SST_PATH_OUTPUT("media0_out", SST_TASK_MMX, SST_SWM_OUT_MEDIA0, sst_set_media_path),
 	SST_PATH_OUTPUT("media1_out", SST_TASK_MMX, SST_SWM_OUT_MEDIA1, sst_set_media_path),
 
+	/* Adding dummy widget for setting the task & pipeid for the cap path */
+	SST_PATH_OUTPUT("media2_out", SST_TASK_MMX, SST_SWM_OUT_PCM1,
+							SST_EVENT_TYPE_NONE),
+	SST_PATH_OUTPUT("media3_out", SST_TASK_MMX, SST_SWM_OUT_PCM2,
+							SST_EVENT_TYPE_NONE),
+	SST_PATH_INPUT("voip_in_media", SST_TASK_MMX, SST_SWM_IN_VOIP,
+							SST_EVENT_TYPE_NONE),
+	SST_PATH_OUTPUT("voip_out_media", SST_TASK_MMX, SST_SWM_OUT_VOIP,
+							SST_EVENT_TYPE_NONE),
+
 	/* SBA PCM Paths */
 	SST_PATH_INPUT("pcm0_in", SST_TASK_SBA, SST_SWM_IN_PCM0, sst_set_media_path),
 	SST_PATH_INPUT("pcm1_in", SST_TASK_SBA, SST_SWM_IN_PCM1, sst_set_media_path),
@@ -1674,8 +1685,9 @@ static const struct snd_soc_dapm_route intercon[] = {
 	{"pcm0_in", NULL, "media0_out"},
 	{"pcm1_in", NULL, "media1_out"},
 
-	{"Headset Capture", NULL, "pcm1_out"},
-	{"Headset Capture", NULL, "pcm2_out"},
+	{"Headset Capture", NULL, "media2_out"},
+	{"media2_out", NULL, "pcm1_out"},
+
 	{"pcm0_out", NULL, "pcm0_out mix 0"},
 	SST_SBA_MIXER_GRAPH_MAP("pcm0_out mix 0"),
 	{"pcm1_out", NULL, "pcm1_out mix 0"},
@@ -1693,8 +1705,10 @@ static const struct snd_soc_dapm_route intercon[] = {
 	{"sprot_loop_out", NULL, "sprot_loop_out mix 0"},
 	SST_SBA_MIXER_GRAPH_MAP("sprot_loop_out mix 0"),
 
-	{"voip_in", NULL, "VOIP Playback"},
-	{"VOIP Capture", NULL, "voip_out"},
+	{"voip_in_media", NULL, "VOIP Playback"},
+	{"voip_in", NULL, "voip_in_media"},
+	{"VOIP Capture", NULL, "voip_out_media"},
+	{"voip_out_media", NULL, "voip_out"},
 	{"voip_out", NULL, "voip_out mix 0"},
 	SST_SBA_MIXER_GRAPH_MAP("voip_out mix 0"),
 
@@ -2001,19 +2015,6 @@ static const struct snd_kcontrol_new sst_debug_controls[] = {
 		       sst_byte_control_get, sst_byte_control_set),
 };
 
-static inline bool is_sst_dapm_widget(struct snd_soc_dapm_widget *w)
-{
-	if ((w->id == snd_soc_dapm_pga) ||
-	    (w->id == snd_soc_dapm_aif_in) ||
-	    (w->id == snd_soc_dapm_aif_out) ||
-	    (w->id == snd_soc_dapm_input) ||
-	    (w->id == snd_soc_dapm_output) ||
-	    (w->id == snd_soc_dapm_mixer))
-		return true;
-	else
-		return false;
-}
-
 /**
  * sst_send_pipe_gains - send gains for the front-end DAIs
  *
@@ -2078,7 +2079,7 @@ int sst_send_pipe_gains(struct snd_soc_dai *dai, int stream, int mute)
 static int sst_fill_module_list(struct snd_kcontrol *kctl,
 	 struct snd_soc_dapm_widget *w, int type)
 {
-	struct module *module = NULL;
+	struct sst_module *module = NULL;
 	struct sst_ids *ids = w->priv;
 
 	module = devm_kzalloc(w->platform->dev, sizeof(*module), GFP_KERNEL);
diff --git a/sound/soc/intel/platform-libs/sst_widgets.h b/sound/soc/intel/platform-libs/sst_widgets.h
index 8e4aa88..cf995a4 100644
--- a/sound/soc/intel/platform-libs/sst_widgets.h
+++ b/sound/soc/intel/platform-libs/sst_widgets.h
@@ -30,7 +30,7 @@
 #define SST_FMT_MONO 0
 #define SST_FMT_STEREO 3
 
-struct module {
+struct sst_module {
 	struct snd_kcontrol *kctl;
 	struct list_head node;
 };
@@ -48,6 +48,18 @@ struct sst_ids {
 	struct sst_pcm_format *pcm_fmt;
 };
 
+static inline bool is_sst_dapm_widget(struct snd_soc_dapm_widget *w)
+{
+	if ((w->id == snd_soc_dapm_pga) ||
+	    (w->id == snd_soc_dapm_aif_in) ||
+	    (w->id == snd_soc_dapm_aif_out) ||
+	    (w->id == snd_soc_dapm_input) ||
+	    (w->id == snd_soc_dapm_output) ||
+	    (w->id == snd_soc_dapm_mixer))
+		return true;
+	else
+		return false;
+}
 
 #define SST_AIF_IN(wname, wevent)							\
 {	.id = snd_soc_dapm_aif_in, .name = wname, .sname = NULL,			\
diff --git a/sound/soc/intel/sst/sst_platform.c b/sound/soc/intel/sst/sst_platform.c
index 6759aee..9459cda 100644
--- a/sound/soc/intel/sst/sst_platform.c
+++ b/sound/soc/intel/sst/sst_platform.c
@@ -38,13 +38,13 @@ static struct sst_dev_stream_map dpcm_strm_map_byt[] = {
 
 static struct sst_dev_stream_map dpcm_strm_map_cht[] = {
 	{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, /* Reserved, not in use */
-	{CHT_DPCM_AUDIO, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_MEDIA1_IN,
+	{CHT_DPCM_AUDIO, 0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
 					SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
-	{CHT_DPCM_VOIP,  0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_VOIP_IN,
+	{CHT_DPCM_VOIP,  0, SNDRV_PCM_STREAM_PLAYBACK, PIPE_RSVD,
 					SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
-	{CHT_DPCM_AUDIO, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_PCM1_OUT,
+	{CHT_DPCM_AUDIO, 0, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
 					SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
-	{CHT_DPCM_VOIP,  0, SNDRV_PCM_STREAM_CAPTURE, PIPE_VOIP_OUT,
+	{CHT_DPCM_VOIP,  0, SNDRV_PCM_STREAM_CAPTURE, PIPE_RSVD,
 					SST_TASK_ID_MEDIA, SST_DEV_MAP_IN_USE},
 };
 
-- 
1.9.1

