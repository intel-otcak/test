From 3e3373ed29d42dd98e8c8c92f0028ea9d1198f70 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Tue, 2 Feb 2016 20:11:25 +0530
Subject: [PATCH 12/24] usb_pd: set vconn gpio before setting vconn in fusb.

Currently the vconn supply to fusb is by default always enabled
and fusb will enable/disable vconn to port partner based
connection state and pd negotiation. But  fusb chip expects the
vconn supply to the chip also to be enable/disable before
enabling /disabling the vconn to its port partner. This patch adds
corresponding changes to dpm and pe.

Change-Id: Ia460b72b6953a5aee92c8137b0e76329d0a70ac4
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-18527
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/465552
---
 drivers/usb/typec/pd/devpolicy_mgr.h | 31 ++++++++++++++++++++++---------
 drivers/usb/typec/pd/policy_engine.c |  1 +
 2 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/drivers/usb/typec/pd/devpolicy_mgr.h b/drivers/usb/typec/pd/devpolicy_mgr.h
index cce0f8e..73cf7aa 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.h
+++ b/drivers/usb/typec/pd/devpolicy_mgr.h
@@ -274,6 +274,7 @@ struct dpm_interface {
 
 #ifdef CONFIG_INTEL_WCOVE_GPIO
 extern int wcgpio_set_vbus_state(bool state);
+extern int wcgpio_set_vconn_state(bool state);
 static inline int devpolicy_set_vbus_state(struct devpolicy_mgr *dpm,
 						bool state)
 {
@@ -281,12 +282,33 @@ static inline int devpolicy_set_vbus_state(struct devpolicy_mgr *dpm,
 		return -ENODEV;
 	return wcgpio_set_vbus_state(state);
 }
+
+static inline int devpolicy_set_vconn_state(struct devpolicy_mgr *dpm,
+						enum vconn_state vcstate)
+{
+	int ret = -EINVAL;
+
+	if (dpm && dpm->interface && dpm->interface->set_vconn_state) {
+		ret = wcgpio_set_vconn_state(vcstate == VCONN_SOURCE);
+		if (!ret)
+			ret = dpm->interface->set_vconn_state(dpm, vcstate);
+	}
+	return ret;
+}
 #else /* CONFIG_INTEL_WCOVE_GPIO */
 static inline int devpolicy_set_vbus_state(struct devpolicy_mgr *dpm,
 						bool state)
 {
 	return -ENODEV;
 }
+
+static inline int devpolicy_set_vconn_state(struct devpolicy_mgr *dpm,
+						enum vconn_state vcstate)
+{
+	if (dpm && dpm->interface && dpm->interface->set_vconn_state
+		return dpm->interface->set_vconn_state(dpm, vcstate);
+	return -EINVAL;
+}
 #endif /* CONFIG_INTEL_WCOVE_GPIO */
 
 #ifdef CONFIG_PINCTRL_CHERRYVIEW
@@ -345,15 +367,6 @@ static inline bool devpolicy_get_vconn_state(struct devpolicy_mgr *dpm)
 	return false;
 }
 
-static inline int devpolicy_set_vconn_state(struct devpolicy_mgr *dpm,
-						enum vconn_state vcstate)
-{
-	if (dpm && dpm->interface && dpm->interface->set_vconn_state)
-		return dpm->interface->set_vconn_state(dpm, vcstate);
-
-	return -EINVAL;
-}
-
 static inline void devpolicy_update_data_role(struct devpolicy_mgr *dpm,
 					enum data_role role)
 {
diff --git a/drivers/usb/typec/pd/policy_engine.c b/drivers/usb/typec/pd/policy_engine.c
index 96622e8..84ace5d 100644
--- a/drivers/usb/typec/pd/policy_engine.c
+++ b/drivers/usb/typec/pd/policy_engine.c
@@ -891,6 +891,7 @@ static void pe_handle_dpm_event(struct policy_engine *pe,
 		break;
 	case DEVMGR_EVENT_DFP_CONNECTED:
 		log_dbg(" DFP - Connected ");
+		devpolicy_set_vconn_state(pe->p.dpm, VCONN_SOURCE);
 		pe_set_data_role(pe, DATA_ROLE_DFP);
 		pe_set_power_role(pe, POWER_ROLE_SOURCE);
 		if (pe->cur_state == PE_STATE_NONE) {
-- 
1.9.1

