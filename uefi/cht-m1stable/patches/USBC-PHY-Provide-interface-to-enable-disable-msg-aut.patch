From fe9c99230c768c225dc3ec91dfba8e20218616da Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Thu, 21 Jan 2016 16:04:05 +0530
Subject: [PATCH 05/13] USBC/PHY: Provide interface to enable/disable msg auto
 retry.

This patch will provide an interface function to enable/disable
pd message auto retry  in fusb driver.

Change-Id: I601b1580cc57f786e15e5c5e98633cea7b562de0
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-15674
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/460776
---
 drivers/usb/typec/phy-fusb300.c | 35 ++++++++++++++++++++++++++++-------
 include/linux/usb_typec_phy.h   |  9 +++++++++
 2 files changed, 37 insertions(+), 7 deletions(-)

diff --git a/drivers/usb/typec/phy-fusb300.c b/drivers/usb/typec/phy-fusb300.c
index dff1b8f..d73d5bb 100644
--- a/drivers/usb/typec/phy-fusb300.c
+++ b/drivers/usb/typec/phy-fusb300.c
@@ -582,6 +582,24 @@ end:
 	return 0;
 }
 
+static int fusb300_enable_auto_retry(struct typec_phy *phy, bool en)
+{
+	struct fusb300_chip *chip;
+	int ret;
+
+	if (!phy)
+		return -ENODEV;
+
+	chip = dev_get_drvdata(phy->dev);
+
+	mutex_lock(&chip->lock);
+	ret = regmap_update_bits(chip->map, FUSB302_CONTROL3_REG,
+				FUSB302_CONTROL3_AUTO_RETRY,
+				en ? FUSB302_CONTROL3_AUTO_RETRY : 0);
+	mutex_unlock(&chip->lock);
+	dev_dbg(phy->dev, "%s: en %d\n", __func__, en);
+	return ret;
+}
 
 #ifdef DEBUG
 static void dump_registers(struct fusb300_chip *chip)
@@ -641,8 +659,7 @@ static inline int fusb302_configure_pd(struct fusb300_chip *chip)
 {
 	unsigned int val;
 
-	val = FUSB302_CONTROL3_AUTO_RETRY |
-		(FUSB302_CONTROL3_RETRY3 << FUSB302_CONTROL3_N_RETRY_SHIFT);
+	val = FUSB302_CONTROL3_RETRY3 << FUSB302_CONTROL3_N_RETRY_SHIFT;
 	regmap_write(chip->map, FUSB302_CONTROL3_REG, val);
 	return 0;
 }
@@ -750,14 +767,17 @@ static void fusb300_enable_valid_pu_pd(struct fusb300_chip *chip, int tog_stat)
 {
 	unsigned int val;
 
-	if (tog_stat == FUSB302_TOG_STAT_DFP_CC1)
+	if (tog_stat == FUSB302_TOG_STAT_DFP_CC1) {
 		val = FUSB300_SWITCH0_PU_CC1_EN;
-	else if (tog_stat == FUSB302_TOG_STAT_DFP_CC1)
+	} else if (tog_stat == FUSB302_TOG_STAT_DFP_CC2) {
 		val = FUSB300_SWITCH0_PU_CC2_EN;
-
-	if ((tog_stat == FUSB302_TOG_STAT_UFP_CC1) ||
-		(tog_stat == FUSB302_TOG_STAT_UFP_CC2))
+	} else if (tog_stat == FUSB302_TOG_STAT_UFP_CC1 ||
+			tog_stat == FUSB302_TOG_STAT_UFP_CC2) {
 		val = FUSB300_SWITCH0_PD_CC1_EN | FUSB300_SWITCH0_PD_CC2_EN;
+	} else {
+		dev_warn(chip->dev, "Invalid tog_stat: %x\n", tog_stat);
+		return;
+	}
 
 	regmap_write(chip->map, FUSB300_SWITCH0_REG, val);
 }
@@ -1779,6 +1799,7 @@ static int fusb300_probe(struct i2c_client *client,
 		chip->phy.setup_role = fusb300_setup_role;
 		chip->phy.enable_autocrc = fusb300_enable_autocrc;
 		chip->phy.enable_detection = fusb300_enable_typec_detection;
+		chip->phy.enable_auto_retry = fusb300_enable_auto_retry;
 	}
 
 	if (IS_ENABLED(CONFIG_ACPI))
diff --git a/include/linux/usb_typec_phy.h b/include/linux/usb_typec_phy.h
index a87e0f6..3a05e85 100644
--- a/include/linux/usb_typec_phy.h
+++ b/include/linux/usb_typec_phy.h
@@ -225,6 +225,7 @@ struct typec_phy {
 	int (*set_swap_state)(struct typec_phy *phy, bool swap);
 	int (*enable_detection)(struct typec_phy *phy, bool en);
 	bool (*is_vbus_on)(struct typec_phy *phy);
+	int (*enable_auto_retry)(struct typec_phy *phy, bool en);
 };
 
 extern struct typec_phy *typec_get_phy(int type);
@@ -345,6 +346,14 @@ static inline int typec_enable_autocrc(struct typec_phy *phy, bool en)
 	return -ENOTSUPP;
 }
 
+static inline int typec_enable_auto_retry(struct typec_phy *phy, bool en)
+{
+	if (phy && phy->enable_auto_retry)
+		return phy->enable_auto_retry(phy, en);
+
+	return -ENOTSUPP;
+}
+
 static inline int typec_set_swap_state(struct typec_phy *phy, bool swap)
 {
 	if (phy && phy->set_swap_state)
-- 
1.9.1

