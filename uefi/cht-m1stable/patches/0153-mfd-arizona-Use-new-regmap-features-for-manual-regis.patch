From 01098a0454a07e230f7ee5ac5f871e1f038438bc Mon Sep 17 00:00:00 2001
From: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date: Tue, 25 Feb 2014 13:45:52 +0000
Subject: [PATCH 153/351] mfd: arizona: Use new regmap features for manual
 register patch

On the wm5102 the register patches are applied manually, rather than by
the regmap core. This application is wrapped in calls to
regcache_cache_bypass. However, this is dangerous as other threads may
be accessing the hardware at the same time as the pm_runtime operations
and if they do so during the period whilst cache_bypass is enabled those
writes will miss the cache when they shouldn't.

Apply the register patch using the new regmap_multi_reg_write_bypassed
function to avoid this problem. Also remove the call to
regcache_cache_bypass from the hardware patch application as it is
unneeded there and creates a similar window for writes to miss the
cache.

Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Acked-by: Lee Jones <lee.jones@linaro.org>
Signed-off-by: Mark Brown <broonie@linaro.org>
(cherry picked from commit 1c18d2ca104c36fc2ce147cce053c62f61d2ea68)

Change-Id: Ia28648b61f04a4ee2e837d0387daede9c58a8902
Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Signed-off-by: Nikesh Oswal <Nikesh.Oswal@wolfsonmicro.com>
---
 drivers/mfd/arizona-core.c  |    4 ----
 drivers/mfd/wm5102-tables.c |   34 +++++++---------------------------
 2 files changed, 7 insertions(+), 31 deletions(-)

diff --git a/drivers/mfd/arizona-core.c b/drivers/mfd/arizona-core.c
index bdc003c..f7d47a2 100644
--- a/drivers/mfd/arizona-core.c
+++ b/drivers/mfd/arizona-core.c
@@ -252,8 +252,6 @@ static int arizona_exec_with_sysclk(struct arizona* arizona,
 	unsigned int fll, sysclk;
 	int ret, err;
 
-	regcache_cache_bypass(arizona->regmap, true);
-
 	/* Cache existing FLL and SYSCLK settings */
 	ret = regmap_read(arizona->regmap, ARIZONA_FLL1_CONTROL_1, &fll);
 	if (ret != 0) {
@@ -308,8 +306,6 @@ err_fll:
 			err);
 	}
 
-	regcache_cache_bypass(arizona->regmap, false);
-
 	if (ret != 0)
 		return ret;
 	else
diff --git a/drivers/mfd/wm5102-tables.c b/drivers/mfd/wm5102-tables.c
index bba1a59..6f33b4b 100644
--- a/drivers/mfd/wm5102-tables.c
+++ b/drivers/mfd/wm5102-tables.c
@@ -138,30 +138,11 @@ static const struct {
 	{ wm5102t_pwr_4, ARRAY_SIZE(wm5102t_pwr_4) },
 };
 
-static int wm5102_apply_patch(struct arizona *arizona,
-			      const struct reg_default *wm5102_patch,
-			      const int patch_size)
-{
-	int i, ret;
-
-	for (i = 0; i < patch_size; i++) {
-		ret = regmap_write(arizona->regmap, wm5102_patch[i].reg,
-				   wm5102_patch[i].def);
-		if (ret != 0) {
-			dev_err(arizona->dev, "Failed to write %x = %x: %d\n",
-				wm5102_patch[i].reg, wm5102_patch[i].def, ret);
-			return ret;
-		}
-	}
-
-	return 0;
-}
-
 /* We use a function so we can use ARRAY_SIZE() */
 int wm5102_patch(struct arizona *arizona)
 {
 	const struct reg_default *wm5102_patch;
-	int ret = 0;
+	int ret;
 	int patch_size;
 	int pwr_index = arizona->pdata.wm5102t_output_pwr;
 
@@ -176,21 +157,20 @@ int wm5102_patch(struct arizona *arizona)
 		break;
 	}
 
-	regcache_cache_bypass(arizona->regmap, true);
-
-	ret = wm5102_apply_patch(arizona, wm5102_patch, patch_size);
+	ret = regmap_multi_reg_write_bypassed(arizona->regmap,
+					      wm5102_patch,
+					      patch_size);
 	if (ret != 0)
 		goto out;
 
 	if (pwr_index < ARRAY_SIZE(wm5102t_pwr))
-		ret = wm5102_apply_patch(arizona,
-					 wm5102t_pwr[pwr_index].patch,
-					 wm5102t_pwr[pwr_index].size);
+		ret = regmap_multi_reg_write_bypassed(arizona->regmap,
+						      wm5102t_pwr[pwr_index].patch,
+						      wm5102t_pwr[pwr_index].size);
 	else
 		dev_err(arizona->dev, "Invalid wm5102t output power\n");
 
 out:
-	regcache_cache_bypass(arizona->regmap, false);
 	return ret;
 }
 
-- 
1.7.9.5

