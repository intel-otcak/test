From 0ed443c7d00eb95b342186a49e4bf2dc23d09b74 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 4 Jun 2014 14:32:51 -0700
Subject: [PATCH 063/117] gc2235: Support unified gmin atomisp platform device

When available, use the gmin-style unified platform instead of the
sensor-specific one.  Requires moving a little bit of logic (timings,
basically, which are uniform across platforms anyway) from the
original platform driver.  Works on MRD7.

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 .../x86/platform/intel-mid/atomisp_gmin_platform.c |  1 +
 .../camera/drivers/media/i2c/gc2235.c              | 42 ++++++++++++++++++++--
 .../camera/drivers/media/i2c/gc2235.h              |  2 --
 3 files changed, 40 insertions(+), 5 deletions(-)

diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
index 7b1987b..011954a 100644
--- a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -201,6 +201,7 @@ static const struct gmin_cfg_var mrd7_vars[] = {
 	{ "INT33F8:00_CsiLanes", "2" },
 	{ "INT33F8:00_CsiFmt",   "13" },
 	{ "INT33F8:00_CsiBayer", "0" },
+	{ "INT33F8:00_CamClk", "0" },
 	{},
 };
 
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
index 0596e0e..fa7bc18 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
@@ -594,14 +594,50 @@ static int gc2235_init(struct v4l2_subdev *sd)
 
 static int power_ctrl(struct v4l2_subdev *sd, int flag)
 {
+	int ret;
 	struct gc2235_device *dev = to_gc2235_sensor(sd);
-	return dev->platform_data->power_ctrl(sd, flag);
+
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->power_ctrl)
+		return dev->platform_data->power_ctrl(sd, flag);
+
+	if (flag) {
+		ret = dev->platform_data->v1p8_ctrl(sd, 1);
+		usleep_range(60, 90);
+		ret = dev->platform_data->v2p8_ctrl(sd, 1);
+		msleep(20);
+	} else {
+		ret = dev->platform_data->v2p8_ctrl(sd, 0);
+		ret |= dev->platform_data->v1p8_ctrl(sd, 0);
+	}
+	return ret;
 }
 
+
 static int gpio_ctrl(struct v4l2_subdev *sd, int flag)
 {
+	int ret;
 	struct gc2235_device *dev = to_gc2235_sensor(sd);
-	return dev->platform_data->gpio_ctrl(sd, flag);
+
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->gpio_ctrl)
+		return dev->platform_data->gpio_ctrl(sd, flag);
+
+	/* GPIO0 == "reset" (active low), GPIO1 == "power down" */
+	if (flag) {
+		ret = dev->platform_data->gpio1_ctrl(sd, 0);
+		ret |= dev->platform_data->gpio0_ctrl(sd, 1);
+	} else {
+		ret = dev->platform_data->gpio1_ctrl(sd, 1);
+		ret |= dev->platform_data->gpio0_ctrl(sd, 0);
+	}
+	return ret;
 }
 
 static int power_up(struct v4l2_subdev *sd)
@@ -1269,7 +1305,7 @@ static int gc2235_probe(struct i2c_client *client,
 		 * directly and configure via ACPI/EFIvars instead
 		 */
 		ret = gc2235_s_config(&dev->sd, client->irq,
-				      gc2235_platform_data(NULL));
+				      gmin_camera_platform_data());
 		if (ret)
 			goto out_free;
 	}
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
index f9796b1..3e7ee62 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
@@ -119,8 +119,6 @@
 #define GC2235_START_STREAMING		0x91
 #define GC2235_STOP_STREAMING		0x0
 
-void *gc2235_platform_data(void *info);
-
 struct regval_list {
 	u16 reg_num;
 	u8 value;
-- 
1.9.3

