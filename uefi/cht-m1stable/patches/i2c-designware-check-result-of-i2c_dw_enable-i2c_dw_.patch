From 4fb9e7e5c6c9f52e1deb9875d183f7218715a8b2 Mon Sep 17 00:00:00 2001
From: Liu Changcheng <changcheng.liu@intel.com>
Date: Thu, 14 May 2015 16:50:46 +0800
Subject: [PATCH] i2c: designware: check result of
 i2c_dw_enable/i2c_dw_xfer_init

We need to deal with the case that en/disable adapter failed or
i2c_dw_xfer_init failed. So, we change the prototype of the
function and re-initialize the i2c controller if the fail case
happens.
We also limit the time to be 10 to get notice earlier. The
average time that we've recorded is 2.

Change-Id: I007fbb00da12b2808f763a60612cbc10cf68fc57
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-30930
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1824
Signed-off-by: Jun Zhang <jun.zhang@intel.com>
Signed-off-by: Chuansheng Liu <chuansheng.liu@intel.com>
Signed-off-by: Fei Li <fei.li@intel.com>
Signed-off-by: Xiang Wang <xiang.a.wang@intel.com>
---
 drivers/i2c/busses/i2c-designware-core.c | 41 ++++++++++++++++++++++----------
 1 file changed, 29 insertions(+), 12 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-core.c b/drivers/i2c/busses/i2c-designware-core.c
index 76add5195526..aca702f86ec1 100644
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@ -258,14 +258,14 @@ static u32 i2c_dw_scl_lcnt(u32 ic_clk, u32 tLOW, u32 tf, int offset)
 	return ((ic_clk * (tLOW + tf) + 5000) / 10000) - 1 + offset;
 }
 
-static void __i2c_dw_enable(struct dw_i2c_dev *dev, bool enable)
+static bool __i2c_dw_enable(struct dw_i2c_dev *dev, bool enable)
 {
-	int timeout = 100;
+	int timeout = 10;
 
 	do {
 		dw_writel(dev, enable, DW_IC_ENABLE);
 		if ((dw_readl(dev, DW_IC_ENABLE_STATUS) & 1) == enable)
-			return;
+			return true;
 
 		/*
 		 * Wait 10 times the signaling period of the highest I2C
@@ -280,6 +280,7 @@ static void __i2c_dw_enable(struct dw_i2c_dev *dev, bool enable)
 
 	dev_warn(dev->dev, "timeout in %sabling adapter\n",
 		 enable ? "en" : "dis");
+	return false;
 }
 
 /**
@@ -444,13 +445,14 @@ static int i2c_dw_wait_bus_not_busy(struct dw_i2c_dev *dev)
 	return 0;
 }
 
-static void i2c_dw_xfer_init(struct dw_i2c_dev *dev)
+static bool i2c_dw_xfer_init(struct dw_i2c_dev *dev)
 {
 	struct i2c_msg *msgs = dev->msgs;
 	u32 ic_con, ic_tar = 0;
 
 	/* Disable the adapter */
-	__i2c_dw_enable(dev, false);
+	if (!__i2c_dw_enable(dev, false))
+		return false;
 
 	/* if the slave address is ten bit address, enable 10BITADDR */
 	ic_con = dw_readl(dev, DW_IC_CON);
@@ -479,12 +481,15 @@ static void i2c_dw_xfer_init(struct dw_i2c_dev *dev)
 	i2c_dw_disable_int(dev);
 
 	/* Enable the adapter */
-	__i2c_dw_enable(dev, true);
+	if (!__i2c_dw_enable(dev, true))
+		return false;
 
 	/* Clear and enable interrupts */
 	i2c_dw_clear_int(dev);
 	if (!dev->polling)
 		dw_writel(dev, DW_IC_INTR_DEFAULT_MASK, DW_IC_INTR_MASK);
+
+	return true;
 }
 
 /*
@@ -739,8 +744,15 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 	if (ret < 0)
 		goto done;
 
-	/* start the transfers */
-	i2c_dw_xfer_init(dev);
+	/* start the transfers, retry i2c_dw_xfer_init on error */
+	if (!i2c_dw_xfer_init(dev)) {
+		ret = i2c_dw_init(dev) >= 0 && i2c_dw_xfer_init(dev);
+		if (!ret) {
+			dev_err(dev->dev, "xfer init failed\n");
+			ret = -EIO;
+			goto err_reset;
+		}
+	}
 
 	if (dev->polling)
 		ret = i2c_dw_xfer_polling(dev);
@@ -750,10 +762,8 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 
 	if (ret == 0) {
 		dev_err(dev->dev, "controller timed out\n");
-		/* i2c_dw_init implicitly disables the adapter */
-		i2c_dw_init(dev);
 		ret = -ETIMEDOUT;
-		goto done;
+		goto err_reset;
 	}
 
 	/*
@@ -763,7 +773,11 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 	 * Needs some more investigation if the additional interrupts are
 	 * a hardware bug or this driver doesn't handle them correctly yet.
 	 */
-	__i2c_dw_enable(dev, false);
+	if (!__i2c_dw_enable(dev, false)) {
+		dev_err(dev->dev, "i2c dw disabling failed\n");
+		ret = -EIO;
+		goto err_reset;
+	}
 
 	if (dev->msg_err) {
 		ret = dev->msg_err;
@@ -783,6 +797,9 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 	}
 	ret = -EIO;
 
+err_reset:
+	i2c_dw_init(dev);
+
 done:
 	if (dev->shared_host && dev->release_ownership)
 		dev->release_ownership();
-- 
1.9.1

