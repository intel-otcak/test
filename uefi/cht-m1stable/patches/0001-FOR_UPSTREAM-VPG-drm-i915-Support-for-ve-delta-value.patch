From 1ffc41b6d35cd2a4bac0e98f6a18e997c3da2bbf Mon Sep 17 00:00:00 2001
Message-Id: <1ffc41b6d35cd2a4bac0e98f6a18e997c3da2bbf.1429850406.git.chang-joon.lee@intel.com>
From: Akash Goel <akash.goel@intel.com>
Date: Wed, 25 Mar 2015 12:51:49 +0530
Subject: [PATCH] FOR_UPSTREAM [VPG]: drm/i915: Support for -ve delta value
 for relocation target buffer

The delta value, which has to be added to the base address of the
target buffer of relocation, is currently defined as u32. So only
positive delta values could be passed. To mitigate a Hw issue on CHV,
a Sw WA is required to be implemented, in which 3D Driver requires
the support to pass the negative values also for the delta.
To fulfill that, KMD will internally treat the passed delta value as a signed
value, typecast into s32 and do the arithemtic.
So a negative value will get passed as a large postive u32 number, but
this will also reduce the max value of delta from (2^32 - 1) to
(2^31 - 1), which is not an issue as per the 3D team.

Issue: GMINL-7441
Change-Id: I6ab9d9429b7c8214936ba3d9817f5ebd4f04c68d
Signed-off-by: Akash Goel <akash.goel@intel.com>
---
 drivers/gpu/drm/i915/i915_gem_execbuffer.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index c8e07ca..22227a6 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -259,7 +259,7 @@ relocate_entry_cpu(struct drm_i915_gem_object *obj,
 {
 	struct drm_device *dev = obj->base.dev;
 	uint32_t page_offset = offset_in_page(reloc->offset);
-	uint64_t delta = reloc->delta + target_offset;
+	uint64_t delta = (int32_t)reloc->delta + target_offset;
 	char *vaddr;
 	int ret;
 
@@ -295,7 +295,7 @@ relocate_entry_gtt(struct drm_i915_gem_object *obj,
 {
 	struct drm_device *dev = obj->base.dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	uint64_t delta = reloc->delta + target_offset;
+	uint64_t delta = (int32_t)reloc->delta + target_offset;
 	uint32_t __iomem *reloc_entry;
 	void __iomem *reloc_page;
 	int ret;
-- 
1.7.9.5

