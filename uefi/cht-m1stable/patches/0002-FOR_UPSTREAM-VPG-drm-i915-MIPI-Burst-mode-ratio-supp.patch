From 4c3ef247839585de7857b4b6c58b9aeefa6f13f8 Mon Sep 17 00:00:00 2001
Message-Id: <4c3ef247839585de7857b4b6c58b9aeefa6f13f8.1421830308.git.chang-joon.lee@intel.com>
In-Reply-To: <49dde4951ccd12ce81e60aed3b24793e0ac12fed.1421830308.git.chang-joon.lee@intel.com>
References: <49dde4951ccd12ce81e60aed3b24793e0ac12fed.1421830308.git.chang-joon.lee@intel.com>
From: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
Date: Tue, 9 Dec 2014 11:43:24 +0530
Subject: [PATCH 02/17] FOR_UPSTREAM [VPG]: drm/i915: MIPI Burst mode ratio
 support

This patch gets the burst mode ratio from VBT and programs
the timings in dsi controller as per burst mode ratio.

Issue: GMINL-1644
Change-Id: Idffd086a03378b7c0ca4aa7025f2ef00cb9cfaca
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/intel_dsi.c           |   38 +++++++++++++---------------
 drivers/gpu/drm/i915/intel_dsi.h           |   11 ++++++++
 drivers/gpu/drm/i915/intel_dsi_panel_vbt.c |   34 +++++++++++++++++++++++++
 3 files changed, 62 insertions(+), 21 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index 66249a2..e45a4da 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -63,16 +63,6 @@ struct intel_dsi *intel_attached_dsi(struct drm_connector *connector)
 			    struct intel_dsi, base);
 }
 
-static inline bool is_vid_mode(struct intel_dsi *intel_dsi)
-{
-	return intel_dsi->operation_mode == INTEL_DSI_VIDEO_MODE;
-}
-
-static inline bool is_cmd_mode(struct intel_dsi *intel_dsi)
-{
-	return intel_dsi->operation_mode == INTEL_DSI_COMMAND_MODE;
-}
-
 static void intel_dsi_hot_plug(struct intel_encoder *encoder)
 {
 	DRM_DEBUG_KMS("\n");
@@ -638,9 +628,11 @@ static u16 txclkesc(u32 divider, unsigned int us)
 }
 
 /* return pixels in terms of txbyteclkhs */
-static u16 txbyteclkhs(u16 pixels, int bpp, int lane_count)
+static u32 txbyteclkhs(u32 pixels, int bpp, int lane_count,
+					u16 burst_mode_ratio)
 {
-	return DIV_ROUND_UP(DIV_ROUND_UP(pixels * bpp, 8), lane_count);
+	return DIV_ROUND_UP_ULL((u64)pixels * bpp * burst_mode_ratio,
+						8 * lane_count * 100);
 }
 
 static void set_dsi_timings(struct drm_encoder *encoder,
@@ -683,10 +675,12 @@ static void set_dsi_timings(struct drm_encoder *encoder,
 	vbp = mode->vtotal - mode->vsync_end;
 
 	/* horizontal values are in terms of high speed byte clock */
-	hactive = txbyteclkhs(hactive, bpp, lane_count);
-	hfp = txbyteclkhs(hfp, bpp, lane_count);
-	hsync = txbyteclkhs(hsync, bpp, lane_count);
-	hbp = txbyteclkhs(hbp, bpp, lane_count);
+	hactive = txbyteclkhs(hactive, bpp, lane_count,
+					intel_dsi->burst_mode_ratio);
+	hfp = txbyteclkhs(hfp, bpp, lane_count, intel_dsi->burst_mode_ratio);
+	hsync = txbyteclkhs(hsync, bpp, lane_count,
+					intel_dsi->burst_mode_ratio);
+	hbp = txbyteclkhs(hbp, bpp, lane_count, intel_dsi->burst_mode_ratio);
 
 	do {
 		I915_WRITE(MIPI_HACTIVE_AREA_COUNT(pipe), hactive);
@@ -808,13 +802,15 @@ static void intel_dsi_mode_set(struct intel_encoder *intel_encoder)
 		if (is_vid_mode(intel_dsi) &&
 			intel_dsi->video_mode_format == VIDEO_MODE_BURST) {
 			I915_WRITE(MIPI_HS_TX_TIMEOUT(pipe),
-			   txbyteclkhs(adjusted_mode->htotal, bpp,
-				       intel_dsi->lane_count) + 1);
+					txbyteclkhs(adjusted_mode->htotal, bpp,
+					intel_dsi->lane_count,
+					intel_dsi->burst_mode_ratio) + 1);
 		} else {
 			I915_WRITE(MIPI_HS_TX_TIMEOUT(pipe),
-			   txbyteclkhs(adjusted_mode->vtotal *
-				       adjusted_mode->htotal,
-				       bpp, intel_dsi->lane_count) + 1);
+					txbyteclkhs(adjusted_mode->vtotal *
+					adjusted_mode->htotal,
+					bpp, intel_dsi->lane_count,
+					intel_dsi->burst_mode_ratio) + 1);
 		}
 
 		I915_WRITE(MIPI_LP_RX_TIMEOUT(pipe), intel_dsi->lp_rx_timeout);
diff --git a/drivers/gpu/drm/i915/intel_dsi.h b/drivers/gpu/drm/i915/intel_dsi.h
index 0748eaa..24c622c 100644
--- a/drivers/gpu/drm/i915/intel_dsi.h
+++ b/drivers/gpu/drm/i915/intel_dsi.h
@@ -487,6 +487,7 @@ struct intel_dsi {
 	/* timeouts in byte clocks */
 	u16 lp_rx_timeout;
 	u16 turn_arnd_val;
+	u16 burst_mode_ratio;
 	u16 rst_timer_val;
 	u16 hs_to_lp_count;
 	u16 clk_lp_to_hs_count;
@@ -510,6 +511,16 @@ static inline struct intel_dsi *enc_to_intel_dsi(struct drm_encoder *encoder)
 	return container_of(encoder, struct intel_dsi, base.base);
 }
 
+static inline bool is_vid_mode(struct intel_dsi *intel_dsi)
+{
+	return intel_dsi->operation_mode == INTEL_DSI_VIDEO_MODE;
+}
+
+static inline bool is_cmd_mode(struct intel_dsi *intel_dsi)
+{
+	return intel_dsi->operation_mode == INTEL_DSI_COMMAND_MODE;
+}
+
 extern void vlv_enable_dsi_pll(struct intel_encoder *encoder);
 extern void vlv_disable_dsi_pll(struct intel_encoder *encoder);
 extern void wait_for_dsi_fifo_empty(struct intel_dsi *intel_dsi);
diff --git a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
index 00a0e93..4df243d 100644
--- a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
+++ b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
@@ -655,6 +655,8 @@ static bool generic_init(struct intel_dsi_device *dsi)
 	u32 ths_prepare_ns, tclk_trail_ns;
 	u32 tclk_prepare_clkzero, ths_prepare_hszero, pclk;
 	u32 lp_to_hs_switch, hs_to_lp_switch;
+	u32 computed_ddr;
+	u16 burst_mode_ratio;
 
 	DRM_DEBUG_KMS("\n");
 
@@ -703,6 +705,38 @@ static bool generic_init(struct intel_dsi_device *dsi)
 
 	bitrate = (pclk * bits_per_pixel) / intel_dsi->lane_count;
 
+	/*
+	 * Burst Mode Ratio
+	 * Target ddr frequency from VBT / non burst ddr freq
+	 * multiply by 100 to preserve remainder
+	 */
+	if (((intel_dsi->video_mode_format == VIDEO_MODE_BURST) ||
+			is_cmd_mode(intel_dsi)) &&
+			(mipi_config->target_burst_mode_freq)) {
+
+		computed_ddr = (mode->clock * bits_per_pixel) /
+							intel_dsi->lane_count;
+
+		if (computed_ddr == 0) {
+			DRM_ERROR("computed ddr clock should not be zero\n");
+			return false;
+		}
+
+		if (mipi_config->target_burst_mode_freq < computed_ddr) {
+			DRM_ERROR("DDR clock is less than computed\n");
+			return false;
+		}
+
+		burst_mode_ratio = DIV_ROUND_UP(
+					mipi_config->target_burst_mode_freq
+							* 100, computed_ddr);
+
+		mode->clock = DIV_ROUND_UP(mode->clock * burst_mode_ratio, 100);
+	} else
+		burst_mode_ratio = 100;
+
+	intel_dsi->burst_mode_ratio = burst_mode_ratio;
+
 	switch (intel_dsi->escape_clk_div) {
 	case 0:
 		tlpx_ns = 50;
-- 
1.7.9.5

