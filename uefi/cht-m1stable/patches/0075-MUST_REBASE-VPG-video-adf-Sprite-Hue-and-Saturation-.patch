From 9218e1ca9e45a4ce4f7eb1ee774b97857efb4e51 Mon Sep 17 00:00:00 2001
Message-Id: <9218e1ca9e45a4ce4f7eb1ee774b97857efb4e51.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Kausal Malladi <Kausal.Malladi@intel.com>
Date: Sat, 31 Jan 2015 16:32:35 +0530
Subject: [PATCH 75/95] MUST_REBASE [VPG]: video/adf: Sprite Hue and
 Saturation correction

This patch implements core functions to adjust sprite Hue and Saturation
on VLV platform. Few of those would be getting reused for CHV platform.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-4166
Change-Id: I3b6a0b03dc57ba30e278442637d3e6b2bef0df39
Signed-off-by: Kausal Malladi <Kausal.Malladi@intel.com>
---
 .../adf/intel/core/vlv/vlv_color_correction.c      |   85 ++++++++++++++++++++
 1 file changed, 85 insertions(+)

diff --git a/drivers/video/adf/intel/core/vlv/vlv_color_correction.c b/drivers/video/adf/intel/core/vlv/vlv_color_correction.c
index 109c42b..c12b359 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_color_correction.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_color_correction.c
@@ -86,6 +86,8 @@ const struct color_property vlv_plane_color_corrections[] = {
 		.prop_id = hue,
 		.len = VLV_HS_VALS,
 		.name = "hue",
+		.set_property = vlv_set_hue,
+		.disable_property = vlv_disable_hue,
 		.validate = vlv_validate
 	},
 
@@ -94,10 +96,93 @@ const struct color_property vlv_plane_color_corrections[] = {
 		.prop_id = saturation,
 		.len = VLV_HS_VALS,
 		.name = "saturation",
+		.set_property = vlv_set_saturation,
+		.disable_property = vlv_disable_saturation,
 		.validate = vlv_validate
 	}
 };
 
+bool vlv_set_saturation(struct color_property *property, u64 *data, u8 plane_id)
+{
+	u32 reg, sprite, val, new_val;
+
+	/* If sprite plane enabled */
+	sprite = plane_id;
+	if (!(REG_READ(VLV_CLRMGR_SPCNTR(sprite)) &
+			SP_ENABLE)) {
+		pr_err("ADF: CM: Sprite plane %d not enabled\n", sprite);
+		return false;
+	}
+
+	reg = VLV_CLRMGR_SPHS(sprite);
+
+	/* Clear current values */
+	val = REG_READ(reg) & ~(VLV_SATURATION_MASK);
+
+	/* Get new values */
+	new_val = *data & VLV_SATURATION_MASK;
+	val |= new_val;
+
+	/* Update */
+	REG_WRITE(reg, val);
+	property->lut[0] = new_val;
+
+	/* Set status */
+	if (new_val == VLV_SATURATION_DEFAULT)
+		property->status = false;
+	else
+		property->status = true;
+
+	pr_info("ADF: CM: Set Saturation to 0x%x successful\n", new_val);
+	return true;
+
+}
+bool vlv_disable_saturation(struct color_property *property, u8 plane_id)
+{
+	u64 data = VLV_SATURATION_DEFAULT;
+	return vlv_set_saturation(property, &data, plane_id);
+}
+
+bool vlv_set_hue(struct color_property *property, u64 *data, u8 plane_id)
+{
+	u32 reg, sprite, val, new_val;
+
+	/* If sprite plane enabled */
+	sprite = plane_id;
+	if (!(REG_READ(VLV_CLRMGR_SPCNTR(sprite)) &
+			SP_ENABLE)) {
+		pr_err("ADF: CM: Sprite plane %d not enabled\n", sprite);
+		return false;
+	}
+
+	reg = VLV_CLRMGR_SPHS(sprite);
+
+	/* Clear current hue values */
+	val = REG_READ(reg) & ~(VLV_HUE_MASK << VLV_HUE_SHIFT);
+
+	/* Get the new values */
+	new_val = *data & VLV_HUE_MASK;
+	val |= (new_val << VLV_HUE_SHIFT);
+
+	/* Update */
+	REG_WRITE(reg, new_val);
+	property->lut[0] = new_val;
+
+	/* Set status */
+	if (new_val == VLV_HUE_DEFAULT)
+		property->status = false;
+	else
+		property->status = true;
+	pr_info("ADF: CM: Set Hue to 0x%x successful\n", new_val);
+	return true;
+}
+
+bool vlv_disable_hue(struct color_property *property, u8 plane_id)
+{
+	u64 data = VLV_HUE_DEFAULT;
+	return vlv_set_hue(property, &data, plane_id);
+}
+
 bool vlv_set_brightness(struct color_property *property, u64 *data, u8 plane_id)
 {
 	u32 val, new_val, reg, sprite;
-- 
1.7.9.5

