From 761b00e9497efb546a0d7dae1389b02ef812d0cb Mon Sep 17 00:00:00 2001
Message-Id: <761b00e9497efb546a0d7dae1389b02ef812d0cb.1442017823.git.chang-joon.lee@intel.com>
From: "Kumar, Mahesh" <mahesh1.kumar@intel.com>
Date: Mon, 10 Aug 2015 16:04:27 +0530
Subject: [PATCH] REVERTME [VPG]: drm/i915/cht: Color Manager: Enable CGM block

CHT HW has CGM block for color management. This patch adds support to
enable and use that block, via the existing sysfs interfaces, added for
VLV.

This patch also adds support for color correction save/restore during
suspend resume cycles.

split chv_set_cgm_gamma function, to handle register writing in
seperate function. This enables us to reuse the code.

REVERTME: Color manager's new architecture is already available in
upstream, and being reviewed. This patch is to add support for customer
requests.

Change-Id: Id97c26a996a94901dac8f2ed3dfd18f70063a56f
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-42291
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-43463
Signed-off-by: Kumar, Mahesh <mahesh1.kumar@intel.com>
Signed-off-by: Sharma, Shashank <shashank.sharma@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h     |    1 
 drivers/gpu/drm/i915/i915_sysfs.c   |  287 ++++++++++++++++++++++++++++-
 drivers/gpu/drm/i915/intel_clrmgr.c |  350 ++++++++++++++++++++++++++++++++++--
 drivers/gpu/drm/i915/intel_clrmgr.h |   14 +
 4 files changed, 624 insertions(+), 28 deletions(-)

Index: b/drivers/gpu/drm/i915/i915_drv.h
===================================================================
--- a/drivers/gpu/drm/i915/i915_drv.h	2016-03-08 15:07:13.355972338 -0800
+++ b/drivers/gpu/drm/i915/i915_drv.h	2016-03-08 15:07:13.479973592 -0800
@@ -1741,6 +1741,7 @@
 	bool quick_modeset;
 	bool maxfifo_enabled;
 	bool gamma_enabled[I915_MAX_PIPES];
+	bool degamma_enabled[I915_MAX_PIPES];
 	bool csc_enabled[I915_MAX_PIPES];
 	bool is_resuming;
 	bool is_video_playing;  /* Indicates enabling only in videomode */
Index: b/drivers/gpu/drm/i915/i915_sysfs.c
===================================================================
--- a/drivers/gpu/drm/i915/i915_sysfs.c	2016-03-08 15:07:12.279961456 -0800
+++ b/drivers/gpu/drm/i915/i915_sysfs.c	2016-03-08 15:07:13.483973633 -0800
@@ -611,13 +611,150 @@
 }
 static DEVICE_ATTR(thaw, S_IRUGO, thaw_show, NULL);
 
-static ssize_t gamma_adjust_store(struct device *kdev,
+static ssize_t chv_gamma_adjust_store(struct device *kdev,
 				     struct device_attribute *attr,
 				     const char *ubuf, size_t count)
 {
 	int ret = 0;
 	int bytes_count = 0;
 	char *buf = NULL;
+	int crtc_id = -1;
+	int bytes_read = 0;
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_crtc *crtc = NULL;
+	struct drm_mode_object *obj;
+	static int pipe;
+	static bool first_pass;
+	uint *dest = NULL;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Gamma adjust: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Allocate memory for gamma holder array */
+	dest = kzalloc(CHV_GAMMA_MAX_VALS * sizeof(uint), GFP_KERNEL);
+	if (!dest) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("Gamma adjust: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+	bytes_count = count;
+
+	/*
+	 * Combined Red/Green/Blue gamma, input size is greater than PAGE_SIZE,
+	 * but SYSFS can handle only PAGE_SIZE data in one callback, here I'm
+	 * parsing Red/Green gamma correction curve in first call and return
+	 * bytes_read so that next call will come with remaining Blue gamma
+	 * correction curve, parse & store it in second pass.
+	 */
+	if (!first_pass) {
+
+		first_pass = true;
+
+		/* Parse data and read the crtc_id */
+		ret = parse_clrmgr_input(&crtc_id, buf,
+				CRTC_ID_TOKEN_COUNT, &bytes_count);
+		if (ret < CRTC_ID_TOKEN_COUNT) {
+			DRM_ERROR("CRTC_ID loading failed\n");
+			ret = -EINVAL;
+			goto EXIT;
+		}
+		bytes_read += bytes_count;
+		bytes_count = count - bytes_read;
+
+		obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
+		if (!obj) {
+			DRM_DEBUG_KMS("Unknown CRTC ID %d\n", crtc_id);
+			ret = -EINVAL;
+			goto EXIT;
+		}
+		crtc = obj_to_crtc(obj);
+		DRM_DEBUG_KMS("[CRTC:%d]\n", crtc->base.id);
+
+		pipe = to_intel_crtc(crtc)->pipe;
+		if (bytes_count > 0) {
+
+			/* Parse and load the gamma table for Red Component */
+			ret = parse_clrmgr_input(dest, buf+bytes_read,
+					CHV_GAMMA_MAX_VALS, &bytes_count);
+			if (ret < CHV_GAMMA_MAX_VALS) {
+				DRM_ERROR("Gamma table loading Red failed\n");
+				ret = -EINVAL;
+				goto EXIT;
+			} else
+				DRM_DEBUG("Gamma table loading Red done\n");
+			chv_save_gamma_lut(dest, pipe, RED_OFFSET);
+		}
+		bytes_read += bytes_count;
+		bytes_count = count - bytes_read;
+		if (bytes_count > 0) {
+
+			/* Parse and load the gamma table for Green Component */
+			ret = parse_clrmgr_input(dest, buf+bytes_read,
+					CHV_GAMMA_MAX_VALS, &bytes_count);
+			if (ret < CHV_GAMMA_MAX_VALS) {
+				DRM_ERROR("Gamma table loading Green failed\n");
+				ret = -EINVAL;
+				goto EXIT;
+			} else
+				DRM_DEBUG("Gamma table loading Green done\n");
+			chv_save_gamma_lut(dest, pipe, GREEN_OFFSET);
+		}
+		bytes_read += bytes_count;
+		bytes_count = count - bytes_read;
+	} else {
+		first_pass = false;
+		if (bytes_count > 0) {
+
+			/* Parse and load the gamma table for Blue Component */
+			ret = parse_clrmgr_input(dest, buf, CHV_GAMMA_MAX_VALS,
+					&bytes_count);
+			if (ret < CHV_GAMMA_MAX_VALS) {
+				DRM_ERROR("Gamma table loading Blue failed\n");
+				ret = -EINVAL;
+				goto EXIT;
+			} else
+				DRM_DEBUG("Gamma table loading Blue done\n");
+			chv_save_gamma_lut(dest, pipe, BLUE_OFFSET);
+		}
+		bytes_read = count;
+	}
+
+EXIT:
+	kfree(dest);
+	kfree(buf);
+	if (ret < 0) {
+		first_pass = false;
+		return ret;
+	}
+
+	return bytes_read;
+}
+
+
+static ssize_t gamma_adjust_store(struct device *kdev,
+		struct device_attribute *attr,
+		const char *ubuf, size_t count)
+{
+	int ret = 0;
+	int bytes_count = 0;
+	char *buf = NULL;
 	int pipe = 0;
 	int crtc_id = -1;
 	int bytes_read = 0;
@@ -700,7 +837,6 @@
 	return count;
 }
 
-
 static ssize_t csc_enable_show(struct device *kdev,
 		struct device_attribute *attr, char *ubuf)
 {
@@ -828,6 +964,7 @@
 	struct drm_minor *minor = dev_to_drm_minor(kdev);
 	struct drm_device *dev = minor->dev;
 	struct drm_mode_object *obj = NULL;
+	int max_coeff_count = 0;
 
 	if (!count) {
 		DRM_ERROR("CSC adjust: insufficient data\n");
@@ -851,10 +988,11 @@
 	ret = parse_clrmgr_input(&crtc_id, buf,
 		CRTC_ID_TOKEN_COUNT, &bytes_count);
 	if (ret < CRTC_ID_TOKEN_COUNT) {
-		DRM_ERROR("CONNECTOR_TYPE_TOKEN loading failed\n");
+		DRM_ERROR("CRTC_ID loading failed\n");
 		goto EXIT;
-	} else
-		DRM_DEBUG("CONNECTOR_TYPE_TOKEN loading done\n");
+	}
+	bytes_read += bytes_count;
+	bytes_count = count - bytes_read;
 
 	obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
 	if (!obj) {
@@ -866,14 +1004,17 @@
 	DRM_DEBUG_KMS("[CRTC:%d]\n", crtc->base.id);
 
 	pipe = to_intel_crtc(crtc)->pipe;
-	bytes_read += bytes_count;
-	bytes_count = count - bytes_read;
+
+	if (IS_CHERRYVIEW(dev))
+		max_coeff_count = CSC_MAX_COEFF_COUNT_CHV;
+	else
+		max_coeff_count = CSC_MAX_COEFF_COUNT;
 	if (bytes_count > 0) {
 
 		/* Parse data and load the csc  table */
 		ret = parse_clrmgr_input(csc_softlut[pipe], buf+bytes_read,
-			CSC_MAX_COEFF_COUNT, &bytes_count);
-		if (ret < CSC_MAX_COEFF_COUNT)
+			max_coeff_count, &bytes_count);
+		if (ret < max_coeff_count)
 			DRM_ERROR("CSC table loading failed\n");
 		else
 			DRM_DEBUG("CSC table loading done\n");
@@ -886,6 +1027,118 @@
 	return count;
 }
 
+
+static ssize_t degamma_enable_show(struct device *kdev,
+		struct device_attribute *attr,  char *ubuf)
+{
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	int len = 0;
+
+	len = scnprintf(ubuf, PAGE_SIZE, "Pipe 0: %s\nPipe 1: %s\nPipe 2: %s\n",
+		dev_priv->degamma_enabled[0] ? "Enabled" : "Disabled",
+		dev_priv->degamma_enabled[1] ? "Enabled" : "Disabled",
+		dev_priv->degamma_enabled[1] ? "Enabled" : "Disabled");
+
+	return len;
+}
+
+static ssize_t degamma_enable_store(struct device *kdev,
+				     struct device_attribute *attr,
+				     const char *ubuf, size_t count)
+{
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	int ret = 0;
+	struct drm_crtc *crtc = NULL;
+	char *buf = NULL;
+	int bytes_read = 0;
+	int bytes_count = 0;
+	int crtc_id = -1;
+	int req_state = 0;
+	int pipe;
+	struct drm_mode_object *obj;
+
+	/* Validate input */
+	if (!count) {
+		DRM_ERROR("Gamma adjust: insufficient data\n");
+		return -EINVAL;
+	}
+
+	buf = kzalloc(count, GFP_KERNEL);
+	if (!buf) {
+		DRM_ERROR("Gamma adjust: insufficient memory\n");
+		return -ENOMEM;
+	}
+
+	/* Get the data */
+	if (!strncpy(buf, ubuf, count)) {
+		DRM_ERROR("DeGamma enable: copy failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	bytes_count = count;
+
+	/* Parse data and load the crtc_id */
+	ret = parse_clrmgr_input(&crtc_id, buf,
+		CRTC_ID_TOKEN_COUNT, &bytes_count);
+	if (ret < CRTC_ID_TOKEN_COUNT) {
+		DRM_ERROR("CRTC_ID loading failed\n");
+		goto EXIT;
+	}
+	bytes_read += bytes_count;
+	bytes_count = count - bytes_read;
+
+	obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
+	if (!obj) {
+		DRM_DEBUG_KMS("Unknown CRTC ID %d\n", crtc_id);
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	crtc = obj_to_crtc(obj);
+	pipe = to_intel_crtc(crtc)->pipe;
+	DRM_DEBUG_KMS("[CRTC:%d]\n", crtc->base.id);
+
+	if (bytes_count > 0) {
+
+		/* Parse data and load the degamma  table */
+		ret = parse_clrmgr_input(&req_state, buf+bytes_read,
+			ENABLE_TOKEN_MAX_COUNT, &bytes_count);
+		if (ret < ENABLE_TOKEN_MAX_COUNT) {
+			DRM_ERROR("Enable-token loading failed\n");
+			goto EXIT;
+		} else
+			DRM_DEBUG("Enable-token loading done\n");
+	} else {
+		DRM_ERROR("Enable-token loading failed\n");
+		ret = -EINVAL;
+		goto EXIT;
+	}
+
+	/* if gamma enabled, apply degamma correction on PIPE */
+	if (req_state) {
+		if (chv_set_pipe_degamma(crtc, true, false)) {
+			DRM_ERROR("Apply degamma correction failed\n");
+			ret = -EINVAL;
+		} else
+			ret = count;
+	} else {
+		/* Disable gamma on this plane */
+		chv_set_pipe_degamma(crtc, false, false);
+		ret = count;
+	}
+
+EXIT:
+	kfree(buf);
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
 static ssize_t gamma_enable_show(struct device *kdev,
 		struct device_attribute *attr,  char *ubuf)
 {
@@ -900,7 +1153,6 @@
 	if (IS_CHERRYVIEW(dev))
 		len += scnprintf(ubuf+len, PAGE_SIZE, "Pipe 2: %s\n",
 			dev_priv->gamma_enabled[2] ? "Enabled" : "Disabled");
-
 	return len;
 }
 
@@ -1168,6 +1420,8 @@
 static DEVICE_ATTR(csc_adjust, S_IWUSR, NULL, csc_adjust_store);
 static DEVICE_ATTR(cb_adjust, S_IWUSR, NULL, cb_adjust_store);
 static DEVICE_ATTR(hs_adjust, S_IWUSR, NULL, hs_adjust_store);
+static DEVICE_ATTR(degamma_enable, S_IRUGO | S_IWUSR, degamma_enable_show,
+						degamma_enable_store);
 
 static const struct attribute *gen6_attrs[] = {
 	&dev_attr_gt_cur_freq_mhz.attr,
@@ -1198,6 +1452,11 @@
 	NULL,
 };
 
+static const struct attribute *chv_attrs[] = {
+		&dev_attr_degamma_enable.attr,
+		NULL,
+};
+
 static ssize_t error_state_read(struct file *filp, struct kobject *kobj,
 				struct bin_attribute *attr, char *buf,
 				loff_t off, size_t count)
@@ -1579,6 +1838,11 @@
 				&i915_videostatus_attr_group);
 		if (ret)
 			DRM_ERROR("video status sysfs setup failed\n");
+		if (IS_CHERRYVIEW(dev)) {
+			ret = sysfs_create_files(&dev->primary->kdev->kobj,
+					chv_attrs);
+			dev_attr_gamma_adjust.store = chv_gamma_adjust_store;
+		}
 		ret = sysfs_create_files(&dev->primary->kdev->kobj, vlv_attrs);
 	} else if (INTEL_INFO(dev)->gen >= 6)
 		ret = sysfs_create_files(&dev->primary->kdev->kobj, gen6_attrs);
@@ -1622,6 +1886,9 @@
 		sysfs_remove_files(&dev->primary->kdev->kobj, vlv_attrs);
 		sysfs_unmerge_group(&dev->primary->kdev->kobj,
 				&i915_videostatus_attr_group);
+		if (IS_CHERRYVIEW(dev))
+			sysfs_remove_files(&dev->primary->kdev->kobj,
+				chv_attrs);
 	} else
 		sysfs_remove_files(&dev->primary->kdev->kobj, gen6_attrs);
 	device_remove_bin_file(dev->primary->kdev,  &dpf_attrs_1);
Index: b/drivers/gpu/drm/i915/intel_clrmgr.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_clrmgr.c	2016-03-08 15:07:01.111848514 -0800
+++ b/drivers/gpu/drm/i915/intel_clrmgr.c	2016-03-08 15:08:54.969001161 -0800
@@ -38,6 +38,122 @@
 	0, 0, 0, 0, 0, 1023
 };
 
+struct gamma_lut_data chv_gamma_lut[MAX_PIPES_CHV][CHV_GAMMA_MAX_VALS];
+
+u32 degamma_softlut[DEGAMMA_CORRECT_MAX_COUNT_CHV] = {
+	0x00000000, 0x00000000, 0x00140014, 0x00000014, 0x00280028, 0x00000028,
+	0x003c003c, 0x0000003c, 0x00540054, 0x00000054, 0x00720072, 0x00000072,
+	0x00950095, 0x00000095, 0x00bd00bd, 0x000000bd, 0x00eb00eb, 0x000000eb,
+	0x011f011f, 0x0000011f, 0x01590159, 0x00000159, 0x019a019a, 0x0000019a,
+	0x01e101e1, 0x000001e1, 0x022e022e, 0x0000022e, 0x02830283, 0x00000283,
+	0x02df02df, 0x000002df, 0x03420342, 0x00000342, 0x03ac03ac, 0x000003ac,
+	0x041d041d, 0x0000041d, 0x04970497, 0x00000497, 0x05180518, 0x00000518,
+	0x05a105a1, 0x000005a1, 0x06320632, 0x00000632, 0x06cb06cb, 0x000006cb,
+	0x076d076d, 0x0000076d, 0x08170817, 0x00000817, 0x08c908c9, 0x000008c9,
+	0x09840984, 0x00000984, 0x0a480a48, 0x00000a48, 0x0b150b15, 0x00000b15,
+	0x0beb0beb, 0x00000beb, 0x0cca0cca, 0x00000cca, 0x0db30db3, 0x00000db3,
+	0x0ea40ea4, 0x00000ea4, 0x0f9f0f9f, 0x00000f9f, 0x10a410a4, 0x000010a4,
+	0x11b211b2, 0x000011b2, 0x12ca12ca, 0x000012ca, 0x13ec13ec, 0x000013ec,
+	0x15181518, 0x00001518, 0x164e164e, 0x0000164e, 0x178e178e, 0x0000178e,
+	0x18d818d8, 0x000018d8, 0x1a2c1a2c, 0x00001a2c, 0x1b8b1b8b, 0x00001b8b,
+	0x1cf51cf5, 0x00001cf5, 0x1e681e68, 0x00001e68, 0x1fe71fe7, 0x00001fe7,
+	0x21702170, 0x00002170, 0x23052305, 0x00002305, 0x24a424a4, 0x000024a4,
+	0x264e264e, 0x0000264e, 0x28032803, 0x00002803, 0x29c429c4, 0x000029c4,
+	0x2b8f2b8f, 0x00002b8f, 0x2d662d66, 0x00002d66, 0x2f482f48, 0x00002f48,
+	0x31363136, 0x00003136, 0x33303330, 0x00003330, 0x35353535, 0x00003535,
+	0x37453745, 0x00003745, 0x39623962, 0x00003962, 0x3b8a3b8a, 0x00003b8a,
+	0x3dbf3dbf, 0x00003dbf, 0x3fff3fff, 0x00003fff
+};
+
+struct gamma_lut_data chv_gamma_default[CHV_CGM_GAMMA_MATRIX_MAX_VALS] = {
+	{0x0000, 0x0000, 0x0000}, {0x0cc0, 0x0cc0, 0x0cc0}, {0x15c0, 0x15c0, 0x15c0},
+	{0x1c40, 0x1c40, 0x1c40}, {0x21c0, 0x21c0, 0x21c0}, {0x2640, 0x2640, 0x2640},
+	{0x2a80, 0x2a80, 0x2a80}, {0x2e40, 0x2e40, 0x2e40}, {0x3180, 0x3180, 0x3180},
+	{0x34c0, 0x34c0, 0x34c0}, {0x37c0, 0x37c0, 0x37c0}, {0x3ac0, 0x3ac0, 0x3ac0},
+	{0x3d40, 0x3d40, 0x3d40}, {0x4000, 0x4000, 0x4000}, {0x4240, 0x4240, 0x4240},
+	{0x44c0, 0x44c0, 0x44c0}, {0x4700, 0x4700, 0x4700}, {0x4900, 0x4900, 0x4900},
+	{0x4b40, 0x4b40, 0x4b40}, {0x4d40, 0x4d40, 0x4d40}, {0x4f40, 0x4f40, 0x4f40},
+	{0x5100, 0x5100, 0x5100}, {0x5300, 0x5300, 0x5300}, {0x54c0, 0x54c0, 0x54c0},
+	{0x5680, 0x5680, 0x5680}, {0x5840, 0x5840, 0x5840}, {0x5a00, 0x5a00, 0x5a00},
+	{0x5b80, 0x5b80, 0x5b80}, {0x5d40, 0x5d40, 0x5d40}, {0x5ec0, 0x5ec0, 0x5ec0},
+	{0x6040, 0x6040, 0x6040}, {0x6200, 0x6200, 0x6200}, {0x6380, 0x6380, 0x6380},
+	{0x64c0, 0x64c0, 0x64c0}, {0x6640, 0x6640, 0x6640}, {0x67c0, 0x67c0, 0x67c0},
+	{0x6900, 0x6900, 0x6900}, {0x6a80, 0x6a80, 0x6a80}, {0x6bc0, 0x6bc0, 0x6bc0},
+	{0x6d00, 0x6d00, 0x6d00}, {0x6e80, 0x6e80, 0x6e80}, {0x6fc0, 0x6fc0, 0x6fc0},
+	{0x7100, 0x7100, 0x7100}, {0x7240, 0x7240, 0x7240}, {0x7380, 0x7380, 0x7380},
+	{0x74c0, 0x74c0, 0x74c0}, {0x7600, 0x7600, 0x7600}, {0x7700, 0x7700, 0x7700},
+	{0x7840, 0x7840, 0x7840}, {0x7980, 0x7980, 0x7980}, {0x7a80, 0x7a80, 0x7a80},
+	{0x7bc0, 0x7bc0, 0x7bc0}, {0x7cc0, 0x7cc0, 0x7cc0}, {0x7e00, 0x7e00, 0x7e00},
+	{0x7f00, 0x7f00, 0x7f00}, {0x8000, 0x8000, 0x8000}, {0x8140, 0x8140, 0x8140},
+	{0x8240, 0x8240, 0x8240}, {0x8340, 0x8340, 0x8340}, {0x8440, 0x8440, 0x8440},
+	{0x8540, 0x8540, 0x8540}, {0x8640, 0x8640, 0x8640}, {0x8740, 0x8740, 0x8740},
+	{0x8840, 0x8840, 0x8840}, {0x8940, 0x8940, 0x8940}, {0x8a40, 0x8a40, 0x8a40},
+	{0x8b40, 0x8b40, 0x8b40}, {0x8c40, 0x8c40, 0x8c40}, {0x8d40, 0x8d40, 0x8d40},
+	{0x8e40, 0x8e40, 0x8e40}, {0x8f00, 0x8f00, 0x8f00}, {0x9000, 0x9000, 0x9000},
+	{0x9100, 0x9100, 0x9100}, {0x9200, 0x9200, 0x9200}, {0x92c0, 0x92c0, 0x92c0},
+	{0x93c0, 0x93c0, 0x93c0}, {0x9480, 0x9480, 0x9480}, {0x9580, 0x9580, 0x9580},
+	{0x9640, 0x9640, 0x9640}, {0x9740, 0x9740, 0x9740}, {0x9800, 0x9800, 0x9800},
+	{0x9900, 0x9900, 0x9900}, {0x99c0, 0x99c0, 0x99c0}, {0x9ac0, 0x9ac0, 0x9ac0},
+	{0x9b80, 0x9b80, 0x9b80}, {0x9c40, 0x9c40, 0x9c40}, {0x9d40, 0x9d40, 0x9d40},
+	{0x9e00, 0x9e00, 0x9e00}, {0x9ec0, 0x9ec0, 0x9ec0}, {0x9fc0, 0x9fc0, 0x9fc0},
+	{0xa080, 0xa080, 0xa080}, {0xa140, 0xa140, 0xa140}, {0xa200, 0xa200, 0xa200},
+	{0xa300, 0xa300, 0xa300}, {0xa3c0, 0xa3c0, 0xa3c0}, {0xa480, 0xa480, 0xa480},
+	{0xa540, 0xa540, 0xa540}, {0xa600, 0xa600, 0xa600}, {0xa6c0, 0xa6c0, 0xa6c0},
+	{0xa780, 0xa780, 0xa780}, {0xa840, 0xa840, 0xa840}, {0xa900, 0xa900, 0xa900},
+	{0xa9c0, 0xa9c0, 0xa9c0}, {0xaa80, 0xaa80, 0xaa80}, {0xab40, 0xab40, 0xab40},
+	{0xac00, 0xac00, 0xac00}, {0xacc0, 0xacc0, 0xacc0}, {0xad80, 0xad80, 0xad80},
+	{0xae40, 0xae40, 0xae40}, {0xaf00, 0xaf00, 0xaf00}, {0xafc0, 0xafc0, 0xafc0},
+	{0xb080, 0xb080, 0xb080}, {0xb140, 0xb140, 0xb140}, {0xb1c0, 0xb1c0, 0xb1c0},
+	{0xb280, 0xb280, 0xb280}, {0xb340, 0xb340, 0xb340}, {0xb400, 0xb400, 0xb400},
+	{0xb4c0, 0xb4c0, 0xb4c0}, {0xb540, 0xb540, 0xb540}, {0xb600, 0xb600, 0xb600},
+	{0xb6c0, 0xb6c0, 0xb6c0}, {0xb780, 0xb780, 0xb780}, {0xb800, 0xb800, 0xb800},
+	{0xb8c0, 0xb8c0, 0xb8c0}, {0xb980, 0xb980, 0xb980}, {0xba00, 0xba00, 0xba00},
+	{0xbac0, 0xbac0, 0xbac0}, {0xbb80, 0xbb80, 0xbb80}, {0xbc00, 0xbc00, 0xbc00},
+	{0xbcc0, 0xbcc0, 0xbcc0}, {0xbd80, 0xbd80, 0xbd80}, {0xbe00, 0xbe00, 0xbe00},
+	{0xbec0, 0xbec0, 0xbec0}, {0xbf40, 0xbf40, 0xbf40}, {0xc000, 0xc000, 0xc000},
+	{0xc080, 0xc080, 0xc080}, {0xc140, 0xc140, 0xc140}, {0xc1c0, 0xc1c0, 0xc1c0},
+	{0xc280, 0xc280, 0xc280}, {0xc340, 0xc340, 0xc340}, {0xc3c0, 0xc3c0, 0xc3c0},
+	{0xc480, 0xc480, 0xc480}, {0xc500, 0xc500, 0xc500}, {0xc580, 0xc580, 0xc580},
+	{0xc640, 0xc640, 0xc640}, {0xc6c0, 0xc6c0, 0xc6c0}, {0xc780, 0xc780, 0xc780},
+	{0xc800, 0xc800, 0xc800}, {0xc8c0, 0xc8c0, 0xc8c0}, {0xc940, 0xc940, 0xc940},
+	{0xca00, 0xca00, 0xca00}, {0xca80, 0xca80, 0xca80}, {0xcb00, 0xcb00, 0xcb00},
+	{0xcbc0, 0xcbc0, 0xcbc0}, {0xcc40, 0xcc40, 0xcc40}, {0xccc0, 0xccc0, 0xccc0},
+	{0xcd80, 0xcd80, 0xcd80}, {0xce00, 0xce00, 0xce00}, {0xce80, 0xce80, 0xce80},
+	{0xcf40, 0xcf40, 0xcf40}, {0xcfc0, 0xcfc0, 0xcfc0}, {0xd040, 0xd040, 0xd040},
+	{0xd100, 0xd100, 0xd100}, {0xd180, 0xd180, 0xd180}, {0xd200, 0xd200, 0xd200},
+	{0xd2c0, 0xd2c0, 0xd2c0}, {0xd340, 0xd340, 0xd340}, {0xd3c0, 0xd3c0, 0xd3c0},
+	{0xd440, 0xd440, 0xd440}, {0xd500, 0xd500, 0xd500}, {0xd580, 0xd580, 0xd580},
+	{0xd600, 0xd600, 0xd600}, {0xd680, 0xd680, 0xd680}, {0xd700, 0xd700, 0xd700},
+	{0xd7c0, 0xd7c0, 0xd7c0}, {0xd840, 0xd840, 0xd840}, {0xd8c0, 0xd8c0, 0xd8c0},
+	{0xd940, 0xd940, 0xd940}, {0xd9c0, 0xd9c0, 0xd9c0}, {0xda80, 0xda80, 0xda80},
+	{0xdb00, 0xdb00, 0xdb00}, {0xdb80, 0xdb80, 0xdb80}, {0xdc00, 0xdc00, 0xdc00},
+	{0xdc80, 0xdc80, 0xdc80}, {0xdd00, 0xdd00, 0xdd00}, {0xdd80, 0xdd80, 0xdd80},
+	{0xde40, 0xde40, 0xde40}, {0xdec0, 0xdec0, 0xdec0}, {0xdf40, 0xdf40, 0xdf40},
+	{0xdfc0, 0xdfc0, 0xdfc0}, {0xe040, 0xe040, 0xe040}, {0xe0c0, 0xe0c0, 0xe0c0},
+	{0xe140, 0xe140, 0xe140}, {0xe1c0, 0xe1c0, 0xe1c0}, {0xe240, 0xe240, 0xe240},
+	{0xe2c0, 0xe2c0, 0xe2c0}, {0xe340, 0xe340, 0xe340}, {0xe3c0, 0xe3c0, 0xe3c0},
+	{0xe440, 0xe440, 0xe440}, {0xe4c0, 0xe4c0, 0xe4c0}, {0xe580, 0xe580, 0xe580},
+	{0xe600, 0xe600, 0xe600}, {0xe680, 0xe680, 0xe680}, {0xe700, 0xe700, 0xe700},
+	{0xe780, 0xe780, 0xe780}, {0xe800, 0xe800, 0xe800}, {0xe880, 0xe880, 0xe880},
+	{0xe900, 0xe900, 0xe900}, {0xe980, 0xe980, 0xe980}, {0xea00, 0xea00, 0xea00},
+	{0xea80, 0xea80, 0xea80}, {0xeac0, 0xeac0, 0xeac0}, {0xeb40, 0xeb40, 0xeb40},
+	{0xebc0, 0xebc0, 0xebc0}, {0xec40, 0xec40, 0xec40}, {0xecc0, 0xecc0, 0xecc0},
+	{0xed40, 0xed40, 0xed40}, {0xedc0, 0xedc0, 0xedc0}, {0xee40, 0xee40, 0xee40},
+	{0xeec0, 0xeec0, 0xeec0}, {0xef40, 0xef40, 0xef40}, {0xefc0, 0xefc0, 0xefc0},
+	{0xf040, 0xf040, 0xf040}, {0xf0c0, 0xf0c0, 0xf0c0}, {0xf140, 0xf140, 0xf140},
+	{0xf180, 0xf180, 0xf180}, {0xf200, 0xf200, 0xf200}, {0xf280, 0xf280, 0xf280},
+	{0xf300, 0xf300, 0xf300}, {0xf380, 0xf380, 0xf380}, {0xf400, 0xf400, 0xf400},
+	{0xf480, 0xf480, 0xf480}, {0xf500, 0xf500, 0xf500}, {0xf540, 0xf540, 0xf540},
+	{0xf5c0, 0xf5c0, 0xf5c0}, {0xf640, 0xf640, 0xf640}, {0xf6c0, 0xf6c0, 0xf6c0},
+	{0xf740, 0xf740, 0xf740}, {0xf7c0, 0xf7c0, 0xf7c0}, {0xf840, 0xf840, 0xf840},
+	{0xf880, 0xf880, 0xf880}, {0xf900, 0xf900, 0xf900}, {0xf980, 0xf980, 0xf980},
+	{0xfa00, 0xfa00, 0xfa00}, {0xfa80, 0xfa80, 0xfa80}, {0xfac0, 0xfac0, 0xfac0},
+	{0xfb40, 0xfb40, 0xfb40}, {0xfbc0, 0xfbc0, 0xfbc0}, {0xfc40, 0xfc40, 0xfc40},
+	{0xfcc0, 0xfcc0, 0xfcc0}, {0xfd00, 0xfd00, 0xfd00}, {0xfd80, 0xfd80, 0xfd80},
+	{0xfe00, 0xfe00, 0xfe00}, {0xfe80, 0xfe80, 0xfe80}, {0xfec0, 0xfec0, 0xfec0},
+	{0xff40, 0xff40, 0xff40}, {0xffc0, 0xffc0, 0xffc0}
+};
+
 /* Gamma soft lookup table for default gamma =1.0 */
 u32 gamma_softlut[MAX_PIPES_CHV][GAMMA_CORRECT_MAX_COUNT] =  {
 	{0x000000, 0x0, 0x020202, 0x0, 0x040404, 0x0, 0x060606, 0x0,
@@ -167,10 +283,12 @@
 
 /* Color space conversion coff's */
 u32 csc_softlut[MAX_PIPES_CHV][CSC_MAX_COEFF_COUNT] = {
-	{ 1024,	 0, 67108864, 0, 0, 1024 },
-	{ 1024,	 0, 67108864, 0, 0, 1024 },
-	{ 1024,	 0, 67108864, 0, 0, 1024 }
+	{ 0x1000, 0x0, 0x1000, 0x0, 0x1000, 0x0},
+	{ 0x1000, 0x0, 0x1000, 0x0, 0x1000, 0x0},
+	{ 0x1000, 0x0, 0x1000, 0x0, 0x1000, 0x0},
 };
+u32 chv_csc_default[CSC_MAX_COEFF_COUNT_CHV] = {
+				0x1000, 0x0, 0x1000, 0x0, 0x1000};
 
 /*
  * Gen 6 SOC allows following color correction values:
@@ -225,6 +343,150 @@
 	PIPEC_CGM_GAMMA_ST
 };
 
+static bool chv_apply_cgm_gamma(struct intel_crtc *intel_crtc,
+			const struct gamma_lut_data *data, bool enable);
+
+void chv_save_gamma_lut(uint *dest, enum pipe pipe, enum color color)
+{
+	int i;
+
+	switch (color) {
+		case RED_OFFSET:
+			for (i = 0; i < CHV_GAMMA_MAX_VALS; i++)
+				chv_gamma_lut[pipe][i].red = dest[i];
+			break;
+		case GREEN_OFFSET:
+			for (i = 0; i < CHV_GAMMA_MAX_VALS; i++)
+				chv_gamma_lut[pipe][i].green = dest[i];
+			break;
+		case BLUE_OFFSET:
+			for (i = 0; i < CHV_GAMMA_MAX_VALS; i++)
+				chv_gamma_lut[pipe][i].blue = dest[i];
+			break;
+		default:
+			DRM_ERROR("Wrong Color input for gamma\n");
+	}
+}
+
+int chv_set_pipe_degamma(struct drm_crtc *crtc, bool enable, bool is_internal)
+{
+	struct intel_crtc *intel_crtc;
+	struct drm_device *dev;
+	struct drm_i915_private *dev_priv;
+	u32 i = 0;
+	enum pipe pipe;
+	u32 cgm_degamma_reg, cgm_ctrl_reg;
+	u32 val;
+
+	/* Validate input */
+	if (!crtc) {
+		DRM_ERROR("Invalid CRTC object input to gamma enable\n");
+		return -EINVAL;
+	}
+
+	intel_crtc = to_intel_crtc(crtc);
+	if (intel_crtc == NULL)
+		return false;
+
+	pipe = intel_crtc->pipe;
+	dev = crtc->dev;
+	dev_priv = dev->dev_private;
+
+	if (!is_internal)
+		dev_priv->degamma_enabled[pipe] = enable;
+	cgm_ctrl_reg = dev_priv->info.display_mmio_offset +
+		cgm_ctrl[intel_crtc->pipe];
+	cgm_degamma_reg = dev_priv->info.display_mmio_offset +
+		cgm_degamma_st[intel_crtc->pipe];
+	if (enable) {
+		for (i = 0; i < DEGAMMA_CORRECT_MAX_COUNT_CHV; i++)
+			I915_WRITE(cgm_degamma_reg + 4 * i, degamma_softlut[i]);
+
+		chv_apply_cgm_gamma(intel_crtc, chv_gamma_default, true);
+		val = I915_READ(cgm_ctrl_reg) | CGM_DEGAMMA_EN;
+		I915_WRITE(cgm_ctrl_reg, val);
+
+	} else {
+		val = I915_READ(cgm_ctrl_reg) & ~(CGM_DEGAMMA_EN |
+				CGM_GAMMA_EN);
+		I915_WRITE(cgm_ctrl_reg, val);
+	}
+	return 0;
+}
+
+int chv_set_csc(struct drm_device *dev, struct drm_crtc *crtc, bool enable)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct intel_crtc *intel_crtc = NULL;
+	u32 cgm_csc_reg;
+	u32 cgm_ctrl_reg;
+	int pipe;
+	int i;
+
+	intel_crtc = to_intel_crtc(crtc);
+	if (!intel_crtc) {
+		DRM_ERROR("Invalid or null intel_crtc\n");
+		return -EINVAL;
+	}
+	pipe = intel_crtc->pipe;
+	dev_priv->csc_enabled[pipe] = enable;
+	cgm_ctrl_reg = dev_priv->info.display_mmio_offset +
+		cgm_ctrl[intel_crtc->pipe];
+	cgm_csc_reg = dev_priv->info.display_mmio_offset +
+		cgm_csc_st[intel_crtc->pipe];
+
+	if (enable) {
+		DRM_DEBUG_DRIVER("Setting CSC on pipe = %d\n", pipe);
+
+		/* program CGM CSC values */
+		for (i = 0; i < CSC_MAX_COEFF_COUNT_CHV; i++)
+			I915_WRITE(cgm_csc_reg + 4 * i, csc_softlut[pipe][i]);
+
+		/* CSC require Degamma & Gamma to be enabled for correct */
+		chv_set_pipe_degamma(crtc, true, true);
+
+		/* enable csc in CGM block*/
+		I915_WRITE(cgm_ctrl_reg, I915_READ(cgm_ctrl_reg) | CGM_CSC_EN);
+	} else {
+		/* program CGM CSC values */
+		for (i = 0; i < CSC_MAX_COEFF_COUNT_CHV; i++)
+			I915_WRITE(cgm_csc_reg + 4 * i, chv_csc_default[i]);
+		chv_set_pipe_degamma(crtc, false, true);
+
+		/* disable csc in CGM block */
+		I915_WRITE(cgm_ctrl_reg, I915_READ(cgm_ctrl_reg) | CGM_CSC_EN);
+	}
+	return 0;
+
+}
+
+
+int chv_set_pipe_gamma(struct intel_crtc *intel_crtc, bool enable)
+{
+	struct drm_i915_private *dev_priv;
+	enum pipe pipe;
+	u32 cgm_ctrl_reg;
+
+	if (intel_crtc == NULL)
+		return false;
+
+	dev_priv = intel_crtc->base.dev->dev_private;
+	pipe = intel_crtc->pipe;
+	cgm_ctrl_reg = dev_priv->info.display_mmio_offset + cgm_ctrl[pipe];
+
+	if (enable) {
+		chv_apply_cgm_gamma(intel_crtc, chv_gamma_lut[pipe], true);
+		DRM_DEBUG("CGM Gamma enabled on Pipe %d\n", pipe);
+	} else {
+		if ((I915_READ(cgm_ctrl_reg) & CGM_DEGAMMA_EN))
+			return chv_apply_cgm_gamma(intel_crtc,
+					chv_gamma_default, true);
+		chv_apply_cgm_gamma(intel_crtc, NULL, false);
+	}
+	return 0;
+}
+
+
 /* Enable color space conversion on PIPE */
 int
 do_intel_enable_csc(struct drm_device *dev, void *data, struct drm_crtc *crtc)
@@ -241,6 +503,9 @@
 		return -EINVAL;
 	}
 
+	if (IS_CHERRYVIEW(dev))
+		return chv_set_csc(dev, crtc, true);
+
 	intel_crtc = to_intel_crtc(crtc);
 	pipe = intel_crtc->pipe;
 	DRM_DEBUG_DRIVER("pipe = %d\n", pipe);
@@ -280,6 +545,9 @@
 	u32 pipeconf = 0;
 	int pipe = 0;
 
+	if (IS_CHERRYVIEW(dev))
+		chv_set_csc(dev, crtc, false);
+
 	intel_crtc = to_intel_crtc(crtc);
 	pipe = intel_crtc->pipe;
 	pipeconf = I915_READ(PIPECONF(pipe));
@@ -536,15 +804,13 @@
 }
 
 /*
- * chv_set_cgm_gamma
+ * chv_apply_cgm_gamma
  * Cherryview specific u0.10 cgm gamma correction method on PIPE.
  * inputs:
  * - intel_crtc*
- * - color manager registered property for cgm_csc_correction
  * - data: pointer to correction values to be applied
  */
-bool chv_set_cgm_gamma(struct intel_crtc *intel_crtc,
-			const struct clrmgr_regd_prop *cgm_gamma,
+static bool chv_apply_cgm_gamma(struct intel_crtc *intel_crtc,
 			const struct gamma_lut_data *data, bool enable)
 {
 	u32 i = 0;
@@ -553,9 +819,6 @@
 
 	struct drm_device *dev = intel_crtc->base.dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct drm_property *property;
-
-	property = cgm_gamma->property;
 
 	/* Validate input */
 	if (!intel_crtc) {
@@ -602,6 +865,28 @@
 }
 
 /*
+ * chv_set_cgm_gamma
+ * Cherryview specific u0.10 cgm gamma correction method on PIPE.
+ * inputs:
+ * - intel_crtc*
+ * - color manager registered property for cgm_csc_correction
+ * - data: pointer to correction values to be applied
+ */
+bool chv_set_cgm_gamma(struct intel_crtc *intel_crtc,
+			const struct clrmgr_regd_prop *cgm_gamma,
+			const struct gamma_lut_data *data, bool enable)
+{
+	struct drm_property *property;
+
+	property = cgm_gamma->property;
+
+	if (intel_crtc == NULL)
+		return false;
+
+	return chv_apply_cgm_gamma(intel_crtc, data, enable);
+}
+
+/*
  * chv_set_cgm_degamma
  * Cherryview specific cgm degamma correction method on PIPE.
  *  inputs:
@@ -749,6 +1034,9 @@
 	dev_priv = dev->dev_private;
 	dev_priv->gamma_enabled[pipe] = true;
 
+	if (IS_CHERRYVIEW(dev))
+		return chv_set_pipe_gamma(intel_crtc, true);
+
 	palreg = PALETTE(pipe);
 	 /* 10.6 mode Gamma Implementation */
 	while (count < GAMMA_CORRECT_MAX_COUNT) {
@@ -1191,6 +1479,9 @@
 
 	dev_priv->gamma_enabled[intel_crtc->pipe] = false;
 
+	if (IS_CHERRYVIEW(dev))
+		return chv_set_pipe_gamma(intel_crtc, false);
+
 	/* Reset pal regs */
 	intel_crtc_load_lut(crtc);
 
@@ -1328,6 +1619,8 @@
 intel_attach_pipe_color_correction(struct intel_crtc *intel_crtc)
 {
 	struct clrmgr_reg_request *features;
+	struct drm_crtc *crtc = &intel_crtc->base;
+	struct drm_device *dev = crtc->dev;
 
 	/* Color manager initialized? */
 	if (!intel_crtc->color_status) {
@@ -1353,6 +1646,12 @@
 	else
 		DRM_DEBUG_DRIVER("Attached colot corrections for pipe %d\n",
 		intel_crtc->pipe);
+
+	/* WA: Enable CGM block CSC with Unity Matrix, disabling CGM block on
+	 * the fly leads to display blank-out, So keep CSC always ON
+	 */
+	if (IS_CHERRYVIEW(dev))
+		chv_set_csc(dev, crtc, false);
 	kfree(features);
 }
 
@@ -1487,14 +1786,6 @@
 	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
 		pipe = to_intel_crtc(crtc)->pipe;
 
-		/* If gamma enabled, restore gamma */
-		if (dev_priv->gamma_enabled[pipe]) {
-			if (intel_crtc_enable_gamma(crtc, PIPEID(pipe))) {
-				DRM_ERROR("Color Restore: gamma failed\n");
-				return false;
-			}
-		}
-
 		/* If csc enabled, restore csc */
 		if (dev_priv->csc_enabled[pipe]) {
 			if (do_intel_enable_csc(dev,
@@ -1502,7 +1793,30 @@
 				DRM_ERROR("Color Restore: CSC failed\n");
 				return false;
 			}
+		} else if (IS_CHERRYVIEW(dev)) {
+			/* WA: Keep CGM block active in CHT */
+			if (chv_set_csc(dev, crtc, false)) {
+				DRM_ERROR("Color Restore: CSC failed\n");
+				return false;
+			}
 		}
+
+		/* If degamma enabled, restore degamma */
+		if (IS_CHERRYVIEW(dev) && dev_priv->degamma_enabled[pipe]) {
+			if (chv_set_pipe_degamma(crtc, true, false)) {
+				DRM_ERROR("Color Restore: degamma failed\n");
+				return false;
+			}
+		}
+		/* If gamma enabled, restore gamma */
+		if (dev_priv->gamma_enabled[pipe]) {
+			if (intel_crtc_enable_gamma(crtc, PIPEID(pipe))) {
+				DRM_ERROR("Color Restore: gamma failed\n");
+				return false;
+			}
+		}
+
+
 	}
 
 	if (!intel_restore_hs(dev)) {
Index: b/drivers/gpu/drm/i915/intel_clrmgr.h
===================================================================
--- a/drivers/gpu/drm/i915/intel_clrmgr.h	2016-03-08 15:06:54.367780325 -0800
+++ b/drivers/gpu/drm/i915/intel_clrmgr.h	2016-03-08 15:07:13.483973633 -0800
@@ -47,9 +47,12 @@
 /* CSC correction */
 #define CLRMGR_BASE   16
 #define CSC_MAX_COEFF_COUNT		6
+#define CSC_MAX_COEFF_COUNT_CHV		5
 #define CLR_MGR_PARSE_MAX		128
 #define PIPECONF_GAMMA			(1<<24)
 #define GAMMA_CORRECT_MAX_COUNT 256
+#define GAMMA_CORRECT_MAX_COUNT_CHV	514
+#define DEGAMMA_CORRECT_MAX_COUNT_CHV	130
 #define CRTC_ID_TOKEN_COUNT	1
 #define ENABLE_TOKEN_MAX_COUNT	1
 #define GC_MAX_COUNT 3
@@ -168,6 +171,15 @@
 #define CHV_CGM_GAMMA_MATRIX_MAX_VALS   257
 #define CHV_CGM_DEGAMMA_MATRIX_MAX_VALS	65
 
+
+enum color {
+	RED_OFFSET = 0,
+	GREEN_OFFSET,
+	BLUE_OFFSET,
+	MAX_COLOR_COMPONENTS,
+};
+#define CHV_GAMMA_MAX_VALS	CHV_CGM_GAMMA_MATRIX_MAX_VALS
+
 #define PIPEA_CGM_DEGAMMA_ST 0x66000
 #define PIPEA_CGM_GAMMA_ST   0x67000
 #define PIPEA_CGM_CSC_ST     0x67900
@@ -285,6 +297,8 @@
 		struct hue_saturationlut *hs_ptr);
 void intel_save_clr_mgr_status(struct drm_device *dev);
 bool intel_restore_clr_mgr_status(struct drm_device *dev);
+void chv_save_gamma_lut(uint *dest, enum pipe pipe, enum color color);
+int chv_set_pipe_degamma(struct drm_crtc *crtc, bool enable, bool is_internal);
 
 /*
  * intel_clrmgr_set_property
