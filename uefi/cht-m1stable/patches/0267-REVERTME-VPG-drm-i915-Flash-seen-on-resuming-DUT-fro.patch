From 416a0f2190cd83f6cb3eb5950ffab33601e93b0c Mon Sep 17 00:00:00 2001
Message-Id: <416a0f2190cd83f6cb3eb5950ffab33601e93b0c.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: arsharma <ankitprasad.r.sharma@intel.com>
Date: Wed, 27 Aug 2014 11:58:50 +0530
Subject: [PATCH 267/312] REVERTME [VPG]: drm/i915: Flash seen on resuming DUT
 from sleep through power button

Setting dpst_disable field in histogram_status to notify CoreU to reset
its context before going for suspend.
This patch will be replaced with a clean version once the new CoreU
binary has landed in master

Issue: GMIN-2917
Change-Id: Ia14e639879df279c78d83cfd886e0fc62e88a877
Signed-off-by: arsharma <ankitprasad.r.sharma@intel.com>
---
 drivers/gpu/drm/i915/i915_dpst.c |   38 ++++++++++++++++++++++++++++++++------
 include/uapi/drm/i915_drm.h      |   20 ++++++++++++++------
 2 files changed, 46 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dpst.c b/drivers/gpu/drm/i915/i915_dpst.c
index 433ee20..c4478de 100644
--- a/drivers/gpu/drm/i915/i915_dpst.c
+++ b/drivers/gpu/drm/i915/i915_dpst.c
@@ -293,7 +293,12 @@ i915_dpst_get_bin_data(struct drm_device *dev,
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	u32 blm_hist_ctl, blm_hist_bin;
+	u32 ioctl_type = ioctl_data->dpst_ioctl_type;
 	int index;
+	struct dpst_histogram_status *hist_stat =
+		&(ioctl_data->hist_status);
+	struct dpst_histogram_status_legacy *hist_stat_legacy =
+		&(ioctl_data->hist_status_legacy);
 
 	/* We may be disabled by request from kernel or user. Kernel mode
 	 * disablement is without user mode knowledge. Kernel mode disablement
@@ -302,6 +307,13 @@ i915_dpst_get_bin_data(struct drm_device *dev,
 	 * disablement makes this an invalid call, so return error. */
 	if (!dev_priv->dpst.enabled && !dev_priv->dpst.user_enable)
 		return -EINVAL;
+	else if (!dev_priv->dpst.enabled &&
+			ioctl_type == DPST_GET_BIN_DATA) {
+		/* Convey to user that dpst has been disabled
+		 * from kernel. */
+		ioctl_data->hist_status.dpst_disable = 1;
+		return 0;
+	}
 
 	/* Setup register to access bin data from index 0 */
 	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
@@ -314,9 +326,14 @@ i915_dpst_get_bin_data(struct drm_device *dev,
 		blm_hist_bin = I915_READ(dev_priv->dpst.reg.blm_hist_bin);
 
 		if (!(blm_hist_bin & BUSY_BIT)) {
-			ioctl_data->hist_status.histogram_bins.status[index]
-				= blm_hist_bin
-					& dev_priv->dpst.reg.blm_hist_bin_count_mask;
+			if (ioctl_type == DPST_GET_BIN_DATA)
+				hist_stat->histogram_bins.status[index]
+				   = blm_hist_bin &
+				    dev_priv->dpst.reg.blm_hist_bin_count_mask;
+			else
+				hist_stat_legacy->histogram_bins.status[index]
+				   = blm_hist_bin &
+				    dev_priv->dpst.reg.blm_hist_bin_count_mask;
 		} else {
 			/* Engine is busy. Reset index to 0 to grab
 			 * fresh histogram data */
@@ -438,6 +455,11 @@ i915_dpst_display_off(struct drm_device *dev)
 		i915_dpst_disable_hist_interrupt(dev);
 		mutex_unlock(&dev_priv->dpst.ioctl_lock);
 	}
+
+	/* Send a fake signal to user, so that the user can be notified
+	 * to reset the dpst context, to avoid any mismatch of blc_adjusment
+	 * between user and kernel on resume. */
+	i915_dpst_irq_handler(dev, dev_priv->dpst.pipe);
 }
 
 void
@@ -564,16 +586,19 @@ i915_dpst_context(struct drm_device *dev, void *data,
 	/* Can be called from multiple usermode, prevent race condition */
 	mutex_lock(&dev_priv->dpst.ioctl_lock);
 
+	ioctl_data = (struct dpst_initialize_context *) data;
+
 	/* If Display is currently off (could be power gated also),
-	 * don't service the ioctls
+	 * don't service the ioctls other than GET_BIN_DATA
 	 */
-	if (dev_priv->dpst.display_off) {
+	if (dev_priv->dpst.display_off &&
+		(ioctl_data->dpst_ioctl_type != DPST_GET_BIN_DATA_LEGACY &&
+			ioctl_data->dpst_ioctl_type != DPST_GET_BIN_DATA)) {
 		DRM_DEBUG_KMS("Display is off\n");
 		mutex_unlock(&dev_priv->dpst.ioctl_lock);
 		return -EINVAL;
 	}
 
-	ioctl_data = (struct dpst_initialize_context *) data;
 	switch (ioctl_data->dpst_ioctl_type) {
 	case DPST_ENABLE:
 		ret = i915_dpst_set_user_enable(dev, true);
@@ -587,6 +612,7 @@ i915_dpst_context(struct drm_device *dev, void *data,
 		ret = i915_dpst_init(dev, ioctl_data);
 	break;
 
+	case DPST_GET_BIN_DATA_LEGACY:
 	case DPST_GET_BIN_DATA:
 		ret = i915_dpst_get_bin_data(dev, ioctl_data);
 	break;
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index fb820bd..11ae57a 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -1239,9 +1239,15 @@ struct dpst_histogram {
 	} hist_mode;
 };
 
+struct dpst_histogram_status_legacy {
+	__u32	pipe_n;
+	struct	dpst_histogram histogram_bins;
+};
+
 struct dpst_histogram_status {
 	__u32	pipe_n;
-	struct dpst_histogram histogram_bins;
+	__u32	dpst_disable;
+	struct	dpst_histogram histogram_bins;
 };
 
 struct dpst_initialize_context {
@@ -1249,14 +1255,16 @@ struct dpst_initialize_context {
 		DPST_ENABLE = 1,
 		DPST_DISABLE,
 		DPST_INIT_DATA,
-		DPST_GET_BIN_DATA,
+		DPST_GET_BIN_DATA_LEGACY,
 		DPST_APPLY_LUMA,
-		DPST_RESET_HISTOGRAM_STATUS
+		DPST_RESET_HISTOGRAM_STATUS,
+		DPST_GET_BIN_DATA
 	} dpst_ioctl_type;
 	union {
-		struct dpst_initialize_data	init_data;
-		struct dpst_ie_container	ie_container;
-		struct dpst_histogram_status	hist_status;
+		struct dpst_initialize_data		init_data;
+		struct dpst_ie_container		ie_container;
+		struct dpst_histogram_status		hist_status;
+		struct dpst_histogram_status_legacy	hist_status_legacy;
 	};
 };
 #endif /* _UAPI_I915_DRM_H_ */
-- 
1.7.9.5

