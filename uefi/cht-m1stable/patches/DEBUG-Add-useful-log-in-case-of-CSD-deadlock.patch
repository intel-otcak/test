From 7adc6a0c233f8dfca715cdc9c281a8d150c7ea3a Mon Sep 17 00:00:00 2001
From: Emmanuel Berthier <emmanuel.berthier@intel.com>
Date: Fri, 28 Mar 2014 13:32:26 +0100
Subject: [PATCH] [DEBUG] Add useful log in case of CSD deadlock

Add logs to identify culprit core.

Change-Id: I473768332da241c39b8ae4e811395659b9c840e5
Signed-off-by: Emmanuel Berthier <emmanuel.berthier@intel.com>
---
 include/linux/smp.h |  1 +
 kernel/smp.c        | 26 +++++++++++++++++++++-----
 2 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/include/linux/smp.h b/include/linux/smp.h
index 6ae004e..0e71789 100644
--- a/include/linux/smp.h
+++ b/include/linux/smp.h
@@ -23,6 +23,7 @@ struct call_single_data {
 	};
 	smp_call_func_t func;
 	void *info;
+	int cpu;
 	u16 flags;
 };
 
diff --git a/kernel/smp.c b/kernel/smp.c
index ff87d44..9208ebd 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -12,6 +12,7 @@
 #include <linux/gfp.h>
 #include <linux/smp.h>
 #include <linux/cpu.h>
+#include <linux/nmi.h>
 
 #include "smpboot.h"
 
@@ -88,14 +89,28 @@ void __init call_function_init(void)
  */
 static void csd_lock_wait(struct call_single_data *csd)
 {
-	while (csd->flags & CSD_FLAG_LOCK)
+	/* must be less than Soft & Hard lockup timeouts */
+	unsigned long timeout = jiffies + 5 * HZ;
+
+	while (csd->flags & CSD_FLAG_LOCK) {
 		cpu_relax();
+
+		/* Dump useful info in case of deadlock */
+		if (time_after(jiffies, timeout)) {
+			timeout = jiffies + 5 * HZ;
+			pr_emerg("BUG: CPU %d waiting for CSD lock held by CPU %d\n",
+				get_cpu(), csd->cpu);
+			dump_stack();
+			trigger_all_cpu_backtrace();
+		}
+	}
 }
 
-static void csd_lock(struct call_single_data *csd)
+static void csd_lock(int cpu, struct call_single_data *csd)
 {
 	csd_lock_wait(csd);
 	csd->flags |= CSD_FLAG_LOCK;
+	csd->cpu = cpu;
 
 	/*
 	 * prevent CPU from reordering the above assignment
@@ -115,6 +130,7 @@ static void csd_unlock(struct call_single_data *csd)
 	smp_mb();
 
 	csd->flags &= ~CSD_FLAG_LOCK;
+	csd->cpu = -1;
 }
 
 /*
@@ -220,7 +236,7 @@ int smp_call_function_single(int cpu, smp_call_func_t func, void *info,
 			if (!wait)
 				csd = &__get_cpu_var(csd_data);
 
-			csd_lock(csd);
+			csd_lock(cpu, csd);
 
 			csd->func = func;
 			csd->info = info;
@@ -310,7 +326,7 @@ void __smp_call_function_single(int cpu, struct call_single_data *csd,
 		csd->func(csd->info);
 		local_irq_restore(flags);
 	} else {
-		csd_lock(csd);
+		csd_lock(cpu, csd);
 		generic_exec_single(cpu, csd, wait);
 	}
 	put_cpu();
@@ -378,7 +394,7 @@ void smp_call_function_many(const struct cpumask *mask,
 	for_each_cpu(cpu, cfd->cpumask) {
 		struct call_single_data *csd = per_cpu_ptr(cfd->csd, cpu);
 
-		csd_lock(csd);
+		csd_lock(cpu, csd);
 		csd->func = func;
 		csd->info = info;
 		llist_add(&csd->llist, &per_cpu(call_single_queue, cpu));
-- 
1.9.1

