From bf9754dd0f592cbc18792849c923fd9028394a04 Mon Sep 17 00:00:00 2001
From: Omair Mohammed Abdullah <omair.m.abdullah@intel.com>
Date: Tue, 15 Jul 2014 21:34:48 +0530
Subject: [PATCH] ASoC: core: add a helper for extended byte controls using TLV

Issue: GMINL-7223

ALSA supports arbitrary length TLVs for each kcontrol that can be used
to pass metadata about the control (e.g. volumes, enum information). The
same transport mechanism is now used for arbitrary length data by
defining a new helper.

Change-Id: Iaebfd398f4f97b9485f3c867d4255ef3ee300a87
Signed-off-by: Omair Mohammed Abdullah <omair.m.abdullah@intel.com>
Signed-off-by: Vinod Koul <vinod.koul@intel.com>
Signed-off-by: Mark Brown <broonie@linaro.org>
Signed-off-by: Mythri P K <mythri.p.k@intel.com>
---
 include/sound/soc.h       |  6 ++++++
 include/uapi/sound/asoc.h |  8 ++++++++
 sound/soc/soc-core.c      | 21 +++++++++++++++++++++
 3 files changed, 35 insertions(+)

diff --git a/include/sound/soc.h b/include/sound/soc.h
index cb3b24bb56df..4cb0ca9747c5 100644
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@ -311,6 +311,8 @@ int snd_soc_put_strobe(struct snd_kcontrol *kcontrol,
 	struct snd_ctl_elem_value *ucontrol);
 int snd_soc_info_bytes_ext(struct snd_kcontrol *kcontrol,
 	struct snd_ctl_elem_info *ucontrol);
+int snd_soc_bytes_tlv_callback(struct snd_kcontrol *kcontrol,
+	int op_flag, unsigned int size, unsigned int __user *tlv);
 
 /**
  * struct snd_soc_jack_pin - Describes a pin to update based on jack detection
@@ -886,6 +888,10 @@ struct soc_bytes_ext {
 	struct snd_kcontrol *dcontrol;
 	int index;
 
+	/* used for TLV byte control */
+	int (*get)(unsigned int __user *bytes, unsigned int size);
+	int (*put)(const unsigned int __user *bytes, unsigned int size);
+
 	unsigned int pvt_data_len;
 	char *pvt_data;
 };
diff --git a/include/uapi/sound/asoc.h b/include/uapi/sound/asoc.h
index 01f1fd583eab..003cfd0d1e7a 100644
--- a/include/uapi/sound/asoc.h
+++ b/include/uapi/sound/asoc.h
@@ -96,6 +96,14 @@
 	.get = xhandler_get, .put = xhandler_put, \
 	.private_value = (unsigned long)&(struct soc_bytes_ext) \
 		{.max = xcount} }
+#define SND_SOC_BYTES_TLV(xname, xcount, xhandler_get, xhandler_put) \
+{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
+	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE | \
+	SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK, \
+	.tlv.c = (snd_soc_bytes_tlv_callback), \
+	.info = snd_soc_info_bytes_ext, \
+	.private_value = (unsigned long)&(struct soc_bytes_ext) \
+	{.max = xcount, .get = xhandler_get, .put = xhandler_put, } }
 #define SOC_DOUBLE(xname, reg, shift_left, shift_right, max, invert) \
 {	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
 	.info = snd_soc_info_volsw, .get = snd_soc_get_volsw, \
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index f20cc5af0835..5a430ac297b4 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -3402,6 +3402,27 @@ int snd_soc_info_xr_sx(struct snd_kcontrol *kcontrol,
 }
 EXPORT_SYMBOL_GPL(snd_soc_info_xr_sx);
 
+int snd_soc_bytes_tlv_callback(struct snd_kcontrol *kcontrol, int op_flag,
+				unsigned int size, unsigned int __user *tlv)
+{
+	struct soc_bytes_ext *params = (void *)kcontrol->private_value;
+	unsigned int count = size < params->max ? size : params->max;
+	int ret = -ENXIO;
+
+	switch (op_flag) {
+	case SNDRV_CTL_TLV_OP_READ:
+		if (params->get)
+			ret = params->get(tlv, count);
+		break;
+	case SNDRV_CTL_TLV_OP_WRITE:
+		if (params->put)
+			ret = params->put(tlv, count);
+		break;
+	}
+	return ret;
+}
+EXPORT_SYMBOL_GPL(snd_soc_bytes_tlv_callback);
+
 /**
  * snd_soc_get_xr_sx - signed multi register get callback
  * @kcontrol: mreg control
-- 
1.9.1

