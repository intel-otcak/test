From 2954c2ff5e95fe509fe17f184e047c66822b7acb Mon Sep 17 00:00:00 2001
Message-Id: <2954c2ff5e95fe509fe17f184e047c66822b7acb.1438878491.git.yunwei.zhang@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Wed, 1 Jul 2015 10:39:21 +0530
Subject: [PATCH] REVERTME [VPG]: drm/i915: Avoid full modeset during boot if
 BIOS has done it for DSI.

Currently, BIOS enables the LFP with native resolution. Once
the HWC issues a modeset, full modeset is being done again with
native resolution. This consumes around approx around 1 sec. Patch
removes the encoder disable/enable by doing a quick modeset
and reduces the blank time before Android logo to less than 100msec.
Patch is REVERTME because solution is dependent on HWC and BIOS.
Also, current solution is for DSI only.

Change-Id: Id2a40e89bf939827650c76eeb34885acbcf4a6e2
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-39625
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
Signed-off-by: Uma Shankar <uma.shankar@intel.com>
## Don't forget to add a JIRA URL to the Tracked-On metadata!
## https://wiki.ith.intel.com/display/CACTUS/Patch+requirements+check
## url should be in the form:
## Tracked-On: https://jira01.devtools.intel.com/browse/<PROJ>-<NUMB>
## Several Tracked-On lines are allowed
## you can fully prefill your Tracked-On commits using environment variable:
## export CURRENT_TRACKED_ON=https://jira01.devtools.intel.com/browse/<PROJ>-<NUMB>
##
## Don't forget to add a JIRA URL to the Tracked-On metadata!
## https://wiki.ith.intel.com/display/CACTUS/Patch+requirements+check
## url should be in the form:
## Tracked-On: https://jira01.devtools.intel.com/browse/<PROJ>-<NUMB>
## Several Tracked-On lines are allowed
## you can fully prefill your Tracked-On commits using environment variable:
## export CURRENT_TRACKED_ON=https://jira01.devtools.intel.com/browse/<PROJ>-<NUMB>
##
---
 drivers/gpu/drm/i915/i915_dma.c      |    2 +
 drivers/gpu/drm/i915/i915_drv.h      |    1 +
 drivers/gpu/drm/i915/intel_display.c |   86 +++++++++++++++++++++++++++-------
 3 files changed, 72 insertions(+), 17 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 5e621c6..00be934 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -1707,6 +1707,8 @@ int i915_driver_load(struct drm_device *dev, unsigned long flags)
 	dev->dev_private = (void *)dev_priv;
 	dev_priv->dev = dev;
 
+	dev_priv->quick_modeset = true;
+
 	/* copy initial configuration to dev_priv->info */
 	device_info = (struct intel_device_info *)&dev_priv->info;
 	*device_info = *info;
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index ce184ed..c836de9 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1796,6 +1796,7 @@ struct drm_i915_private {
 	u32 vblcount;
 
 	bool is_first_modeset;
+	bool quick_modeset;
 	bool maxfifo_enabled;
 	bool gamma_enabled[I915_MAX_PIPES];
 	bool csc_enabled[I915_MAX_PIPES];
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 2bd32a8..b3462e4 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -5253,7 +5253,6 @@ static void cherryview_set_cdclk(struct drm_device *dev, int new_cdclk)
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	u32 cmd, val, vco;
 
-	WARN_ON(valleyview_cur_cdclk(dev_priv) != dev_priv->vlv_cdclk_freq);
 	dev_priv->vlv_cdclk_freq = new_cdclk;
 
 	/*
@@ -5499,9 +5498,15 @@ static void valleyview_crtc_enable(struct drm_crtc *crtc)
 
 	intel_set_cpu_fifo_underrun_reporting(dev, pipe, true);
 
-	for_each_encoder_on_crtc(dev, crtc, encoder)
-		if (encoder->pre_pll_enable)
+	for_each_encoder_on_crtc(dev, crtc, encoder) {
+		if (encoder->pre_pll_enable) {
+			if (encoder->type == INTEL_OUTPUT_DSI) {
+				if (dev_priv->quick_modeset)
+					continue;
+			}
 			encoder->pre_pll_enable(encoder);
+		}
+	}
 
 	if (!is_dsi) {
 		if (IS_CHERRYVIEW(dev))
@@ -5510,9 +5515,15 @@ static void valleyview_crtc_enable(struct drm_crtc *crtc)
 			vlv_enable_pll(intel_crtc);
 	}
 
-	for_each_encoder_on_crtc(dev, crtc, encoder)
-		if (encoder->pre_enable)
+	for_each_encoder_on_crtc(dev, crtc, encoder) {
+		if (encoder->pre_enable) {
+			if (encoder->type == INTEL_OUTPUT_DSI) {
+				if (dev_priv->quick_modeset)
+					continue;
+			}
 			encoder->pre_enable(encoder);
+		}
+	}
 
 	i9xx_pfit_enable(intel_crtc);
 
@@ -5548,9 +5559,13 @@ static void valleyview_crtc_enable(struct drm_crtc *crtc)
 
 	intel_crtc_enable_planes(crtc);
 
-	for_each_encoder_on_crtc(dev, crtc, encoder)
-		if (encoder->type == INTEL_OUTPUT_DSI)
+	for_each_encoder_on_crtc(dev, crtc, encoder) {
+		if (encoder->type == INTEL_OUTPUT_DSI) {
+			if (dev_priv->quick_modeset)
+				continue;
 			encoder->enable(encoder);
+		}
+	}
 
 	drm_crtc_vblank_on(crtc);
 
@@ -5776,8 +5791,13 @@ static void i9xx_crtc_disable(struct drm_crtc *crtc)
 		}
 	}
 
-	for_each_encoder_on_crtc(dev, crtc, encoder)
+	for_each_encoder_on_crtc(dev, crtc, encoder) {
+		if (encoder->type == INTEL_OUTPUT_DSI) {
+			if (dev_priv->quick_modeset)
+				continue;
+		}
 		encoder->disable(encoder);
+	}
 
 	/* Disable plane after backlight goes off */
 	intel_crtc_disable_planes(crtc);
@@ -5795,9 +5815,15 @@ static void i9xx_crtc_disable(struct drm_crtc *crtc)
 
 	i9xx_pfit_disable(intel_crtc);
 
-	for_each_encoder_on_crtc(dev, crtc, encoder)
-		if (encoder->post_disable)
+	for_each_encoder_on_crtc(dev, crtc, encoder) {
+		if (encoder->post_disable) {
+			if (encoder->type == INTEL_OUTPUT_DSI) {
+				if (dev_priv->quick_modeset)
+					continue;
+			}
 			encoder->post_disable(encoder);
+		}
+	}
 
 	if (!intel_pipe_has_type(crtc, INTEL_OUTPUT_DSI)) {
 		if (IS_CHERRYVIEW(dev))
@@ -6073,8 +6099,11 @@ void intel_connector_dpms(struct drm_connector *connector, int mode)
 	struct intel_encoder *intel_encoder = intel_connector->encoder;
 
 	/* All the simple cases only support two dpms states. */
-	if (mode != DRM_MODE_DPMS_ON)
+	if (mode != DRM_MODE_DPMS_ON) {
 		mode = DRM_MODE_DPMS_OFF;
+		if (dev_priv->is_first_modeset)
+			dev_priv->quick_modeset = false;
+	}
 
 	if (mode == connector->dpms) {
 		intel_connector->dpms_off_pending = false;
@@ -9554,6 +9583,7 @@ bool intel_get_load_detect_pipe(struct drm_connector *connector,
 	struct drm_encoder *encoder = &intel_encoder->base;
 	struct drm_crtc *crtc = NULL;
 	struct drm_device *dev = encoder->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct drm_framebuffer *fb;
 	struct drm_mode_config *config = &dev->mode_config;
 	int ret, i = -1;
@@ -9651,6 +9681,8 @@ retry:
 		goto fail;
 	}
 
+	dev_priv->quick_modeset = false;
+
 	if (intel_set_mode(crtc, mode, 0, 0, fb)) {
 		DRM_DEBUG_KMS("failed to set mode on load-detect pipe\n");
 		if (old->release_fb)
@@ -9688,6 +9720,8 @@ void intel_release_load_detect_pipe(struct drm_connector *connector,
 		intel_attached_encoder(connector);
 	struct drm_encoder *encoder = &intel_encoder->base;
 	struct drm_crtc *crtc = encoder->crtc;
+	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 
 	DRM_DEBUG_KMS("[CONNECTOR:%d:%s], [ENCODER:%d:%s]\n",
@@ -9699,6 +9733,7 @@ void intel_release_load_detect_pipe(struct drm_connector *connector,
 		intel_encoder->new_crtc = NULL;
 		intel_crtc->new_enabled = false;
 		intel_crtc->new_config = NULL;
+		dev_priv->quick_modeset = false;
 		intel_set_mode(crtc, NULL, 0, 0, NULL);
 
 		if (old->release_fb) {
@@ -12342,7 +12377,7 @@ static int __intel_set_mode(struct drm_crtc *crtc,
 	struct intel_crtc *intel_crtc;
 	struct drm_connector *connector;
 	unsigned disable_pipes, prepare_pipes, modeset_pipes;
-	int val, ret = 0;
+	int val, ret = 0, vcoval;
 
 	saved_mode = kmalloc(sizeof(*saved_mode), GFP_KERNEL);
 	if (!saved_mode)
@@ -12354,6 +12389,13 @@ static int __intel_set_mode(struct drm_crtc *crtc,
 	if (!(modeset_pipes | prepare_pipes | disable_pipes))
 		goto out;
 
+	/* FIXME: If BIOS did not enable DSI PLL */
+	mutex_lock(&dev_priv->dpio_lock);
+	vcoval = vlv_cck_read(dev_priv, CCK_REG_DSI_PLL_CONTROL);
+	mutex_unlock(&dev_priv->dpio_lock);
+	if (!(vcoval & DSI_PLL_VCO_EN))
+		dev_priv->quick_modeset = false;
+
 	*saved_mode = crtc->mode;
 
 	/* Hack: Because we don't (yet) support global modeset on multiple
@@ -12508,11 +12550,6 @@ static int __intel_set_mode(struct drm_crtc *crtc,
 		}
 	}
 
-	/* DO it only once */
-	if (IS_VALLEYVIEW(dev))
-		if (dev_priv->is_first_modeset)
-			valleyview_update_wm_pm5(intel_crtc);
-
 	/* FIXME: add subpixel order */
 done:
 	if (ret && crtc->enabled)
@@ -12861,7 +12898,9 @@ static int intel_crtc_set_config(struct drm_mode_set *set)
 	struct drm_device *dev;
 	struct drm_mode_set save_set;
 	struct intel_set_config *config;
+	struct drm_i915_private *dev_priv;
 	int ret;
+	int pipe;
 
 	BUG_ON(!set);
 	BUG_ON(!set->crtc);
@@ -12880,6 +12919,14 @@ static int intel_crtc_set_config(struct drm_mode_set *set)
 	}
 
 	dev = set->crtc->dev;
+	dev_priv = dev->dev_private;
+	pipe = to_intel_crtc(set->crtc)->pipe;
+
+	/* if BIOS did not initialize LFP */
+	if ((I915_READ(MIPI_CTRL(pipe)) == 0) ||
+		(I915_READ(MIPI_CTRL(pipe)) & READ_REQUEST_PRIORITY_MASK) !=
+			READ_REQUEST_PRIORITY_HIGH)
+		dev_priv->quick_modeset = false;
 
 	ret = -ENOMEM;
 	config = kzalloc(sizeof(*config), GFP_KERNEL);
@@ -12930,6 +12977,7 @@ static int intel_crtc_set_config(struct drm_mode_set *set)
 		DRM_DEBUG_KMS("failed to set mode on [CRTC:%d], err = %d\n",
 			      set->crtc->base.id, ret);
 fail:
+		dev_priv->quick_modeset = false;
 		intel_set_config_restore_state(dev, config);
 
 		/*
@@ -12951,6 +12999,7 @@ fail:
 
 out_config:
 	intel_set_config_free(config);
+	dev_priv->quick_modeset = false;
 	return ret;
 }
 
@@ -14417,6 +14466,9 @@ void intel_modeset_setup_hw_state(struct drm_device *dev,
 	if (force_restore) {
 		i915_redisable_vga(dev);
 
+		/* No quick modeset during force restore */
+		dev_priv->quick_modeset = false;
+
 		/*
 		 * We need to use raw interfaces for restoring state to avoid
 		 * checking (bogus) intermediate states.
-- 
1.7.9.5

