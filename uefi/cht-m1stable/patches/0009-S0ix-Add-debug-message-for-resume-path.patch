From bb2f3596d3d28611f93425c4eefc1869a7576c47 Mon Sep 17 00:00:00 2001
From: Aubrey Li <aubrey.li@intel.com>
Date: Wed, 14 May 2014 00:13:46 -0500
Subject: [PATCH 125/152] Add debug message for resume path

We need to ensure all of the device resume ops not hang. The debug
message is helpful for us to know the order of devices resume

Signed-off-by: Aubrey Li <aubrey.li@intel.com>
---
 drivers/base/power/main.c |   28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/drivers/base/power/main.c b/drivers/base/power/main.c
index 51556d4..4c558b6 100644
--- a/drivers/base/power/main.c
+++ b/drivers/base/power/main.c
@@ -525,7 +525,14 @@ static void dpm_resume_noirq(pm_message_t state)
 		list_move_tail(&dev->power.entry, &dpm_late_early_list);
 		mutex_unlock(&dpm_list_mtx);
 
+		pm_suspend_dbg("PM: device[%s] driver[%s] resume noirq enter\n",
+			dev_name(dev), dev_driver_string(dev));
+
 		error = device_resume_noirq(dev, state);
+
+		pm_suspend_dbg("PM: device[%s] driver[%s] resume noirq exit\n",
+			dev_name(dev), dev_driver_string(dev));
+
 		if (error) {
 			suspend_stats.failed_resume_noirq++;
 			dpm_save_failed_step(SUSPEND_RESUME_NOIRQ);
@@ -606,7 +613,14 @@ static void dpm_resume_early(pm_message_t state)
 		list_move_tail(&dev->power.entry, &dpm_suspended_list);
 		mutex_unlock(&dpm_list_mtx);
 
+		pm_suspend_dbg("PM: device[%s] driver[%s] resume early enter\n",
+			dev_name(dev), dev_driver_string(dev));
+
 		error = device_resume_early(dev, state);
+
+		pm_suspend_dbg("PM: device[%s] driver[%s] resume early exit\n",
+			dev_name(dev), dev_driver_string(dev));
+
 		if (error) {
 			suspend_stats.failed_resume_early++;
 			dpm_save_failed_step(SUSPEND_RESUME_EARLY);
@@ -726,7 +740,14 @@ static void async_resume(void *data, async_cookie_t cookie)
 	struct device *dev = (struct device *)data;
 	int error;
 
+	pm_suspend_dbg("PM: device[%s] driver[%s] resume async enter\n",
+		dev_name(dev), dev_driver_string(dev));
+
 	error = device_resume(dev, pm_transition, true);
+
+	pm_suspend_dbg("PM: device[%s] driver[%s] resume async exit\n",
+		dev_name(dev), dev_driver_string(dev));
+
 	if (error)
 		pm_dev_err(dev, pm_transition, " async", error);
 	put_device(dev);
@@ -772,7 +793,14 @@ void dpm_resume(pm_message_t state)
 
 			mutex_unlock(&dpm_list_mtx);
 
+			pm_suspend_dbg("PM: device[%s] driver[%s] resume enter\n",
+				dev_name(dev), dev_driver_string(dev));
+
 			error = device_resume(dev, state, false);
+
+			pm_suspend_dbg("PM: device[%s] driver[%s] resume exit\n",
+				dev_name(dev), dev_driver_string(dev));
+
 			if (error) {
 				suspend_stats.failed_resume++;
 				dpm_save_failed_step(SUSPEND_RESUME);
-- 
1.7.10.4

