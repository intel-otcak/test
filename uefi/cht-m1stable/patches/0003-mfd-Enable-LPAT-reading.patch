From c4e307e97b026c4b0c1594a5ff7e7b1d3bf4c1c9 Mon Sep 17 00:00:00 2001
From: Jenny TC <jenny.tc@intel.com>
Date: Fri, 5 Dec 2014 10:52:16 +0530
Subject: [PATCH 3/3] mfd: Enable LPAT reading

Enable LPAT reading for ADC lookup. The ADC lookup table
can be used by drivers which need temperature to ADC conversion
or viz.

Change-Id: Ic6dd97dced873a481a038acb514a7d4a7615eb1a
Signed-off-by: Jenny TC <jenny.tc@intel.com>
---
 drivers/mfd/intel_soc_pmic_wc.c | 53 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 53 insertions(+)

diff --git a/drivers/mfd/intel_soc_pmic_wc.c b/drivers/mfd/intel_soc_pmic_wc.c
index 1417f9b..f012c7d 100644
--- a/drivers/mfd/intel_soc_pmic_wc.c
+++ b/drivers/mfd/intel_soc_pmic_wc.c
@@ -528,6 +528,59 @@ static void wc_set_adc_pdata(void)
 			sizeof(wc_adc_pdata), 0);
 }
 
+static acpi_handle pmic_handle(void)
+{
+	return ACPI_HANDLE(intel_soc_pmic_dev());
+}
+
+static int acpi_get_lpat_table(int **lpat)
+{
+	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
+	union acpi_object *obj_p, *obj_e;
+	int i, ret = 0;
+	acpi_status status;
+
+	if (!acpi_has_method(pmic_handle(), "LPAT"))
+		return -ENODEV;
+
+	status = acpi_evaluate_object(pmic_handle(), "LPAT", NULL, &buffer);
+	if (ACPI_FAILURE(status)) {
+		dev_err(intel_soc_pmic_dev(), "evaluate LPAT failed\n");
+		return -EINVAL;
+	}
+	obj_p = (union acpi_object *)buffer.pointer;
+	if (!obj_p || (obj_p->type != ACPI_TYPE_PACKAGE) ||
+	    (obj_p->package.count % 2) || (obj_p->package.count < 4)) {
+		dev_err(intel_soc_pmic_dev(), "Invalid LPAT data\n");
+		ret = -ENODEV;
+		goto err;
+	}
+
+	*lpat = devm_kmalloc(intel_soc_pmic_dev(),
+			    sizeof(**lpat) * obj_p->package.count, GFP_KERNEL);
+	if (!*lpat) {
+		dev_err(intel_soc_pmic_dev(), "No mem for lpat\n");
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	for (i = 0; i < obj_p->package.count; i++) {
+		obj_e = &obj_p->package.elements[i];
+		if (obj_e->type != ACPI_TYPE_INTEGER) {
+			dev_err(intel_soc_pmic_dev(), "LPAT invalid data\n");
+			ret = -EINVAL;
+			goto err;
+		}
+		(*lpat)[i] = obj_e->integer.value;
+	}
+
+	ret = i;
+
+err:
+	kfree(buffer.pointer);
+	return ret;
+}
+
 static void wcove_set_ccsm_config(void)
 {
 	static struct intel_pmic_ccsm_platform_data pdata;
-- 
1.9.1

