From 21528e346e9cd0f485f82059c091572f9e913169 Mon Sep 17 00:00:00 2001
From: Jean-Christophe PINCE <jean-christophe.pince@intel.com>
Date: Fri, 13 Feb 2015 15:09:00 +0100
Subject: [PATCH] ASoC: soc-dapm: Fix user after free with snd_soc_dapm_widget

snd_soc_dapm_new_control copies the widget passed as argument with kmemdup
so the sname variable pointer is copied. soc_fw_dapm_widget_create calls
snd_soc_dapm_new_controls and deletes the sname pointer right after.
So, making a local copy of sname insures the memory does not get freed
elsewhere while still in use.

Issue: GMINL-6322

Change-Id: Idf40631949894818c7c3546febe52359af0f400f
Signed-off-by: Jean-Christophe PINCE <jean-christophe.pince@intel.com>
---
 sound/soc/soc-dapm.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/sound/soc/soc-dapm.c b/sound/soc/soc-dapm.c
index 49cf65a..caa16d2 100644
--- a/sound/soc/soc-dapm.c
+++ b/sound/soc/soc-dapm.c
@@ -2330,6 +2330,7 @@ static void dapm_free_widgets(struct snd_soc_dapm_context *dapm)
 			snd_soc_fw_dcontrols_remove_widget(w);
 
 		kfree(w->kcontrols);
+		kfree(w->sname);
 		kfree(w->name);
 		kfree(w);
 	}
@@ -3287,6 +3288,7 @@ snd_soc_dapm_new_control(struct snd_soc_dapm_context *dapm,
 			 const struct snd_soc_dapm_widget *widget)
 {
 	struct snd_soc_dapm_widget *w;
+	size_t name_len;
 	int ret;
 
 	if ((w = dapm_cnew_widget(widget)) == NULL)
@@ -3338,6 +3340,19 @@ snd_soc_dapm_new_control(struct snd_soc_dapm_context *dapm,
 		return NULL;
 	}
 
+	if (widget->sname) {
+		name_len = strlen(widget->sname);
+		if (name_len != 0) {
+			w->sname = kasprintf(GFP_KERNEL, "%s", widget->sname);
+			if (w->sname == NULL) {
+				kfree(w->name);
+				kfree(w);
+				return NULL;
+			}
+		} else
+			w->sname = NULL;
+	}
+
 	switch (w->id) {
 	case snd_soc_dapm_switch:
 	case snd_soc_dapm_mixer:
-- 
1.9.1

