From d996059dec9c1d019d755f4bee567729d2feee89 Mon Sep 17 00:00:00 2001
From: Aaron Lu <aaron.lu@intel.com>
Date: Wed, 19 Mar 2014 13:23:52 +0800
Subject: [PATCH 09/23] Thermal: add support for memory temperature reporting

Some of the firmware on Intel systems could report temperature for the
memory module by using an acpi device node with hid as INT3402. To
expose such information to user space, we register a thermal zone device
for it so that the thermal sysfs interface can expose such information.

Change-Id: I715e9038c5b17e89f79ccdb459c6086cea88eed9
Signed-off-by: Aaron Lu <aaron.lu@intel.com>
---
 drivers/thermal/intel_thermal/Makefile          |    1 +
 drivers/thermal/intel_thermal/int3402_thermal.c |   84 +++++++++++++++++++++++
 2 files changed, 85 insertions(+)
 create mode 100644 drivers/thermal/intel_thermal/int3402_thermal.c

diff --git a/drivers/thermal/intel_thermal/Makefile b/drivers/thermal/intel_thermal/Makefile
index 84363a3..e52f615 100644
--- a/drivers/thermal/intel_thermal/Makefile
+++ b/drivers/thermal/intel_thermal/Makefile
@@ -1 +1,2 @@
 obj-y			+= int3400_thermal.o
+obj-y			+= int3402_thermal.o
diff --git a/drivers/thermal/intel_thermal/int3402_thermal.c b/drivers/thermal/intel_thermal/int3402_thermal.c
new file mode 100644
index 0000000..6474eca
--- /dev/null
+++ b/drivers/thermal/intel_thermal/int3402_thermal.c
@@ -0,0 +1,84 @@
+/*
+ * INT3402 thermal driver for memory temperature reporting
+ *
+ * Copyright (C) 2014, Intel Corporation
+ * Authors: Aaron Lu <aaron.lu@intel.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/acpi.h>
+#include <linux/thermal.h>
+
+static int int3402_thermal_get_temp(struct thermal_zone_device *zone,
+				    unsigned long *temp)
+{
+	struct acpi_device *adev = zone->devdata;
+	unsigned long long tmp;
+	acpi_status status;
+
+	status = acpi_evaluate_integer(adev->handle, "_TMP", NULL, &tmp);
+	if (ACPI_FAILURE(status))
+		return -ENODEV;
+
+	/* _TMP returns the temperature in tenths of degrees Kelvin */
+	*temp = DECI_KELVIN_TO_MILLICELSIUS(tmp);
+
+	return 0;
+}
+
+static struct thermal_zone_device_ops int3402_thermal_zone_ops = {
+	.get_temp       = int3402_thermal_get_temp,
+};
+
+
+static int int3402_thermal_probe(struct platform_device *pdev)
+{
+	struct acpi_device *adev = ACPI_COMPANION(&pdev->dev);
+	struct thermal_zone_device *zone;
+
+	if (!acpi_has_method(adev, "_TMP"))
+		return -ENODEV;
+
+	zone = thermal_zone_device_register("int3402_thermal", 0, 0, adev,
+					&int3402_thermal_zone_ops, NULL, 0, 0);
+	if (IS_ERR(zone))
+		return PTR_ERR(zone);
+	platform_set_drvdata(pdev, zone);
+
+	return 0;
+}
+
+static int int3402_thermal_remove(struct platform_device *pdev)
+{
+	struct thermal_zone_device *zone = platform_get_drvdata(pdev);
+	thermal_zone_device_unregister(zone);
+	return 0;
+}
+
+static const struct acpi_device_id int3402_thermal_match[] = {
+	{"INT3402", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(acpi, int3402_thermal_match);
+
+static struct platform_driver int3402_thermal_driver = {
+	.probe = int3402_thermal_probe,
+	.remove = int3402_thermal_remove,
+	.driver = {
+		   .name = "int3402 thermal",
+		   .owner = THIS_MODULE,
+		   .acpi_match_table = int3402_thermal_match,
+		   },
+};
+
+module_platform_driver(int3402_thermal_driver);
+
+MODULE_DESCRIPTION("INT3402 Thermal driver");
+MODULE_LICENSE("GPL");
-- 
1.7.9.5

