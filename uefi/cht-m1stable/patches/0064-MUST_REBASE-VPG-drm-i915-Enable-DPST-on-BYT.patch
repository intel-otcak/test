From 1991dba1ccd5408bf1d83ee0bb8d5fed66490484 Mon Sep 17 00:00:00 2001
Message-Id: <1991dba1ccd5408bf1d83ee0bb8d5fed66490484.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: sgurram <sudheer.gurram@intel.com>
Date: Mon, 20 Jan 2014 19:00:09 +0530
Subject: [PATCH 064/312] MUST_REBASE [VPG]: drm/i915: Enable DPST on BYT

Major change is to enable DPST feature on Valleyview.
Also, defines a register structure which will be populated
according to the platform in use.

Issue: APDEV-1481
Change-Id: I01c036f088ae4b5f65505064a589c16a33642d62
Signed-off-by: sgurram <sudheer.gurram@intel.com>
Reviewed-on: https://android.intel.com/161244
Tested-by: sys_abtbuild <sys_abtbuild@intel.com>
Reviewed-by: S, Deepak <deepak.s@intel.com>
Reviewed-by: Odeberg, Hans <hans.odeberg@intel.com>
---
 drivers/gpu/drm/i915/i915_dpst.c    |   76 ++++++++++++++++++++++-------------
 drivers/gpu/drm/i915/i915_drv.c     |    1 +
 drivers/gpu/drm/i915/i915_drv.h     |    7 ++++
 drivers/gpu/drm/i915/i915_irq.c     |    3 ++
 drivers/gpu/drm/i915/i915_reg.h     |   10 +++++
 drivers/gpu/drm/i915/i915_suspend.c |    8 ++--
 6 files changed, 74 insertions(+), 31 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dpst.c b/drivers/gpu/drm/i915/i915_dpst.c
index 6265215..2fa33d7 100644
--- a/drivers/gpu/drm/i915/i915_dpst.c
+++ b/drivers/gpu/drm/i915/i915_dpst.c
@@ -72,8 +72,8 @@ i915_dpst_clear_hist_interrupt(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
 
-	I915_WRITE(BLM_HIST_GUARD,
-			I915_READ(BLM_HIST_GUARD) | HISTOGRAM_EVENT_STATUS);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_guard,
+			I915_READ(dev_priv->dpst.reg.blm_hist_guard) | HISTOGRAM_EVENT_STATUS);
 	return 0;
 }
 
@@ -87,9 +87,9 @@ i915_dpst_enable_hist_interrupt(struct drm_device *dev)
 	dev_priv->dpst.blc_adjustment = DPST_MAX_FACTOR ;
 
 	/* Enable histogram logic to collect data */
-	blm_hist_ctl = I915_READ(BLM_HIST_CTL);
+	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 	blm_hist_ctl |= IE_HISTOGRAM_ENABLE | HSV_INTENSITY_MODE;
-	I915_WRITE(BLM_HIST_CTL, blm_hist_ctl);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, blm_hist_ctl);
 
 	/* Wait for VBLANK since the histogram enabling logic takes affect
 	 * at the next vblank */
@@ -98,12 +98,12 @@ i915_dpst_enable_hist_interrupt(struct drm_device *dev)
 	/* Clear pending interrupt bit. Clearing the pending interrupt bit
 	 * must be not be done at the same time as enabling the
 	 * interrupt. */
-	I915_WRITE(BLM_HIST_GUARD,
-			I915_READ(BLM_HIST_GUARD) | HISTOGRAM_EVENT_STATUS);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_guard,
+			I915_READ(dev_priv->dpst.reg.blm_hist_guard) | HISTOGRAM_EVENT_STATUS);
 
 	/* Enable histogram interrupts */
-	I915_WRITE(BLM_HIST_GUARD,
-			I915_READ(BLM_HIST_GUARD) | HISTOGRAM_INTERRUPT_ENABLE);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_guard,
+			I915_READ(dev_priv->dpst.reg.blm_hist_guard) | HISTOGRAM_INTERRUPT_ENABLE);
 
 	/* DPST interrupt in DE_IER is enabled in irq_postinstall */
 
@@ -129,16 +129,16 @@ i915_dpst_disable_hist_interrupt(struct drm_device *dev)
 
 	/* Disable histogram interrupts. It is OK to clear pending interrupts
 	 * and disable interrupts at the same time. */
-	blm_hist_guard = I915_READ(BLM_HIST_GUARD);
+	blm_hist_guard = I915_READ(dev_priv->dpst.reg.blm_hist_guard);
 	blm_hist_guard |= HISTOGRAM_EVENT_STATUS; /* clear pending interrupts */
 	blm_hist_guard &= ~HISTOGRAM_INTERRUPT_ENABLE;
-	I915_WRITE(BLM_HIST_GUARD, blm_hist_guard);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_guard, blm_hist_guard);
 
 	/* Disable histogram logic */
-	blm_hist_ctl = I915_READ(BLM_HIST_CTL);
+	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 	blm_hist_ctl &= ~IE_HISTOGRAM_ENABLE;
 	blm_hist_ctl &= ~IE_MOD_TABLE_ENABLE;
-	I915_WRITE(BLM_HIST_CTL, blm_hist_ctl);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, blm_hist_ctl);
 
 	/* DPST interrupt in DE_IER register is disabled in irq_uninstall */
 
@@ -201,16 +201,16 @@ i915_dpst_apply_luma(struct drm_device *dev,
 
 	/* Setup register to access image enhancement value from
 	 * index 0.*/
-	blm_hist_ctl = I915_READ(BLM_HIST_CTL);
+	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 	blm_hist_ctl |= BIN_REG_FUNCTION_SELECT_IE;
 	blm_hist_ctl &= ~BIN_REGISTER_INDEX_MASK;
-	I915_WRITE(BLM_HIST_CTL, blm_hist_ctl);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, blm_hist_ctl);
 
 	/* Program the image enhancement data passed from user mode. */
 	for (i = 0; i < DPST_DIET_ENTRY_COUNT; i++) {
 		diet_factor = ioctl_data->ie_container.
 			dpst_ie_st.factor_present[i] * 0x200 / 10000;
-		I915_WRITE(BLM_HIST_BIN, diet_factor);
+		I915_WRITE(dev_priv->dpst.reg.blm_hist_bin, diet_factor);
 	}
 
 	if (dev_priv->dpst.kernel_disable) {
@@ -229,9 +229,9 @@ i915_dpst_apply_luma(struct drm_device *dev,
 	spin_unlock_irqrestore(&dev_priv->backlight_lock, spin_lock_flags);
 
 	/* Enable Image Enhancement Table */
-	blm_hist_ctl = I915_READ(BLM_HIST_CTL);
+	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 	blm_hist_ctl |= IE_MOD_TABLE_ENABLE | ENHANCEMENT_MODE_MULT;
-	I915_WRITE(BLM_HIST_CTL, blm_hist_ctl);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, blm_hist_ctl);
 
 	return 0;
 }
@@ -243,7 +243,7 @@ i915_dpst_save_luma(struct drm_device *dev)
 
 	/* Only save if user mode has indeed applied valid settings which
 	 * we determine by checking that the IE mod table was enabled */
-	if (!(I915_READ(BLM_HIST_CTL) & IE_MOD_TABLE_ENABLE))
+	if (!(I915_READ(dev_priv->dpst.reg.blm_hist_ctl) & IE_MOD_TABLE_ENABLE))
 		return;
 
 	/* IE mod table entries are saved in the hardware even if the table
@@ -278,9 +278,9 @@ i915_dpst_restore_luma(struct drm_device *dev)
 
 	/* IE mod table entries are saved in the hardware even if the table
 	 * is disabled, so we only need to re-enable the table */
-	blm_hist_ctl = I915_READ(BLM_HIST_CTL);
+	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 	blm_hist_ctl |= IE_MOD_TABLE_ENABLE | ENHANCEMENT_MODE_MULT;
-	I915_WRITE(BLM_HIST_CTL, blm_hist_ctl);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, blm_hist_ctl);
 }
 
 static int
@@ -300,14 +300,14 @@ i915_dpst_get_bin_data(struct drm_device *dev,
 		return -EINVAL;
 
 	/* Setup register to access bin data from index 0 */
-	blm_hist_ctl = I915_READ(BLM_HIST_CTL);
+	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 	blm_hist_ctl = blm_hist_ctl & ~(BIN_REGISTER_INDEX_MASK |
 						BIN_REG_FUNCTION_SELECT_IE);
-	I915_WRITE(BLM_HIST_CTL, blm_hist_ctl);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, blm_hist_ctl);
 
 	/* Read all bin data */
 	for (index = 0; index < HIST_BIN_COUNT; index++) {
-		blm_hist_bin = I915_READ(BLM_HIST_BIN);
+		blm_hist_bin = I915_READ(dev_priv->dpst.reg.blm_hist_bin);
 
 		if (!(blm_hist_bin & BUSY_BIT)) {
 			ioctl_data->hist_status.histogram_bins.
@@ -316,15 +316,34 @@ i915_dpst_get_bin_data(struct drm_device *dev,
 			/* Engine is busy. Reset index to 0 to grab
 			 * fresh histogram data */
 			index = -1;
-			blm_hist_ctl = I915_READ(BLM_HIST_CTL);
+			blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 			blm_hist_ctl = blm_hist_ctl & ~BIN_REGISTER_INDEX_MASK;
-			I915_WRITE(BLM_HIST_CTL, blm_hist_ctl);
+			I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, blm_hist_ctl);
 		}
 	}
 
 	return 0;
 }
 
+static int i915_dpst_update_registers(struct drm_device *dev)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	if (IS_HASWELL(dev)) {
+		dev_priv->dpst.reg.blm_hist_ctl = BLM_HIST_CTL;
+		dev_priv->dpst.reg.blm_hist_guard = BLM_HIST_GUARD;
+		dev_priv->dpst.reg.blm_hist_bin = BLM_HIST_BIN;
+	} else if (IS_VALLEYVIEW(dev)) {
+		dev_priv->dpst.reg.blm_hist_ctl = VLV_BLC_HIST_CTL(PIPE_A);
+		dev_priv->dpst.reg.blm_hist_guard = VLV_BLC_HIST_GUARD(PIPE_A);
+		dev_priv->dpst.reg.blm_hist_bin = VLV_BLC_HIST_BIN(PIPE_A);
+	} else {
+		DRM_ERROR("DPST not supported on this platform\n");
+		return -EINVAL;
+	}
+	return 0;
+};
+
 static int
 i915_dpst_init(struct drm_device *dev,
 		struct dpst_initialize_context *ioctl_data)
@@ -349,6 +368,9 @@ i915_dpst_init(struct drm_device *dev,
 		}
 	}
 
+	if (0 != i915_dpst_update_registers(dev))
+		return -EINVAL;
+
 	/* Store info needed to talk to user mode */
 	cur_pid = get_task_pid(current, PIDTYPE_PID);
 	put_pid(dev_priv->dpst.pid);
@@ -357,10 +379,10 @@ i915_dpst_init(struct drm_device *dev,
 
 
 	/* Setup guardband delays and threshold */
-	blm_hist_guard = I915_READ(BLM_HIST_GUARD);
+	blm_hist_guard = I915_READ(dev_priv->dpst.reg.blm_hist_guard);
 	blm_hist_guard |= (ioctl_data->init_data.gb_delay << 22)
 			| ioctl_data->init_data.threshold_gb;
-	I915_WRITE(BLM_HIST_GUARD, blm_hist_guard);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_guard, blm_hist_guard);
 
 	/* Init is complete so request enablement */
 	return i915_dpst_set_user_enable(dev, true);
diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 52937bf..c2cb9db 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -266,6 +266,7 @@ static const struct intel_device_info intel_valleyview_m_info = {
 	.display_mmio_offset = VLV_DISPLAY_BASE,
 	.has_fbc = 0, /* legal, last one wins */
 	.has_llc = 0, /* legal, last one wins */
+	.has_dpst = 1,
 	GEN_DEFAULT_PIPEOFFSETS,
 	CURSOR_OFFSETS,
 };
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 01fc8b1..dfac30c 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1357,6 +1357,12 @@ struct intel_pipe_crc {
 	wait_queue_head_t wq;
 };
 
+struct i915_dpst_registers {
+	uint32_t blm_hist_guard;
+	uint32_t blm_hist_ctl;
+	uint32_t blm_hist_bin;
+};
+
 struct drm_i915_private {
 	struct drm_device *dev;
 	struct kmem_cache *slab;
@@ -1478,6 +1484,7 @@ struct drm_i915_private {
 			u32 blc_adjustment;
 		} saved;
 		struct mutex ioctl_lock;
+		struct i915_dpst_registers reg;
 	} dpst;
 
 	/* PCH chipset type */
diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index de97e39..dd2c85a 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -1808,6 +1808,9 @@ static void valleyview_pipestat_irq_handler(struct drm_device *dev, u32 iir)
 		if (pipe_stats[pipe] & PIPE_CRC_DONE_INTERRUPT_STATUS)
 			i9xx_pipe_crc_irq_handler(dev, pipe);
 
+		if (pipe_stats[pipe] & PIPE_DPST_EVENT_STATUS)
+			i915_dpst_irq_handler(dev);
+
 		if (pipe_stats[pipe] & PIPE_FIFO_UNDERRUN_STATUS &&
 		    intel_set_cpu_fifo_underrun_reporting(dev, pipe, false))
 			DRM_ERROR("pipe %c underrun\n", pipe_name(pipe));
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 2bf6a84..3caaf24 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -2854,6 +2854,16 @@ enum punit_power_well {
 #define VLV_BLC_HIST_CTL(pipe) _PIPE(pipe, _VLV_BLC_HIST_CTL_A, \
 				     _VLV_BLC_HIST_CTL_B)
 
+#define _VLV_BLC_HIST_BIN_A (dev_priv->info.display_mmio_offset + 0x61264)
+#define _VLV_BLC_HIST_BIN_B (dev_priv->info.display_mmio_offset + 0x61364)
+#define VLV_BLC_HIST_BIN(pipe) _PIPE(pipe, _VLV_BLC_HIST_BIN_A, \
+				     _VLV_BLC_HIST_BIN_B)
+
+#define _VLV_BLC_HIST_GUARD_A (dev_priv->info.display_mmio_offset + 0x61268)
+#define _VLV_BLC_HIST_GUARD_B (dev_priv->info.display_mmio_offset + 0x61368)
+#define VLV_BLC_HIST_GUARD(pipe) _PIPE(pipe, _VLV_BLC_HIST_GUARD_A, \
+				     _VLV_BLC_HIST_GUARD_B)
+
 /* Backlight control */
 #define BLC_PWM_CTL2	(dev_priv->info.display_mmio_offset + 0x61250) /* 965+ only */
 #define   BLM_PWM_ENABLE		(1 << 31)
diff --git a/drivers/gpu/drm/i915/i915_suspend.c b/drivers/gpu/drm/i915/i915_suspend.c
index 065a7d6..72f57c4 100644
--- a/drivers/gpu/drm/i915/i915_suspend.c
+++ b/drivers/gpu/drm/i915/i915_suspend.c
@@ -191,8 +191,8 @@ static void i915_restore_vga(struct drm_device *dev)
 
 void i915_save_dpst_regs(struct drm_i915_private *dev_priv)
 {
-	dev_priv->regfile.saveBLM_HIST_GUARD = I915_READ(BLM_HIST_GUARD);
-	dev_priv->regfile.saveBLM_HIST_CTL = I915_READ(BLM_HIST_CTL);
+	dev_priv->regfile.saveBLM_HIST_GUARD = I915_READ(dev_priv->dpst.reg.blm_hist_guard);
+	dev_priv->regfile.saveBLM_HIST_CTL = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
 
 	/* Disable image enhancement table so we do not apply invalid
 	 * data when we resume */
@@ -201,8 +201,8 @@ void i915_save_dpst_regs(struct drm_i915_private *dev_priv)
 
 void i915_restore_dpst_regs(struct drm_i915_private *dev_priv)
 {
-	I915_WRITE(BLM_HIST_GUARD, dev_priv->regfile.saveBLM_HIST_GUARD);
-	I915_WRITE(BLM_HIST_CTL, dev_priv->regfile.saveBLM_HIST_CTL);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_guard, dev_priv->regfile.saveBLM_HIST_GUARD);
+	I915_WRITE(dev_priv->dpst.reg.blm_hist_ctl, dev_priv->regfile.saveBLM_HIST_CTL);
 }
 
 static void i915_save_display(struct drm_device *dev)
-- 
1.7.9.5

