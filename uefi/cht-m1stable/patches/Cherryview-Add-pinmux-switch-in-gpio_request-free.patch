From 0e0fb9cf3f50db8ccdba47652022b7a5d2a5382d Mon Sep 17 00:00:00 2001
From: zhengq <qi.zheng@intel.com>
Date: Mon, 10 Nov 2014 23:20:53 +0800
Subject: [PATCH] Cherryview: Add pinmux switch in gpio_request/free

Some drivers may have the requirements for pad mode change
on specific pins between GPIO mode and function mode. This
could be perfectly supported by complete pinctrl/mux driver
which is under development.
Before it completed, a simple way to support current requirements
is to add pinmux switch in gpio_request/free.
Calling gpio_request will set the pin to force GPIO mode.
Calling gpio_free will automatically disable force GPIO mode, let
the pad registers control the pad function.

Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1245
Change-Id: Ib6bb86bc3fa7d42fa0ddd2a3b1531e06d0ebfd9d
Signed-off-by: zhengq <qi.zheng@intel.com>
---
 drivers/pinctrl/pinctrl-cherryview.c | 21 ++++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

diff --git a/drivers/pinctrl/pinctrl-cherryview.c b/drivers/pinctrl/pinctrl-cherryview.c
index b646f4b..57aa1b1 100644
--- a/drivers/pinctrl/pinctrl-cherryview.c
+++ b/drivers/pinctrl/pinctrl-cherryview.c
@@ -767,16 +767,35 @@ static void chv_writel(u32 value, void __iomem *reg)
 static int chv_gpio_request(struct gpio_chip *chip, unsigned offset)
 {
 	struct chv_gpio *cg = to_chv_priv(chip);
+	void __iomem *reg = chv_gpio_reg(&cg->chip, offset, CV_PADCTRL0_REG);
+	u32 value;
 
 	if (cg->pad_info[offset].family < 0)
 		return -EINVAL;
 
+	dev_dbg(&cg->pdev->dev, "chv_gpio_request %d\n", offset);
+
+	/*change it to GPIO mode*/
+	value = chv_readl(reg) | CV_GPIO_EN;
+	chv_writel(value, reg);
+
 	return 0;
 }
 
 static void chv_gpio_free(struct gpio_chip *chip, unsigned offset)
 {
-	return;
+	struct chv_gpio *cg = to_chv_priv(chip);
+	void __iomem *reg = chv_gpio_reg(&cg->chip, offset, CV_PADCTRL0_REG);
+	u32 value;
+
+	if (cg->pad_info[offset].family < 0)
+		return;
+
+	dev_dbg(&cg->pdev->dev, "chv_gpio_free %d\n", offset);
+
+	/*clear GPIOEn bit to let Pad mode take effect*/
+	value = chv_readl(reg) & (~CV_GPIO_EN);
+	chv_writel(value, reg);
 }
 
 static void chv_update_irq_type(struct chv_gpio *cg, unsigned type,
-- 
1.9.1

