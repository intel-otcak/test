From 69fc9f4766045a5f2f2208ee2389a93bd4efe7c1 Mon Sep 17 00:00:00 2001
From: b883 <b883@borqs.com>
Date: Sun, 6 Sep 2015 15:20:45 +0800
Subject: [PATCH 1/4] [BT] Correct place of set_wake_locked()

set_wake_locked() shall be called in the
rfkill_ops callback
Also, use the correct con_id for the
different BT GPIO

Change-Id: Iced398a92de340f7f9255bd66218decc544bb970
Borig-Change-Id: I39847f70c98424480e0fbabf0563cbbef6e32c82
Reviewed-on: http://192.168.1.79/gerrit/13590
Reviewed-by: b571 <b571@borqs.com>
Signed-off-by: Marco Chiotti <marcox.chiotti@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-20208
Reviewed-on: https://android.intel.com:443/471652
---
 drivers/misc/bt_lpm/bt_lpm.c | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/drivers/misc/bt_lpm/bt_lpm.c b/drivers/misc/bt_lpm/bt_lpm.c
index 6cddaae..6a6074b 100644
--- a/drivers/misc/bt_lpm/bt_lpm.c
+++ b/drivers/misc/bt_lpm/bt_lpm.c
@@ -46,6 +46,8 @@ static bool int_handler_enabled;
 
 
 static void activate_irq_handler(void);
+static void set_wake_locked(int wake);
+
 
 struct bluetooth_low_power_mode {
 #ifndef DBG_DISABLE_BT_LOW_POWER
@@ -100,7 +102,7 @@ static int bt_lpm_acpi_probe(struct platform_device *pdev)
 	 */
 	dev_dbg(&pdev->dev, "ACPI specific probe\n");
 
-	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, NULL,
+	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "enable_bt",
 						gpio_enable_bt_acpi_idx);
 	bt_lpm.gpio_enable_bt = desc_to_gpio(bt_lpm_gpiod);
 	if (!gpio_is_valid(bt_lpm.gpio_enable_bt)) {
@@ -110,7 +112,7 @@ static int bt_lpm_acpi_probe(struct platform_device *pdev)
 	}
 
 #ifndef DBG_DISABLE_BT_LOW_POWER
-	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, NULL,
+	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "host_wake_bt",
 						gpio_wake_acpi_idx);
 	bt_lpm.gpio_wake = desc_to_gpio(bt_lpm_gpiod);
 	if (!gpio_is_valid(bt_lpm.gpio_wake)) {
@@ -119,7 +121,7 @@ static int bt_lpm_acpi_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, NULL,
+	bt_lpm_gpiod = gpiod_get_index(&pdev->dev, "bt_wake_host",
 						host_wake_acpi_idx);
 	bt_lpm.gpio_host_wake = desc_to_gpio(bt_lpm_gpiod);
 	if (!gpio_is_valid(bt_lpm.gpio_host_wake)) {
@@ -174,6 +176,8 @@ static int bt_lpm_rfkill_set_power(void *data, bool blocked)
 		gpio_set_value(bt_lpm.gpio_reset, 1);
 #else
 		gpio_set_value(bt_lpm.gpio_enable_bt, 1);
+		set_wake_locked(1);
+
 #endif
 		pr_debug("%s: turn BT on\n", __func__);
 	} else {
@@ -182,6 +186,7 @@ static int bt_lpm_rfkill_set_power(void *data, bool blocked)
 		gpio_set_value(bt_lpm.gpio_reset, 0);
 #else
 		gpio_set_value(bt_lpm.gpio_enable_bt, 0);
+		set_wake_locked(0);
 #endif
 		pr_debug("%s: turn BT off\n", __func__);
 	}
@@ -221,8 +226,6 @@ static enum hrtimer_restart enter_lpm(struct hrtimer *timer)
 {
 	pr_debug("%s\n", __func__);
 
-	set_wake_locked(0);
-
 	return HRTIMER_NORESTART;
 }
 
@@ -273,6 +276,11 @@ static irqreturn_t host_wake_isr(int irq, void *dev)
 		return IRQ_HANDLED;
 	}
 
+	if (!bt_enabled) {
+		bt_lpm.host_wake = host_wake;
+		return IRQ_HANDLED;
+	}
+
 	update_host_wake_locked(host_wake);
 
 	return IRQ_HANDLED;
-- 
1.9.1

