From 031dcef064697e897a7ea4487716fc32f4859ab9 Mon Sep 17 00:00:00 2001
From: Sebastian Niciarz <sebastian.niciarz@intel.com>
Date: Fri, 20 Feb 2015 15:26:11 +0100
Subject: [PATCH] fdp_nfc: add ioctl to request platform clock via acpi

Change-Id: I68403a5d69c18d2913f04f4e1b6518a28cde8675
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1086
Signed-off-by: Sebastian Niciarz <sebastian.niciarz@intel.com>
---
 drivers/staging/fdp/fdp_custom.c  | 45 +++++++++++++++++++++++++++++++++++++++
 drivers/staging/fdp/fdp_main.c    |  4 ++++
 drivers/staging/fdp/fdp_main.h    |  2 ++
 include/linux/platform_data/fdp.h |  7 +++++-
 4 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/fdp/fdp_custom.c b/drivers/staging/fdp/fdp_custom.c
index e6c6849..4760061 100644
--- a/drivers/staging/fdp/fdp_custom.c
+++ b/drivers/staging/fdp/fdp_custom.c
@@ -279,6 +279,12 @@ int fdp_custom_open(struct inode *inode, struct file *filp)
 	/* Inform the chip that the stack is active */
 	fdp_update_stack_state(p_device, 1);
 
+	if (ACPI_HANDLE(&p_device->i2c_client->dev)) {
+		acpi_bus_set_power(
+				ACPI_HANDLE(&p_device->i2c_client->dev),
+				ACPI_STATE_D0);
+	}
+
  end:
 	mutex_unlock(&p_device->mutex);
 
@@ -439,6 +445,35 @@ long fdp_custom_ioctl_reset(struct file *filp, unsigned int cmd,
 }
 
 /**
+  * Processes the FIELDSPEAK_IOC_CLK_REQ ioctl
+  *
+  * @return 0 on success, a negative value on failure.
+  */
+
+long fdp_custom_ioctl_clk_req(struct file *filp, unsigned int cmd,
+				unsigned long enable)
+{
+	struct fdp_custom_device *p_device = filp->private_data;
+
+	ENTER();
+
+	if (!p_device) {
+		pr_err
+			("fdp_custom_ioctl_clk_req: p_device is missing\n");
+		return -ENODEV;
+	}
+
+	if (ACPI_HANDLE(&p_device->i2c_client->dev)) {
+		acpi_bus_set_power(
+				ACPI_HANDLE(&p_device->i2c_client->dev),
+				enable ? ACPI_STATE_D0 : ACPI_STATE_D3_COLD);
+		return 0;
+	}
+
+	return  -ENODEV;
+}
+
+/**
   * Process the poll()
   *
   * @return the poll status
@@ -491,6 +526,12 @@ int fdp_custom_release(struct inode *inode, struct file *filp)
 	/* Inform the chip the stack is no longer active */
 	fdp_update_stack_state(p_device, 0);
 
+	if (ACPI_HANDLE(&p_device->i2c_client->dev)) {
+		acpi_bus_set_power(
+				ACPI_HANDLE(&p_device->i2c_client->dev),
+				ACPI_STATE_D3_COLD);
+	}
+
 	/* Go back to PROBED state */
 	fdp_struct_cleanup(p_device);
 
@@ -682,6 +723,10 @@ static int fdp_acpi_probe(struct i2c_client *client,
 	pr_info("fdp_acpi_probe: max_i2c_xfer_size=%d\n",
 			fdp_dev->max_i2c_xfer_size);
 
+	acpi_bus_set_power(
+			ACPI_HANDLE(&client->dev),
+			ACPI_STATE_D3_COLD);
+
 	return 0;
 }
 
diff --git a/drivers/staging/fdp/fdp_main.c b/drivers/staging/fdp/fdp_main.c
index b1b11f3..d9f18a7 100644
--- a/drivers/staging/fdp/fdp_main.c
+++ b/drivers/staging/fdp/fdp_main.c
@@ -139,6 +139,10 @@ long fdp_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 		retval = fdp_custom_ioctl_reset(filp, cmd, arg);
 		break;
 
+	case FIELDSPEAK_IOC_CLK_REQ:
+		retval = fdp_custom_ioctl_clk_req(filp, cmd, arg);
+		break;
+
 	}
 
 	return retval;
diff --git a/drivers/staging/fdp/fdp_main.h b/drivers/staging/fdp/fdp_main.h
index b368ddb..8b75c40 100644
--- a/drivers/staging/fdp/fdp_main.h
+++ b/drivers/staging/fdp/fdp_main.h
@@ -48,5 +48,7 @@ ssize_t fdp_custom_write(struct file *filp, const char __user *buf,
 unsigned int fdp_custom_poll(struct file *filp, poll_table *wait);
 long fdp_custom_ioctl_reset(struct file *filp, unsigned int cmd,
 	unsigned long arg);
+long fdp_custom_ioctl_clk_req(struct file *filp, unsigned int cmd,
+	unsigned long arg);
 
 /* EOF */
diff --git a/include/linux/platform_data/fdp.h b/include/linux/platform_data/fdp.h
index 0062a48..af4e347 100644
--- a/include/linux/platform_data/fdp.h
+++ b/include/linux/platform_data/fdp.h
@@ -59,9 +59,14 @@
 
 #define FIELDSPEAK_IOC_RESET       _IO(FIELDSPEAK_IOC_MAGIC, 0)
 
+/**
+  * FIELDSPEAK_IOC_CLK_REQ is used to trigger NFC ref clock
+  * request to the platform.
+  */
 
-#define FIELDSPEAK_MAX_IOCTL_VALUE   0
+#define FIELDSPEAK_IOC_CLK_REQ     _IO(FIELDSPEAK_IOC_MAGIC, 1)
 
+#define FIELDSPEAK_MAX_IOCTL_VALUE   1
 
 /* NFC controller (FDP) GPIOs */
 #define NFC_RESET_GPIO               0
-- 
1.9.1

