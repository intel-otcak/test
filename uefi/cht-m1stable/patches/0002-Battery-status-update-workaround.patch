From 3c59e086a1ec55f0b9b34d23adadb0a9567ce5cf Mon Sep 17 00:00:00 2001
From: Hakan Englund <hakan.englund@intel.com>
Date: Thu, 19 Jun 2014 10:11:21 +0200
Subject: [PATCH 2/3] Battery status update workaround

Plugging or unplugging the power charger reults in the battery
reporting "status unknown" for a short period of time after the
plugin/plugout. If user space reads the result before the value has
been properly updated to charging/discharging, user space will
indicate status unknown. In Android, where healtd reads from sysfs,
this may take as long as 60 seconds. This patch adds a delay of 1.5
seconds before the kernel sends the event to userspace, in that time,
the battery is returning the proper values.

Issue: GMIN-1689
Change-Id: I7365add5b89e202f6f84906e2692b53acc69c5a3
Signed-off-by: Hakan Englund <hakan.englund@intel.com>
---
 drivers/power/power_supply_core.c | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/drivers/power/power_supply_core.c b/drivers/power/power_supply_core.c
index cb13224..5d23976 100644
--- a/drivers/power/power_supply_core.c
+++ b/drivers/power/power_supply_core.c
@@ -19,6 +19,8 @@
 #include <linux/err.h>
 #include <linux/power_supply.h>
 #include <linux/thermal.h>
+#include <linux/dmi.h>
+#include <linux/delay.h>
 #include "power_supply.h"
 #include "power_supply_charger.h"
 
@@ -29,6 +31,8 @@ EXPORT_SYMBOL_GPL(power_supply_class);
 ATOMIC_NOTIFIER_HEAD(power_supply_notifier);
 EXPORT_SYMBOL_GPL(power_supply_notifier);
 
+static int ac_sleep_before_sending_event_ms;
+
 static struct device_type power_supply_dev_type;
 
 static struct mutex ps_chrg_evt_lock;
@@ -93,6 +97,8 @@ static void power_supply_changed_work(struct work_struct *work)
 				      __power_supply_changed_work);
 		power_supply_trigger_charging_handler(psy);
 		power_supply_update_leds(psy);
+		if (ac_sleep_before_sending_event_ms > 0)
+			msleep(ac_sleep_before_sending_event_ms);
 		atomic_notifier_call_chain(&power_supply_notifier,
 				PSY_EVENT_PROP_CHANGED, psy);
 		kobject_uevent(&psy->dev->kobj, KOBJ_CHANGE);
@@ -615,6 +621,23 @@ static void psy_unregister_cooler(struct power_supply *psy)
 }
 #endif
 
+static int intel_ac_quirk(const struct dmi_system_id *d)
+{
+	ac_sleep_before_sending_event_ms = 1500;
+	return 0;
+}
+
+static struct dmi_system_id charger_dmi_table[] = {
+	{
+	.callback = intel_ac_quirk,
+	.ident = "broadwell",
+	.matches = {
+		DMI_MATCH(DMI_PRODUCT_NAME, "Broadwell Client platform"),
+	},
+	},
+	{},
+};
+
 int power_supply_register(struct device *parent, struct power_supply *psy)
 {
 	struct device *dev;
@@ -673,6 +696,8 @@ int power_supply_register(struct device *parent, struct power_supply *psy)
 
 	power_supply_changed(psy);
 
+	dmi_check_system(charger_dmi_table);
+
 	goto success;
 
 charger_register_failed:
-- 
2.0.0

