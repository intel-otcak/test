From aa2af3d45e83557337334c9458046108e4525b23 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 14 Jan 2015 15:59:11 -0800
Subject: [PATCH 5/5] ov2680/ov5648: gminification

Update to gmin platform API.

Properly wrap VCM options to prevent inter-module dependencies.

Swap H_FLIP setting on ov5648 to correct mirroring problem.

Don't clobber the sensor name in ov2680.c: this value is used by the
HAL to select CPF configuration files and must be the same as the
driver name per current convention.  I don't know how this ever
worked.

Disable exposure control on both sensors because existing tuning is
broken and blocks QA.  A separate build will be provided for initial
tuning.

Change-Id: I14ccd2152e8bac01c1cd16e90b36d390e2a1b2f5
Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 drivers/media/i2c/atomisp/Kconfig  |  48 ++++++++++++--
 drivers/media/i2c/atomisp/Makefile |   9 ++-
 drivers/media/i2c/atomisp/ov2680.c | 113 +++++++++++++++++++++++++++-----
 drivers/media/i2c/atomisp/ov2680.h |   1 -
 drivers/media/i2c/atomisp/ov5648.c | 130 ++++++++++++++++++++++++++++---------
 drivers/media/i2c/atomisp/ov5648.h |  11 ++--
 6 files changed, 251 insertions(+), 61 deletions(-)

diff --git a/drivers/media/i2c/atomisp/Kconfig b/drivers/media/i2c/atomisp/Kconfig
index 3d37ff5..6315ed5 100644
--- a/drivers/media/i2c/atomisp/Kconfig
+++ b/drivers/media/i2c/atomisp/Kconfig
@@ -1,17 +1,51 @@
 config VIDEO_GC0310
-       tristate "GC0310 sensor support"
-       depends on I2C && VIDEO_V4L2
-       ---help---
+	tristate "GC0310 sensor support"
+        depends on I2C && VIDEO_V4L2
+        ---help---
          This is a Video4Linux2 sensor-level driver for the Galaxycore
          GC0310 0.3MP sensor.
 
+config VIDEO_GC2155
+	tristate "GC2155 sensor support"
+        depends on I2C && VIDEO_V4L2
+        ---help---
+         This is a Video4Linux2 sensor-level driver for the Galaxycore
+         GC2155 0.3MP sensor.
+
+config VCM_DW9714
+       tristate "VCM dw9714 support"
+       depends on I2C && VIDEO_V4L2
+       ---help---
+         This is a Video4Linux2 sensor-level driver for the dw9714.
+
          It currently only works with the atomisp driver.
 
-config VIDEO_GC2155
-       tristate "GC2155 sensor support"
+config VCM_WV511
+       tristate "VCM wv511 support"
        depends on I2C && VIDEO_V4L2
        ---help---
-         This is a Video4Linux2 sensor-level driver for the Galaxycore
-         GC2155 2MP sensor.
+         This is a Video4Linux2 sensor-level driver for the wv511.
+
+         It currently only works with the atomisp driver.
+	
+config VIDEO_OV2680
+       tristate "Omnivision OV2680 sensor support"
+       depends on I2C && VIDEO_V4L2
+       ---help---
+         This is a Video4Linux2 sensor-level driver for the Omnivision
+         OV2680 raw camera.
+
+         ov2680 is a 2M raw sensor.
+
+         It currently only works with the atomisp driver.
+
+config VIDEO_OV5648
+       tristate "Omnivision OV5648 sensor support"
+       depends on I2C && VIDEO_V4L2
+       ---help---
+         This is a Video4Linux2 sensor-level driver for the Omnivision
+         OV5648 raw camera.
+
+         ov5648 is a 5M raw sensor.
 
          It currently only works with the atomisp driver.
diff --git a/drivers/media/i2c/atomisp/Makefile b/drivers/media/i2c/atomisp/Makefile
index 4b5a9d7..4c3e4f9 100644
--- a/drivers/media/i2c/atomisp/Makefile
+++ b/drivers/media/i2c/atomisp/Makefile
@@ -1,2 +1,7 @@
-obj-$(CONFIG_VIDEO_GC0310) += gc0310.o
-obj-$(CONFIG_VIDEO_GC2155) += gc2155.o
+obj-$(CONFIG_VIDEO_OV5648)     += ov5648.o
+obj-$(CONFIG_VIDEO_OV2680)     += ov2680.o
+obj-$(CONFIG_VIDEO_GC2155)     += gc2155.o
+obj-$(CONFIG_VIDEO_GC0310)     += gc0310.o
+
+obj-$(CONFIG_VCM_WV511)      += wv511.o
+obj-$(CONFIG_VCM_DW9714)     += dw9714.o
diff --git a/drivers/media/i2c/atomisp/ov2680.c b/drivers/media/i2c/atomisp/ov2680.c
index 9102805..910b31a 100644
--- a/drivers/media/i2c/atomisp/ov2680.c
+++ b/drivers/media/i2c/atomisp/ov2680.c
@@ -34,12 +34,13 @@
 #include <linux/gpio.h>
 #include <linux/moduleparam.h>
 #include <media/v4l2-device.h>
-#include <media/v4l2-chip-ident.h>
 #include <linux/io.h>
+#include <linux/acpi.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #include "ov2680.h"
 
-#define ov2680_debug //dev_err
+#define ov2680_debug(...) //dev_err(__VA_ARGS__)
 static int h_flag = 0;
 static int v_flag = 0;
 static enum atomisp_bayer_order ov2680_bayer_order_mapping[] = {
@@ -530,7 +531,9 @@ static long ov2680_s_exposure(struct v4l2_subdev *sd,
 		v4l2_err(client, "%s: invalid value\n", __func__);
 		return -EINVAL;
 	}
-	return ov2680_set_exposure(sd, coarse_itg, analog_gain, digital_gain);
+
+	// EXPOSURE CONTROL DISABLED FOR INITIAL CHECKIN, TUNING DOESN'T WORK
+	return 0; // ov2680_set_exposure(sd, coarse_itg, analog_gain, digital_gain);
 }
 
 
@@ -876,6 +879,58 @@ static int ov2680_init(struct v4l2_subdev *sd)
 	return ret;
 }
 
+static int power_ctrl(struct v4l2_subdev *sd, bool flag)
+{
+	int ret = 0;
+	struct ov2680_device *dev = to_ov2680_sensor(sd);
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->power_ctrl)
+		return dev->platform_data->power_ctrl(sd, flag);
+
+	if (flag) {
+		ret |= dev->platform_data->v1p8_ctrl(sd, 1);
+		ret |= dev->platform_data->v2p8_ctrl(sd, 1);
+		usleep_range(10000, 15000);
+	}
+
+	if (!flag || ret) {
+		ret |= dev->platform_data->v1p8_ctrl(sd, 0);
+		ret |= dev->platform_data->v2p8_ctrl(sd, 0);
+	}
+	return ret;
+}
+
+static int gpio_ctrl(struct v4l2_subdev *sd, bool flag)
+{
+	int ret;
+	struct ov2680_device *dev = to_ov2680_sensor(sd);
+
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->gpio_ctrl)
+		return dev->platform_data->gpio_ctrl(sd, flag);
+
+	/* The OV2680 documents only one GPIO input (#XSHUTDN), but
+	 * existing integrations often wire two (reset/power_down)
+	 * because that is the way other sensors work.  There is no
+	 * way to tell how it is wired internally, so existing
+	 * firmwares expose both and we drive them symmetrically. */
+	if (flag) {
+		ret = dev->platform_data->gpio0_ctrl(sd, 1);
+		usleep_range(10000, 15000);
+		ret |= dev->platform_data->gpio1_ctrl(sd, 1);
+		usleep_range(10000, 15000);
+	} else {
+		ret = dev->platform_data->gpio1_ctrl(sd, 0);
+		ret |= dev->platform_data->gpio0_ctrl(sd, 0);
+	}
+	return ret;
+}
 
 static int power_up(struct v4l2_subdev *sd)
 {
@@ -890,7 +945,7 @@ static int power_up(struct v4l2_subdev *sd)
 	}
 
 	/* power control */
-	ret = dev->platform_data->power_ctrl(sd, 1);
+	ret = power_ctrl(sd, 1);
 	if (ret)
 		goto fail_power;
 
@@ -898,9 +953,9 @@ static int power_up(struct v4l2_subdev *sd)
 	usleep_range(5000, 6000);
 
 	/* gpio ctrl */
-	ret = dev->platform_data->gpio_ctrl(sd, 1);
+	ret = gpio_ctrl(sd, 1);
 	if (ret) {
-		ret = dev->platform_data->gpio_ctrl(sd, 1);
+		ret = gpio_ctrl(sd, 1);
 		if (ret)
 			goto fail_power;
 	}
@@ -916,9 +971,9 @@ static int power_up(struct v4l2_subdev *sd)
 	return 0;
 
 fail_clk:
-	dev->platform_data->gpio_ctrl(sd, 0);
+	gpio_ctrl(sd, 0);
 fail_power:
-	dev->platform_data->power_ctrl(sd, 0);
+	power_ctrl(sd, 0);
 	dev_err(&client->dev, "sensor power-up failed\n");
 
 	return ret;
@@ -943,15 +998,15 @@ static int power_down(struct v4l2_subdev *sd)
 		dev_err(&client->dev, "flisclk failed\n");
 
 	/* gpio ctrl */
-	ret = dev->platform_data->gpio_ctrl(sd, 0);
+	ret = gpio_ctrl(sd, 0);
 	if (ret) {
-		ret = dev->platform_data->gpio_ctrl(sd, 0);
+		ret = gpio_ctrl(sd, 0);
 		if (ret)
 			dev_err(&client->dev, "gpio failed 2\n");
 	}
 
 	/* power control */
-	ret = dev->platform_data->power_ctrl(sd, 0);
+	ret = power_ctrl(sd, 0);
 	if (ret)
 		dev_err(&client->dev, "vprog failed.\n");
 
@@ -1531,6 +1586,8 @@ static int ov2680_probe(struct i2c_client *client,
 {
 	struct ov2680_device *dev;
 	int ret;
+	void *pdata;
+
 	printk("++++ov2680_probe++++\n");
 	dev_info(&client->dev, "++++ov2680_probe++++\n");
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
@@ -1544,14 +1601,25 @@ static int ov2680_probe(struct i2c_client *client,
 	dev->fmt_idx = 0;
 	v4l2_i2c_subdev_init(&(dev->sd), client, &ov2680_ops);
 
-	snprintf(dev->sd.name, sizeof(dev->sd.name), "%s %d-%04x",client->name, i2c_adapter_id(client->adapter),client->addr);
+	if (ACPI_COMPANION(&client->dev))
+		pdata = gmin_camera_platform_data(&dev->sd,
+						  ATOMISP_INPUT_FORMAT_RAW_10,
+						  atomisp_bayer_order_bggr);
+	else
+		pdata = client->dev.platform_data;
 
-	if (client->dev.platform_data) {
-		ret = ov2680_s_config(&dev->sd, client->irq,
-				       client->dev.platform_data);
-		if (ret)
-			goto out_free;
-	}
+	if (!pdata) {
+		ret = -EINVAL;
+		goto out_free;
+        }
+
+	ret = ov2680_s_config(&dev->sd, client->irq, pdata);
+	if (ret)
+		goto out_free;
+
+	ret = atomisp_register_i2c_module(&dev->sd, pdata, RAW_CAMERA);
+	if (ret)
+		goto out_free;
 
 	dev->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
 	dev->pad.flags = MEDIA_PAD_FL_SOURCE;
@@ -1572,11 +1640,20 @@ out_free:
 	return ret;
 }
 
+static struct acpi_device_id ov2680_acpi_match[] = {
+	{"XXOV2680"},
+	{},
+};
+MODULE_DEVICE_TABLE(acpi, ov2680_acpi_match);
+
+
 MODULE_DEVICE_TABLE(i2c, ov2680_id);
 static struct i2c_driver ov2680_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = OV2680_NAME,
+		.acpi_match_table = ACPI_PTR(ov2680_acpi_match),
+
 	},
 	.probe = ov2680_probe,
 	.remove = ov2680_remove,
diff --git a/drivers/media/i2c/atomisp/ov2680.h b/drivers/media/i2c/atomisp/ov2680.h
index 4fec23a..b2267b0 100644
--- a/drivers/media/i2c/atomisp/ov2680.h
+++ b/drivers/media/i2c/atomisp/ov2680.h
@@ -29,7 +29,6 @@
 #include <linux/spinlock.h>
 #include <media/v4l2-subdev.h>
 #include <media/v4l2-device.h>
-#include <media/v4l2-chip-ident.h>
 #include <linux/v4l2-mediabus.h>
 #include <media/media-entity.h>
 
diff --git a/drivers/media/i2c/atomisp/ov5648.c b/drivers/media/i2c/atomisp/ov5648.c
index 602fccd..d4c6c36 100644
--- a/drivers/media/i2c/atomisp/ov5648.c
+++ b/drivers/media/i2c/atomisp/ov5648.c
@@ -35,16 +35,19 @@
 #include <linux/gpio.h>
 #include <linux/moduleparam.h>
 #include <media/v4l2-device.h>
-#include <media/v4l2-chip-ident.h>
 #include <linux/io.h>
+#include <linux/atomisp_gmin_platform.h>
 
 #include "ov5648.h"
 
-
 #define OV5648_DEBUG_EN 0
-#define ov5648_debug dev_dbg
-static int h_flag = 0;
-static int v_flag = 0;
+#define ov5648_debug(...) // dev_err(__VA_ARGS__)
+
+#define H_FLIP_DEFAULT 1
+#define V_FLIP_DEFAULT 0
+static int h_flag = H_FLIP_DEFAULT;
+static int v_flag = V_FLIP_DEFAULT;
+
 /* i2c read/write stuff */
 static int ov5648_read_reg(struct i2c_client *client,
 			   u16 data_length, u16 reg, u16 *val)
@@ -528,7 +531,8 @@ static long ov5648_s_exposure(struct v4l2_subdev *sd,
 		return -EINVAL;
 	}
 
-	return ov5648_set_exposure(sd, exp, gain, digitgain);
+	// EXPOSURE CONTROL DISABLED FOR INITIAL CHECKIN, TUNING DOESN'T WORK
+	return 0; // ov5648_set_exposure(sd, exp, gain, digitgain);
 }
 
 static long ov5648_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
@@ -657,12 +661,10 @@ int ov5648_t_vcm_timing(struct v4l2_subdev *sd, s32 value)
 
 static int ov5648_v_flip(struct v4l2_subdev *sd, s32 value)
 {
-	struct ov5648_device *dev = to_ov5648_sensor(sd);
-	struct camera_mipi_info *ov5648_info = NULL;
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	int ret;
 	u16 val;
-	u8 flip_flag;
+
 	ov5648_debug(&client->dev, "@%s: value:%d\n", __func__, value);
 	ret = ov5648_read_reg(client, OV5648_8BIT, OV5648_VFLIP_REG, &val);
 	if (ret)
@@ -681,12 +683,9 @@ static int ov5648_v_flip(struct v4l2_subdev *sd, s32 value)
 
 static int ov5648_h_flip(struct v4l2_subdev *sd, s32 value)
 {
-	struct ov5648_device *dev = to_ov5648_sensor(sd);
-	struct camera_mipi_info *ov5648_info = NULL;
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	int ret;
 	u16 val;
-	u8 flip_flag;
 	ov5648_debug(&client->dev, "@%s: value:%d\n", __func__, value);
 
 	ret = ov5648_read_reg(client, OV5648_8BIT, OV5648_HFLIP_REG, &val);
@@ -1315,6 +1314,57 @@ static int update_otp(struct v4l2_subdev *sd)
 
 #endif
 
+static int power_ctrl(struct v4l2_subdev *sd, bool flag)
+{
+	int ret = 0;
+	struct ov5648_device *dev = to_ov5648_sensor(sd);
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->power_ctrl)
+		return dev->platform_data->power_ctrl(sd, flag);
+
+	if (flag) {
+		ret |= dev->platform_data->v1p8_ctrl(sd, 1);
+		ret |= dev->platform_data->v2p8_ctrl(sd, 1);
+		usleep_range(10000, 15000);
+	}
+
+	if (!flag || ret) {
+		ret |= dev->platform_data->v1p8_ctrl(sd, 0);
+		ret |= dev->platform_data->v2p8_ctrl(sd, 0);
+	}
+	return ret;
+}
+
+static int gpio_ctrl(struct v4l2_subdev *sd, bool flag)
+{
+	int ret;
+	struct ov5648_device *dev = to_ov5648_sensor(sd);
+
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->gpio_ctrl)
+		return dev->platform_data->gpio_ctrl(sd, flag);
+
+	/* GPIO0 == "RESETB", GPIO1 == "PWDNB", named in opposite
+	 * senses but with the same behavior: both must be high for
+	 * the device to opperate */
+	if (flag) {
+		ret = dev->platform_data->gpio0_ctrl(sd, 1);
+		usleep_range(10000, 15000);
+		ret |= dev->platform_data->gpio1_ctrl(sd, 1);
+		usleep_range(10000, 15000);
+	} else {
+		ret = dev->platform_data->gpio1_ctrl(sd, 0);
+		ret |= dev->platform_data->gpio0_ctrl(sd, 0);
+	}
+	return ret;
+}
+
 static int power_up(struct v4l2_subdev *sd)
 {
 	struct ov5648_device *dev = to_ov5648_sensor(sd);
@@ -1329,7 +1379,7 @@ static int power_up(struct v4l2_subdev *sd)
 	}
 
 	/* power control */
-	ret = dev->platform_data->power_ctrl(sd, 1);
+	ret = power_ctrl(sd, 1);
 	if (ret)
 		goto fail_power;
 
@@ -1337,9 +1387,9 @@ static int power_up(struct v4l2_subdev *sd)
 	usleep_range(5000, 6000);
 
 	/* gpio ctrl */
-	ret = dev->platform_data->gpio_ctrl(sd, 1);
+	ret = gpio_ctrl(sd, 1);
 	if (ret) {
-		ret = dev->platform_data->gpio_ctrl(sd, 1);
+		ret = gpio_ctrl(sd, 1);
 		if (ret)
 			goto fail_power;
 	}
@@ -1355,9 +1405,9 @@ static int power_up(struct v4l2_subdev *sd)
 	return 0;
 
 fail_clk:
-	dev->platform_data->gpio_ctrl(sd, 0);
+	gpio_ctrl(sd, 0);
 fail_power:
-	dev->platform_data->power_ctrl(sd, 0);
+	power_ctrl(sd, 0);
 	dev_err(&client->dev, "sensor power-up failed\n");
 
 	return ret;
@@ -1369,8 +1419,8 @@ static int power_down(struct v4l2_subdev *sd)
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	int ret = 0;
 
-	h_flag = 0;
-	v_flag = 0;
+	h_flag = H_FLIP_DEFAULT;
+	v_flag = V_FLIP_DEFAULT;
 	dev_dbg(&client->dev, "@%s:\n", __func__);
 	if (NULL == dev->platform_data) {
 		dev_err(&client->dev,
@@ -1383,15 +1433,15 @@ static int power_down(struct v4l2_subdev *sd)
 		dev_err(&client->dev, "flisclk failed\n");
 
 	/* gpio ctrl */
-	ret = dev->platform_data->gpio_ctrl(sd, 0);
+	ret = gpio_ctrl(sd, 0);
 	if (ret) {
-		ret = dev->platform_data->gpio_ctrl(sd, 0);
+		ret = gpio_ctrl(sd, 0);
 		if (ret)
 			dev_err(&client->dev, "gpio failed 2\n");
 	}
 
 	/* power control */
-	ret = dev->platform_data->power_ctrl(sd, 0);
+	ret = power_ctrl(sd, 0);
 	if (ret)
 		dev_err(&client->dev, "vprog failed.\n");
 
@@ -1971,6 +2021,7 @@ static int ov5648_probe(struct i2c_client *client,
 {
 	struct ov5648_device *dev;
 	int ret;
+	void *pdata;
 
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
@@ -1985,17 +2036,31 @@ static int ov5648_probe(struct i2c_client *client,
 	dev->current_otp.otp_en = 1;// enable otp functions
 	v4l2_i2c_subdev_init(&(dev->sd), client, &ov5648_ops);
 
-	if (client->dev.platform_data) {
-		ret = ov5648_s_config(&dev->sd, client->irq,
-				       client->dev.platform_data);
-		if (ret)
-			goto out_free;
+	if (ACPI_COMPANION(&client->dev))
+		pdata = gmin_camera_platform_data(&dev->sd,
+						  ATOMISP_INPUT_FORMAT_RAW_10,
+						  atomisp_bayer_order_bggr);
+	else
+		pdata = client->dev.platform_data;
+
+	if (!pdata) {
+		ret = -EINVAL;
+		goto out_free;
 	}
-#ifdef CONFIG_VIDEO_WV511
+
+	ret = ov5648_s_config(&dev->sd, client->irq, pdata);
+	if (ret)
+		goto out_free;
+
+	ret = atomisp_register_i2c_module(&dev->sd, pdata, RAW_CAMERA);
+	if (ret)
+		goto out_free;
+
+#ifdef CONFIG_VCM_WV511
 	dev->vcm_driver = &ov5648_vcms[WV511];
 	dev->vcm_driver->init(&dev->sd);
 	dev_err(&client->dev, "CONFIG_VIDEO_WV511\n");
-#elif defined (CONFIG_VIDEO_DW9714)
+#elif defined (CONFIG_VCM_DW9714)
 		/*set default vcm driver*/
 	dev_info(&client->dev, "Set default VCM driver\n");
 	dev->vcm_driver = &ov5648_vcms[DW9714];
@@ -2018,11 +2083,18 @@ out_free:
 	return ret;
 }
 
+static struct acpi_device_id ov5648_acpi_match[] = {
+	{"XXOV5648"},
+	{},
+};
+MODULE_DEVICE_TABLE(acpi, ov5648_acpi_match);
+
 MODULE_DEVICE_TABLE(i2c, ov5648_id);
 static struct i2c_driver ov5648_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = OV5648_NAME,
+		.acpi_match_table = ACPI_PTR(ov5648_acpi_match),
 	},
 	.probe = ov5648_probe,
 	.remove = ov5648_remove,
diff --git a/drivers/media/i2c/atomisp/ov5648.h b/drivers/media/i2c/atomisp/ov5648.h
index 37404cd..8609bb4 100644
--- a/drivers/media/i2c/atomisp/ov5648.h
+++ b/drivers/media/i2c/atomisp/ov5648.h
@@ -30,10 +30,9 @@
 #include <linux/spinlock.h>
 #include <media/v4l2-subdev.h>
 #include <media/v4l2-device.h>
-#include <media/v4l2-chip-ident.h>
 #include <linux/v4l2-mediabus.h>
 #include <media/media-entity.h>
-
+#include <linux/acpi.h>
 #include <linux/atomisp_platform.h>
 
 #define OV5648_NAME		"ov5648"
@@ -754,8 +753,6 @@ static struct ov5648_resolution *ov5648_res = ov5648_res_preview;
 static int N_RES = N_RES_PREVIEW;
 //static int has_otp = -1;	/*0:has valid otp, 1:no valid otp */
 
-#define CONFIG_VIDEO_WV511
-//#define CONFIG_VIDEO_DW9714
 #define WV511  0x11
 #define DW9714 0x14
 #define VM149  0x49
@@ -793,6 +790,7 @@ extern int wv511_t_vcm_slew(struct v4l2_subdev *sd, s32 value);
 extern int wv511_t_vcm_timing(struct v4l2_subdev *sd, s32 value);
 
 struct ov5648_vcm ov5648_vcms[] = {
+#ifdef CONFIG_VCM_WV511
 	[WV511] = {
 		.power_up = wv511_vcm_power_up,
 		.power_down = wv511_vcm_power_down,
@@ -805,6 +803,8 @@ struct ov5648_vcm ov5648_vcms[] = {
 		.t_vcm_slew = wv511_t_vcm_slew,
 		.t_vcm_timing = wv511_t_vcm_timing,
 	},
+#endif
+#ifdef CONFIG_VCM_DW9714
 	[DW9714] = {
 		    .power_up = dw9714_vcm_power_up,
 		    .power_down = dw9714_vcm_power_down,
@@ -817,6 +817,8 @@ struct ov5648_vcm ov5648_vcms[] = {
 		    .t_vcm_slew = dw9714_t_vcm_slew,
 		    .t_vcm_timing = dw9714_t_vcm_timing,
 		    },
+#endif
+#if 0
 	[VM149] = {
 		   .power_up = vm149_vcm_power_up,
 		   .power_down = vm149_vcm_power_down,
@@ -829,6 +831,7 @@ struct ov5648_vcm ov5648_vcms[] = {
 		   .t_vcm_slew = vm149_t_vcm_slew,
 		   .t_vcm_timing = vm149_t_vcm_timing,
 		   },
+#endif
 };
 
 #endif
-- 
2.1.0

