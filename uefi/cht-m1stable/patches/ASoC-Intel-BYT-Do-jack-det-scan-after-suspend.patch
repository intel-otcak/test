From eda7e6ba1c72bb6a615996102ca8006a9c54efe9 Mon Sep 17 00:00:00 2001
From: "johan.bohlin" <johan.bohlin@intel.com>
Date: Wed, 19 Nov 2014 11:04:59 +0100
Subject: [PATCH 6/7] ASoC: Intel: BYT: Do jack-det scan after suspend

As we dont get any interrupt when headset is inserted
or unplugged while in suspend, we need to do a jack-det
scan in resume.

Issue: GMINL-3499

Change-Id: I2643a98f58910c9ae72c3ff65c57d25b7548fcfb
Signed-off-by: johan.bohlin <johan.bohlin@intel.com>
---
 sound/soc/intel/board/byt_cr_dpcm_rt5640.c |   25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/sound/soc/intel/board/byt_cr_dpcm_rt5640.c b/sound/soc/intel/board/byt_cr_dpcm_rt5640.c
index ae468f0..331a1e4 100644
--- a/sound/soc/intel/board/byt_cr_dpcm_rt5640.c
+++ b/sound/soc/intel/board/byt_cr_dpcm_rt5640.c
@@ -207,7 +207,8 @@ static inline bool byt_hs_inserted(struct byt_drvdata *drvdata)
 	return val;
 }
 
-static int byt_hs_jack_check(struct byt_drvdata *drvdata, bool is_recheck)
+static int byt_hs_jack_check(struct byt_drvdata *drvdata, bool is_recheck,
+							bool is_resume_check)
 {
 	struct snd_soc_jack *jack = &drvdata->jack;
 	struct snd_soc_codec *codec = jack->codec;
@@ -257,7 +258,7 @@ static int byt_hs_jack_check(struct byt_drvdata *drvdata, bool is_recheck)
 				jack->status &= ~SND_JACK_HEADPHONE;
 				pr_info("%s: Headphone removed.\n", __func__);
 			}
-		} else
+		} else if (!is_resume_check)
 			pr_warn("%s: Remove-interrupt while no accessory present!\n",
 					__func__);
 	}
@@ -277,7 +278,7 @@ static int byt_jack_interrupt(void *data)
 	mutex_lock(&drvdata->jack_mlock);
 	pr_debug("%s: Enter.\n", __func__);
 
-	status = byt_hs_jack_check(drvdata, false);
+	status = byt_hs_jack_check(drvdata, false, false);
 
 	mutex_unlock(&drvdata->jack_mlock);
 	return status;
@@ -293,7 +294,7 @@ static void byt_hs_jack_recheck(struct work_struct *work)
 	mutex_lock(&drvdata->jack_mlock);
 	pr_debug("%s: Enter.\n", __func__);
 
-	status = byt_hs_jack_check(drvdata, true);
+	status = byt_hs_jack_check(drvdata, true, false);
 	snd_soc_jack_report(jack, status, SND_JACK_HEADSET);
 
 	mutex_unlock(&drvdata->jack_mlock);
@@ -836,8 +837,24 @@ static int snd_byt_prepare(struct device *dev)
 
 static void snd_byt_complete(struct device *dev)
 {
+	struct platform_device *pdev = to_platform_device(dev);
+	struct snd_soc_card *soc_card = platform_get_drvdata(pdev);
+	struct byt_drvdata *drv = snd_soc_card_get_drvdata(soc_card);
+	int status;
+
 	pr_debug("%s: Enter.\n", __func__);
 
+	status = cancel_delayed_work_sync(&drv->hs_jack_recheck);
+	if (status)
+		pr_debug("%s: Delayed work cancelled!\n", __func__);
+
+	mutex_lock(&drv->jack_mlock);
+
+	status = byt_hs_jack_check(drv, false, true);
+	snd_soc_jack_report(&drv->jack, status, SND_JACK_HEADSET);
+
+	mutex_unlock(&drv->jack_mlock);
+
 	snd_soc_resume(dev);
 }
 
-- 
1.7.9.5

