From 68b210769fe8fa815eced3e09b6cd172bfaa74ec Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Thu, 30 Jul 2015 17:47:29 +0530
Subject: [PATCH] USBC_SrcPe: Changes for power role swap from source to sink.

Source policy engine is enabled for  power role swap to sink
by handling swap request and switch from src pe to sink pe.

Change-Id: I5cbf0999e28610c387b43dc8b535123e54b47674
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-14786
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
---
 drivers/usb/typec/pd/src_port_pe.c | 206 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 204 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/typec/pd/src_port_pe.c b/drivers/usb/typec/pd/src_port_pe.c
index c805bb63d313..c3ed3f0dc5fd 100644
--- a/drivers/usb/typec/pd/src_port_pe.c
+++ b/drivers/usb/typec/pd/src_port_pe.c
@@ -34,18 +34,24 @@
 #define log_err(format, ...) \
 	pr_err(LOG_TAG":%s:"format"\n", __func__, ##__VA_ARGS__)
 
-#define MAX_CMD_RETRY	10
+#define MAX_CMD_RETRY	50
 #define CMD_NORESPONCE_TIME	1 /* 4 Sec */
 
 #define VOLT_TO_SRC_CAP_DATA_OBJ(x)	(x / 50)
 #define CURRENT_TO_SRC_CAP_DATA_OBJ(x)	(x / 10)
 
+#define TYPEC_SENDER_RESPONSE_TIMER     30 /* min: 24mSec; max: 30mSec */
+#define TYPEC_PS_SRC_ON_TIMER		480 /* min: 390mSec; max: 480mSec */
+
 struct src_port_pe {
 	struct mutex pe_lock;
 	struct policy p;
 	int state;
+	struct completion srt_complete; /* sender response timer */
+	struct completion psso_complete; /* power supply source on timer */
 	struct power_cap pcap;
 	struct delayed_work start_comm;
+	struct work_struct msg_work;
 	int cmd_retry;
 };
 
@@ -126,6 +132,33 @@ static inline int src_pe_send_psrdy_cmd(struct src_port_pe *src_pe)
 				PD_CTRL_MSG_PS_RDY, PE_EVT_SEND_PS_RDY);
 }
 
+static int src_pe_handle_snk_source_off(struct src_port_pe *src_pe)
+{
+	mutex_lock(&src_pe->pe_lock);
+	src_pe->state = PE_PRS_SRC_SNK_SOURCE_OFF;
+	mutex_unlock(&src_pe->pe_lock);
+
+	return src_pe_send_psrdy_cmd(src_pe);
+}
+
+static int src_pe_handle_sink_transition_to_off(struct src_port_pe *src_pe)
+{
+	int ret = 0;
+
+	mutex_lock(&src_pe->pe_lock);
+	src_pe->state = PE_PRS_SRC_SNK_TRANSITION_TO_OFF;
+	mutex_unlock(&src_pe->pe_lock);
+
+	/* Pull-down CC (enable Rd) and Vbus 5V disable */
+	ret = policy_set_power_role(&src_pe->p, POWER_ROLE_SWAP);
+	if (ret < 0) {
+		log_err("Error in enabling sink %d\n", ret);
+		return ret;
+	}
+
+	return src_pe_handle_snk_source_off(src_pe);
+}
+
 static int
 src_pe_handle_gcrc(struct src_port_pe *src_pe, struct pd_packet *pkt)
 {
@@ -155,9 +188,23 @@ src_pe_handle_gcrc(struct src_port_pe *src_pe, struct pd_packet *pkt)
 		pe_notify_policy_status_changed(&src_pe->p,
 				POLICY_TYPE_SOURCE, src_pe->p.status);
 		break;
+	case PE_PRS_SRC_SNK_ACCEPT_PR_SWAP:
+		log_dbg("SRC_SNK_ACCEPT_PR_SWAP -> SRC_SNK_TRANSITION_TO_OFF");
+		schedule_work(&src_pe->msg_work);
+		break;
+	case PE_PRS_SRC_SNK_SEND_PR_SWAP:
+		/* work schedule after rcv good crc for PR_SWAP to
+		 * recevice Accept */
+		schedule_work(&src_pe->msg_work);
+		break;
+	case PE_PRS_SRC_SNK_SOURCE_OFF:
+		log_dbg("PE_PRS_SRC_SNK_SOURCE_OFF -> PE_SNK_STARTUP");
+		schedule_work(&src_pe->msg_work);
+		break;
 	default:
 		ret = -EINVAL;
 		log_info("GCRC received in wrong state=%d\n", src_pe->state);
+		break;
 	}
 
 	return ret;
@@ -179,6 +226,66 @@ static int src_pe_handle_request_cmd(struct src_port_pe *src_pe)
 	return -EINVAL;
 }
 
+static int src_pe_pr_swap_ok(struct src_port_pe *src_pe)
+{
+	if (src_pe->state != PE_PRS_SRC_SNK_EVALUATE_PR_SWAP)
+		return -EINVAL;
+
+	mutex_lock(&src_pe->pe_lock);
+	src_pe->state = PE_PRS_SRC_SNK_ACCEPT_PR_SWAP;
+	mutex_unlock(&src_pe->pe_lock);
+	return src_pe_send_accept_cmd(src_pe);
+}
+
+static int src_pe_handle_pr_swap(struct src_port_pe *src_pe)
+{
+	enum pwr_role prole;
+	int ret;
+
+	prole = policy_get_power_role(&src_pe->p);
+	if (prole <= 0) {
+		log_err("Error in getting power role\n");
+		return -EINVAL;
+	}
+
+	if (prole == POWER_ROLE_SOURCE) {
+		/* As the request is to transition into consumer mode
+		 * should be accepted by default.
+		 */
+		mutex_lock(&src_pe->pe_lock);
+		src_pe->state = PE_PRS_SRC_SNK_EVALUATE_PR_SWAP;
+		src_pe->p.status = POLICY_STATUS_RUNNING;
+		mutex_unlock(&src_pe->pe_lock);
+		ret = src_pe_pr_swap_ok(src_pe);
+	} else {
+		log_info("Current Power Role - %d\n", prole);
+		ret = -ENOTSUPP;
+	}
+
+	return ret;
+}
+
+static int src_pe_rcv_request(struct policy *srcp, enum pe_event evt)
+{
+	struct src_port_pe *src_pe = container_of(srcp,
+					struct src_port_pe, p);
+
+	switch (evt) {
+	case PE_EVT_SEND_PR_SWAP:
+		mutex_lock(&src_pe->pe_lock);
+		src_pe->state = PE_PRS_SRC_SNK_SEND_PR_SWAP;
+		mutex_unlock(&src_pe->pe_lock);
+		policy_send_packet(&src_pe->p, NULL, 0,
+					PD_CTRL_MSG_PR_SWAP, evt);
+		break;
+	case PE_EVT_SEND_DR_SWAP:
+	default:
+		break;
+	}
+
+	return 0;
+}
+
 static int
 src_pe_rcv_pkt(struct policy *srcp, struct pd_packet *pkt, enum pe_event evt)
 {
@@ -186,6 +293,7 @@ src_pe_rcv_pkt(struct policy *srcp, struct pd_packet *pkt, enum pe_event evt)
 					struct src_port_pe, p);
 	int ret = 0;
 
+	log_dbg("%s evt %d\n", __func__, evt);
 	switch (evt) {
 	case PE_EVT_RCVD_GOODCRC:
 		ret = src_pe_handle_gcrc(src_pe, pkt);
@@ -193,6 +301,22 @@ src_pe_rcv_pkt(struct policy *srcp, struct pd_packet *pkt, enum pe_event evt)
 	case PE_EVT_RCVD_REQUEST:
 		ret = src_pe_handle_request_cmd(src_pe);
 		break;
+	case PE_EVT_RCVD_PR_SWAP:
+		if (src_pe->state != ERROR_RECOVERY) {
+			ret = src_pe_handle_pr_swap(src_pe);
+		} else {
+			log_err("State Machine is in Error Recovery Mode!\n");
+			ret = -EINVAL;
+		}
+		break;
+	case PE_EVT_RCVD_ACCEPT:
+		if (src_pe->state == PE_PRS_SRC_SNK_SEND_PR_SWAP)
+			complete(&src_pe->srt_complete);
+		break;
+	case PE_EVT_RCVD_PS_RDY:
+		if (src_pe->state == PE_PRS_SRC_SNK_SOURCE_OFF)
+			complete(&src_pe->psso_complete);
+		break;
 	default:
 		ret = -EINVAL;
 		log_info("Not proccessing the event=%d\n", evt);
@@ -218,6 +342,78 @@ int src_pe_rcv_cmd(struct policy *srcp, enum pe_event evt)
 	return ret;
 }
 
+static int src_pe_handle_after_prswap_sent(struct src_port_pe *src_pe)
+{
+	unsigned long timeout;
+	int ret;
+
+	/* Initialize and run SenderResponseTimer */
+	timeout = msecs_to_jiffies(TYPEC_SENDER_RESPONSE_TIMER);
+	/* unblock this once Accept msg received by checking the
+	 * cur_state */
+	ret = wait_for_completion_timeout(&src_pe->srt_complete, timeout);
+	if (ret == 0) {
+		log_err("SRT time expired Sending PD_CMD_HARD_RESET");
+		policy_send_packet(&src_pe->p, NULL, 0, PD_CMD_HARD_RESET,
+					PE_EVT_SEND_HARD_RESET);
+		goto error;
+	}
+	ret = src_pe_handle_sink_transition_to_off(src_pe);
+
+error:
+	reinit_completion(&src_pe->srt_complete);
+	return ret;
+}
+static int src_pe_snk_source_off_waitfor_psrdy(struct src_port_pe *src_pe)
+{
+	unsigned long timeout;
+	int ret;
+
+	/* Initialize and run PSSourceOnTimer */
+	timeout = msecs_to_jiffies(TYPEC_PS_SRC_ON_TIMER);
+	/* unblock this once PS_Ready msg received by checking the
+	 * cur_state */
+	ret = wait_for_completion_timeout(&src_pe->psso_complete, timeout);
+	if (ret == 0) {
+		log_err("PSSO time expired Sending PD_CMD_HARD_RESET");
+		mutex_lock(&src_pe->pe_lock);
+		src_pe->cmd_retry = 0;
+		mutex_unlock(&src_pe->pe_lock);
+		schedule_delayed_work(&src_pe->start_comm, 0);
+		goto error;
+	}
+
+	/* RR Swap success, set role as sink and switch policy */
+	policy_set_power_role(&src_pe->p, POWER_ROLE_SINK);
+	log_dbg("Calling swith policy\n");
+	policy_switch_policy(&src_pe->p, POLICY_TYPE_SINK);
+error:
+	reinit_completion(&src_pe->psso_complete);
+	return ret;
+}
+
+static void src_pe_msg_worker(struct work_struct *work)
+{
+	struct src_port_pe *src_pe = container_of(work,
+					struct src_port_pe,
+					msg_work);
+
+	switch (src_pe->state) {
+	case PE_PRS_SRC_SNK_SEND_PR_SWAP:
+		src_pe_handle_after_prswap_sent(src_pe);
+		break;
+	case PE_PRS_SRC_SNK_ACCEPT_PR_SWAP:
+		src_pe_handle_sink_transition_to_off(src_pe);
+		break;
+	case PE_PRS_SRC_SNK_SOURCE_OFF:
+		src_pe_snk_source_off_waitfor_psrdy(src_pe);
+		break;
+	default:
+		log_err("Unknown state %d\n", src_pe->state);
+		break;
+	}
+}
+
 static void src_pe_start_comm(struct work_struct *work)
 {
 	struct src_port_pe *src_pe = container_of(work,
@@ -235,9 +431,9 @@ static void src_pe_start_comm(struct work_struct *work)
 	src_pe_send_srccap_cmd(src_pe);
 	mutex_lock(&src_pe->pe_lock);
 	src_pe->state = SRC_PE_STATE_SRCCAP_SENT;
+	src_pe->cmd_retry++;
 	mutex_unlock(&src_pe->pe_lock);
 
-	src_pe->cmd_retry++;
 	if (src_pe->cmd_retry < MAX_CMD_RETRY) {
 		log_dbg("Re-scheduling the start_comm after %dSec\n",
 				CMD_NORESPONCE_TIME);
@@ -280,6 +476,8 @@ static int src_pe_stop_policy_engine(struct policy *p)
 	p->status = POLICY_STATUS_UNKNOWN;
 	src_pe_reset_policy_engine(src_pe);
 	cancel_delayed_work(&src_pe->start_comm);
+	reinit_completion(&src_pe->srt_complete);
+	reinit_completion(&src_pe->psso_complete);
 	policy_set_pd_state(p, false);
 	src_pe->cmd_retry = 0;
 	mutex_unlock(&src_pe->pe_lock);
@@ -309,6 +507,7 @@ struct policy *src_pe_init(struct policy_engine *pe)
 
 	mutex_init(&src_pe->pe_lock);
 	INIT_DELAYED_WORK(&src_pe->start_comm, src_pe_start_comm);
+	INIT_WORK(&src_pe->msg_work, src_pe_msg_worker);
 
 	p = &src_pe->p;
 	p->type = POLICY_TYPE_SOURCE;
@@ -317,10 +516,13 @@ struct policy *src_pe_init(struct policy_engine *pe)
 
 	p->pe = pe;
 	p->rcv_pkt = src_pe_rcv_pkt;
+	p->rcv_request = src_pe_rcv_request;
 	p->rcv_cmd = src_pe_rcv_cmd;
 	p->start = src_pe_start_policy_engine;
 	p->stop = src_pe_stop_policy_engine;
 	p->exit = src_pe_exit;
+	init_completion(&src_pe->srt_complete);
+	init_completion(&src_pe->psso_complete);
 
 	log_info("Source pe initialized successfuly");
 
-- 
1.9.1

