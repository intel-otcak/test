From d560e7d226475093097b76ac10761bd93d9a2be2 Mon Sep 17 00:00:00 2001
Message-Id: <d560e7d226475093097b76ac10761bd93d9a2be2.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Mon, 15 Jul 2013 16:50:34 +0530
Subject: [PATCH 035/312] REVERTME [VPG]: drm/i915: Adding an ioctl for
 set/reset plane's alpha

IOCTL for setting/resetting a plane's alpha. This ioctl takes the plane ID
and alpha ON/OFF so that the corresponding plane control register is set
appropriately.

Conflicts:
	drivers/gpu/drm/i915/intel_sprite.c

Issue: APDEV-1166
Change-Id: Iff8eb56b7010e52066d1912ae66bddc0b34045c0
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
Reviewed-on: http://android.intel.com:8080/116276
Reviewed-by: Kumar, Shobhit <shobhit.kumar@intel.com>
Tested-by: Sun, Hang L <hang.l.sun@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Signed-off-by: A.Sunil Kamath <sunil.kamath@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c     |    2 +
 drivers/gpu/drm/i915/i915_drv.h     |    2 +
 drivers/gpu/drm/i915/i915_reg.h     |    2 +
 drivers/gpu/drm/i915/intel_sprite.c |  161 +++++++++++++++++++++++++++++++++++
 include/uapi/drm/i915_drm.h         |   17 ++++
 5 files changed, 184 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 28fd4c6..1c21ff6 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -2027,6 +2027,8 @@ const struct drm_ioctl_desc i915_ioctls[] = {
 	DRM_IOCTL_DEF_DRV(I915_GEM_ACCESS_USERDATA, i915_gem_access_userdata,
 							DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_SET_CSC, intel_configure_csc, DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(I915_SET_PLANE_ALPHA, i915_set_plane_alpha, \
+							DRM_AUTH|DRM_UNLOCKED),
 };
 
 int i915_max_ioctl = ARRAY_SIZE(i915_ioctls);
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 9ad8d72..8a007cc5 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2620,6 +2620,8 @@ int i915_get_reset_stats_ioctl(struct drm_device *dev, void *data,
 			       struct drm_file *file);
 int i915_set_plane_180_rotation(struct drm_device *dev, void *data,
 		struct drm_file *file);
+int i915_set_plane_alpha(struct drm_device *dev, void *data,
+			  struct drm_file *file);
 int i915_enable_plane_reserved_reg_bit_2(struct drm_device *dev, void *data,
 					struct drm_file *file);
 
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index e8236ad..6192368 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4043,7 +4043,9 @@ enum punit_power_well {
 #define   DISPPLANE_RGBX101010			(0x8<<26)
 #define   DISPPLANE_RGBA101010			(0x9<<26)
 #define   DISPPLANE_BGRX101010			(0xa<<26)
+#define   DISPPLANE_BGRA101010			(0xb<<26)
 #define   DISPPLANE_RGBX161616			(0xc<<26)
+#define   DISPPLANE_RGBA161616			(0xd<<26)
 #define   DISPPLANE_RGBX888			(0xe<<26)
 #define   DISPPLANE_RGBA888			(0xf<<26)
 #define   DISPPLANE_STEREO_ENABLE		(1<<25)
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index ff9dcc1..480b0fa 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -137,6 +137,167 @@ static void intel_update_primary_plane(struct intel_crtc *crtc)
 		I915_WRITE(reg, I915_READ(reg) & ~DISPLAY_PLANE_ENABLE);
 }
 
+void
+__alpha_setting_noncursor(u32 pixformat, int plane, u32 *dspcntr, int alpha)
+{
+	/* For readability, can split to individual cases */
+	/* 5 no alphas, 6-9 common, a-d reserved for sprite, e-f common */
+	switch (pixformat) {
+	case DISPPLANE_RGBX888:
+	case DISPPLANE_RGBA888:
+		if (alpha)
+			*dspcntr |= DISPPLANE_RGBA888;
+		else
+			*dspcntr |= DISPPLANE_RGBX888;
+		break;
+	case DISPPLANE_BGRX888:
+	case DISPPLANE_BGRA888:
+		if (alpha)
+			*dspcntr |= DISPPLANE_BGRA888;
+		else
+			*dspcntr |= DISPPLANE_BGRX888;
+		break;
+	case DISPPLANE_RGBX101010:
+	case DISPPLANE_RGBA101010:
+		if (alpha)
+			*dspcntr |= DISPPLANE_RGBA101010;
+		else
+			*dspcntr |= DISPPLANE_RGBX101010;
+		break;
+	case DISPPLANE_BGRX101010:
+	case DISPPLANE_BGRA101010:
+		if (alpha)
+			*dspcntr |= DISPPLANE_BGRA101010;
+		else
+			*dspcntr |= DISPPLANE_BGRX101010;
+		break;
+	case DISPPLANE_RGBX161616:
+	case DISPPLANE_RGBA161616:
+		if ((plane == PLANEA) || (plane == PLANEB)) {
+			if (alpha)
+				*dspcntr |= DISPPLANE_RGBA161616;
+			else
+				*dspcntr |= DISPPLANE_RGBX161616;
+		}
+		break;
+	default:
+		DRM_ERROR("Unknown pixel format 0x%08x\n", pixformat);
+		break;
+	}
+}
+
+void
+__alpha_setting_cursor(u32 pixformat, int plane, u32 *dspcntr, int alpha)
+{
+	/* For readability, can split to individual cases */
+	switch (pixformat) {
+	case CURSOR_MODE_128_32B_AX:
+	case CURSOR_MODE_128_ARGB_AX:
+		if (alpha)
+			*dspcntr |= CURSOR_MODE_128_ARGB_AX;
+		else
+			*dspcntr |= CURSOR_MODE_128_32B_AX;
+		break;
+
+	case CURSOR_MODE_256_ARGB_AX:
+	case CURSOR_MODE_256_32B_AX:
+		if (alpha)
+			*dspcntr |= CURSOR_MODE_256_ARGB_AX;
+		else
+			*dspcntr |= CURSOR_MODE_256_32B_AX;
+		break;
+
+	case CURSOR_MODE_64_ARGB_AX:
+	case CURSOR_MODE_64_32B_AX:
+		if (alpha)
+			*dspcntr |= CURSOR_MODE_64_ARGB_AX;
+		else
+			*dspcntr |= CURSOR_MODE_64_32B_AX;
+		break;
+	default:
+		DRM_ERROR("Unknown pixel format:Cursor 0x%08x\n", pixformat);
+		break;
+	}
+}
+/*
+ * enable/disable alpha for planes
+ */
+int
+i915_set_plane_alpha(struct drm_device *dev, void *data, struct drm_file *file)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_i915_set_plane_alpha *alphadata = data;
+	int plane = alphadata->plane;
+	bool alpha = alphadata->alpha;
+	bool IsCursor = false;
+	u32 dspcntr;
+	u32 reg;
+	u32 pixformat;
+	u32 mask = DISPPLANE_PIXFORMAT_MASK;
+
+	DRM_DEBUG_DRIVER("In i915_set_plane_alpha\n");
+
+	switch (plane) {
+	case PLANEA:
+		reg = DSPCNTR(0);
+		break;
+	case PLANEB:
+		reg = DSPCNTR(1);
+		break;
+	case SPRITEA:
+		reg = SPCNTR(0, 0);
+		break;
+	case SPRITEB:
+		reg = SPCNTR(0, 1);
+		break;
+	case SPRITEC:
+		reg = SPCNTR(1, 0);
+		break;
+	case SPRITED:
+		reg = SPCNTR(1, 1);
+		break;
+	case CURSORA:
+		reg = CURCNTR(0);
+		mask = CURSOR_MODE;
+		IsCursor = true;
+		break;
+	case CURSORB:
+		reg = CURCNTR(1);
+		mask = CURSOR_MODE;
+		IsCursor = true;
+		break;
+	default:
+		DRM_ERROR("No plane selected properly\n");
+		return -EINVAL;
+	}
+
+	dspcntr = I915_READ(reg);
+	DRM_DEBUG_DRIVER("dspcntr = %x\n", dspcntr);
+
+	pixformat = dspcntr & mask;
+	dspcntr &= ~mask;
+	DRM_DEBUG_DRIVER("pixformat = %x, alpha = %x\n", pixformat, alpha);
+
+	if (pixformat) {
+		if (!IsCursor)
+			__alpha_setting_noncursor(pixformat, plane,
+						&dspcntr, alpha);
+		else
+			__alpha_setting_cursor(pixformat, plane,
+						&dspcntr, alpha);
+
+		DRM_DEBUG_DRIVER("Reg should be written with = %x\n", dspcntr);
+
+		if (pixformat != (dspcntr & mask)) {
+			I915_WRITE(reg, dspcntr);
+			DRM_DEBUG_DRIVER("Reg written with = %x\n", dspcntr);
+		}
+	} else
+		DRM_DEBUG_DRIVER("Plane might not be enabled/configured!\n");
+
+	return 0;
+}
+
 /*
  * enable/disable primary plane alpha channel based on the z-order
  */
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 9c3591c..bf2b20d 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -64,6 +64,15 @@
 				 * of chars for next/prev indices */
 #define I915_LOG_MIN_TEX_REGION_SIZE 14
 #define MAX_CSC_COEFFICIENTS 9
+#define PLANEA		1
+#define SPRITEA		2
+#define SPRITEB		3
+#define PLANEB		4
+#define SPRITEC		5
+#define SPRITED		6
+#define CURSORA		7
+#define CURSORB		8
+
 struct drm_intel_csc_params {
 	float   m_CSCCoeff[MAX_CSC_COEFFICIENTS];
 };
@@ -269,6 +278,7 @@ struct csc_coeff {
 #define DRM_I915_ENABLE_PLANE_RESERVED_REG_BIT_2	0x37
 #define DRM_I915_SET_CSC		0x39
 #define DRM_I915_GEM_ACCESS_USERDATA	0x3c
+#define DRM_I915_SET_PLANE_ALPHA	0x3d
 
 #define DRM_IOCTL_I915_INIT		DRM_IOW( DRM_COMMAND_BASE + DRM_I915_INIT, drm_i915_init_t)
 #define DRM_IOCTL_I915_FLUSH		DRM_IO ( DRM_COMMAND_BASE + DRM_I915_FLUSH)
@@ -323,6 +333,9 @@ struct csc_coeff {
 			struct drm_i915_set_plane_zorder)
 #define DRM_IOCTL_I915_GET_RESET_STATS		DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GET_RESET_STATS, struct drm_i915_reset_stats)
 #define DRM_IOCTL_I915_GEM_USERPTR			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_USERPTR, struct drm_i915_gem_userptr)
+#define DRM_IOCTL_I915_SET_PLANE_ALPHA		\
+			DRM_IOW(DRM_COMMAND_BASE + DRM_I915_SET_PLANE_ALPHA, \
+			struct drm_i915_set_plane_alpha)
 #define DRM_IOCTL_I915_SET_PLANE_180_ROTATION  \
 		DRM_IOW(DRM_COMMAND_BASE + DRM_I915_SET_PLANE_180_ROTATION, \
 		struct drm_i915_plane_180_rotation)
@@ -1157,4 +1170,8 @@ struct drm_i915_enable_plane_reserved_reg_bit_2 {
 	int crtc_id;
 };
 
+struct drm_i915_set_plane_alpha {
+	int plane;
+	int alpha;
+};
 #endif /* _UAPI_I915_DRM_H_ */
-- 
1.7.9.5

