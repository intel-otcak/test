From 0d9d1c50f396f987fa1f67f609aa07889bc1e5ad Mon Sep 17 00:00:00 2001
Message-Id: <0d9d1c50f396f987fa1f67f609aa07889bc1e5ad.1421808898.git.chang-joon.lee@intel.com>
In-Reply-To: <dcec99b5d6fee3bcdab208c48cae68cdc752e9d4.1421808898.git.chang-joon.lee@intel.com>
References: <dcec99b5d6fee3bcdab208c48cae68cdc752e9d4.1421808898.git.chang-joon.lee@intel.com>
From: Namrta <namrta.salonie@intel.com>
Date: Thu, 13 Nov 2014 20:58:53 +0530
Subject: [PATCH 5/5] FOR_UPSTREAM [VPG]: drm/i915: The WA BB framework is
 enabled.

This can be used to enable WA BB infrastructure for features like
RC6, SSEU and in between context save/restore etc.
The patch which would need WA BB will have to declare the wa_bb obj
utilizing the function here. Update the WA BB with required commands
and update the address of the WA BB at appropriate place.

Issue: GMINL-4115
Change-Id: I9cc49ae7426560215e7b6a6d10ba411caeb9321b
Signed-off-by: Namrta <namrta.salonie@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h  |    6 ++++++
 drivers/gpu/drm/i915/intel_lrc.c |   35 +++++++++++++++++++++++++++++++++++
 2 files changed, 41 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index aff4661..7e2a58bd 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2849,6 +2849,12 @@ void i915_gem_detect_bit_6_swizzle(struct drm_device *dev);
 void i915_gem_object_do_bit_17_swizzle(struct drm_i915_gem_object *obj);
 void i915_gem_object_save_bit_17_swizzle(struct drm_i915_gem_object *obj);
 
+/* intel_lrc.c */
+struct intel_ringbuffer *
+create_wa_bb(struct intel_context *ctx,
+		struct intel_engine_cs *ring,
+		uint32_t bb_size);
+
 /* i915_gem_debug.c */
 #if WATCH_LISTS
 int i915_verify_lists(struct drm_device *dev);
diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index 2f4be41..f28b0c5 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -2588,6 +2588,41 @@ cleanup_render_ring:
 	return ret;
 }
 
+struct intel_ringbuffer *
+create_wa_bb(struct intel_context *ctx,
+		struct intel_engine_cs *ring,
+		uint32_t bb_size)
+{
+	struct drm_device *dev = ring->dev;
+	struct intel_ringbuffer *ringbuf;
+	int ret;
+
+	ringbuf = kzalloc(sizeof(*ringbuf), GFP_KERNEL);
+	if (!ringbuf)
+		return NULL;
+
+	ringbuf->ring = ring;
+	ringbuf->FIXME_lrc_ctx = ctx;
+
+	ringbuf->size = roundup(bb_size, PAGE_SIZE);
+	ringbuf->effective_size = ringbuf->size;
+	ringbuf->head = 0;
+	ringbuf->tail = 0;
+	ringbuf->space = ringbuf->size;
+	ringbuf->last_retired_head = -1;
+
+	ret = intel_alloc_ringbuffer_obj(dev, ringbuf);
+	if (ret) {
+		DRM_DEBUG_DRIVER(
+		"Failed to allocate ringbuf obj for wa_bb%s: %d\n",
+		ring->name, ret);
+		kfree(ringbuf);
+		return NULL;
+	}
+
+	return ringbuf;
+}
+
 int intel_lr_context_render_state_init(struct intel_engine_cs *ring,
 				       struct intel_context *ctx)
 {
-- 
1.7.9.5

