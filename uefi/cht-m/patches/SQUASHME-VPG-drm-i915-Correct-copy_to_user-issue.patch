From 3776e25652f771122c4720d459f7506c98a47610 Mon Sep 17 00:00:00 2001
From: Emmanuel Berthier <emmanuel.berthier@intel.com>
Date: Wed, 29 Jun 2016 12:41:50 +0200
Subject: [PATCH 1/3] SQUASHME! [VPG]: drm/i915: Correct copy_to_user issue

copy_to_user and copy_from_user can generate faults if the user pages
are not currently mapped. It turns out that the read/write lock IPC
mechanism disables preemption while the locks are held which prevents
the page fault being handled, and triggering a panic.

The more or less equivalent mechanism rw_semaphore does not disable
preemption and can tolerate user page faults while the semaphore is held
so this patch directly translates the old read/write lock calls to
rw_semaphore semantics.

SQUASHME! - This patch should be squashed into the following existing
            patch:
    Change-Id: I05364d31c5b4d36807eb17b7f34d5a437df1958e
    Author: Minu <minu.mathai@intel.com>
    Date:   Tue Jan 5 14:59:25 2016 +0000
    MUST_REBASE [VPG]: drm/i915: Support for bo userdata

Change-Id: I4fdb497740d187b4c73b24abc333e873df073f24
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-35313
Signed-off-by: Emmanuel Berthier <emmanuel.berthier@intel.com>
Reviewed-on: https://android.intel.com:443/520187
(cherry picked from commit 6a98c493fc2caabb4911aae0d1ee1b0c43c3c2ee)
Reviewed-on: https://android.intel.com:443/522183
---
 drivers/gpu/drm/i915/i915_gem_userdata.c | 11 +++++------
 drivers/gpu/drm/i915/i915_gem_userdata.h |  4 ++--
 2 files changed, 7 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_userdata.c b/drivers/gpu/drm/i915/i915_gem_userdata.c
index e3cae14..fcd6088 100644
--- a/drivers/gpu/drm/i915/i915_gem_userdata.c
+++ b/drivers/gpu/drm/i915/i915_gem_userdata.c
@@ -26,7 +26,6 @@
  */
 #include <drm/drmP.h>
 #include <drm/i915_drm.h>
-#include <linux/spinlock.h>
 #include "i915_drv.h"
 
 static int
@@ -110,7 +109,7 @@ i915_gem_userdata(struct drm_device *dev,
 
 		userdata_blk->length = (u16)bytes;
 		userdata_blk->flags  = flags;
-		rwlock_init(&userdata_blk->lock);
+		init_rwsem(&userdata_blk->rwsem);
 
 		if (data) {
 			ret = copy_from_user(userdata_blk->data, data, bytes);
@@ -173,13 +172,13 @@ i915_gem_userdata(struct drm_device *dev,
 
 		stored_data = userdata_blk->data + offset;
 		if (set) {
-			write_lock(&userdata_blk->lock);
+			down_write(&userdata_blk->rwsem);
 			ret = copy_from_user(stored_data, data, bytes);
-			write_unlock(&userdata_blk->lock);
+			up_write(&userdata_blk->rwsem);
 		} else {
-			read_lock(&userdata_blk->lock);
+			down_read(&userdata_blk->rwsem);
 			ret = copy_to_user(data, stored_data, bytes);
-			read_unlock(&userdata_blk->lock);
+			up_read(&userdata_blk->rwsem);
 		}
 
 		if (ret != 0)
diff --git a/drivers/gpu/drm/i915/i915_gem_userdata.h b/drivers/gpu/drm/i915/i915_gem_userdata.h
index 7bd4b8f..4658e02 100644
--- a/drivers/gpu/drm/i915/i915_gem_userdata.h
+++ b/drivers/gpu/drm/i915/i915_gem_userdata.h
@@ -29,11 +29,11 @@
 #define _I915_GEM_USERDATA_H_
 
 #include <drm/drmP.h>
-#include <linux/spinlock.h>
+#include <linux/rwsem.h>
 #include <drm/i915_drm.h>
 
 struct i915_gem_userdata {
-	rwlock_t lock;
+	struct rw_semaphore rwsem;
 	u16      flags;
 	u16      length; /* In bytes */
 	u8       data[0];
-- 
1.9.1

