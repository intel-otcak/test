From d0f8b0f5a153669200d4fc284a000a2a10b07215 Mon Sep 17 00:00:00 2001
From: Jianxu Zheng <jian.xu.zheng@intel.com>
Date: Tue, 29 Jul 2014 16:22:22 +0800
Subject: [PATCH 167/176] atomisp2: wake up ov680 and ov8858 together in depth
 mode

due to the requirement from ov680 vendor,
driver have to stream on both sensors at the same time
to achieve the frame sync

Change-Id: Ic87dcbbb1dc38cec122702d6762b4e302f83abb3
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-8681
Signed-off-by: Jianxu Zheng <jian.xu.zheng@intel.com>
Signed-off-by: Jing SUN <jing.a.sun@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/27996
Reviewed-by: Soren Friis <soren.friis@intel.com>
Reviewed-by: Jukka O Kaartinen <jukka.o.kaartinen@intel.com>
Integrator: Wei Tao <wei.tao@intel.com>
Approver: Wei Tao <wei.tao@intel.com>
Build: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
Maintainer: Wei Tao <wei.tao@intel.com>
---
 .../pci/atomisp2/atomisp_driver/atomisp_ioctl.c    | 60 +++++++++++-----------
 1 file changed, 30 insertions(+), 30 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index 02fdf03..b434c70 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -1547,46 +1547,46 @@ static unsigned int atomisp_sensor_start_stream(struct atomisp_sub_device *asd)
 	else
 		return 1;
 }
-
 static int __stream_on_master_slave_sensor(struct atomisp_device *isp)
 {
-	unsigned int master[ATOM_ISP_MAX_INPUTS], stream_on[ATOM_ISP_MAX_INPUTS];
-	int i, k = 0, j = 0, ret = 0;
+	unsigned int master = -1, slave = -1;
+	int i, ret;
 
+	/*
+	 * ISP only support 2 streams now so ignore multiple master/slave
+	 * case to reduce the delay between 2 stream_on calls.
+	 */
 	for (i = 0; i < isp->num_of_streams; i++) {
 		int sensor_index = isp->asd[i].input_curr;
-		if (isp->inputs[sensor_index].camera_caps->sensor[isp->asd[i].sensor_curr].is_slave) {
-			ret = v4l2_subdev_call(isp->inputs[sensor_index].camera,
-					       video, s_stream, 1);
-			if (ret) {
-				dev_err(isp->dev, "depth mode sensor %s stream-on failed.\n",
-						isp->inputs[sensor_index].camera->name);
-				goto failed;
-			}
-			stream_on[k++] = sensor_index;
-		} else {
-			master[j++] = sensor_index;
-		}
+		if (isp->inputs[sensor_index].camera_caps->
+				sensor[isp->asd[i].sensor_curr].is_slave)
+			slave = sensor_index;
+		else
+			master = sensor_index;
 	}
-	for (j -= 1; j >= 0; j--) {
-		ret = v4l2_subdev_call(isp->inputs[master[j]].camera,
-				       video, s_stream, 1);
-		if (ret) {
-			dev_err(isp->dev, "depth mode sensor %s stream-on failed.\n",
-				isp->inputs[master[j]].camera->name);
-			goto failed;
-		}
-		stream_on[k++] = master[j];
+
+	if (master == -1 || slave == -1) {
+		dev_err(isp->dev, "depth mode needs 2 sensors to be selected.\n");
+		return -EINVAL;
 	}
 
-	return 0;
+	ret = v4l2_subdev_call(isp->inputs[master].camera, video, s_stream, 1);
+	if (ret) {
+		dev_err(isp->dev, "depth mode master sensor %s stream-on failed.\n",
+			isp->inputs[master].camera->name);
+		return -EINVAL;
+	}
+
+	ret = v4l2_subdev_call(isp->inputs[slave].camera, video, s_stream, 1);
+	if (ret) {
+		dev_err(isp->dev, "depth mode slave sensor %s stream-on failed.\n",
+			isp->inputs[slave].camera->name);
+		v4l2_subdev_call(isp->inputs[master].camera, video, s_stream, 0);
 
-failed:
-		atomisp_reset(isp);
-		for (k -= 1; k >= 0; k--)
-			v4l2_subdev_call(isp->inputs[k].camera,
-					 video, s_stream, 0);
 		return -EINVAL;
+	}
+
+	return 0;
 }
 /*
  * This ioctl start the capture during streaming I/O.
-- 
1.9.1

