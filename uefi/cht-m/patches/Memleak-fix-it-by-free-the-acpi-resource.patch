From 08d606f3e7acff1b880e1918ee1d3b1a49878131 Mon Sep 17 00:00:00 2001
From: zhengq <qi.zheng@intel.com>
Date: Tue, 31 Mar 2015 23:48:09 +0800
Subject: [PATCH] Memleak: fix it by free the acpi resource.

Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-27641
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1337
Change-Id: Ia07606b874dcf71c2f642dc66ba6bb0ae2db94a6
Signed-off-by: zhengq <qi.zheng@intel.com>
---
 drivers/i2c/busses/i2c-designware-platdrv.c | 24 ++++++++++++++++++------
 1 file changed, 18 insertions(+), 6 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 41b1fc62f361..c502bd403db0 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -95,16 +95,24 @@ dw_i2c_acpi_space_handler(u32 function, acpi_physical_address address,
 	u8 *buffer;
 	u32 accessor_type = function >> 16;
 	u8 addr = (u8)address;
+	acpi_status status;
 	struct i2c_msg msgs[2];
 
+	status = acpi_buffer_to_resource(info->connection, info->length, &ares);
+
+	if (ACPI_FAILURE(status))
+		return status;
 
-	acpi_buffer_to_resource(info->connection, info->length, &ares);
-	if (ares->type != ACPI_RESOURCE_TYPE_SERIAL_BUS)
+	if (ares->type != ACPI_RESOURCE_TYPE_SERIAL_BUS) {
+		ACPI_FREE(ares);
 		return AE_BAD_PARAMETER;
+	}
 
 	sb = &ares->data.i2c_serial_bus;
-	if (sb->type != ACPI_RESOURCE_SERIAL_TYPE_I2C)
+	if (sb->type != ACPI_RESOURCE_SERIAL_TYPE_I2C) {
+		ACPI_FREE(ares);
 		return AE_BAD_PARAMETER;
+	}
 
 	pr_debug("%s: Found I2C Resource type, addr %d\n",
 				__func__, sb->slave_address);
@@ -114,11 +122,14 @@ dw_i2c_acpi_space_handler(u32 function, acpi_physical_address address,
 	pr_debug("%s: access opeation region, addr 0x%x operation %d len %d\n",
 		__func__, addr, function, length);
 
-	if (!value64)
+	if (!value64) {
+		ACPI_FREE(ares);
 		return AE_BAD_PARAMETER;
-
-	if (length <= I2C_TRAN_HDR_SIZE)
+	}
+	if (length <= I2C_TRAN_HDR_SIZE) {
+		ACPI_FREE(ares);
 		return AE_OK;
+	}
 
 	function &= ACPI_IO_MASK; 
 	if (function == ACPI_READ) {
@@ -162,6 +173,7 @@ dw_i2c_acpi_space_handler(u32 function, acpi_physical_address address,
 //
 	}
 
+	ACPI_FREE(ares);
 	return AE_OK;
 }
 
-- 
2.1.0

