From 028da0f057fe252635c56dc52d9d14653f5dfe62 Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Mon, 7 Sep 2015 10:55:57 +0530
Subject: [PATCH] [EM/Charger]: Set bq24192_client value to null in case of
 probe fails

The bq24192_client global variable has value of i2c client struct.
When bq24192_charger driver's probe fails, this variable still holds
the value and client data has been set to null. So when using
bq24192_client to get the client causing  NULL pointer dereference
issue. To solve this issue assigning bq24192_client to NULL when probe
fails.

Change-Id: I9fc9efeb571be2a6f61b57915ef7410d675a90b4
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17822
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
---
 drivers/power/bq24192_charger.c | 37 +++++++++++++++++--------------------
 1 file changed, 17 insertions(+), 20 deletions(-)

diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index eae061c..5a4b5e8 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -2300,15 +2300,13 @@ static int bq24192_probe(struct i2c_client *client,
 	} else {
 #ifdef CONFIG_ACPI
 		if (!ACPI_HANDLE(dev)) {
-			i2c_set_clientdata(client, NULL);
-			kfree(chip);
-			return -ENODEV;
+			ret = -ENODEV;
+			goto error;
 		}
 		acpi_id = acpi_match_device(dev->driver->acpi_match_table, dev);
 		if (!acpi_id) {
-			i2c_set_clientdata(client, NULL);
-			kfree(chip);
-			return -ENODEV;
+			ret = -ENODEV;
+			goto error;
 		}
 
 		chip->pdata = (struct bq24192_platform_data *)
@@ -2319,8 +2317,8 @@ static int bq24192_probe(struct i2c_client *client,
 	}
 	if (!chip->pdata) {
 		dev_err(&client->dev, "pdata NULL!!\n");
-		kfree(chip);
-		return -EINVAL;
+		ret = -EINVAL;
+		goto error;
 	}
 	chip->pdata->chg_profile = (struct ps_batt_chg_prof *)
 				platform_byt_get_batt_charge_profile();
@@ -2351,9 +2349,8 @@ static int bq24192_probe(struct i2c_client *client,
 	ret = bq24192_get_chip_version(chip);
 	if (ret < 0) {
 		dev_err(&client->dev, "i2c read err:%d\n", ret);
-		i2c_set_clientdata(client, NULL);
-		kfree(chip);
-		return -EIO;
+		ret = -EIO;
+		goto error;
 	}
 
 	/*
@@ -2380,9 +2377,8 @@ static int bq24192_probe(struct i2c_client *client,
 		gpio = devm_gpiod_get_index(dev, "bq24192_int", 0);
 		if (IS_ERR(gpio)) {
 			dev_err(dev, "acpi gpio get index failed\n");
-			i2c_set_clientdata(client, NULL);
-			kfree(chip);
-			return PTR_ERR(gpio);
+			ret = PTR_ERR(gpio);
+			goto error;
 		} else {
 			ret = gpiod_direction_input(gpio);
 			if (ret < 0)
@@ -2462,9 +2458,7 @@ static int bq24192_probe(struct i2c_client *client,
 		ret = power_supply_register(&client->dev, &chip->usb);
 		if (ret) {
 			dev_err(&client->dev, "failed:power supply register\n");
-			i2c_set_clientdata(client, NULL);
-			kfree(chip);
-			return ret;
+			goto error;
 		}
 	}
 	/* Init Runtime PM State */
@@ -2476,9 +2470,7 @@ static int bq24192_probe(struct i2c_client *client,
 	if (ret < 0) {
 		dev_err(&client->dev, "debugfs create failed\n");
 		power_supply_unregister(&chip->usb);
-		i2c_set_clientdata(client, NULL);
-		kfree(chip);
-		return ret;
+		goto error;
 	}
 
 	/*
@@ -2517,6 +2509,11 @@ static int bq24192_probe(struct i2c_client *client,
 	}
 
 	return 0;
+error:
+	i2c_set_clientdata(client, NULL);
+	kfree(chip);
+	bq24192_client = NULL;
+	return ret;
 }
 
 static int bq24192_remove(struct i2c_client *client)
-- 
1.9.1

