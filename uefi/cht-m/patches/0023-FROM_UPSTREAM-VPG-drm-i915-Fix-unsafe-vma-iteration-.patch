From 814f5408cd7825446aae7f256e25d767df15595a Mon Sep 17 00:00:00 2001
Message-Id: <814f5408cd7825446aae7f256e25d767df15595a.1415245452.git.chang-joon.lee@intel.com>
In-Reply-To: <76203ad7c635d495ef3ec1e07b47bad9db4745ba.1415245452.git.chang-joon.lee@intel.com>
References: <76203ad7c635d495ef3ec1e07b47bad9db4745ba.1415245452.git.chang-joon.lee@intel.com>
From: Chris Wilson <chris@chris-wilson.co.uk>
Date: Wed, 3 Sep 2014 19:23:37 +0100
Subject: [PATCH 23/30] FROM_UPSTREAM [VPG]: drm/i915: Fix unsafe vma
 iteration in i915_drop_caches

When unbinding, there is a possibility that we drop the active reference
on the object, thereby freeing it. If that happens, we may destroy the
vm link as well as the object and vma. So iterate carefully.

Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
(cherry picked from commit 4ad72b7fadd285f849439cdbc408f8b847cef704)

Change-Id: Ife64046385a99543503027d6dd561bd49d52d412
Upstream-repo: git://anongit.freedesktop.org/drm-intel
Upstream-commit: 4ad72b7fadd285f849439cdbc408f8b847cef704
Upstream-as-of-tag: drm-intel-next-2014-09-05
For: GMINL-2586
For: VIZ-2020
Signed-off-by: Dave Gordon <david.s.gordon@intel.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c |   17 +++++++++++------
 1 file changed, 11 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index 7087aa8..4753e98 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -4636,8 +4636,6 @@ i915_drop_caches_set(void *data, u64 val)
 	struct drm_device *dev = data;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct drm_i915_gem_object *obj, *next;
-	struct i915_address_space *vm;
-	struct i915_vma *vma, *x;
 	int ret;
 
 	DRM_DEBUG("Dropping caches: 0x%08llx\n", val);
@@ -4658,16 +4656,23 @@ i915_drop_caches_set(void *data, u64 val)
 		i915_gem_retire_requests(dev);
 
 	if (val & DROP_BOUND) {
-		list_for_each_entry(vm, &dev_priv->vm_list, global_link) {
-			list_for_each_entry_safe(vma, x, &vm->inactive_list,
-						 mm_list) {
+		list_for_each_entry_safe(obj, next, &dev_priv->mm.bound_list,
+					 global_list) {
+			struct i915_vma *vma, *v;
+
+			ret = 0;
+			drm_gem_object_reference(&obj->base);
+			list_for_each_entry_safe(vma, v, &obj->vma_list, vma_link) {
 				if (vma->pin_count)
 					continue;
 
 				ret = i915_vma_unbind(vma);
 				if (ret)
-					goto unlock;
+					break;
 			}
+			drm_gem_object_unreference(&obj->base);
+			if (ret)
+				goto unlock;
 		}
 	}
 
-- 
1.7.9.5

