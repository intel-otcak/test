From 1fbe1dfe1a418795a7c3d7674538a2dd952818c7 Mon Sep 17 00:00:00 2001
Message-Id: <1fbe1dfe1a418795a7c3d7674538a2dd952818c7.1421709247.git.chang-joon.lee@intel.com>
In-Reply-To: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
References: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
From: Arun R Murthy <arun.r.murthy@intel.com>
Date: Thu, 9 Oct 2014 14:28:10 +0530
Subject: [PATCH 58/75] MUST_REBASE [VPG]: adf/intel/vlv: move computation
 part to validate

Move the calculation/computation part to validate and maintain only
write to the registers in the flip call.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-3547
Change-Id: I42cd2239ee2edc0cc748d387a4d81e168f6afda2
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
Signed-off-by: Deepak S <deepak.s@intel.com>
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
---
 drivers/video/adf/intel/core/vlv/vlv_pri_plane.c |   44 ++++---
 drivers/video/adf/intel/core/vlv/vlv_sp_plane.c  |  149 ++++++++++++----------
 2 files changed, 105 insertions(+), 88 deletions(-)

diff --git a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
index f2c04ee..c768e02 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
@@ -157,17 +157,10 @@ static void vlv_pri_resume(struct intel_dc_component *comp)
 	return;
 }
 
-static int vlv_pri_validate(struct intel_plane *plane,
-		struct intel_buffer *buf,
-		struct intel_plane_config *config)
-{
-	u32 format_config;
-	u8 bpp;
-	return get_format_config(buf->format, &format_config, &bpp);
-}
-
-/* Computes the linear offset to the base tile and adjusts x, y. bytes per pixel
-* is assumed to be a power-of-two. */
+/*
+ * Computes the linear offset to the base tile and adjusts x, y.
+ * bytes per pixel is assumed to be a power-of-two.
+ */
 unsigned long vlv_compute_page_offset(int *x, int *y,
 					unsigned int tiling_mode,
 					unsigned int cpp,
@@ -192,16 +185,16 @@ unsigned long vlv_compute_page_offset(int *x, int *y,
 	}
 }
 
-static void vlv_pri_flip(struct intel_plane *plane,
+static int vlv_pri_calculate(struct intel_plane *plane,
 		struct intel_buffer *buf,
 		struct intel_plane_config *config)
 {
 	struct vlv_pri_plane *pri_plane = to_vlv_pri_plane(plane);
 	struct pri_plane_regs_value *regs = &pri_plane->ctx.regs;
 	int src_x, src_y;
+	u32 pidx = pri_plane->ctx.plane;
 	u32 format_config = 0;
 	u8 bpp = 0;
-	u32 pidx = pri_plane->ctx.plane;
 	unsigned long dspaddr_offset;
 
 	get_format_config(buf->format, &format_config, &bpp);
@@ -213,25 +206,36 @@ static void vlv_pri_flip(struct intel_plane *plane,
 	regs->dspcntr |= DISPLAY_PLANE_ENABLE;
 	regs->dspcntr &= ~DISPPLANE_PIXFORMAT_MASK;
 	regs->dspcntr |= format_config;
-
 	if (buf->tiling_mode != I915_TILING_NONE)
 		regs->dspcntr |= DISPPLANE_TILED;
 	else
 		regs->dspcntr &= ~DISPPLANE_TILED;
-
 	regs->stride = buf->stride;
-
 	regs->linearoff = src_y * regs->stride + src_x * bpp;
-
 	dspaddr_offset = vlv_compute_page_offset(&src_x, &src_y,
 				buf->tiling_mode, bpp, regs->stride);
-
 	regs->linearoff -= dspaddr_offset;
-
 	regs->tileoff = (src_y << 16) | src_x;
-
 	regs->surfaddr = (buf->gtt_offset_in_pages + dspaddr_offset);
 
+	return 0;
+}
+
+static int vlv_pri_validate(struct intel_plane *plane,
+		struct intel_buffer *buf,
+		struct intel_plane_config *config)
+{
+	return vlv_pri_calculate(plane, buf, config);
+}
+
+static void vlv_pri_flip(struct intel_plane *plane,
+		struct intel_buffer *buf,
+		struct intel_plane_config *config)
+{
+	struct vlv_pri_plane *pri_plane = to_vlv_pri_plane(plane);
+	struct pri_plane_regs_value *regs = &pri_plane->ctx.regs;
+	u32 pidx = pri_plane->ctx.plane;
+
 	REG_WRITE(DSPCNTR(pidx), regs->dspcntr);
 	REG_WRITE(DSPSTRIDE(pidx), regs->stride);
 	REG_WRITE(DSPTILEOFF(pidx), regs->tileoff);
diff --git a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
index 85e9933..ef09dd6 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
@@ -230,6 +230,85 @@ static bool format_is_yuv(uint32_t format)
 	}
 }
 
+static int vlv_sp_calculate(struct intel_plane *planeptr,
+			    struct intel_buffer *buf,
+			    struct intel_plane_config *config)
+{
+	struct vlv_sp_plane *splane = to_vlv_sp_plane(planeptr);
+	int plane = splane->ctx.plane;
+	int pipe = splane->ctx.pipe;
+	int s1_zorder, s1_bottom, s2_zorder, s2_bottom;
+	int order = config->zorder & 0x000F;
+	struct sp_plane_regs_value *regs = &splane->ctx.regs;
+	u32 hw_format = 0;
+	u32 bpp = 0;
+	u32 sprctl;
+	u32 dst_w = (config->dst_w & VLV_SP_12BIT_MASK) - 1;
+	u32 dst_h = (config->dst_h & VLV_SP_12BIT_MASK) - 1;
+	u32 src_x = config->src_x & VLV_SP_12BIT_MASK;
+	u32 src_y = config->src_y & VLV_SP_12BIT_MASK;
+	u32 dst_x = config->dst_x & VLV_SP_12BIT_MASK;
+	u32 dst_y = config->dst_y & VLV_SP_12BIT_MASK;
+	unsigned long sprsurf_offset, linear_offset;
+
+	/* Z-order */
+	s1_zorder = (order >> 3) & 0x1;
+	s1_bottom = (order >> 2) & 0x1;
+	s2_zorder = (order >> 1) & 0x1;
+	s2_bottom = (order >> 0) & 0x1;
+
+	get_format_config(buf->format, &hw_format, &bpp);
+	sprctl = REG_READ(SPCNTR(pipe, plane));
+
+	if (plane == 0) {
+		if (s1_zorder)
+			sprctl |= SPRITE_ZORDER_ENABLE;
+		else
+			sprctl &= ~SPRITE_ZORDER_ENABLE;
+
+		if (s1_bottom)
+			sprctl |= SPRITE_FORCE_BOTTOM;
+		else
+			sprctl &= ~SPRITE_FORCE_BOTTOM;
+	} else {
+		if (s2_zorder)
+			sprctl |= SPRITE_ZORDER_ENABLE;
+		else
+			sprctl &= ~SPRITE_ZORDER_ENABLE;
+		if (s2_bottom)
+			sprctl |= SPRITE_FORCE_BOTTOM;
+		else
+			sprctl &= ~SPRITE_FORCE_BOTTOM;
+	}
+
+	/* Mask out pixel format bits in case we change it */
+	sprctl &= ~SP_PIXFORMAT_MASK;
+	sprctl &= ~SP_YUV_BYTE_ORDER_MASK;
+	sprctl &= ~SP_TILED;
+
+	sprctl |= hw_format;
+	sprctl |= SP_GAMMA_ENABLE;
+
+	if (buf->tiling_mode != I915_TILING_NONE)
+		sprctl |= SP_TILED;
+
+	sprctl |= SP_ENABLE;
+	regs->dspcntr = sprctl;
+
+	linear_offset = src_y * buf->stride + src_x * bpp;
+	sprsurf_offset = vlv_compute_page_offset(&src_x, &src_y,
+			buf->tiling_mode, bpp, buf->stride);
+	regs->linearoff = linear_offset - sprsurf_offset;
+
+	regs->stride = buf->stride;
+	regs->pos = ((dst_y << 16) | dst_x);
+	regs->tileoff = (src_y << 16) | src_x;
+	regs->size = (dst_h << 16) | dst_w;
+	regs->surfaddr = (buf->gtt_offset_in_pages + sprsurf_offset);
+
+	return 0;
+}
+
 static int vlv_sp_validate(struct intel_plane *plane, struct intel_buffer *buf,
 		struct intel_plane_config *config)
 {
@@ -319,82 +398,16 @@ static int vlv_sp_validate(struct intel_plane *plane, struct intel_buffer *buf,
 		return -EINVAL;
 	}
 
-	return 0;
+	return vlv_sp_calculate(plane, buf, config);
 }
 
 static void vlv_sp_flip(struct intel_plane *planeptr, struct intel_buffer *buf,
 			struct intel_plane_config *config)
 {
 	struct vlv_sp_plane *splane = to_vlv_sp_plane(planeptr);
+	struct sp_plane_regs_value *regs = &splane->ctx.regs;
 	int plane = splane->ctx.plane;
 	int pipe = splane->ctx.pipe;
-	struct sp_plane_regs_value *regs = &splane->ctx.regs;
-	int s1_zorder, s1_bottom, s2_zorder, s2_bottom;
-	int order = config->zorder & 0x000F;
-	u32 hw_format = 0;
-	u32 bpp = 0;
-	u32 sprctl;
-	u32 dst_w = (config->dst_w & VLV_SP_12BIT_MASK) - 1;
-	u32 dst_h = (config->dst_h & VLV_SP_12BIT_MASK) - 1;
-	u32 src_x = config->src_x & VLV_SP_12BIT_MASK;
-	u32 src_y = config->src_y & VLV_SP_12BIT_MASK;
-	u32 dst_x = config->dst_x & VLV_SP_12BIT_MASK;
-	u32 dst_y = config->dst_y & VLV_SP_12BIT_MASK;
-	unsigned long sprsurf_offset, linear_offset;
-
-	s1_zorder = (order >> 3) & 0x1;
-	s1_bottom = (order >> 2) & 0x1;
-	s2_zorder = (order >> 1) & 0x1;
-	s2_bottom = (order >> 0) & 0x1;
-
-	get_format_config(buf->format, &hw_format, &bpp);
-	sprctl = REG_READ(SPCNTR(pipe, plane));
-
-	if (plane == 0) {
-		if (s1_zorder)
-			sprctl |= SPRITE_ZORDER_ENABLE;
-		else
-			sprctl &= ~SPRITE_ZORDER_ENABLE;
-
-		if (s1_bottom)
-			sprctl |= SPRITE_FORCE_BOTTOM;
-		else
-			sprctl &= ~SPRITE_FORCE_BOTTOM;
-	} else {
-		if (s2_zorder)
-			sprctl |= SPRITE_ZORDER_ENABLE;
-		else
-			sprctl &= ~SPRITE_ZORDER_ENABLE;
-		if (s2_bottom)
-			sprctl |= SPRITE_FORCE_BOTTOM;
-		else
-			sprctl &= ~SPRITE_FORCE_BOTTOM;
-	}
-
-	/* Mask out pixel format bits in case we change it */
-	sprctl &= ~SP_PIXFORMAT_MASK;
-	sprctl &= ~SP_YUV_BYTE_ORDER_MASK;
-	sprctl &= ~SP_TILED;
-
-	sprctl |= hw_format;
-	sprctl |= SP_GAMMA_ENABLE;
-
-	if (buf->tiling_mode != I915_TILING_NONE)
-		sprctl |= SP_TILED;
-
-	sprctl |= SP_ENABLE;
-	regs->dspcntr = sprctl;
-
-	linear_offset = src_y * buf->stride + src_x * bpp;
-	sprsurf_offset = vlv_compute_page_offset(&src_x, &src_y,
-			buf->tiling_mode, bpp, buf->stride);
-	regs->linearoff = linear_offset - sprsurf_offset;
-
-	regs->stride = buf->stride;
-	regs->pos = ((dst_y << 16) | dst_x);
-	regs->tileoff = (src_y << 16) | src_x;
-	regs->size = (dst_h << 16) | dst_w;
-	regs->surfaddr = (buf->gtt_offset_in_pages + sprsurf_offset);
 
 	REG_WRITE(SPSTRIDE(pipe, plane), regs->stride);
 	REG_WRITE(SPPOS(pipe, plane), regs->pos);
-- 
1.7.9.5

