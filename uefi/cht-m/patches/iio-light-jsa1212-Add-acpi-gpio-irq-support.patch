From 1e8378a210fdb0c24d437fbad67fdf5050058bf1 Mon Sep 17 00:00:00 2001
From: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@intel.com>
Date: Fri, 9 May 2014 13:18:18 -0700
Subject: iio: light: jsa1212: Add acpi gpio irq support

This patch adds acpi gpio irq support for jsa1212
als/proximity sensor.
Also fixed the ACPI enumeration id issue.

Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@intel.com>
---
 drivers/iio/light/jsa1212.c |   61 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 60 insertions(+), 1 deletion(-)

diff --git a/drivers/iio/light/jsa1212.c b/drivers/iio/light/jsa1212.c
index 1d59402..137ec6e 100644
--- a/drivers/iio/light/jsa1212.c
+++ b/drivers/iio/light/jsa1212.c
@@ -24,6 +24,7 @@
 #include <linux/mutex.h>
 #include <linux/slab.h>
 #include <linux/acpi.h>
+#include <linux/gpio/consumer.h>
 
 #include <linux/iio/iio.h>
 #include <linux/iio/sysfs.h>
@@ -169,6 +170,7 @@ struct jsa1212_data {
 	u8 als_rng_idx;
 	unsigned long flags;
 	unsigned long state_flags; /* Caches chip state before suspend */
+	int gpio_irq;
 };
 
 /* ALS range idx to val mapping */
@@ -1067,6 +1069,7 @@ static int jsa1212_chip_init(struct jsa1212_data *data)
 	data->pxs_prst_val = JSA1212_INT_PXS_PRST_1CONV;
 	data->flags = 0x00;
 	data->als_rng_idx = JSA1212_ALS_RNG_0_2048;
+	data->gpio_irq = -1;
 
 	return 0;
 
@@ -1075,6 +1078,57 @@ chip_init_err:
 	return ret;
 }
 
+static int jsa1212_acpi_gpio_probe(struct i2c_client *client,
+				struct jsa1212_data *data)
+{
+	const struct acpi_device_id *id;
+	struct device *dev;
+	struct gpio_desc *gpio;
+	int ret;
+
+	if (!client)
+		return -EINVAL;
+
+	dev = &client->dev;
+
+	if (!ACPI_HANDLE(dev))
+		return -ENODEV;
+
+	id = acpi_match_device(dev->driver->acpi_match_table, dev);
+
+	if (!id)
+		return -ENODEV;
+
+	/* ALS/proximity event gpio interrupt pin */
+	gpio = devm_gpiod_get_index(dev, "jsa1212_int", 0);
+
+	if (IS_ERR(gpio)) {
+		dev_err(dev, "acpi gpio get index failed\n");
+		return PTR_ERR(gpio);
+	}
+
+	ret = gpiod_direction_input(gpio);
+
+	if (ret)
+		return ret;
+
+	ret = gpiod_to_irq(gpio);
+
+	if (ret < 0)
+		return ret;
+
+	data->gpio_irq = ret;
+
+	/* update client irq if invalid */
+	if (client->irq < 0)
+		client->irq = data->gpio_irq;
+
+	dev_dbg(dev, "gpio probe sucess gpio:%d irq:%d\n",
+				desc_to_gpio(gpio), data->gpio_irq);
+
+	return 0;
+}
+
 static int jsa1212_probe(struct i2c_client *client,
 			     const struct i2c_device_id *id)
 {
@@ -1107,7 +1161,12 @@ static int jsa1212_probe(struct i2c_client *client,
 	if (ret < 0)
 		return ret;
 
-	if (client->irq) {
+	ret = jsa1212_acpi_gpio_probe(client, jsa1212_data);
+
+	if (ret)
+		dev_info(&client->dev, "acpi gpio probe failed (%d)\n", ret);
+
+	if (client->irq > 0) {
 		indio_dev->info = &jsa1212_info;
 
 		ret = devm_request_threaded_irq(&client->dev, client->irq,
-- 
1.7.9.5

