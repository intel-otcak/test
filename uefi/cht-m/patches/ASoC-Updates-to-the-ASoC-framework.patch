From 92973557a825b4e964036b5c1493f89b13e12d72 Mon Sep 17 00:00:00 2001
From: "ola.lilja" <ola.lilja@intel.com>
Date: Thu, 15 May 2014 18:04:05 +0200
Subject: ASoC: Updates to the ASoC-framework

Issue: GMIN-481
Change-Id: Ic0f97bf8a8ba24983b79967ad0e494147f05c917
Signed-off-by: ola.lilja <ola.lilja@intel.com>
---
 include/sound/compress_driver.h     |    1 
 include/sound/effect_driver.h       |   59 +++++++++++++++++++++++++++++++++
 include/sound/intel_sst_ioctl.h     |   63 ++++++++++++++++++++++++++++++++++++
 include/sound/pcm.h                 |    1 
 include/sound/soc-dapm.h            |    5 ++
 include/sound/soc.h                 |   34 +++++++++++++++++++
 include/uapi/sound/effect_offload.h |   58 +++++++++++++++++++++++++++++++++
 sound/core/compress_offload.c       |    4 +-
 sound/core/control_compat.c         |    2 -
 sound/core/pcm_lib.c                |   14 ++++++--
 sound/core/pcm_native.c             |    6 +--
 sound/soc/Makefile                  |    4 ++
 sound/soc/soc-core.c                |   53 ++++++++++++++++++++++--------
 sound/soc/soc-dapm.c                |   50 ++++++++++++++++++++++++----
 sound/soc/soc-pcm.c                 |   35 +++++++++++++++++---
 15 files changed, 354 insertions(+), 35 deletions(-)
 create mode 100644 include/sound/effect_driver.h
 create mode 100644 include/sound/intel_sst_ioctl.h
 create mode 100644 include/uapi/sound/effect_offload.h

Index: b/include/sound/compress_driver.h
===================================================================
--- a/include/sound/compress_driver.h	2016-03-15 16:20:32.059824634 +0800
+++ b/include/sound/compress_driver.h	2016-03-15 16:20:32.047824540 +0800
@@ -157,6 +157,7 @@
 int snd_compress_deregister(struct snd_compr *device);
 int snd_compress_new(struct snd_card *card, int device,
 			int type, struct snd_compr *compr);
+int snd_compr_stop(struct snd_compr_stream *stream);
 
 /* dsp driver callback apis
  * For playback: driver should call snd_compress_fragment_elapsed() to let the
Index: b/include/sound/effect_driver.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/include/sound/effect_driver.h	2016-03-15 16:20:32.047824540 +0800
@@ -0,0 +1,59 @@
+/*
+ *  effect_driver.h - effect offload driver APIs
+ *
+ *  Copyright (C) 2013 Intel Corporation
+ *  Authors:	Vinod Koul <vinod.koul@intel.com>
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ */
+#ifndef __EFFECT_DRIVER_H
+#define __EFFECT_DRIVER_H
+
+#include <sound/effect_offload.h>
+
+struct snd_effect_ops {
+	int (*create)(struct snd_card *card, struct snd_effect *effect);
+	int (*destroy)(struct snd_card *card, struct snd_effect *effect);
+	int (*set_params)(struct snd_card *card,
+				struct snd_effect_params *params);
+	int (*get_params)(struct snd_card *card,
+				struct snd_effect_params *params);
+	int (*query_num_effects)(struct snd_card *card);
+	int (*query_effect_caps)(struct snd_card *card,
+					struct snd_effect_caps *caps);
+};
+
+#if IS_ENABLED(CONFIG_SND_EFFECTS_OFFLOAD)
+int snd_effect_register(struct snd_card *card, struct snd_effect_ops *ops);
+int snd_effect_deregister(struct snd_card *card);
+#else
+static inline int snd_effect_register(struct snd_card *card,
+					struct snd_effect_ops *ops)
+{
+	return -ENODEV;
+}
+static inline int snd_effect_deregister(struct snd_card *card)
+{
+	return -ENODEV;
+}
+#endif
+
+/* IOCTL fns */
+int snd_ctl_effect_create(struct snd_card *card, void *arg);
+int snd_ctl_effect_destroy(struct snd_card *card, void *arg);
+int snd_ctl_effect_set_params(struct snd_card *card, void *arg);
+int snd_ctl_effect_get_params(struct snd_card *card, void *arg);
+int snd_ctl_effect_query_num_effects(struct snd_card *card, void *arg);
+int snd_ctl_effect_query_effect_caps(struct snd_card *card, void *arg);
+#endif
Index: b/include/sound/intel_sst_ioctl.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/include/sound/intel_sst_ioctl.h	2016-03-15 16:20:32.047824540 +0800
@@ -0,0 +1,63 @@
+#ifndef __INTEL_SST_IOCTL_H__
+#define __INTEL_SST_IOCTL_H__
+/*
+ *  intel_sst_ioctl.h - Intel SST Driver for audio engine
+ *
+ *  Copyright (C) 2008-10 Intel Corporation
+ *  Authors:	Vinod Koul <vinod.koul@intel.com>
+ *		Harsha Priya <priya.harsha@intel.com>
+ *		Dharageswari R <dharageswari.r@intel.com>
+ *		KP Jeeja <jeeja.kp@intel.com>
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This file defines all sst ioctls
+ */
+
+/* codec and post/pre processing related info */
+
+#include <linux/types.h>
+
+/* Pre and post processing params structure */
+struct snd_ppp_params {
+	__u8			algo_id;/* Post/Pre processing algorithm ID  */
+	__u8			str_id;	/*Only 5 bits used 0 - 31 are valid*/
+	__u8			enable;	/* 0= disable, 1= enable*/
+	__u8			operation; /* 0 = set_algo, 1 = get_algo */
+	__u32			size;	/*Size of parameters for all blocks*/
+	void			*params;
+} __packed;
+
+struct snd_sst_driver_info {
+	__u32 max_streams;
+};
+
+struct snd_sst_tuning_params {
+	__u8 type;
+	__u8 str_id;
+	__u8 size;
+	__u8 rsvd;
+	__u64 addr;
+} __packed;
+
+/*IOCTL defined here */
+/*SST common ioctls */
+#define SNDRV_SST_DRIVER_INFO	_IOR('L', 0x10, struct snd_sst_driver_info)
+#define SNDRV_SST_SET_ALGO	_IOW('L', 0x30,  struct snd_ppp_params)
+#define SNDRV_SST_GET_ALGO	_IOWR('L', 0x31,  struct snd_ppp_params)
+#define SNDRV_SST_TUNING_PARAMS	_IOW('L', 0x32,  struct snd_sst_tuning_params)
+#endif /* __INTEL_SST_IOCTL_H__ */
Index: b/include/sound/pcm.h
===================================================================
--- a/include/sound/pcm.h	2016-03-15 16:20:32.059824634 +0800
+++ b/include/sound/pcm.h	2016-03-15 16:20:32.047824540 +0800
@@ -285,6 +285,7 @@
 	unsigned long hw_ptr_jiffies;	/* Time when hw_ptr is updated */
 	unsigned long hw_ptr_buffer_jiffies; /* buffer time in jiffies */
 	snd_pcm_sframes_t delay;	/* extra delay; typically FIFO size */
+	snd_pcm_sframes_t soc_delay;    /* extra delay; typically delay incurred in soc */
 	u64 hw_ptr_wrap;                /* offset for hw_ptr due to boundary wrap-around */
 	snd_pcm_state_t pending_state;
 
Index: b/include/sound/soc-dapm.h
===================================================================
--- a/include/sound/soc-dapm.h	2016-03-15 16:20:32.059824634 +0800
+++ b/include/sound/soc-dapm.h	2016-03-15 16:20:32.047824540 +0800
@@ -382,6 +382,11 @@
 			 struct snd_kcontrol *kcontrol, int event);
 int dapm_clock_event(struct snd_soc_dapm_widget *w,
 			 struct snd_kcontrol *kcontrol, int event);
+bool dapm_kcontrol_set_value(const struct snd_kcontrol *kcontrol,
+	unsigned int value);
+unsigned int dapm_kcontrol_get_value(const struct snd_kcontrol *kcontrol);
+struct snd_soc_dapm_widget_list *dapm_kcontrol_get_wlist(
+	const struct snd_kcontrol *kcontrol);
 
 /* dapm controls */
 int snd_soc_dapm_put_volsw(struct snd_kcontrol *kcontrol,
Index: b/include/sound/soc.h
===================================================================
--- a/include/sound/soc.h	2016-03-15 16:20:32.059824634 +0800
+++ b/include/sound/soc.h	2016-03-15 16:20:32.047824540 +0800
@@ -27,6 +27,7 @@
 #include <sound/compress_driver.h>
 #include <sound/control.h>
 #include <sound/ac97_codec.h>
+#include <sound/effect_driver.h>
 
 /*
  * Convenience kcontrol builders
@@ -98,6 +99,12 @@
 		{.reg = xreg, .rreg = xreg, .shift = xshift, \
 		 .rshift = xshift, .min = xmin, .max = xmax, \
 		 .platform_max = xmax, .invert = xinvert} }
+#define SND_SOC_BYTES_EXT(xname, xcount, xhandler_get, xhandler_put) \
+{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
+	.info = snd_soc_info_bytes_ext, \
+	.get = xhandler_get, .put = xhandler_put, \
+	.private_value = (unsigned long)&(struct soc_bytes_ext) \
+		{.max = xcount} }
 #define SOC_DOUBLE(xname, reg, shift_left, shift_right, max, invert) \
 {	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
 	.info = snd_soc_info_volsw, .get = snd_soc_get_volsw, \
@@ -427,6 +434,22 @@
 struct snd_soc_pcm_runtime *snd_soc_get_pcm_runtime(struct snd_soc_card *card,
 		const char *dai_link);
 
+#if IS_ENABLED(CONFIG_SND_EFFECTS_OFFLOAD)
+int snd_soc_register_effect(struct snd_soc_card *card,
+				struct snd_effect_ops *ops);
+int snd_soc_unregister_effect(struct snd_soc_card *card);
+#else
+static inline int snd_soc_register_effect(struct snd_soc_card *card,
+					struct snd_effect_ops *ops)
+{
+	return -ENODEV;
+}
+static inline int snd_soc_unregister_effect(struct snd_soc_card *card)
+{
+	return -ENODEV;
+}
+#endif
+
 /* Utility functions to get clock rates from various things */
 int snd_soc_calc_frame_size(int sample_size, int channels, int tdm_slots);
 int snd_soc_params_to_frame_size(struct snd_pcm_hw_params *params);
@@ -557,6 +580,8 @@
 	struct snd_ctl_elem_value *ucontrol);
 int snd_soc_put_strobe(struct snd_kcontrol *kcontrol,
 	struct snd_ctl_elem_value *ucontrol);
+int snd_soc_info_bytes_ext(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_info *ucontrol);
 
 /**
  * struct snd_soc_jack_pin - Describes a pin to update based on jack detection
@@ -891,6 +916,7 @@
 	int be_id;	/* optional ID for machine driver BE identification */
 
 	const struct snd_soc_pcm_stream *params;
+	bool dsp_loopback;
 
 	unsigned int dai_fmt;           /* format to set on init */
 
@@ -931,6 +957,10 @@
 	/* For unidirectional dai links */
 	bool playback_only;
 	bool capture_only;
+
+	/*no of substreams */
+	unsigned int playback_count;
+	unsigned int capture_count;
 };
 
 struct snd_soc_codec_conf {
@@ -1099,6 +1129,10 @@
 	unsigned int regbase, regcount, nbits, invert;
 };
 
+struct soc_bytes_ext {
+	int max;
+};
+
 /* enumerated kcontrol */
 struct soc_enum {
 	unsigned short reg;
Index: b/include/uapi/sound/effect_offload.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/include/uapi/sound/effect_offload.h	2016-03-15 16:20:32.047824540 +0800
@@ -0,0 +1,58 @@
+/*
+ *  effect_offload.h - effect offload header definations
+ *
+ *  Copyright (C) 2013 Intel Corporation
+ *  Authors:	Vinod Koul <vinod.koul@intel.com>
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ */
+#ifndef __EFFECT_OFFLOAD_H
+#define __EFFECT_OFFLOAD_H
+
+#include <linux/types.h>
+
+#define SNDRV_EFFECT_VERSION SNDRV_PROTOCOL_VERSION(0, 1, 0)
+
+struct snd_effect {
+	char uuid[16];  /* effect UUID */
+	u32 device;	/* streaming interface for effect insertion */
+	u32 pos;	/* position of effect to be placed in effect chain */
+	u32 mode;	/* Backend for Global device (Headset/Speaker) */
+} __packed;
+
+struct snd_effect_params {
+	char uuid[16];
+	u32 device;
+	u32 size;	/* size of parameter blob */
+	u64 buffer_ptr;
+} __packed;
+
+struct snd_effect_caps {
+	u32 size;	/* size of buffer to read effect descriptors */
+	u64 buffer_ptr;
+} __packed;
+
+#define SNDRV_CTL_IOCTL_EFFECT_VERSION		_IOR('E', 0x00, int)
+#define SNDRV_CTL_IOCTL_EFFECT_CREATE		_IOW('E', 0x01,\
+						struct snd_effect)
+#define SNDRV_CTL_IOCTL_EFFECT_DESTROY		_IOW('E', 0x02,\
+						struct snd_effect)
+#define SNDRV_CTL_IOCTL_EFFECT_SET_PARAMS	_IOW('E', 0x03,\
+						struct snd_effect_params)
+#define SNDRV_CTL_IOCTL_EFFECT_GET_PARAMS	_IOWR('E', 0x04,\
+						struct snd_effect_params)
+#define SNDRV_CTL_IOCTL_EFFECT_QUERY_NUM	_IOR('E', 0x05, int)
+#define SNDRV_CTL_IOCTL_EFFECT_QUERY_CAPS	_IOWR('E', 0x06,\
+						struct snd_effect_caps)
+#endif
Index: b/sound/core/compress_offload.c
===================================================================
--- a/sound/core/compress_offload.c	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/core/compress_offload.c	2016-03-15 16:20:32.047824540 +0800
@@ -415,6 +415,7 @@
 			retval = snd_compr_get_poll(stream);
 		break;
 	default:
+		pr_err("poll returns err!...\n");
 		if (stream->direction == SND_COMPRESS_PLAYBACK)
 			retval = POLLOUT | POLLWRNORM | POLLERR;
 		else
@@ -676,7 +677,7 @@
 	return retval;
 }
 
-static int snd_compr_stop(struct snd_compr_stream *stream)
+int snd_compr_stop(struct snd_compr_stream *stream)
 {
 	int retval;
 
@@ -691,6 +692,7 @@
 	}
 	return retval;
 }
+EXPORT_SYMBOL(snd_compr_stop);
 
 static int snd_compress_wait_for_drain(struct snd_compr_stream *stream)
 {
Index: b/sound/core/control_compat.c
===================================================================
--- a/sound/core/control_compat.c	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/core/control_compat.c	2016-03-15 16:22:00.575636297 +0800
@@ -263,7 +263,6 @@
 	} else {
 		size = get_elem_size(type, count);
 		if (size < 0) {
-			printk(KERN_ERR "snd_ioctl32_ctl_elem_value: unknown type %d\n", type);
 			return -EINVAL;
 		}
 		if (copy_from_user(data->value.bytes.data, valuep, size))
@@ -457,7 +456,6 @@
 	ctl = file->private_data;
 	if (snd_BUG_ON(!ctl || !ctl->card))
 		return -ENXIO;
-
 	switch (cmd) {
 	case SNDRV_CTL_IOCTL_PVERSION:
 	case SNDRV_CTL_IOCTL_CARD_INFO:
Index: b/sound/core/pcm_lib.c
===================================================================
--- a/sound/core/pcm_lib.c	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/core/pcm_lib.c	2016-03-15 16:20:32.051824537 +0800
@@ -293,7 +293,15 @@
 			return -EPIPE;
 		}
 	} else {
-		if (avail >= runtime->stop_threshold) {
+		snd_pcm_uframes_t actual_avail;
+		if (avail < runtime->soc_delay)
+			actual_avail = avail;
+		else
+			actual_avail = avail - runtime->soc_delay;
+		if (actual_avail  >= runtime->stop_threshold) {
+			snd_printd(KERN_ERR  "avail > stop_threshold!!\n");
+			snd_printd(KERN_ERR  "actual_avail %ld, avail %ld, soc_delay %ld!!\n",
+					actual_avail, avail,  runtime->soc_delay);
 			xrun(substream);
 			return -EPIPE;
 		}
@@ -454,9 +462,9 @@
 	if (runtime->hw.info & SNDRV_PCM_INFO_BATCH)
 		goto no_jiffies_check;
 	hdelta = delta;
-	if (hdelta < runtime->delay)
+	if (hdelta < (runtime->delay + runtime->soc_delay))
 		goto no_jiffies_check;
-	hdelta -= runtime->delay;
+	hdelta -= (runtime->delay + runtime->soc_delay);
 	jdelta = curr_jiffies - runtime->hw_ptr_jiffies;
 	if (((hdelta * HZ) / runtime->rate) > jdelta + HZ/100) {
 		delta = jdelta /
Index: b/sound/core/pcm_native.c
===================================================================
--- a/sound/core/pcm_native.c	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/core/pcm_native.c	2016-03-15 16:20:32.051824537 +0800
@@ -616,13 +616,13 @@
 		if (runtime->status->state == SNDRV_PCM_STATE_RUNNING ||
 		    runtime->status->state == SNDRV_PCM_STATE_DRAINING) {
 			status->delay = runtime->buffer_size - status->avail;
-			status->delay += runtime->delay;
+			status->delay += runtime->delay + runtime->soc_delay;
 		} else
 			status->delay = 0;
 	} else {
 		status->avail = snd_pcm_capture_avail(runtime);
 		if (runtime->status->state == SNDRV_PCM_STATE_RUNNING)
-			status->delay = status->avail + runtime->delay;
+			status->delay = status->avail + runtime->delay + runtime->soc_delay;
 		else
 			status->delay = 0;
 	}
@@ -2477,7 +2477,7 @@
 			n = snd_pcm_playback_hw_avail(runtime);
 		else
 			n = snd_pcm_capture_avail(runtime);
-		n += runtime->delay;
+		n += runtime->delay + runtime->soc_delay;
 		break;
 	case SNDRV_PCM_STATE_XRUN:
 		err = -EPIPE;
Index: b/sound/soc/Makefile
===================================================================
--- a/sound/soc/Makefile	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/soc/Makefile	2016-03-15 16:20:32.051824537 +0800
@@ -1,3 +1,5 @@
+#ccflags-y += -DDEBUG
+
 snd-soc-core-objs := soc-core.o soc-dapm.o soc-jack.o soc-cache.o soc-utils.o
 snd-soc-core-objs += soc-pcm.o soc-compress.o soc-io.o soc-devres.o
 
@@ -31,3 +33,5 @@
 obj-$(CONFIG_SND_SOC)	+= tegra/
 obj-$(CONFIG_SND_SOC)	+= txx9/
 obj-$(CONFIG_SND_SOC)	+= ux500/
+
+
Index: b/sound/soc/soc-core.c
===================================================================
--- a/sound/soc/soc-core.c	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/soc/soc-core.c	2016-03-15 16:20:32.051824537 +0800
@@ -867,13 +867,15 @@
 		if (dai_link->cpu_of_node &&
 		    (cpu_dai->dev->of_node != dai_link->cpu_of_node))
 			continue;
-		if (dai_link->cpu_name &&
-		    strcmp(dev_name(cpu_dai->dev), dai_link->cpu_name))
+
+		if (dai_link->cpu_name) {
+		    if (strcmp(dev_name(cpu_dai->dev), dai_link->cpu_name))
 			continue;
-		if (dai_link->cpu_dai_name &&
-		    strcmp(cpu_dai->name, dai_link->cpu_dai_name))
+}
+		if (dai_link->cpu_dai_name) {
+		    if (strcmp(cpu_dai->name, dai_link->cpu_dai_name))
 			continue;
-
+}
 		rtd->cpu_dai = cpu_dai;
 	}
 
@@ -900,11 +902,9 @@
 		 * this CODEC
 		 */
 		list_for_each_entry(codec_dai, &dai_list, list) {
-			if (codec->dev == codec_dai->dev &&
-				!strcmp(codec_dai->name,
-					dai_link->codec_dai_name)) {
-
-				rtd->codec_dai = codec_dai;
+			if (codec->dev == codec_dai->dev) {
+				if (!strcmp(codec_dai->name, dai_link->codec_dai_name))
+					rtd->codec_dai = codec_dai;
 			}
 		}
 
@@ -1465,8 +1465,14 @@
 						codec2codec_close_delayed_work);
 
 			/* link the DAI widgets */
-			play_w = codec_dai->playback_widget;
-			capture_w = cpu_dai->capture_widget;
+			if (!dai_link->dsp_loopback) {
+				play_w = codec_dai->playback_widget;
+				capture_w = cpu_dai->capture_widget;
+			} else {
+				play_w = codec_dai->playback_widget;
+				capture_w = cpu_dai->playback_widget;
+			}
+
 			if (play_w && capture_w) {
 				ret = snd_soc_dapm_new_pcm(card, dai_link->params,
 						   capture_w, play_w);
@@ -1477,8 +1483,14 @@
 				}
 			}
 
-			play_w = cpu_dai->playback_widget;
-			capture_w = codec_dai->capture_widget;
+			if (!dai_link->dsp_loopback) {
+				play_w = cpu_dai->playback_widget;
+				capture_w = codec_dai->capture_widget;
+			} else {
+				play_w = cpu_dai->capture_widget;
+				capture_w = codec_dai->capture_widget;
+			}
+
 			if (play_w && capture_w) {
 				ret = snd_soc_dapm_new_pcm(card, dai_link->params,
 						   capture_w, play_w);
@@ -3341,6 +3353,19 @@
 }
 EXPORT_SYMBOL_GPL(snd_soc_bytes_put);
 
+int snd_soc_info_bytes_ext(struct snd_kcontrol *kcontrol,
+			struct snd_ctl_elem_info *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	struct soc_bytes_ext *params = (void *)kcontrol->private_value;
+
+	ucontrol->type = SNDRV_CTL_ELEM_TYPE_BYTES;
+	ucontrol->count = params->max;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snd_soc_info_bytes_ext);
+
 /**
  * snd_soc_info_xr_sx - signed multi register info callback
  * @kcontrol: mreg control
Index: b/sound/soc/soc-dapm.c
===================================================================
--- a/sound/soc/soc-dapm.c	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/soc/soc-dapm.c	2016-03-15 16:20:32.055824533 +0800
@@ -255,13 +255,14 @@
 	kfree(data);
 }
 
-static struct snd_soc_dapm_widget_list *dapm_kcontrol_get_wlist(
+struct snd_soc_dapm_widget_list *dapm_kcontrol_get_wlist(
 	const struct snd_kcontrol *kcontrol)
 {
 	struct dapm_kcontrol_data *data = snd_kcontrol_chip(kcontrol);
 
 	return data->wlist;
 }
+EXPORT_SYMBOL(dapm_kcontrol_get_wlist);
 
 static int dapm_kcontrol_add_widget(struct snd_kcontrol *kcontrol,
 	struct snd_soc_dapm_widget *widget)
@@ -323,14 +324,16 @@
 	list_for_each_entry(path, dapm_kcontrol_get_path_list(kcontrol), \
 		list_kcontrol)
 
-static unsigned int dapm_kcontrol_get_value(const struct snd_kcontrol *kcontrol)
+unsigned int dapm_kcontrol_get_value(const struct snd_kcontrol *kcontrol)
 {
 	struct dapm_kcontrol_data *data = snd_kcontrol_chip(kcontrol);
 
 	return data->value;
 }
+EXPORT_SYMBOL_GPL(dapm_kcontrol_get_value);
+
+bool dapm_kcontrol_set_value(const struct snd_kcontrol *kcontrol,
 
-static bool dapm_kcontrol_set_value(const struct snd_kcontrol *kcontrol,
 	unsigned int value)
 {
 	struct dapm_kcontrol_data *data = snd_kcontrol_chip(kcontrol);
@@ -346,6 +349,9 @@
 	return true;
 }
 
+EXPORT_SYMBOL_GPL(dapm_kcontrol_set_value);
+
+
 /**
  * snd_soc_dapm_kcontrol_codec() - Returns the codec associated to a kcontrol
  * @kcontrol: The kcontrol
@@ -1035,9 +1041,7 @@
 			path->walking = 0;
 		}
 	}
-
 	widget->outputs = con;
-
 	return con;
 }
 
@@ -1143,9 +1147,7 @@
 			path->walking = 0;
 		}
 	}
-
 	widget->inputs = con;
-
 	return con;
 }
 
@@ -3446,6 +3448,28 @@
 
 	switch (event) {
 	case SND_SOC_DAPM_PRE_PMU:
+		if (source->driver->ops && source->driver->ops->startup) {
+			substream.stream = SNDRV_PCM_STREAM_CAPTURE;
+			ret = source->driver->ops->startup(&substream, source);
+			if (ret != 0) {
+				dev_err(source->dev,
+					"ASoC: startup() failed: %d\n", ret);
+				goto out;
+			}
+			source->active++;
+		}
+
+		if (sink->driver->ops && sink->driver->ops->startup) {
+			substream.stream = SNDRV_PCM_STREAM_PLAYBACK;
+			ret = sink->driver->ops->startup(&substream, sink);
+			if (ret != 0) {
+				dev_err(sink->dev,
+					"ASoC: startup() failed: %d\n", ret);
+				goto out;
+			}
+			sink->active++;
+		}
+
 		if (source->driver->ops && source->driver->ops->hw_params) {
 			substream.stream = SNDRV_PCM_STREAM_CAPTURE;
 			ret = source->driver->ops->hw_params(&substream,
@@ -3483,6 +3507,18 @@
 		if (ret != 0 && ret != -ENOTSUPP)
 			dev_warn(sink->dev, "ASoC: Failed to mute: %d\n", ret);
 		ret = 0;
+
+		source->active--;
+		if (source->driver->ops && source->driver->ops->shutdown) {
+			substream.stream = SNDRV_PCM_STREAM_CAPTURE;
+			source->driver->ops->shutdown(&substream, source);
+		}
+
+		sink->active--;
+		if (sink->driver->ops && sink->driver->ops->shutdown) {
+			substream.stream = SNDRV_PCM_STREAM_PLAYBACK;
+			sink->driver->ops->shutdown(&substream, sink);
+		}
 		break;
 
 	default:
Index: b/sound/soc/soc-pcm.c
===================================================================
--- a/sound/soc/soc-pcm.c	2016-03-15 16:20:32.059824634 +0800
+++ b/sound/soc/soc-pcm.c	2016-03-15 16:20:32.055824533 +0800
@@ -482,6 +482,8 @@
 	if (!codec_dai->active)
 		codec_dai->rate = 0;
 
+	snd_soc_dai_digital_mute(cpu_dai, 1, substream->stream);
+
 	if (cpu_dai->driver->ops->shutdown)
 		cpu_dai->driver->ops->shutdown(substream, cpu_dai);
 
@@ -590,6 +592,7 @@
 			SND_SOC_DAPM_STREAM_START);
 
 	snd_soc_dai_digital_mute(codec_dai, 0, substream->stream);
+	snd_soc_dai_digital_mute(cpu_dai, 0, substream->stream);
 
 out:
 	mutex_unlock(&rtd->pcm_mutex);
@@ -2178,15 +2181,37 @@
 	int ret = 0, playback = 0, capture = 0;
 
 	if (rtd->dai_link->dynamic || rtd->dai_link->no_pcm) {
-		playback = rtd->dai_link->dpcm_playback;
-		capture = rtd->dai_link->dpcm_capture;
+
+		if ((cpu_dai->driver->playback.channels_min) &&
+			(cpu_dai->driver->capture.channels_min)) {
+				if (rtd->dai_link->playback_count)
+					playback = rtd->dai_link->playback_count;
+				else
+					playback = 1;
+
+				if (rtd->dai_link->capture_count)
+					capture = rtd->dai_link->capture_count;
+				else
+					capture = 1;
+		} else {
+			playback = rtd->dai_link->dpcm_playback;
+			capture = rtd->dai_link->dpcm_capture;
+		}
+
 	} else {
 		if (codec_dai->driver->playback.channels_min &&
 		    cpu_dai->driver->playback.channels_min)
-			playback = 1;
+			if (rtd->dai_link->playback_count)
+				playback = rtd->dai_link->playback_count;
+			else
+				playback = 1;
 		if (codec_dai->driver->capture.channels_min &&
-		    cpu_dai->driver->capture.channels_min)
-			capture = 1;
+		    cpu_dai->driver->capture.channels_min) {
+			if (rtd->dai_link->capture_count)
+				capture = rtd->dai_link->capture_count;
+			else
+				capture = 1;
+		}
 	}
 
 	if (rtd->dai_link->playback_only) {
