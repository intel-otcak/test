From 9008d9db96c90c46ab786a68b25ebd3b2dc08011 Mon Sep 17 00:00:00 2001
From: Jiebing Li <jiebing.li@intel.com>
Date: Fri, 21 Nov 2014 20:28:55 +0800
Subject: [PATCH 1/1] usb/gadget: fix usb string id allocation issue

This patch fixes several string id issues below:
1. next_index_id should not be reset to 0 every time gadget is enabled,
or the new allcated string will overwrite strings allocated at probe time.

2. All the Android specifi gadgets should update their string id
every time they are enabled.

3. cdev->gstrings list should be reset, or it will fail to find out
the correct string next time new gadgets are enabled.

Change-Id: I0cc901f825500773a4c7b8f26611fab19a549fdd
Tracked-On: https://jira01.devtools.intel.com/i#browse/IMINAN-5710
Signed-off-by: Jiebing Li <jiebing.li@intel.com>
---
 drivers/usb/gadget/android.c     |    9 ++++++++-
 drivers/usb/gadget/composite.c   |    6 ++++++
 drivers/usb/gadget/f_accessory.c |   18 ++++++++----------
 drivers/usb/gadget/f_fs.c        |   13 +++++++------
 drivers/usb/gadget/f_mtp.c       |    7 +++++++
 5 files changed, 36 insertions(+), 17 deletions(-)

--- linux.orig/drivers/usb/gadget/android.c
+++ linux/drivers/usb/gadget/android.c
@@ -101,6 +101,7 @@ struct android_dev {
 	bool sw_connected;
 	struct work_struct work;
 	char ffs_aliases[256];
+	u8 reset_string_id;
 };
 
 static struct class *android_class;
@@ -1274,7 +1275,12 @@ static ssize_t enable_store(struct devic
 
 	sscanf(buff, "%d", &enabled);
 	if (enabled && !dev->enabled) {
-		cdev->next_string_id = 0;
+		/* reset cdev->next_string_id to dev->reset_string_id
+		 * because "android_usb" driver is working and its
+		 * string descriptor numbers have been allocated
+		 */
+		cdev->next_string_id = dev->reset_string_id;
+
 		/*
 		 * Update values in composite driver's copy of
 		 * device descriptor.
@@ -1463,6 +1469,7 @@ static int android_bind(struct usb_compo
 		return id;
 	strings_dev[STRING_SERIAL_IDX].id = id;
 	device_desc.iSerialNumber = id;
+	dev->reset_string_id = id;
 
 	usb_gadget_set_selfpowered(gadget);
 	dev->cdev = cdev;
--- linux.orig/drivers/usb/gadget/composite.c
+++ linux/drivers/usb/gadget/composite.c
@@ -847,9 +847,15 @@ void usb_remove_config(struct usb_compos
 		      struct usb_configuration *config)
 {
 	unsigned long flags;
+	struct usb_gadget_string_container *uc, *tmp;
 
 	spin_lock_irqsave(&cdev->lock, flags);
 
+	list_for_each_entry_safe(uc, tmp, &cdev->gstrings, list) {
+		list_del(&uc->list);
+		kfree(uc);
+	}
+
 	if (cdev->config == config)
 		reset_config(cdev);
 
--- linux.orig/drivers/usb/gadget/f_accessory.c
+++ linux/drivers/usb/gadget/f_accessory.c
@@ -905,9 +905,16 @@ acc_function_bind(struct usb_configurati
 	struct acc_dev	*dev = func_to_dev(f);
 	int			id;
 	int			ret;
+	struct usb_string	*us;
 
 	DBG(cdev, "acc_function_bind dev: %p\n", dev);
 
+	us = usb_gstrings_attach(cdev, acc_strings,
+			ARRAY_SIZE(acc_string_defs));
+	if (IS_ERR(us))
+		return PTR_ERR(us);
+	acc_interface_desc.iInterface = us[INTERFACE_STRING_INDEX].id;
+
 	ret = hid_register_driver(&acc_hid_driver);
 	if (ret)
 		return ret;
@@ -981,6 +988,7 @@ acc_function_unbind(struct usb_configura
 	struct usb_request *req;
 	int i;
 
+	acc_string_defs[INTERFACE_STRING_INDEX].id = 0;
 	while ((req = req_get(dev, &dev->tx_idle)))
 		acc_request_free(req, dev->ep_in);
 	for (i = 0; i < RX_REQ_MAX; i++)
@@ -1136,19 +1144,9 @@ static void acc_function_disable(struct
 static int acc_bind_config(struct usb_configuration *c)
 {
 	struct acc_dev *dev = _acc_dev;
-	int ret;
 
 	printk(KERN_INFO "acc_bind_config\n");
 
-	/* allocate a string ID for our interface */
-	if (acc_string_defs[INTERFACE_STRING_INDEX].id == 0) {
-		ret = usb_string_id(c->cdev);
-		if (ret < 0)
-			return ret;
-		acc_string_defs[INTERFACE_STRING_INDEX].id = ret;
-		acc_interface_desc.iInterface = ret;
-	}
-
 	dev->cdev = c->cdev;
 	dev->function.name = "accessory";
 	dev->function.strings = acc_strings,
--- linux.orig/drivers/usb/gadget/f_fs.c
+++ linux/drivers/usb/gadget/f_fs.c
@@ -1209,7 +1209,7 @@ static void ffs_data_reset(struct ffs_da
 static int functionfs_bind(struct ffs_data *ffs, struct usb_composite_dev *cdev)
 {
 	struct usb_gadget_strings **lang;
-	int first_id;
+	struct usb_string	*us;
 
 	ENTER();
 
@@ -1217,10 +1217,6 @@ static int functionfs_bind(struct ffs_da
 		 || test_and_set_bit(FFS_FL_BOUND, &ffs->flags)))
 		return -EBADFD;
 
-	first_id = usb_string_ids_n(cdev, ffs->strings_count);
-	if (unlikely(first_id < 0))
-		return first_id;
-
 	ffs->ep0req = usb_ep_alloc_request(cdev->gadget->ep0, GFP_KERNEL);
 	if (unlikely(!ffs->ep0req))
 		return -ENOMEM;
@@ -1230,8 +1226,13 @@ static int functionfs_bind(struct ffs_da
 	lang = ffs->stringtabs;
 	if (lang) {
 		for (; *lang; ++lang) {
+			int id;
 			struct usb_string *str = (*lang)->strings;
-			int id = first_id;
+			us = usb_gstrings_attach(cdev, lang,
+					ffs->strings_count);
+			if (IS_ERR(us))
+				return PTR_ERR(us);
+			id = us[0].id;
 			for (; str->s; ++id, ++str)
 				str->id = id;
 		}
--- linux.orig/drivers/usb/gadget/f_mtp.c
+++ linux/drivers/usb/gadget/f_mtp.c
@@ -1258,10 +1258,17 @@ mtp_function_bind(struct usb_configurati
 	struct mtp_dev	*dev = func_to_mtp(f);
 	int			id;
 	int			ret;
+	struct usb_string	*us;
 
 	dev->cdev = cdev;
 	DBG(cdev, "mtp_function_bind dev: %p\n", dev);
 
+	us = usb_gstrings_attach(cdev, mtp_strings,
+			ARRAY_SIZE(mtp_string_defs));
+	if (IS_ERR(us))
+		return PTR_ERR(us);
+	mtp_interface_desc.iInterface = us[INTERFACE_STRING_INDEX].id;
+
 	/* allocate interface ID(s) */
 	id = usb_interface_id(c, f);
 	if (id < 0)
