From e2d9a4bf6f02dea5978256dfe21be14c2828a8c9 Mon Sep 17 00:00:00 2001
From: Konrad Leszczynski <konrad.leszczynski@intel.com>
Date: Tue, 15 Dec 2015 12:15:28 +0000
Subject: [PATCH 09/12] usb: gadget: android: integrate midi function driver

Based on https://android-review.googlesource.com/#/c/127452/ by
Mike Lockwood <lockwood@google.com> which was using old interface.

Change-Id: Ia9946a18ac9ba42f44f14e5ae3c919777dd87a3a
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-3355
Signed-off-by: Mian Yousaf Kaukab <yousaf.kaukab@intel.com>
Signed-off-by: Konrad Leszczynski <konrad.leszczynski@intel.com>
Reviewed-on: https://android.intel.com:443/448839
---
 drivers/usb/gadget/Kconfig   |   3 ++
 drivers/usb/gadget/android.c | 114 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 117 insertions(+)

diff --git a/drivers/usb/gadget/Kconfig b/drivers/usb/gadget/Kconfig
index e573719..ff67ed0 100644
--- a/drivers/usb/gadget/Kconfig
+++ b/drivers/usb/gadget/Kconfig
@@ -1060,12 +1060,15 @@ config USB_G_PRINTER
 
 config USB_G_ANDROID
 	boolean "Android Composite Gadget"
+	depends on SND
 	select USB_F_ACM
 	select USB_LIBCOMPOSITE
 	select USB_U_SERIAL
 	select USB_F_MASS_STORAGE
 	select USB_F_FS
 	select SND_PCM
+	select SND_RAWMIDI
+	select USB_F_MIDI
 	help
 	  The Android Composite Gadget supports multiple USB
 	  functions: adb, acm, mass storage, mtp, accessory
diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index 70c2fcd..b4aecc5 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -30,6 +30,7 @@
 
 #include "gadget_chips.h"
 #include "u_fs.h"
+#include "u_midi.h"
 
 #include "f_audio_source.c"
 #include "f_mtp.c"
@@ -52,6 +53,12 @@ static const char longname[] = "Gadget Android";
 #define VENDOR_ID		0x18D1
 #define PRODUCT_ID		0x0001
 
+/* f_midi configuration */
+#define MIDI_INPUT_PORTS    1
+#define MIDI_OUTPUT_PORTS   1
+#define MIDI_BUFFER_SIZE    256
+#define MIDI_QUEUE_LENGTH   32
+
 struct android_usb_function {
 	char *name;
 	void *config;
@@ -1113,6 +1120,112 @@ static struct android_usb_function audio_source_function = {
 	.attributes	= audio_source_function_attributes,
 };
 
+struct midi_function_config {
+	struct usb_function *f_midi;
+	struct usb_function_instance *f_midi_inst;
+	int card;
+	int device;
+};
+
+static int midi_function_init(struct android_usb_function *f,
+					struct usb_composite_dev *cdev)
+{
+	struct midi_function_config *config;
+	struct f_midi_opts *midi_opts;
+
+	config = kzalloc(sizeof(*config), GFP_KERNEL);
+	f->config = config;
+	if (!config)
+		return -ENOMEM;
+	config->card = -1;
+	config->device = -1;
+
+	config->f_midi_inst = usb_get_function_instance("midi");
+	if (IS_ERR(config->f_midi_inst)) {
+		kfree(config);
+		return PTR_ERR(config->f_midi_inst);
+	}
+
+	midi_opts = container_of(config->f_midi_inst, struct f_midi_opts,
+								func_inst);
+	midi_opts->index = SNDRV_DEFAULT_IDX1;
+	midi_opts->id = SNDRV_DEFAULT_STR1;
+	midi_opts->in_ports = MIDI_INPUT_PORTS;
+	midi_opts->out_ports = MIDI_OUTPUT_PORTS;
+	midi_opts->buflen = MIDI_BUFFER_SIZE;
+	midi_opts->qlen = MIDI_QUEUE_LENGTH;
+
+	return 0;
+}
+
+static void midi_function_cleanup(struct android_usb_function *f)
+{
+	struct midi_function_config *config = f->config;
+
+	usb_put_function_instance(config->f_midi_inst);
+	kfree(f->config);
+	f->config = NULL;
+}
+
+static int midi_function_bind_config(struct android_usb_function *f,
+						struct usb_configuration *c)
+{
+	struct midi_function_config *config = f->config;
+	int ret;
+
+	config->f_midi = usb_get_function(config->f_midi_inst);
+	if (IS_ERR(config->f_midi)) {
+		pr_err("Could not get midi function\n");
+		return PTR_ERR(config->f_midi);
+	}
+
+	ret = usb_add_function(c, config->f_midi);
+	if (ret < 0) {
+		pr_err("Could not add midi function\n");
+		usb_put_function(config->f_midi);
+		return ret;
+	}
+
+	midi_get_alsa_config(config->f_midi, &config->card, &config->device);
+
+	return 0;
+}
+
+static void midi_function_unbind_config(struct android_usb_function *f,
+						struct usb_configuration *c)
+{
+	struct midi_function_config *config = f->config;
+
+	usb_put_function(config->f_midi);
+	config->f_midi = NULL;
+}
+
+static ssize_t midi_alsa_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct android_usb_function *f = dev_get_drvdata(dev);
+	struct midi_function_config *config = f->config;
+
+	/* print ALSA card and device numbers */
+	return sprintf(buf, "%d %d\n", config->card, config->device);
+}
+
+static DEVICE_ATTR(alsa, S_IRUGO, midi_alsa_show, NULL);
+
+static struct device_attribute *midi_function_attributes[] = {
+	&dev_attr_alsa,
+	NULL
+};
+
+static struct android_usb_function midi_function = {
+	.name		= "midi",
+	.init		= midi_function_init,
+	.cleanup		= midi_function_cleanup,
+	.bind_config	= midi_function_bind_config,
+	.unbind_config	= midi_function_unbind_config,
+	.attributes	= midi_function_attributes,
+};
+
 static struct android_usb_function *supported_functions[] = {
 	&ffs_function,
 	&acm_function,
@@ -1122,6 +1235,7 @@ static struct android_usb_function *supported_functions[] = {
 	&mass_storage_function,
 	&accessory_function,
 	&audio_source_function,
+	&midi_function,
 	NULL
 };
 
-- 
1.9.1

