From 61236b081e2870d76df46fa99c246deb37365375 Mon Sep 17 00:00:00 2001
From: Chuanxiao Dong <chuanxiao.dong@intel.com>
Date: Wed, 7 Jan 2015 12:32:07 +0800
Subject: [PATCH] mmc: disable HS200 when accessing RPMB partition as tuning is
 not supported

When eMMC is in RPMB partition, tuning command is not supported, thus need
to disable HS200 mode when accessing RPMB

Change-Id: I77857c6026dac2378af864133dce22cc449252b6
Signed-off-by: Chuanxiao Dong <chuanxiao.dong@intel.com>
Signed-off-by: Yuan Juntao <juntao.yuan@intel.com>
---
 drivers/mmc/card/block.c | 31 ++++++++++++++++++++++++++++++-
 drivers/mmc/core/core.c  | 36 ++++++++++++++++++++++++++++++++++++
 include/linux/mmc/card.h |  1 +
 include/linux/mmc/core.h |  1 +
 4 files changed, 68 insertions(+), 1 deletion(-)

diff --git a/drivers/mmc/card/block.c b/drivers/mmc/card/block.c
index 3497970..6a0ba38 100644
--- a/drivers/mmc/card/block.c
+++ b/drivers/mmc/card/block.c
@@ -646,6 +646,31 @@ static const struct block_device_operations mmc_bdops = {
 #endif
 };
 
+static int mmc_rpmb_reset(struct mmc_host *host, u8 part_config)
+{
+	int err = 0;
+
+	if (!mmc_card_mmc(host->card))
+		return err;
+
+	if (((part_config & 0x07) == EXT_CSD_PART_CONFIG_ACC_RPMB) &&
+	    (mmc_card_hs200(host->card) || mmc_card_hs400(host->card))) {
+		pr_info("%s: disable eMMC HS200/HS400 on rpmb part\n",
+				__func__);
+		host->card->mmc_avail_type &= ~EXT_CSD_CARD_TYPE_HS200;
+		host->card->rpmb_hs200_reset = true;
+		err = mmc_do_reset(host);
+	} else if (((part_config & 0x07) != EXT_CSD_PART_CONFIG_ACC_RPMB) &&
+	    host->card->rpmb_hs200_reset) {
+		pr_info("%s: enable eMMC HS200 on non-rpmb part\n", __func__);
+		host->card->mmc_avail_type |= EXT_CSD_CARD_TYPE_HS200;
+		host->card->rpmb_hs200_reset = false;
+		err = mmc_do_reset(host);
+	}
+
+	return err;
+}
+
 static inline int mmc_blk_part_switch(struct mmc_card *card,
 				      struct mmc_blk_data *md)
 {
@@ -710,6 +735,10 @@ static inline int mmc_blk_part_switch(struct mmc_card *card,
 		part_config &= ~EXT_CSD_PART_CONFIG_ACC_MASK;
 		part_config |= md->part_type;
 
+		if (mmc_rpmb_reset(card->host, part_config))
+			pr_warn("%s: eMMC rpmb reset failed\n",
+				mmc_hostname(card->host));
+
 		ret = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,
 				 EXT_CSD_PART_CONFIG, part_config,
 				 card->ext_csd.part_time);
@@ -989,7 +1018,7 @@ static int mmc_blk_reset(struct mmc_blk_data *md, struct mmc_host *host,
 		return -EEXIST;
 
 	md->reset_done |= type;
-	err = mmc_hw_reset(host);
+	err = mmc_do_reset(host);
 	/* Ensure we switch back to the correct partition */
 	if (err != -EOPNOTSUPP) {
 		struct mmc_blk_data *main_md = mmc_get_drvdata(host->card);
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index c65cfcc..09f0b49 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -2444,6 +2444,42 @@ int mmc_hw_reset_check(struct mmc_host *host)
 }
 EXPORT_SYMBOL(mmc_hw_reset_check);
 
+static int mmc_sw_reset(struct mmc_host *host)
+{
+	struct mmc_card *card = host->card;
+
+	if (!host->bus_ops->power_restore)
+		return -EOPNOTSUPP;
+
+	if (!card)
+		return -EINVAL;
+
+	mmc_host_clk_hold(host);
+
+	/*
+	 * before HW reset card, cache needs to be flushed. Otherwise
+	 * the data in cache can be lost. But this flush may be failed
+	 * because card may be not in a good state
+	 */
+	mmc_cache_ctrl(host, 0);
+
+	mmc_host_clk_release(host);
+
+	mmc_power_cycle(host, host->card->ocr);
+
+	return host->bus_ops->power_restore(host);
+}
+
+int mmc_do_reset(struct mmc_host *host)
+{
+	int err;
+	err = mmc_hw_reset(host);
+	if (err == -EOPNOTSUPP)
+		return mmc_sw_reset(host);
+	return err;
+}
+EXPORT_SYMBOL(mmc_do_reset);
+
 static int mmc_rescan_try_freq(struct mmc_host *host, unsigned freq)
 {
 	host->f_init = freq;
diff --git a/include/linux/mmc/card.h b/include/linux/mmc/card.h
index 316a8a1..cc0427a 100644
--- a/include/linux/mmc/card.h
+++ b/include/linux/mmc/card.h
@@ -310,6 +310,7 @@ struct mmc_card {
 	struct dentry		*debugfs_root;
 	struct mmc_part	part[MMC_NUM_PHY_PARTITION]; /* physical partitions */
 	unsigned int    nr_parts;
+	bool			rpmb_hs200_reset;
 };
 
 /*
diff --git a/include/linux/mmc/core.h b/include/linux/mmc/core.h
index 3a07de3..c7fe372 100644
--- a/include/linux/mmc/core.h
+++ b/include/linux/mmc/core.h
@@ -188,6 +188,7 @@ extern int mmc_set_blockcount(struct mmc_card *card, unsigned int blockcount,
 extern int mmc_hw_reset(struct mmc_host *host);
 extern int mmc_hw_reset_check(struct mmc_host *host);
 extern int mmc_can_reset(struct mmc_card *card);
+extern int mmc_do_reset(struct mmc_host *host);
 
 extern void mmc_set_data_timeout(struct mmc_data *, const struct mmc_card *);
 extern unsigned int mmc_align_data_size(struct mmc_card *, unsigned int);
-- 
1.9.1

