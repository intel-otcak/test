From 6e17e84bd764767833ae9b2d694eaf150f22b98b Mon Sep 17 00:00:00 2001
From: Zhang Yanmin <yanmin.zhang@intel.com>
Date: Wed, 28 Jan 2015 02:49:32 +0800
Subject: [PATCH] mid: add back qos to block C6 when kernel holds i2c SEMA on
 Baytrail

Upstream is still used by Baytrail, while Baytrail platform
doesn't fix the firmware bugs. To support Baytrail, we add
back qos to block C6 when kernel holds i2c SEMA on Baytrail
platform.

On other playforms, such like Cherrytrail, we don't hold
the qos.

Change-Id: I563f32db71b4cd00741f86b04e045c66e038c888
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-960
Signed-off-by: Zhang Yanmin <yanmin.zhang@intel.com>
---
 arch/x86/platform/intel-mid/intel_mid_pcihelpers.c | 23 ++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/arch/x86/platform/intel-mid/intel_mid_pcihelpers.c b/arch/x86/platform/intel-mid/intel_mid_pcihelpers.c
index 766be4e..ba0e47f 100644
--- a/arch/x86/platform/intel-mid/intel_mid_pcihelpers.c
+++ b/arch/x86/platform/intel-mid/intel_mid_pcihelpers.c
@@ -1,5 +1,6 @@
 #include <linux/export.h>
 #include <linux/pci.h>
+#include <linux/pm_qos.h>
 #include <linux/delay.h>
 
 /* G-Min addition: "platform_is()" lives in intel_mid_pm.h in the MCG
@@ -30,6 +31,10 @@ static inline int platform_is(u8 model)
 static DEFINE_SPINLOCK(msgbus_lock);
 
 static struct pci_dev *pci_root;
+static struct pm_qos_request pm_qos;
+int qos;
+
+#define DW_I2C_NEED_QOS	(platform_is(INTEL_ATOM_BYT))
 
 static int intel_mid_msgbus_init(void)
 {
@@ -39,6 +44,11 @@ static int intel_mid_msgbus_init(void)
 		return -ENODEV;
 	}
 
+	if (DW_I2C_NEED_QOS) {
+		pm_qos_add_request(&pm_qos,
+			PM_QOS_CPU_DMA_LATENCY,
+			PM_QOS_DEFAULT_VALUE);
+	}
 	return 0;
 }
 fs_initcall(intel_mid_msgbus_init);
@@ -203,6 +213,7 @@ static void reset_semaphore(void)
 	data = data & 0xfffffffc;
 	intel_mid_msgbus_write32(PUNIT_PORT, PUNIT_SEMAPHORE, data);
 	smp_mb();
+
 }
 
 int intel_mid_dw_i2c_acquire_ownership(void)
@@ -213,6 +224,9 @@ int intel_mid_dw_i2c_acquire_ownership(void)
 	u32 cmdext;
 	int timeout = 1000;
 
+	if (DW_I2C_NEED_QOS)
+		pm_qos_update_request(&pm_qos, CSTATE_EXIT_LATENCY_C1 - 1);
+
 	/*
 	 * We need disable irq. Otherwise, the main thread
 	 * might be preempted and the other thread jumps to
@@ -254,6 +268,12 @@ int intel_mid_dw_i2c_acquire_ownership(void)
 					intel_mid_msgbus_read32(PUNIT_PORT,
 						PUNIT_SEMAPHORE));
 			local_irq_enable();
+
+			if (DW_I2C_NEED_QOS) {
+				pm_qos_update_request(&pm_qos,
+					 PM_QOS_DEFAULT_VALUE);
+			}
+
 			return ret;
 		}
 	}
@@ -268,6 +288,9 @@ int intel_mid_dw_i2c_release_ownership(void)
 	reset_semaphore();
 	local_irq_enable();
 
+	if (DW_I2C_NEED_QOS)
+		pm_qos_update_request(&pm_qos, PM_QOS_DEFAULT_VALUE);
+
 	return 0;
 }
 EXPORT_SYMBOL(intel_mid_dw_i2c_release_ownership);
-- 
1.9.1

