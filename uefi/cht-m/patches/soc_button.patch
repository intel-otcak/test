From 2f9e098e013b12dac0bcb5c7a7668be1fa1964a1 Mon Sep 17 00:00:00 2001
From: Lejun Zhu <lejun.zhu@intel.com>
Date: Thu, 27 Mar 2014 16:57:46 +0800
Subject: [PATCH] Button: fix for review comments on linux-input

Change the name from baytrail_button to soc_button_array.
Uses dynamically allocated platform device structures instead of static ones.

Change-Id: Ie56c7bc175de14ac51b66786495a5b2ec79337fc
---
 arch/x86/configs/x86_64_byt_t_defconfig |   2 +-
 drivers/input/misc/Kconfig              |  10 +-
 drivers/input/misc/Makefile             |   2 +-
 drivers/input/misc/baytrail_button.c    | 200 ------------------------------
 drivers/input/misc/soc_button_array.c   | 209 ++++++++++++++++++++++++++++++++
 5 files changed, 216 insertions(+), 207 deletions(-)
 delete mode 100644 drivers/input/misc/baytrail_button.c
 create mode 100644 drivers/input/misc/soc_button_array.c

Index: linux/arch/x86/configs/x86_64_byt_t_defconfig
===================================================================
--- linux.orig/arch/x86/configs/x86_64_byt_t_defconfig	2014-04-20 08:33:55.562320715 -0700
+++ linux/arch/x86/configs/x86_64_byt_t_defconfig	2014-04-20 08:33:55.558320715 -0700
@@ -1826,7 +1826,7 @@
 # CONFIG_INPUT_IMS_PCU is not set
 # CONFIG_INPUT_CMA3000 is not set
 # CONFIG_INPUT_IDEAPAD_SLIDEBAR is not set
-CONFIG_INPUT_BAYTRAIL_BUTTON=m
+CONFIG_INPUT_SOC_BUTTON_ARRAY=m
 
 #
 # Hardware I/O ports
Index: linux/drivers/input/misc/Kconfig
===================================================================
--- linux.orig/drivers/input/misc/Kconfig	2014-04-20 08:33:55.562320715 -0700
+++ linux/drivers/input/misc/Kconfig	2014-04-20 08:33:55.559320715 -0700
@@ -682,14 +682,14 @@
 	  To compile this driver as a module, choose M here: the
 	  module will be called ideapad_slidebar.
 
-config INPUT_BAYTRAIL_BUTTON
-	tristate "Intel Baytrail Buttons"
+config INPUT_SOC_BUTTON_ARRAY
+	tristate "Windows-compatible SoC Button Array"
 	depends on KEYBOARD_GPIO
 	help
-	  Say Y here if you have a Baytrail tablet that is compatible
-	  with Windows ACPI Design Guide.
+	  Say Y here if you have a SoC-based tablet that originally
+	  runs Windows 8.
 
 	  To compile this driver as a module, choose M here: the
-	  module will be called baytrail_button.
+	  module will be called soc_button_array.
 
 endif
Index: linux/drivers/input/misc/Makefile
===================================================================
--- linux.orig/drivers/input/misc/Makefile	2014-04-20 08:33:55.562320715 -0700
+++ linux/drivers/input/misc/Makefile	2014-04-20 08:33:55.559320715 -0700
@@ -65,4 +65,4 @@
 obj-$(CONFIG_INPUT_XEN_KBDDEV_FRONTEND)	+= xen-kbdfront.o
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o
-obj-$(CONFIG_INPUT_BAYTRAIL_BUTTON)	+= baytrail_button.o
+obj-$(CONFIG_INPUT_SOC_BUTTON_ARRAY)	+= soc_button_array.o
Index: linux/drivers/input/misc/baytrail_button.c
===================================================================
--- linux.orig/drivers/input/misc/baytrail_button.c	2014-04-20 08:33:55.562320715 -0700
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,200 +0,0 @@
-/*
- * baytrail_button.c: supports the GPIO buttons on some Baytrail
- * tablets.
- *
- * (C) Copyright 2014 Intel Corporation
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; version 2
- * of the License.
- */
-
-#include <linux/module.h>
-#include <linux/input.h>
-#include <linux/init.h>
-#include <linux/kernel.h>
-#include <linux/acpi.h>
-#include <linux/gpio/consumer.h>
-#include <linux/gpio_keys.h>
-#include <linux/input.h>
-#include <linux/platform_device.h>
-#include <linux/pnp.h>
-
-#define DEVICE_NAME "baytrail_button"
-
-static void byt_button_device_release(struct device *);
-
-/*
- * Definition of buttons on the tablet. The ACPI index of each button
- * is defined in "Windows ACPI Design Guide for SoC Platforms"
- */
-#define	MAX_NBUTTONS	5
-
-struct byt_button_info {
-	const char *name;
-	int acpi_index;
-	unsigned int event_code;
-	int repeat;
-	int wakeup;
-	int gpio;
-};
-
-static struct byt_button_info byt_button_tbl[] = {
-	{"power", 0, KEY_POWER, 0, 1, -1},
-	{"home", 1, KEY_HOME, 0, 1, -1},
-	{"volume_up", 2, KEY_VOLUMEUP, 1, 0, -1},
-	{"volume_down", 3, KEY_VOLUMEDOWN, 1, 0, -1},
-	{"rotation_lock", 4, KEY_RO, 0, 0, -1},
-};
-
-/*
- * Some of the buttons like volume up/down are auto repeat, while others
- * are not. To support both, we register two gpio-keys device, and put
- * buttons into them based on whether the key should be auto repeat.
- */
-#define	BUTTON_TYPES	2
-
-static struct gpio_keys_button byt_buttons[BUTTON_TYPES][MAX_NBUTTONS];
-
-static struct gpio_keys_platform_data byt_button_data[BUTTON_TYPES] = {
-	{
-		.buttons	= byt_buttons[0],
-		.nbuttons	= 0,
-		.rep		= 0
-	},
-	{
-		.buttons	= byt_buttons[1],
-		.nbuttons	= 0,
-		.rep		= 1
-	}
-};
-
-static struct platform_device byt_button_device[BUTTON_TYPES] = {
-	{
-		.name	= "gpio-keys",
-		.id	= PLATFORM_DEVID_AUTO,
-		.dev	= {
-			.release	= byt_button_device_release,
-			.platform_data	= &byt_button_data[0],
-		}
-	},
-	{
-		.name	= "gpio-keys",
-		.id	= PLATFORM_DEVID_AUTO,
-		.dev	= {
-			.release	= byt_button_device_release,
-			.platform_data	= &byt_button_data[1],
-		}
-	}
-};
-
-/*
- * Get the Nth GPIO number from the ACPI object.
- */
-static int byt_button_lookup_gpio(struct device *dev, int acpi_index)
-{
-	struct gpio_desc *desc;
-	int ret;
-
-	desc = gpiod_get_index(dev, DEVICE_NAME, acpi_index);
-
-	if (IS_ERR(desc))
-		return -1;
-
-	ret = desc_to_gpio(desc);
-
-	gpiod_put(desc);
-
-	return ret;
-}
-
-static int byt_button_pnp_probe(struct pnp_dev *pdev,
-	const struct pnp_device_id *id)
-{
-	int i, j, r, ret;
-	int sz_tbl = sizeof(byt_button_tbl) / sizeof(byt_button_tbl[0]);
-	struct gpio_keys_button *gk;
-
-	/* Find GPIO number of all the buttons */
-	for (i = 0; i < sz_tbl; i++) {
-		byt_button_tbl[i].gpio = byt_button_lookup_gpio(&pdev->dev,
-						byt_button_tbl[i].acpi_index);
-	}
-
-	for (r = 0; r < BUTTON_TYPES; r++) {
-		gk = byt_buttons[r];
-		j = 0;
-
-		/* Register buttons in the correct device */
-		for (i = 0; i < sz_tbl; i++) {
-			if (byt_button_tbl[i].repeat == r &&
-			    byt_button_tbl[i].gpio > 0) {
-				gk[j].code = byt_button_tbl[i].event_code;
-				gk[j].gpio = byt_button_tbl[i].gpio;
-				gk[j].active_low = 1;
-				gk[j].desc = byt_button_tbl[i].name;
-				gk[j].type = EV_KEY;
-				gk[j].wakeup = byt_button_tbl[i].wakeup;
-				j++;
-			}
-		}
-
-		byt_button_data[r].nbuttons = j;
-
-		if (j == 0)
-			continue;
-
-		ret = platform_device_register(&byt_button_device[r]);
-		if (ret) {
-			dev_err(&pdev->dev, "failed to register %d\n", r);
-			return ret;
-		}
-	}
-
-	return 0;
-}
-
-static void byt_button_device_release(struct device *dev)
-{
-	/* Nothing to do */
-}
-
-static void byt_button_remove(struct pnp_dev *pdev)
-{
-	int r;
-
-	for (r = 0; r < BUTTON_TYPES; r++) {
-		if (byt_button_data[r].nbuttons)
-			platform_device_unregister(&byt_button_device[r]);
-	}
-}
-
-static const struct pnp_device_id byt_button_pnp_match[] = {
-	{.id = "INTCFD9", .driver_data = 0},
-	{.id = ""}
-};
-
-MODULE_DEVICE_TABLE(pnp, byt_button_pnp_match);
-
-static struct pnp_driver byt_button_pnp_driver = {
-	.name		= DEVICE_NAME,
-	.id_table	= byt_button_pnp_match,
-	.probe          = byt_button_pnp_probe,
-	.remove		= byt_button_remove,
-};
-
-static int __init byt_button_init(void)
-{
-	return pnp_register_driver(&byt_button_pnp_driver);
-}
-
-static void __exit byt_button_exit(void)
-{
-	pnp_unregister_driver(&byt_button_pnp_driver);
-}
-
-module_init(byt_button_init);
-module_exit(byt_button_exit);
-
-MODULE_LICENSE("GPL");
Index: linux/drivers/input/misc/soc_button_array.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/drivers/input/misc/soc_button_array.c	2014-04-20 08:33:55.559320715 -0700
@@ -0,0 +1,209 @@
+/*
+ * soc_button_array.c: supports the button array on SoC tablets originally
+ * running Windows 8.
+ *
+ * (C) Copyright 2014 Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; version 2
+ * of the License.
+ */
+
+#include <linux/module.h>
+#include <linux/input.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/acpi.h>
+#include <linux/gpio/consumer.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#include <linux/platform_device.h>
+#include <linux/pnp.h>
+
+/*
+ * Definition of buttons on the tablet. The ACPI index of each button
+ * is defined in section 2.8.7.2 of "Windows ACPI Design Guide for SoC
+ * Platforms"
+ */
+#define	MAX_NBUTTONS	5
+
+struct soc_button_info {
+	const char *name;
+	int acpi_index;
+	unsigned int event_code;
+	int repeat;
+	int wakeup;
+	int gpio;
+};
+
+static struct soc_button_info soc_button_tbl[] = {
+	{"power", 0, KEY_POWER, 0, 1, -1},
+	{"home", 1, KEY_HOME, 0, 1, -1},
+	{"volume_up", 2, KEY_VOLUMEUP, 1, 0, -1},
+	{"volume_down", 3, KEY_VOLUMEDOWN, 1, 0, -1},
+	{"rotation_lock", 4, KEY_RO, 0, 0, -1},
+};
+
+/*
+ * Some of the buttons like volume up/down are auto repeat, while others
+ * are not. To support both, we register two platform devices, and put
+ * buttons into them based on whether the key should be auto repeat.
+ */
+#define	BUTTON_TYPES	2
+
+static struct gpio_keys_button soc_buttons[BUTTON_TYPES][MAX_NBUTTONS];
+
+static struct gpio_keys_platform_data soc_button_data[BUTTON_TYPES] = {
+	{
+		.buttons	= soc_buttons[0],
+		.nbuttons	= 0,
+		.rep		= 0
+	},
+	{
+		.buttons	= soc_buttons[1],
+		.nbuttons	= 0,
+		.rep		= 1
+	}
+};
+
+static struct platform_device *soc_button_device[BUTTON_TYPES];
+
+/*
+ * Get the Nth GPIO number from the ACPI object.
+ */
+static int soc_button_lookup_gpio(struct device *dev, int acpi_index)
+{
+	struct gpio_desc *desc;
+	int ret;
+
+	desc = gpiod_get_index(dev, KBUILD_MODNAME, acpi_index);
+
+	if (IS_ERR(desc))
+		return -1;
+
+	ret = desc_to_gpio(desc);
+
+	gpiod_put(desc);
+
+	return ret;
+}
+
+/*
+ * Register platform device for a set of buttons.
+ */
+static int soc_button_register(int r)
+{
+	struct platform_device *pd;
+	int err;
+
+	pd = platform_device_alloc("gpio-keys", PLATFORM_DEVID_AUTO);
+	if (!pd) {
+		err = -ENOMEM;
+		goto err0;
+	}
+
+	err = platform_device_add_data(pd, &soc_button_data[r],
+					sizeof(soc_button_data[r]));
+	if (err)
+		goto err1;
+
+	err = platform_device_add(pd);
+	if (err)
+		goto err1;
+
+	soc_button_device[r] = pd;
+
+	return 0;
+
+err1:
+	platform_device_put(pd);
+err0:
+	return err;
+}
+
+static int soc_button_pnp_probe(struct pnp_dev *pdev,
+	const struct pnp_device_id *id)
+{
+	int i, j, r, ret;
+	int sz_tbl = sizeof(soc_button_tbl) / sizeof(soc_button_tbl[0]);
+	struct gpio_keys_button *gk;
+
+	/* Find GPIO number of all the buttons */
+	for (i = 0; i < sz_tbl; i++) {
+		soc_button_tbl[i].gpio = soc_button_lookup_gpio(&pdev->dev,
+						soc_button_tbl[i].acpi_index);
+	}
+
+	for (r = 0; r < BUTTON_TYPES; r++) {
+		gk = soc_buttons[r];
+		j = 0;
+
+		/* Register buttons in the correct device */
+		for (i = 0; i < sz_tbl; i++) {
+			if (soc_button_tbl[i].repeat == r &&
+			    soc_button_tbl[i].gpio > 0) {
+				gk[j].code = soc_button_tbl[i].event_code;
+				gk[j].gpio = soc_button_tbl[i].gpio;
+				gk[j].active_low = 1;
+				gk[j].desc = soc_button_tbl[i].name;
+				gk[j].type = EV_KEY;
+				gk[j].wakeup = soc_button_tbl[i].wakeup;
+				j++;
+			}
+		}
+
+		soc_button_data[r].nbuttons = j;
+
+		if (j == 0)
+			continue;
+
+		if (soc_button_register(r)) {
+			dev_err(&pdev->dev, "failed to register %d\n", r);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+static void soc_button_remove(struct pnp_dev *pdev)
+{
+	int r;
+
+	for (r = 0; r < BUTTON_TYPES; r++) {
+		if (soc_button_device[r]) {
+			platform_device_unregister(soc_button_device[r]);
+			soc_button_device[r] = NULL;
+		}
+	}
+}
+
+static const struct pnp_device_id soc_button_pnp_match[] = {
+	{.id = "INTCFD9", .driver_data = 0},
+	{.id = ""}
+};
+
+MODULE_DEVICE_TABLE(pnp, soc_button_pnp_match);
+
+static struct pnp_driver soc_button_pnp_driver = {
+	.name		= KBUILD_MODNAME,
+	.id_table	= soc_button_pnp_match,
+	.probe          = soc_button_pnp_probe,
+	.remove		= soc_button_remove,
+};
+
+static int __init soc_button_init(void)
+{
+	return pnp_register_driver(&soc_button_pnp_driver);
+}
+
+static void __exit soc_button_exit(void)
+{
+	pnp_unregister_driver(&soc_button_pnp_driver);
+}
+
+module_init(soc_button_init);
+module_exit(soc_button_exit);
+
+MODULE_LICENSE("GPL");
