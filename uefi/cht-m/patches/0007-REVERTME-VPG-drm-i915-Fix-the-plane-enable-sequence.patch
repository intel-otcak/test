From d74cd539176f5be5adb33575887907d6baa49630 Mon Sep 17 00:00:00 2001
Message-Id: <d74cd539176f5be5adb33575887907d6baa49630.1430272235.git.chang-joon.lee@intel.com>
In-Reply-To: <0282bce11918ec0dd0c4e7e3bd54e392c2b27a51.1430272235.git.chang-joon.lee@intel.com>
References: <0282bce11918ec0dd0c4e7e3bd54e392c2b27a51.1430272235.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Wed, 15 Apr 2015 13:59:01 +0530
Subject: [PATCH 07/10] REVERTME [VPG]: drm/i915: Fix the plane enable
 sequence.

The writes to primary plane should be allowed only when the primary
plane is enabled and active. Any updates to primary plane when it
is not enabled will lead to issues like display blank out and race
conditions during DPMS

This is a regression introduced by the following commit:

FORKLIFT [VPG]: drm: Update drm and video to drm-next as of ww28.3
commit de53da8cb9620da20d5e93a1b2b5c4fae7e83fbf,
Author: Jon Bloomfield <jon.bloomfield@intel.com>

REVERTME: Since the patch is fixing a regression, this needs to be
treated as REVERTME. The problem doesn't exist in upstream.

Issue: GMINL-7622
Change-Id: I5eee0a32d3f855f8fc538e177693c7560502b5a2
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/intel_display.c |   25 +++++--------------------
 1 file changed, 5 insertions(+), 20 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 63a52f4..43bbfcf 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2251,8 +2251,7 @@ static void intel_enable_primary_hw_plane(struct drm_i915_private *dev_priv,
 	struct drm_device *dev = dev_priv->dev;
 	struct intel_crtc *intel_crtc =
 		to_intel_crtc(dev_priv->pipe_to_crtc_mapping[pipe]);
-	int reg;
-	u32 val;
+	struct drm_crtc *crtc = &intel_crtc->base;
 
 	/* If the pipe isn't enabled, we can't pump pixels and may hang */
 	assert_pipe_enabled(dev_priv, pipe);
@@ -2262,13 +2261,8 @@ static void intel_enable_primary_hw_plane(struct drm_i915_private *dev_priv,
 
 	intel_crtc->primary_enabled = true;
 	dev_priv->pipe_plane_stat |= VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(pipe);
-
-	reg = DSPCNTR(plane);
-	val = I915_READ(reg);
-	WARN_ON(val & DISPLAY_PLANE_ENABLE);
-
-	I915_WRITE(reg, val | DISPLAY_PLANE_ENABLE);
-	intel_flush_primary_plane(dev_priv, plane);
+	dev_priv->display.update_primary_plane(crtc, crtc->primary->fb,
+					       crtc->x, crtc->y);
 
 	/*
 	 * BDW signals flip done immediately if the plane
@@ -2665,7 +2659,7 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 	bool rotate = false;
 	bool alpha_changed = false;
 	u32 dspcntr;
-	u32 reg;
+	u32 reg = DSPCNTR(plane);
 	u32 mask;
 	int pixel_size;
 	int plane_ddl, plane_prec_multi;
@@ -2676,7 +2670,6 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 
 	pixel_size = drm_format_plane_cpp(fb->pixel_format, 0);
 
-	reg = DSPCNTR(plane);
 	/*
 	 * In case of atomic update, primary enable/disable is already cached as
 	 * part of sprite flip, make use of that over here
@@ -2686,12 +2679,7 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 		intel_crtc->pri_update = false;
 	} else {
 		dspcntr = I915_READ(reg);
-		/*
-		 * Flag set during psr_exit in intel_dp.c, to
-		 * enable the primary plane after PSR exit.
-		 */
-		if (atomic_read(&dev_priv->psr.update_pending))
-			dspcntr |= DISPLAY_PLANE_ENABLE;
+		dspcntr |= DISPLAY_PLANE_ENABLE;
 	}
 
 	/*
@@ -5370,9 +5358,6 @@ static void valleyview_crtc_enable(struct drm_crtc *crtc)
 
 	i9xx_set_pipeconf(intel_crtc);
 
-	dev_priv->display.update_primary_plane(crtc, crtc->primary->fb,
-					       crtc->x, crtc->y);
-
 	intel_crtc->active = true;
 
 	dev_priv->pipe_plane_stat |= PIPE_ENABLE(intel_crtc->pipe);
-- 
1.7.9.5

