From 69f4a82d3361ff86c5a7db41e7bc1ae3b4eeb72e Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 4 Jun 2014 11:49:12 -0700
Subject: [PATCH 057/117] gmin: Unified camera platform driver

Modify the atomisp platform device callbacks slightly, implementing
them in a unified way for all gmin platforms.  Will extend cleanly to
support all known camera modules (i.e. that use a connector with 1.8v
and 2.8v power inputs, a 19.2MHz clock, and 2 available GPIO lines).
Move all the PMIC-specific register work in here for now, to be
removed in favor of proper regulator support when available.

Tested so far only with IMX on FFRD8.  More to come.

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 .../x86/platform/intel-mid/atomisp_gmin_platform.c | 355 ++++++++++++++++++++-
 include/linux/atomisp_gmin_platform.h              |   1 +
 include/linux/atomisp_platform.h                   |  10 +
 3 files changed, 365 insertions(+), 1 deletion(-)

diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
index f17cae1..ab2233c 100644
--- a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -3,6 +3,12 @@
 #include <linux/dmi.h>
 #include <linux/efi.h>
 #include <linux/acpi.h>
+#include <linux/delay.h>
+#include <media/v4l2-subdev.h>
+#include <linux/mfd/intel_soc_pmic.h>
+#include <linux/vlv2_plat_clock.h>
+#include <linux/regulator/consumer.h>
+#include <linux/gpio/consumer.h>
 #include <linux/platform_device.h>
 #include <linux/atomisp_platform.h>
 #include <linux/atomisp_gmin_platform.h>
@@ -17,7 +23,55 @@
 struct soft_platform_id spid;
 EXPORT_SYMBOL(spid);
 
-/* Submodules use type==0 for the end-of-list marker */
+#define DEVNAME_PMIC_AXP "INT33F4:00"
+#define DEVNAME_PMIC_TI  "INT33F5:00"
+
+/* Should be defined in vlv2_plat_clock API, isn't: */
+#define VLV2_CLK_19P2MHZ 1
+#define VLV2_CLK_ON      1
+#define VLV2_CLK_OFF     2
+
+/* X-Powers AXP288 register hackery */
+#define ALDO1_SEL_REG	0x28
+#define ALDO1_CTRL3_REG	0x13
+#define ALDO1_2P8V	0x16
+#define ALDO1_CTRL3_SHIFT 0x05
+
+#define ELDO_CTRL_REG   0x12
+
+#define ELDO1_SEL_REG	0x19
+#define ELDO1_1P8V	0x16
+#define ELDO1_CTRL_SHIFT 0x00
+
+#define ELDO2_SEL_REG	0x1a
+#define ELDO2_1P8V	0x16
+#define ELDO2_CTRL_SHIFT 0x01
+
+/* TI SND9039 PMIC register hackery */
+#define LDO9_REG	0x49
+#define LDO9_2P8V_ON	0x2f
+#define LDO9_2P8V_OFF	0x2e
+
+#define LDO10_REG	0x4a
+#define LDO10_1P8V_ON	0x59
+#define LDO10_1P8V_OFF	0x58
+
+struct gmin_subdev {
+	struct v4l2_subdev *subdev;
+	int clock_num;
+	struct gpio_desc *gpio0;
+	struct gpio_desc *gpio1;
+	struct regulator *v1p8_reg;
+	struct regulator *v2p8_reg;
+	bool v1p8_on;
+	bool v2p8_on;
+};
+
+static struct gmin_subdev gmin_subdevs[MAX_SUBDEVS];
+
+static enum { PMIC_UNSET=0, PMIC_REGULATOR, PMIC_AXP, PMIC_TI } pmic_id;
+
+/* The atomisp uses type==0 for the end-of-list marker, so leave space. */
 static struct intel_v4l2_subdev_table pdata_subdevs[MAX_SUBDEVS+1];
 
 static const struct atomisp_platform_data pdata = {
@@ -137,6 +191,7 @@ static const struct gmin_cfg_var ffrd8_vars[] = {
 	{ "INTCF1B:00_CsiLanes", "4" },
 	{ "INTCF1B:00_CsiFmt",   "13" },
 	{ "INTCF1B:00_CsiBayer", "1" },
+	{ "INTCF1B:00_CamClk", "0" },
 	{},
 };
 
@@ -176,6 +231,304 @@ static const struct {
 
 #define CFG_VAR_NAME_MAX 64
 
+static int gmin_platform_init(struct i2c_client *client)
+{
+	return 0;
+}
+
+static int gmin_platform_deinit(void)
+{
+	return 0;
+}
+
+static int match_i2c_name(struct device *dev, void *name)
+{
+	return !strcmp(to_i2c_client(dev)->name, (char *)name);
+}
+
+static bool i2c_dev_exists(char *name)
+{
+	return !!bus_find_device(&i2c_bus_type, NULL, name, match_i2c_name);
+}
+
+static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
+{
+	int i, ret;
+	struct device *dev;
+        struct i2c_client *client = v4l2_get_subdevdata(subdev);
+
+	if (!pmic_id) {
+		if (i2c_dev_exists(DEVNAME_PMIC_AXP))
+			pmic_id = PMIC_AXP;
+		else if (i2c_dev_exists(DEVNAME_PMIC_TI))
+			pmic_id = PMIC_TI;
+		else
+			pmic_id = PMIC_REGULATOR;
+	}
+
+	if (!client)
+		return NULL;
+
+	dev = client ? &client->dev : NULL;
+
+	for (i=0; i < MAX_SUBDEVS && gmin_subdevs[i].subdev; i++)
+		;
+	if (i >= MAX_SUBDEVS)
+		return NULL;
+
+	dev_info(dev, "gmin: initializing atomisp module subdev data.\n");
+
+	gmin_subdevs[i].subdev = subdev;
+	gmin_subdevs[i].clock_num = getvar_int(dev, "CamClk", 0);
+	gmin_subdevs[i].gpio0 = gpiod_get_index(dev, "cam_gpio0", 0);
+	gmin_subdevs[i].gpio1 = gpiod_get_index(dev, "cam_gpio1", 1);
+
+	if (!IS_ERR(gmin_subdevs[i].gpio0)) {
+		ret = gpiod_direction_output(gmin_subdevs[i].gpio0, 0);
+		if (ret)
+			dev_err(dev, "gpio0 set output failed: %d\n", ret);
+	} else {
+		gmin_subdevs[i].gpio0 = NULL;
+	}
+
+	if (!IS_ERR(gmin_subdevs[i].gpio1)) {
+		ret = gpiod_direction_output(gmin_subdevs[i].gpio1, 0);
+		if (ret)
+			dev_err(dev, "gpio1 set output failed: %d\n", ret);
+	} else {
+		gmin_subdevs[i].gpio1 = NULL;
+	}
+
+	if (pmic_id == PMIC_REGULATOR) {
+		gmin_subdevs[i].v1p8_reg = regulator_get(dev, "v1p8sx");
+		gmin_subdevs[i].v2p8_reg = regulator_get(dev, "v2p85sx");
+
+		/* Note: ideally we would initialize v[12]p8_on to the
+		 * output of regulator_is_enabled(), but sadly that
+		 * API is broken with the current drivers, returning
+		 * "1" for a regulator that will then emit a
+		 * "unbalanced disable" WARNing if we try to disable
+		 * it. */
+	}
+
+	return &gmin_subdevs[i];
+}
+
+static struct gmin_subdev *find_gmin_subdev(struct v4l2_subdev *subdev)
+{
+	int i;
+	for (i=0; i < MAX_SUBDEVS; i++)
+		if (gmin_subdevs[i].subdev == subdev)
+			return &gmin_subdevs[i];
+	return gmin_subdev_add(subdev);
+}
+
+static int gmin_gpio0_ctrl(struct v4l2_subdev *subdev, int on)
+{
+	struct gmin_subdev *gs = find_gmin_subdev(subdev);
+
+	if (gs && gs->gpio0) {
+		gpiod_set_value(gs->gpio0, on);
+		return 0;
+	}
+	return -EINVAL;
+}
+
+static int gmin_gpio1_ctrl(struct v4l2_subdev *subdev, int on)
+{
+	struct gmin_subdev *gs = find_gmin_subdev(subdev);
+	if (gs && gs->gpio1) {
+		gpiod_set_value(gs->gpio1, on);
+		return 0;
+	}
+	return -EINVAL;
+}
+
+static int axp_regulator_set(int sel_reg, u8 setting, int ctrl_reg, int shift, bool on)
+{
+	int ret;
+	int val;
+	u8 val_u8;
+
+	ret = intel_soc_pmic_writeb(sel_reg, setting);
+	if (ret)
+		return ret;
+	val = intel_soc_pmic_readb(ctrl_reg);
+	if (val < 0)
+		return val;
+	val_u8 = (u8)val;
+	if (on)
+		val |= ((u8)1 << shift);
+	else
+		val &= ~((u8)1 << shift);
+	ret = intel_soc_pmic_writeb(ctrl_reg, val_u8);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static int axp_v1p8_on(void)
+{
+	int ret;
+	ret = axp_regulator_set(ELDO2_SEL_REG, ELDO2_1P8V, ELDO_CTRL_REG,
+		ELDO2_CTRL_SHIFT, true);
+	if (ret)
+		return ret;
+
+	/* This sleep comes out of the gc2235 driver, which is the
+	 * only one I currently see that wants to set both 1.8v rails. */
+	usleep_range(110, 150);
+
+	ret = axp_regulator_set(ELDO1_SEL_REG, ELDO1_1P8V, ELDO_CTRL_REG,
+		ELDO1_CTRL_SHIFT, true);
+	if (ret)
+		axp_regulator_set(ELDO2_SEL_REG, ELDO2_1P8V, ELDO_CTRL_REG,
+				     ELDO2_CTRL_SHIFT, false);
+	return ret;
+}
+
+static int axp_v1p8_off(void)
+{
+	int ret;
+	ret = axp_regulator_set(ELDO1_SEL_REG, ELDO1_1P8V, ELDO_CTRL_REG,
+				ELDO1_CTRL_SHIFT, false);
+	ret |= axp_regulator_set(ELDO2_SEL_REG, ELDO2_1P8V, ELDO_CTRL_REG,
+				 ELDO2_CTRL_SHIFT, false);
+	return ret;
+}
+
+
+static int axp_v2p8_on(void)
+{
+	int ret;
+	ret = axp_regulator_set(ALDO1_SEL_REG, ALDO1_2P8V, ALDO1_CTRL3_REG,
+		ALDO1_CTRL3_SHIFT, true);
+	return ret;
+}
+
+static int axp_v2p8_off(void)
+{
+	return axp_regulator_set(ALDO1_SEL_REG, ALDO1_2P8V, ALDO1_CTRL3_REG,
+				 ALDO1_CTRL3_SHIFT, false);
+}
+
+int gmin_v1p8_ctrl(struct v4l2_subdev *subdev, int on)
+{
+	struct gmin_subdev *gs = find_gmin_subdev(subdev);
+
+	if (gs && gs->v1p8_on == on)
+		return 0;
+	gs->v1p8_on = on;
+
+	if (gs && gs->v1p8_reg) {
+		if (on)
+			return regulator_enable(gs->v1p8_reg);
+		else
+			return regulator_disable(gs->v1p8_reg);
+	}
+
+	if (pmic_id == PMIC_AXP) {
+		if (on)
+			return axp_v1p8_on();
+		else
+			return axp_v1p8_off();
+	}
+
+	if (pmic_id == PMIC_TI) {
+		if (on)
+			return intel_soc_pmic_writeb(LDO10_REG, LDO10_1P8V_ON);
+		else
+			return intel_soc_pmic_writeb(LDO10_REG, LDO10_1P8V_OFF);
+	}
+
+	return -EINVAL;
+}
+
+int gmin_v2p8_ctrl(struct v4l2_subdev *subdev, int on)
+{
+	struct gmin_subdev *gs = find_gmin_subdev(subdev);
+
+	if (gs && gs->v2p8_on == on)
+		return 0;
+	gs->v2p8_on = on;
+
+	if (gs && gs->v2p8_reg) {
+		if (on)
+			return regulator_enable(gs->v2p8_reg);
+		else
+			return regulator_disable(gs->v2p8_reg);
+	}
+
+	if (pmic_id == PMIC_AXP) {
+		if (on)
+			return axp_v2p8_on();
+		else
+			return axp_v2p8_off();
+	}
+
+	if (pmic_id == PMIC_TI) {
+		if (on)
+			return intel_soc_pmic_writeb(LDO9_REG, LDO9_2P8V_OFF);
+		else
+			return intel_soc_pmic_writeb(LDO9_REG, LDO9_2P8V_OFF);
+	}
+
+	return -EINVAL;
+}
+
+int gmin_flisclk_ctrl(struct v4l2_subdev *subdev, int on)
+{
+	int ret = 0;
+	struct gmin_subdev *gs = find_gmin_subdev(subdev);
+	if (on)
+		ret = vlv2_plat_set_clock_freq(gs->clock_num, VLV2_CLK_19P2MHZ);
+	if (ret)
+		return ret;
+	return vlv2_plat_configure_clock(gs->clock_num,
+					 on ? VLV2_CLK_ON : VLV2_CLK_OFF);
+}
+
+static int gmin_csi_cfg(struct v4l2_subdev *sd, int flag)
+{
+	int port, lanes, format, bayer;
+	struct device *dev;
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	if (!client)
+		return -ENODEV;
+	dev = &client->dev;
+
+	port = getvar_int(dev, "CsiPort", -1);
+	lanes = getvar_int(dev, "CsiLanes", -1);
+	format = getvar_int(dev, "CsiFmt", -1);
+	bayer = getvar_int(dev, "CsiBayer", -1);
+
+	if (port < 0 || lanes < 0 || format < 0 || bayer < 0) {
+		dev_err(dev, "Incomplete camera CSI configuration\n");
+		return -EINVAL;
+	}
+
+	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
+}
+
+static struct camera_sensor_platform_data gmin_plat = {
+	.gpio0_ctrl = gmin_gpio0_ctrl,
+	.gpio1_ctrl = gmin_gpio1_ctrl,
+	.v1p8_ctrl = gmin_v1p8_ctrl,
+	.v2p8_ctrl = gmin_v2p8_ctrl,
+	.flisclk_ctrl = gmin_flisclk_ctrl,
+	.platform_init = gmin_platform_init,
+	.platform_deinit = gmin_platform_deinit,
+	.csi_cfg = gmin_csi_cfg,
+};
+
+struct camera_sensor_platform_data *gmin_camera_platform_data(void)
+{
+	return &gmin_plat;
+}
+EXPORT_SYMBOL_GPL(gmin_camera_platform_data);
+
 /* Retrieves a device-specific configuration variable.  The dev
  * argument should be a device with an ACPI companion, as all
  * configuration is based on firmware ID. */
diff --git a/include/linux/atomisp_gmin_platform.h b/include/linux/atomisp_gmin_platform.h
index 5d74743..2290923 100644
--- a/include/linux/atomisp_gmin_platform.h
+++ b/include/linux/atomisp_gmin_platform.h
@@ -31,5 +31,6 @@ int gmin_get_config_var(struct device *dev, const char *var, char *out, size_t *
 int getvar_int(struct device *dev, const char *var, int def);
 int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
 		      u32 lanes, u32 format, u32 bayer_order, int flag);
+struct camera_sensor_platform_data *gmin_camera_platform_data(void);
 
 #endif
diff --git a/include/linux/atomisp_platform.h b/include/linux/atomisp_platform.h
index b4bc4c5..9d7e67f4 100644
--- a/include/linux/atomisp_platform.h
+++ b/include/linux/atomisp_platform.h
@@ -197,6 +197,16 @@ struct camera_sensor_platform_data {
 	char *(*msr_file_name)(void);
 	struct atomisp_camera_caps *(*get_camera_caps)(void);
 	int (*gpio_intr_ctrl)(struct v4l2_subdev *subdev);
+
+#ifdef CONFIG_GMIN_INTEL_MID
+	/* New G-Min power and GPIO interface, replaces
+	 * power/gpio_ctrl with methods to control individual
+	 * lines as implemented on all known camera modules. */
+	int (*gpio0_ctrl)(struct v4l2_subdev *subdev, int on);
+	int (*gpio1_ctrl)(struct v4l2_subdev *subdev, int on);
+	int (*v1p8_ctrl)(struct v4l2_subdev *subdev, int on);
+	int (*v2p8_ctrl)(struct v4l2_subdev *subdev, int on);
+#endif
 };
 
 struct camera_af_platform_data {
-- 
1.9.3

