From 8a204f295daeadc365145ad7602d2936c2f34972 Mon Sep 17 00:00:00 2001
From: Felipe Balbi <felipe.balbi@linux.intel.com>
Date: Tue, 5 Apr 2016 13:09:51 +0300
Subject: [PATCH 64/78] usb: dwc3: gadget: add trb enqueue/dequeue helpers

Add three little helpers which will aid in making
the code slightly easier to read. One helper
increments enqueue pointer, another increments
dequeue pointer and the last one tests if we're
dealing with the last TRB.

Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
(cherry picked from commit ef966b9d33533b0bf01fb8c4d586ac3b20a3bdb5)
Signed-off-by: Janusz Dziedzic <januszx.dziedzic@intel.com>

Conflicts:
	drivers/usb/dwc3/gadget.c

Change-Id: I38005b195bcf2bd221c14bb2f0f032ca9881bc2e
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-19337
Reviewed-on: https://android.intel.com:443/511189
---
 drivers/usb/dwc3/gadget.c | 35 ++++++++++++++++++++++++-----------
 1 file changed, 24 insertions(+), 11 deletions(-)

diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 5a2adb1..6a1e00c 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -219,6 +219,21 @@ int dwc3_gadget_resize_tx_fifos(struct dwc3 *dwc)
 	return 0;
 }
 
+static void dwc3_ep_inc_enq(struct dwc3_ep *dep)
+{
+	dep->trb_enqueue++;
+}
+
+static void dwc3_ep_inc_deq(struct dwc3_ep *dep)
+{
+	dep->trb_dequeue++;
+}
+
+static int dwc3_ep_is_last_trb(unsigned int index)
+{
+	return (index % DWC3_TRB_NUM) == (DWC3_TRB_NUM - 1);
+}
+
 void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
 		int status)
 {
@@ -228,16 +243,15 @@ void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
 	if (req->started) {
 		i = 0;
 		do {
-			dep->trb_dequeue++;
+			dwc3_ep_inc_deq(dep);
 			/*
 			 * Skip LINK TRB. We can't use req->trb and check for
 			 * DWC3_TRBCTL_LINK_TRB because it points the TRB we
 			 * just completed (not the LINK TRB).
 			 */
-			if (((dep->trb_dequeue % DWC3_TRB_NUM) ==
-				DWC3_TRB_NUM - 1) &&
+			if (dwc3_ep_is_last_trb(dep->trb_dequeue) &&
 				usb_endpoint_xfer_isoc(dep->endpoint.desc))
-				dep->trb_dequeue++;
+				dwc3_ep_inc_deq(dep);
 		} while(++i < req->request.num_mapped_sgs);
 		req->started = false;
 	}
@@ -795,11 +809,11 @@ static void dwc3_prepare_one_trb(struct dwc3_ep *dep,
 		req->first_trb_index = dep->trb_enqueue % DWC3_TRB_NUM;
 	}
 
-	dep->trb_enqueue++;
+	dwc3_ep_inc_enq(dep);
 	/* Skip the LINK-TRB on ISOC */
-	if (((dep->trb_enqueue % DWC3_TRB_NUM) == DWC3_TRB_NUM - 1) &&
+	if (dwc3_ep_is_last_trb(dep->trb_enqueue) &&
 			usb_endpoint_xfer_isoc(dep->endpoint.desc))
-		dep->trb_enqueue++;
+		dwc3_ep_inc_enq(dep);
 
 	trb->size = DWC3_TRB_SIZE_LENGTH(length);
 	trb->bpl = lower_32_bits(dma);
@@ -1047,10 +1061,9 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 					dep->trb_dequeue +=
 						 req->request.num_mapped_sgs;
 				else
-					dep->trb_dequeue++;
-				if ((dep->trb_dequeue % DWC3_TRB_NUM) ==
-							DWC3_TRB_NUM - 1)
-					dep->trb_dequeue++;
+					dwc3_ep_inc_deq(dep);
+				if (dwc3_ep_is_last_trb(dep->trb_dequeue))
+					dwc3_ep_inc_deq(dep);
 			}
 			return ret;
 		} else {
-- 
1.9.1

