From e7f222f39198a9f66e5afee1334980abcd8c263d Mon Sep 17 00:00:00 2001
Message-Id: <e7f222f39198a9f66e5afee1334980abcd8c263d.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: kirankumar <kiran.s.kumar@intel.com>
Date: Mon, 26 Aug 2013 16:53:54 +0530
Subject: [PATCH 009/312] MUST_UPSTREAM [VPG]: drm/i915: Enable content
 protection decrypt for Plane and Sprite

Issue: AIAF-667

Extend content protection decryption bit for primary plane. Available currently
only for sprite planes. Also removed computation for sprite surface live planes
as it is not having decryption bit.

Change-Id: I9e21ed8d528b7c2b8fa24eb884e4ddd8be1dc08a
Signed-off-by: kirankumar <kiran.s.kumar@intel.com>
(cherry picked from commit 3a855807e47db507d032880adf5bcfedcba0c0c8)

Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/intel_display.c |   50 +++++++++++++++++-----------------
 1 file changed, 25 insertions(+), 25 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 3a2f42e..4544e22 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -12374,8 +12374,9 @@ int i915_enable_plane_reserved_reg_bit_2(struct drm_device *dev, void *data,
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct drm_i915_enable_plane_reserved_reg_bit_2 *rrb = data;
 	u32 enable = rrb->enable;
-	u32 val, reg1, reg2;
-	u32 pipe_id;
+	u32 val, reg;
+	u32 surface_id;
+	struct intel_plane *intel_plane;
 
 	/* Added this code for making pipe generalization in HSW */
 	struct drm_mode_object *drmmode_obj;
@@ -12384,38 +12385,37 @@ int i915_enable_plane_reserved_reg_bit_2(struct drm_device *dev, void *data,
 	if (!drm_core_check_feature(dev, DRIVER_MODESET))
 		return -ENODEV;
 
-	drmmode_obj = drm_mode_object_find(dev, rrb->crtc_id,
-			DRM_MODE_OBJECT_CRTC);
+	/* crtc_id is not for Plane*/
+	drmmode_obj = drm_mode_object_find(dev, rrb->plane,
+			DRM_MODE_OBJECT_PLANE);
 
-	if (!drmmode_obj) {
-		DRM_ERROR("no such CRTC id\n");
-		return -EINVAL;
+	if (drmmode_obj) {
+		intel_plane = to_intel_plane(obj_to_plane(drmmode_obj));
+		surface_id = intel_plane->pipe;
+		reg = SPRSURF(surface_id);
+	} else {
+		drmmode_obj = drm_mode_object_find(dev, rrb->plane,
+				DRM_MODE_OBJECT_CRTC);
+		if (drmmode_obj) {
+			crtc = to_intel_crtc(obj_to_crtc(drmmode_obj));
+			surface_id = crtc->plane;
+			reg = DSPSURF(surface_id);
+		} else {
+			DRM_ERROR("no such CRTC id for Plane or Sprite\n");
+			return -EINVAL;
+		}
 	}
 
-	crtc = to_intel_crtc(obj_to_crtc(drmmode_obj));
-	pipe_id = crtc->pipe;
-
-	reg1 = SPRSURF(pipe_id);
-	reg2 = SPRSURFLIVE(pipe_id);
-
 	if (enable) {
 		/* Program bit enable if it was requested */
-		val = I915_READ(reg1);
-		val |= SURF_RESERVED_REG_BIT_2_ENABLE;
-		I915_WRITE(reg1, val);
-
-		val = I915_READ(reg2);
+		val = I915_READ(reg);
 		val |= SURF_RESERVED_REG_BIT_2_ENABLE;
-		I915_WRITE(reg2, val);
+		I915_WRITE(reg, val);
 	} else {
 		/* Clear the older rrb setting */
-		val = I915_READ(reg1);
-		val &= ~SURF_RESERVED_REG_BIT_2_ENABLE;
-		I915_WRITE(reg1, val);
-
-		val = I915_READ(reg2);
+		val = I915_READ(reg);
 		val &= ~SURF_RESERVED_REG_BIT_2_ENABLE;
-		I915_WRITE(reg2, val);
+		I915_WRITE(reg, val);
 	}
 	return 0;
 }
-- 
1.7.9.5

