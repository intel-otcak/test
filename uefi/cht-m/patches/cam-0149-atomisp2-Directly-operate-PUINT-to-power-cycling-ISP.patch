From d109aaf0fa1a880ee3fb286087bc3e8c373fa93c Mon Sep 17 00:00:00 2001
From: Bin Han <bin.b.han@intel.com>
Date: Tue, 4 Nov 2014 15:38:13 +0800
Subject: [PATCH 149/164] atomisp2: Directly operate PUINT to power cycling
 ISP to bypass PM runtime interface

Directly operate PUINT to power cycling ISP to bypass PM runtime interface.

Change-Id: Ib44ef5f8b98246477982f6d3f96fc36bc8d97409
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-8929
Signed-off-by: Bin Han <bin.b.han@intel.com>
Signed-off-by: Guoqingx.zhang <guoqingx.zhang@intel.com>
Reviewed-on: https://android.intel.com:443/296471
Reviewed-on: https://icggerrit.ir.intel.com/29121
Approver: Wei Tao <wei.tao@intel.com>
Build: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
Maintainer: Wei Tao <wei.tao@intel.com>
---
 .../pci/atomisp2/atomisp_driver/atomisp-regs.h     |    2 --
 .../pci/atomisp2/atomisp_driver/atomisp_cmd.c      |   11 +++++++++--
 .../pci/atomisp2/atomisp_driver/atomisp_cmd.h      |    5 +++++
 .../pci/atomisp2/atomisp_driver/atomisp_v4l2.c     |   10 ++++------
 4 files changed, 18 insertions(+), 10 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp-regs.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp-regs.h
index 71ab3e0..0208037 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp-regs.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp-regs.h
@@ -104,7 +104,6 @@
 
 #define MRFLD_MAX_ZOOM_FACTOR	1024
 
-#ifdef CONFIG_GMIN_INTEL_MID
 /* MRFLD ISP POWER related */
 #define MRFLD_ISPSSPM0         0x39
 #define MRFLD_ISPSSPM0_ISPSSC_OFFSET   0
@@ -112,7 +111,6 @@
 #define MRFLD_ISPSSPM0_ISPSSC_MASK     0x3
 #define MRFLD_ISPSSPM0_IUNIT_POWER_ON  0
 #define MRFLD_ISPSSPM0_IUNIT_POWER_OFF 0x3
-#endif
 
 /* MRFLD CSI lane configuration related */
 #define MRFLD_PORT_CONFIG_NUM  8
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index 784f158e..d26e080 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -67,6 +67,7 @@
 #include "error_support.h"
 #include "hrt/bits.h"
 
+
 /* We should never need to run the flash for more than 2 frames.
  * At 15fps this means 133ms. We set the timeout a bit longer.
  * Each flash driver is supposed to set its own timeout, but
@@ -360,13 +361,19 @@ int atomisp_reset(struct atomisp_device *isp)
 
 	dev_dbg(isp->dev, "%s\n", __func__);
 	atomisp_css_suspend(isp);
-	ret = pm_runtime_put_sync(isp->dev);
+	ret = atomisp_runtime_suspend(isp->dev);
+	if (ret < 0)
+		dev_err(isp->dev, "atomisp_runtime_suspend failed, %d\n", ret);
+	ret = atomisp_mrfld_power_down(isp);
 	if (ret < 0) {
 		dev_err(isp->dev, "can not disable ISP power\n");
 	} else {
-		ret = pm_runtime_get_sync(isp->dev);
+		ret = atomisp_mrfld_power_up(isp);
 		if (ret < 0)
 			dev_err(isp->dev, "can not enable ISP power\n");
+		ret = atomisp_runtime_resume(isp->dev);
+		if (ret < 0)
+			dev_err(isp->dev, "atomisp_runtime_resume failed, %d\n", ret);
 	}
 	ret = atomisp_css_resume(isp);
 	if (ret)
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h
index 9eefa5f..578d8c6 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.h
@@ -394,4 +394,9 @@ int atomisp_inject_a_fake_event(struct atomisp_sub_device *asd, int *event);
  */
 int atomisp_get_invalid_frame_num(struct video_device *vdev,
 			int *invalid_frame_num);
+
+int atomisp_mrfld_power_up(struct atomisp_device *isp);
+int atomisp_mrfld_power_down(struct atomisp_device *isp);
+int atomisp_runtime_suspend(struct device *dev);
+int atomisp_runtime_resume(struct device *dev);
 #endif /* __ATOMISP_CMD_H__ */
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c
index 09bdd90..fd50305 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_v4l2.c
@@ -356,9 +356,8 @@ done:
 	return 0;
 }
 
-#ifdef CONFIG_GMIN_INTEL_MID
 /* Workaround for pmu_nc_set_power_state not ready in MRFLD */
-static int atomisp_mrfld_power_down(struct atomisp_device *isp)
+int atomisp_mrfld_power_down(struct atomisp_device *isp)
 {
 	unsigned long timeout;
 	u32 reg_value;
@@ -396,7 +395,7 @@ static int atomisp_mrfld_power_down(struct atomisp_device *isp)
 
 
 /* Workaround for pmu_nc_set_power_state not ready in MRFLD */
-static int atomisp_mrfld_power_up(struct atomisp_device *isp)
+int atomisp_mrfld_power_up(struct atomisp_device *isp)
 {
 	unsigned long timeout;
 	u32 reg_value;
@@ -425,9 +424,8 @@ static int atomisp_mrfld_power_up(struct atomisp_device *isp)
 		usleep_range(100, 150);
 	};
 }
-#endif
 
-static int atomisp_runtime_suspend(struct device *dev)
+int atomisp_runtime_suspend(struct device *dev)
 {
 	struct atomisp_device *isp = (struct atomisp_device *)
 		dev_get_drvdata(dev);
@@ -450,7 +448,7 @@ static int atomisp_runtime_suspend(struct device *dev)
 	return ret;
 }
 
-static int atomisp_runtime_resume(struct device *dev)
+int atomisp_runtime_resume(struct device *dev)
 {
 	struct atomisp_device *isp = (struct atomisp_device *)
 		dev_get_drvdata(dev);
-- 
1.7.9.5

