From d91cf190364b79a5cd1a16f48306301384d80000 Mon Sep 17 00:00:00 2001
From: Bin Han <bin.b.han@intel.com>
Date: Thu, 18 Feb 2016 15:07:33 +0800
Subject: [PATCH 1/7] Revert "atomisp2: delay flushing the delayed_init_work
 thread"

This reverts commit 14fe9415d311a5a127f767838a95523553854a66 which
actually caused one regression issue in BTNS customer.

Original-Tracked_On: #H1504161619
Change-Id: I3e0b388f46c19ab13d8f77c783750b3e9811e75e
Signed-off-by: Bin Han <bin.b.han@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/102371
Reviewed-by: DaleiX Liu <daleix.liu@intel.com>
Reviewed-by: HaiqiangX Yao <haiqiangx.yao@intel.com>
Approver: Jian Xu Zheng <jian.xu.zheng@intel.com>
Build: Dessert M BXT RVP (SC)
Approver: Jing Tao <jing.tao@intel.com>
Validation-Android: Wei Tao <wei.tao@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-21584
Signed-off-by: Tao Wei <wei.tao@intel.com>
Reviewed-on: https://android.intel.com:443/475693
---
 .../pci/atomisp2/atomisp_driver/atomisp_cmd.c      | 10 ---------
 .../pci/atomisp2/atomisp_driver/atomisp_ioctl.c    | 25 ++++++++--------------
 2 files changed, 9 insertions(+), 26 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index d5d7f7c..787afb6 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -6425,16 +6425,6 @@ int atomisp_exp_id_capture(struct atomisp_sub_device *asd, int *exp_id)
 		return -EINVAL;
 	}
 
-	/* Flush the delayed init work thread */
-	if (asd->delayed_init == ATOMISP_DELAYED_INIT_QUEUED) {
-		flush_work(&asd->delayed_init_work);
-		rt_mutex_unlock(&isp->mutex);
-		if (wait_for_completion_interruptible(
-				&asd->init_done) != 0)
-			return -ERESTARTSYS;
-		rt_mutex_lock(&isp->mutex);
-	}
-
 	dev_dbg(isp->dev, "%s exp_id %d\n", __func__, value);
 	ret = atomisp_css_exp_id_capture(asd, value);
 	if (ret) {
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index ea562eb..f0a4edb 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -1815,6 +1815,15 @@ static int atomisp_streamon(struct file *file, void *fh,
 				dev_dbg(isp->dev, "ZSL last preview raw buffer id: %u\n",
 					asd->latest_preview_exp_id);
 
+			if (asd->delayed_init == ATOMISP_DELAYED_INIT_QUEUED) {
+				flush_work(&asd->delayed_init_work);
+				rt_mutex_unlock(&isp->mutex);
+				if (wait_for_completion_interruptible(
+						&asd->init_done) != 0)
+					return -ERESTARTSYS;
+				rt_mutex_lock(&isp->mutex);
+			}
+
 			/* handle per_frame_setting parameter and buffers */
 			atomisp_handle_parameter_and_buffer(pipe);
 
@@ -1830,22 +1839,6 @@ static int atomisp_streamon(struct file *file, void *fh,
 			 * atomisp_css_exp_id_capture and trigger real capture
 			 */
 			if (!asd->enable_raw_buffer_lock->val) {
-				/*
-				 * If raw lock/unlock turned on, streamon video0
-				 * does not mean trigger capture, therefore
-				 * we can delay flushing the delayed_init_work
-				 * until 1st time capture is triggered.
-				 */
-				if (asd->delayed_init ==
-					ATOMISP_DELAYED_INIT_QUEUED) {
-					flush_work(&asd->delayed_init_work);
-					rt_mutex_unlock(&isp->mutex);
-					if (wait_for_completion_interruptible(
-							&asd->init_done) != 0)
-						return -ERESTARTSYS;
-					rt_mutex_lock(&isp->mutex);
-				}
-
 				ret = atomisp_css_offline_capture_configure(asd,
 					asd->params.offline_parm.num_captures,
 					asd->params.offline_parm.skip_frames,
-- 
1.9.1

