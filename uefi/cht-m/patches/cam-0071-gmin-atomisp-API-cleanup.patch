From c569cfa5619309e910d95d42d06ecee840adb84d Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 2 Jul 2014 09:54:24 -0700
Subject: [PATCH 071/117] gmin atomisp: API cleanup

"getvar_int" got moved into the platform API at one point without
being assigned a clean symbol name.

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 arch/x86/platform/intel-mid/Makefile                |  9 +++------
 arch/x86/platform/intel-mid/atomisp_gmin_platform.c | 21 ++++++++-------------
 .../intel-mid/device_libs/platform_gc0339.c         |  8 ++++----
 .../intel-mid/device_libs/platform_gc2235.c         |  8 ++++----
 .../intel-mid/device_libs/platform_mt9m114.c        |  8 ++++----
 .../intel-mid/device_libs/platform_ov5693.c         |  8 ++++----
 arch/x86/platform/intel-mid/platform_imx134.c       |  8 ++++----
 arch/x86/platform/intel-mid/platform_ov2722.c       |  8 ++++----
 .../camera/drivers/media/i2c/gc0339.c               |  4 ++--
 .../camera/drivers/media/i2c/gc2235.c               |  4 ++--
 .../camera/drivers/media/i2c/imx/imx.c              |  6 +++---
 .../camera/drivers/media/i2c/mt9m114.c              |  4 ++--
 .../camera/drivers/media/i2c/ov2722.c               |  4 ++--
 .../camera/drivers/media/i2c/ov5693/ov5693.c        |  4 ++--
 include/linux/atomisp_gmin_platform.h               |  4 ++--
 15 files changed, 50 insertions(+), 58 deletions(-)

diff --git a/arch/x86/platform/intel-mid/Makefile b/arch/x86/platform/intel-mid/Makefile
index e0c381a..7c8eaa8 100644
--- a/arch/x86/platform/intel-mid/Makefile
+++ b/arch/x86/platform/intel-mid/Makefile
@@ -1,15 +1,12 @@
 obj-$(CONFIG_X86_INTEL_MID) += intel-mid.o intel_mid_vrtc.o mfld.o mrfl.o
 obj-$(CONFIG_EARLY_PRINTK_INTEL_MID) += early_printk_intel_mid.o
 
-obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o platform_imx134.o atomisp_gmin_platform.o
-obj-$(CONFIG_GMIN_INTEL_MID) += platform_ov2722.o
-
-obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o platform_imx134.o atomisp_gmin_platform.o
+obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o
+obj-$(CONFIG_GMIN_INTEL_MID) += atomisp_gmin_platform.o
 
 obj-$(subst m,y,$(CONFIG_VIDEO_MT9M114)) += device_libs/platform_mt9m114.o
-obj-$(subst m,y,$(CONFIG_VIDEO_GC2235)) += device_libs/platform_gc2235.o
-obj-$(subst m,y,$(CONFIG_VIDEO_GC0339)) += device_libs/platform_gc0339.o
 obj-$(subst m,y,$(CONFIG_VIDEO_OV5693)) += device_libs/platform_ov5693.o
+obj-$(subst m,y,$(CONFIG_VIDEO_OV2722)) += platform_ov2722.o
 
 # SFI specific code
 ifdef CONFIG_X86_INTEL_MID
diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
index c914354..dd6705a 100644
--- a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -289,7 +289,7 @@ static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
 	dev_info(dev, "gmin: initializing atomisp module subdev data.\n");
 
 	gmin_subdevs[i].subdev = subdev;
-	gmin_subdevs[i].clock_num = getvar_int(dev, "CamClk", 0);
+	gmin_subdevs[i].clock_num = gmin_get_var_int(dev, "CamClk", 0);
 	gmin_subdevs[i].gpio0 = gpiod_get_index(dev, "cam_gpio0", 0);
 	gmin_subdevs[i].gpio1 = gpiod_get_index(dev, "cam_gpio1", 1);
 
@@ -509,10 +509,10 @@ static int gmin_csi_cfg(struct v4l2_subdev *sd, int flag)
 		return -ENODEV;
 	dev = &client->dev;
 
-	port = getvar_int(dev, "CsiPort", -1);
-	lanes = getvar_int(dev, "CsiLanes", -1);
-	format = getvar_int(dev, "CsiFmt", -1);
-	bayer = getvar_int(dev, "CsiBayer", -1);
+	port = gmin_get_var_int(dev, "CsiPort", -1);
+	lanes = gmin_get_var_int(dev, "CsiLanes", -1);
+	format = gmin_get_var_int(dev, "CsiFmt", -1);
+	bayer = gmin_get_var_int(dev, "CsiBayer", -1);
 
 	if (port < 0 || lanes < 0 || format < 0 || bayer < 0) {
 		dev_err(dev, "Incomplete camera CSI configuration\n");
@@ -603,7 +603,7 @@ int gmin_get_config_var(struct device *dev, const char *var, char *out, size_t *
 }
 EXPORT_SYMBOL_GPL(gmin_get_config_var);
 
-int getvar_int(struct device *dev, const char *var, int def)
+int gmin_get_var_int(struct device *dev, const char *var, int def)
 {
 	char val[16];
 	size_t len = sizeof(val);
@@ -618,15 +618,10 @@ int getvar_int(struct device *dev, const char *var, int def)
 
 	return ret ? def : result;
 }
-EXPORT_SYMBOL_GPL(getvar_int);
+EXPORT_SYMBOL_GPL(gmin_get_var_int);
 
-/*
- * Cloned from MCG platform_camera.c because it's small and
- * self-contained.  All it does is maintain the V4L2 subdev hostdate
- * pointer
- */
 int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
-			     u32 lanes, u32 format, u32 bayer_order, int flag)
+		      u32 lanes, u32 format, u32 bayer_order, int flag)
 {
         struct i2c_client *client = v4l2_get_subdevdata(sd);
         struct camera_mipi_info *csi = NULL;
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c b/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c
index 2ebac59..a2c441a 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_gc0339.c
@@ -218,10 +218,10 @@ static int gc0339_csi_configure(struct v4l2_subdev *sd, int flag)
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	if (client && ACPI_COMPANION(&client->dev)) {
 		struct device *dev = &client->dev;
-		port = getvar_int(dev, "CsiPort", port);
-		lanes = getvar_int(dev, "CsiLanes", lanes);
-		format = getvar_int(dev, "CsiFmt", format);
-		bayer = getvar_int(dev, "CsiBayer", bayer);
+		port = gmin_get_var_int(dev, "CsiPort", port);
+		lanes = gmin_get_var_int(dev, "CsiLanes", lanes);
+		format = gmin_get_var_int(dev, "CsiFmt", format);
+		bayer = gmin_get_var_int(dev, "CsiBayer", bayer);
 	}
 
 	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c b/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
index d09be7a..474c787 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
@@ -431,10 +431,10 @@ static int gc2235_csi_configure(struct v4l2_subdev *sd, int flag)
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	if (client && ACPI_COMPANION(&client->dev)) {
 		struct device *dev = &client->dev;
-		port = getvar_int(dev, "CsiPort", port);
-		lanes = getvar_int(dev, "CsiLanes", lanes);
-		format = getvar_int(dev, "CsiFmt", format);
-		bayer = getvar_int(dev, "CsiBayer", bayer);
+		port = gmin_get_var_int(dev, "CsiPort", port);
+		lanes = gmin_get_var_int(dev, "CsiLanes", lanes);
+		format = gmin_get_var_int(dev, "CsiFmt", format);
+		bayer = gmin_get_var_int(dev, "CsiBayer", bayer);
 	}
 
 	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_mt9m114.c b/arch/x86/platform/intel-mid/device_libs/platform_mt9m114.c
index ebf120e..8366199 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_mt9m114.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_mt9m114.c
@@ -391,10 +391,10 @@ static int mt9m114_csi_configure(struct v4l2_subdev *sd, int flag)
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	if (client && ACPI_COMPANION(&client->dev)) {
 		struct device *dev = &client->dev;
-		port = getvar_int(dev, "CsiPort", port);
-		lanes = getvar_int(dev, "CsiLanes", lanes);
-		format = getvar_int(dev, "CsiFmt", format);
-		bayer = getvar_int(dev, "CsiBayer", bayer);
+		port = gmin_get_var_int(dev, "CsiPort", port);
+		lanes = gmin_get_var_int(dev, "CsiLanes", lanes);
+		format = gmin_get_var_int(dev, "CsiFmt", format);
+		bayer = gmin_get_var_int(dev, "CsiBayer", bayer);
 	}
 
 	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c b/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c
index aecbd9d..4b191a9 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c
@@ -329,10 +329,10 @@ static int ov5693_csi_configure(struct v4l2_subdev *sd, int flag)
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	if (client && ACPI_COMPANION(&client->dev)) {
 		struct device *dev = &client->dev;
-		port = getvar_int(dev, "CsiPort", port);
-		lanes = getvar_int(dev, "CsiLanes", lanes);
-		format = getvar_int(dev, "CsiFmt", format);
-		bayer = getvar_int(dev, "CsiBayer", bayer);
+		port = gmin_get_var_int(dev, "CsiPort", port);
+		lanes = gmin_get_var_int(dev, "CsiLanes", lanes);
+		format = gmin_get_var_int(dev, "CsiFmt", format);
+		bayer = gmin_get_var_int(dev, "CsiBayer", bayer);
 	}
 	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
 }
diff --git a/arch/x86/platform/intel-mid/platform_imx134.c b/arch/x86/platform/intel-mid/platform_imx134.c
index 555e5f1..0b601d9 100644
--- a/arch/x86/platform/intel-mid/platform_imx134.c
+++ b/arch/x86/platform/intel-mid/platform_imx134.c
@@ -336,10 +336,10 @@ static int imx134_csi_configure(struct v4l2_subdev *sd, int flag)
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	if (client && ACPI_COMPANION(&client->dev)) {
 		struct device *dev = &client->dev;
-		port = getvar_int(dev, "CsiPort", port);
-		lanes = getvar_int(dev, "CsiLanes", lanes);
-		format = getvar_int(dev, "CsiFmt", format);
-		bayer = getvar_int(dev, "CsiBayer", bayer);
+		port = gmin_get_var_int(dev, "CsiPort", port);
+		lanes = gmin_get_var_int(dev, "CsiLanes", lanes);
+		format = gmin_get_var_int(dev, "CsiFmt", format);
+		bayer = gmin_get_var_int(dev, "CsiBayer", bayer);
 	}
 
 	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
diff --git a/arch/x86/platform/intel-mid/platform_ov2722.c b/arch/x86/platform/intel-mid/platform_ov2722.c
index 846273e..f467322 100644
--- a/arch/x86/platform/intel-mid/platform_ov2722.c
+++ b/arch/x86/platform/intel-mid/platform_ov2722.c
@@ -426,10 +426,10 @@ static int ov2722_csi_configure(struct v4l2_subdev *sd, int flag)
         struct i2c_client *client = v4l2_get_subdevdata(sd);
 	if (client && ACPI_COMPANION(&client->dev)) {
 		struct device *dev = &client->dev;
-		port = getvar_int(dev, "CsiPort", port);
-		lanes = getvar_int(dev, "CsiLanes", lanes);
-		format = getvar_int(dev, "CsiFmt", format);
-		bayer = getvar_int(dev, "CsiBayer", bayer);
+		port = gmin_get_var_int(dev, "CsiPort", port);
+		lanes = gmin_get_var_int(dev, "CsiLanes", lanes);
+		format = gmin_get_var_int(dev, "CsiFmt", format);
+		bayer = gmin_get_var_int(dev, "CsiBayer", bayer);
 	}
 
 	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c b/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c
index 0d680bd..0229375 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc0339.c
@@ -1264,9 +1264,9 @@ static int gc0339_s_config(struct v4l2_subdev *sd,
 	 * load.  Ideally this would be stored as data on the
 	 * subdevices, but this API matches upstream better. */
 	ret = atomisp_register_i2c_module(sd, client, platform_data,
-					  getvar_int(&client->dev, "CamType",
+					  gmin_get_var_int(&client->dev, "CamType",
 						     RAW_CAMERA),
-					  getvar_int(&client->dev, "CsiPort",
+					  gmin_get_var_int(&client->dev, "CsiPort",
 						     ATOMISP_CAMERA_PORT_PRIMARY));
 	if (ret) {
 		dev_err(&client->dev,
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
index 14931f2..479da98 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
@@ -1313,9 +1313,9 @@ static int gc2235_s_config(struct v4l2_subdev *sd,
 	 * load.  Ideally this would be stored as data on the
 	 * subdevices, but this API matches upstream better. */
 	ret = atomisp_register_i2c_module(sd, client, dev->platform_data,
-					  getvar_int(&client->dev, "CamType",
+					  gmin_get_var_int(&client->dev, "CamType",
 						     RAW_CAMERA),
-					  getvar_int(&client->dev, "CsiPort",
+					  gmin_get_var_int(&client->dev, "CsiPort",
 						     ATOMISP_CAMERA_PORT_PRIMARY));
 
 	if (ret) {
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
index 00b9f16..843a131 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
@@ -2312,7 +2312,7 @@ static int imx_probe(struct i2c_client *client,
 	if (id) {
 		dev->i2c_id = id->driver_data;
 	} else {
-		dev->i2c_id = getvar_int(&client->dev, "ImxId", IMX134_ID);
+		dev->i2c_id = gmin_get_var_int(&client->dev, "ImxId", IMX134_ID);
 	}
 	dev->fmt_idx = 0;
 	dev->sensor_id = IMX_ID_DEFAULT;
@@ -2381,9 +2381,9 @@ static int imx_probe(struct i2c_client *client,
 	/* FIXME: type and port need to come from ACPI/EFI config,
 	 * this is hard coded to FFRD8 */
 	ret = atomisp_register_i2c_module(client,
-					  getvar_int(&client->dev, "CamType",
+					  gmin_get_var_int(&client->dev, "CamType",
 						     RAW_CAMERA),
-					  getvar_int(&client->dev, "CsiPort",
+					  gmin_get_var_int(&client->dev, "CsiPort",
 						     ATOMISP_CAMERA_PORT_PRIMARY));
 	if (ret) {
 		imx_remove(client);
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
index 8c650a7..c07e841 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
@@ -1157,9 +1157,9 @@ static int mt9m114_s_config(struct v4l2_subdev *sd,
 	/* FIXME: type and port should come from ACPI/EFI
 	 * This is hard coded to FFRD8. */
 	ret = atomisp_register_i2c_module(sd, client, platform_data,
-					  getvar_int(&client->dev, "CamType",
+					  gmin_get_var_int(&client->dev, "CamType",
 						     SOC_CAMERA),
-					  getvar_int(&client->dev, "CsiPort",
+					  gmin_get_var_int(&client->dev, "CsiPort",
 						     ATOMISP_CAMERA_PORT_PRIMARY));
 	if (ret) {
 		dev_err(&client->dev,
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
index bd7fe98..79edb84 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2722.c
@@ -1419,9 +1419,9 @@ static int ov2722_probe(struct i2c_client *client,
 		ov2722_remove(client);
 
 	ret = atomisp_register_i2c_module(&dev->sd, client, ovpdev,
-					  getvar_int(&client->dev, "CamType",
+					  gmin_get_var_int(&client->dev, "CamType",
 						     RAW_CAMERA),
-					  getvar_int(&client->dev, "CsiPort",
+					  gmin_get_var_int(&client->dev, "CsiPort",
 						     ATOMISP_CAMERA_PORT_SECONDARY));
 
 	printk("\0010ANDY %s:%d\n", __func__, __LINE__);
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c b/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c
index 6241daa..3f3bc69 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c
@@ -1089,9 +1089,9 @@ static int ov5693_s_config(struct v4l2_subdev *sd,
 	 * load.  Ideally this would be stored as data on the
 	 * subdevices, but this API matches upstream better. */
 	ret = atomisp_register_i2c_module(sd, client, platform_data,
-					  getvar_int(&client->dev, "CamType",
+					  gmin_get_var_int(&client->dev, "CamType",
 						     RAW_CAMERA),
-					  getvar_int(&client->dev, "CsiPort",
+					  gmin_get_var_int(&client->dev, "CsiPort",
 						     ATOMISP_CAMERA_PORT_PRIMARY));
 	if (ret) {
 		dev_err(&client->dev,
diff --git a/include/linux/atomisp_gmin_platform.h b/include/linux/atomisp_gmin_platform.h
index 2290923..47836dc 100644
--- a/include/linux/atomisp_gmin_platform.h
+++ b/include/linux/atomisp_gmin_platform.h
@@ -28,9 +28,9 @@ int atomisp_register_i2c_module(struct v4l2_subdev *subdev,
 struct v4l2_subdev *atomisp_gmin_find_subdev(struct i2c_adapter *adapter,
 					     struct i2c_board_info *board_info);
 int gmin_get_config_var(struct device *dev, const char *var, char *out, size_t *out_len);
-int getvar_int(struct device *dev, const char *var, int def);
+int gmin_get_var_int(struct device *dev, const char *var, int def);
 int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
-		      u32 lanes, u32 format, u32 bayer_order, int flag);
+                      u32 lanes, u32 format, u32 bayer_order, int flag);
 struct camera_sensor_platform_data *gmin_camera_platform_data(void);
 
 #endif
-- 
1.9.3

