From e17dba9a3392773328b0f4b1586a9ccda6e696a5 Mon Sep 17 00:00:00 2001
From: "Cao,Bing Bu" <bingbu.cao@intel.com>
Date: Tue, 7 Jul 2015 13:20:33 +0000
Subject: [PATCH 444/462] atomisp2: Do NOT access the userspace address
 directly

In current atomisp driver, atomisp_cp_lsc_table() will
access the userspace address directly, it is very dangerous
as the pages has been unmapped, we MUST use copy_from_user
to access the userspace memory.

Same cases for dvs2_coefs, 6axis_config and morph_table
parameters update.

Change-Id: I2c3126633d032320e296844d210e18b492d26349
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-40936
Signed-off-by: Cao,Bing Bu <bingbu.cao@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/63721
Reviewed-by: Tian Shu Qiu <tian.shu.qiu@intel.com>
Build: IMIN (SC)
Reviewed-by: Yunliang Ding <yunliang.ding@intel.com>
Approver: Jing Tao <jing.tao@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Build: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Maintainer: WeiX Meng <weix.meng@intel.com>
---
 drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c |  158 ++++++----
 1 file changed, 99 insertions(+), 59 deletions(-)

Index: b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
===================================================================
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c	2016-03-08 10:03:14.516534415 -0800
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c	2016-03-08 10:09:45.705467330 -0800
@@ -3466,6 +3466,7 @@
 	unsigned int len_table;
 	struct atomisp_css_shading_table *shading_table;
 	struct atomisp_css_shading_table *old_table;
+	struct atomisp_shading_table st;
 
 	if (!source_st)
 		return 0;
@@ -3476,10 +3477,18 @@
 	if (!from_user && css_param->update_flag.shading_table)
 		return 0;
 
+	if (copy_from_compatible(&st, source_st,
+				 sizeof(struct atomisp_shading_table),
+				 from_user)) {
+		dev_err(asd->isp->dev, "copy shading table failed!");
+		return -EFAULT;
+	}
+
 	old_table = css_param->shading_table;
 
+
 	/* user config is to disable the shading table. */
-	if (!source_st->enable) {
+	if (!st.enable) {
 		/* Generate a minimum table with enable = 0. */
 		shading_table = atomisp_css_shading_table_alloc(1, 1);
 		if (!shading_table)
@@ -3490,33 +3499,39 @@
 
 	/* Setting a new table. Validate first - all tables must be set */
 	for (i = 0; i < ATOMISP_NUM_SC_COLORS; i++) {
-		if (!source_st->data[i])
+		if (!st.data[i]) {
+			dev_err(asd->isp->dev, "shading table validate failed");
 			return -EINVAL;
+		}
 	}
 
 	/* Shading table size per color */
-	if (source_st->width > SH_CSS_MAX_SCTBL_WIDTH_PER_COLOR ||
-		source_st->height > SH_CSS_MAX_SCTBL_HEIGHT_PER_COLOR)
+	if (st.width > SH_CSS_MAX_SCTBL_WIDTH_PER_COLOR ||
+	    st.height > SH_CSS_MAX_SCTBL_HEIGHT_PER_COLOR) {
+		dev_err(asd->isp->dev, "shading table w/h validate failed!");
 		return -EINVAL;
+	}
 
-	shading_table = atomisp_css_shading_table_alloc(source_st->width,
-							source_st->height);
-	if (!shading_table)
-			return -ENOMEM;
+	shading_table = atomisp_css_shading_table_alloc(st.width,
+							st.height);
+	if (!shading_table) {
+		dev_err(asd->isp->dev, "shading table alloc failed!");
+		return -ENOMEM;
+	}
 
-	len_table = source_st->width * source_st->height * ATOMISP_SC_TYPE_SIZE;
+	len_table = st.width * st.height * ATOMISP_SC_TYPE_SIZE;
 	for (i = 0; i < ATOMISP_NUM_SC_COLORS; i++) {
 		if (copy_from_compatible(shading_table->data[i],
-			source_st->data[i], len_table, from_user)) {
+			st.data[i], len_table, from_user)) {
 			atomisp_css_shading_table_free(shading_table);
 			return -EFAULT;
 		}
 
 	}
-	shading_table->sensor_width = source_st->sensor_width;
-	shading_table->sensor_height = source_st->sensor_height;
-	shading_table->fraction_bits = source_st->fraction_bits;
-	shading_table->enable = source_st->enable;
+	shading_table->sensor_width = st.sensor_width;
+	shading_table->sensor_height = st.sensor_height;
+	shading_table->fraction_bits = st.fraction_bits;
+	shading_table->enable = st.enable;
 
 	/* No need to update shading table if it is the same */
 	if (old_table != NULL &&
@@ -3563,6 +3578,7 @@
 	struct atomisp_css_dvs_grid_info *cur =
 		atomisp_css_get_dvs_grid_info(&asd->params.curr_grid_info);
 	int dvs_hor_coef_bytes, dvs_ver_coef_bytes;
+	struct ia_css_dvs2_coefficients dvs2_coefs;
 
 	if (!coefs || !cur)
 		return 0;
@@ -3570,8 +3586,15 @@
 	if (!from_user && css_param->update_flag.dvs2_coefs)
 		return 0;
 
-	if (sizeof(*cur) != sizeof(coefs->grid) ||
-	    memcmp(&coefs->grid, cur, sizeof(*cur))) {
+	if (copy_from_compatible(&dvs2_coefs, coefs,
+				 sizeof(struct ia_css_dvs2_coefficients),
+				 from_user)) {
+		dev_err(asd->isp->dev, "copy dvs2 coef failed");
+		return -EFAULT;
+	}
+
+	if (sizeof(*cur) != sizeof(dvs2_coefs.grid) ||
+	    memcmp(&dvs2_coefs.grid, cur, sizeof(dvs2_coefs.grid))) {
 		dev_err(asd->isp->dev, "dvs grid mis-match!\n");
 		/* If the grid info in the argument differs from the current
 		   grid info, we tell the caller to reset the grid size and
@@ -3579,14 +3602,14 @@
 		return -EAGAIN;
 	}
 
-	if (coefs->hor_coefs.odd_real == NULL ||
-	    coefs->hor_coefs.odd_imag == NULL ||
-	    coefs->hor_coefs.even_real == NULL ||
-	    coefs->hor_coefs.even_imag == NULL ||
-	    coefs->ver_coefs.odd_real == NULL ||
-	    coefs->ver_coefs.odd_imag == NULL ||
-	    coefs->ver_coefs.even_real == NULL ||
-	    coefs->ver_coefs.even_imag == NULL)
+	if (dvs2_coefs.hor_coefs.odd_real == NULL ||
+	    dvs2_coefs.hor_coefs.odd_imag == NULL ||
+	    dvs2_coefs.hor_coefs.even_real == NULL ||
+	    dvs2_coefs.hor_coefs.even_imag == NULL ||
+	    dvs2_coefs.ver_coefs.odd_real == NULL ||
+	    dvs2_coefs.ver_coefs.odd_imag == NULL ||
+	    dvs2_coefs.ver_coefs.even_real == NULL ||
+	    dvs2_coefs.ver_coefs.even_imag == NULL)
 		return -EINVAL;
 
 	if (!css_param->dvs2_coeff) {
@@ -3599,21 +3622,21 @@
 	dvs_hor_coef_bytes = asd->params.dvs_hor_coef_bytes;
 	dvs_ver_coef_bytes = asd->params.dvs_ver_coef_bytes;
 	if (copy_from_compatible(css_param->dvs2_coeff->hor_coefs.odd_real,
-	    coefs->hor_coefs.odd_real, dvs_hor_coef_bytes, from_user) ||
+	    dvs2_coefs.hor_coefs.odd_real, dvs_hor_coef_bytes, from_user) ||
 	    copy_from_compatible(css_param->dvs2_coeff->hor_coefs.odd_imag,
-	    coefs->hor_coefs.odd_imag, dvs_hor_coef_bytes, from_user) ||
+	    dvs2_coefs.hor_coefs.odd_imag, dvs_hor_coef_bytes, from_user) ||
 	    copy_from_compatible(css_param->dvs2_coeff->hor_coefs.even_real,
-	    coefs->hor_coefs.even_real, dvs_hor_coef_bytes, from_user) ||
+	    dvs2_coefs.hor_coefs.even_real, dvs_hor_coef_bytes, from_user) ||
 	    copy_from_compatible(css_param->dvs2_coeff->hor_coefs.even_imag,
-	    coefs->hor_coefs.even_imag, dvs_hor_coef_bytes, from_user) ||
+	    dvs2_coefs.hor_coefs.even_imag, dvs_hor_coef_bytes, from_user) ||
 	    copy_from_compatible(css_param->dvs2_coeff->ver_coefs.odd_real,
-	    coefs->ver_coefs.odd_real, dvs_ver_coef_bytes, from_user) ||
+	    dvs2_coefs.ver_coefs.odd_real, dvs_ver_coef_bytes, from_user) ||
 	    copy_from_compatible(css_param->dvs2_coeff->ver_coefs.odd_imag,
-	    coefs->ver_coefs.odd_imag, dvs_ver_coef_bytes, from_user) ||
+	    dvs2_coefs.ver_coefs.odd_imag, dvs_ver_coef_bytes, from_user) ||
 	    copy_from_compatible(css_param->dvs2_coeff->ver_coefs.even_real,
-	    coefs->ver_coefs.even_real, dvs_ver_coef_bytes, from_user) ||
+	    dvs2_coefs.ver_coefs.even_real, dvs_ver_coef_bytes, from_user) ||
 	    copy_from_compatible(css_param->dvs2_coeff->ver_coefs.even_imag,
-	    coefs->ver_coefs.even_imag, dvs_ver_coef_bytes, from_user)) {
+	    dvs2_coefs.ver_coefs.even_imag, dvs_ver_coef_bytes, from_user)) {
 		ia_css_dvs2_coefficients_free(css_param->dvs2_coeff);
 		css_param->dvs2_coeff = NULL;
 		return -EFAULT;
@@ -3631,6 +3654,7 @@
 {
 	struct atomisp_css_dvs_6axis_config *dvs_6axis_config;
 	struct atomisp_css_dvs_6axis_config *old_6axis_config;
+	struct atomisp_css_dvs_6axis_config t_6axis_config;
 	struct ia_css_stream *stream =
 			asd->stream_env[ATOMISP_INPUT_STREAM_GENERAL].stream;
 	struct atomisp_css_dvs_grid_info *dvs_grid_info =
@@ -3654,11 +3678,19 @@
 	/* check whether need to reallocate for 6 axis config */
 	old_6axis_config = css_param->dvs_6axis;
 	dvs_6axis_config = old_6axis_config;
+
+	if (copy_from_compatible(&t_6axis_config, source_6axis_config,
+			   sizeof(struct atomisp_dvs_6axis_config),
+			   from_user)) {
+		dev_err(asd->isp->dev, "copy morph table failed!");
+		return -EFAULT;
+	}
+
 	if (old_6axis_config &&
-	    (old_6axis_config->width_y != source_6axis_config->width_y ||
-	     old_6axis_config->height_y != source_6axis_config->height_y ||
-	     old_6axis_config->width_uv != source_6axis_config->width_uv ||
-	     old_6axis_config->height_uv != source_6axis_config->height_uv)) {
+	    (old_6axis_config->width_y != t_6axis_config.width_y ||
+	     old_6axis_config->height_y != t_6axis_config.height_y ||
+	     old_6axis_config->width_uv != t_6axis_config.width_uv ||
+	     old_6axis_config->height_uv != t_6axis_config.height_uv)) {
 		ia_css_dvs2_6axis_config_free(css_param->dvs_6axis);
 		css_param->dvs_6axis = NULL;
 
@@ -3671,34 +3703,34 @@
 			return -ENOMEM;
 	}
 
-	dvs_6axis_config->exp_id = source_6axis_config->exp_id;
+	dvs_6axis_config->exp_id = t_6axis_config.exp_id;
 
 	if (copy_from_compatible(dvs_6axis_config->xcoords_y,
-			   source_6axis_config->xcoords_y,
-			   source_6axis_config->width_y *
-			   source_6axis_config->height_y *
-			   sizeof(*source_6axis_config->xcoords_y),
+			   t_6axis_config.xcoords_y,
+			   t_6axis_config.width_y *
+			   t_6axis_config.height_y *
+			   sizeof(*dvs_6axis_config->xcoords_y),
 			   from_user))
 		goto error;
 	if (copy_from_compatible(dvs_6axis_config->ycoords_y,
-			   source_6axis_config->ycoords_y,
-			   source_6axis_config->width_y *
-			   source_6axis_config->height_y *
-			   sizeof(*source_6axis_config->ycoords_y),
+			   t_6axis_config.ycoords_y,
+			   t_6axis_config.width_y *
+			   t_6axis_config.height_y *
+			   sizeof(*dvs_6axis_config->ycoords_y),
 			   from_user))
 		goto error;
 	if (copy_from_compatible(dvs_6axis_config->xcoords_uv,
-			   source_6axis_config->xcoords_uv,
-			   source_6axis_config->width_uv *
-			   source_6axis_config->height_uv *
-			   sizeof(*source_6axis_config->xcoords_uv),
+			   t_6axis_config.xcoords_uv,
+			   t_6axis_config.width_uv *
+			   t_6axis_config.height_uv *
+			   sizeof(*dvs_6axis_config->xcoords_uv),
 			   from_user))
 		goto error;
 	if (copy_from_compatible(dvs_6axis_config->ycoords_uv,
-			   source_6axis_config->ycoords_uv,
-			   source_6axis_config->width_uv *
-			   source_6axis_config->height_uv *
-			   sizeof(*source_6axis_config->ycoords_uv),
+			   t_6axis_config.ycoords_uv,
+			   t_6axis_config.width_uv *
+			   t_6axis_config.height_uv *
+			   sizeof(*dvs_6axis_config->ycoords_uv),
 			   from_user))
 		goto error;
 
@@ -3721,6 +3753,7 @@
 	int ret = -EFAULT;
 	unsigned int i;
 	struct atomisp_css_morph_table *morph_table;
+	struct atomisp_css_morph_table mtbl;
 	struct atomisp_css_morph_table *old_morph_table;
 
 	if (!source_morph_table)
@@ -3731,24 +3764,31 @@
 
 	old_morph_table = css_param->morph_table;
 
+	if (copy_from_compatible(&mtbl, source_morph_table,
+				 sizeof(struct atomisp_morph_table),
+				 from_user)) {
+		dev_err(asd->isp->dev, "copy morph table failed!");
+		return -EFAULT;
+	}
+
 	morph_table = atomisp_css_morph_table_allocate(
-		source_morph_table->width,
-		source_morph_table->height);
+		mtbl.width,
+		mtbl.height);
 	if (!morph_table)
 		return -ENOMEM;
 
 	for (i = 0; i < CSS_MORPH_TABLE_NUM_PLANES; i++) {
 		if (copy_from_compatible(morph_table->coordinates_x[i],
 			source_morph_table->coordinates_x[i],
-			source_morph_table->height * source_morph_table->width *
-			sizeof(*source_morph_table->coordinates_x[i]),
+			mtbl.height * mtbl.width *
+			sizeof(*morph_table->coordinates_x[i]),
 			from_user))
 			goto error;
 
 		if (copy_from_compatible(morph_table->coordinates_y[i],
 			source_morph_table->coordinates_y[i],
-			source_morph_table->height * source_morph_table->width *
-			sizeof(*source_morph_table->coordinates_y[i]),
+			mtbl.height * mtbl.width *
+			sizeof(*morph_table->coordinates_y[i]),
 			from_user))
 			goto error;
 	}
