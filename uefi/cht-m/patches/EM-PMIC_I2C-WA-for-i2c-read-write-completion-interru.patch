From 81b7d024e8bc43a08280cd53fea9081d5f4d3ace Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Mon, 4 Jan 2016 12:10:06 +0530
Subject: [PATCH] [EM/PMIC_I2C]: WA for i2c read/write completion interrupt

When i2c transaction is initiated over pmic i2c for register
read/write, the i2c read/write transaction completion interrupt
is not triggered, but the data register gets updated with right
value for a read transaction and data write is successful for write
transaction. Hence, upon interrupt timeout read the data register
for read transaction and return success for write transaction.

Change-Id: I051eda42be7bf921fc0c86a7c0c3aeb45c536e9a
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-10136
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
Reviewed-on: https://android.intel.com:443/453751
---
 drivers/i2c/busses/i2c-wcove-pmic.c | 31 +++++++++++++++++++++----------
 1 file changed, 21 insertions(+), 10 deletions(-)

diff --git a/drivers/i2c/busses/i2c-wcove-pmic.c b/drivers/i2c/busses/i2c-wcove-pmic.c
index 5055f2a..75addde 100644
--- a/drivers/i2c/busses/i2c-wcove-pmic.c
+++ b/drivers/i2c/busses/i2c-wcove-pmic.c
@@ -58,7 +58,8 @@
 #define I2COVRCTRL_I2C_WR	D0
 #define CHGRIRQ0_ADDR		0x6E0A
 
-#define IRQ0_I2C_BIT_POS	 1
+#define IRQ0_I2C_BIT_POS	1
+#define I2C_REG_RW_MAX_TOUT	3
 
 struct pmic_i2c_dev {
 	int irq;
@@ -114,16 +115,24 @@ static inline int pmic_i2c_read_xfer(struct i2c_msg msg)
 
 		ret = wait_event_timeout(pmic_dev->i2c_wait,
 				(pmic_dev->i2c_rw & mask),
-				HZ);
-
+				msecs_to_jiffies(I2C_REG_RW_MAX_TOUT));
 		if (ret == 0) {
-			return -ETIMEDOUT;
+			/*
+			 * Not considering the wait event timeout error as pmic
+			 * i2c is not updating read/write completion interrupt
+			 * timely.
+			 */
+			ret = intel_soc_pmic_readb(I2COVRRDDATA_ADDR);
+			if (ret < 0)
+				return -ETIMEDOUT;
+			msg.buf[i] = (u8) ret;
 		} else if (pmic_dev->i2c_rw == I2C_NACK) {
 			return  -EIO;
 		} else {
-			msg.buf[i] = intel_soc_pmic_readb(I2COVRRDDATA_ADDR);
-			if (msg.buf[i] < 0)
+			ret = intel_soc_pmic_readb(I2COVRRDDATA_ADDR);
+			if (ret < 0)
 				return -EIO;
+			msg.buf[i] = (u8) ret;
 		}
 	}
 	return 0;
@@ -159,10 +168,12 @@ static inline int pmic_i2c_write_xfer(struct i2c_msg msg)
 
 		ret = wait_event_timeout(pmic_dev->i2c_wait,
 				(pmic_dev->i2c_rw & mask),
-				HZ);
-		if (ret == 0)
-			return -ETIMEDOUT;
-		else if (pmic_dev->i2c_rw == I2C_NACK)
+				msecs_to_jiffies(I2C_REG_RW_MAX_TOUT));
+		/*
+		 * Not considering the wait event timeout error as pmic i2c is
+		 * not updating read/write completion interrupt timely.
+		 */
+		if (pmic_dev->i2c_rw == I2C_NACK)
 			return -EIO;
 	}
 	return 0;
-- 
1.9.1

