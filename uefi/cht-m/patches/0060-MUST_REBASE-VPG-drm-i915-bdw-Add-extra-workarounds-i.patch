From db15303da42ca88e7611b4b8543bc0a375954202 Mon Sep 17 00:00:00 2001
Message-Id: <db15303da42ca88e7611b4b8543bc0a375954202.1413836944.git.chang-joon.lee@intel.com>
In-Reply-To: <5d8aa9994fff43965a6fab8c9a528b8b47a9d624.1413836944.git.chang-joon.lee@intel.com>
References: <5d8aa9994fff43965a6fab8c9a528b8b47a9d624.1413836944.git.chang-joon.lee@intel.com>
From: Michel Thierry <michel.thierry@intel.com>
Date: Mon, 15 Sep 2014 17:10:31 +0100
Subject: [PATCH 60/71] MUST_REBASE [VPG]: drm/i915/bdw: Add extra workarounds
 in  render init

These workarounds are part of the android tree (needed for media).
In specific, this commit brings back:
 -WaDisableInstructionShootdown:bdw
 -WaDisableFenceDestinationToSLM:bdw
 -WaHdcDisableFetchWhenMasked:bdw
 -WaAllocateSLML3CacheCtrlOverride:bdw

Attempts to upstream these have been ignored:
http://lists.freedesktop.org/archives/intel-gfx/2014-July/049180.html

Issue: GMIN-3475
Signed-off-by: Michel Thierry <michel.thierry@intel.com>
(cherry picked from commit 3ce4e7040dacf703845871a9101e79b2c7454ebf)

Change-Id: Ibd6acce2d1ab6c4def92236cdc5ab6df3483bea9
---
 drivers/gpu/drm/i915/intel_pm.c         |    6 ------
 drivers/gpu/drm/i915/intel_ringbuffer.c |   16 ++++++++++++++--
 2 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index ef872c4..4a0cc8c 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -6160,12 +6160,6 @@ static void broadwell_init_clock_gating(struct drm_device *dev)
 	I915_WRITE(GEN8_L3CNTLREG1, (I915_READ(GEN8_L3CNTLREG1) &
 			GEN8_TAG_CLK_OFFTIME_MASK) |
 			GEN8_TAG_CLK_OFFTIME);
-
-	/* WaAllocateSLML3CacheCtrlOverride:bdw */
-	I915_WRITE(GEN8_L3CNTLREG,
-			GEN8_L3CNTLREG_ALL_L3_CLIENT_POOL |
-			GEN8_L3CNTLREG_URB_ALLOCATION |
-			GEN8_L3CNTLREG_SLM_MODE_ENABLE);
 }
 
 static void haswell_init_clock_gating(struct drm_device *dev)
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.c b/drivers/gpu/drm/i915/intel_ringbuffer.c
index 686ce85..6d807b5 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@ -1089,10 +1089,12 @@ void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
 	struct intel_engine_cs *ring = ringbuf->ring;
 
 	/* WaDisablePartialInstShootdown:bdw */
+	/* WaDisableInstructionShootdown:bdw */
 	/* WaDisableThreadStallDopClockGating:bdw */
 	/* FIXME: Unclear whether we really need this on production bdw. */
 	ring->emit_wa(ringbuf, GEN8_ROW_CHICKEN,
 			   _MASKED_BIT_ENABLE(PARTIAL_INSTRUCTION_SHOOTDOWN_DISABLE
+					     | INSTRUCTION_SHOOTDOWN_DISABLE
 					     | STALL_DOP_GATING_DISABLE));
 
 	/* WaDisableDopClockGating:bdw May not be needed for production */
@@ -1116,9 +1118,13 @@ void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
 	/* Use Force Non-Coherent whenever executing a 3D context. This is a
 	 * workaround for for a possible hang in the unlikely event a TLB
 	 * invalidation occurs during a PSD flush.
+	 * WaDisableFenceDestinationToSLM:bdw
+	 * WaHdcDisableFetchWhenMasked:bdw
 	 */
 	ring->emit_wa(ringbuf, HDC_CHICKEN0,
-			   _MASKED_BIT_ENABLE(HDC_FORCE_NON_COHERENT));
+		   _MASKED_BIT_ENABLE(HDC_FENCE_DESTINATION_TO_SLM_DISABLE
+				   | HDC_DONOT_FETCH_MEM_WHEN_MASKED
+				   | HDC_FORCE_NON_COHERENT));
 
 	/* Wa4x4STCOptimizationDisable:bdw */
 	ring->emit_wa(ringbuf, CACHE_MODE_1,
@@ -1134,6 +1140,12 @@ void bdw_emit_workarounds(struct intel_ringbuffer *ringbuf)
 	 */
 	ring->emit_wa(ringbuf, GEN7_GT_MODE,
 			   GEN6_WIZ_HASHING_MASK | GEN6_WIZ_HASHING_16x4);
+
+	/* WaAllocateSLML3CacheCtrlOverride:bdw */
+	ring->emit_wa(ringbuf, GEN8_L3CNTLREG,
+			GEN8_L3CNTLREG_ALL_L3_CLIENT_POOL |
+			GEN8_L3CNTLREG_URB_ALLOCATION |
+			GEN8_L3CNTLREG_SLM_MODE_ENABLE);
 }
 
 static int bdw_init_workarounds(struct intel_ringbuffer *ringbuf)
@@ -1155,7 +1167,7 @@ static int bdw_init_workarounds(struct intel_ringbuffer *ringbuf)
 	 * update the number of dwords required based on the
 	 * actual number of workarounds applied
 	 */
-	ret = intel_ring_begin(ring, 24);
+	ret = intel_ring_begin(ring, 27);
 	if (ret)
 		return ret;
 
-- 
1.7.9.5

