From 0bceb232cfde98a287c1e1a99a9390377cd709fe Mon Sep 17 00:00:00 2001
Message-Id: <0bceb232cfde98a287c1e1a99a9390377cd709fe.1428007496.git.feitong.yi@intel.com>
In-Reply-To: <96b4927b026b1cf56e9298f537d7ca517a5902b4.1428007496.git.feitong.yi@intel.com>
References: <96b4927b026b1cf56e9298f537d7ca517a5902b4.1428007496.git.feitong.yi@intel.com>
From: sivakumar thulasimani <sivakumar.thulasimani@intel.com>
Date: Mon, 16 Mar 2015 17:48:37 +0530
Subject: [PATCH 6/6] FOR_UPSTREAM [VPG]: drm/i915: Bug fix for PSR enabling

PSR is not getting enabled because setup_done flag is cleared when
dp connector initialization is performed. This patch cleans up this
dependancy on a single setup_done variable and moves it inside
intel_dp encoder.

Issue:GMINL-7167
Change-Id: I52fae3a757aa1e0756430daf70db2debc87c34a7
Signed-off-by: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |    1 -
 drivers/gpu/drm/i915/i915_suspend.c  |    3 +--
 drivers/gpu/drm/i915/intel_display.c |   10 +++++-----
 drivers/gpu/drm/i915/intel_dp.c      |   28 +++++++++++++---------------
 drivers/gpu/drm/i915/intel_drv.h     |    3 ++-
 5 files changed, 21 insertions(+), 24 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 9dd8d07..940005d 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -746,7 +746,6 @@ struct i915_drrs {
 struct i915_psr {
 	bool sink_support;
 	bool source_ok;
-	bool setup_done;
 	atomic_t update_pending;
 	struct mutex lock;
 	struct delayed_work work;
diff --git a/drivers/gpu/drm/i915/i915_suspend.c b/drivers/gpu/drm/i915/i915_suspend.c
index 3ca95b2..2729fb3 100644
--- a/drivers/gpu/drm/i915/i915_suspend.c
+++ b/drivers/gpu/drm/i915/i915_suspend.c
@@ -313,8 +313,7 @@ static void i915_restore_display(struct drm_device *dev)
 	}
 
 	/* Force a full PSR setup on resume */
-	dev_priv->psr.setup_done = false;
-	intel_edp_psr_update(dev);
+	intel_edp_psr_update(dev, true);
 
 	/* only restore FBC info on the platform that supports FBC*/
 	intel_disable_fbc(dev);
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 3ff9b5e..9c74402 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -3380,7 +3380,7 @@ intel_pipe_set_base(struct drm_crtc *crtc, int x, int y,
 	if (IS_VALLEYVIEW(dev))
 		intel_vlv_edp_psr_update(dev);
 	else
-		intel_edp_psr_update(dev);
+		intel_edp_psr_update(dev, false);
 	intel_update_fbc(dev);
 	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
@@ -4599,7 +4599,7 @@ static void intel_crtc_enable_planes(struct drm_crtc *crtc)
 	if (IS_VALLEYVIEW(dev))
 		intel_vlv_edp_psr_update(dev);
 	else
-		intel_edp_psr_update(dev);
+		intel_edp_psr_update(dev, false);
 	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 }
@@ -4908,7 +4908,7 @@ static void ironlake_crtc_disable(struct drm_crtc *crtc)
 
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
-	intel_edp_psr_update(dev);
+	intel_edp_psr_update(dev, false);
 	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 }
@@ -4964,7 +4964,7 @@ static void haswell_crtc_disable(struct drm_crtc *crtc)
 
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
-	intel_edp_psr_update(dev);
+	intel_edp_psr_update(dev, false);
 	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 }
@@ -5694,7 +5694,7 @@ static void i9xx_crtc_disable(struct drm_crtc *crtc)
 
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
-	intel_edp_psr_update(dev);
+	intel_edp_psr_update(dev, false);
 	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 
diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index e11101d..9f41c1a 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -1782,7 +1782,7 @@ static void intel_edp_psr_setup(struct intel_dp *intel_dp)
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct edp_vsc_psr psr_vsc;
 
-	if (dev_priv->psr.setup_done)
+	if (intel_dp->psr_setup_done)
 		return;
 
 	mutex_init(&dev_priv->psr.lock);
@@ -1799,7 +1799,7 @@ static void intel_edp_psr_setup(struct intel_dp *intel_dp)
 	I915_WRITE(EDP_PSR_DEBUG_CTL(dev), EDP_PSR_DEBUG_MASK_MEMUP |
 		   EDP_PSR_DEBUG_MASK_HPD | EDP_PSR_DEBUG_MASK_LPSP);
 
-	dev_priv->psr.setup_done = true;
+	intel_dp->psr_setup_done = true;
 }
 
 static void intel_edp_psr_enable_sink(struct intel_dp *intel_dp)
@@ -1968,15 +1968,12 @@ void intel_edp_psr_disable(struct intel_dp *intel_dp)
 		DRM_ERROR("Timed out waiting for PSR Idle State\n");
 }
 
-void intel_edp_psr_update(struct drm_device *dev)
+void intel_edp_psr_update(struct drm_device *dev, bool suspend)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_encoder *encoder;
 	struct intel_dp *intel_dp = NULL;
 
-	if (!dev_priv->psr.setup_done)
-		return;
-
 	/* VLV/CHV handle PSR differently */
 	if (IS_VALLEYVIEW(dev))
 		return;
@@ -1985,8 +1982,13 @@ void intel_edp_psr_update(struct drm_device *dev)
 		if (encoder->type == INTEL_OUTPUT_EDP) {
 			intel_dp = enc_to_intel_dp(&encoder->base);
 
-			if (!is_edp_psr(dev))
+			if (!is_edp_psr(dev) || !intel_dp->psr_setup_done)
 				return;
+			else if (suspend) {
+				/* call is from suspend path to clear flag */
+				intel_dp->psr_setup_done = false;
+				return;
+			}
 
 			mutex_lock(&dev_priv->psr.lock);
 			if (!intel_edp_psr_match_conditions(intel_dp))
@@ -2334,9 +2336,6 @@ void intel_vlv_edp_psr_update(struct drm_device *dev)
 	struct intel_dp *intel_dp = NULL;
 	bool flag;
 
-	if (!dev_priv->psr.setup_done)
-		return;
-
 	if (!IS_VALLEYVIEW(dev) || !is_edp_psr(dev))
 		return;
 
@@ -2345,7 +2344,7 @@ void intel_vlv_edp_psr_update(struct drm_device *dev)
 			continue;
 
 		intel_dp = enc_to_intel_dp(&enc->base);
-		if (!intel_dp)
+		if (!intel_dp || !intel_dp->psr_setup_done)
 			break;
 
 		mutex_lock(&dev_priv->psr.lock);
@@ -2371,8 +2370,9 @@ void intel_vlv_edp_psr_update(struct drm_device *dev)
 void intel_vlv_edp_psr_exit(struct drm_device *dev, bool disable)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct intel_dp *intel_dp = dev_priv->psr.enabled;
 
-	if (!dev_priv->psr.setup_done || !IS_VALLEYVIEW(dev))
+	if (!intel_dp || !intel_dp->psr_setup_done || !IS_VALLEYVIEW(dev))
 		return;
 
 	mutex_lock(&dev_priv->psr.lock);
@@ -2440,7 +2440,7 @@ static void intel_vlv_edp_psr_init(struct intel_dp *intel_dp)
 	mutex_init(&dev_priv->psr.lock);
 	dev_priv->psr.dp_setup = intel_dp;
 	dev_priv->psr.enabled = NULL;
-	dev_priv->psr.setup_done = true;
+	intel_dp->psr_setup_done = true;
 	atomic_set(&dev_priv->psr.update_pending, 0);
 
 	INIT_DELAYED_WORK(&dev_priv->psr.work,
@@ -5446,8 +5446,6 @@ intel_dp_init_connector(struct intel_digital_port *intel_dig_port,
 
 	intel_dp_aux_init(intel_dp, intel_connector);
 
-	dev_priv->psr.setup_done = false;
-
 	if (!intel_edp_init_connector(intel_dp, intel_connector, &power_seq)) {
 		drm_dp_aux_unregister(&intel_dp->aux);
 		if (is_edp(intel_dp)) {
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index d07b627..2c3825a 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -675,6 +675,7 @@ struct intel_dp {
 	int backlight_off_delay;
 	struct delayed_work panel_vdd_work;
 	bool want_panel_vdd;
+	bool psr_setup_done;
 	bool do_fast_link_train;
 	bool has_fast_link_train;
 	unsigned long last_power_cycle;
@@ -990,7 +991,7 @@ void intel_edp_panel_on(struct intel_dp *intel_dp);
 void intel_edp_panel_off(struct intel_dp *intel_dp);
 void intel_edp_psr_enable(struct intel_dp *intel_dp);
 void intel_edp_psr_disable(struct intel_dp *intel_dp);
-void intel_edp_psr_update(struct drm_device *dev);
+void intel_edp_psr_update(struct drm_device *dev, bool suspend);
 void intel_vlv_edp_psr_update(struct drm_device *dev);
 void intel_vlv_edp_psr_disable(struct drm_device *dev);
 void intel_vlv_edp_psr_exit(struct drm_device *dev, bool disable);
-- 
1.7.9.5

