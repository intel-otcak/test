From ee9a253ca696a37c492845a458af7779ee3350f3 Mon Sep 17 00:00:00 2001
Message-Id: <ee9a253ca696a37c492845a458af7779ee3350f3.1431284209.git.chang-joon.lee@intel.com>
In-Reply-To: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
References: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
From: Uma Shankar <uma.shankar@intel.com>
Date: Tue, 21 Apr 2015 11:15:34 +0530
Subject: [PATCH 51/68] REVERTME [VPG]: drm/i915: Fixed critical KW issues

This patch fixes critical klockwork issues in i915

REVERTME : This patch fixes all the Klockwork issues in one go.
This will be reverted and separate patches for individual issues
will be created.

Issue: GMINL-8290
Change-Id: I1fbdcdb1bf9eb10475776874172a8d59cbb1458a
Signed-off-by: Kumar, Kiran S <kiran.s.kumar@intel.com>
---
 drivers/gpu/drm/i915/dvo_ch7017.c     |    8 ++++----
 drivers/gpu/drm/i915/i915_ext_ioctl.c |    6 ++++++
 drivers/gpu/drm/i915/i915_irq.c       |    4 ++--
 drivers/gpu/drm/i915/intel_clrmgr.c   |   27 ++++++++++++++++++++++-----
 drivers/gpu/drm/i915/intel_display.c  |    8 +++++++-
 drivers/gpu/drm/i915/intel_fbdev.c    |    3 +++
 drivers/gpu/drm/i915/intel_panel.c    |    4 ++--
 drivers/gpu/drm/i915/intel_sdvo.c     |   24 +++++++++++++-----------
 drivers/gpu/drm/i915/intel_sprite.c   |    7 ++++++-
 drivers/gpu/drm/i915/intel_tv.c       |   28 ++++++++++++++++++----------
 10 files changed, 83 insertions(+), 36 deletions(-)

Index: b/drivers/gpu/drm/i915/dvo_ch7017.c
===================================================================
--- a/drivers/gpu/drm/i915/dvo_ch7017.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/dvo_ch7017.c	2016-04-19 17:22:23.870524035 +0800
@@ -202,7 +202,7 @@
 {
 	struct ch7017_priv *priv;
 	const char *str;
-	u8 val;
+	u8 val = 0;
 
 	priv = kzalloc(sizeof(struct ch7017_priv), GFP_KERNEL);
 	if (priv == NULL)
@@ -333,7 +333,7 @@
 /* set the CH7017 power state */
 static void ch7017_dpms(struct intel_dvo_device *dvo, bool enable)
 {
-	uint8_t val;
+	uint8_t val = 0;
 
 	ch7017_read(dvo, CH7017_LVDS_POWER_DOWN, &val);
 
@@ -361,7 +361,7 @@
 
 static bool ch7017_get_hw_state(struct intel_dvo_device *dvo)
 {
-	uint8_t val;
+	uint8_t val = 0;
 
 	ch7017_read(dvo, CH7017_LVDS_POWER_DOWN, &val);
 
@@ -373,7 +373,7 @@
 
 static void ch7017_dump_regs(struct intel_dvo_device *dvo)
 {
-	uint8_t val;
+	uint8_t val = 0;
 
 #define DUMP(reg)					\
 do {							\
Index: b/drivers/gpu/drm/i915/i915_ext_ioctl.c
===================================================================
--- a/drivers/gpu/drm/i915/i915_ext_ioctl.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/i915_ext_ioctl.c	2016-04-19 17:22:23.870524035 +0800
@@ -115,6 +115,12 @@
 		}
 	}
 
+	if (kdata == NULL) {
+		DRM_ERROR("kdata is NULL\n");
+		retcode = -EINVAL;
+		goto err_i1;
+	}
+
 	if (ioctl->flags & DRM_UNLOCKED) {
 		retcode = func(dev, kdata, file_priv);
 	} else {
Index: b/drivers/gpu/drm/i915/i915_irq.c
===================================================================
--- a/drivers/gpu/drm/i915/i915_irq.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/i915_irq.c	2016-04-19 17:22:23.870524035 +0800
@@ -5003,7 +5003,7 @@
 {
 	struct drm_device *dev = arg;
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	u32 iir, new_iir, pipe_stats[I915_MAX_PIPES];
+	u32 iir, new_iir, pipe_stats[I915_MAX_PIPES] = {0};
 	unsigned long irqflags;
 	u32 flip_mask =
 		I915_DISPLAY_PLANE_A_FLIP_PENDING_INTERRUPT |
@@ -5244,7 +5244,7 @@
 	struct drm_device *dev = arg;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	u32 iir, new_iir;
-	u32 pipe_stats[I915_MAX_PIPES];
+	u32 pipe_stats[I915_MAX_PIPES] = {0};
 	unsigned long irqflags;
 	int ret = IRQ_NONE, pipe;
 	u32 flip_mask =
Index: b/drivers/gpu/drm/i915/intel_clrmgr.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_clrmgr.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/intel_clrmgr.c	2016-04-19 17:42:13.907269015 +0800
@@ -817,8 +817,14 @@
 	u32 cgm_gamma_reg = 0;
 	u32 cgm_ctrl_reg = 0;
 
-	struct drm_device *dev = intel_crtc->base.dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_device *dev;
+	struct drm_i915_private *dev_priv;
+
+	if (intel_crtc == NULL)
+		return false;
+
+	dev = intel_crtc->base.dev;
+	dev_priv = dev->dev_private;
 
 	/* Validate input */
 	if (!intel_crtc) {
@@ -898,14 +904,20 @@
 			const struct clrmgr_regd_prop *cgm_degamma,
 			const struct gamma_lut_data *data, bool enable)
 {
-	struct drm_device *dev = intel_crtc->base.dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_device *dev;
+	struct drm_i915_private *dev_priv;
 	struct drm_property *property;
 	u32 i = 0;
 	u32 cgm_degamma_reg = 0;
 	u32 cgm_ctrl_reg = 0;
 	property = cgm_degamma->property;
 
+	if (intel_crtc == NULL)
+		return false;
+
+	dev = intel_crtc->base.dev;
+	dev_priv = dev->dev_private;
+
 	/* Validate input */
 	if (!intel_crtc) {
 		DRM_ERROR("Invalid CRTC object i/p to CGM degamma enable\n");
@@ -1131,10 +1143,15 @@
 				const struct lut_info  *info)
 {
 	struct intel_crtc *intel_crtc = crtc;
-	struct drm_device *dev = intel_crtc->base.dev;
+	struct drm_device *dev;
 	struct gamma_lut_data *data;
 	int ret = false;
 
+	if (intel_crtc == NULL)
+		return false;
+
+	dev = intel_crtc->base.dev;
+
 	/* Validate input */
 	if (!info->data || !cgm_gamma || !cgm_gamma->property) {
 		DRM_ERROR("Invalid input to set_gamma\n");
Index: b/drivers/gpu/drm/i915/intel_display.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_display.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/intel_display.c	2016-04-19 17:22:23.874524022 +0800
@@ -1997,6 +1997,11 @@
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_shared_dpll *pll = intel_crtc_to_shared_dpll(crtc);
 
+	if (pll == NULL) {
+		DRM_ERROR("Shared dpll is null\n");
+		return;
+	}
+
 	WARN_ON(!pll->refcount);
 	if (pll->active == 0) {
 		DRM_DEBUG_DRIVER("setting up %s\n", pll->name);
@@ -13204,7 +13209,8 @@
 		 * due to fb==NULL. This should only happen during boot since
 		 * we don't yet reconstruct the FB from the hardware state.
 		 */
-		if (to_intel_crtc(save_set.crtc)->new_enabled && !save_set.fb)
+		if (!save_set.fb &&
+			to_intel_crtc(save_set.crtc)->new_enabled)
 			disable_crtc_nofb(to_intel_crtc(save_set.crtc));
 
 		/* Try to restore the config */
Index: b/drivers/gpu/drm/i915/intel_fbdev.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_fbdev.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/intel_fbdev.c	2016-04-19 17:22:23.874524022 +0800
@@ -155,6 +155,9 @@
 		sizes->fb_height = intel_fb->base.height;
 	}
 
+	if (intel_fb == NULL)
+		goto out_unlock;
+
 	obj = intel_fb->obj;
 	size = obj->base.size;
 
Index: b/drivers/gpu/drm/i915/intel_panel.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_panel.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/intel_panel.c	2016-04-19 17:22:23.874524022 +0800
@@ -772,7 +772,7 @@
 
 	intel_panel_actually_set_backlight(connector, 0);
 
-	if (intel_dsi->dev.dev_ops->disable_backlight)
+	if (intel_dsi != NULL && intel_dsi->dev.dev_ops->disable_backlight)
 		intel_dsi->dev.dev_ops->disable_backlight(&intel_dsi->dev);
 
 	if (dev_priv->vbt.dsi.config->pmic_soc_blc) {
@@ -1096,7 +1096,7 @@
 	if (dev_priv->vbt.dsi.config->pmic_soc_blc)
 		lpio_enable_backlight(dev);
 
-	if (intel_dsi->dev.dev_ops->enable_backlight)
+	if (intel_dsi != NULL && intel_dsi->dev.dev_ops->enable_backlight)
 		intel_dsi->dev.dev_ops->enable_backlight(&intel_dsi->dev);
 
 	intel_panel_actually_set_backlight(connector, panel->backlight.level);
Index: b/drivers/gpu/drm/i915/intel_sdvo.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_sdvo.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/intel_sdvo.c	2016-04-19 17:22:23.874524022 +0800
@@ -522,7 +522,7 @@
 				     void *response, int response_len)
 {
 	u8 retry = 15; /* 5 quick checks, followed by 10 long checks */
-	u8 status;
+	u8 status = 0;
 	int i, pos = 0;
 #define BUF_LEN 256
 	char buffer[BUF_LEN];
@@ -646,7 +646,7 @@
  */
 static bool intel_sdvo_get_trained_inputs(struct intel_sdvo *intel_sdvo, bool *input_1, bool *input_2)
 {
-	struct intel_sdvo_get_trained_inputs_response response;
+	struct intel_sdvo_get_trained_inputs_response response = {0};
 
 	BUILD_BUG_ON(sizeof(response) != 1);
 	if (!intel_sdvo_get_value(intel_sdvo, SDVO_CMD_GET_TRAINED_INPUTS,
@@ -702,7 +702,7 @@
 						   int *clock_min,
 						   int *clock_max)
 {
-	struct intel_sdvo_pixel_clock_range clocks;
+	struct intel_sdvo_pixel_clock_range clocks = {0};
 
 	BUILD_BUG_ON(sizeof(clocks) != 4);
 	if (!intel_sdvo_get_value(intel_sdvo,
@@ -955,7 +955,7 @@
 				       const uint8_t *data, unsigned length)
 {
 	uint8_t set_buf_index[2] = { if_index, 0 };
-	uint8_t hbuf_size, tmp[8];
+	uint8_t hbuf_size = 0, tmp[8];
 	int i;
 
 	if (!intel_sdvo_set_value(intel_sdvo,
@@ -1063,7 +1063,8 @@
 				    const struct drm_display_mode *mode,
 				    struct drm_display_mode *adjusted_mode)
 {
-	struct intel_sdvo_dtd input_dtd;
+	/* Double braces required to avoid gcc compilation error */
+	struct intel_sdvo_dtd input_dtd = { {0} };
 
 	/* Reset the input timing to the screen. Assume always input 0. */
 	if (!intel_sdvo_set_target_input(intel_sdvo))
@@ -1347,8 +1348,9 @@
 	int encoder_pixel_multiplier = 0;
 	int dotclock;
 	u32 flags = 0, sdvox;
-	u8 val;
+	u8 val = 0;
 	bool ret;
+	dtd.part2.dtd_flags = 0;
 
 	sdvox = I915_READ(intel_sdvo->sdvo_reg);
 
@@ -1615,7 +1617,7 @@
 static uint16_t intel_sdvo_get_hotplug_support(struct intel_sdvo *intel_sdvo)
 {
 	struct drm_device *dev = intel_sdvo->base.base.dev;
-	uint16_t hotplug;
+	uint16_t hotplug = 0;
 
 	/* HW Erratum: SDVO Hotplug is broken on all i945G chips, there's noise
 	 * on the line. */
@@ -1739,7 +1741,7 @@
 static enum drm_connector_status
 intel_sdvo_detect(struct drm_connector *connector, bool force)
 {
-	uint16_t response;
+	uint16_t response = 0;
 	struct intel_sdvo *intel_sdvo = intel_attached_sdvo(connector);
 	struct intel_sdvo_connector *intel_sdvo_connector = to_intel_sdvo_connector(connector);
 	enum drm_connector_status ret;
@@ -2722,7 +2724,7 @@
 					  int type)
 {
 	struct drm_device *dev = intel_sdvo->base.base.dev;
-	struct intel_sdvo_tv_format format;
+	struct intel_sdvo_tv_format format = {0};
 	uint32_t format_map, i;
 
 	if (!intel_sdvo_set_target_output(intel_sdvo, type))
@@ -2788,7 +2790,7 @@
 {
 	struct drm_device *dev = intel_sdvo->base.base.dev;
 	struct drm_connector *connector = &intel_sdvo_connector->base.base;
-	uint16_t response, data_value[2];
+	uint16_t response = 0, data_value[2] = {0};
 
 	/* when horizontal overscan is supported, Add the left/right  property */
 	if (enhancements.overscan_h) {
@@ -2905,7 +2907,7 @@
 {
 	struct drm_device *dev = intel_sdvo->base.base.dev;
 	struct drm_connector *connector = &intel_sdvo_connector->base.base;
-	uint16_t response, data_value[2];
+	uint16_t response = 0, data_value[2] = {0};
 
 	ENHANCEMENT(brightness, BRIGHTNESS);
 
Index: b/drivers/gpu/drm/i915/intel_sprite.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_sprite.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/intel_sprite.c	2016-04-19 17:22:23.874524022 +0800
@@ -2119,8 +2119,12 @@
 			     &intel_plane_funcs,
 			     plane_formats, num_plane_formats,
 			     false);
-	if (ret)
+
+	if (ret) {
 		kfree(intel_plane);
+		DRM_DEBUG_KMS("Returning from plane init...\n");
+		return ret;
+	}
 
 	if (IS_CHERRYVIEW(dev) && STEP_FROM(STEP_B0) && pipe == PIPE_B) {
 		intel_plane->csc_profile = 4;
@@ -2130,5 +2134,6 @@
 		drm_object_attach_property(&intel_plane->base.base,
 			intel_plane->csc_profile_property, 4);
 	}
+
 	return ret;
 }
Index: b/drivers/gpu/drm/i915/intel_tv.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_tv.c	2016-04-19 17:22:23.878524009 +0800
+++ b/drivers/gpu/drm/i915/intel_tv.c	2016-04-19 17:22:23.874524022 +0800
@@ -1282,8 +1282,8 @@
 	const struct tv_mode *tv_mode = intel_tv_mode_find(intel_tv);
 	int i;
 
-	if ((intel_tv->type == DRM_MODE_CONNECTOR_Component) ==
-		tv_mode->component_only)
+	if (tv_mode == NULL || ((intel_tv->type == DRM_MODE_CONNECTOR_Component)
+				== tv_mode->component_only))
 		return;
 
 
@@ -1363,14 +1363,19 @@
 	struct intel_tv *intel_tv = intel_attached_tv(connector);
 	const struct tv_mode *tv_mode = intel_tv_mode_find(intel_tv);
 
-	if (tv_mode->nbr_end < 480 && mode_ptr->vdisplay == 480)
-		mode_ptr->type |= DRM_MODE_TYPE_PREFERRED;
-	else if (tv_mode->nbr_end > 480) {
-		if (tv_mode->progressive == true && tv_mode->nbr_end < 720) {
-			if (mode_ptr->vdisplay == 720)
-				mode_ptr->type |= DRM_MODE_TYPE_PREFERRED;
-		} else if (mode_ptr->vdisplay == 1080)
-				mode_ptr->type |= DRM_MODE_TYPE_PREFERRED;
+	if (tv_mode != NULL) {
+		if (tv_mode->nbr_end < 480 && mode_ptr->vdisplay == 480)
+			mode_ptr->type |= DRM_MODE_TYPE_PREFERRED;
+		else if (tv_mode->nbr_end > 480) {
+			if (tv_mode->progressive == true &&
+					tv_mode->nbr_end < 720) {
+				if (mode_ptr->vdisplay == 720)
+					mode_ptr->type |=
+						DRM_MODE_TYPE_PREFERRED;
+			} else if (mode_ptr->vdisplay == 1080)
+					mode_ptr->type |=
+						DRM_MODE_TYPE_PREFERRED;
+		}
 	}
 }
 
@@ -1390,6 +1395,9 @@
 	int j, count = 0;
 	u64 tmp;
 
+	if (tv_mode == NULL)
+		return count;
+
 	for (j = 0; j < ARRAY_SIZE(input_res_table);
 	     j++) {
 		const struct input_res *input = &input_res_table[j];
