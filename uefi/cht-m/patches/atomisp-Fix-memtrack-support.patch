From 7db4dea8c2e904cc03ab8126d6bcff71efacf7a1 Mon Sep 17 00:00:00 2001
From: Per Persson <per.persson@intel.com>
Date: Mon, 16 Feb 2015 12:54:55 +0100
Subject: [PATCH 11/28] atomisp: Fix memtrack support

Update the memtrack support because of updated struct content.

Change-Id: I5bac1e805d018d9a1e1e16089ec30d0e4cc01223
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-9279
Original-Tracked-On: https://jira01.devtools.intel.com/browse/OAM-7550
Signed-off-by: Per Persson <per.persson@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/83119
Build: Dessert M COHO (SC)
Build: Dessert M BXT RVP (SC)
Approver: Yunliang Ding <yunliang.ding@intel.com>
Reviewed-by: Yunliang Ding <yunliang.ding@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Signed-off-by: Yang Fan F <fan.f.yang@intel.com>
Reviewed-on: https://android.intel.com:443/440497
---
 .../media/pci/atomisp2/atomisp_driver/hmm/hmm.c       | 19 +++++++++++--------
 1 file changed, 11 insertions(+), 8 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/hmm/hmm.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/hmm/hmm.c
index 7519acf..f61dd6c 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/hmm/hmm.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/hmm/hmm.c
@@ -59,7 +59,7 @@ const char *hmm_bo_type_strings[HMM_BO_LAST] = {
 };
 
 static ssize_t bo_show(struct device *dev, struct device_attribute *attr,
-			char *buf, struct list_head *bo_list)
+			char *buf, struct list_head *bo_list, bool active)
 {
 	ssize_t ret = 0;
 	struct hmm_buffer_object *bo;
@@ -78,14 +78,17 @@ static ssize_t bo_show(struct device *dev, struct device_attribute *attr,
 
 	spin_lock_irqsave(&bo_device.list_lock, flags);
 	list_for_each_entry(bo, bo_list, list) {
-		ret = scnprintf(buf + index1, PAGE_SIZE - index1,
+		if ((active && !(bo->status & HMM_BO_FREE)) ||
+			(!active && (bo->status & HMM_BO_FREE))) {
+			ret = scnprintf(buf + index1, PAGE_SIZE - index1,
 				"%s %d\n",
 				hmm_bo_type_strings[bo->type], bo->pgnr);
 
-		total[bo->type] += bo->pgnr;
-		count[bo->type]++;
-		if (ret > 0)
-			index1 += ret;
+			total[bo->type] += bo->pgnr;
+			count[bo->type]++;
+			if (ret > 0)
+				index1 += ret;
+		}
 	}
 	spin_unlock_irqrestore(&bo_device.list_lock, flags);
 
@@ -108,14 +111,14 @@ static ssize_t active_bo_show(struct device *dev,
 		struct device_attribute *attr,
 		char *buf)
 {
-	return bo_show(dev, attr, buf, &bo_device.active_bo_list);
+	return bo_show(dev, attr, buf, &bo_device.entire_bo_list, true);
 }
 
 static ssize_t free_bo_show(struct device *dev,
 		struct device_attribute *attr,
 		char *buf)
 {
-	return bo_show(dev, attr, buf, &bo_device.free_bo_list);
+	return bo_show(dev, attr, buf, &bo_device.entire_bo_list, false);
 }
 
 static ssize_t reserved_pool_show(struct device *dev,
-- 
1.9.1

