From 845ef588efc92ed24809561856473a2ff59556a8 Mon Sep 17 00:00:00 2001
Message-Id: <845ef588efc92ed24809561856473a2ff59556a8.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Ankitprasad Sharma <ankitprasad.r.sharma@intel.com>
Date: Tue, 23 Sep 2014 18:18:54 +0530
Subject: [PATCH 269/312] MUST_REBASE: [VPG]: drm/i915: Modified lock order to
 avoid register access once device is suspended

Modified lock order to avoid
1. Soft-lockup created due to locking of mode_config and dpst_ioctl locks
   in opposite order from different paths, while display is being turned
   off & device is going to suspend
2. Access of certain DPST specific registers in suspended mode.
   Earlier certain DPST ioctls, arriving after turning off of display,
   managed to access some registers.

Issue: GMIN-3476
Change-Id: I7b2915350aa2e19d9e224c66912e1b36dc0c9b7a
Signed-off-by: Ankitprasad Sharma <ankitprasad.r.sharma@intel.com>
---
 drivers/gpu/drm/i915/i915_dpst.c |   45 +++++++++++++++++++-------------------
 1 file changed, 23 insertions(+), 22 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dpst.c b/drivers/gpu/drm/i915/i915_dpst.c
index 5979f88..3aa5861 100644
--- a/drivers/gpu/drm/i915/i915_dpst.c
+++ b/drivers/gpu/drm/i915/i915_dpst.c
@@ -169,12 +169,8 @@ i915_dpst_set_user_enable(struct drm_device *dev, bool enable)
 		/* User disabling invalidates any saved settings */
 		dev_priv->dpst.saved.is_valid = false;
 
-		/* Avoid warning messages */
-		drm_modeset_lock(&dev->mode_config.connection_mutex, NULL);
 		if (dev_priv->dpst.enabled)
 			ret = i915_dpst_disable_hist_interrupt(dev);
-
-		drm_modeset_unlock(&dev->mode_config.connection_mutex);
 	}
 
 	return ret;
@@ -230,11 +226,9 @@ i915_dpst_apply_luma(struct drm_device *dev,
 	ioctl_data->ie_container.dpst_blc_factor;
 
 	/* Avoid warning messages */
-	drm_modeset_lock(&dev->mode_config.connection_mutex, NULL);
 	mutex_lock(&dev_priv->backlight_lock);
 	i915_dpst_set_brightness(dev, panel->backlight.level);
 	mutex_unlock(&dev_priv->backlight_lock);
-	drm_modeset_unlock(&dev->mode_config.connection_mutex);
 
 	/* Enable Image Enhancement Table */
 	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
@@ -274,11 +268,9 @@ i915_dpst_restore_luma(struct drm_device *dev)
 	dev_priv->dpst.blc_adjustment = dev_priv->dpst.saved.blc_adjustment;
 
 	/* Avoid warning messages */
-	drm_modeset_lock(&dev->mode_config.connection_mutex, NULL);
 	mutex_lock(&dev_priv->backlight_lock);
 	i915_dpst_set_brightness(dev, panel->backlight.level);
 	mutex_unlock(&dev_priv->backlight_lock);
-	drm_modeset_unlock(&dev->mode_config.connection_mutex);
 
 	/* IE mod table entries are saved in the hardware even if the table
 	 * is disabled, so we only need to re-enable the table */
@@ -442,21 +434,14 @@ i915_dpst_display_off(struct drm_device *dev)
 	if (!dev_priv->dpst.user_enable)
 		return;
 
+	mutex_lock(&dev_priv->dpst.ioctl_lock);
 	/* Set the flag to reject all the subsequent DPST ioctls
 	 * till the Display is turned on again
 	 */
 	dev_priv->dpst.display_off = true;
 
-	/* To avoid the deadlock with the concurrent dpst ioctl path
-	 * (like apply_luma) due to cross dependency between the
-	 * ioctl_lock & mode_config.mutex. Although this leaves
-	 * a very tiny window, but it shall be benign */
-	if (!mutex_trylock(&dev_priv->dpst.ioctl_lock))
-		i915_dpst_disable_hist_interrupt(dev);
-	else {
-		i915_dpst_disable_hist_interrupt(dev);
-		mutex_unlock(&dev_priv->dpst.ioctl_lock);
-	}
+	i915_dpst_disable_hist_interrupt(dev);
+	mutex_unlock(&dev_priv->dpst.ioctl_lock);
 
 	/* Send a fake signal to user, so that the user can be notified
 	 * to reset the dpst context, to avoid any mismatch of blc_adjusment
@@ -584,20 +569,30 @@ i915_dpst_context(struct drm_device *dev, void *data,
 	if (!I915_HAS_DPST(dev))
 		return -EINVAL;
 
+	ioctl_data = (struct dpst_initialize_context *) data;
+
+	/* mode_config lock is required to avoid warning messages in the
+	 * backlight change path. And backlight is changed for these 2
+	 * types of ioctl only.
+	 */
+	if (ioctl_data->dpst_ioctl_type == DPST_APPLY_LUMA ||
+		ioctl_data->dpst_ioctl_type == DPST_DISABLE)
+		drm_modeset_lock(&dev->mode_config.connection_mutex, NULL);
 
 	/* Can be called from multiple usermode, prevent race condition */
 	mutex_lock(&dev_priv->dpst.ioctl_lock);
 
-	ioctl_data = (struct dpst_initialize_context *) data;
-
 	/* If Display is currently off (could be power gated also),
 	 * don't service the ioctls other than GET_BIN_DATA
 	 */
 	if (dev_priv->dpst.display_off &&
-		(ioctl_data->dpst_ioctl_type != DPST_GET_BIN_DATA_LEGACY &&
-			ioctl_data->dpst_ioctl_type != DPST_GET_BIN_DATA)) {
+			ioctl_data->dpst_ioctl_type != DPST_GET_BIN_DATA) {
 		DRM_DEBUG_KMS("Display is off\n");
 		mutex_unlock(&dev_priv->dpst.ioctl_lock);
+		if (ioctl_data->dpst_ioctl_type == DPST_APPLY_LUMA ||
+			ioctl_data->dpst_ioctl_type == DPST_DISABLE)
+			drm_modeset_unlock(&dev->mode_config.connection_mutex);
+
 		return -EINVAL;
 	}
 
@@ -633,6 +628,10 @@ i915_dpst_context(struct drm_device *dev, void *data,
 	}
 
 	mutex_unlock(&dev_priv->dpst.ioctl_lock);
+	if (ioctl_data->dpst_ioctl_type == DPST_APPLY_LUMA ||
+		ioctl_data->dpst_ioctl_type == DPST_DISABLE)
+		drm_modeset_unlock(&dev->mode_config.connection_mutex);
+
 	return ret;
 }
 
@@ -645,6 +644,7 @@ i915_dpst_set_kernel_disable(struct drm_device *dev, bool disable)
 	if (!I915_HAS_DPST(dev))
 		return -EINVAL;
 
+	drm_modeset_lock(&dev->mode_config.connection_mutex, NULL);
 	mutex_lock(&dev_priv->dpst.ioctl_lock);
 
 	dev_priv->dpst.kernel_disable = disable;
@@ -659,6 +659,7 @@ i915_dpst_set_kernel_disable(struct drm_device *dev, bool disable)
 	}
 
 	mutex_unlock(&dev_priv->dpst.ioctl_lock);
+	drm_modeset_unlock(&dev->mode_config.connection_mutex);
 
 	return ret;
 }
-- 
1.7.9.5

