From 0eea6fc5c761a4fe5343314df4dcf943aebc24e4 Mon Sep 17 00:00:00 2001
Message-Id: <0eea6fc5c761a4fe5343314df4dcf943aebc24e4.1424394676.git.feitong.yi@intel.com>
In-Reply-To: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
References: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
From: Thomas Daniel <thomas.daniel@intel.com>
Date: Fri, 19 Dec 2014 10:54:31 +0000
Subject: [PATCH 61/61] FOR_UPSTREAM [VPG]: drm/i915: Workaround to avoid lite
 restore with HEAD==TAIL

On Gen8 if we do a lite restore on a context where HEAD==TAIL and we are using
the per-context workaround batch buffer, context corruption can occur.

Add two extra MI_NOOP instructions at the end of each request, but keep the
requests tail pointing before the MI_NOOPs.
If we submit a context to the ELSP which has previously been submitted, move
the tail pointer past the MI_NOOPs.  This ensures HEAD!=TAIL.

For: GMINL-3301
Change-Id: Icc5a48633749003a4a6ca982ba31c849d811c9f0
Signed-off-by: Thomas Daniel <thomas.daniel@intel.com>
---
 drivers/gpu/drm/i915/intel_lrc.c |   36 ++++++++++++++++++++++++++++++++++++
 1 file changed, 36 insertions(+)

diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index 048e0b6..d825857 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -737,6 +737,23 @@ static void execlists_fetch_requests(struct intel_engine_cs *ring,
 			break;
 		}
 	}
+
+	if (IS_GEN8(ring->dev)) {
+		/* Make sure we never cause a lite restore with HEAD == TAIL */
+		if ((*req0) && ((*req0)->elsp_submitted == 1)) {
+			/*
+			 * Consume the buffer NOOPs to ensure HEAD != TAIL when
+			 * submitting. elsp_submitted can only be >1 after
+			 * reset, in which case we don't need the workaround as
+			 * a lite restore will not occur.
+			 */
+			struct intel_ringbuffer *ringbuf;
+
+			ringbuf = (*req0)->ctx->engine[ring->id].ringbuf;
+			(*req0)->tail += 8;
+			(*req0)->tail &= ringbuf->size - 1;
+		}
+	}
 }
 
 static void execlists_context_unqueue(struct intel_engine_cs *ring)
@@ -997,6 +1014,17 @@ static int execlists_context_queue(struct intel_engine_cs *ring,
 	req->ring = ring;
 	req->tail = tail;
 
+	if (IS_GEN8(ring->dev)) {
+		struct intel_ringbuffer *ringbuf = to->engine[ring->id].ringbuf;
+		/*
+		 * Here are two extra NOOPs as padding to avoid lite restore of
+		 * a context with HEAD==TAIL.
+		 */
+		intel_logical_ring_emit(ringbuf, MI_NOOP);
+		intel_logical_ring_emit(ringbuf, MI_NOOP);
+		intel_logical_ring_advance(ringbuf);
+	}
+
 	intel_runtime_pm_get(dev_priv);
 
 	spin_lock_irqsave(&ring->execlist_lock, flags);
@@ -1928,6 +1956,14 @@ int intel_logical_ring_begin(struct intel_ringbuffer *ringbuf, int num_dwords)
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	int ret;
 
+	if (IS_GEN8(dev))
+		/*
+		 * Reserve space for 2 NOOPs at the end of each request to be
+		 * used as a workaround for not being allowed to do lite
+		 * restore with HEAD==TAIL.
+		 */
+		num_dwords += 2;
+
 	ret = i915_gem_check_wedge(&dev_priv->gpu_error,
 				   dev_priv->mm.interruptible, ring);
 	if (ret)
-- 
1.7.9.5

