From fffb394ac851517520ccd06e22c2a32657fd321a Mon Sep 17 00:00:00 2001
From: Tuukka Toivonen <tuukka.toivonen@intel.com>
Date: Thu, 4 Dec 2014 10:50:50 +0200
Subject: [PATCH 212/215] lm3559: retry failed i2c transfers up to 5 times

Retry failed i2c transfers up to 5 times before giving up. This gives
robustness against random transfer errors.

Change-Id: I037838c886bed9667fc177b50133fbef26309826
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-4551
Signed-off-by: Tuukka Toivonen <tuukka.toivonen@intel.com>
Signed-off-by: Tommi Franttila <tommi.franttila@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/34911
Approver: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
---
 .../camera/drivers/media/i2c/lm3559.c              | 24 ++++++++++++++++++++--
 1 file changed, 22 insertions(+), 2 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/lm3559.c b/drivers/external_drivers/camera/drivers/media/i2c/lm3559.c
index 85b0b61..a666cf0 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/lm3559.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/lm3559.c
@@ -37,6 +37,8 @@ struct lm3559_ctrl_id {
 	int (*g_ctrl)(struct v4l2_subdev *sd, __s32 *val);
 };
 
+#define I2C_RETRY_COUNT			5
+
 /* Registers */
 
 #define LM3559_MODE_SHIFT		0
@@ -138,8 +140,17 @@ static int lm3559_write(struct lm3559 *flash, u8 addr, u8 val)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(&flash->sd);
 	int ret;
+	int retry = 0;
 
-	ret = i2c_smbus_write_byte_data(client, addr, val);
+	do {
+		ret = i2c_smbus_write_byte_data(client, addr, val);
+		if (ret < 0) {
+			dev_err(&client->dev,
+				"retrying i2c write transfer... %d\n",
+				retry);
+			msleep(20);
+		}
+	} while (ret < 0 && retry++ < I2C_RETRY_COUNT);
 
 	dev_dbg(&client->dev, "Write Addr:%02X Val:%02X %s\n", addr, val,
 		ret < 0 ? "fail" : "ok");
@@ -152,8 +163,17 @@ static int lm3559_read(struct lm3559 *flash, u8 addr)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(&flash->sd);
 	int ret;
+	int retry = 0;
 
-	ret = i2c_smbus_read_byte_data(client, addr);
+	do {
+		ret = i2c_smbus_read_byte_data(client, addr);
+		if (ret < 0) {
+			dev_err(&client->dev,
+				"retrying i2c read transfer... %d\n",
+				retry);
+			msleep(20);
+		}
+	} while (ret < 0 && retry++ < I2C_RETRY_COUNT);
 
 	dev_dbg(&client->dev, "Read Addr:%02X Val:%02X %s\n", addr, ret,
 		ret < 0 ? "fail" : "ok");
-- 
1.9.1

