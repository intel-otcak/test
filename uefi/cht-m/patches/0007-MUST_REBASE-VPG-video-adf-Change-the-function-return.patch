From 30234c3115bc63364a2cc43102e0a030e44fef1e Mon Sep 17 00:00:00 2001
Message-Id: <30234c3115bc63364a2cc43102e0a030e44fef1e.1424394676.git.feitong.yi@intel.com>
In-Reply-To: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
References: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
From: Kausal Malladi <Kausal.Malladi@intel.com>
Date: Mon, 2 Feb 2015 14:45:11 +0530
Subject: [PATCH 07/61] MUST_REBASE [VPG]: video/adf: Change the function
 return type to int

Changing the return types of the function to int

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5213
Change-Id: Idf0228a2d22c95862f43d59e0de78663155394b3
Signed-off-by: Kausal Malladi <Kausal.Malladi@intel.com>
---
 drivers/video/adf/intel/core/common/dp/dp_panel.c  |   14 ++++----
 .../video/adf/intel/core/common/dp/gen_dp_pipe.c   |    2 +-
 drivers/video/adf/intel/core/vlv/vlv_dp_port.c     |   30 ++++++++---------
 drivers/video/adf/intel/core/vlv/vlv_pipe.c        |    2 +-
 drivers/video/adf/intel/core/vlv/vlv_pipeline.c    |   34 ++++++++++----------
 .../adf/intel/include/core/common/dp/dp_panel.h    |    4 +--
 .../adf/intel/include/core/intel_platform_config.h |   16 ++++-----
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |   16 ++++-----
 .../video/adf/intel/include/core/vlv/vlv_dp_port.h |   16 ++++-----
 .../video/adf/intel/include/core/vlv/vlv_pipe.h    |    2 +-
 10 files changed, 68 insertions(+), 68 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dp/dp_panel.c b/drivers/video/adf/intel/core/common/dp/dp_panel.c
index 148f967..214130e 100644
--- a/drivers/video/adf/intel/core/common/dp/dp_panel.c
+++ b/drivers/video/adf/intel/core/common/dp/dp_panel.c
@@ -128,12 +128,12 @@ bool dp_panel_probe(struct dp_panel *panel, struct intel_pipeline *pipeline)
 
 #define DP_LINK_ALIGNED (1 << 3)
 
-static u32 dp_panel_get_dpcd(struct dp_panel *panel, u32 address,
+static int dp_panel_get_dpcd(struct dp_panel *panel, u32 address,
 			u8 *buffer, u32 size)
 {
 	struct intel_pipeline *pipeline = panel->pipeline;
 	struct dp_aux_msg msg = {0};
-	u32 err;
+	int err;
 
 	/* read dpcd aux or i2c */
 	msg.address = address;
@@ -145,12 +145,12 @@ static u32 dp_panel_get_dpcd(struct dp_panel *panel, u32 address,
 	return err;
 }
 
-u32 dp_panel_set_dpcd(struct dp_panel *panel, u32 address,
+int dp_panel_set_dpcd(struct dp_panel *panel, u32 address,
 			u8 *buffer, u32 size)
 {
 	struct intel_pipeline *pipeline = panel->pipeline;
 	struct dp_aux_msg msg = {0};
-	u32 err;
+	int err;
 
 	/* write dpcd aux or i2c */
 	msg.address = address;
@@ -162,7 +162,7 @@ u32 dp_panel_set_dpcd(struct dp_panel *panel, u32 address,
 	return err;
 }
 
-u32 dp_panel_get_max_link_bw(struct dp_panel *panel)
+int dp_panel_get_max_link_bw(struct dp_panel *panel)
 {
 	u8 link_rate = 0;
 
@@ -339,7 +339,7 @@ bool dp_panel_train_link(struct dp_panel *panel, struct link_params *params)
 	u8 link_config[2];
 	bool ret = false;
 	u8 tmp = 1, i;
-	u32 err = 0;
+	int err = 0;
 
 	for (i = 0; i < 3; i++) {
 		err = dp_panel_set_dpcd(panel, DP_SET_POWER, &tmp, 1);
@@ -393,7 +393,7 @@ err:
 /* dp_panel_init : assume that panel is connected when called */
 bool dp_panel_init(struct dp_panel *panel, struct intel_pipeline *pipeline)
 {
-	u32 err = 0;
+	int err = 0;
 
 	panel->pipeline = pipeline;
 	vlv_get_max_vswing_preemp(pipeline, &panel->max_vswing,
diff --git a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
index c9014bd..d557c21 100644
--- a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
+++ b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
@@ -75,7 +75,7 @@ static bool get_next_link_params(struct dp_panel *panel,
 		struct link_params *params, u32 dotclock)
 {
 	bool found = false;
-	u32 link_bw = 0;
+	int link_bw = 0;
 	u32 link_clock = 0, lane_count = 0;
 	u64 bw_available = 0, dotclock_req = 0;
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_dp_port.c b/drivers/video/adf/intel/core/vlv/vlv_dp_port.c
index 377a875..d39fbc7 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_dp_port.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_dp_port.c
@@ -44,7 +44,7 @@
 #define EDP_WRITE_PROTECT	0xabcd0000
 #define EDP_WRITE_PROTECT_MASK	0xffff0000
 
-static u32 wait_panel_status(struct vlv_dp_port *port, u32 mask, u32 value)
+static int wait_panel_status(struct vlv_dp_port *port, u32 mask, u32 value)
 {
 	u32 pp_stat_reg, pp_ctrl_reg;
 	u32 err = 0;
@@ -109,10 +109,10 @@ void vlv_dp_port_write_protect_off(struct vlv_dp_port *port, bool enable)
 	REG_WRITE(port->pp_ctl_offset, val);
 }
 
-u32 vlv_dp_port_panel_power_seq(struct vlv_dp_port *port, bool enable)
+int vlv_dp_port_panel_power_seq(struct vlv_dp_port *port, bool enable)
 {
 	u32 pp = 0;
-	u32 err = 0;
+	int err = 0;
 
 
 	if (enable) {
@@ -137,7 +137,7 @@ u32 vlv_dp_port_panel_power_seq(struct vlv_dp_port *port, bool enable)
 	return err;
 }
 
-u32 vlv_dp_port_pwm_seq(struct vlv_dp_port *port, bool enable)
+int vlv_dp_port_pwm_seq(struct vlv_dp_port *port, bool enable)
 {
 	u32 val = 0;
 
@@ -164,7 +164,7 @@ u32 vlv_dp_port_pwm_seq(struct vlv_dp_port *port, bool enable)
 	return 0;
 }
 
-u32 vlv_dp_port_backlight_seq(struct vlv_dp_port *port, bool enable)
+int vlv_dp_port_backlight_seq(struct vlv_dp_port *port, bool enable)
 {
 	u32 pp = 0;
 
@@ -204,7 +204,7 @@ u32 vlv_dp_port_backlight_seq(struct vlv_dp_port *port, bool enable)
 	return 0;
 }
 
-u32 vlv_dp_port_enable(struct vlv_dp_port *port, u32 flags,
+int vlv_dp_port_enable(struct vlv_dp_port *port, u32 flags,
 		union encoder_params *params)
 {
 	u32 reg_val = 0;
@@ -241,7 +241,7 @@ u32 vlv_dp_port_enable(struct vlv_dp_port *port, u32 flags,
 	return 0;
 }
 
-u32 vlv_dp_port_disable(struct vlv_dp_port *port)
+int vlv_dp_port_disable(struct vlv_dp_port *port)
 {
 	u32 reg_val = 0;
 
@@ -365,7 +365,7 @@ static void unpack_aux(uint32_t src, uint8_t *dst, int dst_bytes)
 		dst[i] = src >> ((3-i) * 8);
 }
 
-static u32 vlv_dp_port_aux_ch(struct vlv_dp_port *port,
+static int vlv_dp_port_aux_ch(struct vlv_dp_port *port,
 		u8 *send, u32 send_bytes,
 		u8 *recv, u32 recv_size)
 {
@@ -486,7 +486,7 @@ u32 vlv_dp_port_aux_transfer(struct vlv_dp_port *port,
 {
 	uint8_t txbuf[20], rxbuf[20];
 	size_t txsize, rxsize;
-	u32 ret;
+	int ret;
 
 	mutex_lock(&port->hw_mutex);
 
@@ -550,7 +550,7 @@ aux_tx_exit:
 	return ret;
 }
 
-u32 vlv_dp_port_set_signal_levels(struct vlv_dp_port *port,
+int vlv_dp_port_set_signal_levels(struct vlv_dp_port *port,
 	struct link_params *params, u32 *deemp, u32 *margin)
 {
 	/* FIXME: implement this */
@@ -599,7 +599,7 @@ void vlv_dp_port_get_adjust_train(struct vlv_dp_port *port,
 		params->vswing = voltage_max;
 }
 
-u32 vlv_dp_port_set_link_pattern(struct vlv_dp_port *port,
+int vlv_dp_port_set_link_pattern(struct vlv_dp_port *port,
 		u8 train_pattern)
 {
 	u32 val = 0;
@@ -812,7 +812,7 @@ static const struct i2c_algorithm i2c_algo = {
 	.master_xfer = vlv_dp_port_i2c_xfer,
 };
 
-u32 vlv_dp_port_i2c_register(struct vlv_dp_port *port, struct device *dev)
+int vlv_dp_port_i2c_register(struct vlv_dp_port *port, struct device *dev)
 {
 	mutex_init(&port->hw_mutex);
 
@@ -828,7 +828,7 @@ u32 vlv_dp_port_i2c_register(struct vlv_dp_port *port, struct device *dev)
 	return i2c_add_adapter(&port->ddc);
 }
 
-u32 vlv_dp_port_vdd_seq(struct vlv_dp_port *port, bool enable)
+int vlv_dp_port_vdd_seq(struct vlv_dp_port *port, bool enable)
 {
 	u32 val = 0;
 	val = REG_READ(port->pp_ctl_offset);
@@ -848,7 +848,7 @@ u32 vlv_dp_port_vdd_seq(struct vlv_dp_port *port, bool enable)
 	return 0;
 }
 
-u32 vlv_dp_port_load_panel_delays(struct vlv_dp_port *port)
+int vlv_dp_port_load_panel_delays(struct vlv_dp_port *port)
 {
 	u16 *ptr = NULL;
 	u32 val = 0;
@@ -974,7 +974,7 @@ bool vlv_dp_port_init(struct vlv_dp_port *port, enum port port_id,
 	return true;
 }
 
-u32 vlv_dp_port_set_brightness(struct vlv_dp_port *port, int level)
+int vlv_dp_port_set_brightness(struct vlv_dp_port *port, int level)
 {
 	u32 val;
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipe.c b/drivers/video/adf/intel/core/vlv/vlv_pipe.c
index f395889..a047ddb 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipe.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipe.c
@@ -240,7 +240,7 @@ u32 vlv_pipe_enable(struct vlv_pipe *pipe,
 
 }
 
-u32 vlv_pipe_disable(struct vlv_pipe *pipe)
+int vlv_pipe_disable(struct vlv_pipe *pipe)
 {
 	struct vlv_pipeline *vlv_pipeline = container_of(pipe,
 			struct vlv_pipeline, pipe);
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
index 2ddfd61..7aab631 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
@@ -410,7 +410,7 @@ static inline u32 vlv_port_disable(struct intel_pipeline *pipeline)
 	struct dsi_pipe *dsi_pipe = NULL;
 	struct dsi_context *dsi_ctx = NULL;
 	enum port port;
-	u32 err = 0;
+	int err = 0;
 
 	switch (disp->type) {
 	case INTEL_PIPE_DSI:
@@ -445,7 +445,7 @@ static inline u32 vlv_port_disable(struct intel_pipeline *pipeline)
 	return err;
 }
 
-u32 vlv_dsi_post_pipeline_off(struct intel_pipeline *pipeline)
+int vlv_dsi_post_pipeline_off(struct intel_pipeline *pipeline)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_pll *pll = &disp->pll;
@@ -482,10 +482,10 @@ out:
 }
 
 /* generic function to be called for any operations after disable is done */
-u32 vlv_post_pipeline_off(struct intel_pipeline *pipeline)
+int vlv_post_pipeline_off(struct intel_pipeline *pipeline)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	u32 err = 0;
+	int err = 0;
 
 	switch (disp->type) {
 	case INTEL_PIPE_DSI:
@@ -508,7 +508,7 @@ u32 vlv_pipeline_off(struct intel_pipeline *pipeline)
 	struct vlv_sp_plane *splane = NULL;
 	struct vlv_pipe *pipe = NULL;
 	struct vlv_pll *pll = NULL;
-	u32 err = 0, i = 0;
+	int err = 0, i = 0;
 
 	if (IS_CHERRYVIEW() && disp->type != INTEL_PIPE_DSI)
 		return chv_pipeline_off(pipeline);
@@ -575,7 +575,7 @@ u32 chv_pipeline_off(struct intel_pipeline *pipeline)
 	struct vlv_sp_plane *splane = NULL;
 	struct vlv_pll *pll = NULL;
 	u32 i = 0;
-	u32 err = 0;
+	int err = 0;
 
 	if (!disp)
 		return -EINVAL;
@@ -822,7 +822,7 @@ bool vlv_is_plane_enabled(struct intel_pipeline *pipeline,
 	return ret;
 }
 
-u32 vlv_aux_transfer(struct intel_pipeline *pipeline,
+int vlv_aux_transfer(struct intel_pipeline *pipeline,
 		struct dp_aux_msg *msg)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
@@ -868,11 +868,11 @@ u32 vlv_aux_transfer(struct intel_pipeline *pipeline,
 	return -EIO;
 }
 
-u32 vlv_set_link_pattern(struct intel_pipeline *pipeline, u8 train_pattern)
+int vlv_set_link_pattern(struct intel_pipeline *pipeline, u8 train_pattern)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dp_port *dp_port = &disp->port.dp_port;
-	u32 ret = 0;
+	int ret = 0;
 
 	ret = vlv_dp_port_set_link_pattern(dp_port, train_pattern);
 	if (ret != 0) {
@@ -896,7 +896,7 @@ out_link:
 
 }
 
-u32 vlv_set_signal_levels(struct intel_pipeline *pipeline,
+int vlv_set_signal_levels(struct intel_pipeline *pipeline,
 	struct link_params *params)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
@@ -912,7 +912,7 @@ u32 vlv_set_signal_levels(struct intel_pipeline *pipeline,
 	return 0;
 }
 
-u32 chv_set_signal_levels(struct intel_pipeline *pipeline,
+int chv_set_signal_levels(struct intel_pipeline *pipeline,
 	struct link_params *params)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
@@ -943,11 +943,11 @@ void vlv_get_max_vswing_preemp(struct intel_pipeline *pipeline,
 }
 
 
-u32 vlv_dp_panel_power_seq(struct intel_pipeline *pipeline, bool enable)
+int vlv_dp_panel_power_seq(struct intel_pipeline *pipeline, bool enable)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dp_port *dp_port = &disp->port.dp_port;
-	u32 err = 0;
+	int err = 0;
 
 	if (disp->type == INTEL_PIPE_EDP) {
 		err = vlv_dp_port_panel_power_seq(dp_port, enable);
@@ -958,11 +958,11 @@ u32 vlv_dp_panel_power_seq(struct intel_pipeline *pipeline, bool enable)
 	return err;
 }
 
-u32 vlv_dp_backlight_seq(struct intel_pipeline *pipeline, bool enable)
+int vlv_dp_backlight_seq(struct intel_pipeline *pipeline, bool enable)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dp_port *dp_port = &disp->port.dp_port;
-	u32 err = 0;
+	int err = 0;
 
 	if (disp->type == INTEL_PIPE_EDP)
 		err = vlv_dp_port_backlight_seq(dp_port, enable);
@@ -981,7 +981,7 @@ struct i2c_adapter *vlv_get_i2c_adapter(struct intel_pipeline *pipeline)
 		return NULL;
 }
 
-u32 vlv_dp_set_brightness(struct intel_pipeline *pipeline, int level)
+int vlv_dp_set_brightness(struct intel_pipeline *pipeline, int level)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dp_port *port = &disp->port.dp_port;
@@ -993,7 +993,7 @@ u32 vlv_dp_get_brightness(struct intel_pipeline *pipeline)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
 	struct vlv_dp_port *port = &disp->port.dp_port;
-	int level;
+	u32 level;
 
 	level = vlv_dp_port_get_brightness(port);
 	return level;
diff --git a/drivers/video/adf/intel/include/core/common/dp/dp_panel.h b/drivers/video/adf/intel/include/core/common/dp/dp_panel.h
index b2be2df..d384d47 100644
--- a/drivers/video/adf/intel/include/core/common/dp/dp_panel.h
+++ b/drivers/video/adf/intel/include/core/common/dp/dp_panel.h
@@ -405,7 +405,7 @@ struct dp_panel {
 extern bool dp_panel_init(struct dp_panel *panel,
 			struct intel_pipeline *pipeline);
 extern bool dp_panel_destroy(struct dp_panel *panel);
-extern u32 dp_panel_get_max_link_bw(struct dp_panel *panel);
+extern int dp_panel_get_max_link_bw(struct dp_panel *panel);
 extern u32 dp_panel_get_max_lane_count(struct dp_panel *panel);
 extern bool dp_panel_train_link(struct dp_panel *panel,
 			struct link_params *params);
@@ -413,7 +413,7 @@ extern  bool dp_panel_fast_link_train(struct dp_panel *panel,
 			struct link_params *params);
 extern bool dp_panel_probe(struct dp_panel *panel,
 			struct intel_pipeline *pipeline);
-u32 dp_panel_set_dpcd(struct dp_panel *panel, u32 address,
+int dp_panel_set_dpcd(struct dp_panel *panel, u32 address,
 			u8 *buffer, u32 size);
 
 /* Hack:to avoid duplication of edid parsing logic hdmi's parser is used */
diff --git a/drivers/video/adf/intel/include/core/intel_platform_config.h b/drivers/video/adf/intel/include/core/intel_platform_config.h
index 45a639e..8f1835e 100644
--- a/drivers/video/adf/intel/include/core/intel_platform_config.h
+++ b/drivers/video/adf/intel/include/core/intel_platform_config.h
@@ -35,7 +35,7 @@ u32 vlv_dsi_pre_pipeline_on(struct intel_pipeline *pipeline,
 u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 		struct drm_mode_modeinfo *mode);
 u32 vlv_pipeline_off(struct intel_pipeline *pipeline);
-u32 vlv_post_pipeline_off(struct intel_pipeline *pipeline);
+int vlv_post_pipeline_off(struct intel_pipeline *pipeline);
 bool vlv_is_screen_connected(struct intel_pipeline *pipeline);
 u32 vlv_dpst_context(struct intel_pipeline *pipeline, unsigned long args);
 u32 vlv_dpst_irq_handler(struct intel_pipeline *pipeline);
@@ -69,24 +69,24 @@ int vlv_cmd_vc_dcs_read(struct intel_pipeline *pipeline, int channel,
 int vlv_cmd_vc_generic_read(struct intel_pipeline *pipeline, int channel,
 		u8 *reqdata, int reqlen, u8 *buf, int buflen, enum port port);
 int vlv_cmd_dpi_send_cmd(struct intel_pipeline *pipeline, u32 cmd, bool hs);
-u32 vlv_aux_transfer(struct intel_pipeline *pipeline,
+int vlv_aux_transfer(struct intel_pipeline *pipeline,
 		struct dp_aux_msg *msg);
-u32 vlv_set_signal_levels(struct intel_pipeline *pipeline,
+int vlv_set_signal_levels(struct intel_pipeline *pipeline,
 		struct link_params *params);
-u32 chv_set_signal_levels(struct intel_pipeline *pipeline,
+int chv_set_signal_levels(struct intel_pipeline *pipeline,
 		struct link_params *params);
-u32 vlv_set_link_pattern(struct intel_pipeline *pipeline,
+int vlv_set_link_pattern(struct intel_pipeline *pipeline,
 		u8 train_pattern);
 void vlv_get_max_vswing_preemp(struct intel_pipeline *pipeline,
 		enum vswing_level *max_v, enum preemp_level *max_p);
 void vlv_get_adjust_train(struct intel_pipeline *pipeline,
 		struct link_params *params);
-u32 vlv_dp_panel_power_seq(struct intel_pipeline *pipeline,
+int vlv_dp_panel_power_seq(struct intel_pipeline *pipeline,
 		bool enable);
-u32 vlv_dp_backlight_seq(struct intel_pipeline *pipeline,
+int vlv_dp_backlight_seq(struct intel_pipeline *pipeline,
 		bool enable);
 u32 vlv_dp_get_brightness(struct intel_pipeline *pipeline);
-u32 vlv_dp_set_brightness(struct intel_pipeline *pipeline, int level);
+int vlv_dp_set_brightness(struct intel_pipeline *pipeline, int level);
 struct i2c_adapter *vlv_get_i2c_adapter(struct intel_pipeline *pipeline);
 
 u32 vlv_set_event(struct intel_pipeline *pipeline, u32 event, bool enabled);
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index ec9e55b..b20663d 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -241,7 +241,7 @@ extern u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 			struct drm_mode_modeinfo *mode);
 extern u32 vlv_pipeline_off(struct intel_pipeline *pipeline);
 extern u32 chv_pipeline_off(struct intel_pipeline *pipeline);
-extern u32 vlv_post_pipeline_off(struct intel_pipeline *pipeline);
+extern int vlv_post_pipeline_off(struct intel_pipeline *pipeline);
 extern bool vlv_is_screen_connected(struct intel_pipeline *pipeline);
 extern u32 vlv_num_planes_enabled(struct intel_pipeline *pipeline);
 extern bool vlv_is_vid_mode(struct intel_pipeline *pipeline);
@@ -277,21 +277,21 @@ extern void vlv_debugfs_teardown(struct vlv_dc_config *vlv_config);
 bool vlv_dsi_port_init(struct vlv_dsi_port *port, enum port, enum pipe);
 bool vlv_dsi_port_destroy(struct vlv_dsi_port *port);
 
-extern u32 vlv_aux_transfer(struct intel_pipeline *pipeline,
+extern int vlv_aux_transfer(struct intel_pipeline *pipeline,
 	struct dp_aux_msg *msg);
-extern u32 vlv_set_signal_levels(struct intel_pipeline *pipeline,
+extern int vlv_set_signal_levels(struct intel_pipeline *pipeline,
 	struct link_params *params);
-extern u32 chv_set_signal_levels(struct intel_pipeline *pipeline,
+extern int chv_set_signal_levels(struct intel_pipeline *pipeline,
 	struct link_params *params);
-extern u32 vlv_set_link_pattern(struct intel_pipeline *pipeline,
+extern int vlv_set_link_pattern(struct intel_pipeline *pipeline,
 	u8 train_pattern);
 extern void vlv_get_max_vswing_preemp(struct intel_pipeline *pipeline,
 	enum vswing_level *max_v, enum preemp_level *max_p);
 extern void vlv_get_adjust_train(struct intel_pipeline *pipeline,
 	struct link_params *params);
-extern u32 vlv_dp_panel_power_seq(struct intel_pipeline *pipeline,
+extern int vlv_dp_panel_power_seq(struct intel_pipeline *pipeline,
 	bool enable);
-extern u32 vlv_dp_backlight_seq(struct intel_pipeline *pipeline,
+extern int vlv_dp_backlight_seq(struct intel_pipeline *pipeline,
 	bool enable);
 extern struct i2c_adapter *vlv_get_i2c_adapter(struct intel_pipeline *pipeline);
 
@@ -301,7 +301,7 @@ extern u32 REG_POSTING_READ(u32 reg);
 extern void REG_WRITE(u32 reg, u32 val);
 extern void REG_WRITE_BITS(u32 reg, u32 val, u32 mask);
 
-extern u32 vlv_dp_set_brightness(struct intel_pipeline *pipeline, int level);
+extern int vlv_dp_set_brightness(struct intel_pipeline *pipeline, int level);
 extern u32 vlv_dp_get_brightness(struct intel_pipeline *pipeline);
 
 /* pipe and plane status */
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dp_port.h b/drivers/video/adf/intel/include/core/vlv/vlv_dp_port.h
index b37e4e1..a27efd7 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dp_port.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dp_port.h
@@ -56,24 +56,24 @@ bool vlv_dp_port_init(struct vlv_dp_port *port, enum port port_id,
 	enum pipe pipe_id, enum intel_pipe_type type, struct device *dev);
 void vlv_dp_port_destroy(struct vlv_dp_port *port);
 u32 vlv_dp_port_dpms(struct vlv_dp_port *port, u8 dpms_state);
-u32 vlv_dp_port_set_link_pattern(struct vlv_dp_port *port,
+int vlv_dp_port_set_link_pattern(struct vlv_dp_port *port,
 		u8 train_pattern);
 void vlv_dp_port_get_adjust_train(struct vlv_dp_port *port,
 	struct link_params *params);
-u32 vlv_dp_port_set_signal_levels(struct vlv_dp_port *port,
+int vlv_dp_port_set_signal_levels(struct vlv_dp_port *port,
 	struct link_params *params, u32 *deemp, u32 *margin);
 u32 vlv_dp_port_aux_transfer(struct vlv_dp_port *port,
 		struct dp_aux_msg *msg);
 bool vlv_dp_port_is_screen_connected(struct vlv_dp_port *port);
-u32 vlv_dp_port_disable(struct vlv_dp_port *port);
-u32 vlv_dp_port_enable(struct vlv_dp_port *port, u32 flags,
+int vlv_dp_port_disable(struct vlv_dp_port *port);
+int vlv_dp_port_enable(struct vlv_dp_port *port, u32 flags,
 		union encoder_params *params);
-u32 vlv_dp_port_backlight_seq(struct vlv_dp_port *port, bool enable);
-u32 vlv_dp_port_pwm_seq(struct vlv_dp_port *port, bool enable);
-u32 vlv_dp_port_panel_power_seq(struct vlv_dp_port *port, bool enable);
+int vlv_dp_port_backlight_seq(struct vlv_dp_port *port, bool enable);
+int vlv_dp_port_pwm_seq(struct vlv_dp_port *port, bool enable);
+int vlv_dp_port_panel_power_seq(struct vlv_dp_port *port, bool enable);
 void vlv_dp_port_get_max_vswing_preemp(struct vlv_dp_port *port,
 	enum vswing_level *max_v, enum preemp_level *max_p);
 struct i2c_adapter *vlv_dp_port_get_i2c_adapter(struct vlv_dp_port *port);
-u32 vlv_dp_port_set_brightness(struct vlv_dp_port *port, int level);
+int vlv_dp_port_set_brightness(struct vlv_dp_port *port, int level);
 u32 vlv_dp_port_get_brightness(struct vlv_dp_port *port);
 #endif /* _VLV_DP_PORT_H_ */
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h b/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h
index 842453e..9d4df05 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pipe.h
@@ -50,7 +50,7 @@ u32 vlv_pipe_program_timings(struct vlv_pipe *pipe,
 		enum intel_pipe_type type, u8 bpp);
 u32 vlv_pipe_enable(struct vlv_pipe *pipe,
 		struct drm_mode_modeinfo *mode);
-u32 vlv_pipe_disable(struct vlv_pipe *pipe);
+int vlv_pipe_disable(struct vlv_pipe *pipe);
 u32 vlv_pipe_set_event(struct vlv_pipe *pipe, u32 event, bool enabled);
 u32 vlv_pipe_get_event(struct vlv_pipe *pipe, u32 *event);
 void vlv_pipe_evade_vblank(struct vlv_pipe *pipe,
-- 
1.7.9.5

