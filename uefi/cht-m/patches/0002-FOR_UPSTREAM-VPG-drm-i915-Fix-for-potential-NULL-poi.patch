From 94f06178737695c6f4de36f402702117caa3c9cd Mon Sep 17 00:00:00 2001
Message-Id: <94f06178737695c6f4de36f402702117caa3c9cd.1429239283.git.chang-joon.lee@intel.com>
In-Reply-To: <daf48c0cd937d52473f0bd9fb52b43e85a6e19ed.1429239283.git.chang-joon.lee@intel.com>
References: <daf48c0cd937d52473f0bd9fb52b43e85a6e19ed.1429239283.git.chang-joon.lee@intel.com>
From: Namrta <namrta.salonie@intel.com>
Date: Thu, 9 Apr 2015 00:49:16 +0530
Subject: [PATCH 2/2] FOR_UPSTREAM [VPG]: drm/i915: Fix for potential NULL
 pointer dereference

It is possible for memset to be called with NULL pointer and non-zero count
args which would probably cause a panic. Fix this by only initializing
the data block if the ioctl has IN or OUT data.
Found by static analysis tool.

SQUASHME! - This patch should be squashed into the following existing patch:
commit cde58b7d2e525655b126a61499bd02ceff3d8e18
Change-Id: If6b1c3e05bb8d347c8ae1e03edad43b6fa8c86a4
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Thu Jul 10 14:38:16 2014 +0100

    FOR_UPSTREAM [VPG]: Introduce extended ioctl interface

    Adds a new extended ioctl mechanism, allowing several discrete
    ioctls to share a single device ioctl.

Issue: GMINL-7862
Change-Id: I37f2d669a09f69db3f9561ebe14b66c58a82a1eb
Signed-off-by: Namrta <namrta.salonie@intel.com>
---
 drivers/gpu/drm/i915/i915_ext_ioctl.c |   21 +++++++++++----------
 1 file changed, 11 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_ext_ioctl.c b/drivers/gpu/drm/i915/i915_ext_ioctl.c
index d8fa22f..7293830 100644
--- a/drivers/gpu/drm/i915/i915_ext_ioctl.c
+++ b/drivers/gpu/drm/i915/i915_ext_ioctl.c
@@ -101,18 +101,19 @@ int i915_extended_ioctl(struct drm_device *dev, void *data,
 				goto err_i1;
 			}
 		}
-		if (asize > usize)
-			memset(kdata + usize, 0, asize - usize);
-	}
 
-	if (cmd & IOC_IN) {
-		if (copy_from_user(kdata, arg, usize) != 0) {
-			DRM_ERROR("copy in failed\n");
-			retcode = -EFAULT;
-			goto err_i1;
+		if (cmd & IOC_IN) {
+			if (copy_from_user(kdata, arg, usize) != 0) {
+				DRM_ERROR("copy in failed\n");
+				retcode = -EFAULT;
+				goto err_i1;
+			}
+		} else {
+			memset(kdata, 0, usize);
+			if (asize > usize)
+				memset(kdata + usize, 0, asize - usize);
 		}
-	} else
-		memset(kdata, 0, usize);
+	}
 
 	if (ioctl->flags & DRM_UNLOCKED) {
 		retcode = func(dev, kdata, file_priv);
-- 
1.7.9.5

