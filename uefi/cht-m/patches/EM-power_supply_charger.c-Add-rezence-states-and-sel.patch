From 04f29094534e64e2dd8f8ed65de52daedf87d642 Mon Sep 17 00:00:00 2001
From: Vineesh k k <vineesh.k.k@intel.com>
Date: Mon, 11 May 2015 13:54:03 +0530
Subject: [PATCH] EM/power_supply_charger.c: Add rezence states and select
 notification 			  for wireless charging.

Send SELECT cable notification if the ATTACH cable notification
is receieved from the PRU(wireless receiver).

Change-Id: I64e26d124b681b46b68092938c95a96b06d6657d
Signed-off-by: Vineesh k k <vineesh.k.k@intel.com>
---
 drivers/power/power_supply_charger.c | 24 +++++++++++++++++++++++-
 drivers/power/power_supply_charger.h |  1 +
 drivers/power/power_supply_sysfs.c   | 20 +++++++++++++++++++-
 include/linux/power_supply.h         | 29 +++++++++++++++++++++++++++++
 4 files changed, 72 insertions(+), 2 deletions(-)

diff --git a/drivers/power/power_supply_charger.c b/drivers/power/power_supply_charger.c
index 5fa75fe424c2..20e5c7363c7f 100644
--- a/drivers/power/power_supply_charger.c
+++ b/drivers/power/power_supply_charger.c
@@ -25,6 +25,7 @@ struct power_supply_charger {
 	struct list_head batt_cache_lst;
 	struct list_head evt_queue;
 	struct work_struct algo_trigger_work;
+	struct work_struct wireless_chrgr_work;
 	struct mutex evt_lock;
 	struct power_supply_cable_props cable_props;
 	wait_queue_head_t wait_chrg_enable;
@@ -786,6 +787,12 @@ static int __trigger_charging_handler(struct device *dev, void *data)
 	return 0;
 }
 
+static void handle_wireless_charger(struct work_struct *work)
+{
+	atomic_notifier_call_chain(&power_supply_notifier,
+		PSY_CABLE_EVENT, &psy_chrgr.cable_props);
+}
+
 static void trigger_algo_psy_class(struct work_struct *work)
 {
 	class_for_each_device(power_supply_class, NULL, NULL,
@@ -894,8 +901,21 @@ static int select_chrgr_cable(struct device *dev, void *data)
 	 * capabilities changed.switch cable and enable charger and charging
 	 */
 	set_present(psy, 1);
-	if (CABLE_TYPE(psy) != max_ma_cable->chrg_type)
+	if (CABLE_TYPE(psy) != max_ma_cable->chrg_type) {
+		if (max_ma_cable->chrg_evt ==
+				POWER_SUPPLY_CHARGER_EVENT_ATTACH) {
+			/* send SELECT notification for cable selected */
+			max_ma_cable->chrg_evt =
+				POWER_SUPPLY_CHARGER_EVENT_SELECTED;
+			psy_chrgr.cable_props.chrg_type =
+				max_ma_cable->chrg_type;
+			psy_chrgr.cable_props.chrg_evt =
+				max_ma_cable->chrg_evt;
+			psy_chrgr.cable_props.ma = max_ma_cable->ma;
+			schedule_work(&psy_chrgr.wireless_chrgr_work);
+		}
 		switch_cable(psy, max_ma_cable->chrg_type);
+	}
 
 	if (IS_CHARGER_CAN_BE_ENABLED(psy) &&
 			(max_ma_cable->ma >= 100) &&
@@ -989,6 +1009,8 @@ int power_supply_register_charger(struct power_supply *psy)
 		INIT_LIST_HEAD(&psy_chrgr.chrgr_cache_lst);
 		INIT_LIST_HEAD(&psy_chrgr.batt_cache_lst);
 		INIT_WORK(&psy_chrgr.algo_trigger_work, trigger_algo_psy_class);
+		INIT_WORK(&psy_chrgr.wireless_chrgr_work,
+			handle_wireless_charger);
 		psy_chrgr.is_cable_evt_reg = true;
 	}
 
diff --git a/drivers/power/power_supply_charger.h b/drivers/power/power_supply_charger.h
index 374824214387..23ac49566c51 100644
--- a/drivers/power/power_supply_charger.h
+++ b/drivers/power/power_supply_charger.h
@@ -195,6 +195,7 @@ static inline int get_ps_int_property(struct power_supply *psy,
 		(psy->supported_cables & cable_type)
 #define IS_CABLE_ACTIVE(status) \
 		((status != POWER_SUPPLY_CHARGER_EVENT_DISCONNECT) &&\
+		(status != POWER_SUPPLY_CHARGER_EVENT_DETACH) &&\
 		(status != POWER_SUPPLY_CHARGER_EVENT_LINK_DISCONNECT))
 
 #define IS_CABLE_READY_TO_SUPPLY(status) \
diff --git a/drivers/power/power_supply_sysfs.c b/drivers/power/power_supply_sysfs.c
index dfa77dfb3355..f7ce31fada3d 100644
--- a/drivers/power/power_supply_sysfs.c
+++ b/drivers/power/power_supply_sysfs.c
@@ -49,7 +49,8 @@ static ssize_t power_supply_show_property(struct device *dev,
 		"Wireless"
 	};
 	static char *status_text[] = {
-		"Unknown", "Charging", "Discharging", "Not charging", "Full"
+		"Unknown", "Charging", "Discharging", "Not charging", "Full",
+		"Pru_null", "Pru_boot", "Pru_on", "Pru_alert", "Pru_error"
 	};
 	static char *charge_type[] = {
 		"Unknown", "N/A", "Trickle", "Fast"
@@ -216,6 +217,23 @@ static struct device_attribute power_supply_attrs[] = {
 	POWER_SUPPLY_ATTR(charge_enabled),
 	/* Local extensions of type int64_t */
 	POWER_SUPPLY_ATTR(charge_counter_ext),
+	/* Wireless charging */
+	POWER_SUPPLY_ATTR(vrect),
+	POWER_SUPPLY_ATTR(irect),
+	POWER_SUPPLY_ATTR(vdcout),
+	POWER_SUPPLY_ATTR(idcout),
+	POWER_SUPPLY_ATTR(pru_temp),
+	POWER_SUPPLY_ATTR(pru_dcen),
+	POWER_SUPPLY_ATTR(vrect_min_dyn),
+	POWER_SUPPLY_ATTR(vrect_set_dyn),
+	POWER_SUPPLY_ATTR(vrect_high_dyn),
+	POWER_SUPPLY_ATTR(pru_dynamic_param),
+	POWER_SUPPLY_ATTR(pru_static_param),
+	POWER_SUPPLY_ATTR(ptu_static_param),
+	POWER_SUPPLY_ATTR(ptu_power),
+	POWER_SUPPLY_ATTR(ptu_max_src_impedance),
+	POWER_SUPPLY_ATTR(ptu_max_load_resistance),
+	POWER_SUPPLY_ATTR(ptu_class),
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_ATTR(model_name),
 	POWER_SUPPLY_ATTR(manufacturer),
diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 959a4d52a0ba..7a4bf0ea864f 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -40,6 +40,11 @@ enum {
 	POWER_SUPPLY_STATUS_DISCHARGING,
 	POWER_SUPPLY_STATUS_NOT_CHARGING,
 	POWER_SUPPLY_STATUS_FULL,
+	POWER_SUPPLY_STATUS_PRU_NULL,
+	POWER_SUPPLY_STATUS_PRU_BOOT,
+	POWER_SUPPLY_STATUS_PRU_ON,
+	POWER_SUPPLY_STATUS_PRU_ALERT,
+	POWER_SUPPLY_STATUS_PRU_ERROR,
 };
 
 enum {
@@ -171,6 +176,23 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CHARGE_ENABLED,
 	/* Local extensions of type int64_t */
 	POWER_SUPPLY_PROP_CHARGE_COUNTER_EXT,
+	/* Wireless charging */
+	POWER_SUPPLY_PROP_VRECT,
+	POWER_SUPPLY_PROP_IRECT,
+	POWER_SUPPLY_PROP_VDCOUT,
+	POWER_SUPPLY_PROP_IDCOUT,
+	POWER_SUPPLY_PROP_PRU_TEMP,
+	POWER_SUPPLY_PROP_PRU_DCEN,
+	POWER_SUPPLY_PROP_VRECT_MIN_DYN,
+	POWER_SUPPLY_PROP_VRECT_SET_DYN,
+	POWER_SUPPLY_PROP_VRECT_HIGH_DYN,
+	POWER_SUPPLY_PROP_PRU_DYNAMIC_PARAM,
+	POWER_SUPPLY_PROP_PRU_STATIC_PARAM,
+	POWER_SUPPLY_PROP_PTU_STATIC_PARAM,
+	POWER_SUPPLY_PROP_PTU_POWER,
+	POWER_SUPPLY_PROP_PTU_MAX_SRC_IMPEDANCE,
+	POWER_SUPPLY_PROP_PTU_MAX_LOAD_RESISTANCE,
+	POWER_SUPPLY_PROP_PTU_CLASS,
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_PROP_MODEL_NAME,
 	POWER_SUPPLY_PROP_MANUFACTURER,
@@ -199,6 +221,10 @@ enum power_supply_charger_event {
 	POWER_SUPPLY_CHARGER_EVENT_SUSPEND,
 	POWER_SUPPLY_CHARGER_EVENT_DISCONNECT,
 	POWER_SUPPLY_CHARGER_EVENT_LINK_DISCONNECT,
+	POWER_SUPPLY_CHARGER_EVENT_ATTACH,
+	POWER_SUPPLY_CHARGER_EVENT_DETACH,
+	POWER_SUPPLY_CHARGER_EVENT_SELECTED,
+	POWER_SUPPLY_CHARGER_EVENT_DESELECTED,
 };
 
 struct power_supply_charger_cap {
@@ -432,6 +458,9 @@ static inline bool power_supply_is_string_property(
 	case POWER_SUPPLY_PROP_MODEL_NAME:
 	case POWER_SUPPLY_PROP_MANUFACTURER:
 	case POWER_SUPPLY_PROP_SERIAL_NUMBER:
+	case POWER_SUPPLY_PROP_PRU_DYNAMIC_PARAM:
+	case POWER_SUPPLY_PROP_PRU_STATIC_PARAM:
+	case POWER_SUPPLY_PROP_PTU_STATIC_PARAM:
 		return 1;
 	default:
 		break;
-- 
1.9.1

