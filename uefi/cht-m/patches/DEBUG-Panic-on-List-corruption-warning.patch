From b8d8e78b793d81b89e2ad05c94217b46423b954f Mon Sep 17 00:00:00 2001
From: Emmanuel Berthier <emmanuel.berthier@intel.com>
Date: Tue, 6 May 2014 17:01:33 +0200
Subject: [PATCH] [DEBUG] Panic on List corruption warning

Change-Id: I54d22c59bfed81213b0a9ab2a8e30ac0ae05df2f
Signed-off-by: Emmanuel Berthier <emmanuel.berthier@intel.com>
---
 lib/list_debug.c | 23 ++++++++++++++++-------
 1 file changed, 16 insertions(+), 7 deletions(-)

diff --git a/lib/list_debug.c b/lib/list_debug.c
index c24c2f7..8f13dff 100644
--- a/lib/list_debug.c
+++ b/lib/list_debug.c
@@ -23,17 +23,21 @@ void __list_add(struct list_head *new,
 			      struct list_head *prev,
 			      struct list_head *next)
 {
-	WARN(next->prev != prev,
+	int warn = 0;
+
+	warn |= WARN(next->prev != prev,
 		"list_add corruption. next->prev should be "
 		"prev (%p), but was %p. (next=%p).\n",
 		prev, next->prev, next);
-	WARN(prev->next != next,
+	warn |= WARN(prev->next != next,
 		"list_add corruption. prev->next should be "
 		"next (%p), but was %p. (prev=%p).\n",
 		next, prev->next, prev);
-	WARN(new == prev || new == next,
+	warn |= WARN(new == prev || new == next,
 	     "list_add double add: new=%p, prev=%p, next=%p.\n",
 	     new, prev, next);
+	if (warn)
+		panic("List corruption");
 	next->prev = new;
 	new->next = next;
 	new->prev = prev;
@@ -59,9 +63,10 @@ void __list_del_entry(struct list_head *entry)
 		"but was %p\n", entry, prev->next) ||
 	    WARN(next->prev != entry,
 		"list_del corruption. next->prev should be %p, "
-		"but was %p\n", entry, next->prev))
+		"but was %p\n", entry, next->prev)) {
+		panic("List corruption");
 		return;
-
+	}
 	__list_del(prev, next);
 }
 EXPORT_SYMBOL(__list_del_entry);
@@ -86,12 +91,16 @@ EXPORT_SYMBOL(list_del);
 void __list_add_rcu(struct list_head *new,
 		    struct list_head *prev, struct list_head *next)
 {
-	WARN(next->prev != prev,
+	int warn = 0;
+
+	warn |= WARN(next->prev != prev,
 		"list_add_rcu corruption. next->prev should be prev (%p), but was %p. (next=%p).\n",
 		prev, next->prev, next);
-	WARN(prev->next != next,
+	warn |= WARN(prev->next != next,
 		"list_add_rcu corruption. prev->next should be next (%p), but was %p. (prev=%p).\n",
 		next, prev->next, prev);
+	if (warn)
+		panic("List corruption");
 	new->next = next;
 	new->prev = prev;
 	rcu_assign_pointer(list_next_rcu(prev), new);
-- 
1.9.1

