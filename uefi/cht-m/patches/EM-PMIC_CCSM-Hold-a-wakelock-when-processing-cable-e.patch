From 593d4300d352ec44c012e6a265fae08bfc59c565 Mon Sep 17 00:00:00 2001
From: Albin B <albin.bala.krishnan@intel.com>
Date: Thu, 1 Oct 2015 18:11:12 +0530
Subject: [PATCH] [EM/PMIC_CCSM]: Hold a wakelock when processing cable events

When processing cable attach/detach event, sometimes  platform
is entering into suspend state, which causes i2c failure when
writing to the pmic registers. So holding a wakelock when
processing cable events to avoid entering the platform into suspend state.

Change-Id: I72640b687d45f2e58e7f5f4eb5f2414039b7c01d
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-7066
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
Reviewed-on: https://android.intel.com:443/418771
(cherry picked from commit 343056bea3cdc2fad5864d03e363c761beb4b648)
---
 drivers/power/intel_pmic_ccsm.c | 15 +++++++++++++--
 drivers/power/intel_pmic_ccsm.h |  2 ++
 2 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/drivers/power/intel_pmic_ccsm.c b/drivers/power/intel_pmic_ccsm.c
index 5b76612..05406aa 100644
--- a/drivers/power/intel_pmic_ccsm.c
+++ b/drivers/power/intel_pmic_ccsm.c
@@ -40,6 +40,7 @@
 #include <linux/power/battery_id.h>
 #include <linux/mfd/intel_soc_pmic.h>
 #include <linux/extcon.h>
+#include <linux/wakelock.h>
 #include "intel_pmic_ccsm.h"
 
 /* Macros */
@@ -1815,6 +1816,10 @@ static void pmic_ccsm_process_cable_events(enum cable_type cbl_type,
 	bool notify_otg = false;
 
 	mutex_lock(&pmic_lock);
+	/* Prevent system for entering to suspend when event processing */
+	if (!wake_lock_active(&chc.wakelock))
+		wake_lock(&chc.wakelock);
+
 	switch (cbl_type) {
         case CABLE_TYPE_USB:
 		/* Send VBUS notification to USB subsystem so that system will
@@ -1865,7 +1870,6 @@ static void pmic_ccsm_process_cable_events(enum cable_type cbl_type,
 		goto vbus_fail;
 	}
 
-
 	/* notify otg driver with event */
 	if (notify_otg) {
 		dev_dbg(chc.dev, "%s notified %d to otg\n", __func__, otg_evt);
@@ -1875,6 +1879,10 @@ static void pmic_ccsm_process_cable_events(enum cable_type cbl_type,
 	}
 
 vbus_fail:
+	/* Release the wake lock */
+	if (wake_lock_active(&chc.wakelock))
+		wake_unlock(&chc.wakelock);
+
 	mutex_unlock(&pmic_lock);
 }
 
@@ -2015,7 +2023,9 @@ static int pmic_chrgr_probe(struct platform_device *pdev)
 
 	INIT_LIST_HEAD(&chc.cable_evt_list);
 	spin_lock_init(&chc.cable_event_queue_lock);
-
+        /* Initialize the wakelock */
+        wake_lock_init(&chc.wakelock, WAKE_LOCK_SUSPEND,
+                                                "pmic_ccsm_wakelock");
 	ret = pmic_check_initial_events();
 	if (ret)
 		goto otg_req_fail;
@@ -2163,6 +2173,7 @@ static int pmic_chrgr_remove(struct platform_device *pdev)
 			extcon_unregister_interest(&chc->device_cable);
 			extcon_unregister_interest(&chc->host_cable);
 		}
+		wake_lock_destroy(&chc->wakelock);
 		kfree(chc->bcprof);
 		kfree(chc->actual_bcprof);
 		kfree(chc->runtime_bcprof);
diff --git a/drivers/power/intel_pmic_ccsm.h b/drivers/power/intel_pmic_ccsm.h
index 1a1909e..156f571 100644
--- a/drivers/power/intel_pmic_ccsm.h
+++ b/drivers/power/intel_pmic_ccsm.h
@@ -425,6 +425,8 @@ struct pmic_chrgr_drv_context {
 	struct ps_pse_mod_prof *actual_bcprof;
 	struct ps_pse_mod_prof *runtime_bcprof;
 	struct intel_pmic_ccsm_platform_data *pdata;
+	/* Wakelock to prevent platform enter suspend when event processing */
+        struct wake_lock wakelock;
 	struct usb_phy *otg;
 	struct thermal_cooling_device *vbus_cdev;
 	struct list_head evt_queue;
-- 
1.9.1

