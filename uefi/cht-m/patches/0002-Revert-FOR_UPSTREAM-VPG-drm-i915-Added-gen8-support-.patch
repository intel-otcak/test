From e3225b18e7a95285c192408d47a464136df60157 Mon Sep 17 00:00:00 2001
Message-Id: <e3225b18e7a95285c192408d47a464136df60157.1421835210.git.chang-joon.lee@intel.com>
In-Reply-To: <aa9849875fd9575e7de3d51e779ec326100b81c0.1421835210.git.chang-joon.lee@intel.com>
References: <aa9849875fd9575e7de3d51e779ec326100b81c0.1421835210.git.chang-joon.lee@intel.com>
From: John Harrison <John.C.Harrison@Intel.com>
Date: Mon, 1 Dec 2014 14:54:33 +0000
Subject: [PATCH 02/63] Revert "FOR_UPSTREAM [VPG]: drm/i915: Added gen8
 support for Watchdog Timeout on individual batch
 buffers"

This reverts commit ebe4259db605249f77162699f8af40b46a8cc51b.

Change-Id: Ie20dea312a248f95d278213028a0cca0ec9878b7
Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
---
 drivers/gpu/drm/i915/i915_drv.c            |   12 +++-------
 drivers/gpu/drm/i915/i915_drv.h            |    3 ++-
 drivers/gpu/drm/i915/i915_gem_execbuffer.c |   20 +++++-----------
 drivers/gpu/drm/i915/i915_irq.c            |   35 +---------------------------
 drivers/gpu/drm/i915/i915_params.c         |    4 ++++
 drivers/gpu/drm/i915/i915_reg.h            |    5 ----
 drivers/gpu/drm/i915/intel_lrc.c           |   28 +++++-----------------
 drivers/gpu/drm/i915/intel_ringbuffer.h    |   14 ++++-------
 8 files changed, 27 insertions(+), 94 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index c5af16b..2cfff3a 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -1320,15 +1320,9 @@ void i915_init_watchdog(struct drm_device *dev)
 		((KM_BSD_ENGINE_TIMEOUT_VALUE_IN_MS) *
 		(freq / KM_TIMER_MILLISECOND));
 
-	dev_priv->ring[VCS2].watchdog_threshold =
-		((KM_BSD_ENGINE_TIMEOUT_VALUE_IN_MS) *
-		(freq / KM_TIMER_MILLISECOND));
-
-	DRM_DEBUG_TDR("Watchdog Timeout Threshold, " \
-			"RCS: 0x%08X, VCS: 0x%08X, VCS2: 0x%08X\n", \
-			dev_priv->ring[RCS].watchdog_threshold,
-			dev_priv->ring[VCS].watchdog_threshold,
-			dev_priv->ring[VCS2].watchdog_threshold);
+	DRM_DEBUG_TDR("Watchdog Timeout Threshold, RCS: 0x%08X, VCS: 0x%08X\n",
+		      dev_priv->ring[RCS].watchdog_threshold,
+		      dev_priv->ring[VCS].watchdog_threshold);
 }
 
 static int i915_pci_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index ff789f8..e34ecdd 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2362,6 +2362,7 @@ struct i915_params {
 	unsigned int hangcheck_period;
 	unsigned int ring_reset_min_alive_period;
 	unsigned int gpu_reset_min_alive_period;
+	unsigned int enable_watchdog;
 	/* leave bools at the end to not create holes */
 	bool enable_hangcheck;
 	bool fastboot;
@@ -2415,7 +2416,7 @@ void i915_queue_hangcheck(struct drm_device *dev, u32 ringid,
 
 __printf(4, 5)
 void i915_handle_error(struct drm_device *dev, struct intel_ring_hangcheck *hc,
-		       int watchdog, const char *fmt, ...);
+		       bool watchdog, const char *fmt, ...);
 void i915_hangcheck_sample(struct work_struct *work);
 void gen6_set_pm_mask(struct drm_i915_private *dev_priv, u32 pm_iir,
 							int new_delay);
diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index 2ffd0dd..936ac1a 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -1117,13 +1117,9 @@ i915_gem_ringbuffer_submission(struct drm_device *dev, struct drm_file *file,
 	}
 
 	/* Start watchdog timer */
-	if (args->flags & I915_EXEC_ENABLE_WATCHDOG) {
-		if (!intel_ring_supports_watchdog(ring)) {
-			DRM_ERROR("%s does NOT support watchdog timeout!\n",
-					ring->name);
-			ret = -EINVAL;
-			goto error;
-		}
+	if ((args->flags & I915_EXEC_ENABLE_WATCHDOG) &&
+	    i915.enable_watchdog &&
+	    intel_ring_supports_watchdog(ring)) {
 
 		ret = intel_ring_start_watchdog(ring);
 		if (ret)
@@ -1281,13 +1277,9 @@ i915_gem_ringbuffer_submission(struct drm_device *dev, struct drm_file *file,
 		goto error;
 
 	/* Cancel watchdog timer */
-	if (args->flags & I915_EXEC_ENABLE_WATCHDOG) {
-		if (!intel_ring_supports_watchdog(ring)) {
-			DRM_ERROR("%s does NOT support watchdog timeout!\n",
-					ring->name);
-			ret = -EINVAL;
-			goto error;
-		}
+	if ((args->flags & I915_EXEC_ENABLE_WATCHDOG) &&
+		i915.enable_watchdog &&
+		intel_ring_supports_watchdog(ring)) {
 
 		ret = intel_ring_stop_watchdog(ring);
 		if (ret)
diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index e5f4942..5552b84 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -1728,16 +1728,6 @@ static irqreturn_t gen8_gt_irq_handler(struct drm_device *dev,
 				notify_ring(dev, ring);
 			if (rcs & GT_CONTEXT_SWITCH_INTERRUPT)
 				intel_execlists_handle_ctx_events(ring);
-			if (rcs & GT_GEN8_RCS_WATCHDOG_INTERRUPT) {
-				struct intel_engine_cs *ring;
-
-				/* Stop the counter to prevent further interrupts */
-				ring = &dev_priv->ring[RCS];
-				I915_WRITE(RING_CNTR(ring->mmio_base), RCS_WATCHDOG_DISABLE);
-				dev_priv->ring[RCS].hangcheck.watchdog_count++;
-				i915_handle_error(dev, &dev_priv->ring[RCS].hangcheck, 1,
-						  "Render ring timeout counter exceeded");
-			}
 
 			bcs = tmp >> GEN8_BCS_IRQ_SHIFT;
 			ring = &dev_priv->ring[BCS];
@@ -1761,16 +1751,6 @@ static irqreturn_t gen8_gt_irq_handler(struct drm_device *dev,
 				notify_ring(dev, ring);
 			if (vcs & GT_CONTEXT_SWITCH_INTERRUPT)
 				intel_execlists_handle_ctx_events(ring);
-			if (vcs & GT_GEN8_VCS_WATCHDOG_INTERRUPT) {
-				struct intel_engine_cs *ring;
-
-				/* Stop the counter to prevent further interrupts */
-				ring = &dev_priv->ring[VCS];
-				I915_WRITE(RING_CNTR(ring->mmio_base), VCS_WATCHDOG_DISABLE);
-				dev_priv->ring[VCS].hangcheck.watchdog_count++;
-				i915_handle_error(dev, &dev_priv->ring[VCS].hangcheck, 1,
-						  "Video ring timeout counter exceeded");
-			}
 
 			vcs = tmp >> GEN8_VCS2_IRQ_SHIFT;
 			ring = &dev_priv->ring[VCS2];
@@ -1778,16 +1758,6 @@ static irqreturn_t gen8_gt_irq_handler(struct drm_device *dev,
 				notify_ring(dev, ring);
 			if (vcs & GT_CONTEXT_SWITCH_INTERRUPT)
 				intel_execlists_handle_ctx_events(ring);
-			if (vcs & GT_GEN8_VCS_WATCHDOG_INTERRUPT) {
-				struct intel_engine_cs *ring;
-
-				/* Stop the counter to prevent further interrupts */
-				ring = &dev_priv->ring[VCS2];
-				I915_WRITE(RING_CNTR(ring->mmio_base), VCS2_WATCHDOG_DISABLE);
-				dev_priv->ring[VCS2].hangcheck.watchdog_count++;
-				i915_handle_error(dev, &dev_priv->ring[VCS2].hangcheck, 1,
-						  "Video ring 2 timeout counter exceeded");
-			}
 		} else
 			DRM_ERROR("The master control interrupt lied (GT1)!\n");
 	}
@@ -3029,7 +2999,7 @@ i915_report_and_clear_eir_exit:
  * of a ring dump etc.).
  */
 void i915_handle_error(struct drm_device *dev, struct intel_ring_hangcheck *hc,
-		       int watchdog, const char *fmt, ...)
+		       bool watchdog, const char *fmt, ...)
 {
 	int full_reset = 0;
 	unsigned long cur_time;
@@ -4105,14 +4075,11 @@ static void gen8_gt_irq_postinstall(struct drm_i915_private *dev_priv)
 {
 	/* These are interrupts we'll toggle with the ring mask register */
 	uint32_t gt_interrupts[] = {
-		GT_GEN8_RCS_WATCHDOG_INTERRUPT << GEN8_RCS_IRQ_SHIFT |
 		GT_RENDER_USER_INTERRUPT << GEN8_RCS_IRQ_SHIFT |
 			GT_CONTEXT_SWITCH_INTERRUPT << GEN8_RCS_IRQ_SHIFT |
 			GT_RENDER_L3_PARITY_ERROR_INTERRUPT |
 			GT_RENDER_USER_INTERRUPT << GEN8_BCS_IRQ_SHIFT |
 			GT_CONTEXT_SWITCH_INTERRUPT << GEN8_BCS_IRQ_SHIFT,
-		GT_GEN8_VCS_WATCHDOG_INTERRUPT << GEN8_VCS1_IRQ_SHIFT |
-		GT_GEN8_VCS_WATCHDOG_INTERRUPT << GEN8_VCS2_IRQ_SHIFT |
 		GT_RENDER_USER_INTERRUPT << GEN8_VCS1_IRQ_SHIFT |
 			GT_CONTEXT_SWITCH_INTERRUPT << GEN8_VCS1_IRQ_SHIFT |
 			GT_RENDER_USER_INTERRUPT << GEN8_VCS2_IRQ_SHIFT |
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index e5ca774..befebd9 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -56,6 +56,7 @@ struct i915_params i915 __read_mostly = {
 	.hangcheck_period = 1000,
 	.ring_reset_min_alive_period = 0,
 	.gpu_reset_min_alive_period = 0,
+	.enable_watchdog = 1,
 	.memtrack_debug = 1,
 	.enable_intel_adf = 0,
 };
@@ -124,6 +125,9 @@ MODULE_PARM_DESC(enable_hangcheck,
 	"WARNING: Disabling this can cause system wide hangs. "
 	"(default: true)");
 
+module_param_named(enable_watchdog, i915.enable_watchdog, int, 0644);
+MODULE_PARM_DESC(enable_watchdog, "Enable watchdog timers (default: true)");
+
 module_param_named(enable_ppgtt, i915.enable_ppgtt, int, 0400);
 MODULE_PARM_DESC(enable_ppgtt,
 	"Override PPGTT usage. "
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 2bc46d4..6ac3416 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -1528,17 +1528,12 @@ enum punit_power_well {
 #define GT_BLT_CS_ERROR_INTERRUPT		(1 << 25)
 #define GT_BLT_USER_INTERRUPT			(1 << 22)
 #define GT_GEN6_BSD_WATCHDOG_INTERRUPT		(1 << 18)
-#define   RCS_WATCHDOG_DISABLE			1
 #define GT_BSD_CS_ERROR_INTERRUPT		(1 << 15)
 #define GT_BSD_USER_INTERRUPT			(1 << 12)
 #define GT_RENDER_L3_PARITY_ERROR_INTERRUPT_S1	(1 << 11) /* hsw+; rsvd on snb, ivb, vlv */
 #define GT_RENDER_PERFMON_BUFFER_INTERRUPT      (1 <<  9) /* !snb */
 #define GT_CONTEXT_SWITCH_INTERRUPT		(1 <<  8)
 #define GT_GEN6_RENDER_WATCHDOG_INTERRUPT	(1 <<  6)
-#define GT_GEN8_RCS_WATCHDOG_INTERRUPT		(1 <<  6)
-#define GT_GEN8_VCS_WATCHDOG_INTERRUPT		(1 <<  6)
-#define   VCS_WATCHDOG_DISABLE			0xFFFFFFFF
-#define   VCS2_WATCHDOG_DISABLE		0xFFFFFFFF
 #define GT_RENDER_L3_PARITY_ERROR_INTERRUPT	(1 <<  5) /* !snb */
 #define GT_RENDER_PIPECTL_NOTIFY_INTERRUPT	(1 <<  4)
 #define GT_RENDER_CS_MASTER_ERROR_INTERRUPT	(1 <<  3)
diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index b891d39..36b418c 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -1447,14 +1447,9 @@ int intel_execlists_submission(struct drm_device *dev, struct drm_file *file,
 		goto error;
 
 	/* Start watchdog timer */
-	if (args->flags & I915_EXEC_ENABLE_WATCHDOG) {
-		if (!intel_ring_supports_watchdog(ring)) {
-			DRM_ERROR("%s does NOT support watchdog timeout!\n",
-					ring->name);
-			ret = -EINVAL;
-			goto error;
-		}
-
+	if ((args->flags & I915_EXEC_ENABLE_WATCHDOG) &&
+	    i915.enable_watchdog &&
+	    intel_ring_supports_watchdog(ring)) {
 		ret = gen8_ring_start_watchdog(ringbuf);
 		if (ret)
 			goto error;
@@ -1504,13 +1499,9 @@ int intel_execlists_submission(struct drm_device *dev, struct drm_file *file,
 		goto error;
 
 	/* Cancel watchdog timer */
-	if (args->flags & I915_EXEC_ENABLE_WATCHDOG) {
-		if (!intel_ring_supports_watchdog(ring)) {
-			DRM_ERROR("%s does NOT support watchdog timeout!\n",
-					ring->name);
-			ret = -EINVAL;
-			return ret;
-		}
+	if ((args->flags & I915_EXEC_ENABLE_WATCHDOG) &&
+		i915.enable_watchdog &&
+		intel_ring_supports_watchdog(ring)) {
 
 		ret = gen8_ring_stop_watchdog(ringbuf);
 		if (ret)
@@ -2384,9 +2375,6 @@ static int logical_render_ring_init(struct drm_device *dev)
 	if (HAS_L3_DPF(dev))
 		ring->irq_keep_mask |= GT_RENDER_L3_PARITY_ERROR_INTERRUPT;
 
-	ring->irq_keep_mask |=
-		(GT_GEN8_RCS_WATCHDOG_INTERRUPT << GEN8_RCS_IRQ_SHIFT);
-
 	ring->init = gen8_init_render_ring;
 	ring->init_context = intel_logical_ring_workarounds_emit;
 	ring->cleanup = intel_fini_pipe_control;
@@ -2417,8 +2405,6 @@ static int logical_bsd_ring_init(struct drm_device *dev)
 		GT_RENDER_USER_INTERRUPT << GEN8_VCS1_IRQ_SHIFT;
 	ring->irq_keep_mask =
 		GT_CONTEXT_SWITCH_INTERRUPT << GEN8_VCS1_IRQ_SHIFT;
-	ring->irq_keep_mask |=
-		(GT_GEN8_VCS_WATCHDOG_INTERRUPT << GEN8_VCS1_IRQ_SHIFT);
 
 	ring->init = gen8_init_common_ring;
 	ring->get_seqno = gen8_get_seqno;
@@ -2448,8 +2434,6 @@ static int logical_bsd2_ring_init(struct drm_device *dev)
 		GT_RENDER_USER_INTERRUPT << GEN8_VCS2_IRQ_SHIFT;
 	ring->irq_keep_mask =
 		GT_CONTEXT_SWITCH_INTERRUPT << GEN8_VCS2_IRQ_SHIFT;
-	ring->irq_keep_mask |=
-		(GT_GEN8_VCS_WATCHDOG_INTERRUPT << GEN8_VCS2_IRQ_SHIFT);
 
 	ring->init = gen8_init_common_ring;
 	ring->get_seqno = gen8_get_seqno;
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.h b/drivers/gpu/drm/i915/intel_ringbuffer.h
index 695d908..f401290 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.h
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.h
@@ -65,6 +65,8 @@ struct  intel_hw_status_page {
 			GEN8_RING_CONTEXT_SIZE)
 
 #define WATCHDOG_ENABLE 0
+#define RCS_WATCHDOG_DISABLE 1
+#define VCS_WATCHDOG_DISABLE 0xFFFFFFFF
 
 #define I915_READ_TAIL(ring) I915_READ(RING_TAIL((ring)->mmio_base))
 #define I915_WRITE_TAIL(ring, val) I915_WRITE(RING_TAIL((ring)->mmio_base), val)
@@ -408,7 +410,7 @@ struct intel_engine_cs {
 
 	/*
 	 * Watchdog timer threshold values
-	 * only RCS, VCS, VCS2 rings have watchdog timeout support
+	 * only RCS, VCS rings have watchdog timeout support
 	 */
 	uint32_t watchdog_threshold;
 
@@ -566,14 +568,8 @@ int intel_ring_invalidate_tlb(struct intel_engine_cs *ring);
 static inline int intel_ring_supports_watchdog(struct intel_engine_cs *ring)
 {
 	/* Return 1 if the ring supports watchdog reset, otherwise 0 */
-	if (ring) {
-		int ret;
-
-		ret = (ring->id == RCS || ring->id == VCS || ring->id == VCS2);
-		DRM_DEBUG_TDR("%s %s support watchdog timeout\n",
-				ring->name, ret?"does":"does NOT");
-		return ret;
-	}
+	if (ring)
+		return ring->id == RCS || ring->id == VCS;
 
 	return 0;
 }
-- 
1.7.9.5

