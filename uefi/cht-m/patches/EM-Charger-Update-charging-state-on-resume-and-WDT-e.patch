From ea90fcfda4ca3dc3ffb111a6383d5e0b16848e20 Mon Sep 17 00:00:00 2001
From: Bidipta Samadder <bidiptax.samadder@intel.com>
Date: Thu, 11 Jun 2015 18:35:03 +0530
Subject: [PATCH] EM/Charger: Update charging state on resume and WDT
 expiration

On system resume, battery charging state in charger
registers needs to be updated. This avoids
battery charging state getting set to default value.
If WDT exception happens, charging has to be
disabled if enable_charging is reset. Presently
only in case of enable_charing being set, charging
is resumed. It is necessary to also update charger
registers in case of enable_charging being reset.

Change-Id: Ia25d9a19a6f85a0b0a88087cf9f8178925bdc8d4
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-30583
Signed-off-by: Yashodhan Kurtadkar <yashodhan.kurtadkar@intel.com>
Signed-off-by: Bidipta Samadder <bidiptax.samadder@intel.com>
---
 drivers/power/bq24192_charger.c | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index ce4fa2c31349..eb6dfc352a29 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -1782,8 +1782,13 @@ static void bq24192_irq_worker(struct work_struct *work)
 			mutex_lock(&chip->event_lock);
 			bq24192_resume_charging(chip);
 			mutex_unlock(&chip->event_lock);
-		} else
-			dev_info(&chip->client->dev, "No charger connected\n");
+		} else {
+			mutex_lock(&chip->event_lock);
+			ret = bq24192_enable_charging(chip, false);
+			if (ret < 0)
+				dev_err(&chip->client->dev, "charging disable failed\n");
+			mutex_unlock(&chip->event_lock);
+		}
 	}
 	if ((reg_fault & FAULT_STAT_CHRG_TMR_FLT) == FAULT_STAT_CHRG_TMR_FLT) {
 		dev_info(&chip->client->dev, "Safety timer expired\n");
@@ -2466,10 +2471,24 @@ static int bq24192_remove(struct i2c_client *client)
 #ifdef CONFIG_PM
 static int bq24192_suspend(struct device *dev)
 {
+	int ret;
 	struct bq24192_chip *chip = dev_get_drvdata(dev);
 
 	dev_dbg(&chip->client->dev, "bq24192 suspend\n");
-	return 0;
+	if (chip->is_charging_enabled) {
+		mutex_lock(&chip->event_lock);
+		ret = bq24192_enable_charging(chip, true);
+		if (ret < 0)
+			dev_err(&chip->client->dev, "charging enable failed\n");
+		mutex_unlock(&chip->event_lock);
+	} else {
+		mutex_lock(&chip->event_lock);
+		ret = bq24192_enable_charging(chip, false);
+		if (ret < 0)
+			dev_err(&chip->client->dev, "charging disable failed\n");
+		mutex_unlock(&chip->event_lock);
+	}
+	return ret;
 }
 
 static int bq24192_resume(struct device *dev)
-- 
1.9.1

