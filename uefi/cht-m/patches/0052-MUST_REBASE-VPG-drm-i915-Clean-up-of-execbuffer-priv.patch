From ec8535f4cb8fdd71df498687c44d2261213d9da4 Mon Sep 17 00:00:00 2001
Message-Id: <ec8535f4cb8fdd71df498687c44d2261213d9da4.1421835210.git.chang-joon.lee@intel.com>
In-Reply-To: <aa9849875fd9575e7de3d51e779ec326100b81c0.1421835210.git.chang-joon.lee@intel.com>
References: <aa9849875fd9575e7de3d51e779ec326100b81c0.1421835210.git.chang-joon.lee@intel.com>
From: John Harrison <John.C.Harrison@Intel.com>
Date: Wed, 26 Nov 2014 17:12:02 +0000
Subject: [PATCH 52/63] MUST_REBASE [VPG]: drm/i915: Clean up of execbuffer
 'priv_data'

There is a really horrid hack in the execbuffer interface whereby the
cliprect data block is reused to pass flags to the driver for newer
generation hardware. The current code implementation differs between
the execlist and legacy paths - one copies the data around in some
dynamically allocated storage, the other just uses an integer. Either
way, they are still passing around opaque data through many levels of
driver before deciding that it is simply a one bit flag.

This patch rationalises the interface. There is no more dynamically
allocated data block in either path. Both versions copy the user data
into a local integer and decode it there and then into the flag it is
meant to be. From then on, only the flag is passed around using the
existing execbuffer dispatch flags varible.

The private data hack was introduced by commit:
  MUST_REBASE [VPG]: drm/i915: Use deprecated arguments to pass command buffer
private data
  commit id: dad7e166d75c7484d34a4eaa121955cf34248aee

This commit could possibly be squashed into that one and/or dropped if
that commit is ever dropped.

Change-Id: Ica221beb7ea06e3ae13362315af32d7fff6c3bad
For: VIZ-1587
Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
---
 drivers/gpu/drm/i915/i915_gem_execbuffer.c   |   28 +++++++++++++-------------
 drivers/gpu/drm/i915/i915_gem_render_state.c |    1 -
 drivers/gpu/drm/i915/intel_lrc.c             |   20 +++++++++---------
 drivers/gpu/drm/i915/intel_ringbuffer.c      |   15 +++-----------
 drivers/gpu/drm/i915/intel_ringbuffer.h      |    6 +++---
 5 files changed, 30 insertions(+), 40 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index 4131ea9..f990564 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -1053,8 +1053,6 @@ i915_gem_ringbuffer_submission(struct drm_device *dev, struct drm_file *file,
 	int instp_mode;
 	u32 instp_mask;
 	int i, ret = 0;
-	void *priv_data = NULL;
-	u32 priv_length = 0;
 	int fd_fence_complete = -1;
 	bool watchdog_running = 0;
 
@@ -1089,21 +1087,26 @@ i915_gem_ringbuffer_submission(struct drm_device *dev, struct drm_file *file,
 				goto error;
 			}
 		} else {
-			/* Gen5 and later definition of cliprects */
-			priv_data = kmalloc(args->num_cliprects, GFP_KERNEL);
-			if (priv_data == NULL) {
-				ret = -ENOMEM;
+			u32 priv_data;
+
+			/*
+			 * cliprects is only used by the userland to pass in
+			 * private handshake data for gen5+.
+			 */
+			if (args->num_cliprects != sizeof(priv_data)) {
+				ret = -EINVAL;
 				goto error;
 			}
 
-			priv_length = args->num_cliprects;
-			if (copy_from_user(
-					priv_data,
-					to_user_ptr(args->cliprects_ptr),
-					priv_length)) {
+			if (copy_from_user(&priv_data,
+					   to_user_ptr(args->cliprects_ptr),
+					   sizeof(priv_data))) {
 				ret = -EFAULT;
 				goto error;
 			}
+
+			if (priv_data == 0xffffffff)
+				dispatch_flags |= I915_DISPATCH_LAUNCH_CB2;
 		}
 	} else {
 		if (args->DR4 == 0xffffffff) {
@@ -1261,7 +1264,6 @@ i915_gem_ringbuffer_submission(struct drm_device *dev, struct drm_file *file,
 
 			ret = ring->dispatch_execbuffer(ring,
 							exec_start, exec_len,
-							NULL, 0,
 							dispatch_flags);
 			if (ret)
 				goto error;
@@ -1270,7 +1272,6 @@ i915_gem_ringbuffer_submission(struct drm_device *dev, struct drm_file *file,
 		/* Execution path for all Gen >= 5 */
 		ret = ring->dispatch_execbuffer(ring,
 						exec_start, exec_len,
-						priv_data, priv_length,
 						dispatch_flags);
 		if (ret)
 			goto error;
@@ -1310,7 +1311,6 @@ i915_gem_ringbuffer_submission(struct drm_device *dev, struct drm_file *file,
 
 error:
 	kfree(cliprects);
-	kfree(priv_data);
 
 	if (ret && fd_fence_complete != -1) {
 		sys_close(fd_fence_complete);
diff --git a/drivers/gpu/drm/i915/i915_gem_render_state.c b/drivers/gpu/drm/i915/i915_gem_render_state.c
index 21e3bbe..2a030a7 100644
--- a/drivers/gpu/drm/i915/i915_gem_render_state.c
+++ b/drivers/gpu/drm/i915/i915_gem_render_state.c
@@ -165,7 +165,6 @@ int i915_gem_render_state_init(struct intel_engine_cs *ring)
 	ret = ring->dispatch_execbuffer(ring,
 					so.ggtt_offset,
 					so.rodata->batch_items * 4,
-					NULL, 0,
 					I915_DISPATCH_SECURE);
 	if (ret)
 		goto out;
diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index 97d4d03..b4f06ad 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -1327,7 +1327,6 @@ int intel_execlists_submission(struct drm_device *dev, struct drm_file *file,
 	u32 instp_mask;
 	int ret;
 	int fd_fence_complete = -1;
-	u32 priv_data = 0;
 	bool watchdog_running = 0;
 
 	instp_mode = args->flags & I915_EXEC_CONSTANTS_MASK;
@@ -1357,21 +1356,22 @@ int intel_execlists_submission(struct drm_device *dev, struct drm_file *file,
 	}
 
 	if (args->num_cliprects != 0) {
+		u32 priv_data;
+
 		/*
-		 * num_cliprects is only used by the userland to pass in private
-		 * handshake data for gen8+.
-		 *
-		 * Future users of this communication method will have to add
-		 * a function to sanitize the private length for all known
-		 * values.
+		 * cliprects is only used by the userland to pass in private
+		 * handshake data for gen5+.
 		 */
-		if (args->num_cliprects != sizeof(u32))
+		if (args->num_cliprects != sizeof(priv_data))
 			return -EINVAL;
 
 		if (copy_from_user((void *)&priv_data,
-			to_user_ptr(args->cliprects_ptr), sizeof(u32))) {
+			to_user_ptr(args->cliprects_ptr), sizeof(priv_data))) {
 			return -EFAULT;
 		}
+
+		if (priv_data == 0xffffffff)
+			dispatch_flags |= I915_DISPATCH_LAUNCH_CB2;
 	} else {
 		if (args->DR4 == 0xffffffff) {
 			DRM_DEBUG("UXA submitting garbage DR4, fixing up\n");
@@ -1484,7 +1484,7 @@ int intel_execlists_submission(struct drm_device *dev, struct drm_file *file,
 		goto error;
 
 	/* Send pipe control with protected memory disable if requested */
-	if (priv_data == 0xffffffff) {
+	if (dispatch_flags & I915_DISPATCH_LAUNCH_CB2) {
 		ret = gen8_logical_disable_protected_mem(ringbuf);
 		if (ret)
 			goto error;
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.c b/drivers/gpu/drm/i915/intel_ringbuffer.c
index e31d7f4..2052609a 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@ -1973,7 +1973,6 @@ gen8_ring_put_irq(struct intel_engine_cs *ring)
 static int
 i965_dispatch_execbuffer(struct intel_engine_cs *ring,
 			 u64 offset, u32 length,
-			 void *priv_data, u32 priv_length,
 			 unsigned flags)
 {
 	int ret;
@@ -1997,7 +1996,6 @@ i965_dispatch_execbuffer(struct intel_engine_cs *ring,
 static int
 i830_dispatch_execbuffer(struct intel_engine_cs *ring,
 				u64 offset, u32 len,
-				void *priv_data, u32 priv_length,
 				unsigned flags)
 {
 	int ret;
@@ -2049,7 +2047,6 @@ i830_dispatch_execbuffer(struct intel_engine_cs *ring,
 static int
 i915_dispatch_execbuffer(struct intel_engine_cs *ring,
 			 u64 offset, u32 len,
-			 void *priv_data, u32 priv_length,
 			 unsigned flags)
 {
 	int ret;
@@ -2680,7 +2677,6 @@ gen8_pipe_control_disable_protected_mem(struct intel_engine_cs *ring)
 static int
 gen8_ring_dispatch_execbuffer(struct intel_engine_cs *ring,
 			      u64 offset, u32 len,
-			      void *priv_data, u32 priv_length,
 			      unsigned flags)
 {
 	bool ppgtt = USES_PPGTT(ring->dev) && !(flags & I915_DISPATCH_SECURE);
@@ -2698,8 +2694,7 @@ gen8_ring_dispatch_execbuffer(struct intel_engine_cs *ring,
 	intel_ring_advance(ring);
 
 	/* Send pipe control with protected memory disable if requested */
-	if ((priv_length == sizeof(u32)) &&
-	    (*(u32 *)priv_data == 0xffffffff)) {
+	if (flags & I915_DISPATCH_LAUNCH_CB2) {
 		ret = gen8_pipe_control_disable_protected_mem(ring);
 		if (ret)
 			return ret;
@@ -2790,7 +2785,6 @@ launch_cb2(struct intel_engine_cs *ring)
 static int
 hsw_ring_dispatch_execbuffer(struct intel_engine_cs *ring,
 			      u64 offset, u32 len,
-			      void *priv_data, u32 priv_length,
 			      unsigned flags)
 {
 	int ret = 0;
@@ -2807,8 +2801,7 @@ hsw_ring_dispatch_execbuffer(struct intel_engine_cs *ring,
 	intel_ring_advance(ring);
 
 	/* Execute CB2 if requested */
-	if ((priv_length == sizeof(u32)) &&
-	    (*(u32 *)priv_data == 0xffffffff))
+	if (flags & I915_DISPATCH_LAUNCH_CB2)
 		ret = launch_cb2(ring);
 
 	return ret;
@@ -2817,7 +2810,6 @@ hsw_ring_dispatch_execbuffer(struct intel_engine_cs *ring,
 static int
 gen6_ring_dispatch_execbuffer(struct intel_engine_cs *ring,
 			      u64 offset, u32 len,
-			      void *priv_data, u32 priv_length,
 			      unsigned flags)
 {
 	int ret = 0;
@@ -2834,8 +2826,7 @@ gen6_ring_dispatch_execbuffer(struct intel_engine_cs *ring,
 	intel_ring_advance(ring);
 
 	/* Execute CB2 if requested */
-	if ((priv_length == sizeof(u32)) &&
-	    (*(u32 *)priv_data == 0xffffffff)) {
+	if (flags & I915_DISPATCH_LAUNCH_CB2) {
 		if (IS_VALLEYVIEW(ring->dev))
 			ret = launch_cb2(ring);
 	}
diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.h b/drivers/gpu/drm/i915/intel_ringbuffer.h
index 2e97c9f..a8c73c6 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.h
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.h
@@ -332,10 +332,10 @@ struct intel_engine_cs {
 				     u32 seqno);
 	int		(*dispatch_execbuffer)(struct intel_engine_cs *ring,
 					       u64 offset, u32 length,
-					       void *priv_data, u32 priv_length,
 					       unsigned dispatch_flags);
-#define I915_DISPATCH_SECURE 0x1
-#define I915_DISPATCH_PINNED 0x2
+#define I915_DISPATCH_SECURE            (1 << 0)
+#define I915_DISPATCH_PINNED            (1 << 1)
+#define I915_DISPATCH_LAUNCH_CB2        (1 << 2)
 	void		(*cleanup)(struct intel_engine_cs *ring);
 	int (*enable)(struct intel_engine_cs *ring, struct intel_context *ctx);
 	int (*disable)(struct intel_engine_cs *ring, struct intel_context *ctx);
-- 
1.7.9.5

