From 9a4e63cdf897fd19eded6a0482835c25b3b515a9 Mon Sep 17 00:00:00 2001
Message-Id: <9a4e63cdf897fd19eded6a0482835c25b3b515a9.1421709247.git.chang-joon.lee@intel.com>
In-Reply-To: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
References: <3650eb44734ad4fbe098313349da8185595a20d8.1421709247.git.chang-joon.lee@intel.com>
From: Deepak S <deepak.s@intel.com>
Date: Fri, 5 Sep 2014 20:12:27 +0530
Subject: [PATCH 09/75] MUST_REBASE [VPG]: drm/i915/adf: Added attach & detach
 support in i915

As part of attach and detach, we are doing framebuffer pin and unpin for
the dma fb from adf drivers

v2: Add tiling mode support in dma buf attach private data.

v3: Remove extra DRM reference count

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-3547
Change-Id: I7ccb672a4eccff5aaf5235a88abd808489860bb2
Signed-off-by: Deepak S <deepak.s@intel.com>
---
 drivers/gpu/drm/i915/i915_gem_dmabuf.c |   55 ++++++++++++++++++++++++++++++++
 include/drm/i915_dmabuf.h              |   41 ++++++++++++++++++++++++
 2 files changed, 96 insertions(+)
 create mode 100644 include/drm/i915_dmabuf.h

diff --git a/drivers/gpu/drm/i915/i915_gem_dmabuf.c b/drivers/gpu/drm/i915/i915_gem_dmabuf.c
index 580aa42..4f82868 100644
--- a/drivers/gpu/drm/i915/i915_gem_dmabuf.c
+++ b/drivers/gpu/drm/i915/i915_gem_dmabuf.c
@@ -24,7 +24,9 @@
  *	Dave Airlie <airlied@redhat.com>
  */
 #include <drm/drmP.h>
+#include <drm/i915_dmabuf.h>
 #include "i915_drv.h"
+#include "intel_drv.h"
 #include <linux/dma-buf.h>
 
 static struct drm_i915_gem_object *dma_buf_to_obj(struct dma_buf *buf)
@@ -32,6 +34,57 @@ static struct drm_i915_gem_object *dma_buf_to_obj(struct dma_buf *buf)
 	return to_intel_bo(buf->priv);
 }
 
+static int i915_gem_attach_dma_buf(struct dma_buf *dmabuf,
+				   struct device *dev,
+				   struct dma_buf_attachment *attach)
+{
+	struct i915_drm_dmabuf_attachment *i915_attach;
+	struct drm_gem_object *gem_obj = dmabuf->priv;
+	struct drm_i915_gem_object *obj = to_intel_bo(gem_obj);
+	struct drm_device *drm_dev = gem_obj->dev;
+	u32 ret;
+
+	i915_attach = kzalloc(sizeof(*i915_attach), GFP_KERNEL);
+	if (!i915_attach)
+		return -ENOMEM;
+
+	mutex_lock(&drm_dev->struct_mutex);
+	ret = intel_pin_and_fence_fb_obj(drm_dev, obj, obj->ring);
+	if (ret) {
+		drm_gem_object_unreference(&obj->base);
+		mutex_unlock(&drm_dev->struct_mutex);
+		return ret;
+	}
+
+	i915_attach->gtt_offset = i915_gem_obj_ggtt_offset(obj);
+	i915_attach->tiling_mode = obj->tiling_mode;
+	attach->priv = i915_attach;
+	mutex_unlock(&drm_dev->struct_mutex);
+	return 0;
+}
+
+static void i915_gem_detach_dma_buf(struct dma_buf *dmabuf,
+				    struct dma_buf_attachment *attach)
+{
+	struct i915_drm_dmabuf_attachment *i915_attach = attach->priv;
+	struct drm_gem_object *gem_obj = dmabuf->priv;
+	struct drm_i915_gem_object *obj = to_intel_bo(gem_obj);
+	struct drm_device *dev = gem_obj->dev;
+
+	if (!i915_attach)
+		return;
+
+	mutex_lock(&dev->struct_mutex);
+	i915_gem_object_unpin_fence(obj);
+	i915_gem_object_unpin_from_display_plane(obj);
+	drm_gem_object_unreference(&obj->base);
+	mutex_unlock(&dev->struct_mutex);
+
+	kfree(i915_attach);
+	attach->priv = NULL;
+}
+
+
 static struct sg_table *i915_gem_map_dma_buf(struct dma_buf_attachment *attachment,
 					     enum dma_data_direction dir)
 {
@@ -213,6 +266,8 @@ static int i915_gem_begin_cpu_access(struct dma_buf *dma_buf, size_t start, size
 }
 
 static const struct dma_buf_ops i915_dmabuf_ops =  {
+	.attach = i915_gem_attach_dma_buf,
+	.detach = i915_gem_detach_dma_buf,
 	.map_dma_buf = i915_gem_map_dma_buf,
 	.unmap_dma_buf = i915_gem_unmap_dma_buf,
 	.release = drm_gem_dmabuf_release,
diff --git a/include/drm/i915_dmabuf.h b/include/drm/i915_dmabuf.h
new file mode 100644
index 0000000..10b8a39
--- /dev/null
+++ b/include/drm/i915_dmabuf.h
@@ -0,0 +1,41 @@
+/**************************************************************************
+ *
+ * Copyright 2014 Intel Inc.
+ * All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+ * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+ * USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors:
+ *     Deepak S <deepak.s@linux.intel.com>
+ *
+ **************************************************************************/
+
+#ifndef _I915_DMABUF_H_
+#define _I915_DMABUF_H_
+
+/* For use by i915_gem_dmabuf client driver */
+
+struct i915_drm_dmabuf_attachment {
+	unsigned long gtt_offset;
+	unsigned int tiling_mode;
+};
+
+#endif				/* _I915_DMABUF_H_ */
-- 
1.7.9.5

