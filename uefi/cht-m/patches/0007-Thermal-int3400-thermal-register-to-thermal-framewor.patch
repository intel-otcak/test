From 3855728966e74ab05d1c42c00414d72b3c8be3bf Mon Sep 17 00:00:00 2001
From: Zhang Rui <rui.zhang@intel.com>
Date: Sun, 23 Mar 2014 23:37:32 +0800
Subject: [PATCH 07/23] Thermal: int3400 thermal: register to thermal
 framework

Change-Id: I4179b80e550d9910df028ad7e730bf8c5d57d157
Signed-off-by: Zhang Rui <rui.zhang@intel.com>
---
 drivers/thermal/Kconfig                         |    1 +
 drivers/thermal/intel_thermal/int3400_thermal.c |   29 +++++++++++++++++++++++
 2 files changed, 30 insertions(+)

diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index 42410bd..bbbacbc 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -238,6 +238,7 @@ config INTEL_BYT_AUX_DTS_THERMAL
 config INTEL_THERMAL
 	tristate "Intel Thermal driver"
 	depends on X86 && ACPI
+	select THERMAL_GOV_USER_SPACE
 	help
 	  Newer laptops and tablets that use ACPI for thermal control
 	  outside the core CPU/SOC for thermal safety reasons.
diff --git a/drivers/thermal/intel_thermal/int3400_thermal.c b/drivers/thermal/intel_thermal/int3400_thermal.c
index 330da88..2cb47cd 100644
--- a/drivers/thermal/intel_thermal/int3400_thermal.c
+++ b/drivers/thermal/intel_thermal/int3400_thermal.c
@@ -13,6 +13,7 @@
 #include <linux/module.h>
 #include <linux/platform_device.h>
 #include <linux/acpi.h>
+#include <linux/thermal.h>
 
 struct art {
 	acpi_handle source;
@@ -60,6 +61,7 @@ static u8* int3400_thermal_uuids[INT3400_THERMAL_MAXIMUM_UUID] = {
 
 struct int3400_thermal_priv {
 	struct acpi_device *adev;
+	struct thermal_zone_device *thermal;
 	int art_count;
 	struct art *arts;
 	int trt_count;
@@ -242,6 +244,22 @@ end:
 	return result;
 }
 
+static int int3400_thermal_get_temp(struct thermal_zone_device *thermal,
+			unsigned long *temp)
+{
+	*temp = 20 * 1000; /* faked temp sensor with 20C */
+	return 0;
+}
+
+static struct thermal_zone_device_ops int3400_thermal_ops = {
+        .get_temp = int3400_thermal_get_temp,
+};
+
+struct thermal_zone_params int3400_thermal_params = {
+	.governor_name = "user_space",
+	.no_hwmon = true,
+};
+
 static int int3400_thermal_probe(struct platform_device *pdev)
 {
 	struct acpi_device *adev = ACPI_COMPANION(&pdev->dev);
@@ -271,7 +289,17 @@ static int int3400_thermal_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, priv);
 
+	priv->thermal = thermal_zone_device_register("INT3400 Thermal", 0, 0,
+						NULL, &int3400_thermal_ops,
+						&int3400_thermal_params, 0, 0);
+	if (IS_ERR(priv->thermal)) {
+		result = PTR_ERR(priv->thermal);
+		goto free_trt;
+	}
+
 	return 0;
+free_trt:
+	kfree(priv->trts);
 free_art:
 	kfree(priv->arts);
 free_priv:
@@ -283,6 +311,7 @@ static int int3400_thermal_remove(struct platform_device *pdev)
 {
 	struct int3400_thermal_priv *priv = platform_get_drvdata(pdev);
 
+	thermal_zone_device_unregister(priv->thermal);
 	kfree(priv->trts);
 	kfree(priv->arts);
 	kfree(priv);
-- 
1.7.9.5

