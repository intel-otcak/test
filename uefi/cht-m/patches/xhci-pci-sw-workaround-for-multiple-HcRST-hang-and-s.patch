From 114c20ec308114514225de9cca8df57d28c7876a Mon Sep 17 00:00:00 2001
From: "Wu, Hao" <hao.wu@intel.com>
Date: Tue, 3 Feb 2015 12:42:34 +0800
Subject: [PATCH] xhci-pci: sw workaround for multiple HcRST hang and spurious
 PME issue

This patch is a sw workaround for hardware multiple HcRST hang and
spurious PME issue. It requires driver to set / clear the SSIC
PORT UNUSED bit on D3 entry/exit, and the register is implemented
in intel xhci extended capability for ssic.

Change-Id: Ic34d1f8ce4db09f6dc49349984a2c7c7ae113ee5
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-20585
Signed-off-by: Wu, Hao <hao.wu@intel.com>
---
 drivers/usb/host/xhci-intel-cap.c | 36 ++++++++++++++++++++++++++++++++++++
 drivers/usb/host/xhci-intel-cap.h |  6 ++++++
 drivers/usb/host/xhci-pci.c       | 15 +++++++++++++--
 3 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/host/xhci-intel-cap.c b/drivers/usb/host/xhci-intel-cap.c
index ab25c3b..679e4d0 100644
--- a/drivers/usb/host/xhci-intel-cap.c
+++ b/drivers/usb/host/xhci-intel-cap.c
@@ -148,3 +148,39 @@ void xhci_intel_clr_internal_pme_flag(struct xhci_hcd *xhci)
 	writel(data, xhci->phy_mux_regs + PMCTRL);
 }
 EXPORT_SYMBOL_GPL(xhci_intel_clr_internal_pme_flag);
+
+/* This function is only used as one workaround for Cherrytrail XHCI spurious
+   pme and HCRST hangs issue */
+void xhci_intel_ssic_port_unused(struct xhci_hcd *xhci, bool unused)
+{
+	int ext_offset;
+	void __iomem *ssic_port_cfg;
+	u32 data;
+
+	xhci_dbg(xhci, "ssic port - %s\n", unused ? "unused" : "used");
+
+	ext_offset = XHCI_HCC_EXT_CAPS(readl(&xhci->cap_regs->hcc_params));
+	ext_offset = xhci_find_ext_cap_by_id(&xhci->cap_regs->hc_capbase,
+			ext_offset << 2, XHCI_EXT_CAPS_INTEL_SSIC);
+	if (!ext_offset)
+		return;
+
+	ssic_port_cfg = &xhci->cap_regs->hc_capbase +
+			((ext_offset + SSIC_PORT1_CFG2) >> 2);
+
+	data = readl(ssic_port_cfg);
+	data &= ~PROG_DONE;
+	writel(data, ssic_port_cfg);
+
+	data = readl(ssic_port_cfg);
+	if (unused)
+		data |= SSIC_PORT_UNUSED;
+	else
+		data &= ~SSIC_PORT_UNUSED;
+	writel(data, ssic_port_cfg);
+
+	data = readl(ssic_port_cfg);
+	data |= PROG_DONE;
+	writel(data, ssic_port_cfg);
+}
+EXPORT_SYMBOL_GPL(xhci_intel_ssic_port_unused);
diff --git a/drivers/usb/host/xhci-intel-cap.h b/drivers/usb/host/xhci-intel-cap.h
index 064f539..d3f2757 100644
--- a/drivers/usb/host/xhci-intel-cap.h
+++ b/drivers/usb/host/xhci-intel-cap.h
@@ -16,6 +16,7 @@
 
 /* Extended capability IDs for Intel Vendor Defined */
 #define XHCI_EXT_CAPS_INTEL_HOST_CAP	192
+#define XHCI_EXT_CAPS_INTEL_SSIC	196
 
 /* register definition */
 #define PMCTRL			0x34
@@ -29,9 +30,14 @@
 #define DUAL_ROLE_CFG1		0x6c
 #define SW_MODE			(1 << 29)
 
+#define SSIC_PORT1_CFG2		0x3c
+#define PROG_DONE		(1 << 30)
+#define SSIC_PORT_UNUSED	(1 << 31)
+
 #define DUAL_ROLE_CFG1_POLL_TIMEOUT	1000
 
 extern int xhci_intel_vendor_cap_init(struct xhci_hcd *xhci);
 extern int xhci_intel_phy_vbus_valid(struct xhci_hcd *xhci, int vbus_valid);
 extern int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on);
 extern void xhci_intel_clr_internal_pme_flag(struct xhci_hcd *xhci);
+extern void xhci_intel_ssic_port_unused(struct xhci_hcd *xhci, bool unused);
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index 64f98ae..42d5129 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -287,6 +287,7 @@ static int xhci_pci_suspend(struct usb_hcd *hcd, bool do_wakeup)
 {
 	struct xhci_hcd	*xhci = hcd_to_xhci(hcd);
 	struct pci_dev		*pdev = to_pci_dev(hcd->self.controller);
+	int			retval = 0;
 
 	/*
 	 * Systems with the TI redriver that loses port status change events
@@ -295,7 +296,15 @@ static int xhci_pci_suspend(struct usb_hcd *hcd, bool do_wakeup)
 	if (xhci_compliance_mode_recovery_timer_quirk_check())
 		pdev->no_d3cold = true;
 
-	return xhci_suspend(xhci, do_wakeup);
+	retval = xhci_suspend(xhci, do_wakeup);
+
+	/* This is SW workaround for spurious PME issue and HCRST hang problem
+	 * It required to set anc clear SSIC_PORT_UNUSED bit in D3 entry and
+	 * D3 exit. */
+	if (xhci->quirks & XHCI_SPURIOUS_PME)
+		xhci_intel_ssic_port_unused(xhci, 1);
+
+	return retval;
 }
 
 static int xhci_pci_resume(struct usb_hcd *hcd, bool hibernated)
@@ -307,8 +316,10 @@ static int xhci_pci_resume(struct usb_hcd *hcd, bool hibernated)
 	/* Due to one HW bug, XHCI will keep generating PME wakeups and fail
 	 * to stay in runtime suspended state, so required to clear the internal
 	 * PME flag once it is back to D0 as the software workaround */
-	if (xhci->quirks & XHCI_SPURIOUS_PME)
+	if (xhci->quirks & XHCI_SPURIOUS_PME) {
 		xhci_intel_clr_internal_pme_flag(xhci);
+		xhci_intel_ssic_port_unused(xhci, 0);
+	}
 
 	/* The BIOS on systems with the Intel Panther Point chipset may or may
 	 * not support xHCI natively.  That means that during system resume, it
-- 
1.9.1

