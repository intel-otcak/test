From a9da4ad50a97819e62ccf09f5896f54b0c720a72 Mon Sep 17 00:00:00 2001
From: Lu Baolu <baolu.lu@linux.intel.com>
Date: Mon, 29 Dec 2014 15:20:27 +0800
Subject: [PATCH 1/1] Changes in GMIN inv-mpu6050 driver for Malata A+G sensor.

1. driver ACPI match table
2. MPU 6050 device ID
3. Use GPIO as the interupt source

Change-Id: Ifd20b6a1e7176895ed00a70a93ed10f7948c7c3c
---
 drivers/iio/imu/inv_mpu6050/inv_mpu_core.c    |  4 +++-
 drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h     |  2 ++
 drivers/iio/imu/inv_mpu6050/inv_mpu_trigger.c | 12 ++++++++++++
 3 files changed, 17 insertions(+), 1 deletion(-)

diff --git a/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c b/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c
index d1702b7..37d57ac 100644
--- a/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c
+++ b/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c
@@ -657,7 +657,8 @@ static int inv_check_and_setup_chip(struct inv_mpu6050_state *st,
 		dev_err(&st->client->dev, "Error reading WhoAmI\n");
 		return result;
 	}
-	if (result != INV_MPU6500_UNIQUE_ID) {
+	if ((result != INV_MPU6500_UNIQUE_ID) &&
+			(result != INV_MPU6050_UNIQUE_ID)) {
 		dev_err(&st->client->dev, "Not a valid MPU6500 device %x\n",
 								result);
 		return -ENOSYS;
@@ -824,6 +825,7 @@ MODULE_DEVICE_TABLE(i2c, inv_mpu_id);
 
 static const struct acpi_device_id inv_acpi_match[] = {
 	{"INVN6500", 0},
+	{"INVN6050", 0},
 	{ },
 };
 MODULE_DEVICE_TABLE(acpi, inv_acpi_match);
diff --git a/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h b/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h
index 87649bd..803ee53 100644
--- a/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h
+++ b/drivers/iio/imu/inv_mpu6050/inv_mpu_iio.h
@@ -122,6 +122,7 @@ struct inv_mpu6050_state {
 	struct i2c_client *client;
 	struct inv_mpu6050_platform_data plat_data;
 	DECLARE_KFIFO(timestamps, long long, TIMESTAMP_FIFO_SIZE);
+	struct gpio_desc *gpiod;
 };
 
 /*register and associated bit definition*/
@@ -192,6 +193,7 @@ struct inv_mpu6050_state {
 
 #define INV_MPU6050_REG_WHOAMI			0x75
 #define INV_MPU6500_UNIQUE_ID			0x70
+#define INV_MPU6050_UNIQUE_ID			0x68
 
 /* scan element definition */
 enum inv_mpu6050_scan {
diff --git a/drivers/iio/imu/inv_mpu6050/inv_mpu_trigger.c b/drivers/iio/imu/inv_mpu6050/inv_mpu_trigger.c
index 61837cd..cef8eb2 100644
--- a/drivers/iio/imu/inv_mpu6050/inv_mpu_trigger.c
+++ b/drivers/iio/imu/inv_mpu6050/inv_mpu_trigger.c
@@ -11,6 +11,8 @@
 * GNU General Public License for more details.
 */
 
+#include <linux/gpio/consumer.h>
+#include <linux/gpio.h>
 #include "inv_mpu_iio.h"
 
 static void inv_scan_query(struct iio_dev *indio_dev)
@@ -115,6 +117,8 @@ int inv_mpu6050_probe_trigger(struct iio_dev *indio_dev)
 {
 	int ret;
 	struct inv_mpu6050_state *st = iio_priv(indio_dev);
+	struct gpio_desc *gpiod;
+	struct device *dev = &st->client->dev;
 
 	st->trig = iio_trigger_alloc("%s-dev%d",
 					indio_dev->name,
@@ -124,6 +128,14 @@ int inv_mpu6050_probe_trigger(struct iio_dev *indio_dev)
 		goto error_ret;
 	}
 
+	/* Get interrupt GPIO pin number */
+	gpiod = devm_gpiod_get_index(dev, "inv_mup6050_gpio_int", 0);
+	if (!IS_ERR(gpiod)) {
+		gpiod_direction_input(gpiod);
+		st->client->irq = gpiod_to_irq(gpiod);
+		st->gpiod = gpiod;
+	}
+
 	ret = request_threaded_irq(st->client->irq, inv_mpu6050_irq_handler,
 				inv_mpu6050_read_fifo,
 				IRQF_TRIGGER_RISING | IRQF_ONESHOT,
-- 
1.9.1

