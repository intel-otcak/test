From 4eae8fdda11593c6e8f53c8450178c35754a8118 Mon Sep 17 00:00:00 2001
Message-Id: <4eae8fdda11593c6e8f53c8450178c35754a8118.1431284209.git.chang-joon.lee@intel.com>
In-Reply-To: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
References: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
From: Ramalingam C <ramalingam.c@intel.com>
Date: Mon, 13 Apr 2015 10:27:21 +0530
Subject: [PATCH 52/68] FOR_UPSTREAM [VPG]: drm/i915: Removing the eDP
 specific DRRS

eDP specific DRRS implementation is removed, to implement
a generic DRRS stack. This generic stack can accomodate implementation
for all other encoders that supports DRRS.

Issue: GMINL-8115
Change-Id: Ia4f00a7c246a65e10ffef03a4d891fed1470ef27
Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
Signed-off-by: CJ Lee <chang-joon.lee@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |   11 ---
 drivers/gpu/drm/i915/intel_display.c |   17 ----
 drivers/gpu/drm/i915/intel_dp.c      |  177 +---------------------------------
 drivers/gpu/drm/i915/intel_drv.h     |   22 +----
 drivers/gpu/drm/i915/intel_pm.c      |  148 ----------------------------
 drivers/gpu/drm/i915/intel_sprite.c  |    7 --
 6 files changed, 2 insertions(+), 380 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 3059d4e..735a390 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -732,16 +732,6 @@ struct i915_fbc {
 	bool disable;
 };
 
-struct i915_drrs {
-	struct intel_connector *connector;
-	bool is_clone;
-	struct intel_drrs_work {
-		struct delayed_work work;
-		struct drm_crtc *crtc;
-		int interval;
-	} *drrs_work;
-};
-
 struct i915_psr {
 	bool sink_support;
 	bool source_ok;
@@ -1662,7 +1652,6 @@ struct drm_i915_private {
 	u32 hotplug_status;
 
 	struct i915_fbc fbc;
-	struct i915_drrs drrs;
 	struct intel_opregion opregion;
 	struct intel_vbt_data vbt;
 	bool scaling_reqd;
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index dee3e8f..e27703b 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -3370,7 +3370,6 @@ intel_pipe_set_base(struct drm_crtc *crtc, int x, int y,
 	else
 		intel_edp_psr_update(dev, false);
 	intel_update_fbc(dev);
-	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 
 	return 0;
@@ -4588,7 +4587,6 @@ static void intel_crtc_enable_planes(struct drm_crtc *crtc)
 		intel_vlv_edp_psr_update(dev);
 	else
 		intel_edp_psr_update(dev, false);
-	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 }
 
@@ -4897,7 +4895,6 @@ static void ironlake_crtc_disable(struct drm_crtc *crtc)
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
 	intel_edp_psr_update(dev, false);
-	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 }
 
@@ -4953,7 +4950,6 @@ static void haswell_crtc_disable(struct drm_crtc *crtc)
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
 	intel_edp_psr_update(dev, false);
-	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 }
 
@@ -5408,8 +5404,6 @@ static void valleyview_crtc_enable(struct drm_crtc *crtc)
 		if (encoder->type == INTEL_OUTPUT_DSI)
 			encoder->enable(encoder);
 
-	intel_update_drrs(dev);
-
 	drm_crtc_vblank_on(crtc);
 
 	/* Update DPST context after mode change */
@@ -5514,7 +5508,6 @@ static void i9xx_crtc_enable(struct drm_crtc *crtc)
 
 	intel_crtc_load_lut(crtc);
 
-	intel_update_drrs(dev);
 	intel_update_watermarks(crtc);
 	intel_enable_pipe(intel_crtc);
 
@@ -5682,7 +5675,6 @@ static void i9xx_crtc_disable(struct drm_crtc *crtc)
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
 	intel_edp_psr_update(dev, false);
-	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 
 	all_pipe_disabled = true;
@@ -5759,7 +5751,6 @@ static void intel_crtc_update_sarea(struct drm_crtc *crtc,
 		DRM_ERROR("Can't update pipe %c in SAREA\n", pipe_name(pipe));
 		break;
 	}
-	intel_update_drrs(dev);
 }
 
 /* Master function to enable/disable CRTC and corresponding power wells */
@@ -9916,10 +9907,6 @@ void intel_unpin_work_fn(struct work_struct *__work)
 	if (IS_VALLEYVIEW(dev))
 		intel_vlv_edp_psr_update(dev);
 
-	/* disable current DRRS work scheduled and restart
-	 * to push work by another x seconds
-	 */
-	intel_update_drrs(dev);
 	intel_update_fbc(dev);
 	mutex_unlock(&dev->struct_mutex);
 
@@ -10630,7 +10617,6 @@ static int intel_crtc_page_flip(struct drm_crtc *crtc,
 		goto cleanup_unpin;
 
 	intel_disable_fbc(dev);
-	intel_disable_drrs(dev);
 	intel_mark_fb_busy(obj, NULL);
 	mutex_unlock(&dev->struct_mutex);
 
@@ -13750,7 +13736,6 @@ void intel_modeset_init(struct drm_device *dev)
 
 	/* Just in case the BIOS is doing something questionable. */
 	intel_disable_fbc(dev);
-	intel_disable_drrs(dev);
 
 	drm_modeset_lock_all(dev);
 	intel_modeset_setup_hw_state(dev, false);
@@ -14263,8 +14248,6 @@ void intel_modeset_cleanup(struct drm_device *dev)
 
 	intel_disable_fbc(dev);
 
-	intel_disable_drrs(dev);
-
 	intel_disable_gt_powersave(dev);
 
 	ironlake_teardown_rc6(dev);
diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index 9f41c1a..a5a5559 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -913,7 +913,7 @@ intel_dp_set_clock(struct intel_encoder *encoder,
 	}
 }
 
-static void
+void
 intel_dp_set_m2_n2(struct intel_crtc *crtc, struct intel_link_m_n *m_n)
 {
 	struct drm_device *dev = crtc->base.dev;
@@ -1052,14 +1052,6 @@ found:
 			       pipe_config->port_clock,
 			       &pipe_config->dp_m_n);
 
-	if (intel_connector->panel.downclock_mode != NULL &&
-		intel_dp->drrs_state.type == SEAMLESS_DRRS_SUPPORT) {
-			intel_link_compute_m_n(bpp, lane_count,
-				intel_connector->panel.downclock_mode->clock,
-				pipe_config->port_clock,
-				&pipe_config->dp_m2_n2);
-	}
-
 	intel_dp_set_clock(encoder, pipe_config, intel_dp->link_bw);
 
 	return true;
@@ -4803,37 +4795,17 @@ intel_dp_connector_destroy(struct drm_connector *connector)
 	kfree(connector);
 }
 
-static void
-intel_dp_drrs_fini(struct drm_i915_private *dev_priv,
-			struct intel_dp *intel_dp)
-{
-	if (intel_dp->drrs_state.type == SEAMLESS_DRRS_SUPPORT) {
-		if (cancel_delayed_work_sync
-			(&dev_priv->drrs.drrs_work->work)) {
-			kfree(dev_priv->drrs.drrs_work);
-			dev_priv->drrs.drrs_work = NULL;
-			dev_priv->drrs.connector = NULL;
-		}
-	}
-}
-
 void intel_dp_encoder_destroy(struct drm_encoder *encoder)
 {
 	struct intel_digital_port *intel_dig_port = enc_to_dig_port(encoder);
 	struct intel_dp *intel_dp = &intel_dig_port->dp;
 	struct drm_device *dev = intel_dp_to_dev(intel_dp);
-	struct drm_i915_private *dev_priv = dev->dev_private;
 
 	drm_dp_aux_unregister(&intel_dp->aux);
 	drm_encoder_cleanup(encoder);
 	if (is_edp(intel_dp)) {
 		cancel_delayed_work_sync(&intel_dp->panel_vdd_work);
 
-		if (dev_priv->drrs.connector &&
-			intel_dp == enc_to_intel_dp(
-				&dev_priv->drrs.connector->encoder->base))
-			intel_dp_drrs_fini(dev_priv, intel_dp);
-
 		drm_modeset_lock(&dev->mode_config.connection_mutex, NULL);
 		edp_panel_vdd_off_sync(intel_dp);
 		drm_modeset_unlock(&dev->mode_config.connection_mutex);
@@ -5117,148 +5089,6 @@ intel_dp_init_panel_power_sequencer_registers(struct drm_device *dev,
 		      I915_READ(pp_div_reg));
 }
 
-void intel_dp_set_drrs_state(struct drm_device *dev, int refresh_rate)
-{
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct intel_encoder *encoder;
-	struct intel_dp *intel_dp = NULL;
-	struct intel_crtc_config *config = NULL;
-	struct intel_crtc *intel_crtc = NULL;
-	struct intel_connector *intel_connector = dev_priv->drrs.connector;
-	u32 reg, val;
-	enum edp_drrs_refresh_rate_type index = DRRS_HIGH_RR;
-
-	if (refresh_rate <= 0) {
-		DRM_DEBUG_KMS("Refresh rate should be positive non-zero.\n");
-		return;
-	}
-
-	if (intel_connector == NULL) {
-		DRM_DEBUG_KMS("DRRS supported for eDP only.\n");
-		return;
-	}
-
-	if (IS_CHERRYVIEW(dev) && i915.enable_psr) {
-		DRM_DEBUG_KMS("DRRS is disabled as PSR is enabled\n");
-		return;
-	}
-
-	if ((IS_CHERRYVIEW(dev) || INTEL_INFO(dev)->gen < 8)
-		&& intel_edp_is_psr_enabled(dev)) {
-		DRM_DEBUG_KMS("DRRS is disabled as PSR is enabled\n");
-		return;
-	}
-
-	encoder = intel_attached_encoder(&intel_connector->base);
-	intel_dp = enc_to_intel_dp(&encoder->base);
-	intel_crtc = encoder->new_crtc;
-
-	if (!intel_crtc) {
-		DRM_DEBUG_KMS("DRRS: intel_crtc not initialized\n");
-		return;
-	}
-
-	config = &intel_crtc->config;
-
-	if (intel_dp->drrs_state.type < SEAMLESS_DRRS_SUPPORT) {
-		DRM_DEBUG_KMS("Only Seamless DRRS supported.\n");
-		return;
-	}
-
-	if (intel_connector->panel.downclock_mode->vrefresh == refresh_rate)
-		index = DRRS_LOW_RR;
-
-	if (index == intel_dp->drrs_state.refresh_rate_type) {
-		DRM_DEBUG_KMS(
-			"DRRS requested for previously set RR...ignoring\n");
-		return;
-	}
-
-	if (!intel_crtc->active) {
-		DRM_DEBUG_KMS("eDP encoder disabled. CRTC not Active\n");
-		return;
-	}
-
-	if (IS_CHERRYVIEW(dev) ||
-		(INTEL_INFO(dev)->gen > 6 && INTEL_INFO(dev)->gen < 8)) {
-		reg = PIPECONF(intel_crtc->config.cpu_transcoder);
-		val = I915_READ(reg);
-		if (index > DRRS_HIGH_RR) {
-			if (IS_VALLEYVIEW(dev))
-				val |= PIPECONF_EDP_RR_MODE_SWITCH_VLV;
-			else
-				val |= PIPECONF_EDP_RR_MODE_SWITCH;
-			intel_dp_set_m2_n2(intel_crtc, &config->dp_m2_n2);
-		} else {
-			if (IS_VALLEYVIEW(dev))
-				val &= ~PIPECONF_EDP_RR_MODE_SWITCH_VLV;
-			else
-				val &= ~PIPECONF_EDP_RR_MODE_SWITCH;
-		}
-		I915_WRITE(reg, val);
-	}
-
-	/*
-	 * mutex taken to ensure that there is no race between differnt
-	 * drrs calls trying to update refresh rate. This scenario may occur
-	 * in future when idleness detection based DRRS in kernel and
-	 * possible calls from user space to set differnt RR are made.
-	 */
-
-	mutex_lock(&intel_dp->drrs_state.mutex);
-
-	intel_dp->drrs_state.refresh_rate_type = index;
-
-	mutex_unlock(&intel_dp->drrs_state.mutex);
-
-	DRM_DEBUG_KMS("eDP Refresh Rate set to : %dHz\n", refresh_rate);
-}
-
-static struct drm_display_mode *
-intel_dp_drrs_init(struct intel_digital_port *intel_dig_port,
-			struct intel_connector *intel_connector,
-			struct drm_display_mode *fixed_mode)
-{
-	struct drm_connector *connector = &intel_connector->base;
-	struct intel_dp *intel_dp = &intel_dig_port->dp;
-	struct drm_device *dev = intel_dig_port->base.base.dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct drm_display_mode *downclock_mode = NULL;
-
-	if (INTEL_INFO(dev)->gen <= 6) {
-		DRM_DEBUG_KMS("DRRS supported for Gen7 and above\n");
-		return NULL;
-	}
-
-	if (dev_priv->vbt.drrs_type != SEAMLESS_DRRS_SUPPORT) {
-		DRM_INFO("VBT doesn't support DRRS\n");
-		return NULL;
-	}
-
-	if (IS_CHERRYVIEW(dev) && i915.enable_psr) {
-		DRM_DEBUG_KMS("DRRS disabled since PSR is enabled\n");
-		return NULL;
-	}
-
-	downclock_mode = intel_find_panel_downclock
-					(dev, fixed_mode, connector);
-
-	if (!downclock_mode) {
-		DRM_INFO("DRRS not supported\n");
-		return NULL;
-	}
-
-	intel_init_drrs_idleness_detection(dev, intel_connector);
-
-	mutex_init(&intel_dp->drrs_state.mutex);
-
-	intel_dp->drrs_state.type = dev_priv->vbt.drrs_type;
-
-	intel_dp->drrs_state.refresh_rate_type = DRRS_HIGH_RR;
-	DRM_INFO("seamless DRRS supported for eDP panel.\n");
-	return downclock_mode;
-}
-
 static bool intel_edp_init_connector(struct intel_dp *intel_dp,
 				     struct intel_connector *intel_connector,
 				     struct edp_power_seq *power_seq)
@@ -5274,8 +5104,6 @@ static bool intel_edp_init_connector(struct intel_dp *intel_dp,
 	struct drm_display_mode *scan;
 	struct edid *edid;
 
-	intel_dp->drrs_state.type = DRRS_NOT_SUPPORTED;
-
 	if (!is_edp(intel_dp))
 		return true;
 
@@ -5329,9 +5157,6 @@ static bool intel_edp_init_connector(struct intel_dp *intel_dp,
 	list_for_each_entry(scan, &connector->probed_modes, head) {
 		if ((scan->type & DRM_MODE_TYPE_PREFERRED)) {
 			fixed_mode = drm_mode_duplicate(dev, scan);
-			downclock_mode = intel_dp_drrs_init(
-						intel_dig_port,
-						intel_connector, fixed_mode);
 			break;
 		}
 	}
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 67a7349..1ce1e7a 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -662,17 +662,6 @@ struct intel_hdmi {
 
 #define DP_MAX_DOWNSTREAM_PORTS		0x10
 
-/**
- * HIGH_RR is the highest eDP panel refresh rate read from EDID
- * LOW_RR is the lowest eDP panel refresh rate found from EDID
- * parsing for same resolution.
- */
-enum edp_drrs_refresh_rate_type {
-	DRRS_HIGH_RR,
-	DRRS_LOW_RR,
-	DRRS_MAX_RR, /* RR count */
-};
-
 struct intel_dp {
 	uint32_t output_reg;
 	uint32_t aux_ch_ctl_reg;
@@ -719,11 +708,6 @@ struct intel_dp {
 				     bool has_aux_irq,
 				     int send_bytes,
 				     uint32_t aux_clock_divider);
-	struct {
-		enum drrs_support_type type;
-		enum edp_drrs_refresh_rate_type refresh_rate_type;
-		struct mutex mutex;
-	} drrs_state;
 
 };
 
@@ -998,6 +982,7 @@ void intel_dp_complete_link_train(struct intel_dp *intel_dp);
 void intel_dp_stop_link_train(struct intel_dp *intel_dp);
 bool intel_dp_fast_link_train(struct intel_dp *intel_dp);
 void intel_dp_sink_dpms(struct intel_dp *intel_dp, int mode);
+void intel_dp_set_m2_n2(struct intel_crtc *crtc, struct intel_link_m_n *m_n);
 void intel_dp_encoder_destroy(struct drm_encoder *encoder);
 void intel_dp_check_link_status(struct intel_dp *intel_dp);
 int intel_dp_sink_crc(struct intel_dp *intel_dp, u8 *crc);
@@ -1016,7 +1001,6 @@ void intel_vlv_edp_psr_update(struct drm_device *dev);
 void intel_vlv_edp_psr_disable(struct drm_device *dev);
 void intel_vlv_edp_psr_exit(struct drm_device *dev, bool disable);
 void intel_vlv_psr_irq_handler(struct drm_device *dev, enum pipe pipe);
-void intel_dp_set_drrs_state(struct drm_device *dev, int refresh_rate);
 enum pipe vlv_power_sequencer_pipe(struct intel_dp *intel_dp);
 
 /* intel_dsi.c */
@@ -1175,10 +1159,6 @@ void intel_fini_runtime_pm(struct drm_i915_private *dev_priv);
 void ilk_wm_get_hw_state(struct drm_device *dev);
 void __vlv_set_power_well(struct drm_i915_private *dev_priv,
 			  enum punit_power_well power_well_id, bool enable);
-void intel_init_drrs_idleness_detection(struct drm_device *dev,
-		struct intel_connector *connector);
-void intel_update_drrs(struct drm_device *dev);
-void intel_disable_drrs(struct drm_device *dev);
 extern void vlv_modify_rc6_promotion_timer(struct drm_i915_private *dev_priv,
 					    bool media_active);
 bool i915_is_device_suspended(struct drm_device *drm_dev);
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index af252f5..c7eed06 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -651,154 +651,6 @@ out_disable:
 	i915_gem_stolen_cleanup_compression(dev);
 }
 
-static void intel_drrs_work_fn(struct work_struct *__work)
-{
-	struct intel_drrs_work *work =
-		container_of(to_delayed_work(__work),
-			     struct intel_drrs_work, work);
-	struct drm_device *dev = work->crtc->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	/* Double check if the dual-display mode is active. */
-	if (dev_priv->drrs.is_clone)
-		return;
-
-	intel_dp_set_drrs_state(work->crtc->dev,
-		dev_priv->drrs.connector->panel.downclock_mode->vrefresh);
-}
-
-static void intel_cancel_drrs_work(struct drm_i915_private *dev_priv)
-{
-	if (dev_priv->drrs.drrs_work == NULL)
-		return;
-
-	cancel_delayed_work_sync(&dev_priv->drrs.drrs_work->work);
-}
-
-static void intel_enable_drrs(struct drm_crtc *crtc)
-{
-	struct drm_device *dev = crtc->dev;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct intel_dp *intel_dp = NULL;
-
-	intel_dp = enc_to_intel_dp(&dev_priv->drrs.connector->encoder->base);
-
-	if (intel_dp == NULL)
-		return;
-
-	intel_cancel_drrs_work(dev_priv);
-
-	if (intel_dp->drrs_state.refresh_rate_type != DRRS_LOW_RR) {
-		dev_priv->drrs.drrs_work->crtc = crtc;
-
-		/* Delay the actual enabling to let pageflipping cease and the
-		 * display to settle before starting DRRS
-		 */
-		schedule_delayed_work(&dev_priv->drrs.drrs_work->work,
-			msecs_to_jiffies(dev_priv->drrs.drrs_work->interval));
-	}
-}
-
-void intel_disable_drrs(struct drm_device *dev)
-{
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct intel_dp *intel_dp = NULL;
-	struct drm_crtc *crtc;
-
-	if (dev_priv->drrs.connector == NULL)
-		return;
-
-	intel_dp = enc_to_intel_dp(&dev_priv->drrs.connector->encoder->base);
-
-	if (intel_dp == NULL)
-		return;
-
-	/* as part of disable DRRS, reset refresh rate to HIGH_RR */
-	if (intel_dp->drrs_state.refresh_rate_type == DRRS_LOW_RR) {
-		intel_cancel_drrs_work(dev_priv);
-		intel_dp_set_drrs_state(dev,
-			dev_priv->drrs.connector->panel.fixed_mode->vrefresh);
-	}
-
-	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
-		if (crtc) {
-			if (intel_pipe_has_type(crtc, INTEL_OUTPUT_EDP)) {
-				if (!dev_priv->atomic_update)
-					intel_update_watermarks(crtc);
-			}
-		}
-	}
-}
-
-/**
- * intel_update_drrs - enable/disable DRRS as needed
- * @dev: the drm_device
-*/
-void intel_update_drrs(struct drm_device *dev)
-{
-	struct drm_crtc *crtc = NULL, *tmp_crtc;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	/* if drrs.connector is NULL, then drrs_init did not get called.
-	 * which means DRRS is not supported.
-	 */
-	if (dev_priv->drrs.connector == NULL)
-		return;
-
-	if (dev_priv->drrs.connector->panel.downclock_mode == NULL)
-		return;
-
-	list_for_each_entry(tmp_crtc, &dev->mode_config.crtc_list, head) {
-		if (intel_crtc_active(tmp_crtc)) {
-			if (crtc) {
-				DRM_DEBUG_KMS(
-				"more than one pipe active, disabling DRRS\n");
-				dev_priv->drrs.is_clone = true;
-				intel_disable_drrs(dev);
-				return;
-			}
-			crtc = tmp_crtc;
-		}
-	}
-
-	if (crtc == NULL) {
-		DRM_DEBUG_KMS("DRRS: crtc not initialized\n");
-		return;
-	}
-
-	dev_priv->drrs.is_clone = false;
-	intel_disable_drrs(dev);
-
-	/* re-enable idleness detection */
-	intel_enable_drrs(crtc);
-}
-
-void intel_init_drrs_idleness_detection(struct drm_device *dev,
-					struct intel_connector *connector)
-{
-	struct intel_drrs_work *work;
-	struct drm_i915_private *dev_priv = dev->dev_private;
-
-	if (i915.drrs_interval == 0) {
-		DRM_INFO("DRRS disable by flag\n");
-		return;
-	}
-
-	work = kzalloc(sizeof(struct intel_drrs_work), GFP_KERNEL);
-	if (!work) {
-		DRM_ERROR("Failed to allocate DRRS work structure\n");
-		return;
-	}
-
-	dev_priv->drrs.connector = connector;
-	dev_priv->drrs.is_clone = false;
-
-	work->interval = i915.drrs_interval;
-	INIT_DELAYED_WORK(&work->work, intel_drrs_work_fn);
-
-	dev_priv->drrs.drrs_work = work;
-}
-
 /* Check for current runtime state */
 bool i915_is_device_active(struct drm_device *drm_dev)
 {
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 3dfb3af..11ff811 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -512,12 +512,6 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 
 	sprctl |= SP_ENABLE;
 
-	/*
-	 * disable current DRRS work scheduled and restart
-	 * to push work by another x seconds
-	 */
-	intel_update_drrs(dev);
-
 	if (!dev_priv->atomic_update) {
 		intel_update_sprite_watermarks(dplane, crtc, src_w, pixel_size,
 				true, src_w != crtc_w || src_h != crtc_h);
@@ -1296,7 +1290,6 @@ intel_post_enable_primary(struct drm_crtc *crtc)
 
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
-	intel_update_drrs(dev);
 	mutex_unlock(&dev->struct_mutex);
 }
 
-- 
1.7.9.5

