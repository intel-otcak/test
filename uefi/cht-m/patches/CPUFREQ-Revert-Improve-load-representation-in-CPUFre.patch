From 8bf97058f1189c038dc1ca0ce6b34f4a5ec58a1f Mon Sep 17 00:00:00 2001
From: Ananth Krishna <ananth.krishna.r@intel.com>
Date: Wed, 25 Feb 2015 16:55:21 +0530
Subject: [PATCH] [CPUFREQ] Revert "Improve load representation in CPUFreq
 governor"

This reverts commit c718dac7f6f88a346552d196b4c803939888c6bd.

Change-Id: Ibeafc5c0e11309c2fd22d422d15e0a64ce2a1cfa
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-6479
Signed-off-by: Ananth Krishna R <ananth.krishna.r@intel.com>
---
 Documentation/cpu-freq/governors.txt  |    9 -
 drivers/cpufreq/cpufreq_interactive.c |  197 +---------------------------------
 2 files changed, 9 insertions(+), 197 deletions(-)

--- linux.orig/Documentation/cpu-freq/governors.txt
+++ linux/Documentation/cpu-freq/governors.txt
@@ -302,15 +302,6 @@ boostpulse_duration: Length of time to h
 on a write to boostpulse, before allowing speed to drop according to
 load as usual.  Default is 80000 uS.
 
-irq_load_threshold: when time spent to deal irq handling,including
-both hard and soft irq, reach this ratio, io_is_busy logic was switched on
-whether or not that parameter is set to 1. this option was add to
-better performe workload which is both cpu and io intensive. set 100 to
-parameter this will disable this feature.
-
-iowait_load_threshold: works with parameter:irq_load_threshold,
-when cpu spent time on iowait reaching this threshold and irq_load_threshold
-was meet, cpu will scaling to max avaiable freqnecy.
 
 3. The Governor Interface in the CPUfreq Core
 =============================================
--- linux.orig/drivers/cpufreq/cpufreq_interactive.c
+++ linux/drivers/cpufreq/cpufreq_interactive.c
@@ -37,17 +37,11 @@
 struct cpufreq_interactive_cpuinfo {
 	struct timer_list cpu_timer;
 	struct timer_list cpu_slack_timer;
-	spinlock_t load_lock; /* protects the next 8 fields */
+	spinlock_t load_lock; /* protects the next 4 fields */
 	u64 time_in_idle;
 	u64 time_in_idle_timestamp;
 	u64 cputime_speedadj;
 	u64 cputime_speedadj_timestamp;
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	u64 cputime_irq;
-	u64 time_in_irq;
-	u64 cputime_iowait;
-	u64 time_in_iowait;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	struct cpufreq_policy *policy;
 	struct cpufreq_frequency_table *freq_table;
 	spinlock_t target_freq_lock; /*protects target freq */
@@ -126,34 +120,12 @@ struct cpufreq_interactive_tunables {
 #define DEFAULT_TIMER_SLACK (4 * DEFAULT_TIMER_RATE)
 	int timer_slack_val;
 	bool io_is_busy;
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-#define DEFAULT_IRQ_LOAD_THRESHOLD 5
-#define DEFAULT_IOWAIT_LOAD_THRESHOLD 15
-	bool io_busy;
-	unsigned int io_busy_mask;
-	unsigned int irq_load_threshold_val;
-	unsigned int iowait_load_threshold_val;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 };
 
 /* For cases where we have single governor instance for system */
 static struct cpufreq_interactive_tunables *common_tunables;
 
 static struct attribute_group *get_sysfs_attr(void);
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-DECLARE_PER_CPU(u64, cpu_hardirq_time);
-DECLARE_PER_CPU(u64, cpu_softirq_time);
-
-static inline u64 irq_time_read(int cpu)
-{
-	/* Return the irq time(us) */
-	u64 irq_time;
-	irq_time = per_cpu(cpu_softirq_time, cpu) +
-		per_cpu(cpu_hardirq_time, cpu);
-	do_div(irq_time, 1000);
-	return irq_time;
-}
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
 static void cpufreq_interactive_timer_resched(
 	struct cpufreq_interactive_cpuinfo *pcpu)
@@ -162,21 +134,12 @@ static void cpufreq_interactive_timer_re
 		pcpu->policy->governor_data;
 	unsigned long expires;
 	unsigned long flags;
-	bool io_is_busy = tunables->io_is_busy;
 
 	spin_lock_irqsave(&pcpu->load_lock, flags);
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	io_is_busy |= tunables->io_busy;
-	pcpu->time_in_iowait = get_cpu_iowait_time_us(smp_processor_id(),
-		&pcpu->time_in_idle_timestamp);
-	pcpu->cputime_iowait = 0;
-	pcpu->time_in_irq = irq_time_read(smp_processor_id());
-	pcpu->cputime_irq = 0;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	pcpu->time_in_idle =
 		get_cpu_idle_time(smp_processor_id(),
 				  &pcpu->time_in_idle_timestamp,
-				  io_is_busy);
+				  tunables->io_is_busy);
 	pcpu->cputime_speedadj = 0;
 	pcpu->cputime_speedadj_timestamp = pcpu->time_in_idle_timestamp;
 	expires = jiffies + usecs_to_jiffies(tunables->timer_rate);
@@ -202,7 +165,6 @@ static void cpufreq_interactive_timer_st
 	unsigned long expires = jiffies +
 		usecs_to_jiffies(tunables->timer_rate);
 	unsigned long flags;
-	bool io_is_busy = tunables->io_is_busy;
 
 	pcpu->cpu_timer.expires = expires;
 	add_timer_on(&pcpu->cpu_timer, cpu);
@@ -214,17 +176,9 @@ static void cpufreq_interactive_timer_st
 	}
 
 	spin_lock_irqsave(&pcpu->load_lock, flags);
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	io_is_busy |= tunables->io_busy;
-	pcpu->time_in_iowait = get_cpu_iowait_time_us(cpu
-					, &pcpu->time_in_idle_timestamp);
-	pcpu->cputime_iowait = 0;
-	pcpu->time_in_irq = irq_time_read(cpu);
-	pcpu->cputime_irq = 0;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	pcpu->time_in_idle =
 		get_cpu_idle_time(cpu, &pcpu->time_in_idle_timestamp,
-				  io_is_busy);
+				  tunables->io_is_busy);
 	pcpu->cputime_speedadj = 0;
 	pcpu->cputime_speedadj_timestamp = pcpu->time_in_idle_timestamp;
 	spin_unlock_irqrestore(&pcpu->load_lock, flags);
@@ -367,25 +321,8 @@ static u64 update_load(int cpu)
 	unsigned int delta_idle;
 	unsigned int delta_time;
 	u64 active_time;
-	bool io_is_busy = tunables->io_is_busy;
 
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	u64 now_irq;
-	u64 now_iowait;
-	unsigned int delta_irq;
-	unsigned int delta_iowait;
-
-	io_is_busy |= tunables->io_busy;
-	now_iowait = get_cpu_iowait_time_us(cpu, &now);
-	now_irq = irq_time_read(cpu);
-	delta_irq = (unsigned int)(now_irq - pcpu->time_in_irq);
-	delta_iowait = (unsigned int)(now_iowait - pcpu->time_in_iowait);
-	pcpu->cputime_irq += (u64)delta_irq * pcpu->policy->cur;
-	pcpu->cputime_iowait += (u64)delta_iowait * pcpu->policy->cur;
-	pcpu->time_in_irq = now_irq;
-	pcpu->time_in_iowait = now_iowait;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
-	now_idle = get_cpu_idle_time(cpu, &now, io_is_busy);
+	now_idle = get_cpu_idle_time(cpu, &now, tunables->io_is_busy);
 	delta_idle = (unsigned int)(now_idle - pcpu->time_in_idle);
 	delta_time = (unsigned int)(now - pcpu->time_in_idle_timestamp);
 
@@ -405,7 +342,6 @@ static void cpufreq_interactive_timer(un
 {
 	u64 now;
 	unsigned int delta_time;
-	unsigned int cur;
 	u64 cputime_speedadj;
 	int cpu_load;
 	struct cpufreq_interactive_cpuinfo *pcpu =
@@ -417,13 +353,6 @@ static void cpufreq_interactive_timer(un
 	unsigned int index;
 	unsigned long flags;
 	u64 max_fvtime;
-	bool io_boosted = 0;
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	u64 cputime_irq;
-	u64 cputime_iowait;
-	unsigned int irq_load;
-	unsigned int iowait_load;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
 	if (!down_read_trylock(&pcpu->enable_sem))
 		return;
@@ -434,63 +363,18 @@ static void cpufreq_interactive_timer(un
 	now = update_load(data);
 	delta_time = (unsigned int)(now - pcpu->cputime_speedadj_timestamp);
 	cputime_speedadj = pcpu->cputime_speedadj;
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	cputime_irq = pcpu->cputime_irq;
-	cputime_iowait = pcpu->cputime_iowait;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	spin_unlock_irqrestore(&pcpu->load_lock, flags);
 
 	if (WARN_ON_ONCE(!delta_time))
 		goto rearm;
 
-	cur = pcpu->policy->cur;
-	if (cur == 0)
-		goto rearm;
-	cpu_load = loadadjfreq / cur;
-
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	/*
-	* If CPU IRQ load hits the threshold, take IOWAIT into account.
-	* If all cores' IRQ load less than the threshold, exclude IOWAIT.
-	*/
-	/* Calculate the irq and iowait load(%) */
-	cputime_irq = cputime_irq * 100;
-	do_div(cputime_irq, delta_time);
-	irq_load = (unsigned int)cputime_irq / cur;
-	cputime_iowait = cputime_iowait * 100;
-	do_div(cputime_iowait, delta_time);
-	iowait_load = (unsigned int)cputime_iowait / cur;
-
-	if (have_governor_per_policy())
-		spin_lock_irqsave(&pcpu->load_lock, flags);
-
-	if (irq_load >= tunables->irq_load_threshold_val
-		&& iowait_load >= tunables->iowait_load_threshold_val){
-		io_boosted = 1;
-		tunables->io_busy_mask |= 1 << data;
-		tunables->io_busy = 1;
-	} else if (irq_load >= tunables->irq_load_threshold_val) {
-		tunables->io_busy_mask |= 1 << data;
-		tunables->io_busy = 1;
-	} else {
-		tunables->io_busy_mask &= ~(1 << data);
-	}
-
-	if (!tunables->io_busy_mask)
-		tunables->io_busy = 0;
-
-	if (have_governor_per_policy())
-		spin_unlock_irqrestore(&pcpu->load_lock, flags);
-
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
-
 	spin_lock_irqsave(&pcpu->target_freq_lock, flags);
 	do_div(cputime_speedadj, delta_time);
 	loadadjfreq = (unsigned int)cputime_speedadj * 100;
-	cpu_load = loadadjfreq / cur;
+	cpu_load = loadadjfreq / pcpu->target_freq;
 	tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime;
 
-	if (cpu_load >= tunables->go_hispeed_load || tunables->boosted || io_boosted) {
+	if (cpu_load >= tunables->go_hispeed_load || tunables->boosted) {
 		if (pcpu->policy->cur < tunables->hispeed_freq) {
 			new_freq = tunables->hispeed_freq;
 		} else {
@@ -1192,50 +1076,6 @@ static ssize_t store_io_is_busy(struct c
 	return count;
 }
 
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-static ssize_t show_irq_load_threshold(
-	struct cpufreq_interactive_tunables *tunables,
-	char *buf)
-{
-	return sprintf(buf, "%d\n", tunables->irq_load_threshold_val);
-}
-
-static ssize_t store_irq_load_threshold(
-	struct cpufreq_interactive_tunables *tunables,
-	const char *buf, size_t count)
-{
-	int ret;
-	unsigned long val;
-
-	ret = kstrtoul(buf, 0, &val);
-	if (ret < 0)
-		return ret;
-	tunables->irq_load_threshold_val = val;
-	return count;
-}
-
-static ssize_t show_iowait_load_threshold(
-	struct cpufreq_interactive_tunables *tunables,
-	char *buf)
-{
-	return sprintf(buf, "%d\n", tunables->iowait_load_threshold_val);
-}
-
-static ssize_t store_iowait_load_threshold(
-	struct cpufreq_interactive_tunables *tunables,
-	const char *buf, size_t count)
-{
-	int ret;
-	unsigned long val;
-
-	ret = kstrtoul(buf, 0, &val);
-	if (ret < 0)
-		return ret;
-	tunables->iowait_load_threshold_val = val;
-	return count;
-}
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
-
 /*
  * Create show/store routines
  * - sys: One governor instance for complete SYSTEM
@@ -1286,10 +1126,6 @@ show_store_gov_pol_sys(boostpulse_durati
 store_gov_pol_sys(touchboostpulse);
 show_store_gov_pol_sys(touchboostpulse_duration);
 show_store_gov_pol_sys(io_is_busy);
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-show_store_gov_pol_sys(irq_load_threshold);
-show_store_gov_pol_sys(iowait_load_threshold);
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
 #define gov_sys_attr_rw(_name)						\
 static struct global_attr _name##_gov_sys =				\
@@ -1315,10 +1151,6 @@ gov_sys_pol_attr_rw(boost);
 gov_sys_pol_attr_rw(boostpulse_duration);
 gov_sys_pol_attr_rw(touchboostpulse_duration);
 gov_sys_pol_attr_rw(io_is_busy);
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-gov_sys_pol_attr_rw(irq_load_threshold);
-gov_sys_pol_attr_rw(iowait_load_threshold);
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
 static struct global_attr boostpulse_gov_sys =
 	__ATTR(boostpulse, 0200, NULL, store_boostpulse_gov_sys);
@@ -1348,10 +1180,6 @@ static struct attribute *interactive_att
 	&touchboostpulse_gov_sys.attr,
 	&touchboostpulse_duration_gov_sys.attr,
 	&io_is_busy_gov_sys.attr,
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	&irq_load_threshold_gov_sys.attr,
-	&iowait_load_threshold_gov_sys.attr,
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	NULL,
 };
 
@@ -1376,10 +1204,6 @@ static struct attribute *interactive_att
 	&touchboostpulse_gov_pol.attr,
 	&touchboostpulse_duration_gov_pol.attr,
 	&io_is_busy_gov_pol.attr,
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-	&irq_load_threshold_gov_pol.attr,
-	&iowait_load_threshold_gov_pol.attr,
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 	NULL,
 };
 
@@ -1456,12 +1280,6 @@ static int cpufreq_governor_interactive(
 		tunables->touchboostpulse_duration_val =
 				DEFAULT_MIN_SAMPLE_TIME;
 		tunables->timer_slack_val = DEFAULT_TIMER_SLACK;
-#ifdef CONFIG_IRQ_TIME_ACCOUNTING
-		tunables->irq_load_threshold_val = DEFAULT_IRQ_LOAD_THRESHOLD;
-		tunables->iowait_load_threshold_val =
-			DEFAULT_IOWAIT_LOAD_THRESHOLD;
-		tunables->io_busy = 0;
-#endif /* CONFIG_IRQ_TIME_ACCOUNTING */
 
 		spin_lock_init(&tunables->target_loads_lock);
 		spin_lock_init(&tunables->above_hispeed_delay_lock);
@@ -1503,6 +1321,9 @@ static int cpufreq_governor_interactive(
 			sysfs_remove_group(get_governor_parent_kobj(policy),
 					get_sysfs_attr());
 
+			if (!have_governor_per_policy())
+				cpufreq_put_global_kobject();
+
 			kfree(tunables);
 			common_tunables = NULL;
 		}
