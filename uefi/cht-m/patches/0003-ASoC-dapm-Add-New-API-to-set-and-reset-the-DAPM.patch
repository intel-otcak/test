From e93b6d879d2ea430a87a1dffa3f1749ef384cfa0 Mon Sep 17 00:00:00 2001
From: "Subhransu S. Prusty" <subhransu.s.prusty@intel.com>
Date: Mon, 25 Aug 2014 14:01:46 +0530
Subject: [PATCH 03/12] ASoC: dapm: Add New API to set and reset the DAPM
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

New routine introduced to set and reset the DAPM state.
This is to handle scenarios to forcefully power cycle
the DAPM such as for error recovery in DSP based systems.

Change-Id: Iebd63977aea9f8d97941e8b6e5e0cd0d1bbcb74d
Signed-off-by: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
---
 include/sound/soc-dapm.h       |  3 +++
 sound/soc/intel/sst/sst.c      |  8 ++++++++
 sound/soc/intel/sst/sst.h      |  1 +
 sound/soc/intel/sst/sst_acpi.c |  7 ++-----
 sound/soc/soc-dapm.c           | 25 +++++++++++++++++++++++++
 5 files changed, 39 insertions(+), 5 deletions(-)

diff --git a/include/sound/soc-dapm.h b/include/sound/soc-dapm.h
index a43818e..0a58636 100644
--- a/include/sound/soc-dapm.h
+++ b/include/sound/soc-dapm.h
@@ -519,6 +519,9 @@ enum snd_soc_dapm_type {
 	snd_soc_dapm_kcontrol,		/* Auto-disabled kcontrol */
 };
 
+/* dapm set/reset */
+int snd_soc_dapm_state_set(struct snd_soc_card *card, bool reset_state);
+
 enum snd_soc_dapm_subclass {
 	SND_SOC_DAPM_CLASS_INIT		= 0,
 	SND_SOC_DAPM_CLASS_RUNTIME	= 1,
diff --git a/sound/soc/intel/sst/sst.c b/sound/soc/intel/sst/sst.c
index 7649e16..d109cec 100644
--- a/sound/soc/intel/sst/sst.c
+++ b/sound/soc/intel/sst/sst.c
@@ -568,6 +568,14 @@ free_wq:
 	return ret_val;
 }
 
+void sst_recovery_free(struct intel_sst_drv *ctx)
+{
+	if (ctx->pdata->start_recovery_timer) {
+		if (ctx->recovery_wq)
+			destroy_workqueue(ctx->recovery_wq);
+		device_remove_file(ctx->dev, &dev_attr_audio_recovery_interval);
+	}
+}
 
 static const struct dmi_system_id dmi_machine_table[] = {
 	{
diff --git a/sound/soc/intel/sst/sst.h b/sound/soc/intel/sst/sst.h
index b80b36c..47c6172 100644
--- a/sound/soc/intel/sst/sst.h
+++ b/sound/soc/intel/sst/sst.h
@@ -705,6 +705,7 @@ long intel_sst_ioctl_dsp(unsigned int cmd,
 		struct snd_ppp_params *algo_params, unsigned long arg);
 
 int sst_recovery_init(struct intel_sst_drv *sst_drv_ctx);
+void sst_recovery_free(struct intel_sst_drv *sst_drv_ctx);
 int sst_set_timer(struct sst_monitor_lpe *monitor_lpe, bool enable);
 void sst_timer_cb(unsigned long data);
 void sst_dump_to_buffer(const void *from, size_t from_len, char *buf);
diff --git a/sound/soc/intel/sst/sst_acpi.c b/sound/soc/intel/sst/sst_acpi.c
index 37e2971..6ceacc6 100644
--- a/sound/soc/intel/sst/sst_acpi.c
+++ b/sound/soc/intel/sst/sst_acpi.c
@@ -222,7 +222,7 @@ struct sst_platform_info byt_rvp_platform_data = {
 	.pdata = &sst_byt_pdata,
 	.ipc_info = &byt_ipc_info,
 	.lib_info = &byt_lib_dnld_info,
-	.start_recovery_timer = false,
+	.start_recovery_timer = true,
 };
 
 struct sst_platform_info byt_ffrd8_platform_data = {
@@ -694,10 +694,7 @@ int sst_acpi_remove(struct platform_device *pdev)
 	struct intel_sst_drv *ctx;
 
 	ctx = platform_get_drvdata(pdev);
-	if (sst_drv_ctx->pdata->start_recovery_timer) {
-		device_remove_file(sst_drv_ctx->dev,
-			&dev_attr_audio_recovery_interval);
-	}
+	sst_recovery_free(ctx);
 	sst_debugfs_exit(ctx);
 	pm_runtime_get_noresume(ctx->dev);
 	pm_runtime_disable(ctx->dev);
diff --git a/sound/soc/soc-dapm.c b/sound/soc/soc-dapm.c
index 5b5f8cb..6d04d83 100644
--- a/sound/soc/soc-dapm.c
+++ b/sound/soc/soc-dapm.c
@@ -377,6 +377,31 @@ static void dapm_reset(struct snd_soc_card *card)
 	}
 }
 
+int snd_soc_dapm_state_set(struct snd_soc_card *snd_card, bool reset_state)
+{
+
+	struct snd_soc_card *card = snd_card;
+	memset(&card->dapm_stats, 0, sizeof(card->dapm_stats));
+
+	dev_dbg(card->dev, "card %s  dapm reset_state %d\n", card->name, reset_state);
+
+	if (reset_state) {
+		snd_power_change_state(card->snd_card, SNDRV_CTL_POWER_D3);
+	} else	{
+		/* Bring us up into D2 so that DAPM starts enabling things */
+		snd_power_change_state(card->snd_card, SNDRV_CTL_POWER_D2);
+
+		/* userspace can access us now we are back as we were before */
+		snd_power_change_state(card->snd_card, SNDRV_CTL_POWER_D0);
+	}
+
+	/* Recheck all analogue paths */
+	dapm_mark_io_dirty(&card->dapm);
+	snd_soc_dapm_sync(&card->dapm);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snd_soc_dapm_state_set);
+
 static int soc_widget_read(struct snd_soc_dapm_widget *w, int reg,
 	unsigned int *value)
 {
-- 
1.8.3.2

