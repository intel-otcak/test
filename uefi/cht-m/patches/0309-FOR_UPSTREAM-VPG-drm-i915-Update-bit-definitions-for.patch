From 77188336177f57f8c7f440032ffbc8e04d732474 Mon Sep 17 00:00:00 2001
Message-Id: <77188336177f57f8c7f440032ffbc8e04d732474.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Durgadoss R <durgadoss.r@intel.com>
Date: Thu, 4 Sep 2014 15:18:24 +0530
Subject: [PATCH 309/312] FOR_UPSTREAM [VPG]: drm/i915: Update bit definitions
 for CHV CDclk

Update bit definitions for CDclk register as per bspec
for CHV.
* Program CDclk values based on the SKU
* CDclk should be at least as high as CZclk.
  If not, bring it up to CZclk.

Issue: GMINL-1258
Change-Id: I045267aa396f0b85fbbacbad2b6f6372619116ed
Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h      |   23 ++++++++--
 drivers/gpu/drm/i915/intel_display.c |   80 +++++++++++++++++++++++++++++-----
 2 files changed, 89 insertions(+), 14 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index f1312c3..b7a2357 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -515,10 +515,25 @@
 #define BUNIT_REG_BISOC				0x11
 
 #define PUNIT_REG_DSPFREQ			0x36
-#define   DSPFREQSTAT_SHIFT			30
-#define   DSPFREQSTAT_MASK			(0x3 << DSPFREQSTAT_SHIFT)
-#define   DSPFREQGUAR_SHIFT			14
-#define   DSPFREQGUAR_MASK			(0x3 << DSPFREQGUAR_SHIFT)
+#define DSPFREQSTAT_SHIFT_VLV			30
+#define DSPFREQSTAT_MASK_VLV			(0x3 << DSPFREQSTAT_SHIFT_VLV)
+#define DSPFREQGUAR_SHIFT_VLV			14
+#define DSPFREQGUAR_MASK_VLV			(0x3 << DSPFREQGUAR_SHIFT_VLV)
+
+#define DSPFREQSTAT_SHIFT_CHV			24
+#define DSPFREQSTAT_MASK_CHV			(0x1f << DSPFREQSTAT_SHIFT_CHV)
+#define DSPFREQGUAR_SHIFT_CHV			8
+#define DSPFREQGUAR_MASK_CHV			(0x1f << DSPFREQGUAR_SHIFT_CHV)
+
+#define DSPFREQSTAT_SHIFT(dev) \
+	(IS_CHERRYVIEW(dev) ? DSPFREQSTAT_SHIFT_CHV : DSPFREQSTAT_SHIFT_VLV)
+#define DSPFREQSTAT_MASK(dev) \
+	(IS_CHERRYVIEW(dev) ? DSPFREQSTAT_MASK_CHV : DSPFREQSTAT_MASK_VLV)
+#define DSPFREQGUAR_SHIFT(dev) \
+	(IS_CHERRYVIEW(dev) ? DSPFREQGUAR_SHIFT_CHV : DSPFREQGUAR_SHIFT_VLV)
+#define DSPFREQGUAR_MASK(dev) \
+	(IS_CHERRYVIEW(dev) ? DSPFREQGUAR_MASK_CHV : DSPFREQGUAR_MASK_VLV)
+
 #define   _DP_SSC(val, pipe)			((val) << (2 * (pipe)))
 #define   DP_SSC_MASK(pipe)			_DP_SSC(0x3, (pipe))
 #define   DP_SSC_PWR_ON(pipe)			_DP_SSC(0x0, (pipe))
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index c5b8807..2a8a2a3 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -4916,6 +4916,67 @@ int valleyview_get_vco(struct drm_i915_private *dev_priv)
 	return vco_freq[hpll_freq];
 }
 
+static void cherryview_set_cdclk(struct drm_device *dev, int new_cdclk)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	u32 cmd, val, vco;
+	int cur_cdclk, czclk;
+
+	/*
+	 * The existing CHT systems can work only when
+	 * CDclk freq is equal to OR higher than CZclk.
+	 * freq. So, cap the CDclk freq, if required.
+	 */
+	intel_get_cd_cz_clk(dev_priv, &cur_cdclk, &czclk);
+	if (new_cdclk < czclk) {
+		new_cdclk = czclk;
+		DRM_DEBUG_KMS("Corrected CDclk freq: %d\n", new_cdclk);
+	}
+
+	WARN_ON(valleyview_cur_cdclk(dev_priv) != dev_priv->vlv_cdclk_freq);
+	dev_priv->vlv_cdclk_freq = new_cdclk;
+
+	/*
+	 * Obtain the ratio for CDclk corresponding to a particular
+	 * SKU. Here, the vco value helps us in determining the SKU.
+	 */
+	vco = valleyview_get_vco(dev_priv);
+	cmd = DIV_ROUND_CLOSEST((vco << 1), new_cdclk) - 1;
+
+	DRM_DEBUG_KMS("Obtained cmd %d for cdclk %d\n", cmd, new_cdclk);
+
+	mutex_lock(&dev_priv->rps.hw_lock);
+	val = vlv_punit_read(dev_priv, PUNIT_REG_DSPFREQ);
+	val &= ~DSPFREQGUAR_MASK(dev);
+	val |= (cmd << DSPFREQGUAR_SHIFT(dev));
+	vlv_punit_write(dev_priv, PUNIT_REG_DSPFREQ, val);
+	if (wait_for((vlv_punit_read(dev_priv, PUNIT_REG_DSPFREQ) &
+		      DSPFREQSTAT_MASK(dev)) == (cmd << DSPFREQSTAT_SHIFT(dev)),
+		     50)) {
+		DRM_ERROR("timed out waiting for CDclk change\n");
+	}
+	mutex_unlock(&dev_priv->rps.hw_lock);
+
+	mutex_lock(&dev_priv->dpio_lock);
+	/* adjust self-refresh exit latency value */
+	val = vlv_bunit_read(dev_priv, BUNIT_REG_BISOC);
+	val &= ~0x7f;
+
+	/*
+	 * For high bandwidth configs, we set a higher latency in the bunit
+	 * so that the core display fetch happens in time to avoid underruns.
+	 */
+	if (new_cdclk == 400)
+		val |= 4500 / 250; /* 4.5 usec */
+	else
+		val |= 3000 / 250; /* 3.0 usec */
+	vlv_bunit_write(dev_priv, BUNIT_REG_BISOC, val);
+	mutex_unlock(&dev_priv->dpio_lock);
+
+	/* Since we changed the CDclk, we need to update the GMBUSFREQ too */
+	intel_i2c_reset(dev);
+}
+
 /* Adjust CDclk dividers to allow high res or save power if possible */
 static void valleyview_set_cdclk(struct drm_device *dev, int cdclk)
 {
@@ -4934,11 +4995,11 @@ static void valleyview_set_cdclk(struct drm_device *dev, int cdclk)
 
 	mutex_lock(&dev_priv->rps.hw_lock);
 	val = vlv_punit_read(dev_priv, PUNIT_REG_DSPFREQ);
-	val &= ~DSPFREQGUAR_MASK;
-	val |= (cmd << DSPFREQGUAR_SHIFT);
+	val &= ~DSPFREQGUAR_MASK(dev);
+	val |= (cmd << DSPFREQGUAR_SHIFT(dev));
 	vlv_punit_write(dev_priv, PUNIT_REG_DSPFREQ, val);
 	if (wait_for((vlv_punit_read(dev_priv, PUNIT_REG_DSPFREQ) &
-		      DSPFREQSTAT_MASK) == (cmd << DSPFREQSTAT_SHIFT),
+		      DSPFREQSTAT_MASK(dev)) == (cmd << DSPFREQSTAT_SHIFT(dev)),
 		     50)) {
 		DRM_ERROR("timed out waiting for CDclk change\n");
 	}
@@ -5000,11 +5061,6 @@ int valleyview_cur_cdclk(struct drm_i915_private *dev_priv)
 static int valleyview_calc_cdclk(struct drm_i915_private *dev_priv,
 				 int max_pixclk)
 {
-
-	/* FIXME: Punit isn't quite ready yet */
-	if (IS_CHERRYVIEW(dev_priv->dev))
-		return 400000;
-
 	/*
 	 * Really only a few cases to deal with, as only 4 CDclks are supported:
 	 *   200MHz
@@ -5062,8 +5118,12 @@ static void valleyview_modeset_global_resources(struct drm_device *dev)
 	int max_pixclk = intel_mode_max_pixclk(dev_priv);
 	int req_cdclk = valleyview_calc_cdclk(dev_priv, max_pixclk);
 
-	if (req_cdclk != dev_priv->vlv_cdclk_freq)
-		valleyview_set_cdclk(dev, req_cdclk);
+	if (req_cdclk != dev_priv->vlv_cdclk_freq) {
+		if (IS_CHERRYVIEW(dev))
+			cherryview_set_cdclk(dev, req_cdclk);
+		else
+			valleyview_set_cdclk(dev, req_cdclk);
+	}
 	modeset_update_crtc_power_domains(dev);
 }
 
-- 
1.7.9.5

