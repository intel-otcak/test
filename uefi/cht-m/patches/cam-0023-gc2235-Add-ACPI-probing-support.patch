From c6c07e8c57eecabdeec62804e75b726b8f870ae3 Mon Sep 17 00:00:00 2001
From: Ilkka Koskinen <ilkka.koskinen@intel.com>
Date: Thu, 8 May 2014 15:49:44 +0300
Subject: [PATCH 023/117] gc2235: Add ACPI probing support

Signed-off-by: Ilkka Koskinen <ilkka.koskinen@intel.com>
---
 .../intel-mid/device_libs/platform_gc2235.c        | 153 +++++++++++----------
 .../camera/drivers/media/i2c/gc2235.c              |  18 +++
 .../camera/drivers/media/i2c/gc2235.h              |   2 +
 3 files changed, 99 insertions(+), 74 deletions(-)

diff --git a/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c b/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
index b2c6715..4bf991b 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_gc2235.c
@@ -12,9 +12,9 @@
 #include <linux/gpio.h>
 #include <linux/delay.h>
 #include <linux/i2c.h>
+#include <linux/acpi.h>
 #include <linux/atomisp_platform.h>
 #include <linux/regulator/consumer.h>
-#include <asm/intel_scu_ipcutil.h>
 #include <asm/intel-mid.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_mid_pmic.h>
@@ -23,9 +23,6 @@
 #include <linux/vlv2_plat_clock.h>
 #endif
 
-#include "platform_camera.h"
-#include "platform_gc2235.h"
-
 /* workround - pin defined for byt */
 #define CAMERA_0_RESET 126
 #define CAMERA_0_PWDN 123
@@ -76,6 +73,42 @@ static enum pmic_ids pmic_id;
 static int camera_reset;
 static int camera_power_down;
 static int camera_vprog1_on;
+
+/*
+ * Cloned from MCG platform_camera.c because it's small and
+ * self-contained.  All it does is maintain the V4L2 subdev hostdate
+ * pointer
+ */
+static int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
+			     u32 lanes, u32 format, u32 bayer_order, int flag)
+{
+        struct i2c_client *client = v4l2_get_subdevdata(sd);
+        struct camera_mipi_info *csi = NULL;
+
+        if (flag) {
+                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
+                if (!csi) {
+                        dev_err(&client->dev, "out of memory\n");
+                        return -ENOMEM;
+                }
+                csi->port = port;
+                csi->num_lanes = lanes;
+                csi->input_format = format;
+                csi->raw_bayer_order = bayer_order;
+                v4l2_set_subdev_hostdata(sd, (void *)csi);
+                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
+                csi->metadata_effective_width = NULL;
+                dev_info(&client->dev,
+                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
+                         port, lanes, bayer_order);
+        } else {
+                csi = v4l2_get_subdev_hostdata(sd);
+                kfree(csi);
+        }
+
+	return 0;
+}
+
 /*
  * BYT_CR2.1 primary camera sensor - GC2235 platform data
  */
@@ -95,12 +128,11 @@ static struct i2c_client *i2c_find_client_by_name(char *name)
 	return dev ? to_i2c_client(dev) : NULL;
 }
 
-static enum pmic_ids camera_pmic_probe()
+static enum pmic_ids camera_pmic_probe(void)
 {
 	/* search by client name */
 	struct i2c_client *client;
-	if (spid.hardware_id != BYT_TABLET_BLK_CRV2 ||
-		i2c_find_client_by_name(PMIC_HID_ROHM))
+	if (i2c_find_client_by_name(PMIC_HID_ROHM))
 		return PMIC_ROHM;
 
 	client = i2c_find_client_by_name(PMIC_HID_XPOWER);
@@ -214,73 +246,53 @@ static int gc2235_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 	int ret;
 	int pin;
 
-	if (!IS_BYT) {
-		if (camera_power_down < 0) {
-			ret = camera_sensor_gpio(-1, GP_CAMERA_0_POWER_DOWN,
-					GPIOF_DIR_OUT, 1);
-			if (ret < 0)
-				return ret;
-			camera_power_down = ret;
-		}
-
-		if (camera_reset < 0) {
-			ret = camera_sensor_gpio(-1, GP_CAMERA_0_RESET,
-					GPIOF_DIR_OUT, 1);
-			if (ret < 0)
-				return ret;
-			camera_reset = ret;
-		}
-	} else {
-		/*
-		 * FIXME: WA using hardcoded GPIO value here.
-		 * The GPIO value would be provided by ACPI table, which is
-		 * not implemented currently.
-		 */
-		if (spid.hardware_id == BYT_TABLET_BLK_CRV2)
-			pin = CAMERA_0_RESET_CRV2;
-		else
-			pin = CAMERA_0_RESET;
-
-		if (camera_reset < 0) {
-			ret = gpio_request(pin, "camera_0_reset");
-			if (ret) {
-				pr_err("%s: failed to request gpio(pin %d)\n",
-					__func__, pin);
-				return ret;
-			}
-		}
-		camera_reset = pin;
-		ret = gpio_direction_output(pin, 1);
+	/*
+	 * FIXME: WA using hardcoded GPIO value here.
+	 * The GPIO value would be provided by ACPI table, which is
+	 * not implemented currently.
+	 */
+	if (camera_reset < 0) {
+		pin = CAMERA_0_RESET;
+		ret = gpio_request(pin, "camera_0_reset");
 		if (ret) {
-			pr_err("%s: failed to set gpio(pin %d) direction\n",
-				__func__, pin);
-			gpio_free(pin);
+			pr_err("%s: failed to request gpio(pin %d)\n",
+			       __func__, pin);
 			return ret;
 		}
+	}
 
-		/*
-		 * FIXME: WA using hardcoded GPIO value here.
-		 * The GPIO value would be provided by ACPI table, which is
-		 * not implemented currently.
-		 */
-		pin = CAMERA_0_PWDN;
-		if (camera_power_down < 0) {
-			ret = gpio_request(pin, "camera_0_power");
-			if (ret) {
-				pr_err("%s: failed to request gpio(pin %d)\n",
-					__func__, pin);
-				return ret;
-			}
-		}
-		camera_power_down = pin;
-		ret = gpio_direction_output(pin, 0);
+	camera_reset = pin;
+	ret = gpio_direction_output(pin, 1);
+	if (ret) {
+		pr_err("%s: failed to set gpio(pin %d) direction\n",
+		       __func__, pin);
+		gpio_free(pin);
+		return ret;
+	}
+
+	/*
+	 * FIXME: WA using hardcoded GPIO value here.
+	 * The GPIO value would be provided by ACPI table, which is
+	 * not implemented currently.
+	 */
+	pin = CAMERA_0_PWDN;
+	if (camera_power_down < 0) {
+		ret = gpio_request(pin, "camera_0_power");
 		if (ret) {
-			pr_err("%s: failed to set gpio(pin %d) direction\n",
-				__func__, pin);
-			gpio_free(pin);
+			pr_err("%s: failed to request gpio(pin %d)\n",
+			       __func__, pin);
 			return ret;
 		}
 	}
+	camera_power_down = pin;
+	ret = gpio_direction_output(pin, 0);
+	if (ret) {
+		pr_err("%s: failed to set gpio(pin %d) direction\n",
+		       __func__, pin);
+		gpio_free(pin);
+		return ret;
+	}
+
 	if (flag) {
 		gpio_set_value(camera_reset, 0);
 		gpio_set_value(camera_power_down, 1);
@@ -302,7 +314,6 @@ static int gc2235_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 
 static int gc2235_flisclk_ctrl(struct v4l2_subdev *sd, int flag)
 {
-	static const unsigned int clock_khz = 19200;
 #ifdef CONFIG_VLV2_PLAT_CLK
 	if (flag) {
 		int ret;
@@ -312,9 +323,6 @@ static int gc2235_flisclk_ctrl(struct v4l2_subdev *sd, int flag)
 		return vlv2_plat_configure_clock(OSC_CAM0_CLK, CLK_ON);
 	}
 	return vlv2_plat_configure_clock(OSC_CAM0_CLK, CLK_OFF);
-#elif defined(CONFIG_INTEL_SCU_IPC_UTIL)
-	return intel_scu_ipc_osc_clk(OSC_CLK_CAM0,
-			flag ? clock_khz : 0);
 #else
 	pr_err("gc2235 clock is not set.\n");
 	return 0;
@@ -345,8 +353,6 @@ static int gc2235_power_ctrl(struct v4l2_subdev *sd, int flag)
 						"Failed to enable regulator\n");
 				return ret;
 			}
-#elif defined(CONFIG_INTEL_SCU_IPC_UTIL)
-			ret = intel_scu_ipc_msic_vprog1(1);
 #else
 			pr_err("gc2235 power is not set.\n");
 #endif
@@ -364,8 +370,6 @@ static int gc2235_power_ctrl(struct v4l2_subdev *sd, int flag)
 						"Failed to disable regulator\n");
 				return ret;
 			}
-#elif defined(CONFIG_INTEL_SCU_IPC_UTIL)
-			ret = intel_scu_ipc_msic_vprog1(0);
 #else
 			pr_err("gc2235 power is not set.\n");
 #endif
@@ -441,3 +445,4 @@ void *gc2235_platform_data(void *info)
 
 	return &gc2235_sensor_platform_data;
 }
+EXPORT_SYMBOL_GPL(gc2235_platform_data);
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
index b4baa55..97e4b67 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.c
@@ -28,6 +28,7 @@
 #include <linux/init.h>
 #include <linux/kmod.h>
 #include <linux/device.h>
+#include <linux/acpi.h>
 #include <linux/delay.h>
 #include <linux/slab.h>
 #include <linux/i2c.h>
@@ -1234,6 +1235,15 @@ static int gc2235_probe(struct i2c_client *client,
 				       client->dev.platform_data);
 		if (ret)
 			goto out_free;
+	} else if (ACPI_COMPANION(&client->dev)) {
+		/*
+		 * If no SFI firmware, grab the platform struct
+		 * directly and configure via ACPI/EFIvars instead
+		 */
+		ret = gc2235_s_config(&dev->sd, client->irq,
+				      gc2235_platform_data(NULL));
+		if (ret)
+			goto out_free;
 	}
 
 	dev->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
@@ -1252,11 +1262,19 @@ out_free:
 	return ret;
 }
 
+
+static struct acpi_device_id gc2235_acpi_match[] = {
+	{""},
+	{},
+};
+MODULE_DEVICE_TABLE(acpi, gc2235_acpi_match);
+
 MODULE_DEVICE_TABLE(i2c, gc2235_id);
 static struct i2c_driver gc2235_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = GC2235_NAME,
+		.acpi_match_table = ACPI_PTR(gc2235_acpi_match),
 	},
 	.probe = gc2235_probe,
 	.remove = gc2235_remove,
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
index 3e7ee62..f9796b1 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
+++ b/drivers/external_drivers/camera/drivers/media/i2c/gc2235.h
@@ -119,6 +119,8 @@
 #define GC2235_START_STREAMING		0x91
 #define GC2235_STOP_STREAMING		0x0
 
+void *gc2235_platform_data(void *info);
+
 struct regval_list {
 	u16 reg_num;
 	u8 value;
-- 
1.9.3

