From ef7a2ae947ed6f44b2594efd556b146f6084d587 Mon Sep 17 00:00:00 2001
Message-Id: <ef7a2ae947ed6f44b2594efd556b146f6084d587.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Kausal Malladi <Kausal.Malladi@intel.com>
Date: Sun, 1 Feb 2015 14:01:32 +0530
Subject: [PATCH 71/95] MUST_REBASE [VPG]: video/adf: Platform Color Manager
 init

This patch :
* Creates the basic initialization and validation of property for VLV
  color correction.
* Adds Color Manager specific register details inside vlv_dc_regs.
* Initializes Pipe and plane properties for VLV platform.
* Creates helper function to register pipe and plane properties
  with the color manager framework.
* Updates Makefile to have the color correction included for
  compilation.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-4163
Change-Id: I314dff9bc6b4bedc28eb70f1b1c2b77d87b48d0a
Signed-off-by: Kausal Malladi <Kausal.Malladi@intel.com>
---
 drivers/video/adf/intel/core/intel_color_manager.c |    1 +
 drivers/video/adf/intel/core/vlv/Makefile          |    3 +-
 .../adf/intel/core/vlv/vlv_color_correction.c      |  189 ++++++++++++++++++++
 .../intel/include/core/vlv/vlv_color_correction.h  |  108 +++++++++++
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |   25 +++
 5 files changed, 325 insertions(+), 1 deletion(-)
 create mode 100644 drivers/video/adf/intel/core/vlv/vlv_color_correction.c
 create mode 100644 drivers/video/adf/intel/include/core/vlv/vlv_color_correction.h

diff --git a/drivers/video/adf/intel/core/intel_color_manager.c b/drivers/video/adf/intel/core/intel_color_manager.c
index 61cfbb5..c17ff5d4 100644
--- a/drivers/video/adf/intel/core/intel_color_manager.c
+++ b/drivers/video/adf/intel/core/intel_color_manager.c
@@ -35,6 +35,7 @@
  */
 typedef bool (*get_color_capabilities)(void *props_data, int object_type);
 get_color_capabilities platform_color_capabilities[] = {
+	vlv_get_color_correction,
 };
 
 /*
diff --git a/drivers/video/adf/intel/core/vlv/Makefile b/drivers/video/adf/intel/core/vlv/Makefile
index acdd5fe..a022ef6 100644
--- a/drivers/video/adf/intel/core/vlv/Makefile
+++ b/drivers/video/adf/intel/core/vlv/Makefile
@@ -14,4 +14,5 @@ obj-y := vlv_dc_config.o \
 	vlv_pipeline.o \
 	vlv_hdmi_port.o \
 	chv_dpio.o \
-	vlv_dp_port.o
+	vlv_dp_port.o\
+	vlv_color_correction.o
diff --git a/drivers/video/adf/intel/core/vlv/vlv_color_correction.c b/drivers/video/adf/intel/core/vlv/vlv_color_correction.c
new file mode 100644
index 0000000..a8e492d
--- /dev/null
+++ b/drivers/video/adf/intel/core/vlv/vlv_color_correction.c
@@ -0,0 +1,189 @@
+/*
+ * Copyright © 2014 Intel Corporation
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ * Author:
+ * Shashank Sharma <shashank.sharma@intel.com>
+ * Ramalingam C <Ramalingam.c@intel.com>
+ */
+
+#include <core/vlv/vlv_color_correction.h>
+
+/*
+ * Valleyview SOC allows following color correction values:
+ *	- CSC(wide gamut) with 3x3 matrix = 9 csc correction values.
+ *	- Gamma correction with 128 gamma values + 1 GCMAX value.
+ */
+const struct color_property vlv_pipe_color_corrections[] = {
+	{
+		.status = false,
+		.prop_id = csc,
+		.len = VLV_CSC_VALS,
+		.name = "csc-correction",
+		.validate = vlv_validate,
+	},
+
+	{
+		.status = false,
+		.prop_id = gamma,
+		.len = VLV_GAMMA_VALS,
+		.name = "gamma-correction",
+		.validate = vlv_validate,
+	}
+};
+
+/*
+ * Valleyview SOC allows following plane level color correction values:
+ *	- contrast: single valued property
+ *	- brightness: single valued property
+ *	- hue: single valued property
+ *	- saturation: single valued property
+ */
+const struct color_property vlv_plane_color_corrections[] = {
+	{
+		.status = false,
+		.prop_id = contrast,
+		.len = VLV_CB_VALS,
+		.name = "contrast",
+		.validate = vlv_validate,
+	},
+
+	{
+		.status = false,
+		.prop_id = brightness,
+		.len = VLV_CB_VALS,
+		.name = "brightness",
+		.validate = vlv_validate,
+	},
+
+	{
+		.status = false,
+		.prop_id = hue,
+		.len = VLV_HS_VALS,
+		.name = "hue",
+		.validate = vlv_validate
+	},
+
+	{
+		.status = false,
+		.prop_id = saturation,
+		.len = VLV_HS_VALS,
+		.name = "saturation",
+		.validate = vlv_validate
+	}
+};
+
+bool vlv_get_color_correction(void *props_data, int object_type)
+{
+	u32 count = 0;
+	u32 index = 0;
+	/* Sanity */
+	if (!props_data) {
+		pr_err("ADF: CM: VLV: Null input to get_color_correction\n");
+		return false;
+	}
+
+	/* Allocate pipe color capabilities holder if request is from pipe */
+	if (object_type == CLRMGR_REQUEST_FROM_PIPE) {
+		struct pipe_properties *pipe_props =
+			(struct pipe_properties *) props_data;
+		if (!pipe_props) {
+			pr_err("ADF: CM: VLV: OOM while loading color correction data\n");
+			return false;
+		}
+
+		pipe_props->no_of_pipe_props =
+			ARRAY_SIZE(vlv_pipe_color_corrections);
+		count = ARRAY_SIZE(vlv_pipe_color_corrections);
+
+		for (index = 0; index < count; index++) {
+			struct color_property *cp =
+				kzalloc(sizeof(struct color_property),
+					GFP_KERNEL);
+
+			if (!cp) {
+				pr_err("ADF: CM: Out of Memory to create a color property\n");
+
+				while (index--)
+					kfree(pipe_props->props[index]);
+				return false;
+			}
+			memcpy((void *) cp, (const void *)
+				(&(vlv_pipe_color_corrections[index])),
+					sizeof(struct color_property));
+			pipe_props->props[index] = cp;
+		}
+
+		pr_info("ADF: CM: VLV: Pipe color correction data loading done, details are:\n");
+		pr_info("ADF: CM: Properties(pipe=%d)\n",
+				(int)pipe_props->no_of_pipe_props);
+	}
+	/* Allocate plane color capabilities holder if request is from plane */
+	else if (object_type == CLRMGR_REQUEST_FROM_PLANE) {
+		struct plane_properties *plane_props =
+			(struct plane_properties *) props_data;
+		if (!plane_props) {
+			pr_err("ADF: CM: VLV: OOM while loading color correction data\n");
+			return false;
+		}
+
+		plane_props->no_of_plane_props =
+			ARRAY_SIZE(vlv_plane_color_corrections);
+		count = ARRAY_SIZE(vlv_plane_color_corrections);
+
+		for (index = 0; index < count; index++) {
+			struct color_property *cp =
+				kzalloc(sizeof(struct color_property),
+					GFP_KERNEL);
+
+			if (!cp) {
+				pr_err("ADF: CM: Out of Memory to create a color property\n");
+
+				while (index--)
+					kfree(plane_props->props[index]);
+				return false;
+			}
+			memcpy((void *) cp, (const void *)
+				(&(vlv_plane_color_corrections[index])),
+					sizeof(struct color_property));
+			plane_props->props[index] = cp;
+		}
+
+		pr_info("ADF: CM: VLV: Plane color correction data loading done, details are:\n");
+		pr_info("ADF: CM: Properties(plane=%d)\n",
+				(int)plane_props->no_of_plane_props);
+	} else
+		return false;
+
+	return true;
+}
+
+bool vlv_validate(u8 property)
+{
+	/* Validate if we support this property */
+	if ((int)property < csc || (int)property > saturation) {
+		pr_err("ADF: CM: VLV: Invalid input, propery Max=%d, Min=%d\n",
+			csc, saturation);
+		return false;
+	}
+
+	pr_info("ADF: CM: VLV: Input is valid for property\n");
+	return true;
+}
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_color_correction.h b/drivers/video/adf/intel/include/core/vlv/vlv_color_correction.h
new file mode 100644
index 0000000..d91241a
--- /dev/null
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_color_correction.h
@@ -0,0 +1,108 @@
+/*
+ * Copyright © 2014 Intel Corporation
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ * Author:
+ * Shashank Sharma <shashank.sharma@intel.com>
+ * Ramalingam C <ramalingam.c@intel.com>
+ */
+
+#include <core/intel_color_manager.h>
+#include <core/common/intel_dc_regs.h>
+#include <core/vlv/vlv_dc_regs.h>
+#include <core/vlv/vlv_dc_config.h>
+
+/* Platform */
+#define VLV_NO_PIPES				2
+#define VLV_NO_PRIMARY_PLANES			2
+#define VLV_NO_SPRITE_PLANES			4
+#define VLV_NO_PIPE_PROP			2
+#define VLV_NO_PLANE_PROP			4
+
+/* Property correction size */
+#define VLV_CSC_VALS				9
+#define VLV_GAMMA_VALS				129
+#define VLV_CB_VALS				1
+#define VLV_HS_VALS				1
+
+/* CSC correction */
+#define VLV_CSC_VALUE_MASK			0xFFF
+#define VLV_CSC_COEFF_SHIFT			16
+#define VLV_CSC_VALS				9
+
+/* Gamma correction */
+#define VLV_10BIT_GAMMA_MAX_INDEX		128
+#define VLV_GAMMA_EVEN_MASK			0xFF
+#define VLV_GAMMA_SHIFT_BLUE_REG		0
+#define VLV_GAMMA_SHIFT_GREEN_REG		8
+#define VLV_GAMMA_SHIFT_RED_REG			16
+#define VLV_GAMMA_ODD_SHIFT			8
+#define VLV_CLRMGR_GAMMA_GCMAX_SHIFT		17
+#define VLV_GAMMA_GCMAX_MASK			0x1FFFF
+#define VLV_CLRMGR_GAMMA_GCMAX_MAX		0x400
+#define VLV_10BIT_GAMMA_MAX_VALS		(VLV_10BIT_GAMMA_MAX_INDEX + \
+					CLRMGR_GAMMA_GCMAX_VAL)
+/* Sprite contrast */
+#define VLV_CONTRAST_DEFAULT			0x40
+#define VLV_CONTRAST_MASK			0x1FF
+#define VLV_CONTRAST_SHIFT			18
+#define VLV_CONTRAST_MAX			0x1F5
+
+/* Sprite brightness */
+#define VLV_BRIGHTNESS_MASK			0xFF
+#define VLV_BRIGHTNESS_DEFAULT			0
+
+/* Sprite HUE */
+#define VLV_HUE_MASK				0x7FF
+#define VLV_HUE_SHIFT				16
+#define VLV_HUE_DEFAULT				0
+
+/* Sprite Saturation */
+#define VLV_SATURATION_MASK			0x3FF
+#define VLV_SATURATION_DEFAULT			(1 << 7)
+
+/* Get sprite control */
+#define VLV_CLRMGR_SPRITE_OFFSET		0x100
+#define VLV_CLRMGR_SPCNTR(sp)			(VLV_SPR_CTRL_BASE + \
+			(sp - SPRITE_A) * VLV_CLRMGR_SPRITE_OFFSET)
+
+/* Brightness and contrast control register */
+#define VLV_CLRMGR_SPCB(sp)			(VLV_SPR_CB_BASE + \
+			(sp - SPRITE_A) * VLV_CLRMGR_SPRITE_OFFSET)
+
+/* Hue and Sat control register */
+#define VLV_CLRMGR_SPHS(sp)			(VLV_SPR_HS_BASE + \
+			(sp - SPRITE_A) * VLV_CLRMGR_SPRITE_OFFSET)
+
+bool vlv_validate(u8 property);
+bool vlv_set_csc(struct color_property *property, u64 *data, u8 pipe_id);
+bool vlv_disable_csc(struct color_property *property, u8 pipe_id);
+bool vlv_set_gamma(struct color_property *property, u64 *data, u8 pipe_id);
+bool vlv_disable_gamma(struct color_property *property, u8 pipe_id);
+bool vlv_set_contrast(struct color_property *property, u64 *data, u8 plane_id);
+bool vlv_disable_contrast(struct color_property *property, u8 plane_id);
+bool vlv_set_brightness(struct color_property *property,
+		u64 *data, u8 plane_id);
+bool vlv_disable_brightness(struct color_property *property, u8 plane_id);
+bool vlv_set_hue(struct color_property *property, u64 *data, u8 plane_id);
+bool vlv_disable_hue(struct color_property *property, u8 plane_id);
+bool vlv_set_saturation(struct color_property *property,
+		u64 *data, u8 plane_id);
+bool vlv_disable_saturation(struct color_property *property, u8 plane_id);
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index 13024c6..4fef636 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -6378,6 +6378,31 @@ extern int chv_cursor_offsets[];
 #define CURSOR_B_OFFSET		0x700c0
 #define CHV_CURSOR_C_OFFSET	0x700e0
 
+/* Color correction */
+/* CSC */
+#define PIPECONF_CSC_ENABLE		(1 << 15)
+#define _PIPEACSC			(VLV_DISPLAY_BASE + 0x600b0)
+#define _PIPEBCSC			(VLV_DISPLAY_BASE + 0x610b0)
+#define PIPECSC(pipe)			(_PIPEACSC + (pipe *  CSC_OFFSET))
+#define CSC_OFFSET			(_PIPEBCSC - _PIPEACSC)
+#define PIPECSC(pipe)			(_PIPEACSC + (pipe *  CSC_OFFSET))
+
+/* Gamma: GCMAX regs */
+#define VLV_PIPEA_GCMAX			(VLV_DISPLAY_BASE + 0x70010)
+#define VLV_PIPEB_GCMAX			(VLV_DISPLAY_BASE + 0x71010)
+#define VLV_PIPE_GCMAX(pipe) \
+	_PIPE(pipe, VLV_PIPEA_GCMAX, VLV_PIPEB_GCMAX)
+
+/* Sprite control */
+#define VLV_SPR_CTRL_BASE		(VLV_DISPLAY_BASE + 0x72180)
+
+/* Contrast and brightness */
+#define VLV_SPR_CB_BASE			(VLV_DISPLAY_BASE + 0x721d0)
+
+/* Hue and Saturation */
+#define VLV_SPR_HS_BASE			(VLV_DISPLAY_BASE + 0x721d4)
+
+
 /**
  * _wait_for - magic (register) wait macro
  *
-- 
1.7.9.5

