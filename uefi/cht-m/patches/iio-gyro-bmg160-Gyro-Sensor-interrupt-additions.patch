From 3c4ab773334ee6653672b5d6e38d3bad0515dd95 Mon Sep 17 00:00:00 2001
From: Matt Ranostay <matt.ranostay@intel.com>
Date: Wed, 20 Aug 2014 12:26:50 -0700
Subject: [PATCH] iio:gyro:bmg160 Gyro Sensor interrupt additions

This change implements motion interrupt support for BMG160 Gyro sensor.

Signed-off-by: Matt Ranostay <matt.ranostay@intel.com>
---
 drivers/iio/gyro/bmg160.c | 683 +++++++++++++++++++++++++++++++---------------
 1 file changed, 463 insertions(+), 220 deletions(-)

diff --git a/drivers/iio/gyro/bmg160.c b/drivers/iio/gyro/bmg160.c
index 05777b90539f..a57f8f2093d6 100644
--- a/drivers/iio/gyro/bmg160.c
+++ b/drivers/iio/gyro/bmg160.c
@@ -29,18 +29,17 @@
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/triggered_buffer.h>
 
-#define BMG160_DRV_NAME			"bmg160"
-#define BMG160_IRQ_NAME			"bmg160_event"
+#define BMG160_DRV_NAME		"bmg160"
+#define BMG160_IRQ_NAME		"bmg160_event"
 #define BMG160_GPIO_NAME		"gpio_int"
 
 #define BMG160_REG_CHIP_ID		0x00
 #define BMG160_CHIP_ID_VAL		0x0F
 
 #define BMG160_REG_PMU_LPW		0x11
-#define BMG160_PMU_SLP_MASK		0xE0
-#define BMG160_PMU_SLP_SHIFT		5
-#define BMG160_PMU_BIT_SLEEP_DUR_MASK	0x17
-#define BMG160_PMU_BIT_SLEEP_DUR_SHIFT	1
+#define BMG160_MODE_NORMAL		0x00
+#define BMG160_MODE_DEEP_SUSPEND	0x20
+#define BMG160_MODE_SUSPEND		0x80
 
 #define BMG160_REG_RANGE		0x0F
 
@@ -51,24 +50,31 @@
 #define BMG160_RANGE_125DPS		4
 
 #define BMG160_REG_PMU_BW		0x10
-#define BMG160_No_Filter		0
+#define BMG160_NO_FILTER		0
 #define BMG160_DEF_BW			100
 
 #define BMG160_REG_INT_MAP_0		0x17
 #define BMG160_INT_MAP_0_BIT_ANY	BIT(1)
 
+#define BMG160_REG_INT_MAP_1		0x18
+#define BMG160_INT_MAP_1_BIT_NEW_DATA	BIT(0)
+
 #define BMG160_REG_INT_RST_LATCH	0x21
 #define BMG160_INT_MODE_LATCH_RESET	0x80
 #define BMG160_INT_MODE_LATCH_INT	0x0F
+#define BMG160_INT_MODE_NON_LATCH_INT	0x00
 
 #define BMG160_REG_INT_EN_0		0x15
 #define BMG160_DATA_ENABLE_INT		BIT(7)
 
+#define BMG160_REG_INT_EN_1		0x16
+#define BMG160_INT1_BIT_OD		BIT(1)
+
 #define BMG160_REG_XOUT_L		0x02
 #define BMG160_AXIS_TO_REG(axis)	(BMG160_REG_XOUT_L + (axis * 2))
 
 #define BMG160_REG_SLOPE_THRES		0x1B
-#define BMG160_SLOPE_THRES_MASK		0x0F
+#define BMG160_SLOPE_THRES_MASK	0x0F
 
 #define BMG160_REG_MOTION_INTR		0x1C
 #define BMG160_INT_MOTION_X		BIT(0)
@@ -76,33 +82,30 @@
 #define BMG160_INT_MOTION_Z		BIT(2)
 #define BMG160_ANY_DUR_MASK		0x30
 #define BMG160_ANY_DUR_SHIFT		4
-/*
- * We are using Any-motion detection as described in section 4.8.5.
- * The min sample duration for rate comparison, This will reduce the
- * affective rate by this factor, so for user space notification, use
- * this factor, so setting 100HZ actually results notification of
- * 25HZ only. This chip doesn't allow going below this value.
- */
-#define BMG160_ANY_DUR_MIN_SAMPLE	4
+
+#define BMG160_REG_INT_STATUS_2	0x0B
+#define BMG160_ANY_MOTION_MASK		0x07
+
+#define BMG160_REG_TEMP		0x08
+#define BMG160_TEMP_CENTER_VAL		23
 
 #define BMG160_MAX_STARTUP_TIME_MS	80
 
-#define BMG160_SLEEP_DELAY_MS	2000
-static int bmg160_power_off_delay_ms = BMG160_SLEEP_DELAY_MS;
-module_param(bmg160_power_off_delay_ms, int, 0644);
-MODULE_PARM_DESC(bmg160_power_off_delay_ms,
-	"BMG160 Gyroscope power of delay in milli seconds.");
+#define BMG160_AUTO_SUSPEND_DELAY_MS	2000
 
 struct bmg160_data {
 	struct i2c_client *client;
-	struct iio_trigger *trig;
+	struct iio_trigger *dready_trig;
+	struct iio_trigger *motion_trig;
 	struct mutex mutex;
-	s16 buffer[12];
+	s16 buffer[8];
 	u8 bw_bits;
 	u32 dps_range;
 	int ev_enable_state;
 	int slope_thres;
-	bool trigger_on;
+	bool dready_trigger_on;
+	bool motion_trigger_on;
+	int64_t timestamp;
 };
 
 enum bmg160_axis {
@@ -111,12 +114,6 @@ enum bmg160_axis {
 	AXIS_Z,
 };
 
-enum bmg160_operation_mode {
-	BMG160_MODE_NORMAL,
-	BMG160_MODE_DEEP_SUSPEND,
-	BMG160_MODE_SUSPEND,
-};
-
 static const struct {
 	int val;
 	int bw_bits;
@@ -135,18 +132,12 @@ static const struct {
 			   { 133, BMG160_RANGE_250DPS},
 			   { 66, BMG160_RANGE_125DPS} };
 
-static int bmg160_set_mode(struct bmg160_data *data,
-			   enum bmg160_operation_mode mode)
+static int bmg160_set_mode(struct bmg160_data *data, u8 mode)
 {
 	int ret;
-	u8 lpw_bits = 0;
-
-	lpw_bits = mode << BMG160_PMU_SLP_SHIFT;
-
-	dev_dbg(&data->client->dev, "Set Mode bits %x\n", lpw_bits);
 
 	ret = i2c_smbus_write_byte_data(data->client,
-					BMG160_REG_PMU_LPW, lpw_bits);
+					BMG160_REG_PMU_LPW, mode);
 	if (ret < 0) {
 		dev_err(&data->client->dev, "Error writing reg_pmu_lpw\n");
 		return ret;
@@ -179,7 +170,7 @@ static int bmg160_set_bw(struct bmg160_data *data, int val)
 	ret = i2c_smbus_write_byte_data(data->client, BMG160_REG_PMU_BW,
 					bw_bits);
 	if (ret < 0) {
-		dev_err(&data->client->dev, "Error writing pmu_bw\n");
+		dev_err(&data->client->dev, "Error writing reg_pmu_bw\n");
 		return ret;
 	}
 
@@ -194,8 +185,7 @@ static int bmg160_chip_init(struct bmg160_data *data)
 
 	ret = i2c_smbus_read_byte_data(data->client, BMG160_REG_CHIP_ID);
 	if (ret < 0) {
-		dev_err(&data->client->dev,
-			"Error:BMG160_REG_CHIP_ID\n");
+		dev_err(&data->client->dev, "Error reading reg_chip_id\n");
 		return ret;
 	}
 
@@ -205,6 +195,13 @@ static int bmg160_chip_init(struct bmg160_data *data)
 		return -ENODEV;
 	}
 
+	ret = bmg160_set_mode(data, BMG160_MODE_NORMAL);
+	if (ret < 0)
+		return ret;
+
+	/* Wait upto 500 ms to be ready after changing mode */
+	usleep_range(500, 1000);
+
 	/* Set Bandwidth */
 	ret = bmg160_set_bw(data, BMG160_DEF_BW);
 	if (ret < 0)
@@ -215,42 +212,55 @@ static int bmg160_chip_init(struct bmg160_data *data)
 					BMG160_REG_RANGE,
 					BMG160_RANGE_500DPS);
 	if (ret < 0) {
-		dev_err(&data->client->dev,
-					"Error writing pmu_dps_range\n");
+		dev_err(&data->client->dev, "Error writing reg_range\n");
 		return ret;
 	}
 	data->dps_range = BMG160_RANGE_500DPS;
 
 	ret = i2c_smbus_read_byte_data(data->client, BMG160_REG_SLOPE_THRES);
 	if (ret < 0) {
-		dev_err(&data->client->dev, "Error: reading slope_thres\n");
+		dev_err(&data->client->dev, "Error reading reg_slope_thres\n");
 		return ret;
 	}
 	data->slope_thres = ret;
 
-	return bmg160_set_mode(data, BMG160_MODE_SUSPEND);
+	/* Set default interrupt mode */
+	ret = i2c_smbus_read_byte_data(data->client, BMG160_REG_INT_EN_1);
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error reading reg_int_en_1\n");
+		return ret;
+	}
+	ret &= ~BMG160_INT1_BIT_OD;
+	ret = i2c_smbus_write_byte_data(data->client,
+					BMG160_REG_INT_EN_1, ret);
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error writing reg_int_en_1\n");
+		return ret;
+	}
+
+	ret = i2c_smbus_write_byte_data(data->client,
+					BMG160_REG_INT_RST_LATCH,
+					BMG160_INT_MODE_LATCH_INT |
+					BMG160_INT_MODE_LATCH_RESET);
+	if (ret < 0) {
+		dev_err(&data->client->dev,
+			"Error writing reg_motion_intr\n");
+		return ret;
+	}
+
+	return 0;
 }
 
 static int bmg160_set_power_state(struct bmg160_data *data, bool on)
 {
 	int ret;
 
-#ifdef CONFIG_PM_RUNTIME
 	if (on)
 		ret = pm_runtime_get_sync(&data->client->dev);
 	else {
-		pm_runtime_put_noidle(&data->client->dev);
-		ret = pm_schedule_suspend(&data->client->dev,
-					  bmg160_power_off_delay_ms);
-	}
-#else
-	if (on) {
-		ret = bmg160_set_mode(data, BMG160_MODE_NORMAL);
-		if (!ret)
-			msleep_interruptible(BMG160_MAX_STARTUP_TIME_MS);
-	} else
-		ret = bmg160_set_mode(data, BMG160_MODE_SUSPEND);
-#endif
+		pm_runtime_mark_last_busy(&data->client->dev);
+		ret = pm_runtime_put_autosuspend(&data->client->dev);
+	}
 
 	if (ret < 0) {
 		dev_err(&data->client->dev,
@@ -261,15 +271,15 @@ static int bmg160_set_power_state(struct bmg160_data *data, bool on)
 	return 0;
 }
 
-static int bmg160_chip_setup_interrupt(struct bmg160_data *data, bool status)
+static int bmg160_setup_any_motion_interrupt(struct bmg160_data *data,
+					     bool status)
 {
 	int ret;
 
-	/* Enable/Disable INT1 mapping */
-	ret = i2c_smbus_read_byte_data(data->client,
-				       BMG160_REG_INT_MAP_0);
+	/* Enable/Disable INT_MAP0 mapping */
+	ret = i2c_smbus_read_byte_data(data->client,  BMG160_REG_INT_MAP_0);
 	if (ret < 0) {
-		dev_err(&data->client->dev, "Error read reg_int_map0\n");
+		dev_err(&data->client->dev, "Error reading reg_int_map0\n");
 		return ret;
 	}
 	if (status)
@@ -281,30 +291,19 @@ static int bmg160_chip_setup_interrupt(struct bmg160_data *data, bool status)
 					BMG160_REG_INT_MAP_0,
 					ret);
 	if (ret < 0) {
-		dev_err(&data->client->dev, "Error write reg_int_map0\n");
-		return ret;
-	}
-
-	/* Set latched mode interrupt and clear any latched interrupt */
-	ret = i2c_smbus_write_byte_data(data->client,
-					BMG160_REG_INT_RST_LATCH,
-					BMG160_INT_MODE_LATCH_INT |
-					BMG160_INT_MODE_LATCH_RESET);
-	if (ret < 0) {
-		dev_err(&data->client->dev, "Error write reg_rst_latch\n");
+		dev_err(&data->client->dev, "Error writing reg_int_map0\n");
 		return ret;
 	}
 
 	/* Enable/Disable slope interrupts */
 	if (status) {
-
 		/* Update slope thres */
 		ret = i2c_smbus_write_byte_data(data->client,
 						BMG160_REG_SLOPE_THRES,
 						data->slope_thres);
 		if (ret < 0) {
 			dev_err(&data->client->dev,
-				"Error write reg_slope_thres\n");
+				"Error writing reg_slope_thres\n");
 			return ret;
 		}
 
@@ -315,13 +314,31 @@ static int bmg160_chip_setup_interrupt(struct bmg160_data *data, bool status)
 						BMG160_INT_MOTION_Z);
 		if (ret < 0) {
 			dev_err(&data->client->dev,
-				"Error write reg_motion_intr\n");
+				"Error writing reg_motion_intr\n");
 			return ret;
 		}
 
+		/*
+		 * New data interrupt is always non-latched,
+		 * which will have higher priority, so no need
+		 * to set latched mode, we will be flooded anyway with INTR
+		 */
+		if (!data->dready_trigger_on) {
+			ret = i2c_smbus_write_byte_data(data->client,
+						BMG160_REG_INT_RST_LATCH,
+						BMG160_INT_MODE_LATCH_INT |
+						BMG160_INT_MODE_LATCH_RESET);
+			if (ret < 0) {
+				dev_err(&data->client->dev,
+					"Error writing reg_rst_latch\n");
+				return ret;
+			}
+		}
+
 		ret = i2c_smbus_write_byte_data(data->client,
 						BMG160_REG_INT_EN_0,
 						BMG160_DATA_ENABLE_INT);
+
 	} else
 		ret = i2c_smbus_write_byte_data(data->client,
 						BMG160_REG_INT_EN_0,
@@ -332,7 +349,72 @@ static int bmg160_chip_setup_interrupt(struct bmg160_data *data, bool status)
 		return ret;
 	}
 
-	return ret;
+	return 0;
+}
+
+static int bmg160_setup_new_data_interrupt(struct bmg160_data *data,
+					   bool status)
+{
+	int ret;
+
+	/* Enable/Disable INT_MAP1 mapping */
+	ret = i2c_smbus_read_byte_data(data->client, BMG160_REG_INT_MAP_1);
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error reading reg_int_map1\n");
+		return ret;
+	}
+
+	if (status)
+		ret |= BMG160_INT_MAP_1_BIT_NEW_DATA;
+	else
+		ret &= ~BMG160_INT_MAP_1_BIT_NEW_DATA;
+
+	ret = i2c_smbus_write_byte_data(data->client,
+					BMG160_REG_INT_MAP_1,
+					ret);
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error writing reg_int_map1\n");
+		return ret;
+	}
+
+	if (status) {
+		ret = i2c_smbus_write_byte_data(data->client,
+						BMG160_REG_INT_RST_LATCH,
+						BMG160_INT_MODE_NON_LATCH_INT |
+						BMG160_INT_MODE_LATCH_RESET);
+		if (ret < 0) {
+			dev_err(&data->client->dev,
+				"Error writing reg_rst_latch\n");
+				return ret;
+		}
+
+		ret = i2c_smbus_write_byte_data(data->client,
+						BMG160_REG_INT_EN_0,
+						BMG160_DATA_ENABLE_INT);
+
+	} else {
+		/* Restore interrupt mode */
+		ret = i2c_smbus_write_byte_data(data->client,
+						BMG160_REG_INT_RST_LATCH,
+						BMG160_INT_MODE_LATCH_INT |
+						BMG160_INT_MODE_LATCH_RESET);
+		if (ret < 0) {
+			dev_err(&data->client->dev,
+				"Error writing reg_rst_latch\n");
+				return ret;
+		}
+
+		ret = i2c_smbus_write_byte_data(data->client,
+						BMG160_REG_INT_EN_0,
+						0);
+	}
+
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error writing reg_int_en0\n");
+		return ret;
+	}
+
+	return 0;
 }
 
 static int bmg160_get_bw(struct bmg160_data *data, int *val)
@@ -361,7 +443,7 @@ static int bmg160_set_scale(struct bmg160_data *data, int val)
 					bmg160_scale_table[i].dps_range);
 			if (ret < 0) {
 				dev_err(&data->client->dev,
-					"Error writing pmu_dps_range\n");
+					"Error writing reg_range\n");
 				return ret;
 			}
 			data->dps_range = bmg160_scale_table[i].dps_range;
@@ -372,6 +454,62 @@ static int bmg160_set_scale(struct bmg160_data *data, int val)
 	return -EINVAL;
 }
 
+static int bmg160_get_temp(struct bmg160_data *data, int *val)
+{
+	int ret;
+
+	mutex_lock(&data->mutex);
+	ret = bmg160_set_power_state(data, true);
+	if (ret < 0) {
+		mutex_unlock(&data->mutex);
+		return ret;
+	}
+
+	ret = i2c_smbus_read_byte_data(data->client, BMG160_REG_TEMP);
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error reading reg_temp\n");
+		bmg160_set_power_state(data, false);
+		mutex_unlock(&data->mutex);
+		return ret;
+	}
+
+	*val = sign_extend32(ret, 7);
+	ret = bmg160_set_power_state(data, false);
+	mutex_unlock(&data->mutex);
+	if (ret < 0)
+		return ret;
+
+	return IIO_VAL_INT;
+}
+
+static int bmg160_get_axis(struct bmg160_data *data, int axis, int *val)
+{
+	int ret;
+
+	mutex_lock(&data->mutex);
+	ret = bmg160_set_power_state(data, true);
+	if (ret < 0) {
+		mutex_unlock(&data->mutex);
+		return ret;
+	}
+
+	ret = i2c_smbus_read_word_data(data->client, BMG160_AXIS_TO_REG(axis));
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error reading axis %d\n", axis);
+		bmg160_set_power_state(data, false);
+		mutex_unlock(&data->mutex);
+		return ret;
+	}
+
+	*val = sign_extend32(ret, 15);
+	ret = bmg160_set_power_state(data, false);
+	mutex_unlock(&data->mutex);
+	if (ret < 0)
+		return ret;
+
+	return IIO_VAL_INT;
+}
+
 static int bmg160_read_raw(struct iio_dev *indio_dev,
 			   struct iio_chan_spec const *chan,
 			   int *val, int *val2, long mask)
@@ -381,60 +519,50 @@ static int bmg160_read_raw(struct iio_dev *indio_dev,
 
 	switch (mask) {
 	case IIO_CHAN_INFO_RAW:
-		mutex_lock(&data->mutex);
-		if (iio_buffer_enabled(indio_dev))
-			ret = -EBUSY;
-		else {
-			ret = bmg160_set_power_state(data, true);
-			if (ret < 0) {
-				mutex_unlock(&data->mutex);
-				return ret;
-			}
-			ret = i2c_smbus_read_word_data(data->client,
-						       BMG160_AXIS_TO_REG(
-						       chan->scan_index));
-			if (ret < 0) {
-				bmg160_set_power_state(data, false);
-				mutex_unlock(&data->mutex);
-				return ret;
-			}
-			*val = sign_extend32(ret, 15);
-			ret = bmg160_set_power_state(data, false);
+		switch (chan->type) {
+		case IIO_TEMP:
+			return bmg160_get_temp(data, val);
+		case IIO_ANGL_VEL:
+			if (iio_buffer_enabled(indio_dev))
+				return -EBUSY;
+			else
+				return bmg160_get_axis(data, chan->scan_index,
+						       val);
+		default:
+			return -EINVAL;
 		}
-		mutex_unlock(&data->mutex);
-
-		if (ret < 0)
-			return ret;
-
-		return IIO_VAL_INT;
+	case IIO_CHAN_INFO_OFFSET:
+		if (chan->type == IIO_TEMP) {
+			*val = BMG160_TEMP_CENTER_VAL;
+			return IIO_VAL_INT;
+		} else
+			return -EINVAL;
 	case IIO_CHAN_INFO_SCALE:
 		*val = 0;
-		switch (data->dps_range) {
-		case BMG160_RANGE_2000DPS:
-			*val2 = 1065;
-			break;
-		case BMG160_RANGE_1000DPS:
-			*val2 = 532;
-			break;
-		case BMG160_RANGE_500DPS:
-			*val2 = 266;
-			break;
-		case BMG160_RANGE_250DPS:
-			*val2 = 133;
-			break;
-		case BMG160_RANGE_125DPS:
-			*val2 = 66;
-			break;
+		switch (chan->type) {
+		case IIO_TEMP:
+			*val2 = 500000;
+			return IIO_VAL_INT_PLUS_MICRO;
+		case IIO_ANGL_VEL:
+		{
+			int i;
+
+			for (i = 0; i < ARRAY_SIZE(bmg160_scale_table); ++i) {
+				if (bmg160_scale_table[i].dps_range ==
+							data->dps_range) {
+					*val2 = bmg160_scale_table[i].scale;
+					return IIO_VAL_INT_PLUS_MICRO;
+				}
+			}
+			return -EINVAL;
+		}
 		default:
 			return -EINVAL;
 		}
-		return IIO_VAL_INT_PLUS_MICRO;
 	case IIO_CHAN_INFO_SAMP_FREQ:
 		*val2 = 0;
 		mutex_lock(&data->mutex);
 		ret = bmg160_get_bw(data, val);
-		if (ret == IIO_VAL_INT)
-			*val /= BMG160_ANY_DUR_MIN_SAMPLE;
 		mutex_unlock(&data->mutex);
 		return ret;
 	default:
@@ -452,29 +580,60 @@ static int bmg160_write_raw(struct iio_dev *indio_dev,
 	switch (mask) {
 	case IIO_CHAN_INFO_SAMP_FREQ:
 		mutex_lock(&data->mutex);
-		ret = bmg160_set_bw(data, val * BMG160_ANY_DUR_MIN_SAMPLE);
+		/*
+		 * Section 4.2 of spec
+		 * In suspend mode, the only supported operations are reading
+		 * registers as well as writing to the (0x14) softreset
+		 * register. Since we will be in suspend mode by default, change
+		 * mode to power on for other writes.
+		 */
+		ret = bmg160_set_power_state(data, true);
+		if (ret < 0) {
+			mutex_unlock(&data->mutex);
+			return ret;
+		}
+		ret = bmg160_set_bw(data, val);
+		if (ret < 0) {
+			bmg160_set_power_state(data, false);
+			mutex_unlock(&data->mutex);
+			return ret;
+		}
+		ret = bmg160_set_power_state(data, false);
 		mutex_unlock(&data->mutex);
-		break;
+		return ret;
 	case IIO_CHAN_INFO_SCALE:
 		if (val)
 			return -EINVAL;
+
 		mutex_lock(&data->mutex);
+		/* Refer to comments above for the suspend mode ops */
+		ret = bmg160_set_power_state(data, true);
+		if (ret < 0) {
+			mutex_unlock(&data->mutex);
+			return ret;
+		}
 		ret = bmg160_set_scale(data, val2);
+		if (ret < 0) {
+			bmg160_set_power_state(data, false);
+			mutex_unlock(&data->mutex);
+			return ret;
+		}
+		ret = bmg160_set_power_state(data, false);
 		mutex_unlock(&data->mutex);
 		return ret;
 	default:
-		ret = -EINVAL;
+		return -EINVAL;
 	}
 
-	return ret;
+	return -EINVAL;
 }
 
 static int bmg160_read_event(struct iio_dev *indio_dev,
-				   const struct iio_chan_spec *chan,
-				   enum iio_event_type type,
-				   enum iio_event_direction dir,
-				   enum iio_event_info info,
-				   int *val, int *val2)
+			     const struct iio_chan_spec *chan,
+			     enum iio_event_type type,
+			     enum iio_event_direction dir,
+			     enum iio_event_info info,
+			     int *val, int *val2)
 {
 	struct bmg160_data *data = iio_priv(indio_dev);
 
@@ -491,16 +650,18 @@ static int bmg160_read_event(struct iio_dev *indio_dev,
 }
 
 static int bmg160_write_event(struct iio_dev *indio_dev,
-				    const struct iio_chan_spec *chan,
-				    enum iio_event_type type,
-				    enum iio_event_direction dir,
-				    enum iio_event_info info,
-				    int val, int val2)
+			      const struct iio_chan_spec *chan,
+			      enum iio_event_type type,
+			      enum iio_event_direction dir,
+			      enum iio_event_info info,
+			      int val, int val2)
 {
 	struct bmg160_data *data = iio_priv(indio_dev);
 
 	switch (info) {
 	case IIO_EV_INFO_VALUE:
+		if (data->ev_enable_state)
+			return -EBUSY;
 		data->slope_thres &= ~BMG160_SLOPE_THRES_MASK;
 		data->slope_thres |= (val & BMG160_SLOPE_THRES_MASK);
 		break;
@@ -512,9 +673,9 @@ static int bmg160_write_event(struct iio_dev *indio_dev,
 }
 
 static int bmg160_read_event_config(struct iio_dev *indio_dev,
-				       const struct iio_chan_spec *chan,
-				       enum iio_event_type type,
-				       enum iio_event_direction dir)
+				    const struct iio_chan_spec *chan,
+				    enum iio_event_type type,
+				    enum iio_event_direction dir)
 {
 
 	struct bmg160_data *data = iio_priv(indio_dev);
@@ -523,51 +684,66 @@ static int bmg160_read_event_config(struct iio_dev *indio_dev,
 }
 
 static int bmg160_write_event_config(struct iio_dev *indio_dev,
-					const struct iio_chan_spec *chan,
-					enum iio_event_type type,
-					enum iio_event_direction dir,
-					int state)
+				     const struct iio_chan_spec *chan,
+				     enum iio_event_type type,
+				     enum iio_event_direction dir,
+				     int state)
 {
 	struct bmg160_data *data = iio_priv(indio_dev);
 	int ret;
 
-	if (data->trigger_on)
-		return -EAGAIN;
-
 	if (state && data->ev_enable_state)
 		return 0;
 
 	mutex_lock(&data->mutex);
-	ret = bmg160_chip_setup_interrupt(data, state);
-	if (!ret) {
-		ret = bmg160_set_power_state(data, state);
-		if (ret < 0) {
-			mutex_unlock(&data->mutex);
-			return ret;
-		}
+
+	if (!state && data->motion_trigger_on) {
+		data->ev_enable_state = 0;
+		mutex_unlock(&data->mutex);
+		return 0;
+	}
+	/*
+	 * We will expect the enable and disable to do operation in
+	 * in reverse order. This will happen here anyway as our
+	 * resume operation uses sync mode runtime pm calls, the
+	 * suspend operation will be delayed by autosuspend delay
+	 * So the disable operation will still happen in reverse of
+	 * enable operation. When runtime pm is disabled the mode
+	 * is always on so sequence doesn't matter
+	 */
+	ret = bmg160_set_power_state(data, state);
+	if (ret < 0) {
+		mutex_unlock(&data->mutex);
+		return ret;
+	}
+
+	ret =  bmg160_setup_any_motion_interrupt(data, state);
+	if (ret < 0) {
+		mutex_unlock(&data->mutex);
+		return ret;
 	}
+
 	data->ev_enable_state = state;
 	mutex_unlock(&data->mutex);
 
 	return 0;
 }
 
-static int bmc150_validate_trigger(struct iio_dev *indio_dev,
+static int bmg160_validate_trigger(struct iio_dev *indio_dev,
 				   struct iio_trigger *trig)
 {
 	struct bmg160_data *data = iio_priv(indio_dev);
 
-	if (data->trig != trig)
+	if (data->dready_trig != trig && data->motion_trig != trig)
 		return -EINVAL;
 
 	return 0;
 }
 
-static IIO_CONST_ATTR_SAMP_FREQ_AVAIL(
-		"25.0 50.0 100.0 250.0 500.0");
+static IIO_CONST_ATTR_SAMP_FREQ_AVAIL("100 200 400 1000 2000");
 
 static IIO_CONST_ATTR(in_anglvel_scale_available,
-		      "0.001065 0.000532 0.000133 0.000066");
+		      "0.001065 0.000532 0.000266 0.000133 0.000066");
 
 static struct attribute *bmg160_attributes[] = {
 	&iio_const_attr_sampling_frequency_available.dev_attr.attr,
@@ -581,9 +757,9 @@ static const struct attribute_group bmg160_attrs_group = {
 
 static const struct iio_event_spec bmg160_event = {
 		.type = IIO_EV_TYPE_ROC,
-		.dir = IIO_EV_DIR_EITHER,
+		.dir = IIO_EV_DIR_RISING | IIO_EV_DIR_FALLING,
 		.mask_shared_by_type = BIT(IIO_EV_INFO_VALUE) |
-					   BIT(IIO_EV_INFO_ENABLE)
+				       BIT(IIO_EV_INFO_ENABLE)
 };
 
 #define BMG160_CHANNEL(_axis) {					\
@@ -592,19 +768,25 @@ static const struct iio_event_spec bmg160_event = {
 	.channel2 = IIO_MOD_##_axis,					\
 	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),			\
 	.info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SCALE) |		\
-				BIT(IIO_CHAN_INFO_SAMP_FREQ),		\
+				    BIT(IIO_CHAN_INFO_SAMP_FREQ),	\
 	.scan_index = AXIS_##_axis,					\
 	.scan_type = {							\
 		.sign = 's',						\
-		.realbits = 16,						\
+		.realbits = 16,					\
 		.storagebits = 16,					\
-		.shift = 0,						\
 	},								\
 	.event_spec = &bmg160_event,					\
 	.num_event_specs = 1						\
 }
 
 static const struct iio_chan_spec bmg160_channels[] = {
+	{
+		.type = IIO_TEMP,
+		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
+				      BIT(IIO_CHAN_INFO_SCALE) |
+				      BIT(IIO_CHAN_INFO_OFFSET),
+		.scan_index = -1,
+	},
 	BMG160_CHANNEL(X),
 	BMG160_CHANNEL(Y),
 	BMG160_CHANNEL(Z),
@@ -619,7 +801,7 @@ static const struct iio_info bmg160_info = {
 	.write_event_value	= bmg160_write_event,
 	.write_event_config	= bmg160_write_event_config,
 	.read_event_config	= bmg160_read_event_config,
-	.validate_trigger	= bmc150_validate_trigger,
+	.validate_trigger	= bmg160_validate_trigger,
 	.driver_module		= THIS_MODULE,
 };
 
@@ -634,7 +816,7 @@ static irqreturn_t bmg160_trigger_handler(int irq, void *p)
 	for_each_set_bit(bit, indio_dev->buffer->scan_mask,
 			 indio_dev->masklength) {
 		ret = i2c_smbus_read_word_data(data->client,
-						BMG160_AXIS_TO_REG(bit));
+					       BMG160_AXIS_TO_REG(bit));
 		if (ret < 0) {
 			mutex_unlock(&data->mutex);
 			goto err;
@@ -644,7 +826,7 @@ static irqreturn_t bmg160_trigger_handler(int irq, void *p)
 	mutex_unlock(&data->mutex);
 
 	iio_push_to_buffers_with_timestamp(indio_dev, data->buffer,
-					   pf->timestamp);
+					   data->timestamp);
 err:
 	iio_trigger_notify_done(indio_dev->trig);
 
@@ -657,6 +839,10 @@ static int bmg160_trig_try_reen(struct iio_trigger *trig)
 	struct bmg160_data *data = iio_priv(indio_dev);
 	int ret;
 
+	/* new data interrupts don't need ack */
+	if (data->dready_trigger_on)
+		return 0;
+
 	/* Set latched mode interrupt and clear any latched interrupt */
 	ret = i2c_smbus_write_byte_data(data->client,
 					BMG160_REG_INT_RST_LATCH,
@@ -677,22 +863,36 @@ static int bmg160_data_rdy_trigger_set_state(struct iio_trigger *trig,
 	struct bmg160_data *data = iio_priv(indio_dev);
 	int ret;
 
-	if (data->ev_enable_state)
-		return -EAGAIN;
+	mutex_lock(&data->mutex);
 
-	if (state && data->trigger_on)
+	if (!state && data->ev_enable_state && data->motion_trigger_on) {
+		data->motion_trigger_on = false;
+		mutex_unlock(&data->mutex);
 		return 0;
+	}
 
-	mutex_lock(&data->mutex);
-	ret = bmg160_chip_setup_interrupt(data, state);
-	if (!ret) {
-		ret = bmg160_set_power_state(data, state);
-		if (ret < 0) {
-			mutex_unlock(&data->mutex);
-			return ret;
-		}
+	/*
+	 * Refer to comment in bmg160_write_event_config for
+	 * enable/disable operation order
+	 */
+	ret = bmg160_set_power_state(data, state);
+	if (ret < 0) {
+		mutex_unlock(&data->mutex);
+		return ret;
+	}
+	if (data->motion_trig == trig)
+		ret =  bmg160_setup_any_motion_interrupt(data, state);
+	else
+		ret = bmg160_setup_new_data_interrupt(data, state);
+	if (ret < 0) {
+		mutex_unlock(&data->mutex);
+		return ret;
 	}
-	data->trigger_on = state;
+	if (data->motion_trig == trig)
+		data->motion_trigger_on = state;
+	else
+		data->dready_trigger_on = state;
+
 	mutex_unlock(&data->mutex);
 
 	return 0;
@@ -709,20 +909,37 @@ static irqreturn_t bmg160_event_handler(int irq, void *private)
 	struct iio_dev *indio_dev = private;
 	struct bmg160_data *data = iio_priv(indio_dev);
 	int ret;
+	int dir;
 
-	iio_push_event(indio_dev, IIO_MOD_EVENT_CODE(IIO_ANGL_VEL,
-						     0,
-						     IIO_MOD_X_OR_Y_OR_Z,
-						     IIO_EV_TYPE_ROC,
-						     IIO_EV_DIR_EITHER),
-						     iio_get_time_ns());
+	ret = i2c_smbus_read_byte_data(data->client, BMG160_REG_INT_STATUS_2);
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Error reading reg_int_status2\n");
+		goto ack_intr_status;
+	}
 
-	ret = i2c_smbus_write_byte_data(data->client,
+	if (ret & 0x08)
+		dir = IIO_EV_DIR_RISING;
+	else
+		dir = IIO_EV_DIR_FALLING;
+
+	if (ret & BMG160_ANY_MOTION_MASK)
+		iio_push_event(indio_dev, IIO_MOD_EVENT_CODE(IIO_ANGL_VEL,
+							0,
+							IIO_MOD_X_OR_Y_OR_Z,
+							IIO_EV_TYPE_ROC,
+							dir),
+							data->timestamp);
+
+ack_intr_status:
+	if (!data->dready_trigger_on) {
+		ret = i2c_smbus_write_byte_data(data->client,
 					BMG160_REG_INT_RST_LATCH,
 					BMG160_INT_MODE_LATCH_INT |
 					BMG160_INT_MODE_LATCH_RESET);
-	if (ret < 0)
-		dev_err(&data->client->dev, "Error writing reg_rst_latch\n");
+		if (ret < 0)
+			dev_err(&data->client->dev,
+				"Error writing reg_rst_latch\n");
+	}
 
 	return IRQ_HANDLED;
 }
@@ -732,11 +949,18 @@ static irqreturn_t bmg160_data_rdy_trig_poll(int irq, void *private)
 	struct iio_dev *indio_dev = private;
 	struct bmg160_data *data = iio_priv(indio_dev);
 
-	if (data->trigger_on) {
-		iio_trigger_poll(data->trig, 0);
-		return IRQ_HANDLED;
-	} else
+	data->timestamp = iio_get_time_ns();
+
+	if (data->dready_trigger_on)
+		iio_trigger_poll(data->dready_trig, 0);
+	else if (data->motion_trigger_on)
+		iio_trigger_poll(data->motion_trig, 0);
+
+	if (data->ev_enable_state)
 		return IRQ_WAKE_THREAD;
+	else
+		return IRQ_HANDLED;
+
 }
 
 static int bmg160_acpi_gpio_probe(struct i2c_client *client,
@@ -781,7 +1005,6 @@ static int bmg160_probe(struct i2c_client *client,
 {
 	struct bmg160_data *data;
 	struct iio_dev *indio_dev;
-	struct iio_trigger *trig = NULL;
 	int ret;
 
 	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*data));
@@ -809,32 +1032,48 @@ static int bmg160_probe(struct i2c_client *client,
 		client->irq = bmg160_acpi_gpio_probe(client, data);
 
 	if (client->irq > 0) {
-		ret = devm_request_threaded_irq(
-					&client->dev, client->irq,
-					bmg160_data_rdy_trig_poll,
-					bmg160_event_handler,
-					IRQF_TRIGGER_RISING,
-					BMG160_IRQ_NAME,
-					indio_dev);
+		ret = devm_request_threaded_irq(&client->dev,
+						client->irq,
+						bmg160_data_rdy_trig_poll,
+						bmg160_event_handler,
+						IRQF_TRIGGER_RISING,
+						BMG160_IRQ_NAME,
+						indio_dev);
 		if (ret)
 			return ret;
 
-		trig = iio_trigger_alloc("%s-dev%d", indio_dev->name,
-					 indio_dev->id);
-		if (!trig)
+		data->dready_trig = devm_iio_trigger_alloc(&client->dev,
+							   "%s-dev%d",
+							   indio_dev->name,
+							   indio_dev->id);
+		if (!data->dready_trig)
 			return -ENOMEM;
 
-		trig->dev.parent = &client->dev;
-		trig->ops = &bmg160_trigger_ops;
-		iio_trigger_set_drvdata(trig, indio_dev);
-		data->trig = trig;
+		data->motion_trig = devm_iio_trigger_alloc(&client->dev,
+							  "%s-any-motion-dev%d",
+							  indio_dev->name,
+							  indio_dev->id);
+		if (!data->motion_trig)
+			return -ENOMEM;
 
-		ret = iio_trigger_register(trig);
+		data->dready_trig->dev.parent = &client->dev;
+		data->dready_trig->ops = &bmg160_trigger_ops;
+		iio_trigger_set_drvdata(data->dready_trig, indio_dev);
+		ret = iio_trigger_register(data->dready_trig);
 		if (ret)
-			goto err_trigger_free;
+			return ret;
+
+		data->motion_trig->dev.parent = &client->dev;
+		data->motion_trig->ops = &bmg160_trigger_ops;
+		iio_trigger_set_drvdata(data->motion_trig, indio_dev);
+		ret = iio_trigger_register(data->motion_trig);
+		if (ret) {
+			data->motion_trig = NULL;
+			goto err_trigger_unregister;
+		}
 
 		ret = iio_triggered_buffer_setup(indio_dev,
-						 &iio_pollfunc_store_time,
+						 NULL,
 						 bmg160_trigger_handler,
 						 NULL);
 		if (ret < 0) {
@@ -849,25 +1088,28 @@ static int bmg160_probe(struct i2c_client *client,
 		dev_err(&client->dev, "unable to register iio device\n");
 		goto err_buffer_cleanup;
 	}
+
 	ret = pm_runtime_set_active(&client->dev);
 	if (ret)
 		goto err_iio_unregister;
 
 	pm_runtime_enable(&client->dev);
+	pm_runtime_set_autosuspend_delay(&client->dev,
+					 BMG160_AUTO_SUSPEND_DELAY_MS);
+	pm_runtime_use_autosuspend(&client->dev);
 
 	return 0;
 
 err_iio_unregister:
 	iio_device_unregister(indio_dev);
 err_buffer_cleanup:
-	if (data->trig)
+	if (data->dready_trig)
 		iio_triggered_buffer_cleanup(indio_dev);
 err_trigger_unregister:
-	if (data->trig)
-		iio_trigger_unregister(trig);
-err_trigger_free:
-	if (data->trig)
-		iio_trigger_free(trig);
+	if (data->dready_trig)
+		iio_trigger_unregister(data->dready_trig);
+	if (data->motion_trig)
+		iio_trigger_unregister(data->motion_trig);
 
 	return ret;
 }
@@ -883,10 +1125,10 @@ static int bmg160_remove(struct i2c_client *client)
 
 	iio_device_unregister(indio_dev);
 
-	if (data->trig) {
+	if (data->dready_trig) {
 		iio_triggered_buffer_cleanup(indio_dev);
-		iio_trigger_unregister(data->trig);
-		iio_trigger_free(data->trig);
+		iio_trigger_unregister(data->dready_trig);
+		iio_trigger_unregister(data->motion_trig);
 	}
 
 	mutex_lock(&data->mutex);
@@ -915,7 +1157,8 @@ static int bmg160_resume(struct device *dev)
 	struct bmg160_data *data = iio_priv(indio_dev);
 
 	mutex_lock(&data->mutex);
-	if (data->trigger_on || data->ev_enable_state)
+	if (data->dready_trigger_on || data->motion_trigger_on ||
+							data->ev_enable_state)
 		bmg160_set_mode(data, BMG160_MODE_NORMAL);
 	mutex_unlock(&data->mutex);
 
-- 
1.9.1

