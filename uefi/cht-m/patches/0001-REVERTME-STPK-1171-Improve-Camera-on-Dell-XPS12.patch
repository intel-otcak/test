From b2edc78071d4f8b986e8a698554e484bf2102d93 Mon Sep 17 00:00:00 2001
From: Mark Ryan <mark.d.ryan@intel.com>
Date: Tue, 25 Mar 2014 11:22:28 +0100
Subject: [PATCH] REVERTME: STPK-1171 Improve Camera on Dell XPS12

This commit makes the camera on the Dell XPS12 semi-functional.  It
does this by modifying the kernel uvc driver to understand the
payloads that are received from the Dell XPS 12 camera.  Note that this
is not a perfect fix and there is still some image corruption, although
much less than before.  The issue is either caused by a problem with
the camera itself or some problems with the lower levels of the USB
stack.  If we identify the correct fix we will revert this change.

Finally, this change has been implemented as a quirk which means
that it should only effect the Dell XPS12 camera.  All other cameras
should follow the old code path.

Issue: STPK-1171
Change-Id: If8d58750fad303f3c18b3933eece9b4d1a91de4a
Signed-off-by: Mark Ryan <mark.d.ryan@intel.com>
---
 drivers/media/usb/uvc/uvc_driver.c |  8 +++++++
 drivers/media/usb/uvc/uvc_video.c  | 46 +++++++++++++++++++++++++++++++-------
 drivers/media/usb/uvc/uvcvideo.h   |  1 +
 3 files changed, 47 insertions(+), 8 deletions(-)

diff --git a/drivers/media/usb/uvc/uvc_driver.c b/drivers/media/usb/uvc/uvc_driver.c
index c3bb250..62b0d3a 100644
--- a/drivers/media/usb/uvc/uvc_driver.c
+++ b/drivers/media/usb/uvc/uvc_driver.c
@@ -2467,6 +2467,14 @@ static struct usb_device_id uvc_ids[] = {
 	  .bInterfaceProtocol	= 0,
 	  .driver_info		= UVC_QUIRK_PROBE_MINMAX
 				| UVC_QUIRK_IGNORE_SELECTOR_UNIT },
+	{ .match_flags		= USB_DEVICE_ID_MATCH_DEVICE
+				| USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor		= 0x0bda,
+	  .idProduct		= 0x5602,
+	  .bInterfaceClass	= USB_CLASS_VIDEO,
+	  .bInterfaceSubClass	= 1,
+	  .bInterfaceProtocol	= 0,
+	  .driver_info		= UVC_QUIRK_ALT_JPEG_PAYLOAD },
 	/* Generic USB Video Class */
 	{ USB_INTERFACE_INFO(USB_CLASS_VIDEO, 1, 0) },
 	{}
diff --git a/drivers/media/usb/uvc/uvc_video.c b/drivers/media/usb/uvc/uvc_video.c
index 898c208..0c49ad8 100644
--- a/drivers/media/usb/uvc/uvc_video.c
+++ b/drivers/media/usb/uvc/uvc_video.c
@@ -1187,7 +1187,9 @@ static void uvc_video_decode_bulk(struct urb *urb, struct uvc_streaming *stream,
 	struct uvc_buffer *buf)
 {
 	u8 *mem;
+	u8 *payload_start;
 	int len, ret;
+	bool end_of_payload;
 
 	/*
 	 * Ignore ZLPs if they're not part of a frame, otherwise process them
@@ -1197,6 +1199,7 @@ static void uvc_video_decode_bulk(struct urb *urb, struct uvc_streaming *stream,
 		return;
 
 	mem = urb->transfer_buffer;
+	payload_start = mem;
 	len = urb->actual_length;
 	stream->bulk.payload_size += len;
 
@@ -1228,18 +1231,45 @@ static void uvc_video_decode_bulk(struct urb *urb, struct uvc_streaming *stream,
 	 * sure buf is never dereferenced if NULL.
 	 */
 
-	/* Process video data. */
-	if (!stream->bulk.skip_payload && buf != NULL)
-		uvc_video_decode_data(stream, buf, mem, len);
-
 	/* Detect the payload end by a URB smaller than the maximum size (or
 	 * a payload size equal to the maximum) and process the header again.
 	 */
-	if (urb->actual_length < urb->transfer_buffer_length ||
-	    stream->bulk.payload_size >= stream->bulk.max_payload_size) {
+
+	if ((stream->dev->quirks & UVC_QUIRK_ALT_JPEG_PAYLOAD) &&
+	    (stream->cur_format->type == UVC_VS_FORMAT_MJPEG)) {
+		end_of_payload = (urb->actual_length == 14) &&
+			(payload_start[0] == 12);
+		uvc_trace(UVC_TRACE_FRAME, "Using alt JPEG quirk. EOP = %d\n",
+			  end_of_payload);
+		if (end_of_payload) {
+			mem += payload_start[0];
+			len -= payload_start[0];
+		}
+	} else {
+		end_of_payload =
+			urb->actual_length < urb->transfer_buffer_length ||
+			stream->bulk.payload_size >=
+			stream->bulk.max_payload_size;
+	}
+
+	if (!stream->bulk.skip_payload && buf != NULL)
+		uvc_video_decode_data(stream, buf, mem, len);
+
+	if (end_of_payload) {
 		if (!stream->bulk.skip_payload && buf != NULL) {
-			uvc_video_decode_end(stream, buf, stream->bulk.header,
-				stream->bulk.payload_size);
+			if ((stream->dev->quirks &
+			     UVC_QUIRK_ALT_JPEG_PAYLOAD) &&
+			    (stream->cur_format->type == UVC_VS_FORMAT_MJPEG)) {
+				if (urb->actual_length > 1)
+					uvc_video_decode_end(
+						stream, buf,
+						payload_start,
+						urb->actual_length);
+			} else {
+				uvc_video_decode_end(stream, buf,
+						     stream->bulk.header,
+						     stream->bulk.payload_size);
+			}
 			if (buf->state == UVC_BUF_STATE_READY)
 				buf = uvc_queue_next_buffer(&stream->queue,
 							    buf);
diff --git a/drivers/media/usb/uvc/uvcvideo.h b/drivers/media/usb/uvc/uvcvideo.h
index 9e35982..17ac1cb 100644
--- a/drivers/media/usb/uvc/uvcvideo.h
+++ b/drivers/media/usb/uvc/uvcvideo.h
@@ -137,6 +137,7 @@
 #define UVC_QUIRK_FIX_BANDWIDTH		0x00000080
 #define UVC_QUIRK_PROBE_DEF		0x00000100
 #define UVC_QUIRK_RESTRICT_FRAME_RATE	0x00000200
+#define UVC_QUIRK_ALT_JPEG_PAYLOAD	0x00000400
 
 /* Format flags */
 #define UVC_FMT_FLAG_COMPRESSED		0x00000001
-- 
1.8.3.2

