From 96550763ab73791c40ad13f988809263f4cb8ed6 Mon Sep 17 00:00:00 2001
Message-Id: <96550763ab73791c40ad13f988809263f4cb8ed6.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Kausal Malladi <Kausal.Malladi@intel.com>
Date: Sat, 31 Jan 2015 15:58:34 +0530
Subject: [PATCH 68/95] MUST_REBASE [VPG]: video/adf: Color Manager IOCTL Reg

This patch makes the necessary changes for registering
Color Manager set and get IOCTLs.
Also adds Color Capabilities inside pipe and plane objects
to be registered by the Color Manager framework.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-4163
Change-Id: I990c8bda9cf774ce2a48590760306928ae5e25fe
Signed-off-by: Kausal Malladi <Kausal.Malladi@intel.com>
---
 drivers/video/adf/intel/core/vlv/vlv_pri_plane.c   |    3 +++
 drivers/video/adf/intel/core/vlv/vlv_sp_plane.c    |    3 +++
 .../video/adf/intel/include/core/intel_dc_config.h |    2 ++
 .../adf/intel/include/core/vlv/vlv_pri_plane.h     |    3 +++
 .../adf/intel/include/core/vlv/vlv_sp_plane.h      |    3 +++
 drivers/video/adf/intel/intel_adf_interface.c      |   13 +++++++++-
 drivers/video/adf/intel/intel_adf_overlay_engine.c |   27 +++++++++++++++++++-
 include/uapi/video/intel_adf.h                     |   20 +++++++++++++++
 8 files changed, 72 insertions(+), 2 deletions(-)

diff --git a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
index d24f920..f1af819 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
@@ -480,6 +480,9 @@ static struct intel_plane_ops vlv_pri_ops = {
 		.resume = vlv_pri_resume,
 	},
 	.adf_ops = {
+		.base = {
+			.ioctl = intel_overlay_engine_obj_ioctl,
+		},
 		.supported_formats = pri_supported_formats,
 		.n_supported_formats = ARRAY_SIZE(pri_supported_formats),
 	},
diff --git a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
index 1bddb94..2a6d4cd 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
@@ -668,6 +668,9 @@ static const struct intel_plane_ops vlv_sp_ops = {
 		.resume = vlv_sp_resume,
 	},
 	.adf_ops = {
+		.base = {
+			.ioctl = intel_overlay_engine_obj_ioctl,
+		},
 		.supported_formats = sprite_supported_formats,
 		.n_supported_formats = ARRAY_SIZE(sprite_supported_formats),
 	},
diff --git a/drivers/video/adf/intel/include/core/intel_dc_config.h b/drivers/video/adf/intel/include/core/intel_dc_config.h
index 66ac3e1..24c6f78 100644
--- a/drivers/video/adf/intel/include/core/intel_dc_config.h
+++ b/drivers/video/adf/intel/include/core/intel_dc_config.h
@@ -355,6 +355,7 @@ struct intel_plane {
 	const struct intel_plane_capabilities *caps;
 	const struct intel_plane_ops *ops;
 	struct intel_pipeline *pipeline;
+	struct color_capabilities *color_ctx;
 };
 
 enum intel_pipe_type {
@@ -487,6 +488,7 @@ struct intel_pipe {
 	 * one shot later in flip calls
 	 */
 	struct pri_plane_regs regs;
+	struct color_capabilities *color_ctx;
 };
 
 struct intel_dc_attachment {
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
index aeb404b..921cda8 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
@@ -70,4 +70,7 @@ extern unsigned long vlv_compute_page_offset(int *x, int *y,
 					unsigned int tiling_mode,
 					unsigned int cpp,
 					unsigned int pitch);
+
+extern long intel_overlay_engine_obj_ioctl(struct adf_obj *obj,
+		unsigned int cmd, unsigned long arg);
 #endif
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h b/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h
index cb7c0fd..e2038d9 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h
@@ -55,4 +55,7 @@ int vlv_sp_plane_init(struct vlv_sp_plane *splane,
 		struct intel_pipeline *pipeline, struct device *dev, u8 idx);
 void vlv_sp_plane_destroy(struct vlv_sp_plane *splane);
 
+extern long intel_overlay_engine_obj_ioctl(struct adf_obj *obj,
+		unsigned int cmd, unsigned long arg);
+
 #endif
diff --git a/drivers/video/adf/intel/intel_adf_interface.c b/drivers/video/adf/intel/intel_adf_interface.c
index 1a5c51a..0ed06c4 100644
--- a/drivers/video/adf/intel/intel_adf_interface.c
+++ b/drivers/video/adf/intel/intel_adf_interface.c
@@ -31,8 +31,19 @@ static long intel_interface_obj_ioctl(struct adf_obj *obj,
 			return -EINVAL;
 
 		return pipe->ops->dpst_context(pipe, arg);
+
+	case INTEL_ADF_COLOR_MANAGER_SET:
+		pr_info("ADF: Calling apply to set Color Property on the Interface");
+		/* Todo : Implement Logic for calling set IOCTL */
+		return 0;
+
+	case INTEL_ADF_COLOR_MANAGER_GET:
+		pr_info("ADF: Calling apply to get Color Property on the Interface");
+		/* Todo : Implement Logic for calling get IOCTL */
+		return 0;
+
 	default:
-		pr_debug("%s: Error: Invalid custom IOCTL\n", __func__);
+		pr_err("%s: ADF: Error: Invalid custom IOCTL\n", __func__);
 	}
 
 	return -EINVAL;
diff --git a/drivers/video/adf/intel/intel_adf_overlay_engine.c b/drivers/video/adf/intel/intel_adf_overlay_engine.c
index f1c90aa..96dffb5 100644
--- a/drivers/video/adf/intel/intel_adf_overlay_engine.c
+++ b/drivers/video/adf/intel/intel_adf_overlay_engine.c
@@ -14,6 +14,30 @@
 
 #include "intel_adf.h"
 
+/* Custom IOCTL */
+long intel_overlay_engine_obj_ioctl(struct adf_obj *obj,
+	unsigned int cmd, unsigned long arg)
+{
+	long err = 0;
+
+	switch (cmd) {
+	case INTEL_ADF_COLOR_MANAGER_SET:
+		pr_info("ADF: Calling apply to set Color Property on the Overlay Engine");
+		/* Todo : Implement Logic for calling set IOCTL */
+		break;
+
+	case INTEL_ADF_COLOR_MANAGER_GET:
+		pr_info("ADF: Calling get Color Property on the Overlay Engine");
+		/* Todo : Implement Logic for calling get IOCTL */
+		break;
+
+	default:
+		pr_err("%s: ADF: Error: Invalid custom IOCTL\n", __func__);
+	}
+
+	return err;
+}
+
 int intel_adf_overlay_engine_init(struct intel_adf_overlay_engine *eng,
 			struct intel_adf_device *dev,
 			struct intel_plane *plane)
@@ -28,7 +52,8 @@ int intel_adf_overlay_engine_init(struct intel_adf_overlay_engine *eng,
 	eng->plane = plane;
 
 	return adf_overlay_engine_init(&eng->base, &dev->base,
-		&plane->ops->adf_ops, "intel_ov_eng_%s", plane->base.name);
+		&plane->ops->adf_ops,
+			"intel_ov_eng_%s", plane->base.name);
 }
 
 void intel_adf_overlay_engine_destroy(
diff --git a/include/uapi/video/intel_adf.h b/include/uapi/video/intel_adf.h
index 9d6872c..61cedab 100644
--- a/include/uapi/video/intel_adf.h
+++ b/include/uapi/video/intel_adf.h
@@ -228,4 +228,24 @@ struct intel_adf_post_custom_data {
 	struct intel_adf_config configs[0];
 };
 
+/*
+ * Color manager custom command
+ * This is required to parse color properties
+ * More details in intel_color_manager.*
+ */
+struct __attribute__((packed, aligned(16))) color_cmd {
+	u8 property;
+	u8 action;
+	u16 size;
+	u64 data_ptr;
+};
+
+/* Color correction IOCTL */
+#define INTEL_ADF_COLOR_MANAGER_SET	\
+	_IOW(ADF_IOCTL_TYPE, ADF_IOCTL_NR_CUSTOM + 1, \
+		struct color_cmd)
+#define INTEL_ADF_COLOR_MANAGER_GET	\
+	_IOR(ADF_IOCTL_TYPE, ADF_IOCTL_NR_CUSTOM + 2, \
+		struct color_cmd)
+
 #endif /* _UAPI_VIDEO_INTEL_ADF_H_ */
-- 
1.7.9.5

