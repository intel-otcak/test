From 8a1d691be90e9e8539c83d2ca1117be83ff0863c Mon Sep 17 00:00:00 2001
From: Oshri Yahav <oshri.yahav@intel.com>
Date: Tue, 28 Apr 2015 16:05:51 +0200
Subject: [PATCH] [HSU] Generates uevent on suspend/resume stages

Some user space components as CG2000 GPS need events from
UART driver when this one suspends and resumes in order to
properly manage their runtime PM state machines.

Change-Id: Idac546905717f7f944bde01e09d55af93cf93b1f
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-36688
Signed-off-by: Oshri Yahav <oshri.yahav@intel.com>
Signed-off-by: Nicolas SUET <nicolas.suet@intel.com>
---
 drivers/tty/serial/hsu/hsu_core.c | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/drivers/tty/serial/hsu/hsu_core.c b/drivers/tty/serial/hsu/hsu_core.c
index 114d26c4310e..f8b4bd81995a 100644
--- a/drivers/tty/serial/hsu/hsu_core.c
+++ b/drivers/tty/serial/hsu/hsu_core.c
@@ -1540,6 +1540,7 @@ int serial_hsu_do_suspend(struct uart_hsu_port *up)
 	struct circ_buf *xmit = &up->port.state->xmit;
 	char cmd;
 	unsigned long flags;
+	char *hsu_rpm_uevent[4];
 
 	/* Should check the RX FIFO is not empty */
 	if (test_bit(flag_startup, &up->flags) && (up->hw_type == hsu_dw)
@@ -1594,6 +1595,18 @@ int serial_hsu_do_suspend(struct uart_hsu_port *up)
 	if (up->hw_type == hsu_dw)
 		enable_irq(up->port.irq);
 
+	hsu_rpm_uevent[0] = kasprintf(GFP_KERNEL, "MAJOR=%d",
+		serial_hsu_reg.major);
+	hsu_rpm_uevent[1] = kasprintf(GFP_KERNEL, "MINOR=%d",
+		(serial_hsu_reg.minor + up->port.line));
+	hsu_rpm_uevent[2] = kasprintf(GFP_KERNEL, "%s",
+		"UART_STATE=SUSPENDED");
+	hsu_rpm_uevent[3] = NULL;
+	kobject_uevent_env(&up->dev->kobj, KOBJ_CHANGE, hsu_rpm_uevent);
+	kfree(hsu_rpm_uevent[0]);
+	kfree(hsu_rpm_uevent[1]);
+	kfree(hsu_rpm_uevent[2]);
+
 	return 0;
 err:
 	if (cfg->hw_set_rts)
@@ -1616,6 +1629,7 @@ int serial_hsu_do_resume(struct uart_hsu_port *up)
 {
 	struct hsu_port_cfg *cfg = up->port_cfg;
 	unsigned long flags;
+	char *hsu_rpm_uevent[4];
 
 	if (!test_and_clear_bit(flag_suspend, &up->flags))
 		return 0;
@@ -1639,6 +1653,18 @@ int serial_hsu_do_resume(struct uart_hsu_port *up)
 	serial_sched_cmd(up, qcmd_get_msr);
 	spin_unlock_irqrestore(&up->port.lock, flags);
 	serial_sched_sync(up);
+
+	hsu_rpm_uevent[0] = kasprintf(GFP_KERNEL, "MAJOR=%d",
+		serial_hsu_reg.major);
+	hsu_rpm_uevent[1] = kasprintf(GFP_KERNEL, "MINOR=%d",
+		(serial_hsu_reg.minor + up->port.line));
+	hsu_rpm_uevent[2] = kasprintf(GFP_KERNEL, "%s",
+		"UART_STATE=RESUMED");
+	hsu_rpm_uevent[3] = NULL;
+	kobject_uevent_env(&up->dev->kobj, KOBJ_CHANGE, hsu_rpm_uevent);
+	kfree(hsu_rpm_uevent[0]);
+	kfree(hsu_rpm_uevent[1]);
+	kfree(hsu_rpm_uevent[2]);
 	return 0;
 }
 EXPORT_SYMBOL(serial_hsu_do_resume);
-- 
1.9.1

