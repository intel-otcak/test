From 4df57bc24b169ba90b302af133770c9bc655dc26 Mon Sep 17 00:00:00 2001
From: Zaikuo Wang <zaikuo.wang@intel.com>
Date: Wed, 22 Apr 2015 15:06:38 +0800
Subject: [PATCH 377/462] atomisp2: correct wdt_refresh flow in isr_thread

WDT count would more than 1 when dual camera run
originally, one WDT would not refresh when 2 stream Event issued together
so we should refresh WDT seperately to make sure that no false
isp timeout happen

Change-Id: Ia1a57414d8f6e9e181243ee5c45b6cd9811c5334
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-30168
Signed-off-by: Zaikuo Wang <zaikuo.wang@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/52536
Reviewed-by: Jian Xu Zheng <jian.xu.zheng@intel.com>
Reviewed-by: Tian Shu Qiu <tian.shu.qiu@intel.com>
Validation-Android: Wei Tao <wei.tao@intel.com>
Approver: Tian Shu Qiu <tian.shu.qiu@intel.com>
Integrator: WeiX Meng <weix.meng@intel.com>
Build: WeiX Meng <weix.meng@intel.com>
Reviewed-by: WeiX Meng <weix.meng@intel.com>
Maintainer: WeiX Meng <weix.meng@intel.com>
---
 .../atomisp2/atomisp_driver/atomisp_compat_css20.c | 33 +++++++++++-----------
 1 file changed, 17 insertions(+), 16 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
index 8080fb9..e431cfb 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
@@ -4558,7 +4558,7 @@ int atomisp_css_isr_thread(struct atomisp_device *isp,
 	enum atomisp_input_stream_id stream_id = 0;
 	struct atomisp_css_event current_event;
 	struct atomisp_sub_device *asd = &isp->asd[0];
-	bool reset_wdt_timer = false;
+	bool reset_wdt_timer[MAX_STREAM_NUM] = {false};
 	int i;
 
 	while (!atomisp_css_dequeue_event(&current_event)) {
@@ -4597,13 +4597,13 @@ int atomisp_css_isr_thread(struct atomisp_device *isp,
 			frame_done_found[asd->index] = true;
 			atomisp_buf_done(asd, 0, CSS_BUFFER_TYPE_OUTPUT_FRAME,
 					 current_event.pipe, true, stream_id);
-			reset_wdt_timer = true; /* ISP running */
+			reset_wdt_timer[asd->index] = true; /* ISP running */
 			break;
 		case CSS_EVENT_SEC_OUTPUT_FRAME_DONE:
 			frame_done_found[asd->index] = true;
 			atomisp_buf_done(asd, 0, CSS_BUFFER_TYPE_SEC_OUTPUT_FRAME,
 					 current_event.pipe, true, stream_id);
-			reset_wdt_timer = true; /* ISP running */
+			reset_wdt_timer[asd->index] = true; /* ISP running */
 			break;
 		case CSS_EVENT_3A_STATISTICS_DONE:
 			atomisp_buf_done(asd, 0,
@@ -4621,13 +4621,13 @@ int atomisp_css_isr_thread(struct atomisp_device *isp,
 			atomisp_buf_done(asd, 0,
 					 CSS_BUFFER_TYPE_VF_OUTPUT_FRAME,
 					 current_event.pipe, true, stream_id);
-			reset_wdt_timer = true; /* ISP running */
+			reset_wdt_timer[asd->index] = true; /* ISP running */
 			break;
 		case CSS_EVENT_SEC_VF_OUTPUT_FRAME_DONE:
 			atomisp_buf_done(asd, 0,
 					 CSS_BUFFER_TYPE_SEC_VF_OUTPUT_FRAME,
 					 current_event.pipe, true, stream_id);
-			reset_wdt_timer = true; /* ISP running */
+			reset_wdt_timer[asd->index] = true; /* ISP running */
 			break;
 		case CSS_EVENT_DIS_STATISTICS_DONE:
 			atomisp_buf_done(asd, 0,
@@ -4647,20 +4647,21 @@ int atomisp_css_isr_thread(struct atomisp_device *isp,
 			break;
 		}
 	}
-	/* There is some new FW event which is not with a valid pipeline,
-	 * in this case, driver should just skip it(not handle it) instead of
-	 * failing on it.
-	 */
-	if (!asd)
-		return 0;
 	/* If there are no buffers queued then
 	 * delete wdt timer. */
-	if (!atomisp_buffers_queued(asd))
-		atomisp_wdt_stop(asd, false);
-	else if (reset_wdt_timer)
+	for (i = 0; i < isp->num_of_streams; i++) {
+		asd = &isp->asd[i];
+		if (!asd)
+			continue;
+		if (asd->streaming != ATOMISP_DEVICE_STREAMING_ENABLED)
+			continue;
+		if (!atomisp_buffers_queued(asd))
+			atomisp_wdt_stop(asd, false);
+		else if (reset_wdt_timer[i])
 		/* SOF irq should not reset wdt timer. */
-		atomisp_wdt_refresh(asd,
-				ATOMISP_WDT_KEEP_CURRENT_DELAY);
+			atomisp_wdt_refresh(asd,
+					ATOMISP_WDT_KEEP_CURRENT_DELAY);
+	}
 
 	return 0;
 }
-- 
1.9.1

