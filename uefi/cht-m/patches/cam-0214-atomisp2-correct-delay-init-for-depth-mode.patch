From c83e886a82fe3695358f3fe7943a29f4feed3dcc Mon Sep 17 00:00:00 2001
From: Jianxu Zheng <jian.xu.zheng@intel.com>
Date: Fri, 9 Jan 2015 15:55:45 +0800
Subject: [PATCH 214/215] atomisp2: correct delay init for depth mode

The extra raw buffer allocation in delay_init workq is not started
correctly.

Because in depth mode, 2 sensors have to be started altogether.
So sensor start up is skipped when ov8858 is streamed on.

This delay_init workq is not introduced on Kevlar DDO branch before.
so no issue at that time.

Change-Id: Ifd943b1b894a1f767cde9eab0e90e58624ac1935
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-13683
Signed-off-by: Jianxu Zheng <jian.xu.zheng@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/35352
Reviewed-by: Jarno Jakonen <jarno.jakonen@intel.com>
Reviewed-by: Soren Friis <soren.friis@intel.com>
Approver: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
---
 .../drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c    | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index e3b61c9..acce26a 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -1827,7 +1827,7 @@ start_sensor:
 		goto out;
 	} else if (asd->depth_mode->val && (atomisp_streaming_count(isp) <
 		   ATOMISP_DEPTH_SENSOR_STREAMON_COUNT)) {
-		goto out;
+		goto start_delay_wq;
 	}
 
 	/* Enable the CSI interface on ANN B0/K0 */
@@ -1847,6 +1847,10 @@ start_sensor:
 		goto out;
 	}
 
+	if (atomisp_buffers_queued(asd))
+		atomisp_wdt_refresh(asd, wdt_duration);
+
+start_delay_wq:
 	if (asd->continuous_mode->val) {
 		struct v4l2_mbus_framefmt *sink;
 
@@ -1866,9 +1870,6 @@ start_sensor:
 	} else {
 		asd->delayed_init = ATOMISP_DELAYED_INIT_NOT_QUEUED;
 	}
-
-	if (atomisp_buffers_queued(asd))
-		atomisp_wdt_refresh(asd, wdt_duration);
 out:
 	rt_mutex_unlock(&isp->mutex);
 	return ret;
-- 
1.9.1

