From add9472b37c7313d2dc4900210356bd98f8a28a5 Mon Sep 17 00:00:00 2001
From: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
Date: Thu, 29 Oct 2015 22:10:57 +0530
Subject: [PATCH] FOR_UPSTREAM [VPG]: drm/i915: Send wms command for both the
 ports in case dual link

The WMS command has to be sent to both the ports if dual link,
otherwise framecounter will not increment the WMS command will not
be sent to panel.

Change-Id: I691e839fe92b386400b83f8bb7deeff584f95e3a
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-7482
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/intel_dsi.c     | 38 ++++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_dsi.h     |  4 ++++
 drivers/gpu/drm/i915/intel_dsi_cmd.c | 38 ++++++++++++++++++++++++++++++++----
 3 files changed, 76 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index 23d1d62..5b89681 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -443,6 +443,31 @@ static void intel_dsi_pre_enable(struct intel_encoder *encoder)
 	}
 
 
+	if ((intel_dsi->dual_link) && (intel_dsi->gem_obj_2 == NULL) &&
+						is_cmd_mode(intel_dsi)) {
+		intel_dsi->gem_obj_2 = i915_gem_alloc_object(dev, 4096);
+		if (intel_dsi->gem_obj_2 == NULL) {
+			DRM_ERROR("Failed to allocate seqno page\n");
+			return;
+		}
+
+		ret = i915_gem_object_set_cache_level(intel_dsi->gem_obj_2,
+							I915_CACHE_LLC);
+		if (ret)
+			goto err_unref_2;
+
+		ret = i915_gem_obj_ggtt_pin(intel_dsi->gem_obj_2, 4096, 0);
+		if (ret) {
+err_unref_2:
+			drm_gem_object_unreference(&intel_dsi->gem_obj_2->base);
+			return;
+		}
+
+		intel_dsi->cmd_buff_2 =
+				kmap(sg_page(intel_dsi->gem_obj_2->pages->sgl));
+		intel_dsi->cmd_buff_phy_addr_2 = page_to_phys(
+				sg_page(intel_dsi->gem_obj_2->pages->sgl));
+	}
 	/* Panel Enable */
 	if (intel_dsi->dev.dev_ops->power_on)
 		intel_dsi->dev.dev_ops->power_on(&intel_dsi->dev);
@@ -834,6 +859,15 @@ static void intel_dsi_post_disable(struct intel_encoder *encoder)
 		mutex_unlock(&dev->struct_mutex);
 		intel_dsi->cursor_obj = NULL;
 	}
+
+	if ((intel_dsi->dual_link) && (intel_dsi->gem_obj_2 != NULL)) {
+		kunmap(intel_dsi->cmd_buff_2);
+		i915_gem_object_ggtt_unpin(intel_dsi->gem_obj_2);
+		mutex_lock(&dev->struct_mutex);
+		drm_gem_object_unreference(&intel_dsi->gem_obj_2->base);
+		mutex_unlock(&dev->struct_mutex);
+		intel_dsi->gem_obj_2 = NULL;
+	}
 }
 
 static bool intel_dsi_get_hw_state(struct intel_encoder *encoder,
@@ -1476,6 +1510,10 @@ bool intel_dsi_init(struct drm_device *dev)
 	intel_dsi->cursor_obj = NULL;
 
 
+	intel_dsi->cmd_buff_2 = NULL;
+	intel_dsi->cmd_buff_phy_addr_2 = 0;
+	intel_dsi->gem_obj_2 = NULL;
+
 	intel_encoder->cloneable = 0;
 	drm_connector_init(dev, connector, &intel_dsi_connector_funcs,
 			   DRM_MODE_CONNECTOR_DSI);
diff --git a/drivers/gpu/drm/i915/intel_dsi.h b/drivers/gpu/drm/i915/intel_dsi.h
index e03c93e..1fd1ea4 100644
--- a/drivers/gpu/drm/i915/intel_dsi.h
+++ b/drivers/gpu/drm/i915/intel_dsi.h
@@ -526,6 +526,10 @@ struct intel_dsi {
 	void *cmd_buff;
 	dma_addr_t cmd_buff_phy_addr;
 
+	struct drm_i915_gem_object *gem_obj_2;
+	void *cmd_buff_2;
+	dma_addr_t cmd_buff_phy_addr_2;
+
 	struct drm_i915_gem_object *cursor_obj;
 	void *cursor_buff[4];
 };
diff --git a/drivers/gpu/drm/i915/intel_dsi_cmd.c b/drivers/gpu/drm/i915/intel_dsi_cmd.c
index 63d642b..a32c22d 100644
--- a/drivers/gpu/drm/i915/intel_dsi_cmd.c
+++ b/drivers/gpu/drm/i915/intel_dsi_cmd.c
@@ -419,28 +419,58 @@ int dsi_send_dcs_cmd(struct intel_dsi *intel_dsi, int channel,
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_crtc *intel_crtc = to_intel_crtc(encoder->crtc);
 	enum pipe pipe = intel_crtc->pipe;
-	u32 cmd_addr;
+	u32 cmd_addr, cmd_addr_2;
 
-	if (I915_READ(MIPI_COMMAND_ADDRESS(pipe)) & COMMAND_VALID)
-		return -EBUSY;
 
 	if ((I915_READ(PIPECONF(pipe)) & PIPECONF_MIPI_DSR_ENABLE) == 0)
 		return -EBUSY;
 
+	if (intel_dsi->dual_link)
+		pipe = PIPE_A;
+
+	if (I915_READ(MIPI_COMMAND_ADDRESS(pipe)) & COMMAND_VALID)
+		return -EBUSY;
+
 	if (intel_dsi->cmd_buff == NULL)
 		return -ENOMEM;
 
 	memcpy(intel_dsi->cmd_buff, data, len);
-
 	cmd_addr = intel_dsi->cmd_buff_phy_addr & COMMAND_MEM_ADDRESS_MASK;
 	cmd_addr |= COMMAND_VALID;
+	cmd_addr_2 = 0;
 
 	if (pipe_render)
 		cmd_addr |= MEMORY_WRITE_DATA_FROM_PIPE_RENDERING;
 
+	if (intel_dsi->dual_link) {
+		pipe = PIPE_B;
+
+		if (I915_READ(MIPI_COMMAND_ADDRESS(pipe)) & COMMAND_VALID)
+			return -EBUSY;
+
+		if (intel_dsi->cmd_buff_2 == NULL)
+			return -ENOMEM;
+
+		memcpy(intel_dsi->cmd_buff_2, data, len);
+		cmd_addr_2 = intel_dsi->cmd_buff_phy_addr_2 &
+						COMMAND_MEM_ADDRESS_MASK;
+		cmd_addr_2 |= COMMAND_VALID;
+
+		if (pipe_render)
+			cmd_addr_2 |= MEMORY_WRITE_DATA_FROM_PIPE_RENDERING;
+
+		pipe = PIPE_A;
+	}
+
 	I915_WRITE(MIPI_COMMAND_LENGTH(pipe), len);
 	I915_WRITE(MIPI_COMMAND_ADDRESS(pipe), cmd_addr);
 
+	if (intel_dsi->dual_link) {
+		pipe = PIPE_B;
+		I915_WRITE(MIPI_COMMAND_LENGTH(pipe), len);
+		I915_WRITE(MIPI_COMMAND_ADDRESS(pipe), cmd_addr_2);
+	}
+
 	return 0;
 }
 
-- 
1.9.1

