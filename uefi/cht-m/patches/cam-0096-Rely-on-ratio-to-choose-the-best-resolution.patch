From 906ebeab7217f0877578e2488b0751c4e1acd660 Mon Sep 17 00:00:00 2001
From: Sebastien Boeuf <sebastien.boeuf@intel.com>
Date: Mon, 15 Sep 2014 17:26:35 +0200
Subject: [PATCH 096/117] Rely on ratio to choose the best resolution

Back camera driver is relying on requested frame size
and ratio to determine the best resolution. Front camera
driver was only looking for a larger resolution than the
requested one but it didn't care about the ratio.

Re-using logic coming from OV5693 driver, MT9M114 driver
is now able to determine the right resolution to apply,
relying on requested frame size and and ratio.

Change-Id: I50f520a9a7e9b92e3affc68dc67870a46e692ed2
Signed-off-by: Sebastien Boeuf <sebastien.boeuf@intel.com>
---
 .../camera/drivers/media/i2c/mt9m114.c             | 81 +++++++++++++++++-----
 1 file changed, 65 insertions(+), 16 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
index 6ec477e..223650d 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/mt9m114.c
@@ -605,29 +605,78 @@ static int mt9m114_s_power(struct v4l2_subdev *sd, int power)
 	}
 }
 
-static int mt9m114_try_res(u32 *w, u32 *h)
+/*
+ * distance - calculate the distance
+ * @res: resolution
+ * @w: width
+ * @h: height
+ *
+ * Get the gap between resolution and w/h.
+ * res->width/height smaller than w/h wouldn't be considered.
+ * Returns the value of gap or -1 if fail.
+ */
+#define LARGEST_ALLOWED_RATIO_MISMATCH 800
+static int distance(struct mt9m114_res_struct *res, u32 w, u32 h)
+{
+	unsigned int w_ratio;
+	unsigned int h_ratio;
+	int match;
+
+	if (w == 0)
+		return -1;
+	w_ratio = ((res->width << 13) / w);
+
+	if (h == 0)
+		return -1;
+	h_ratio = ((res->height << 13) / h);
+	if (h_ratio == 0)
+		return -1;
+	match = abs(((w_ratio << 13) / h_ratio) - ((int)8192));
+
+	if ((w_ratio < (int)8192) || (h_ratio < (int)8192)  ||
+		(match > LARGEST_ALLOWED_RATIO_MISMATCH))
+		return -1;
+
+	return w_ratio + h_ratio;
+}
+
+/* Return the nearest higher resolution index */
+static int nearest_resolution_index(int w, int h)
 {
 	int i;
+	int idx = -1;
+	int dist;
+	int min_dist = INT_MAX;
+	struct mt9m114_res_struct *tmp_res = NULL;
 
-	/*
-	 * The mode list is in ascending order. We're done as soon as
-	 * we have found the first equal or bigger size.
-	 */
 	for (i = 0; i < N_RES; i++) {
-		if ((mt9m114_res[i].width >= *w) &&
-		    (mt9m114_res[i].height >= *h))
-			break;
+		tmp_res = &mt9m114_res[i];
+		dist = distance(tmp_res, w, h);
+		if (dist == -1)
+			continue;
+		if (dist < min_dist) {
+			min_dist = dist;
+			idx = i;
+		}
 	}
 
-	/*
-	 * If no mode was found, it means we can provide only a smaller size.
-	 * Returning the biggest one available in this case.
-	 */
-	if (i == N_RES)
-		i--;
+	return idx;
+}
 
-	*w = mt9m114_res[i].width;
-	*h = mt9m114_res[i].height;
+static int mt9m114_try_res(u32 *w, u32 *h)
+{
+	int idx;
+
+	idx = nearest_resolution_index(*w, *h);
+
+	if (idx == -1) {
+		/* return the largest resolution */
+		*w = mt9m114_res[N_RES-1].width;
+		*h = mt9m114_res[N_RES-1].height;
+	} else {
+		*w = mt9m114_res[idx].width;
+		*h = mt9m114_res[idx].height;
+	}
 
 	return 0;
 }
-- 
1.9.3

