From 14268f6030469cad066b2b83d4381a1e72c74ba8 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Wed, 27 Jan 2016 17:14:06 +0530
Subject: [PATCH 06/24] usb_pd: respond to vdm messages in UFP.

In UFP, device should respond to vendor defined messages
sent by DFP. VDM response should be based on typec platform
configuration data provided by dpm.

Change-Id: Ibb3c080ccd310cd55647d6bb7c84286fff76ca44
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-18527
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/462888
---
 drivers/usb/typec/pd/devpolicy_mgr.c      |  61 +++++++++-
 drivers/usb/typec/pd/devpolicy_mgr.h      |  46 ++++++-
 drivers/usb/typec/pd/message.h            |  21 +++-
 drivers/usb/typec/pd/policy_engine.c      |   5 +-
 drivers/usb/typec/pd/policy_engine.h      |   4 +-
 drivers/usb/typec/pd/vdm_process.c        | 192 ++++++++++++++++++++++++++----
 drivers/usb/typec/pd/vdm_process_helper.h |   1 -
 7 files changed, 296 insertions(+), 34 deletions(-)

diff --git a/drivers/usb/typec/pd/devpolicy_mgr.c b/drivers/usb/typec/pd/devpolicy_mgr.c
index 449f8a9..879344a 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.c
+++ b/drivers/usb/typec/pd/devpolicy_mgr.c
@@ -36,7 +36,7 @@
 #include "pd_policy.h"
 #include "protocol.h"
 
-static struct power_cap spcaps[] = {
+static struct power_cap default_snk_pwr_caps[] = {
 	{
 		.mv = VIN_5V,
 		.ma = ICHRG_3A,
@@ -49,6 +49,14 @@ static struct power_cap spcaps[] = {
 	},
 };
 
+static struct power_cap default_src_pwr_caps[] = {
+	{
+		.mv = VIN_5V,
+		.ma = IBUS_0P9A,
+		.psy_type = DPM_PSY_TYPE_FIXED,
+	},
+};
+
 ATOMIC_NOTIFIER_HEAD(devpolicy_mgr_notifier);
 EXPORT_SYMBOL_GPL(devpolicy_mgr_notifier);
 
@@ -227,11 +235,11 @@ static int dpm_get_sink_power_caps(struct devpolicy_mgr *dpm,
 					struct power_caps *caps)
 {
 
-	if (spcaps == NULL)
+	if (default_snk_pwr_caps == NULL)
 		return -ENODATA;
 
-	caps->pcap = spcaps;
-	caps->n_cap = ARRAY_SIZE(spcaps);
+	caps->pcap = default_snk_pwr_caps;
+	caps->n_cap = ARRAY_SIZE(default_snk_pwr_caps);
 	return 0;
 }
 
@@ -1255,6 +1263,50 @@ static void dpm_clear_notify_list(struct devpolicy_mgr *dpm)
 	mutex_unlock(&dpm->cable_notify_lock);
 }
 
+static void dpm_load_default_pd_config(struct devpolicy_mgr *dpm)
+{
+	struct pd_platfrom_config *conf = &dpm->plat_conf;
+
+	conf->num_snk_pwr_caps = ARRAY_SIZE(default_snk_pwr_caps);
+	if (conf->num_snk_pwr_caps > MAX_SNK_PWR_CAPS)
+		conf->num_snk_pwr_caps = MAX_SNK_PWR_CAPS;
+	memcpy(conf->src_pwr_caps, default_snk_pwr_caps,
+		(sizeof(struct power_cap)) * conf->num_snk_pwr_caps);
+
+	conf->num_src_pwr_caps = ARRAY_SIZE(default_src_pwr_caps);
+	if (conf->num_src_pwr_caps > MAX_SRC_PWR_CAPS)
+		conf->num_src_pwr_caps = MAX_SRC_PWR_CAPS;
+	memcpy(conf->snk_pwr_caps, default_src_pwr_caps,
+		(sizeof(struct power_cap)) * conf->num_src_pwr_caps);
+
+	conf->usb_dev_supp = 1;
+	conf->usb_host_supp = 1;
+	conf->dfp_modal_op_supp = 1;
+	conf->ufp_modal_op_supp = 0;
+	conf->vconn_req = 0;
+	conf->vbus_req = 1;
+	conf->usb_suspend_supp = 1;
+	conf->dual_data_role = 1;
+	conf->dual_pwr_role = 1;
+	conf->ext_pwrd = 0;
+	conf->psy_type = DPM_PSY_TYPE_FIXED;
+	conf->product_type = PRODUCT_TYPE_PERIPHERAL;
+	conf->vendor_id = 0x8086; /* Intel VID */
+	conf->usb_product_id = 0x1234;
+	conf->usb_bcd_device_id = 0x0010;
+	conf->test_id = 0x0;
+	conf->hw_ver = 0;
+	conf->fw_ver = 0;
+	conf->vconn_pwr_req = 0;
+	conf->usb_ss_signaling = USB_SS_USB_3P1_GEN1;
+}
+
+static void dpm_init_pd_platform_config(struct devpolicy_mgr *dpm)
+{
+	/* TODO: Get platform configuration from acpi */
+	dpm_load_default_pd_config(dpm);
+}
+
 static struct dpm_interface interface = {
 	.get_max_srcpwr_cap = dpm_get_max_srcpwr_cap,
 	.get_max_snkpwr_cap = dpm_get_max_snkpwr_cap,
@@ -1303,6 +1355,7 @@ struct devpolicy_mgr *dpm_register_syspolicy(struct typec_phy *phy,
 	INIT_WORK(&dpm->cable_notify_work, dpm_notify_cable_state_worker);
 	mutex_init(&dpm->cable_notify_lock);
 	INIT_LIST_HEAD(&dpm->cable_notify_list);
+	dpm_init_pd_platform_config(dpm);
 
 	/* register for extcon notifier */
 	dpm->consumer_nb.notifier_call = dpm_consumer_cable_event;
diff --git a/drivers/usb/typec/pd/devpolicy_mgr.h b/drivers/usb/typec/pd/devpolicy_mgr.h
index befccad1..cce0f8e 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.h
+++ b/drivers/usb/typec/pd/devpolicy_mgr.h
@@ -84,8 +84,23 @@ enum batt_soc_status {
 #define ICHRG_P5A	500
 
 #define DPM_PSY_TYPE_FIXED	0
-#define DPM_PSY_TYPE_VARIABLE	2
 #define DPM_PSY_TYPE_BATTERY	1
+#define DPM_PSY_TYPE_VARIABLE	2
+
+#define PRODUCT_TYPE_UNDEFINED		0
+#define PRODUCT_TYPE_HUB		1
+#define PRODUCT_TYPE_PERIPHERAL		2
+#define PRODUCT_TYPE_PASSIVE_CABLE	3
+#define PRODUCT_TYPE_ACTIVE_CABLE	4
+#define PRODUCT_TYPE_AMA		5 /* alternate mode adapter */
+
+#define USB_SS_USB_2P0_ONLY		0
+#define USB_SS_USB_3P1_GEN1		1
+#define USB_SS_USB_3P1_GEN1_GEN2	2
+#define USB_SS_USB_2P0_BILLBOARD	3
+
+#define MAX_SRC_PWR_CAPS	7
+#define MAX_SNK_PWR_CAPS	7
 
 enum devpolicy_mgr_events {
 	DEVMGR_EVENT_NONE,
@@ -157,6 +172,34 @@ struct pd_policy {
 	size_t num_policies;
 };
 
+struct pd_platfrom_config {
+	u16 num_src_pwr_caps;
+	u16 num_snk_pwr_caps;
+	struct power_cap src_pwr_caps[MAX_SRC_PWR_CAPS];
+	struct power_cap snk_pwr_caps[MAX_SNK_PWR_CAPS];
+	u32 usb_dev_supp:1;
+	u32 usb_host_supp:1;
+	u32 dfp_modal_op_supp:1;
+	u32 ufp_modal_op_supp:1;
+	u32 vconn_req:1;
+	u32 vbus_req:1;
+	u32 usb_suspend_supp:1;
+	u32 dual_data_role:1;
+	u32 dual_pwr_role:1;
+	u32 ext_pwrd:1;
+	/* power supply type */
+	unsigned short psy_type;
+	unsigned short product_type;
+	u16 vendor_id;
+	u16 usb_product_id;
+	u16 usb_bcd_device_id;
+	u32 test_id;
+	unsigned short hw_ver;
+	unsigned short fw_ver;
+	unsigned short vconn_pwr_req;
+	unsigned short usb_ss_signaling;
+};
+
 struct devpolicy_mgr {
 	struct pd_policy *policy;
 	struct extcon_specific_cable_nb provider_cable_nb;
@@ -169,6 +212,7 @@ struct devpolicy_mgr {
 	struct mutex role_lock;
 	struct mutex charger_lock;
 	struct dpm_interface *interface;
+	struct pd_platfrom_config  plat_conf;
 	spinlock_t cable_event_queue_lock;
 	enum cable_state consumer_state;    /* cosumer cable state */
 	enum cable_state provider_state;    /* provider cable state */
diff --git a/drivers/usb/typec/pd/message.h b/drivers/usb/typec/pd/message.h
index 7012855..06b58d8 100644
--- a/drivers/usb/typec/pd/message.h
+++ b/drivers/usb/typec/pd/message.h
@@ -141,7 +141,7 @@ struct vdm_header {
 	u16 svid;
 } __packed;
 
-struct id_header {
+struct id_header_vdo {
 	u16 vendor_id;
 	u16 rsvd:10;
 	u16 modal_op_supported:1;
@@ -178,6 +178,21 @@ struct product_vdo {
 	u16 product_id;
 } __packed;
 
+/* Alternate mode adapter vdo */
+struct ama_vdo {
+	u32 superspeed_signal_support:3;
+	u32 vbus_req:1;
+	u32 vconn_req:1;
+	u32 vconn_pwr:3;
+	u32 ssrx2_dir_supp:1;
+	u32 ssrx1_dir_supp:1;
+	u32 sstx2_dir_supp:1;
+	u32 sstx1_dir_supp:1;
+	u32 rsvd:12;
+	u32 fw_ver:4;
+	u32 hw_ver:4;
+} __packed;
+
 struct vdm_req_pkt {
 	struct pd_pkt_header msg_hdr;
 	struct vdm_header vdm_hdr;
@@ -186,7 +201,7 @@ struct vdm_req_pkt {
 struct dis_id_response_cable_pkt {
 	struct pd_pkt_header msg_hdr;
 	struct vdm_header vdm_hdr;
-	struct id_header id_hdr;
+	struct id_header_vdo id_hdr;
 	struct cert_stat_vdo vdo1;
 	struct cable_vdo vdo2;
 } __packed;
@@ -194,7 +209,7 @@ struct dis_id_response_cable_pkt {
 struct dis_id_response_hub_pkt {
 	struct pd_pkt_header msg_hdr;
 	struct vdm_header vdm_hdr;
-	struct id_header id_hdr;
+	struct id_header_vdo id_hdr;
 	struct cert_stat_vdo vdo1;
 	struct product_vdo vdo2;
 } __packed;
diff --git a/drivers/usb/typec/pd/policy_engine.c b/drivers/usb/typec/pd/policy_engine.c
index 8fbbd42e..d0714f6 100644
--- a/drivers/usb/typec/pd/policy_engine.c
+++ b/drivers/usb/typec/pd/policy_engine.c
@@ -1764,7 +1764,7 @@ pe_process_state_pe_snk_ready(struct policy_engine *pe)
 		devpolicy_update_charger(pe->p.dpm, rcap->op_ma, 0);
 		pe_store_port_partner_caps(pe, &pe->pp_src_pdos);
 		schedule_delayed_work(&pe->post_ready_work,
-				msecs_to_jiffies(PE_AUTO_TRIGGERING_DELAY));
+				msecs_to_jiffies(PE_SNK_AUTO_TRIGGERING_DELAY));
 	} else
 		schedule_delayed_work(&pe->post_ready_work, 0);
 }
@@ -1950,7 +1950,7 @@ pe_process_state_pe_src_ready(struct policy_engine *pe)
 	log_dbg("In PE_SRC_READY");
 
 	if (pe->prev_state == PE_SRC_TRANSITION_SUPPLY)
-		delay = PE_AUTO_TRIGGERING_DELAY;
+		delay = PE_SRC_AUTO_TRIGGERING_DELAY;
 	schedule_delayed_work(&pe->post_ready_work,
 					msecs_to_jiffies(delay));
 }
@@ -2857,6 +2857,7 @@ int policy_engine_bind_dpm(struct devpolicy_mgr *dpm)
 	}
 
 	pe->p.dpm = dpm;
+	pe->plat_conf = &dpm->plat_conf;
 	ret = protocol_bind_pe(&pe->p);
 	if (ret) {
 		log_err("Failed to bind pe to protocol\n");
diff --git a/drivers/usb/typec/pd/policy_engine.h b/drivers/usb/typec/pd/policy_engine.h
index 53dbb1d..6c75dab 100644
--- a/drivers/usb/typec/pd/policy_engine.h
+++ b/drivers/usb/typec/pd/policy_engine.h
@@ -144,7 +144,8 @@
 	pr_warn(LOG_TAG":%s:"format"\n", __func__, ##__VA_ARGS__)
 
 #define PE_MAX_RETRY			20
-#define PE_AUTO_TRIGGERING_DELAY	100 /* 100 mSec */
+#define PE_SRC_AUTO_TRIGGERING_DELAY	100 /* 100 mSec */
+#define PE_SNK_AUTO_TRIGGERING_DELAY	200 /* 200 mSec */
 
 enum pe_states {
 
@@ -514,6 +515,7 @@ struct pe_req_cap {
 
 struct policy_engine {
 	struct policy p;
+	struct pd_platfrom_config *plat_conf;
 
 	struct mutex pe_lock;
 	struct mutex dpm_evt_lock;
diff --git a/drivers/usb/typec/pd/vdm_process.c b/drivers/usb/typec/pd/vdm_process.c
index 1d5cfd8..977b749 100644
--- a/drivers/usb/typec/pd/vdm_process.c
+++ b/drivers/usb/typec/pd/vdm_process.c
@@ -26,6 +26,8 @@
 
 #define PD_SID          0xff00
 #define VESA_SVID       0xff01
+#define INTEL_SVID	0x8086
+#define UNSUPPORTED_SVID	0xeeee
 #define STRUCTURED_VDM	1
 
 /* Display port pin assignments */
@@ -52,10 +54,10 @@
 #define DP_HPD_AUTO_TRIGGER_TIME	200 /* 200 mSec */
 
 static void pe_prepare_vdm_header(struct vdm_header *v_hdr, enum vdm_cmd cmd,
-					int svid, int obj_pos)
+			enum vdm_cmd_type cmd_type, int svid, int obj_pos)
 {
 	v_hdr->cmd = cmd;
-	v_hdr->cmd_type = INITIATOR;
+	v_hdr->cmd_type = cmd_type;
 	v_hdr->obj_pos = obj_pos;
 	v_hdr->str_vdm_version = 0x0; /* 0 = version 1.0 */
 	v_hdr->vdm_type = STRUCTURED_VDM; /* Structured VDM */
@@ -63,12 +65,18 @@ static void pe_prepare_vdm_header(struct vdm_header *v_hdr, enum vdm_cmd cmd,
 
 }
 
+static void pe_prepare_initiator_vdm_header(struct vdm_header *v_hdr,
+				enum vdm_cmd cmd, int svid, int obj_pos)
+{
+	pe_prepare_vdm_header(v_hdr, cmd, INITIATOR, svid, obj_pos);
+}
+
 int pe_send_discover_identity(struct policy_engine *pe)
 {
 	struct vdm_header v_hdr = { 0 };
 	int ret;
 
-	pe_prepare_vdm_header(&v_hdr, DISCOVER_IDENTITY,
+	pe_prepare_initiator_vdm_header(&v_hdr, DISCOVER_IDENTITY,
 						PD_SID, 0);
 	ret = pe_send_packet(pe, &v_hdr, 4,
 				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM);
@@ -76,20 +84,122 @@ int pe_send_discover_identity(struct policy_engine *pe)
 	return ret;
 }
 
-int pe_send_discover_identity_rnak(struct policy_engine *pe)
+static void pe_send_discover_identity_responder_nack(struct policy_engine *pe)
 {
 	struct vdm_header v_hdr = { 0 };
-	int ret;
 
 	v_hdr.cmd = DISCOVER_IDENTITY;
 	v_hdr.cmd_type = REP_NACK;
 	v_hdr.vdm_type = STRUCTURED_VDM; /* Structured VDM */
 	v_hdr.svid = PD_SID;
 
-	ret = pe_send_packet(pe, &v_hdr, 4,
-				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM);
+	if (pe_send_packet(pe, &v_hdr, 4,
+				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM))
+		log_err("Failed to send DI");
+	else
+		log_dbg("Sent DI NACK");
+}
 
-	return ret;
+static void pe_send_discover_identity_responder_ack(struct policy_engine *pe)
+{
+	u32 vdm[MAX_NUM_DATA_OBJ];
+	struct vdm_header *v_hdr = (struct vdm_header *)&vdm[0];
+	struct id_header_vdo *id_hdr = (struct id_header_vdo *)&vdm[1];
+	struct cert_stat_vdo *cert_vdo = (struct cert_stat_vdo *)&vdm[2];
+	struct product_vdo *p_vdo = (struct product_vdo *)&vdm[3];
+	struct pd_platfrom_config *pconf = pe->plat_conf;
+
+	memset(&vdm, 0, sizeof(vdm));
+	pe_prepare_vdm_header(v_hdr, DISCOVER_IDENTITY, REP_ACK, PD_SID, 0);
+
+	id_hdr->vendor_id = pconf->vendor_id;
+	id_hdr->modal_op_supported = pconf->ufp_modal_op_supp;
+	id_hdr->product_type = pconf->product_type;
+	id_hdr->is_usb_dev_capable = pconf->usb_dev_supp;
+	id_hdr->is_usb_host_capable = pconf->usb_host_supp;
+
+	cert_vdo->tid = pconf->test_id;
+
+	p_vdo->bcd_dev = pconf->usb_bcd_device_id;
+	p_vdo->product_id = pconf->usb_product_id;
+	if (pe_send_packet(pe, &vdm, 16,
+				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM))
+		log_err("Failed to send DI");
+	else
+		log_dbg("Sent DI ACK");
+}
+
+static void pe_send_discover_svid_responder_ack(struct policy_engine *pe)
+{
+	u32 vdm[MAX_NUM_DATA_OBJ];
+	struct vdm_header *v_hdr = (struct vdm_header *)&vdm[0];
+	struct dp_vdo *svid_vdo = (struct dp_vdo *)&vdm[1];
+
+	memset(&vdm, 0, sizeof(vdm));
+	pe_prepare_vdm_header(v_hdr, DISCOVER_SVID, REP_ACK, PD_SID, 0);
+	svid_vdo->svid0 = PD_SID;
+
+	if (pe_send_packet(pe, &vdm, 8,
+				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM))
+		log_err("Failed to send SVID ack");
+	else
+		log_dbg("Sent SVID ACK");
+}
+
+static void pe_send_discover_svid_responder_nack(struct policy_engine *pe)
+{
+	struct vdm_header v_hdr = { 0 };
+
+	pe_prepare_vdm_header(&v_hdr, DISCOVER_SVID, REP_NACK, PD_SID, 0);
+	log_dbg("Sending SVID NACK");
+	if (pe_send_packet(pe, &v_hdr, 4,
+				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM))
+		log_err("Failed to send SVID nack");
+	else
+		log_dbg("Sent SVID NACK");
+}
+
+static void pe_send_discover_mode_responder_nack(struct policy_engine *pe)
+{
+	struct vdm_header v_hdr = { 0 };
+
+	pe_prepare_vdm_header(&v_hdr, DISCOVER_MODE,
+				REP_NACK, UNSUPPORTED_SVID, 0);
+	if (pe_send_packet(pe, &v_hdr, 4,
+				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM))
+		log_err("Failed to send discover mode nack");
+	else
+		log_dbg("Sent DiscoverMode NACK");
+}
+
+static void
+pe_send_enter_mode_responder_nack(struct policy_engine *pe,
+						int svid, int index)
+{
+	struct vdm_header v_hdr = { 0 };
+
+	pe_prepare_vdm_header(&v_hdr, ENTER_MODE, REP_NACK,
+						svid, index);
+	if (pe_send_packet(pe, &v_hdr, 4,
+				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM))
+		log_err("Failed to send enter mode nack");
+	else
+		log_dbg("Sent EnterMode NACK");
+}
+
+static void
+pe_send_exit_mode_responder_nack(struct policy_engine *pe,
+						int svid, int index)
+{
+	struct vdm_header v_hdr = { 0 };
+
+	pe_prepare_vdm_header(&v_hdr, EXIT_MODE, REP_NACK,
+						svid, index);
+	if (pe_send_packet(pe, &v_hdr, 4,
+				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM))
+		log_err("Failed to send exit mode nack");
+	else
+		log_dbg("Sent ExitMode NACK");
 }
 
 int pe_send_discover_svid(struct policy_engine *pe)
@@ -97,7 +207,7 @@ int pe_send_discover_svid(struct policy_engine *pe)
 	struct vdm_header v_hdr = { 0 };
 	int ret;
 
-	pe_prepare_vdm_header(&v_hdr, DISCOVER_SVID,
+	pe_prepare_initiator_vdm_header(&v_hdr, DISCOVER_SVID,
 						PD_SID, 0);
 	ret = pe_send_packet(pe, &v_hdr, 4,
 				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM);
@@ -110,7 +220,7 @@ int pe_send_discover_mode(struct policy_engine *pe)
 	struct vdm_header v_hdr = { 0 };
 	int ret;
 
-	pe_prepare_vdm_header(&v_hdr, DISCOVER_MODE,
+	pe_prepare_initiator_vdm_header(&v_hdr, DISCOVER_MODE,
 						VESA_SVID, 0);
 	ret = pe_send_packet(pe, &v_hdr, 4,
 				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM);
@@ -123,7 +233,7 @@ int pe_send_enter_mode(struct policy_engine *pe, int index)
 	struct vdm_header v_hdr = { 0 };
 	int ret;
 
-	pe_prepare_vdm_header(&v_hdr, ENTER_MODE,
+	pe_prepare_initiator_vdm_header(&v_hdr, ENTER_MODE,
 						VESA_SVID, index);
 	ret = pe_send_packet(pe, &v_hdr, 4,
 				PD_DATA_MSG_VENDOR_DEF, PE_EVT_SEND_VDM);
@@ -150,7 +260,7 @@ int pe_send_display_status(struct policy_engine *pe)
 
 	memset(&pkt, 0, sizeof(pkt));
 	v_hdr = (struct vdm_header *) &pkt.data_obj[0];
-	pe_prepare_vdm_header(v_hdr, DP_STATUS_UPDATE,
+	pe_prepare_initiator_vdm_header(v_hdr, DP_STATUS_UPDATE,
 						VESA_SVID, index);
 
 	stat = (struct dis_port_status *) &pkt.data_obj[1];
@@ -202,7 +312,7 @@ int pe_send_display_configure(struct policy_engine *pe)
 	}
 
 	pkt.data_obj[0] = 0;
-	pe_prepare_vdm_header((struct vdm_header *)&pkt.data_obj[0],
+	pe_prepare_initiator_vdm_header((struct vdm_header *)&pkt.data_obj[0],
 					DP_CONFIGURE, VESA_SVID, index);
 	memcpy(&pkt.data_obj[1], &dconf, sizeof(dconf));
 
@@ -219,13 +329,22 @@ static int pe_handle_discover_identity(struct policy_engine *pe,
 	struct vdm_header *vdm_hdr = (struct vdm_header *)&pkt->data_obj[0];
 	unsigned short cmd_type = vdm_hdr->cmd_type;
 
+	if (vdm_hdr->svid != PD_SID) {
+		log_warn("Invalid SID, don't respond");
+		return -EINVAL;
+	}
+
 	if (cmd_type == INITIATOR) {
-		log_warn("UFP alternate mode not supported, Sending NAK\n");
-		pe_send_discover_identity_rnak(pe);
+		if (pe->plat_conf) {
+			pe_send_discover_identity_responder_ack(pe);
+		} else {
+			log_warn("No platform configuration, Sending NAK");
+			pe_send_discover_identity_responder_nack(pe);
+		}
 		return 0;
 	}
 	if (pe->cur_state != PE_DFP_UFP_VDM_IDENTITY_REQUEST) {
-		log_warn("DI RACK received in wrong state,state=%d\n",
+		log_warn("DI RACK received in wrong state,state=%d",
 				pe->cur_state);
 		return -EINVAL;
 	}
@@ -237,11 +356,11 @@ static int pe_handle_discover_identity(struct policy_engine *pe,
 		break;
 	case REP_NACK:
 		log_dbg(" DI Nacked!!! ");
-		log_err("Responder doesn't support alternate mode\n");
+		log_err("Responder doesn't support alternate mode");
 		pe->alt_state = PE_ALT_STATE_ALT_MODE_FAIL;
 		break;
 	case REP_BUSY:
-		log_info("Responder BUSY!!. Retry Discover Identity\n");
+		log_info("Responder BUSY!!. Retry Discover Identity");
 		pe->alt_state = PE_ALT_STATE_NONE;
 		break;
 	}
@@ -261,8 +380,16 @@ static int pe_handle_discover_svid(struct policy_engine *pe,
 	svid_pkt = (struct dis_svid_response_pkt *)pkt;
 	cmd_type = svid_pkt->vdm_hdr.cmd_type;
 
+	if (svid_pkt->vdm_hdr.svid != PD_SID) {
+		log_warn("Invalid SID, don't respond");
+		return -EINVAL;
+	}
+
 	if (cmd_type == INITIATOR) {
-		log_warn("UFP alternate mode not supported, Sending NAK\n");
+		if (pe->plat_conf->ufp_modal_op_supp)
+			pe_send_discover_svid_responder_ack(pe);
+		else
+			pe_send_discover_svid_responder_nack(pe);
 		return 0;
 	}
 	if (pe->cur_state != PE_DFP_VDM_SVIDS_REQUEST) {
@@ -368,7 +495,8 @@ static int pe_handle_discover_mode(struct policy_engine *pe,
 	cmd_type = dmode_pkt->vdm_hdr.cmd_type;
 
 	if (cmd_type == INITIATOR) {
-		log_warn("UFP alternate mode not supported\n");
+		pe_send_discover_mode_responder_nack(pe);
+		/* TODO: Support discover mode in UFP */
 		return 0;
 	}
 	if (pe->cur_state != PE_DFP_VDM_MODES_REQUEST) {
@@ -413,7 +541,9 @@ static int pe_handle_enter_mode(struct policy_engine *pe,
 	unsigned short cmd_type = vdm_hdr->cmd_type;
 
 	if (cmd_type == INITIATOR) {
-		log_warn("UFP alternate mode not supported, Sending NAK\n");
+		pe_send_enter_mode_responder_nack(pe,
+				vdm_hdr->svid, vdm_hdr->obj_pos);
+		/* TODO: Support enter mode in UFP */
 		return 0;
 	}
 	if (pe->cur_state != PE_DFP_VDM_MODES_ENTRY_REQUEST) {
@@ -446,6 +576,19 @@ static int pe_handle_enter_mode(struct policy_engine *pe,
 	return 0;
 }
 
+static int pe_handle_exit_mode(struct policy_engine *pe,
+						struct pd_packet *pkt)
+{
+	struct vdm_header *vdm_hdr = (struct vdm_header *)&pkt->data_obj[0];
+	unsigned short cmd_type = vdm_hdr->cmd_type;
+
+	if (cmd_type == INITIATOR)
+		pe_send_exit_mode_responder_nack(pe,
+				vdm_hdr->svid, vdm_hdr->obj_pos);
+	/* TODO: handle exit mode responce */
+	return 0;
+}
+
 static int pe_handle_display_status(struct policy_engine *pe,
 							struct pd_packet *pkt)
 {
@@ -609,6 +752,11 @@ int pe_handle_vendor_msg(struct policy_engine *pe,
 	struct vdm_header *vdm_hdr = (struct vdm_header *)&pkt->data_obj[0];
 	int ret = 0;
 
+	if (vdm_hdr->vdm_type != STRUCTURED_VDM) {
+		log_warn("Unstructure vdm not supported");
+		return -EINVAL;
+	}
+
 	switch (vdm_hdr->cmd) {
 	case DISCOVER_IDENTITY:
 		ret = pe_handle_discover_identity(pe, pkt);
@@ -624,7 +772,7 @@ int pe_handle_vendor_msg(struct policy_engine *pe,
 		break;
 	case EXIT_MODE:
 		log_info("EXIT DP mode request received\n");
-		/* TODO: Handle the exit mode */
+		ret = pe_handle_exit_mode(pe, pkt);
 		break;
 	case DP_STATUS_UPDATE:
 		log_dbg("Received display status from port partner=%x\n",
diff --git a/drivers/usb/typec/pd/vdm_process_helper.h b/drivers/usb/typec/pd/vdm_process_helper.h
index 0aa00d6..c31514f 100644
--- a/drivers/usb/typec/pd/vdm_process_helper.h
+++ b/drivers/usb/typec/pd/vdm_process_helper.h
@@ -25,7 +25,6 @@
 #define VDM_PROCESS_HELPER_H
 int pe_handle_vendor_msg(struct policy_engine *pe, struct pd_packet *pkt);
 int pe_send_discover_identity(struct policy_engine *pe);
-int pe_send_discover_identity_rnak(struct policy_engine *pe);
 int pe_send_discover_svid(struct policy_engine *pe);
 int pe_send_discover_mode(struct policy_engine *pe);
 int pe_send_enter_mode(struct policy_engine *pe, int index);
-- 
1.9.1

