From f9f5e0009ab68314cd709067a6ffaea0726b3fcc Mon Sep 17 00:00:00 2001
From: Sumeet Pawnikar <sumeet.r.pawnikar@intel.com>
Date: Tue, 28 Apr 2015 06:45:15 +0530
Subject: [PATCH] [TYPE_C]: Add support for usb Type-C detection driver

This patch is support for detecting the Type-C cable plugged in/out and also
help to detect the current based on the Ra/Rd pull up/down or floating.
Type-C can be detected based on the cc value and detect the UFP or DFP as well.

Change-Id: Ib17d1594c8727c8f139896352722d9954a4f60f4
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-20620
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>
Signed-off-by: R, Kannappan <r.kannappan@intel.com>
Signed-off-by: Pavan Kumar S <pavan.kumar.s@intel.com>
---
 drivers/usb/typec/Kconfig            |   5 +-
 drivers/usb/typec/Makefile           |   3 +-
 drivers/usb/typec/usb_typec_detect.c | 598 +++++++++++++++++++++++++++++++++++
 drivers/usb/typec/usb_typec_detect.h |  73 +++++
 4 files changed, 676 insertions(+), 3 deletions(-)
 create mode 100644 drivers/usb/typec/usb_typec_detect.c
 create mode 100644 drivers/usb/typec/usb_typec_detect.h

diff --git a/drivers/usb/typec/Kconfig b/drivers/usb/typec/Kconfig
index 3ac3546d..24a7bd9 100644
--- a/drivers/usb/typec/Kconfig
+++ b/drivers/usb/typec/Kconfig
@@ -1,7 +1,8 @@
 config USB_TYPEC_CORE
-	bool "Support for Type-C"
+	bool "Support for Type-C phy and detect"
 	depends on USB_TYPEC
 	help
 	  Say Y here if your system has a Type-C connector support
-	  for USB controller based on the USB phy IP Core.
+	  for USB controller based on the USB phy IP Core and detection
+	  available based on cc pull-up, pull-down or floating.
 
diff --git a/drivers/usb/typec/Makefile b/drivers/usb/typec/Makefile
index aea9f25..d998521 100644
--- a/drivers/usb/typec/Makefile
+++ b/drivers/usb/typec/Makefile
@@ -1 +1,2 @@
-obj-$(CONFIG_USB_TYPEC_CORE) += usb_typec_phy.o
+obj-$(CONFIG_USB_TYPEC_CORE) += usb_typec_phy.o \
+						usb_typec_detect.o
diff --git a/drivers/usb/typec/usb_typec_detect.c b/drivers/usb/typec/usb_typec_detect.c
new file mode 100644
index 0000000..4a427c4
--- /dev/null
+++ b/drivers/usb/typec/usb_typec_detect.c
@@ -0,0 +1,598 @@
+/*
+ * usb_typec_detect.c: usb type-c cable detecton driver
+ *
+ * Copyright (C) 2014 Intel Corporation
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Seee the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ * Author: Kannappan, R <r.kannappan@intel.com>
+ * Author: Albin B <albin.bala.krishnan@intel.com>
+ */
+
+#include <linux/kernel.h>
+#include <linux/mutex.h>
+#include <linux/power_supply.h>
+#include <linux/timer.h>
+#include <linux/kthread.h>
+#include <linux/jiffies.h>
+#include <linux/notifier.h>
+#include <linux/workqueue.h>
+#include <linux/jiffies.h>
+#include <linux/wait.h>
+#include <linux/usb/phy.h>
+#include <linux/slab.h>
+#include <linux/timer.h>
+#include <linux/mfd/intel_soc_pmic.h>
+#include <linux/usb_typec_phy.h>
+#include "usb_typec_detect.h"
+
+#define CC_OPEN(x)		(x == USB_TYPEC_CC_VRD_UNKNOWN)
+#define CC_RD(x)		(x > USB_TYPEC_CC_VRA)
+#define CC_RA(x)		(x == USB_TYPEC_CC_VRA)
+
+#define TYPEC_DRPLOCK_TIMEOUT 130	/* 100 - 150ms */
+
+#define TYPEC_CABLE_USB		"USB"
+#define TYPEC_CABLE_USB_HOST	"USB-Host"
+
+static const char *detect_extcon_cable[] = {
+	TYPEC_CABLE_USB,
+	TYPEC_CABLE_USB_HOST,
+	NULL,
+};
+
+static LIST_HEAD(typec_detect_list);
+static void detect_remove(struct typec_detect *detect);
+
+static int detect_kthread(void *data)
+{
+	struct typec_detect *detect = (struct typec_detect *)data;
+	struct typec_phy *phy;
+	int state;
+
+	if (!detect) {
+		pr_err("%s: no detect found", __func__);
+		return 0;
+	}
+
+	phy = detect->phy;
+
+	do {
+		detect->timer_evt = TIMER_EVENT_NONE;
+		wait_event(detect->wq, detect->timer_evt);
+		cancel_work_sync(&detect->dfp_work);
+
+		if (detect->timer_evt == TIMER_EVENT_QUIT)
+			break;
+
+		mutex_lock(&detect->lock);
+		if (detect->got_vbus) {
+			mutex_unlock(&detect->lock);
+			continue;
+		}
+		state = detect->state;
+		mutex_unlock(&detect->lock);
+
+
+		if (state == DETECT_STATE_UNATTACHED_DFP ||
+			state == DETECT_STATE_UNATTACHED_DRP) {
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_UNATTACHED_UFP;
+			typec_switch_mode(phy, TYPEC_MODE_UFP);
+			mutex_unlock(&detect->lock);
+			/* next state start from VALID VBUS */
+		} else if (state == DETECT_STATE_UNATTACHED_UFP) {
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_UNATTACHED_DFP;
+			typec_set_host_current(phy, TYPEC_CURRENT_USB);
+			typec_switch_mode(phy, TYPEC_MODE_DFP);
+			mutex_unlock(&detect->lock);
+			schedule_work(&detect->dfp_work);
+		}
+	} while (true);
+
+	return 0;
+}
+
+static enum typec_cc_pin get_active_cc(struct typec_cc_psy *cc1,
+		struct typec_cc_psy *cc2)
+{
+	int ret = 0;
+
+	if (CC_RD(cc1->v_rd) && (CC_OPEN(cc2->v_rd) || CC_RA(cc2->v_rd)))
+		ret = TYPEC_PIN_CC1;
+	else if (CC_RD(cc2->v_rd) && (CC_OPEN(cc1->v_rd) || CC_RA(cc1->v_rd)))
+		ret = TYPEC_PIN_CC2;
+
+	return ret;
+}
+
+static void detect_dfp_work(struct work_struct *work)
+{
+	struct typec_detect *detect =
+		container_of(work, struct typec_detect, dfp_work);
+	bool cc1_found = false;
+	bool cc2_found = false;
+	int ret;
+	enum typec_cc_pin use_cc = 0;
+	enum typec_cc_pin cc_pin = 0;
+	struct typec_phy *phy = detect->phy;
+	struct typec_cc_psy cc1 = {0, 0};
+	struct typec_cc_psy cc2 = {0, 0};
+	struct typec_cc_psy *pcc;
+
+	mutex_lock(&detect->lock);
+	if (detect->state != DETECT_STATE_UNATTACHED_DFP || detect->got_vbus) {
+		mutex_unlock(&detect->lock);
+		return;
+	}
+	mutex_unlock(&detect->lock);
+
+
+	cc_pin = TYPEC_PIN_CC1;
+	pcc = &cc1;
+	do {
+		ret = typec_measure_cc(detect->phy, cc_pin, pcc,
+				msecs_to_jiffies(3));
+		if (ret >= 0)
+			cc_pin == TYPEC_PIN_CC1 ? (cc1_found = true)
+				: (cc2_found = true);
+
+		mutex_lock(&detect->lock);
+		if (detect->got_vbus) {
+			mutex_unlock(&detect->lock);
+			dev_err(detect->phy->dev, "%s:exiting got vbus cc%d\n",
+					__func__, cc_pin);
+			return;
+		}
+		mutex_unlock(&detect->lock);
+
+		cc_pin = TYPEC_PIN_CC2;
+		pcc = &cc2;
+	} while (cc_pin <= TYPEC_PIN_CC2);
+
+	dev_dbg(detect->phy->dev,
+		"cc1_found = %d cc2_found = %d unattach dfp cc1 = %d, cc2 = %d",
+		cc1_found, cc2_found, cc1.v_rd, cc2.v_rd);
+	if (cc1_found && cc2_found) {
+		if (((CC_RA(cc1.v_rd) || (CC_OPEN(cc1.v_rd)))
+				&& CC_RD(cc2.v_rd)) ||
+			(CC_RD(cc1.v_rd) && (CC_RA(cc2.v_rd) ||
+					CC_OPEN(cc2.v_rd)))) {
+			del_timer(&detect->drp_timer); /* disable timer */
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_ATTACH_DFP_DRP_WAIT;
+			mutex_unlock(&detect->lock);
+			usleep_range(100000, 150000);
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_ATTACHED_DFP;
+			mutex_unlock(&detect->lock);
+			use_cc = get_active_cc(&cc1, &cc2);
+			typec_setup_cc(phy, use_cc, TYPEC_STATE_ATTACHED_DFP);
+
+			/* enable VBUS */
+			extcon_set_cable_state(detect->edev, "USB-Host", true);
+			atomic_notifier_call_chain(&detect->otg->notifier,
+				USB_EVENT_ID, NULL);
+
+			return;
+		} else if (CC_RA(cc1.v_rd) && CC_RA(cc2.v_rd)) {
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_ATTACHED_DFP;
+			mutex_unlock(&detect->lock);
+			/* TODO: Need to set the phy state */
+			del_timer(&detect->drp_timer); /* disable timer */
+			/* Audio Accessory. */
+			/* next state Attached UFP based on VBUS */
+			dev_info(detect->phy->dev, "Audio Accessory Detected");
+			return;
+		} else if (CC_RD(cc1.v_rd) && CC_RD(cc2.v_rd)) {
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_ATTACHED_DFP;
+			mutex_unlock(&detect->lock);
+			del_timer(&detect->drp_timer); /* disable timer */
+			/* Debug Accessory */
+			/* next state Attached UFP based on VBUS */
+			dev_info(detect->phy->dev, "Debug Accessory Detected");
+			return;
+		}
+	}
+	schedule_work(&detect->dfp_work);
+}
+
+static void detect_drp_timer(unsigned long data)
+{
+	struct typec_detect *detect = (struct typec_detect *)data;
+	struct typec_phy *phy;
+
+	phy = detect->phy;
+	if (!phy) {
+		pr_err("%s: no valid phy registered", __func__);
+		return;
+	}
+
+	detect->timer_evt = TIMER_EVENT_PROCESS;
+	wake_up(&detect->wq);
+	mod_timer(&detect->drp_timer, jiffies + msecs_to_jiffies(50));
+}
+
+static int get_chrgcur_from_rd(enum  typec_cc_level rd1,
+				enum typec_cc_level rd2)
+{
+	int ma;
+	enum typec_cc_level use_rd;
+
+	if (CC_RA(rd1))
+		use_rd = rd2;
+	else
+		use_rd = rd1;
+
+	switch (use_rd) {
+	case USB_TYPEC_CC_VRD_USB:
+		ma = 0;
+		break;
+	case USB_TYPEC_CC_VRD_1500:
+		ma = 1500;
+		break;
+	case USB_TYPEC_CC_VRD_3000:
+		ma = 3000;
+		break;
+	default:
+		ma = 0;
+		break;
+	}
+
+	return ma;
+}
+
+static void detect_lock_ufp_work(struct work_struct *work)
+{
+	struct typec_detect *detect = container_of(work, struct typec_detect,
+					lock_ufp_work);
+	int ret;
+	/* tDRPLock - 100 to 150ms */
+	unsigned long timeout = msecs_to_jiffies(TYPEC_DRPLOCK_TIMEOUT);
+
+	typec_switch_mode(detect->phy, TYPEC_MODE_UFP);
+	ret = wait_for_completion_timeout(&detect->lock_ufp_complete, timeout);
+	if (ret == 0) {
+		mutex_lock(&detect->lock);
+		detect->state = DETECT_STATE_UNATTACHED_UFP;
+		mutex_unlock(&detect->lock);
+		/* start the timer asap goto unattached dfp */
+		mod_timer(&detect->drp_timer, jiffies +
+					msecs_to_jiffies(1));
+	}
+	/* got vbus, goto attached ufp */
+
+	return;
+}
+
+static void update_phy_state(struct work_struct *work)
+{
+	struct typec_phy *phy;
+	struct typec_detect *detect;
+	int ret;
+	enum typec_cc_pin use_cc = 0;
+	struct typec_cc_psy cc1_psy, cc2_psy;
+	struct power_supply_cable_props cable_props = {0};
+	int state;
+
+	detect = container_of(work, struct typec_detect, phy_ntf_work);
+	phy = detect->phy;
+
+	switch (detect->event) {
+	case TYPEC_EVENT_VBUS:
+		mutex_lock(&detect->lock);
+		detect->got_vbus = true;
+		state = detect->state;
+		if (state == DETECT_STATE_LOCK_UFP)
+			complete(&detect->lock_ufp_complete);
+		mutex_unlock(&detect->lock);
+
+
+		cancel_work_sync(&detect->dfp_work);
+		del_timer(&detect->drp_timer); /* disable timer */
+		if (state == DETECT_STATE_ATTACHED_DFP)
+			break;
+		else if ((state == DETECT_STATE_UNATTACHED_DFP) ||
+				(state == DETECT_STATE_UNATTACHED_DRP)) {
+			mutex_lock(&detect->lock);
+			typec_switch_mode(phy, TYPEC_MODE_UFP);
+			mutex_unlock(&detect->lock);
+		}
+
+		mutex_lock(&detect->lock);
+
+		ret = typec_measure_cc(phy, TYPEC_PIN_CC1, &cc1_psy, 0);
+		if (ret < 0) {
+			dev_err(detect->phy->dev,
+					"%s: Error(%d) measuring cc1\n",
+					__func__, ret);
+			break;
+		}
+
+		ret = typec_measure_cc(phy, TYPEC_PIN_CC2, &cc2_psy, 0);
+		if (ret < 0) {
+			dev_err(detect->phy->dev,
+					"%s: Error(%d) measuring cc2\n",
+					__func__, ret);
+			break;
+		}
+
+		mutex_unlock(&detect->lock);
+		dev_info(detect->phy->dev, "evt_vbus cc1 = %d, cc2 = %d",
+						cc1_psy.v_rd, cc2_psy.v_rd);
+
+		/* try another time? */
+		if (CC_OPEN(cc1_psy.v_rd) || CC_RA(cc1_psy.v_rd)) {
+			ret = typec_measure_cc(phy, TYPEC_PIN_CC1, &cc1_psy, 0);
+			if (ret < 0) {
+				dev_err(detect->phy->dev,
+					"%s: Error(%d) measuring cc1\n",
+					__func__, ret);
+				break;
+			}
+		}
+		if (CC_OPEN(cc2_psy.v_rd) || CC_RA(cc2_psy.v_rd)) {
+			ret = typec_measure_cc(phy, TYPEC_PIN_CC2, &cc2_psy, 0);
+			if (ret < 0) {
+				dev_err(detect->phy->dev,
+					"%s: Error(%d) measuring cc2\n",
+					__func__, ret);
+				break;
+			}
+		}
+
+		use_cc = get_active_cc(&cc1_psy, &cc2_psy);
+		if (CC_OPEN(cc1_psy.v_rd) && CC_OPEN(cc2_psy.v_rd)) {
+			/* nothing connected */
+		} else if (use_cc) {
+			/* valid cc found; UFP_ATTACHED */
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_ATTACHED_UFP;
+			mutex_unlock(&detect->lock);
+			typec_setup_cc(phy, use_cc, TYPEC_STATE_ATTACHED_UFP);
+			extcon_set_cable_state(detect->edev, "USB", true);
+
+			/* notify usb */
+			atomic_notifier_call_chain(&detect->otg->notifier,
+					USB_EVENT_VBUS, NULL);
+			/* notify power supply */
+			cable_props.chrg_evt =
+					POWER_SUPPLY_CHARGER_EVENT_CONNECT;
+			cable_props.chrg_type =
+					POWER_SUPPLY_CHARGER_TYPE_USB_TYPEC;
+			cable_props.ma = get_chrgcur_from_rd(cc1_psy.v_rd,
+								cc2_psy.v_rd);
+			atomic_notifier_call_chain(&power_supply_notifier,
+							PSY_CABLE_EVENT,
+							&cable_props);
+		}
+		break;
+	case TYPEC_EVENT_NONE:
+		mutex_lock(&detect->lock);
+		detect->got_vbus = false;
+		typec_setup_cc(phy, 0, TYPEC_STATE_UNATTACHED_UFP);
+		mutex_unlock(&detect->lock);
+		if (phy->state == TYPEC_STATE_ATTACHED_UFP) {
+			extcon_set_cable_state(detect->edev, "USB", false);
+			/* notify power supply */
+			cable_props.chrg_evt =
+				POWER_SUPPLY_CHARGER_EVENT_DISCONNECT;
+			cable_props.chrg_type =
+				POWER_SUPPLY_CHARGER_TYPE_USB_TYPEC;
+			cable_props.ma = 0;
+			atomic_notifier_call_chain(&power_supply_notifier,
+							PSY_CABLE_EVENT,
+							&cable_props);
+		} else {
+			/* state = DFP; disable VBUS */
+			extcon_set_cable_state(detect->edev,
+							"USB-Host", false);
+
+			reinit_completion(&detect->lock_ufp_complete);
+			mutex_lock(&detect->lock);
+			detect->state = DETECT_STATE_LOCK_UFP;
+			mutex_unlock(&detect->lock);
+			queue_work(detect->wq_lock_ufp,
+					&detect->lock_ufp_work);
+			break;
+		}
+		/* setup data mux */
+		atomic_notifier_call_chain(&detect->otg->notifier,
+					USB_EVENT_NONE, NULL);
+		mutex_lock(&detect->lock);
+		detect->state = DETECT_STATE_UNATTACHED_DRP;
+		mutex_unlock(&detect->lock);
+		/* start the timer asap */
+		mod_timer(&detect->drp_timer, jiffies +
+					msecs_to_jiffies(1));
+		break;
+	default:
+		dev_err(detect->phy->dev, "unknown event %d", detect->event);
+	}
+}
+
+static int typec_handle_phy_ntf(struct notifier_block *nb,
+			unsigned long event, void *data)
+{
+	struct typec_phy *phy;
+	struct typec_detect *detect =
+		container_of(nb, struct typec_detect, nb);
+	int handled = NOTIFY_OK;
+
+	phy = detect->phy;
+	if (!phy)
+		return NOTIFY_BAD;
+
+	detect->event = event;
+	switch (event) {
+	case TYPEC_EVENT_VBUS:
+	case TYPEC_EVENT_NONE:
+		schedule_work(&detect->phy_ntf_work);
+		break;
+	case TYPEC_EVENT_DRP:
+		dev_info(detect->phy->dev, "EVNT DRP");
+		detect->state = DETECT_STATE_UNATTACHED_DRP;
+		/* start the timer now */
+		mod_timer(&detect->drp_timer, jiffies +
+				msecs_to_jiffies(1));
+		break;
+	case TYPEC_EVENT_DEV_SUSPEND:
+		if (detect->state == DETECT_STATE_ATTACHED_DFP) {
+			/* disable vbus */
+		} else if (detect->state == DETECT_STATE_UNATTACHED_UFP ||
+				detect->state == DETECT_STATE_UNATTACHED_DFP ||
+				detect->state == DETECT_STATE_UNATTACHED_DRP)  {
+			cancel_work_sync(&detect->dfp_work);
+			del_timer(&detect->drp_timer);
+			detect->state = DETECT_STATE_UNATTACHED_DRP;
+		}
+		break;
+	case TYPEC_EVENT_DEV_RESUME:
+		if (detect->state == DETECT_STATE_ATTACHED_DFP) {
+			/* enable vbus */
+		} else if (detect->state == DETECT_STATE_UNATTACHED_UFP ||
+			detect->state == DETECT_STATE_UNATTACHED_DFP ||
+			detect->state == DETECT_STATE_UNATTACHED_DRP) {
+			/* start the timer now */
+			mod_timer(&detect->drp_timer, jiffies +
+					msecs_to_jiffies(1));
+		}
+		break;
+	default:
+		handled = NOTIFY_DONE;
+	}
+	return handled;
+}
+
+static int detect_otg_notifier(struct notifier_block *nb, unsigned long event,
+				void *param)
+{
+	return NOTIFY_DONE;
+}
+
+int typec_bind_detect(struct typec_phy *phy)
+{
+	struct typec_detect *detect;
+	int ret;
+
+	detect = kzalloc(sizeof(struct typec_detect), GFP_KERNEL);
+
+	if (!detect) {
+		pr_err("typec fsm: no memory");
+		return -ENOMEM;
+	}
+
+	if (!phy) {
+		pr_err("%s: no valid phy provided", __func__);
+		return -EINVAL;
+	}
+
+	detect->phy = phy;
+	detect->nb.notifier_call = typec_handle_phy_ntf;
+
+	ret = typec_register_notifier(phy, &detect->nb);
+	if (ret  < 0) {
+		dev_err(phy->dev, "unable to register notifier");
+		goto error;
+	}
+
+	init_waitqueue_head(&detect->wq);
+
+	INIT_WORK(&detect->phy_ntf_work, update_phy_state);
+	INIT_WORK(&detect->dfp_work, detect_dfp_work);
+
+	setup_timer(&detect->drp_timer, detect_drp_timer,
+			(unsigned long)detect);
+
+	detect->detect_kthread = kthread_run(detect_kthread, detect, "detect");
+	detect->state = DETECT_STATE_UNATTACHED_DRP;
+
+	detect->otg = usb_get_phy(USB_PHY_TYPE_USB2);
+	if (IS_ERR_OR_NULL(detect->otg)) {
+		detect->otg = NULL;
+		ret = -EINVAL;
+		goto error;
+	} else {
+		detect->otg_nb.notifier_call = detect_otg_notifier;
+		ret = usb_register_notifier(detect->otg, &detect->otg_nb);
+		if (ret < 0)
+			goto error;
+	}
+	mutex_init(&detect->lock);
+	detect->wq_lock_ufp = create_singlethread_workqueue("wq_lock_ufp");
+	INIT_WORK(&detect->lock_ufp_work, detect_lock_ufp_work);
+	init_completion(&detect->lock_ufp_complete);
+
+	detect->edev = devm_kzalloc(phy->dev, sizeof(struct extcon_dev),
+					GFP_KERNEL);
+
+	if (!detect->edev) {
+		ret = -ENOMEM;
+		goto error;
+	}
+	detect->edev->name = "usb-typec";
+	detect->edev->supported_cable = detect_extcon_cable;
+	ret = extcon_dev_register(detect->edev);
+	if (ret) {
+		devm_kfree(phy->dev, detect->edev);
+		goto error;
+	}
+
+	list_add_tail(&detect->list, &typec_detect_list);
+	return 0;
+
+error:
+	detect_remove(detect);
+	return ret;
+}
+
+static void detect_remove(struct typec_detect *detect)
+{
+	if (detect) {
+		cancel_work_sync(&detect->phy_ntf_work);
+		cancel_work_sync(&detect->dfp_work);
+		del_timer(&detect->drp_timer);
+		detect->timer_evt = TIMER_EVENT_QUIT;
+		wake_up(&detect->wq);
+
+		if (detect->otg) {
+			usb_unregister_notifier(detect->otg, &detect->otg_nb);
+			usb_put_phy(detect->otg);
+			detect->otg = NULL;
+		}
+		if (detect->edev)
+			extcon_dev_unregister(detect->edev);
+		kfree(detect);
+	}
+
+	return;
+}
+
+int typec_unbind_detect(struct typec_phy *phy)
+{
+	struct typec_detect *detect;
+
+	list_for_each_entry(detect, &typec_detect_list, list) {
+		if (strcmp(detect->phy->label, phy->label)) {
+			list_del(&detect->list);
+			detect_remove(detect);
+		}
+	}
+	return 0;
+}
diff --git a/drivers/usb/typec/usb_typec_detect.h b/drivers/usb/typec/usb_typec_detect.h
new file mode 100644
index 0000000..e616e04
--- /dev/null
+++ b/drivers/usb/typec/usb_typec_detect.h
@@ -0,0 +1,73 @@
+/*
+ * usb_typec_detect.h: usb type-c cable detection header file
+ *
+ * Copyright (C) 2014 Intel Corporation
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Seee the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ * Author: Kannappan, R <r.kannappan@intel.com>
+ */
+
+#ifndef __USB_TYPEC_DETECT_H__
+#define __USB_TYPEC_DETECT_H__
+
+#include <linux/timer.h>
+#include <linux/extcon.h>
+#include <linux/usb_typec_phy.h>
+
+enum typec_detect_state {
+	DETECT_STATE_UNATTACHED_UFP,
+	DETECT_STATE_UNATTACHED_DFP,
+	DETECT_STATE_UNATTACHED_DRP,
+	DETECT_STATE_ATTACHED_DFP,
+	DETECT_STATE_ATTACH_DFP_DRP_WAIT,
+	DETECT_STATE_LOCK_UFP,
+	DETECT_STATE_ATTACHED_UFP,
+};
+
+enum {
+	TIMER_EVENT_NONE,
+	TIMER_EVENT_PROCESS,
+	TIMER_EVENT_QUIT
+};
+
+struct typec_detect {
+	struct typec_phy *phy;
+	struct extcon_dev *edev;
+	enum typec_detect_state state;
+	enum typec_detect_state old_state;
+	enum typec_event event;
+	struct notifier_block nb;
+	struct work_struct phy_ntf_work;
+	struct work_struct dfp_work;
+	struct timer_list drp_timer;
+	struct list_head list;
+	struct usb_phy *otg;
+	struct notifier_block otg_nb;
+	struct task_struct *detect_kthread;
+	struct workqueue_struct *wq_lock_ufp;
+	struct work_struct lock_ufp_work;
+	struct completion lock_ufp_complete;
+	int timer_evt;
+	bool got_vbus;
+	wait_queue_head_t wq;
+	struct mutex lock;
+};
+
+extern int typec_bind_detect(struct typec_phy *phy);
+extern int typec_unbind_detect(struct typec_phy *phy);
+
+#endif /* __USB_TYPEC_DETECT_H__ */
-- 
1.9.1

