From 4c926072a6e729d2ec54a566177fe22ee483f283 Mon Sep 17 00:00:00 2001
From: Tim Gore <tim.gore@intel.com>
Date: Fri, 8 Jan 2016 15:39:15 +0000
Subject: [PATCH 13/13] FOR_UPSTREAM [VPG]: drm/i915: count engine resets

This is a re-application of commit #f9212f43d44854...
which was reverted by commit #dbe7b02783d012...

With a per engine reset (in i915_handle_hung_ring)
the gpu_error.reset_counter does not get incremented,
this counter is only counting full GPU resets. This
causes the igt test gem_reset_stats to fail some subtests,
and also caused some problems for OGL robustness tests.

commit #f9212f43d44854 modified i915_get_reset_stats_ioctl
so that instead of reporting just full gpu resets, it
reports the sum of all gpu and ring resets. This was later
reverted when the OGL robustness interface was modified,
to make it easier to distinguish full gpu resets from
engine resets. Now, due to SELinux policy changes the reset
notification mechanism has been changed and it is easy
to distinguish full and engine resets. Re-introducing this
patch fixes gem_reset_stats and also agrees with the way
OTC would like to see these resets counted.

Change-Id: I5134b5f544106be6559e5f5431f1c625a758ccac
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-15297
Issue: https://jira01.devtools.intel.com/browse/VIZ-5758
Signed-off-by: Tim Gore <tim.gore@intel.com>
Reviewed-on: https://android.intel.com:443/460550
---
 drivers/gpu/drm/i915/intel_uncore.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_uncore.c b/drivers/gpu/drm/i915/intel_uncore.c
index 7d96124..6e666ad 100644
--- a/drivers/gpu/drm/i915/intel_uncore.c
+++ b/drivers/gpu/drm/i915/intel_uncore.c
@@ -1084,10 +1084,15 @@ int i915_get_reset_stats_ioctl(struct drm_device *dev,
 	}
 	hs = &ctx->hang_stats;
 
-	if (capable(CAP_SYS_ADMIN))
+	if (capable(CAP_SYS_ADMIN)) {
+		int i;
+		struct intel_engine_cs *ring;
 		args->reset_count = i915_reset_count(&dev_priv->gpu_error);
-	else
+		for_each_ring(ring, dev_priv, i)
+			args->reset_count += ring->hangcheck.total;
+	} else {
 		args->reset_count = 0;
+	}
 
 	args->batch_active = hs->batch_active;
 	args->batch_pending = hs->batch_pending;
-- 
1.9.1

