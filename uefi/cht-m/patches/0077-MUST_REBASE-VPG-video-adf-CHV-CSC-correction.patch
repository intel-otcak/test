From 490df8de2f248bee69349649c2e471fb8255dfb4 Mon Sep 17 00:00:00 2001
Message-Id: <490df8de2f248bee69349649c2e471fb8255dfb4.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Kausal Malladi <Kausal.Malladi@intel.com>
Date: Sat, 31 Jan 2015 16:39:11 +0530
Subject: [PATCH 77/95] MUST_REBASE [VPG]: video/adf: CHV CSC correction

Thus patch implements core function to program Color space conversion
registers on CHV platform.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-4164
Change-Id: Iadddb46c42130da5f5f7f4d618a9384ba6e98c25
Signed-off-by: Kausal Malladi <Kausal.Malladi@intel.com>
---
 .../adf/intel/core/vlv/chv_color_correction.c      |   73 ++++++++++++++++++++
 1 file changed, 73 insertions(+)

diff --git a/drivers/video/adf/intel/core/vlv/chv_color_correction.c b/drivers/video/adf/intel/core/vlv/chv_color_correction.c
index 48740cf..8492ecb 100644
--- a/drivers/video/adf/intel/core/vlv/chv_color_correction.c
+++ b/drivers/video/adf/intel/core/vlv/chv_color_correction.c
@@ -38,6 +38,8 @@ const struct color_property chv_pipe_color_corrections[] = {
 		.prop_id = csc,
 		.len = CHV_CSC_VALS,
 		.name = "csc-correction",
+		.set_property = chv_set_csc,
+		.disable_property = chv_disable_csc,
 		.validate = chv_validate,
 	},
 
@@ -99,6 +101,77 @@ const struct color_property chv_plane_color_corrections[] = {
 	}
 };
 
+/* Core function to program CSC regs */
+bool chv_set_csc(struct color_property *property, u64 *data, u8 pipe_id)
+{
+	u32 count = 0;
+	u32 csc_reg, data_size, pipe;
+	u32 c0, c1, c2;
+
+	pipe = pipe_id;
+	data_size = property->len;
+
+	/* Validate input */
+	if (data_size != CHV_CSC_VALS) {
+		pr_err("ADF: CM: Unexpected value count for CSC LUT\n");
+		return false;
+	}
+
+	csc_reg = _PIPE_CSC_BASE(pipe);
+
+	while (count < CHV_CSC_VALS) {
+		property->lut[count] = data[count];
+		c0 = data[count++] & CHV_CSC_VALUE_MASK;
+
+		property->lut[count] = data[count];
+		c1 = data[count++] & CHV_CSC_VALUE_MASK;
+
+		REG_WRITE(csc_reg, (c1 << CHV_CSC_COEFF_SHIFT) | c0);
+		csc_reg += 4;
+
+		/*
+		 * Last register has only one 16 bit value (C8)
+		 * to be programmed, other bits are Reserved
+		 */
+		if (count == 8) {
+			property->lut[count] = data[count];
+			c2 = data[count++] & CHV_CSC_VALUE_MASK;
+
+			REG_WRITE(csc_reg, c2);
+		}
+
+	}
+
+	/* Enable CSC on CGM_CONTROL register on respective pipe */
+	REG_WRITE(_PIPE_CGM_CONTROL(pipe),
+		REG_READ(_PIPE_CGM_CONTROL(pipe)) | CGM_CSC_EN);
+
+	pr_info("ADF: CM: Setting CSC on pipe = %d\n", pipe);
+
+	property->status = true;
+	pr_info("ADF: CM: CSC successfully set on pipe = %d\n", pipe);
+	return true;
+}
+
+bool chv_disable_csc(struct color_property *property, u8 pipe_id)
+{
+	u32 pipe, cgm_control_reg;
+
+	pipe = pipe_id;
+
+	/* Disable csc correction */
+	cgm_control_reg = REG_READ(_PIPE_CGM_CONTROL(pipe));
+	cgm_control_reg &= ~CGM_CSC_EN;
+	REG_WRITE(_PIPE_CGM_CONTROL(pipe), cgm_control_reg);
+
+	property->status = false;
+
+	/* Clear old values */
+	memset(property->lut, 0, property->len * sizeof(u64));
+	pr_info("ADF: CM: CSC disabled on pipe = %d\n", pipe);
+	return true;
+}
+
 bool chv_get_color_correction(void *props_data, int object_type)
 {
 	u32 count = 0;
-- 
1.7.9.5

