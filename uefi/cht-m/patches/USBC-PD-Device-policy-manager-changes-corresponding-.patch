From b7000f7761bfce363f65284c44adda965e20ea10 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Tue, 15 Dec 2015 17:59:19 +0530
Subject: [PATCH 7/8] USBC-PD: Device policy manager changes corresponding to
 merged PE.

With sink, source and display policies merged to single policy engine,
some of the existing helper functions become invalid and required some
new helper functions. This patch adds corresponding change required in
DPM and remove old policy_engine.h as pd_policy.h serves the purpose.

Change-Id: Ib126c71eeb4f6e46451d980e600b40df5c4b046c
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-12097
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/448723
---
 drivers/usb/typec/pd/devpolicy_mgr.c | 101 +++---
 drivers/usb/typec/pd/devpolicy_mgr.h | 110 +++++-
 drivers/usb/typec/pd/policy_engine.h | 626 -----------------------------------
 3 files changed, 159 insertions(+), 678 deletions(-)
 delete mode 100644 drivers/usb/typec/pd/policy_engine.h

diff --git a/drivers/usb/typec/pd/devpolicy_mgr.c b/drivers/usb/typec/pd/devpolicy_mgr.c
index 9a65946..268dcf0 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.c
+++ b/drivers/usb/typec/pd/devpolicy_mgr.c
@@ -33,7 +33,8 @@
 #include <linux/extcon.h>
 #include <linux/usb_typec_phy.h>
 #include "devpolicy_mgr.h"
-#include "policy_engine.h"
+#include "pd_policy.h"
+#include "protocol.h"
 
 static struct power_cap spcaps[] = {
 	{
@@ -57,6 +58,26 @@ struct dpm_cable_state {
 	bool cbl_state;
 };
 
+
+static int dpm_handle_psy_notification(struct notifier_block *nb,
+				   unsigned long event, void *data)
+{
+	struct devpolicy_mgr *dpm = container_of(nb, struct devpolicy_mgr,
+					psy_nb);
+	struct power_supply *psy;
+
+	if (data == NULL)
+		return NOTIFY_DONE;
+	pr_debug("DPM: PSY Event=%lu\n", event);
+	psy = data;
+	if (IS_BATTERY(psy) &&
+		event == PSY_EVENT_PROP_CHANGED)
+		schedule_work(&dpm->psy_work);
+
+	return NOTIFY_OK;
+}
+
+
 static struct power_supply *dpm_get_psy(struct devpolicy_mgr *dpm,
 							enum psy_type type)
 {
@@ -93,22 +114,24 @@ static struct power_supply *dpm_get_psy(struct devpolicy_mgr *dpm,
 	return NULL;
 }
 
-/* Reading the state of charge value of the battery */
-static int dpm_read_soc(struct devpolicy_mgr *dpm, int *soc)
+static void dpm_psy_worker(struct work_struct *work)
 {
+	struct devpolicy_mgr *dpm = container_of(work, struct devpolicy_mgr,
+							psy_work);
 	struct power_supply *psy;
 	union power_supply_propval val;
 	int ret;
 
 	psy = dpm_get_psy(dpm, PSY_TYPE_BATTERY);
 	if (!psy)
-		return -EINVAL;
-
+		return;
 	ret = psy->get_property(psy, POWER_SUPPLY_PROP_CAPACITY, &val);
-	if (!ret)
-		*soc = val.intval;
-
-	return ret;
+	if (ret) {
+		pr_err("DPM: Failed to read battery soc\n");
+		return;
+	}
+	dpm->battery_capacity = val.intval;
+	pr_debug("DPM: battery_capacity=%d\n", dpm->battery_capacity);
 }
 
 static int dpm_get_max_srcpwr_cap(struct devpolicy_mgr *dpm,
@@ -154,13 +177,7 @@ static enum batt_soc_status dpm_get_batt_status(struct devpolicy_mgr *dpm)
 {
 	int soc;
 
-	if (dpm_read_soc(dpm, &soc)) {
-		pr_err("DPM: Error in getting soc\n");
-		return -ENODATA;
-	} else {
-		pr_debug("DPM: capacity = %d\n", soc);
-	}
-
+	soc = dpm->battery_capacity;
 	if (IS_BATT_SOC_FULL(soc))
 		return BATT_SOC_FULL;
 	else if (IS_BATT_SOC_GOOD(soc))
@@ -326,10 +343,13 @@ static int dpm_get_sink_pr_swap_status(struct devpolicy_mgr *dpm)
 static int dpm_is_pr_swapped(struct devpolicy_mgr *dpm,
 					enum pwr_role prole)
 {
-	if (prole == POWER_ROLE_SINK)
-		return dpm_get_sink_pr_swap_status(dpm);
+	int ret = 0;
 
-	return 0;
+	if (prole == POWER_ROLE_SINK)
+		ret = dpm_get_sink_pr_swap_status(dpm);
+	else if (prole == POWER_ROLE_SOURCE)
+		ret = true;
+	return ret;
 }
 
 static int dpm_get_min_current(struct devpolicy_mgr *dpm,
@@ -353,22 +373,9 @@ static enum cable_state dpm_get_cable_state(struct devpolicy_mgr *dpm,
 static void dpm_notify_policy_evt(struct devpolicy_mgr *dpm,
 					enum devpolicy_mgr_events evt)
 {
-	if (dpm && dpm->pe && dpm->pe->ops && dpm->pe->ops->notify_dpm_evt)
-		dpm->pe->ops->notify_dpm_evt(dpm->pe, evt);
-
-}
-
-static void dpm_set_pu_pd(struct devpolicy_mgr *dpm, bool pu_pd)
-{
-	if (dpm && dpm->phy && dpm->phy->set_pu_pd)
-		dpm->phy->set_pu_pd(dpm->phy, pu_pd);
-}
+	if (dpm && dpm->p)
+		pe_notify_dpm_evt(dpm->p, evt);
 
-static bool dpm_get_vbus_state(struct devpolicy_mgr *dpm)
-{
-	if (dpm && dpm->phy && dpm->phy->is_vbus_on)
-		return dpm->phy->is_vbus_on(dpm->phy);
-	return false;
 }
 
 static void dpm_notify_cable_state_worker(struct work_struct *work)
@@ -488,8 +495,6 @@ static void dpm_update_power_role(struct devpolicy_mgr *dpm,
 	enum pwr_role prev_prole;
 	char *cbl_type = NULL;
 	bool cbl_state = false;
-	bool set_pu_pd = false;
-	bool pu_pd = false;
 
 	mutex_lock(&dpm->role_lock);
 	cur_prole = dpm->cur_prole;
@@ -504,19 +509,11 @@ static void dpm_update_power_role(struct devpolicy_mgr *dpm,
 			/* Role swap from SRC to SNK, Send SRC disconnect */
 			cbl_type = "USB_TYPEC_SRC";
 			cbl_state = CABLE_DETACHED;
-			/* Pull-Down the CC line */
-			set_pu_pd = true;
-			pu_pd = false;
 		} else if (cur_prole == POWER_ROLE_SINK) {
 			dpm->consumer_state = CABLE_DETACHED;
 			/* Role swap from SNK to SRC, Send SNK disconnect */
 			cbl_type = "USB_TYPEC_SNK";
 			cbl_state = CABLE_DETACHED;
-			/* PR SWAP from SNK to SRC.
-			 * Pull-Up the CC line
-			 */
-			set_pu_pd = true;
-			pu_pd = true;
 		} else {
 			pr_warn("DPM:%s:PR_SWAP cann't be processed\n",
 					__func__);
@@ -556,8 +553,6 @@ static void dpm_update_power_role(struct devpolicy_mgr *dpm,
 
 	if (cbl_type != NULL)
 		dpm_notify_cable_state(dpm, cbl_type, cbl_state);
-	if (set_pu_pd)
-		dpm_set_pu_pd(dpm, pu_pd);
 
 update_prole_err:
 	mutex_unlock(&dpm->role_lock);
@@ -636,9 +631,6 @@ static void dpm_handle_ext_cable_event(struct devpolicy_mgr *dpm,
 			mutex_unlock(&dpm->role_lock);
 
 			dpm_notify_policy_evt(dpm, dpm_evt);
-			typec_enable_autocrc(dpm->phy,
-				dpm_evt == DEVMGR_EVENT_UFP_CONNECTED
-				|| dpm_evt == DEVMGR_EVENT_DFP_CONNECTED);
 
 		} else
 			mutex_unlock(&dpm->role_lock);
@@ -1125,7 +1117,6 @@ static struct dpm_interface interface = {
 	.update_power_role = dpm_update_power_role,
 	.is_pr_swapped = dpm_is_pr_swapped,
 	.set_display_port_state = dpm_set_display_port_state,
-	.get_vbus_state = dpm_get_vbus_state,
 };
 
 struct devpolicy_mgr *dpm_register_syspolicy(struct typec_phy *phy,
@@ -1198,6 +1189,15 @@ struct devpolicy_mgr *dpm_register_syspolicy(struct typec_phy *phy,
 		goto pd_dev_reg_fail;
 	}
 
+	dpm->psy_nb.notifier_call = dpm_handle_psy_notification;
+	ret = power_supply_reg_notifier(&dpm->psy_nb);
+	if (ret) {
+		pr_err("DPM: Unable to register psy\n");
+		goto pd_dev_reg_fail;
+	}
+	INIT_WORK(&dpm->psy_work, dpm_psy_worker);
+	schedule_work(&dpm->psy_work);
+
 	return dpm;
 
 pd_dev_reg_fail:
@@ -1223,6 +1223,7 @@ void dpm_unregister_syspolicy(struct devpolicy_mgr *dpm)
 		protocol_unbind_dpm(dpm->phy);
 		extcon_unregister_interest(&dpm->provider_cable_nb);
 		extcon_unregister_interest(&dpm->consumer_cable_nb);
+		power_supply_unreg_notifier(&dpm->psy_nb);
 		kfree(dpm);
 	}
 }
diff --git a/drivers/usb/typec/pd/devpolicy_mgr.h b/drivers/usb/typec/pd/devpolicy_mgr.h
index 3ba0075..d04c04c 100644
--- a/drivers/usb/typec/pd/devpolicy_mgr.h
+++ b/drivers/usb/typec/pd/devpolicy_mgr.h
@@ -91,6 +91,8 @@ enum devpolicy_mgr_events {
 	DEVMGR_EVENT_UFP_DISCONNECTED,
 	DEVMGR_EVENT_PR_SWAP,
 	DEVMGR_EVENT_DR_SWAP,
+	DEVMGR_EVENT_VBUS_ON,
+	DEVMGR_EVENT_VBUS_OFF,
 };
 
 enum policy_type {
@@ -163,7 +165,7 @@ struct devpolicy_mgr {
 	enum pwr_role prev_prole;
 	enum data_role cur_drole;
 	enum data_role prev_drole;
-	struct policy_engine *pe;
+	struct policy *p;
 	/* power delivery class device*/
 	struct device *pd_dev;
 	struct work_struct cable_notify_work;
@@ -171,6 +173,9 @@ struct devpolicy_mgr {
 	struct list_head cable_notify_list;
 	struct power_supply *charger_psy;
 	struct power_supply *battery_psy;
+	struct notifier_block psy_nb;
+	struct work_struct psy_work;
+	int battery_capacity;
 };
 
 struct dpm_interface {
@@ -204,9 +209,110 @@ struct dpm_interface {
 	int (*set_display_port_state)(struct devpolicy_mgr *dpm,
 					enum cable_state state,
 					enum typec_dp_cable_type type);
-	bool (*get_vbus_state)(struct devpolicy_mgr *dpm);
 };
 
+#ifdef CONFIG_INTEL_WCOVE_GPIO
+extern int wcgpio_set_vbus_state(bool state);
+static inline int devpolicy_set_vbus_state(struct devpolicy_mgr *dpm,
+						bool state)
+{
+	if (!dpm)
+		return -ENODEV;
+	return wcgpio_set_vbus_state(state);
+}
+#else /* CONFIG_INTEL_WCOVE_GPIO */
+static inline int devpolicy_set_vbus_state(struct devpolicy_mgr *dpm,
+						bool state)
+{
+	return -ENODEV;
+}
+#endif /* CONFIG_INTEL_WCOVE_GPIO */
+
+#ifdef CONFIG_PINCTRL_CHERRYVIEW
+
+/* Cherryview display hpd gpio pin*/
+#define CHV_HPD_GPIO		409
+#define CHV_HPD_INV_BIT		(1 << 6)
+
+void chv_gpio_cfg_inv(int gpio, int inv, int en);
+static inline int devpolicy_set_hpd_state(struct devpolicy_mgr *dpm,
+						bool state)
+{
+	if (!dpm)
+		return -ENODEV;
+	chv_gpio_cfg_inv(CHV_HPD_GPIO, CHV_HPD_INV_BIT, !state);
+	return 0;
+}
+#else /* CONFIG_PINCTRL_CHERRYVIEW */
+static inline int devpolicy_set_hpd_state(struct devpolicy_mgr *dpm,
+						bool state)
+{
+	return 0;
+}
+#endif /* CONFIG_PINCTRL_CHERRYVIEW */
+
+static inline int devpolicy_enable_pd(struct devpolicy_mgr *dpm,
+						bool state)
+{
+	if (dpm && dpm->phy)
+		return typec_enable_autocrc(dpm->phy, state);
+	return -ENODEV;
+}
+
+static inline int devpolicy_set_dp_state(struct devpolicy_mgr *dpm,
+						enum cable_state state,
+						enum typec_dp_cable_type type)
+{
+	if (dpm && dpm->interface && dpm->interface->set_display_port_state)
+		return dpm->interface->set_display_port_state(dpm,
+							state, type);
+
+	return -ENODEV;
+}
+
+static inline void devpolicy_set_cc_pu_pd(struct devpolicy_mgr *dpm,
+					enum typec_cc_pull pull)
+{
+	if (dpm && dpm->phy && dpm->phy->set_pu_pd)
+		dpm->phy->set_pu_pd(dpm->phy, pull);
+}
+
+static inline bool devpolicy_get_vbus_state(struct devpolicy_mgr *dpm)
+{
+	if (dpm && dpm->phy && dpm->phy->is_vbus_on)
+		return dpm->phy->is_vbus_on(dpm->phy);
+	return false;
+}
+
+static inline bool devpolicy_get_vconn_state(struct devpolicy_mgr *dpm)
+{
+	if (dpm && dpm->phy && dpm->phy->enable_vconn)
+		return dpm->phy->is_vconn_enabled(dpm->phy);
+	return false;
+}
+
+static inline int devpolicy_set_vconn_state(struct devpolicy_mgr *dpm,
+								bool state)
+{
+	if (dpm && dpm->phy && dpm->phy->enable_vconn)
+		return dpm->phy->enable_vconn(dpm->phy, state);
+	return -EINVAL;
+}
+
+static inline void devpolicy_update_data_role(struct devpolicy_mgr *dpm,
+					enum data_role role)
+{
+	if (dpm && dpm->interface && dpm->interface->update_data_role)
+		dpm->interface->update_data_role(dpm, role);
+}
+
+static inline void devpolicy_update_power_role(struct devpolicy_mgr *dpm,
+					enum pwr_role role)
+{
+	if (dpm && dpm->interface && dpm->interface->update_power_role)
+		dpm->interface->update_power_role(dpm, role);
+}
+
 static inline int devpolicy_get_max_srcpwr_cap(struct devpolicy_mgr *dpm,
 					struct power_cap *caps)
 {
diff --git a/drivers/usb/typec/pd/policy_engine.h b/drivers/usb/typec/pd/policy_engine.h
deleted file mode 100644
index 8eef239..0000000
--- a/drivers/usb/typec/pd/policy_engine.h
+++ /dev/null
@@ -1,626 +0,0 @@
-#ifndef __POLICY_ENGINE_H__
-#define __POLICY_ENGINE_H__
-
-#include "message.h"
-#include "devpolicy_mgr.h"
-#include "protocol.h"
-
-enum pe_event {
-
-	/* Control Messages (0 - 13) */
-	PE_EVT_SEND_NONE,
-	PE_EVT_SEND_GOODCRC,
-	PE_EVT_SEND_GOTOMIN,
-	PE_EVT_SEND_ACCEPT,
-	PE_EVT_SEND_REJECT,
-	PE_EVT_SEND_PING,
-	PE_EVT_SEND_PS_RDY,
-	PE_EVT_SEND_GET_SRC_CAP,
-	PE_EVT_SEND_GET_SINK_CAP,
-	PE_EVT_SEND_DR_SWAP,
-	PE_EVT_SEND_PR_SWAP,
-	PE_EVT_SEND_VCONN_SWAP,
-	PE_EVT_SEND_WAIT,
-	PE_EVT_SEND_SOFT_RESET,
-
-	/* Data Messages (14 - 18) */
-	PE_EVT_SEND_SRC_CAP,
-	PE_EVT_SEND_REQUEST,
-	PE_EVT_SEND_BIST,
-	PE_EVT_SEND_SNK_CAP,
-	PE_EVT_SEND_VDM,
-
-	/* Control Messages (19 - 32) */
-	PE_EVT_RCVD_NONE,
-	PE_EVT_RCVD_GOODCRC,
-	PE_EVT_RCVD_GOTOMIN,
-	PE_EVT_RCVD_ACCEPT,
-	PE_EVT_RCVD_REJECT,
-	PE_EVT_RCVD_PING,
-	PE_EVT_RCVD_PS_RDY,
-	PE_EVT_RCVD_GET_SRC_CAP,
-	PE_EVT_RCVD_GET_SINK_CAP,
-	PE_EVT_RCVD_DR_SWAP,
-	PE_EVT_RCVD_PR_SWAP,
-	PE_EVT_RCVD_VCONN_SWAP,
-	PE_EVT_RCVD_WAIT,
-	PE_EVT_RCVD_SOFT_RESET,
-
-	/* Data Messages (33 - 37) */
-	PE_EVT_RCVD_SRC_CAP,
-	PE_EVT_RCVD_REQUEST,
-	PE_EVT_RCVD_BIST,
-	PE_EVT_RCVD_SNK_CAP,
-	PE_EVT_RCVD_VDM,
-
-	/* Other Messages (38 - 41) */
-	PE_EVT_SEND_HARD_RESET,
-	PE_EVT_SEND_PROTOCOL_RESET,
-	PE_EVT_RCVD_HARD_RESET,
-	PE_EVT_RCVD_HARD_RESET_COMPLETE,
-
-};
-
-enum pe_states {
-
-	PE_STATE_STARTUP,
-
-	/* Source Port (1 - 12 ) */
-	PE_SRC_STARTUP,
-	PE_SRC_DISCOVERY,
-	PE_SRC_SEND_CAPABILITIES,
-	PE_SRC_NEGOTIATE_CAPABILITY,
-	PE_SRC_TRANSITION_SUPPLY,
-	PE_SRC_READY,
-	PE_SRC_DISABLED,
-	PE_SRC_CAPABILITY_RESPONSE,
-	PE_SRC_HARD_RESET,
-	PE_SRC_TRANSITION_TO_DEFAULT,
-	PE_SRC_GIVE_SOURCE_CAP,
-	PE_SRC_GET_SINK_CAP,
-
-	/* Sink Port (13 - 23) */
-	PE_SNK_STARTUP,
-	PE_SNK_DISCOVERY,
-	PE_SNK_WAIT_FOR_CAPABILITIES,
-	PE_SNK_EVALUATE_CAPABILITY,
-	PE_SNK_SELECT_CAPABILITY,
-	PE_SNK_TRANSITION_SINK,
-	PE_SNK_READY,
-	PE_SNK_HARD_RESET,
-	PE_SNK_TRANSITION_TO_DEFAULT,
-	PE_SNK_GIVE_SINK_CAP,
-	PE_SNK_GET_SOURCE_CAP,
-
-	/* Source Port Soft Reset (24, 25) */
-	PE_SRC_SEND_SOFT_RESET,
-	PE_SRC_SOFT_RESET,
-
-	/* Sink Port Soft Reset (26, 27) */
-	PE_SNK_SEND_SOFT_RESET,
-	PE_SNK_SOFT_RESET,
-
-	/* Source Port Ping (28)*/
-	PE_SRC_PING,
-
-	/* Type-A/B Dual-Role (initially Source Port) Ping (29) */
-	PE_PRS_SRC_SNK_PING,
-
-	/* Type-A/B Dual-Role (initially Sink Port) Ping (30) */
-	PE_PRS_SNK_SRC_PING,
-
-	/* Type-A/B Hard Reset of P/C in Sink Role (31, 32) */
-	PE_PC_SNK_HARD_RESET,
-	PE_PC_SNK_SWAP_RECOVERY,
-
-	/* Type-A/B Hard Reset of C/P in Source Role (33, 34) */
-	PE_CP_SRC_HARD_RESET,
-	PE_CP_SRC_TRANSITION_TO_OFF,
-
-	/* Type-A/B C/P Dead Battery/Power Loss (35 - 41) */
-	PE_DB_CP_CHECK_FOR_VBUS,
-	PE_DB_CP_POWER_VBUS_DB,
-	PE_DB_CP_WAIT_FOR_BIT_STREAM,
-	PE_DB_CP_POWER_VBUS_5V,
-	PE_DB_CP_WAIT_BIT_STREAM_STOP,
-	PE_DB_CP_UNPOWER_VBUS,
-	PE_DB_CP_PS_DISCHARGE,
-
-	/* Type-A/B P/C Dead Battery/Power Loss (42 - 46) */
-	PE_DB_PC_UNPOWERED,
-	PE_DB_PC_CHECK_POWER,
-	PE_DB_PC_SEND_BIT_STREAM,
-	PE_DB_PC_WAIT_TO_DETECT,
-	PE_DB_PC_WAIT_TO_START,
-
-	/* Type-C DFP to UFP Data Role Swap (47 - 51) */
-	PE_DRS_DFP_UFP_EVALUATE_DR_SWAP,
-	PE_DRS_DFP_UFP_ACCEPT_DR_SWAP,
-	PE_DRS_DFP_UFP_CHANGE_TO_UFP,
-	PE_DRS_DFP_UFP_SEND_DR_SWAP,
-	PE_DRS_DFP_UFP_REJECT_DR_SWAP,
-
-	/* Type-C UFP to DFP Data Role Swap (52 - 56) */
-	PE_DRS_UFP_DFP_EVALUATE_DR_SWAP,
-	PE_DRS_UFP_DFP_ACCEPT_DR_SWAP,
-	PE_DRS_UFP_DFP_CHANGE_TO_DFP,
-	PE_DRS_UFP_DFP_SEND_DR_SWAP,
-	PE_DRS_UFP_DFP_REJECT_DR_SWAP,
-
-	/* Source to Sink Power Role Swap (57 - 63) */
-	PE_PRS_SRC_SNK_EVALUATE_PR_SWAP,
-	PE_PRS_SRC_SNK_ACCEPT_PR_SWAP,
-	PE_PRS_SRC_SNK_TRANSITION_TO_OFF,
-	PE_PRS_SRC_SNK_ASSERT_RD,
-	PE_PRS_SRC_SNK_SOURCE_OFF,
-	PE_PRS_SRC_SNK_SEND_PR_SWAP,
-	PE_PRS_SRC_SNK_REJECT_PR_SWAP,
-
-	/* Sink to Source Power Role Swap (64 - 70) */
-	PE_PRS_SNK_SRC_EVALUATE_PR_SWAP,
-	PE_PRS_SNK_SRC_ACCEPT_PR_SWAP,
-	PE_PRS_SNK_SRC_TRANSITION_TO_OFF,
-	PE_PRS_SNK_SRC_ASSERT_RP,
-	PE_PRS_SNK_SRC_SOURCE_ON,
-	PE_PRS_SNK_SRC_SEND_PR_SWAP,
-	PE_PRS_SNK_SRC_REJECT_PR_SWAP,
-
-	/* Dual-Role Source Port Get Source Capabilities (71) */
-	PE_DR_SRC_GET_SOURCE_CAP,
-
-	/* Dual-Role Source Port Give Sink Capabilities (72) */
-	PE_DR_SRC_GIVE_SINK_CAP,
-
-	/* Dual-Role Sink Port Get Sink Capabilities (73) */
-	PE_DR_SNK_GET_SINK_CAP,
-
-	/* Dual-Role Sink Port Give Source Capabilities (74) */
-	PE_DR_SNK_GIVE_SOURCE_CAP,
-
-	/* Type-C DFP VCONN Swap (75 - 79) */
-	PE_VCS_DFP_SEND_SWAP,
-	PE_VCS_DFP_WAIT_FOR_UFP_VCONN,
-	PE_VCS_DFP_TURN_OFF_VCONN,
-	PE_VCS_DFP_TURN_ON_VCONN,
-	PE_VCS_DFP_SEND_PS_Rdy,
-
-	/* Type-C UFP VCONN Swap (80 - 86) */
-	PE_VCS_UFP_EVALUATE_SWAP,
-	PE_VCS_UFP_ACCEPT_SWAP,
-	PE_VCS_UFP_REJECT_SWAP,
-	PE_VCS_UFP_WAIT_FOR_DFP_VCONN,
-	PE_VCS_UFP_TURN_OFF_VCONN,
-	PE_VCS_UFP_TURN_ON_VCONN,
-	PE_VCS_UFP_SEND_PS_RDY,
-
-	/* UFP VDM (87 - 97) */
-	PE_UFP_VDM_GET_IDENTITY,
-	PE_UFP_VDM_SEND_IDENTITY,
-	PE_UFP_VDM_GET_SVIDS,
-	PE_UFP_VDM_SEND_SVIDS,
-	PE_UFP_VDM_GET_MODES,
-	PE_UFP_VDM_SEND_MODES,
-	PE_UFP_VDM_EVALUATE_MODE_ENTRY,
-	PE_UFP_VDM_MODE_ENTRY_ACK,
-	PE_UFP_VDM_MODE_ENTRY_NAK,
-	PE_UFP_VDM_MODE_EXIT,
-	PE_UFP_VDM_MODE_EXIT_ACK,
-
-	/* UFP VDM Attention (98) */
-	PE_UFP_VDM_ATTENTION_REQUEST,
-
-	/* DFP VDM Discover Identity (99 - 101) */
-	PE_DFP_VDM_IDENTITY_REQUEST,
-	PE_DFP_VDM_IDENTITY_ACKED,
-	PE_DFP_VDM_IDENTITY_NAKED,
-
-	/* DFP VDM Discover SVIDs (102 - 104) */
-	PE_DFP_VDM_SVIDS_REQUEST,
-	PE_DFP_VDM_SVIDS_ACKED,
-	PE_DFP_VDM_SVIDS_NAKED,
-
-	/* DFP VDM Discover Modes (105 - 107) */
-	PE_DFP_VDM_MODES_REQUEST,
-	PE_DFP_VDM_MODES_ACKED,
-	PE_DFP_VDM_MODES_NAKED,
-
-	/* DFP VDM Mode Entry (108 - 110) */
-	PE_DFP_VDM_MODES_ENTRY_REQUEST,
-	PE_DFP_VDM_MODES_ENTRY_ACKED,
-	PE_DFP_VDM_MODES_ENTRY_NAKED,
-
-	/* DFP VDM Mode Exit (111, 112) */
-	PE_DFP_VDM_MODE_EXIT_REQUEST,
-	PE_DFP_VDM_MODE_EXIT_ACKED,
-
-	/* Source Startup VDM Discover Identity (113 - 115) */
-	PE_SRC_VDM_IDENTITY_REQUEST,
-	PE_SRC_VDM_IDENTITY_ACKED,
-	PE_SRC_VDM_IDENTITY_NAKED,
-
-	/* DFP VDM Attention (116) */
-	PE_DFP_VDM_ATTENTION_REQUEST,
-
-	/* USB to USB Cable (117 - 128) */
-	PE_CBL_READY,
-	PE_CBL_GET_IDENTITY,
-	PE_CBL_SEND_IDENTITY,
-	PE_CBL_GEG_SVIDS,
-	PE_CBL_SEND_SVIDS,
-	PE_CBL_GEG_MODES,
-	PE_CBL_SEND_MODES,
-	PE_CBL_EVALUATE_MODE_ENTRY,
-	PE_CBL_MODE_ENTRY_ACK,
-	PE_CBL_MODE_ENTRY_NAK,
-	PE_CBL_MODE_EXUIT,
-	PE_CBL_MODE_EXIT_ACK,
-
-	/* Cable Soft Reset (129) */
-	PE_CBL_SOFT_RESET,
-
-	/* Cable Hard Reset (130) */
-	PE_CBL_HARD_RESET,
-
-	/* BIST Receive Mode (131, 132) */
-	PE_BIST_RECEIVE_MODE,
-	PE_BIST_FRAME_RECEIVED,
-
-	/* BIST Transmit Mode (133, 134) */
-	PE_BIST_TRANSMIT_MODE,
-	PE_BIST_SEND_FRAME,
-
-	/* BIST Carrier Mode and Eye Pattern (135 - 139) */
-	PE_BIST_EYE_PATTERN_MODE,
-	PE_BIST_CARRIER_MODE_0,
-	PE_BIST_CARRIER_MODE_1,
-	PE_BIST_CARRIER_MODE_2,
-	PE_BIST_CARRIER_MODE_3,
-
-	/* Type-C referenced states (140) */
-	ERROR_RECOVERY,
-};
-
-enum policy_state {
-	POLICY_STATE_UNKNOWN,
-	POLICY_STATE_OFFLINE,
-	POLICY_STATE_ONLINE,
-};
-
-enum policy_status {
-	POLICY_STATUS_UNKNOWN,
-	POLICY_STATUS_RUNNING,
-	POLICY_STATUS_FAIL,
-	POLICY_STATUS_SUCCESS,
-};
-
-/* These events will be generated by policies to policy engine*/
-enum pe_status_change_evt {
-	PE_STATUS_CHANGE_PD_FAIL,
-	PE_STATUS_CHANGE_PD_SUCCESS,
-	PE_STATUS_CHANGE_DP_FAIL,
-	PE_STATUS_CHANGE_DP_SUCCESS,
-	PE_STATUS_CHANGE_DR_CHANGED,
-	PE_STATUS_CHANGE_PR_CHANGED,
-	PE_STATUS_CHANGE_PR_SWAP_FAIL,
-};
-
-struct pe_port_partner_caps {
-	unsigned pp_is_dual_drole:1;
-	unsigned pp_is_dual_prole:1;
-	unsigned pp_is_ext_pwrd:1;
-};
-
-struct policy {
-	enum policy_type type;
-	struct policy_engine *pe;
-	struct list_head list;
-	enum policy_status status;
-	enum policy_state state;
-	int (*start)(struct policy *p);
-	int (*stop)(struct policy *p);
-	int (*rcv_pkt)(struct policy *p, struct pd_packet *pkt,
-				enum pe_event evt);
-	int (*rcv_cmd)(struct policy *p, enum pe_event evt);
-	int (*rcv_request)(struct policy *p, enum pe_event evt);
-	int (*get_port_caps)(struct policy *p,
-				struct pe_port_partner_caps *pp_caps);
-	void (*exit)(struct policy *p);
-};
-
-struct policy_engine {
-	struct pd_prot *prot;
-	struct mutex pe_lock;
-
-	struct devpolicy_mgr *dpm;
-	struct mutex dpm_evt_lock;
-
-	struct pe_operations *ops;
-	struct pd_policy *supported_policies;
-	struct work_struct policy_init_work;
-
-	struct list_head policy_list;
-	enum data_role	cur_drole;
-	enum pwr_role cur_prole;
-	bool is_pd_connected;
-	struct pe_port_partner_caps pp_caps;
-};
-
-struct pe_operations {
-	int (*get_snkpwr_cap)(struct policy_engine *pe,
-					struct power_cap *cap);
-	int (*get_srcpwr_cap)(struct policy_engine *pe,
-					struct power_cap *cap);
-	int (*get_snkpwr_caps)(struct policy_engine *pe,
-					struct power_caps *caps);
-	int (*get_max_snkpwr_cap)(struct policy_engine *pe,
-					struct power_cap *cap);
-	enum data_role (*get_data_role)(struct policy_engine *pe);
-	enum pwr_role (*get_power_role)(struct policy_engine *pe);
-	int (*set_data_role)(struct policy_engine *pe, enum data_role role);
-	int (*set_power_role)(struct policy_engine *pe, enum pwr_role role);
-	int (*set_charger_mode)(struct policy_engine *pe,
-					enum charger_mode mode);
-	int (*update_charger)(struct policy_engine *pe,
-					int ilim, int query);
-	int (*get_min_snk_current)(struct policy_engine *pe,
-					int *ma);
-	int (*is_pr_swap_support)(struct policy_engine *pe,
-						enum pwr_role prole);
-	int (*send_packet)(struct policy_engine *pe, void *data,
-				int len, u8 msg_type, enum pe_event evt);
-	enum cable_state (*get_cable_state)(struct policy_engine *pe,
-						enum cable_type type);
-	int (*set_pd_state)(struct policy_engine *pe, bool state);
-	bool (*get_pd_state)(struct policy_engine *pe);
-	int (*process_data_msg)(struct policy_engine *pe, enum pe_event evt,
-				struct pd_packet *data);
-	int (*process_ctrl_msg)(struct policy_engine *pe, enum pe_event evt,
-				struct pd_packet *data);
-	int (*process_cmd)(struct policy_engine *pe, enum pe_event cmd);
-	void (*policy_status_changed)(struct policy_engine *pe,
-					enum policy_type ptype,
-					enum pe_status_change_evt state);
-	int (*notify_dpm_evt)(struct policy_engine *pe,
-					enum devpolicy_mgr_events evt);
-};
-
-
-#define pe_get_phy(x)	((x) ?  x->dpm->phy : NULL)
-
-static inline const char *policy_port_type_string(enum policy_type ptype)
-{
-	switch (ptype) {
-	case POLICY_TYPE_SOURCE:
-	return "SOURCE PORT PE";
-	case POLICY_TYPE_SINK:
-		return "SINK PORT PE";
-	case POLICY_TYPE_DISPLAY:
-		return "DISPLAY PORT PE";
-	default:
-		return "UNKNOWN PE TYPE";
-	}
-}
-
-/* methods to initialize/destroy the policy manager */
-static inline int policy_get_srcpwr_cap(struct policy *p, struct power_cap *cap)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_srcpwr_cap)
-		return p->pe->ops->get_srcpwr_cap(p->pe, cap);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_get_snkpwr_cap(struct policy *p, struct power_cap *cap)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_snkpwr_cap)
-		return p->pe->ops->get_snkpwr_cap(p->pe, cap);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_get_snkpwr_caps(struct policy *p,
-						struct power_caps *caps)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_snkpwr_caps)
-		return p->pe->ops->get_snkpwr_caps(p->pe, caps);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_get_max_snkpwr_cap(struct policy *p,
-						struct power_cap *cap)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_max_snkpwr_cap)
-		return p->pe->ops->get_max_snkpwr_cap(p->pe, cap);
-
-	return -ENOTSUPP;
-}
-
-static inline enum data_role policy_get_data_role(struct policy *p)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_data_role)
-		return p->pe->ops->get_data_role(p->pe);
-
-	return DATA_ROLE_NONE;
-}
-
-static inline enum pwr_role policy_get_power_role(struct policy *p)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_power_role)
-		return p->pe->ops->get_power_role(p->pe);
-
-	return POWER_ROLE_NONE;
-}
-
-static inline int policy_set_data_role(struct policy *p, enum data_role role)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->set_data_role)
-		return p->pe->ops->set_data_role(p->pe, role);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_set_power_role(struct policy *p, enum pwr_role role)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->set_power_role)
-		return p->pe->ops->set_power_role(p->pe, role);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_set_charger_mode(struct policy *p,
-						enum charger_mode mode)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->set_charger_mode)
-		return p->pe->ops->set_charger_mode(p->pe, mode);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_update_charger(struct policy *p,
-						int ilim, int query)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->update_charger)
-		return p->pe->ops->update_charger(p->pe, ilim, query);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_get_min_current(struct policy *p,
-						int *ma)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_min_snk_current)
-		return p->pe->ops->get_min_snk_current(p->pe, ma);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_is_pr_swap_support(struct policy *p,
-						enum pwr_role prole)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->is_pr_swap_support)
-		return p->pe->ops->is_pr_swap_support(p->pe, prole);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_send_packet(struct policy *p, void *data, int len,
-					u8 msg_type, enum pe_event evt)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->send_packet)
-		return p->pe->ops->send_packet(p->pe, data, len, msg_type, evt);
-
-	return -ENOTSUPP;
-}
-
-static inline void pe_notify_policy_status_changed(struct policy *p,
-		enum policy_type type, enum pe_status_change_evt status)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->policy_status_changed)
-		p->pe->ops->policy_status_changed(p->pe, type, status);
-}
-
-static inline enum cable_state policy_get_cable_state(struct policy *p,
-							enum cable_type type)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_cable_state)
-		return p->pe->ops->get_cable_state(p->pe, type);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_set_pd_state(struct policy *p, bool state)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->set_pd_state)
-		return p->pe->ops->set_pd_state(p->pe, state);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_get_pd_state(struct policy *p)
-{
-	if (p && p->pe && p->pe->ops && p->pe->ops->get_pd_state)
-		return p->pe->ops->get_pd_state(p->pe);
-
-	return -ENOTSUPP;
-}
-
-static inline int policy_set_dp_state(struct policy *p,
-					enum cable_state state,
-					enum typec_dp_cable_type type)
-{
-	if (p && p->pe && p->pe->dpm && p->pe->dpm->interface
-		&& p->pe->dpm->interface->set_display_port_state)
-		return p->pe->dpm->interface->set_display_port_state(p->pe->dpm,
-					state, type);
-	return -ENODEV;
-}
-
-static inline bool policy_get_vbus_state(struct policy *p)
-{
-	if (p && p->pe && p->pe->dpm && p->pe->dpm->interface
-		&& p->pe->dpm->interface->get_vbus_state)
-		return p->pe->dpm->interface->get_vbus_state(p->pe->dpm);
-	return false;
-}
-
-static inline int policy_engine_bind_dpm(struct devpolicy_mgr *dpm)
-{
-	return 0;
-}
-static inline void policy_engine_unbind_dpm(struct devpolicy_mgr *dpm)
-{ }
-
-static inline int pe_process_cmd(struct policy_engine *pe, enum pe_event cmd)
-{
-	if (pe && pe->ops && pe->ops->process_cmd)
-		return pe->ops->process_cmd(pe, cmd);
-
-	return -ENOTSUPP;
-}
-
-static inline int pe_process_data_msg(struct policy_engine *pe,
-					enum pe_event evt,
-					struct pd_packet *pkt)
-{
-	if (pe && pe->ops && pe->ops->process_data_msg)
-		return pe->ops->process_data_msg(pe, evt, pkt);
-
-	return -ENOTSUPP;
-}
-
-static inline int pe_process_ctrl_msg(struct policy_engine *pe,
-					enum pe_event evt,
-					struct pd_packet *pkt)
-{
-	if (pe && pe->ops && pe->ops->process_ctrl_msg)
-		return pe->ops->process_ctrl_msg(pe, evt, pkt);
-
-	return -ENOTSUPP;
-}
-
-static inline void policy_dpm_update_data_role(struct policy_engine *pe,
-				enum data_role drole)
-{
-	if (pe && pe->dpm && pe->dpm->interface &&
-		pe->dpm->interface->update_data_role)
-		pe->dpm->interface->update_data_role(pe->dpm, drole);
-}
-
-static inline void policy_dpm_update_power_role(struct policy_engine *pe,
-				enum pwr_role prole)
-{
-	if (pe && pe->dpm && pe->dpm->interface &&
-		pe->dpm->interface->update_power_role)
-		pe->dpm->interface->update_power_role(pe->dpm, prole);
-}
-
-extern struct policy *sink_port_policy_init(struct policy_engine *pe);
-struct policy *src_pe_init(struct policy_engine *pe);
-struct policy *disp_pe_init(struct policy_engine *pe);
-extern int dpm_register_pe(struct policy_engine *x, int port);
-extern void dpm_unregister_pe(struct policy_engine *x);
-extern int protocol_bind_pe(struct policy_engine *pe);
-extern void protocol_unbind_pe(struct policy_engine *pe);
-
-#endif /* __POLICY_ENGINE_H__ */
-- 
1.9.1

