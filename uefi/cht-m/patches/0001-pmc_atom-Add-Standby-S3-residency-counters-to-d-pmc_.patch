From cc9aff8ba9c92f6de195a3419d6b6a17be7f67e7 Mon Sep 17 00:00:00 2001
From: Ananth Krishna R <ananth.krishna.r@intel.com>
Date: Mon, 22 Dec 2014 21:18:41 +0530
Subject: [PATCH 1/1] pmc_atom: Add Standby(S3) residency counters to
 /d/pmc_atom/sleep_state

Currently, /d/pmc_atom/sleep_state interface doesn't show/report time
spent by platform in standby aka S3 (Android Suspend). Also, there is
a known HW limitation that there no seperate timer counters for standby
and is bundled together in PMC_S0i3_TMR register.

This patch brings in the necessary changes to capture snapshot of s0i3
timer before and after suspend and report the delta as S3 residency under
/d/pmc_atom/sleep_state interface.

Change-Id: I72162d810f8fa00a55ceab68e9d0bb3d134379e2
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-4778
Signed-off-by: Ananth Krishna R <ananth.krishna.r@intel.com>
---
 arch/x86/kernel/pmc_atom.c | 108 ++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 107 insertions(+), 1 deletion(-)

diff --git a/arch/x86/kernel/pmc_atom.c b/arch/x86/kernel/pmc_atom.c
index b87c2cf..93bbcd5 100644
--- a/arch/x86/kernel/pmc_atom.c
+++ b/arch/x86/kernel/pmc_atom.c
@@ -23,6 +23,7 @@
 #include <linux/seq_file.h>
 #include <linux/io.h>
 #include <linux/uaccess.h>
+#include <linux/suspend.h>
 
 #include <asm/pmc_atom.h>
 
@@ -52,7 +53,18 @@ struct pmc_counters {
 	u64 prev_s0_tmr;
 };
 
-struct pmc_counters s0ix_counters = {0, 0, 0, 0, 0};
+#ifdef CONFIG_PM_SLEEP
+struct standby_stats {
+	u64 residency;
+	u64 tmr_before_susp;
+	u64 tmr_after_susp;
+	bool suspend;
+};
+
+static struct standby_stats s3 = {0, 0, 0, false};
+#endif /* CONFIG_PM_SLEEP */
+
+static struct pmc_counters s0ix_counters = {0, 0, 0, 0, 0};
 static  struct pmc_bit_map *dev_map;
 static  struct pmc_bit_map *pss_map;
 static int dev_num;
@@ -218,6 +230,74 @@ static void pmc_hw_reg_setup(struct pmc_dev *pmc)
 	pmc_reg_write(pmc, PMC_S0IX_WAKE_EN, (u32)PMC_WAKE_EN_SETTING);
 }
 
+#ifdef CONFIG_PM_SLEEP
+static u64 read_pmc_s0i3_tmr_reg(void)
+{
+	struct pmc_dev *pmc = &pmc_device;
+	u64 val = 0;
+
+	/* Check if pmc is valid */
+	if (pmc != NULL) {
+		val = (u64) pmc_reg_read(pmc, PMC_S0I3_TMR) << PMC_TMR_SHIFT;
+		return val;
+	} else {
+		pr_err("PMC_S0I3_TMR register read failed; pmc dev pointer is NULL\n");
+		return -1;
+	}
+}
+
+static int pm_suspend_prep_event(void)
+{
+	u64 tmr = 0;
+
+	if (!s3.suspend) {
+		/* Get the snapshot of s0i3_tmr before standby */
+		tmr = read_pmc_s0i3_tmr_reg();
+		if (tmr < 0)
+			pr_err("Before Suspend: PMC_S0I3_TMR register read returned negative value\n");
+		else
+			s3.tmr_before_susp = tmr;
+	}
+	s3.suspend = true;
+	return NOTIFY_OK;
+}
+
+static int pm_suspend_exit_event(void)
+{
+	u64 tmr = 0;
+
+	if (s3.suspend) {
+		/* Get the snapshot of s0i3_tmr post standby */
+		tmr = read_pmc_s0i3_tmr_reg();
+		if (tmr < 0) {
+			pr_err("Post Suspend: PMC_S0I3_TMR register read returned negative value\n");
+		} else {
+			s3.tmr_after_susp = tmr;
+			/* Compute the time spent in standby */
+			s3.residency += s3.tmr_after_susp - s3.tmr_before_susp;
+		}
+	}
+	s3.suspend = false;
+	return NOTIFY_OK;
+}
+
+static int pm_notification(struct notifier_block *this,
+				 unsigned long event, void *ptr)
+{
+	switch (event) {
+	case PM_SUSPEND_PREPARE:
+		return pm_suspend_prep_event();
+	case PM_POST_SUSPEND:
+		return pm_suspend_exit_event();
+	}
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block pm_event_notifier = {
+		.notifier_call = pm_notification,
+};
+#endif /* CONFIG_PM_SLEEP */
+
 #ifdef CONFIG_DEBUG_FS
 static int pmc_dev_state_show(struct seq_file *s, void *unused)
 {
@@ -298,6 +378,9 @@ static int pmc_sleep_tmr_show(struct seq_file *s, void *unused)
 {
 	struct pmc_dev *pmc = s->private;
 	u64 s0ir_tmr, s0i1_tmr, s0i2_tmr, s0i3_tmr, s0_tmr;
+#ifdef CONFIG_PM_SLEEP
+	u64 standby_time;
+#endif
 
 	s0_tmr = (u64)pmc_reg_read(pmc, PMC_S0_TMR) << PMC_TMR_SHIFT;
 	s0_tmr = s0_tmr - s0ix_counters.prev_s0_tmr;
@@ -317,6 +400,13 @@ static int pmc_sleep_tmr_show(struct seq_file *s, void *unused)
 
 	s0i3_tmr = (u64)pmc_reg_read(pmc, PMC_S0I3_TMR) << PMC_TMR_SHIFT;
 	s0i3_tmr =  s0i3_tmr -  s0ix_counters.prev_s0i3_tmr;
+#ifdef CONFIG_PM_SLEEP
+	/* Case of standby_tmr being higher than s0i3_tmr doesn't arise
+	 * as s0i3_tmr value read from PMC register is the sum of time spent
+	 * in s0i3 and standby. Hence s0i3_tmr will always be higher or equal
+	 */
+	s0i3_tmr = (s0i3_tmr - s3.residency);
+#endif
 	do_div(s0i3_tmr, MSEC_PER_SEC);
 
 	seq_puts(s , "       Residency Time\n");
@@ -325,8 +415,14 @@ static int pmc_sleep_tmr_show(struct seq_file *s, void *unused)
 	seq_printf(s , "S0I1:%13.2llu ms\n", s0i1_tmr);
 	seq_printf(s , "S0I2:%13.2llu ms\n", s0i2_tmr);
 	seq_printf(s , "S0I3:%13.2llu ms\n", s0i3_tmr);
+#ifdef CONFIG_PM_SLEEP
+	standby_time = s3.residency;
+	do_div(standby_time, MSEC_PER_SEC);
+	seq_printf(s , "S3:%13.2llu ms\n", standby_time);
+#endif /* CONFIG_PM_SLEEP */
 	return 0;
 }
+
 static ssize_t pmc_sleep_tmr_write(struct file *file,
 		const char __user *userbuf, size_t count, loff_t *ppos)
 {
@@ -352,6 +448,10 @@ static ssize_t pmc_sleep_tmr_write(struct file *file,
 			(u64)pmc_reg_read(pmc, PMC_S0I3_TMR) << PMC_TMR_SHIFT;
 		s0ix_counters.prev_s0_tmr =
 			(u64)pmc_reg_read(pmc, PMC_S0_TMR) << PMC_TMR_SHIFT;
+#ifdef CONFIG_PM_SLEEP
+		/* Reset the standby_tmr value as well */
+		s3.residency = 0;
+#endif /* CONFIG_PM_SLEEP */
 	}
 	return buf_size;
 }
@@ -445,6 +545,12 @@ static int pmc_setup_dev(struct pci_dev *pdev)
 					dev_map[dev_index].d3_sts_bit;
 	}
 
+#ifdef CONFIG_PM_SLEEP
+	ret = register_pm_notifier(&pm_event_notifier);
+	if (ret)
+		dev_err(&pdev->dev, "error: Registering for PM suspend/resume notifiers failed\n");
+#endif /* CONFIG_PM_SLEEP */
+
 #ifdef CONFIG_DEBUG_FS
 	ret = pmc_dbgfs_register(pmc, pdev);
 	if (ret) {
-- 
1.9.1

