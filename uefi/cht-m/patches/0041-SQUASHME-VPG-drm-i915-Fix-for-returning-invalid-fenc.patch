From 2d7af8d1fd47272b6f8c8b39d7f48945351cfd9e Mon Sep 17 00:00:00 2001
Message-Id: <2d7af8d1fd47272b6f8c8b39d7f48945351cfd9e.1431284209.git.chang-joon.lee@intel.com>
In-Reply-To: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
References: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
From: John Harrison <John.C.Harrison@Intel.com>
Date: Fri, 10 Apr 2015 11:23:08 +0100
Subject: [PATCH 41/68] SQUASHME! [VPG]: drm/i915: Fix for returning invalid
 fence handle on execbuff error

In the case where something fails early on during
i915_gem_do_execbuffer(), the driver would immediate exit without
calling any of the cleanup code. This is fine from a leak point of
view as nothing has been allocated yet. However, it means it is
potentially returning an invalid file descriptor for the 'fence out'
field (args->rsvd2).

This patch adds a clear of the rsvd2 field right at the start. Note
that it also first saves the incoming rsvd2 value as that is the
'fence in' parameter and must not be cleared before it has been used!

This patch could be squashed into the original patch that added the
native sync support to the execbuff code:
  commit 6b106574fa9863d9c4245b0a374fca50e09e1f2b
  Author: John Harrison <John.C.Harrison@Intel.com>
  Date:   Tue Apr 1 17:25:21 2014 +0100
  Subject: REVERTME [VPG]: drm/i915: Refactored native sync code for better file splits
  Change-Id: I8c2653787a1b15b4eb00c1dfa05b5e50ab4d2390

Change-Id: Ia7c4566604be5e95e16d0590d4d9364250fc3b50
For: VIZ-1587
For: VIZ-4741
Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
---
 drivers/gpu/drm/i915/i915_gem_execbuffer.c |   18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index 3fb7981..2b682fe 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -1442,6 +1442,17 @@ i915_gem_do_execbuffer(struct drm_device *dev, void *data,
 	int ret, i;
 	bool need_relocs, batch_pinned = false;
 	int fd_fence_complete = -1;
+#ifdef CONFIG_SYNC
+	int fd_fence_wait = (int) args->rsvd2;
+#endif
+
+	/*
+	 * Make sure an broken fence handle is not returned no matter
+	 * how early an error might be hit. Note that rsvd2 has to be
+	 * saved away first because it is also an input parameter!
+	 */
+	if (args->flags & I915_EXEC_REQUEST_FENCE)
+		args->rsvd2 = (__u64) -1;
 
 	if (!i915_gem_check_execbuffer(args))
 		return -EINVAL;
@@ -1698,8 +1709,6 @@ i915_gem_do_execbuffer(struct drm_device *dev, void *data,
 
 #ifdef CONFIG_SYNC
 	if (args->flags & I915_EXEC_WAIT_FENCE) {
-		int fd_fence_wait = (int) args->rsvd2;
-
 		if (fd_fence_wait < 0) {
 			DRM_ERROR("Wait fence for ring %d has invalid id %d\n",
 				  (int) ring->id, fd_fence_wait);
@@ -1785,11 +1794,10 @@ err:
 	mutex_unlock(&dev->struct_mutex);
 
 pre_mutex_err:
-	if (fd_fence_complete != -1)
+	if (fd_fence_complete != -1) {
 		sys_close(fd_fence_complete);
-
-	if (args->flags & I915_EXEC_REQUEST_FENCE)
 		args->rsvd2 = (__u64) -1;
+	}
 
 	dev_priv->scheduler->stats[ring->id].exec_early++;
 	intel_runtime_pm_put(dev_priv);
-- 
1.7.9.5

