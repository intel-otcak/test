From 4706a96fcf04085249a994498a8e805f04c2d48e Mon Sep 17 00:00:00 2001
Message-Id: <4706a96fcf04085249a994498a8e805f04c2d48e.1440631943.git.yunwei.zhang@intel.com>
From: Durgadoss R <durgadoss.r@intel.com>
Date: Fri, 31 Jul 2015 14:28:00 +0530
Subject: [PATCH 1/2] REVERTME: [VPG]: drm/i915: Fix PSR behavior on resume

During suspend, as part of crtc_disable sequence, PSR
is also disabled. However, if PSR was not disabled due to
some reasons (e.g. it was enabled but not active), pipe
is turned off without resetting the PSR software state
machine. Thus PSR is never enabled again on resume
because the state machine thinks it is already enabled.
This patch fixes the behavior by force resetting the
software state machine _after_ pipe is disabled.

This patch is REVERTME because CHV PSR design in upstream is
different and thus this patch will not be required when
we move to 4.0+ kernel.

Change-Id: I38c7a3c9b1ba553141a609268806b2d200a0f8ce
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-15168
Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
---
 drivers/gpu/drm/i915/intel_display.c |    5 ++++-
 drivers/gpu/drm/i915/intel_dp.c      |   32 ++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_drv.h     |    1 +
 3 files changed, 37 insertions(+), 1 deletion(-)

Index: b/drivers/gpu/drm/i915/intel_display.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_display.c	2016-03-08 10:22:50.475521047 -0800
+++ b/drivers/gpu/drm/i915/intel_display.c	2016-03-08 10:24:42.880882994 -0800
@@ -5831,7 +5831,10 @@
 
 	mutex_lock(&dev->struct_mutex);
 	intel_update_fbc(dev);
-	intel_edp_psr_update(dev, false);
+	if (IS_VALLEYVIEW(dev))
+		intel_vlv_edp_psr_reset(dev);
+	else
+		intel_edp_psr_update(dev, false);
 	mutex_unlock(&dev->struct_mutex);
 
 	all_pipe_disabled = true;
Index: b/drivers/gpu/drm/i915/intel_dp.c
===================================================================
--- a/drivers/gpu/drm/i915/intel_dp.c	2016-03-08 10:22:45.023451853 -0800
+++ b/drivers/gpu/drm/i915/intel_dp.c	2016-03-08 10:22:50.475521047 -0800
@@ -2188,6 +2188,8 @@
 	intel_vlv_psr_enable_sink(intel_dp);
 
 	intel_vlv_psr_enable_source(intel_dp);
+
+	DRM_DEBUG_KMS("PSR Enabled\n");
 }
 
 static bool intel_vlv_psr_do_exit(struct intel_dp *intel_dp, bool disable)
@@ -2304,6 +2306,7 @@
 
 done:
 	cancel_delayed_work(&dev_priv->psr.work);
+	DRM_DEBUG_KMS("PSR Disabled\n");
 
 	return true;
 }
@@ -2373,6 +2376,35 @@
 
 	mutex_unlock(&dev_priv->psr.lock);
 }
+
+/**
+ * intel_vlv_edp_psr_reset - Reset PSR software state machine
+ * @dev: drm device structure
+ *
+ * During i9xx_crtc_disable() psr_disable() is called. However, if PSR
+ * was not disabled during that call (e.g enabled but not active) we
+ * turn off pipe and this leaves PSR software state machine as 'enabled'.
+ * This function resets the state machine in such a situation. This
+ * function should _only_ be called from crtc_disable() _after_ crtc is
+ * disabled and also protected by 'dev->struct_mutex'.
+ * All other cases should use 'psr_disable()'.
+ */
+void intel_vlv_edp_psr_reset(struct drm_device *dev)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	if (!is_edp_psr(dev))
+		return;
+
+	mutex_lock(&dev_priv->psr.lock);
+
+	if (dev_priv->psr.enabled) {
+		intel_vlv_psr_do_exit(dev_priv->psr.enabled, true);
+		dev_priv->psr.enabled = NULL;
+	}
+
+	mutex_unlock(&dev_priv->psr.lock);
+}
 
 void intel_vlv_edp_psr_disable(struct drm_device *dev)
 {
Index: b/drivers/gpu/drm/i915/intel_drv.h
===================================================================
--- a/drivers/gpu/drm/i915/intel_drv.h	2016-03-08 10:22:45.023451853 -0800
+++ b/drivers/gpu/drm/i915/intel_drv.h	2016-03-08 10:22:50.475521047 -0800
@@ -1015,6 +1015,7 @@
 void intel_edp_psr_update(struct drm_device *dev, bool suspend);
 void intel_vlv_edp_psr_update(struct drm_device *dev);
 void intel_vlv_edp_psr_disable(struct drm_device *dev);
+void intel_vlv_edp_psr_reset(struct drm_device *dev);
 void intel_vlv_edp_psr_exit(struct drm_device *dev, bool disable);
 void intel_vlv_psr_irq_handler(struct drm_device *dev, enum pipe pipe);
 enum pipe vlv_power_sequencer_pipe(struct intel_dp *intel_dp);
