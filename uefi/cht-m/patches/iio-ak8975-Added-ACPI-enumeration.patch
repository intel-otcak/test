From 2ab44f8bab5c13f7a35ae9760ed2fb286fa56cd4 Mon Sep 17 00:00:00 2001
Message-Id: <2ab44f8bab5c13f7a35ae9760ed2fb286fa56cd4.1398812351.git.mark.gross@intel.com>
In-Reply-To: <e87e3533536ae5eec0e06ceb7ef7428e42855790.1398812350.git.mark.gross@intel.com>
References: <e87e3533536ae5eec0e06ceb7ef7428e42855790.1398812350.git.mark.gross@intel.com>
From: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date: Sun, 2 Mar 2014 00:32:41 -0800
Subject: [PATCH 253/429] iio: ak8975: Added ACPI enumeration

Added capability so that this device can be enumerated via ACPI.

Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
---
 drivers/iio/magnetometer/ak8975.c | 36 +++++++++++++++++++++++++++++++++++-
 1 file changed, 35 insertions(+), 1 deletion(-)

diff --git a/drivers/iio/magnetometer/ak8975.c b/drivers/iio/magnetometer/ak8975.c
index a55c94f..fda74b7 100644
--- a/drivers/iio/magnetometer/ak8975.c
+++ b/drivers/iio/magnetometer/ak8975.c
@@ -31,6 +31,7 @@
 #include <linux/bitops.h>
 #include <linux/gpio.h>
 #include <linux/of_gpio.h>
+#include <linux/acpi.h>
 
 #include <linux/iio/iio.h>
 #include <linux/iio/sysfs.h>
@@ -476,6 +477,27 @@ static const struct iio_info ak8975_info = {
 	.driver_module = THIS_MODULE,
 };
 
+static const struct acpi_device_id inv_acpi_match[] = {
+	{"AK8975", 0},
+	{"AK8963", AK8963},
+	{"INVN6500", AK8963},
+	{ },
+};
+MODULE_DEVICE_TABLE(acpi, inv_acpi_match);
+
+static char *ak8975_match_acpi_device(struct device *dev,
+							int *chipset)
+{
+	const struct acpi_device_id *id;
+
+	id = acpi_match_device(dev->driver->acpi_match_table, dev);
+	if (!id)
+		return NULL;
+	*chipset = (int)id->driver_data;
+
+	return (char *)dev_name(dev);
+}
+
 static int ak8975_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
@@ -483,7 +505,10 @@ static int ak8975_probe(struct i2c_client *client,
 	struct iio_dev *indio_dev;
 	int eoc_gpio;
 	int err;
+	char *name = NULL;
 
+	if (id)
+		name = (char *) id->name;
 	/* Grab and set up the supplied GPIO. */
 	if (client->dev.platform_data)
 		eoc_gpio = *(int *)(client->dev.platform_data);
@@ -529,6 +554,14 @@ static int ak8975_probe(struct i2c_client *client,
 			dev_dbg(&client->dev,
 				"AK8975 driver is running in normal mode\n");
 	}
+	if (ACPI_HANDLE(&client->dev)) {
+		int chip_id;
+
+		name = ak8975_match_acpi_device(&client->dev, &chip_id);
+		if (chip_id > 0)
+			data->chipset = chip_id;
+	}
+	dev_dbg(&client->dev, "Running in 8963 compatible mode\n");
 
 	/* Perform some basic start-of-day setup of the device. */
 	err = ak8975_setup(client);
@@ -545,7 +578,7 @@ static int ak8975_probe(struct i2c_client *client,
 	indio_dev->num_channels = ARRAY_SIZE(ak8975_channels);
 	indio_dev->info = &ak8975_info;
 	indio_dev->modes = INDIO_DIRECT_MODE;
-
+	indio_dev->name = name;
 	err = iio_device_register(indio_dev);
 	if (err < 0)
 		goto exit_free_iio;
@@ -600,6 +633,7 @@ static struct i2c_driver ak8975_driver = {
 	.driver = {
 		.name	= "ak8975",
 		.of_match_table = ak8975_of_match,
+		.acpi_match_table = ACPI_PTR(inv_acpi_match),
 	},
 	.probe		= ak8975_probe,
 	.remove		= ak8975_remove,
-- 
1.8.3.2

