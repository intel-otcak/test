From 124e63d5264e3b056b93076b7bef5849fc9fa476 Mon Sep 17 00:00:00 2001
Message-Id: <124e63d5264e3b056b93076b7bef5849fc9fa476.1414143271.git.chang-joon.lee@intel.com>
In-Reply-To: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
References: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
From: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
Date: Tue, 14 Oct 2014 13:43:04 +0530
Subject: [PATCH 09/26] FOR_UPSTREAM [VPG]: drm/i915: Program MIPI port
 control based on dual link configuration

get if dual link and pixel overlap configuration from VBT. Program
both MIPI DSI port A and port C control register if dual link is
enabled in VBT.

For: GMINL-1532
Change-Id: I166db9082333a02dc694ea57920af21c53abef02
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h            |    5 ++
 drivers/gpu/drm/i915/intel_bios.h          |    3 +-
 drivers/gpu/drm/i915/intel_dsi.c           |   71 +++++++++++++++++++++-------
 drivers/gpu/drm/i915/intel_dsi.h           |    8 ++++
 drivers/gpu/drm/i915/intel_dsi_panel_vbt.c |    2 +
 5 files changed, 70 insertions(+), 19 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 8cd5b0c..442e317 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -5745,6 +5745,10 @@ enum punit_power_well {
 #define GEN8_PMINTR_REDIRECT_TO_NON_DISP	(1<<31)
 #define VLV_PWRDWNUPCTL				0xA294
 
+#define VLV_CHICKEN_3		(dev_priv->info.display_mmio_offset + 0x7040C)
+#define  PIXEL_OVERLAP_CNT_MASK			(3 << 30)
+#define  PIXEL_OVERLAP_CNT_SHIFT		30
+
 #define GEN6_PMISR				0x44020
 #define GEN6_PMIMR				0x44024 /* rps_lock */
 #define GEN6_PMIIR				0x44028
@@ -6343,6 +6347,7 @@ enum punit_power_well {
 #define  DPI_ENABLE					(1 << 31) /* A + B */
 #define  MIPIA_MIPI4DPHY_DELAY_COUNT_SHIFT		27
 #define  MIPIA_MIPI4DPHY_DELAY_COUNT_MASK		(0xf << 27)
+#define  DUAL_LINK_MODE_SHIFT				26
 #define  DUAL_LINK_MODE_MASK				(1 << 26)
 #define  DUAL_LINK_MODE_FRONT_BACK			(0 << 26)
 #define  DUAL_LINK_MODE_PIXEL_ALTERNATIVE		(1 << 26)
diff --git a/drivers/gpu/drm/i915/intel_bios.h b/drivers/gpu/drm/i915/intel_bios.h
index 0107736..bf4b539 100644
--- a/drivers/gpu/drm/i915/intel_bios.h
+++ b/drivers/gpu/drm/i915/intel_bios.h
@@ -810,7 +810,8 @@ struct mipi_config {
 #define DUAL_LINK_PIXEL_ALT	2
 	u16 dual_link:2;
 	u16 lane_cnt:2;
-	u16 rsvd3:12;
+	u16 pixel_overlap:3;
+	u16 rsvd3:9;
 
 	u16 rsvd4;
 
diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index 4810147..f1ec7a7 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -138,19 +138,45 @@ static void intel_dsi_port_enable(struct intel_encoder *encoder)
 	struct intel_crtc *intel_crtc = to_intel_crtc(encoder->base.crtc);
 	struct intel_dsi *intel_dsi = enc_to_intel_dsi(&encoder->base);
 	int pipe = intel_crtc->pipe;
-	u32 temp;
+	u32 temp, port_control = 0;
+
+	if (intel_dsi->dual_link) {
+		port_control = (intel_dsi->dual_link - 1)
+					<< DUAL_LINK_MODE_SHIFT;
+		port_control |= pipe ? LANE_CONFIGURATION_DUAL_LINK_B :
+					LANE_CONFIGURATION_DUAL_LINK_A;
+
+		if ((intel_dsi->dual_link & MIPI_DUAL_LINK_FRONT_BACK) &&
+							IS_VALLEYVIEW(dev))
+			I915_WRITE_BITS(VLV_CHICKEN_3, intel_dsi->pixel_overlap
+					<< PIXEL_OVERLAP_CNT_SHIFT,
+					PIXEL_OVERLAP_CNT_MASK);
+
+		temp = I915_READ(MIPI_PORT_CTRL(0));
+		temp = temp | port_control;
+		I915_WRITE(MIPI_PORT_CTRL(0), temp | DPI_ENABLE);
+		POSTING_READ(MIPI_PORT_CTRL(0));
+
+		if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3))
+			I915_WRITE(MIPI_PORT_CTRL(1), DPI_ENABLE);
+		else
+			I915_WRITE_BITS(MIPI_PORT_CTRL(1), DPI_ENABLE,
+								DPI_ENABLE);
+		POSTING_READ(MIPI_PORT_CTRL(1));
 
-	if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3) &&
-					pipe == PIPE_B)
-		I915_WRITE(MIPI_PORT_CTRL(pipe), DPI_ENABLE);
-	else {
-		/* assert ip_tg_enable signal */
-		temp = I915_READ(MIPI_PORT_CTRL(pipe)) &
+	} else {
+		if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3) &&
+						pipe == PIPE_B)
+			I915_WRITE(MIPI_PORT_CTRL(pipe), DPI_ENABLE);
+		else {
+			/* assert ip_tg_enable signal */
+			temp = I915_READ(MIPI_PORT_CTRL(pipe)) &
 					~LANE_CONFIGURATION_MASK;
-		temp = temp | intel_dsi->port_bits;
-		I915_WRITE(MIPI_PORT_CTRL(pipe), temp | DPI_ENABLE);
+			temp = temp | intel_dsi->port_bits;
+			I915_WRITE(MIPI_PORT_CTRL(pipe), temp | DPI_ENABLE);
+		}
+		POSTING_READ(MIPI_PORT_CTRL(pipe));
 	}
-	POSTING_READ(MIPI_PORT_CTRL(pipe));
 }
 
 static void intel_dsi_enable(struct intel_encoder *encoder)
@@ -281,20 +307,29 @@ static void intel_dsi_port_disable(struct intel_encoder *encoder)
 	struct drm_device *dev = encoder->base.dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_crtc *intel_crtc = to_intel_crtc(encoder->base.crtc);
+	struct intel_dsi *intel_dsi = enc_to_intel_dsi(&encoder->base);
 	int pipe = intel_crtc->pipe;
-	u32 temp;
 
 	wait_for_dsi_fifo_empty(intel_dsi);
 
-	if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3) &&
-					pipe == PIPE_B)
-		I915_WRITE(MIPI_PORT_CTRL(pipe), ~DPI_ENABLE);
-	else {
+	if (intel_dsi->dual_link) {
+		I915_WRITE_BITS(MIPI_PORT_CTRL(0), 0, DPI_ENABLE);
+		POSTING_READ(MIPI_PORT_CTRL(0));
+
+		if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3))
+			I915_WRITE(MIPI_PORT_CTRL(1), ~DPI_ENABLE);
+		else
+			I915_WRITE_BITS(MIPI_PORT_CTRL(1), 0, DPI_ENABLE);
+		POSTING_READ(MIPI_PORT_CTRL(1));
+	} else {
 		/* de-assert ip_tg_enable signal */
-		temp = I915_READ(MIPI_PORT_CTRL(pipe));
-		I915_WRITE(MIPI_PORT_CTRL(pipe), temp & ~DPI_ENABLE);
+		if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_B3) &&
+						pipe == PIPE_B)
+			I915_WRITE(MIPI_PORT_CTRL(pipe), ~DPI_ENABLE);
+		else
+			I915_WRITE_BITS(MIPI_PORT_CTRL(pipe), 0, DPI_ENABLE);
+		POSTING_READ(MIPI_PORT_CTRL(pipe));
 	}
-	POSTING_READ(MIPI_PORT_CTRL(pipe));
 }
 
 static void intel_dsi_disable(struct intel_encoder *encoder)
diff --git a/drivers/gpu/drm/i915/intel_dsi.h b/drivers/gpu/drm/i915/intel_dsi.h
index 015b284..078faa5 100644
--- a/drivers/gpu/drm/i915/intel_dsi.h
+++ b/drivers/gpu/drm/i915/intel_dsi.h
@@ -385,6 +385,11 @@
 #define PMIC_PWM_LEVEL		0x4E
 
 
+/* Dual Link support */
+#define MIPI_DUAL_LINK_NONE		0
+#define MIPI_DUAL_LINK_FRONT_BACK	1
+#define MIPI_DUAL_LINK_PIXEL_ALT	2
+
 struct intel_dsi_device {
 	unsigned int panel_id;
 	const char *name;
@@ -488,6 +493,9 @@ struct intel_dsi {
 	u16 panel_on_delay;
 	u16 panel_off_delay;
 	u16 panel_pwr_cycle_delay;
+
+	u8 dual_link;
+	u8 pixel_overlap;
 };
 
 static inline struct intel_dsi *enc_to_intel_dsi(struct drm_encoder *encoder)
diff --git a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
index 852fe35..893560d 100644
--- a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
+++ b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
@@ -577,6 +577,8 @@ static bool generic_init(struct intel_dsi_device *dsi)
 	intel_dsi->clock_stop = mipi_config->enable_clk_stop ? 1 : 0;
 	intel_dsi->lane_count = mipi_config->lane_cnt + 1;
 	intel_dsi->pixel_format = mipi_config->videomode_color_format << 7;
+	intel_dsi->dual_link = mipi_config->dual_link;
+	intel_dsi->pixel_overlap = mipi_config->pixel_overlap;
 
 	if (intel_dsi->pixel_format == VID_MODE_FORMAT_RGB666)
 		bits_per_pixel = 18;
-- 
1.7.9.5

