From 0a6616fe6cb54ce93b1d2606db8a09b3e3b7e30f Mon Sep 17 00:00:00 2001
Message-Id: <0a6616fe6cb54ce93b1d2606db8a09b3e3b7e30f.1424979244.git.feitong.yi@intel.com>
In-Reply-To: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
References: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
From: Ramalingam C <ramalingam.c@intel.com>
Date: Mon, 2 Feb 2015 15:53:26 +0530
Subject: [PATCH 14/28] MUST_REBASE [VPG]: video/adf/intel: MEDIA_RR state is
 added into state machine

In intel_drrs state machine another state called DRRS_MEDIA_RR is
added. This will be used for the userspace requested vrefresh values.
New set of interfaces will be implemented to receive userspace requests.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5610
Change-Id: I40ee5d60bc707e00dfcbc6b22928da73c6ec9b4e
Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
---
 .../adf/intel/core/common/dsi/intel_dsi_drrs.c     |   62 +++++++++-
 drivers/video/adf/intel/core/common/intel_drrs.c   |  121 +++++++++++++++++++-
 .../intel/include/core/common/dsi/intel_dsi_drrs.h |    1 +
 .../adf/intel/include/core/common/intel_drrs.h     |    3 +
 .../video/adf/intel/include/core/intel_dc_config.h |    6 +
 5 files changed, 189 insertions(+), 4 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c b/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c
index 7cd55a0..c292b65 100644
--- a/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c
+++ b/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c
@@ -35,6 +35,7 @@ static void intel_mipi_drrs_work_fn(struct work_struct *__work)
 	struct adf_drrs *adf_drrs = pipeline->drrs;
 	struct dsi_mnp *dsi_mnp;
 	struct drm_mode_modeinfo *prev_mode = NULL;
+	bool resume_idleness_detection = false;
 	bool fallback_attempt = false, lock;
 	int ret, retry_cnt = 3;
 
@@ -43,11 +44,28 @@ init:
 		dsi_mnp = &dsi_pipe->drrs.mnp_list.mnp1;
 	} else if (work->target_rr_type == DRRS_LOW_RR) {
 		dsi_mnp = &dsi_pipe->drrs.mnp_list.mnp2;
+	} else if (work->target_rr_type == DRRS_MEDIA_RR) {
+		if (!dsi_pipe->drrs.platform_ops->mnp_calculate_for_pclk) {
+			pr_err("%s: mnp_calculate_for_pclk cant be NULL\n",
+								__func__);
+			goto out;
+		}
+		if (dsi_pipe->drrs.platform_ops->mnp_calculate_for_pclk(
+				pipeline, &dsi_pipe->drrs.mnp_list.mnp3,
+				work->target_mode->clock) < 0) {
+			pr_err("%s: mnp_calculation failed\n", __func__);
+			goto out;
+		}
+		dsi_mnp = &dsi_pipe->drrs.mnp_list.mnp3;
 	} else {
 		pr_err("ADF: %s: Unknown refreshrate_type\n", __func__);
 		return;
 	}
 
+	if (adf_drrs->drrs_state.current_rr_type == DRRS_MEDIA_RR &&
+			work->target_rr_type == DRRS_HIGH_RR)
+		resume_idleness_detection = true;
+
 	pr_debug("%s: Refresh rate Type: %d-->%d\n", __func__,
 				adf_drrs->drrs_state.current_rr_type,
 						work->target_rr_type);
@@ -79,6 +97,9 @@ retry:
 
 		/* TODO: Update watermark */
 
+		if (resume_idleness_detection)
+			intel_restart_idleness_drrs(pipeline);
+
 	} else if (ret == -ETIMEDOUT && retry_cnt) {
 
 		/* Timed out. But still attempts are allowed */
@@ -103,10 +124,14 @@ retry:
 		work->target_rr_type = adf_drrs->drrs_state.target_rr_type;
 		drm_modeinfo_destroy(work->target_mode);
 
-		if (work->target_rr_type == DRRS_HIGH_RR)
+		if (work->target_rr_type == DRRS_HIGH_RR) {
 			prev_mode = adf_drrs->panel_mode.fixed_mode;
-		else if (work->target_rr_type == DRRS_LOW_RR)
+			resume_idleness_detection = true;
+		} else if (work->target_rr_type == DRRS_LOW_RR) {
 			prev_mode = adf_drrs->panel_mode.downclock_mode;
+		} else if (work->target_rr_type == DRRS_MEDIA_RR) {
+			prev_mode = adf_drrs->panel_mode.target_mode;
+		}
 
 		work->target_mode = drm_modeinfo_duplicate(prev_mode);
 		fallback_attempt = true;
@@ -129,6 +154,38 @@ out:
 	drm_modeinfo_destroy(work->target_mode);
 }
 
+/*
+ * As a part of Media playback request filtering
+ * we validate the incoming request wrt deferred works
+ * of MIPI PLL programming
+ */
+bool intel_dsi_is_mp_drrs_req(struct intel_pipeline *pipeline,
+					struct drm_mode_modeinfo *mode)
+{
+	struct adf_drrs *adf_drrs = pipeline->drrs;
+	struct dsi_config *config = pipeline->params.dsi.dsi_config;
+	struct dsi_pipe *dsi_pipe = container_of(config,
+						struct dsi_pipe, config);
+	struct intel_mipi_drrs_work *work = dsi_pipe->drrs.mipi_drrs_work;
+	bool ret = false;
+
+	if (work_busy(&work->work.work)) {
+		if (work->target_mode->vrefresh != mode->vrefresh ||
+			adf_drrs->drrs_state.current_rr_type != DRRS_MEDIA_RR)
+
+			/*
+			 * First condition: Deferred work is in place to change
+			 * the DRRS state. Hence this call is valid Media
+			 * playback DRRS request.
+			 *
+			 * Second Condition: Might be same as deffered work but
+			 * this is from media playback request. So honor it.
+			 */
+			ret = true;
+	}
+	return ret;
+}
+
 /* Whether DRRS_HR_STATE is pending in the dsi deferred work */
 bool intel_dsi_is_drrs_hr_state_pending(struct intel_pipeline *pipeline)
 {
@@ -344,6 +401,7 @@ struct drrs_encoder_ops drrs_dsi_ops = {
 	.exit = intel_dsi_drrs_exit,
 	.set_drrs_state = intel_dsi_set_drrs_state,
 	.is_drrs_hr_state_pending = intel_dsi_is_drrs_hr_state_pending,
+	.is_mp_drrs_req = intel_dsi_is_mp_drrs_req
 };
 
 /* Call back Function for Intel_drrs module to get the dsi func ptr */
diff --git a/drivers/video/adf/intel/core/common/intel_drrs.c b/drivers/video/adf/intel/core/common/intel_drrs.c
index 2154128..b804196 100644
--- a/drivers/video/adf/intel/core/common/intel_drrs.c
+++ b/drivers/video/adf/intel/core/common/intel_drrs.c
@@ -18,6 +18,7 @@
 #include <intel_adf_device.h>
 #include <linux/delay.h>
 #include <core/common/intel_drrs.h>
+#include <core/common/drm_modeinfo_ops.h>
 
 void intel_set_drrs_state(struct intel_pipeline *pipeline)
 {
@@ -50,7 +51,8 @@ void intel_set_drrs_state(struct intel_pipeline *pipeline)
 		return;
 	}
 
-	if (drrs_state->target_rr_type == drrs_state->current_rr_type) {
+	if (drrs_state->target_rr_type == drrs_state->current_rr_type &&
+			drrs_state->current_rr_type != DRRS_MEDIA_RR) {
 		pr_info("ADF: %s: Requested for previously set RR. Ignoring\n",
 								__func__);
 		return;
@@ -61,6 +63,10 @@ void intel_set_drrs_state(struct intel_pipeline *pipeline)
 	drrs->encoder_ops->set_drrs_state(pipeline);
 
 	if (drrs_state->type != SEAMLESS_DRRS_SUPPORT_SW) {
+		if (drrs_state->current_rr_type == DRRS_MEDIA_RR &&
+				drrs_state->target_rr_type == DRRS_HIGH_RR)
+			drrs->resume_idleness_detection = true;
+
 		drrs_state->current_rr_type = drrs_state->target_rr_type;
 
 		pr_info("ADF: %s: Refresh Rate set to : %dHz\n", __func__,
@@ -68,6 +74,13 @@ void intel_set_drrs_state(struct intel_pipeline *pipeline)
 	}
 }
 
+static inline bool
+is_media_playback_drrs_in_progress(struct drrs_info *drrs_state)
+{
+	return drrs_state->current_rr_type == DRRS_MEDIA_RR ||
+			drrs_state->target_rr_type == DRRS_MEDIA_RR;
+}
+
 static void intel_idleness_drrs_work_fn(struct work_struct *__work)
 {
 	struct intel_idleness_drrs_work *work =
@@ -82,6 +95,11 @@ static void intel_idleness_drrs_work_fn(struct work_struct *__work)
 		pr_err("ADF: %s: FIXME: We shouldn't be here\n", __func__);
 
 	mutex_lock(&drrs->drrs_state.mutex);
+	if (is_media_playback_drrs_in_progress(&drrs->drrs_state)) {
+		mutex_unlock(&drrs->drrs_state.mutex);
+		return;
+	}
+
 	panel_mode->target_mode = panel_mode->downclock_mode;
 	drrs->drrs_state.target_rr_type = DRRS_LOW_RR;
 
@@ -111,6 +129,11 @@ static void intel_enable_idleness_drrs(struct intel_pipeline *pipeline)
 	intel_cancel_idleness_drrs_work(drrs);
 	mutex_lock(&drrs->drrs_state.mutex);
 
+	if (is_media_playback_drrs_in_progress(&drrs->drrs_state)) {
+		mutex_unlock(&drrs->drrs_state.mutex);
+		return;
+	}
+
 	/* Capturing the deferred request for disable_drrs */
 	if (drrs->drrs_state.type == SEAMLESS_DRRS_SUPPORT_SW &&
 				drrs->encoder_ops->is_drrs_hr_state_pending) {
@@ -144,9 +167,14 @@ void intel_disable_idleness_drrs(struct intel_pipeline *pipeline)
 
 	/* as part of disable DRRS, reset refresh rate to HIGH_RR */
 	if (drrs->drrs_state.current_rr_type == DRRS_LOW_RR) {
-		mutex_lock(&drrs->drrs_state.mutex);
 		intel_cancel_idleness_drrs_work(drrs);
 
+		mutex_lock(&drrs->drrs_state.mutex);
+		if (is_media_playback_drrs_in_progress(&drrs->drrs_state)) {
+			mutex_unlock(&drrs->drrs_state.mutex);
+			return;
+		}
+
 		if (panel_mode->target_mode != NULL)
 			pr_err("ADF: %s: FIXME: We shouldn't be here\n",
 								__func__);
@@ -167,6 +195,9 @@ void intel_restart_idleness_drrs(struct intel_pipeline *pipeline)
 	if (!drrs || !drrs->has_drrs)
 		return;
 
+	if (is_media_playback_drrs_in_progress(&drrs->drrs_state))
+		return;
+
 	/* TODO: Find clone mode here and act on it*/
 
 	intel_disable_idleness_drrs(pipeline);
@@ -175,6 +206,91 @@ void intel_restart_idleness_drrs(struct intel_pipeline *pipeline)
 	intel_enable_idleness_drrs(pipeline);
 }
 
+/*
+ * Handles the userspace request for MEDIA_RR.
+ */
+int intel_media_playback_drrs_configure(struct intel_pipeline *pipeline,
+					struct drm_mode_modeinfo *mode)
+{
+	struct adf_drrs *drrs = pipeline->drrs;
+	struct drrs_info *drrs_state = &drrs->drrs_state;
+	struct drrs_panel_mode *panel_mode = &drrs->panel_mode;
+	int refresh_rate = mode->vrefresh;
+
+	if (!drrs || !drrs->has_drrs) {
+		pr_err("ADF: %s: DRRS is not supported\n", __func__);
+		return -EPERM;
+	}
+
+	if (refresh_rate < panel_mode->downclock_mode->vrefresh &&
+			refresh_rate > panel_mode->fixed_mode->vrefresh) {
+		pr_err("ADF: %s: Invalid refresh_rate\n", __func__);
+		return -EINVAL;
+	}
+
+	if (!is_media_playback_drrs_in_progress(&drrs->drrs_state))
+		intel_cancel_idleness_drrs_work(drrs);
+
+	mutex_lock(&drrs_state->mutex);
+
+	if (refresh_rate == panel_mode->fixed_mode->vrefresh) {
+		if (drrs_state->current_rr_type == DRRS_MEDIA_RR) {
+
+			/* DRRS_MEDIA_RR -> DRRS_HIGH_RR */
+			if (panel_mode->target_mode)
+				drm_modeinfo_destroy(panel_mode->target_mode);
+			panel_mode->target_mode = panel_mode->fixed_mode;
+			drrs_state->target_rr_type = DRRS_HIGH_RR;
+		} else {
+
+			/*
+			 * Invalid Media Playback DRRS request.
+			 * Resume the Idleness Detection
+			 */
+			pr_err("ADF: %s: Invalid Entry req for mode DRRS_MEDIA_RR\n",
+								__func__);
+			mutex_unlock(&drrs_state->mutex);
+			intel_restart_idleness_drrs(pipeline);
+			return 0;
+		}
+	} else {
+
+		/* TODO: Check for cloned mode and respond accordingly */
+		drrs_state->target_rr_type = DRRS_MEDIA_RR;
+
+		if (drrs_state->current_rr_type == DRRS_MEDIA_RR) {
+
+			/* Refresh rate change in Media playback DRRS */
+			if (refresh_rate == panel_mode->target_mode->vrefresh) {
+				pr_debug("ADF: %s: Request for current RR.<%d>\n",
+					__func__,
+					panel_mode->target_mode->vrefresh);
+				mutex_unlock(&drrs_state->mutex);
+				return 0;
+			}
+			panel_mode->target_mode->vrefresh = refresh_rate;
+		} else {
+
+			/* Entering MEDIA Playback DRRS state */
+			panel_mode->target_mode = drm_modeinfo_duplicate(mode);
+		}
+
+		panel_mode->target_mode->clock = mode->vrefresh * mode->vtotal *
+							mode->htotal / 1000;
+	}
+
+	pr_debug("ADF: %s: cur_rr_type: %d, target_rr_type: %d, target_rr: %d\n",
+				__func__, drrs_state->current_rr_type,
+				drrs_state->target_rr_type,
+				panel_mode->target_mode->vrefresh);
+
+	intel_set_drrs_state(pipeline);
+	mutex_unlock(&drrs_state->mutex);
+
+	if (drrs->resume_idleness_detection)
+		intel_restart_idleness_drrs(pipeline);
+	return 0;
+}
 
 /* Idleness detection logic is initialized */
 int intel_adf_drrs_idleness_detection_init(struct intel_pipeline *pipeline)
@@ -288,6 +404,7 @@ int intel_drrs_init(struct intel_pipeline *pipeline)
 
 	mutex_init(&drrs->drrs_state.mutex);
 
+	drrs->resume_idleness_detection = false;
 	drrs->drrs_state.type = drrs->vbt.drrs_type;
 	drrs->drrs_state.current_rr_type = DRRS_HIGH_RR;
 	pr_info("ADF: %s: SEAMLESS DRRS supported on this panel.\n", __func__);
diff --git a/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h b/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h
index d97de25..2a4690f 100644
--- a/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h
+++ b/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h
@@ -46,6 +46,7 @@ struct intel_mipi_drrs_work {
 struct dsi_mnp_list {
 	struct dsi_mnp mnp1;	/* Fixed mode */
 	struct dsi_mnp mnp2;	/* Downclock mode */
+	struct dsi_mnp mnp3;	/* Media playback mode */
 };
 
 struct dsi_drrs {
diff --git a/drivers/video/adf/intel/include/core/common/intel_drrs.h b/drivers/video/adf/intel/include/core/common/intel_drrs.h
index 0277416..b8fe6ae 100644
--- a/drivers/video/adf/intel/include/core/common/intel_drrs.h
+++ b/drivers/video/adf/intel/include/core/common/intel_drrs.h
@@ -27,4 +27,7 @@ void intel_disable_idleness_drrs(struct intel_pipeline *pipeline);
 void intel_restart_idleness_drrs(struct intel_pipeline *pipeline);
 int intel_drrs_init(struct intel_pipeline *pipeline);
 
+int intel_media_playback_drrs_configure(struct intel_pipeline *pipeline,
+					struct drm_mode_modeinfo *mode);
+
 #endif /* INTEL_DRRS_H__ */
diff --git a/drivers/video/adf/intel/include/core/intel_dc_config.h b/drivers/video/adf/intel/include/core/intel_dc_config.h
index 0da99a0..491075e 100644
--- a/drivers/video/adf/intel/include/core/intel_dc_config.h
+++ b/drivers/video/adf/intel/include/core/intel_dc_config.h
@@ -520,10 +520,12 @@ enum drrs_support_type {
  * Different DRRS States:
  * DRRS_HIGH_RR	: Refreshrate of Fixed mode. [Maximum Vrefresh]
  * DRRS_LOW_RR	: Refreshrate of Downclock mode. [Minimum vrefresh]
+ * DRRS_MEDIA_RR: Refreshrate of requested from userspace. [<Max && >= Min]
  */
 enum drrs_refresh_rate_type {
 	DRRS_HIGH_RR,
 	DRRS_LOW_RR,
+	DRRS_MEDIA_RR,
 	DRRS_MAX_RR,
 };
 
@@ -571,6 +573,8 @@ struct drrs_encoder_ops {
 	void (*exit)(struct intel_pipeline *);
 	void (*set_drrs_state)(struct intel_pipeline *);
 	bool (*is_drrs_hr_state_pending)(struct intel_pipeline *);
+	bool (*is_mp_drrs_req)(struct intel_pipeline *,
+					struct drm_mode_modeinfo *mode);
 };
 
 struct adf_drrs {
@@ -580,6 +584,8 @@ struct adf_drrs {
 	/* downclock mode && seamless DRRS */
 	bool has_drrs;
 
+	bool resume_idleness_detection;
+
 	/* Holds the DRRS state machine states */
 	struct drrs_info drrs_state;
 	struct vbt_drrs_data vbt;
-- 
1.7.9.5

