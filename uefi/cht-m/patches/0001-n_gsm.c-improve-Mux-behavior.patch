From 01f9b38a8b3bc6afe2d751e4c7daaece0cbbba8d Mon Sep 17 00:00:00 2001
From: Mustapha Ben Zoubeir <mustaphax.ben.zoubeir@intel.com>
Date: Mon, 22 Sep 2014 14:58:14 +0200
Subject: [PATCH 1/8] n_gsm.c: improve Mux behavior.

What Intel have improved :
- Add of debug #define
- Use of kernel linked list helper
- Add a DLCI hangup state and callback
- Add lock for multiple open of gsmtty
- Add Mutex to adaption change
- Add Threshold to network txlist
- Add 2 parameters to mux :
        * CLOCAL : Set CLOCAL to avoid lock if CD flag is not supported
                   by modem
        * Burst mode : Avoid removing EOF beween two consecutive frame if
                       not supported by modem
- Use of dev_kfree_skb instead of kfree_skb (recommended)
- Use of asynchronous hangup instead of vhangup
- Fix bug in FCON/FCOFF command
- Add dead mux var to manage end of mux life
- Rework of mux cleanup
- Move of allocation structure to save memory (only when gsmtty is opened)
- Add managment of IPV6
- Add of tty O_NONBLOCK management
- Add several sanity check
- Add a type cast to solve KW error

orig-Change-Id: Id96be37132dc2374fcfaf8af0b41f9c3564d35a5
Signed-off-by: Vincent Pillet <vincentx.pillet@intel.com>
Signed-off-by: Mustapha Ben Zoubeir <mustaphax.ben.zoubeir@intel.com>
Signed-off-by: Nicolas LOUIS <nicolasx.louis@intel.com>
Reviewed-on: http://android.intel.com:8080/128579
Reviewed-by: Ravindran, Arun <arun.ravindran@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>

Change-Id: I8ddf221b6f6b9af97a6bfbcbd02b6acc880e2269
---
 drivers/tty/n_gsm.c    | 543 +++++++++++++++++++++++++++++++++++--------------
 include/linux/gsmmux.h |   9 +-
 2 files changed, 394 insertions(+), 158 deletions(-)

diff --git a/drivers/tty/n_gsm.c b/drivers/tty/n_gsm.c
index 2ebe47b78a3e..25da4a4b6348 100644
--- a/drivers/tty/n_gsm.c
+++ b/drivers/tty/n_gsm.c
@@ -42,6 +42,8 @@
 #include <linux/sched.h>
 #include <linux/interrupt.h>
 #include <linux/tty.h>
+#include <linux/timer.h>
+#include <linux/wait.h>
 #include <linux/ctype.h>
 #include <linux/mm.h>
 #include <linux/string.h>
@@ -66,11 +68,17 @@
 static int debug;
 module_param(debug, int, 0600);
 
-/* Defaults: these are from the specification */
+#define GSMDBG_VERBOSE_PACKET_REPORT(x) ((x) &  1)
+#define GSMDBG_FORCE_CARRIER(x)         ((x) &  2)
+#define GSMDBG_DATA_FULL_REPORT(x)      ((x) &  4)
+#define GSMDBG_DLCI_STREAM_REPORT(x)    ((x) &  8)
+#define GSMDBG_DLCI_DATA_REPORT(x)      ((x) & 16)
+#define GSMDBG_DATA_LEN_REPORT(x)       ((x) & 32)
 
-#define T1	10		/* 100mS */
-#define T2	34		/* 333mS */
-#define N2	3		/* Retry 3 times */
+/* unit is 1/100 second according to 27.010 spec */
+#define T1	254
+#define T2	255
+#define N2	3
 
 /* Use long timers for testing at low speed with debug on */
 #ifdef DEBUG_TIMING
@@ -78,12 +86,8 @@ module_param(debug, int, 0600);
 #define T2	200
 #endif
 
-/*
- * Semi-arbitrary buffer size limits. 0710 is normally run with 32-64 byte
- * limits so this is plenty
- */
-#define MAX_MRU 1500
-#define MAX_MTU 1500
+#define MAX_MRU 32768 /* In specification 3GPP TS 27.010, 5.7.2 */
+#define MAX_MTU 32768 /* In specification 3GPP TS 27.010, 5.7.2 */
 #define	GSM_NET_TX_TIMEOUT (HZ*10)
 
 /**
@@ -118,12 +122,7 @@ struct gsm_msg {
 
 /*
  *	Each active data link has a gsm_dlci structure associated which ties
- *	the link layer to an optional tty (if the tty side is open). To avoid
- *	complexity right now these are only ever freed up when the mux is
- *	shut down.
- *
- *	At the moment we don't free DLCI objects until the mux is torn down
- *	this avoid object life time issues but might be worth review later.
+ *	the link layer to an optional tty (if the tty side is open).
  */
 
 struct gsm_dlci {
@@ -134,6 +133,11 @@ struct gsm_dlci {
 #define DLCI_OPENING		1	/* Sending SABM not seen UA */
 #define DLCI_OPEN		2	/* SABM/UA complete */
 #define DLCI_CLOSING		3	/* Sending DISC not seen UA/DM */
+#define DLCI_HANGUP		4	/*HANGUP received  */
+	struct kref ref;		/* freed from port or mux close */
+
+	spinlock_t gsmtty_lock;		/* Process multiple open of gsmtty */
+	int gsmtty_count;
 	struct mutex mutex;
 
 	/* Link layer */
@@ -146,6 +150,7 @@ struct gsm_dlci {
 	struct kfifo _fifo;	/* For new fifo API porting only */
 	int adaption;		/* Adaption layer in use */
 	int prev_adaption;
+	struct mutex rx_mutex;	/* Mutex when adaption change */
 	u32 modem_rx;		/* Our incoming virtual modem lines */
 	u32 modem_tx;		/* Our outgoing modem lines */
 	int dead;		/* Refuse re-open */
@@ -155,6 +160,8 @@ struct gsm_dlci {
 	/* Packetised I/O */
 	struct sk_buff *skb;	/* Frame being sent */
 	struct sk_buff_head skb_list;	/* Queued frames */
+#define TXLIST_THRESH_HI		8192
+#define TXLIST_THRESH_LO		2048
 	/* Data handling callback */
 	void (*data)(struct gsm_dlci *dlci, u8 *data, int len);
 	void (*prev_data)(struct gsm_dlci *dlci, u8 *data, int len);
@@ -258,6 +265,8 @@ struct gsm_mux {
 	u8 ftype;		/* UI or UIH */
 	int t1, t2;		/* Timers in 1/100th of a sec */
 	int n2;			/* Retry count */
+	int clocal;		/* CLOCAL default state */
+	int burst;		/* Burst mode support */
 
 	/* Statistics (not currently exposed) */
 	unsigned long bad_fcs;
@@ -461,7 +470,7 @@ static u8 gsm_encode_modem(const struct gsm_dlci *dlci)
 static void gsm_print_packet(const char *hdr, int addr, int cr,
 					u8 control, const u8 *data, int dlen)
 {
-	if (!(debug & 1))
+	if (!GSMDBG_VERBOSE_PACKET_REPORT(debug))
 		return;
 
 	pr_info("%s %d) %c: ", hdr, addr, "RC"[cr]);
@@ -489,7 +498,8 @@ static void gsm_print_packet(const char *hdr, int addr, int cr,
 		if (!(control & 0x01)) {
 			pr_cont("I N(S)%d N(R)%d",
 				(control & 0x0E) >> 1, (control & 0xE0) >> 5);
-		} else switch (control & 0x0F) {
+		} else
+			switch (control & 0x0F) {
 			case RR:
 				pr_cont("RR(%d)", (control & 0xE0) >> 5);
 				break;
@@ -501,7 +511,7 @@ static void gsm_print_packet(const char *hdr, int addr, int cr,
 				break;
 			default:
 				pr_cont("[%02X]", control);
-		}
+			}
 	}
 
 	if (control & PF)
@@ -658,6 +668,7 @@ static struct gsm_msg *gsm_data_alloc(struct gsm_mux *gsm, u8 addr, int len,
 								GFP_ATOMIC);
 	if (m == NULL)
 		return NULL;
+
 	m->data = m->buffer + HDR_LEN - 1;	/* Allow for FCS */
 	m->len = len;
 	m->addr = addr;
@@ -700,7 +711,7 @@ static void gsm_data_kick(struct gsm_mux *gsm)
 			len = msg->len + 2;
 		}
 
-		if (debug & 4)
+		if (GSMDBG_DATA_FULL_REPORT(debug))
 			print_hex_dump_bytes("gsm_data_kick: ",
 					     DUMP_PREFIX_OFFSET,
 					     gsm->txframe, len);
@@ -712,7 +723,8 @@ static void gsm_data_kick(struct gsm_mux *gsm)
 		gsm->tx_bytes -= msg->len;
 		/* For a burst of frames skip the extra SOF within the
 		   burst */
-		skip_sof = 1;
+		if (gsm->burst)
+			skip_sof = 1;
 
 		list_del(&msg->list);
 		kfree(msg);
@@ -804,41 +816,38 @@ static int gsm_dlci_data_output(struct gsm_mux *gsm, struct gsm_dlci *dlci)
 {
 	struct gsm_msg *msg;
 	u8 *dp;
-	int len, total_size, size;
+	int len, size;
 	int h = dlci->adaption - 1;
 
-	total_size = 0;
-	while (1) {
-		len = kfifo_len(dlci->fifo);
-		if (len == 0)
-			return total_size;
-
-		/* MTU/MRU count only the data bits */
-		if (len > gsm->mtu)
-			len = gsm->mtu;
-
-		size = len + h;
-
-		msg = gsm_data_alloc(gsm, dlci->addr, size, gsm->ftype);
-		/* FIXME: need a timer or something to kick this so it can't
-		   get stuck with no work outstanding and no buffer free */
-		if (msg == NULL)
-			return -ENOMEM;
-		dp = msg->data;
-		switch (dlci->adaption) {
-		case 1:	/* Unstructured */
-			break;
-		case 2:	/* Unstructed with modem bits.
-		Always one byte as we never send inline break data */
-			*dp++ = gsm_encode_modem(dlci);
-			break;
-		}
-		WARN_ON(kfifo_out_locked(dlci->fifo, dp , len, &dlci->lock) != len);
-		__gsm_data_queue(dlci, msg);
-		total_size += size;
+	len = kfifo_len(dlci->fifo);
+	if (len == 0)
+		return 0;
+
+	/* MTU/MRU count only the data bits */
+	if (len > gsm->mtu)
+		len = gsm->mtu;
+
+	size = len + h;
+
+	msg = gsm_data_alloc(gsm, dlci->addr, size, gsm->ftype);
+	/* FIXME: need a timer or something to kick this so it can't
+	   get stuck with no work outstanding and no buffer free */
+	if (msg == NULL)
+		return -ENOMEM;
+	dp = msg->data;
+	switch (dlci->adaption) {
+	case 1:	/* Unstructured */
+		break;
+	case 2:	/* Unstructed with modem bits. Always one byte as we never
+		   send inline break data */
+		*dp += gsm_encode_modem(dlci);
+		len--;
+		break;
 	}
+	WARN_ON(kfifo_out_locked(dlci->fifo, dp , len, &dlci->lock) != len);
+	__gsm_data_queue(dlci, msg);
 	/* Bytes of data we used up */
-	return total_size;
+	return size;
 }
 
 /**
@@ -871,6 +880,8 @@ static int gsm_dlci_data_output_framed(struct gsm_mux *gsm,
 		dlci->skb = skb_dequeue_tail(&dlci->skb_list);
 		if (dlci->skb == NULL)
 			return 0;
+		if (skb_queue_len(&dlci->skb_list) < TXLIST_THRESH_LO)
+			netif_wake_queue(dlci->net);
 		first = 1;
 	}
 	len = dlci->skb->len + overhead;
@@ -973,6 +984,8 @@ static void gsm_dlci_data_kick(struct gsm_dlci *dlci)
 		return;
 
 	spin_lock_irqsave(&dlci->gsm->tx_lock, flags);
+	if (unlikely(dlci->gsm->dead))
+		goto out;
 	/* If we have nothing running then we need to fire up */
 	sweep = (dlci->gsm->tx_bytes < TX_THRESH_LO);
 	if (dlci->gsm->tx_bytes == 0) {
@@ -983,6 +996,7 @@ static void gsm_dlci_data_kick(struct gsm_dlci *dlci)
 	}
 	if (sweep)
 		gsm_dlci_data_sweep(dlci->gsm);
+out:
 	spin_unlock_irqrestore(&dlci->gsm->tx_lock, flags);
 }
 
@@ -1224,16 +1238,20 @@ static void gsm_control_message(struct gsm_mux *gsm, unsigned int command,
 		break;
 	case CMD_FCON:
 		/* Modem can accept data again */
-		gsm->constipated = 0;
 		gsm_control_reply(gsm, CMD_FCON, NULL, 0);
 		/* Kick the link in case it is idling */
 		spin_lock_irqsave(&gsm->tx_lock, flags);
+		gsm->constipated = 0;
 		gsm_data_kick(gsm);
+		if (gsm->tx_bytes < TX_THRESH_LO)
+			gsm_dlci_data_sweep(gsm);
 		spin_unlock_irqrestore(&gsm->tx_lock, flags);
 		break;
 	case CMD_FCOFF:
 		/* Modem wants us to STFU */
+		spin_lock_irqsave(&gsm->tx_lock, flags);
 		gsm->constipated = 1;
+		spin_unlock_irqrestore(&gsm->tx_lock, flags);
 		gsm_control_reply(gsm, CMD_FCOFF, NULL, 0);
 		break;
 	case CMD_MSC:
@@ -1370,12 +1388,17 @@ static struct gsm_control *gsm_control_send(struct gsm_mux *gsm,
 	if (ctrl == NULL)
 		return NULL;
 retry:
-	wait_event(gsm->event, gsm->pending_cmd == NULL);
+	wait_event(gsm->event, gsm->pending_cmd == NULL || gsm->dead);
 	spin_lock_irqsave(&gsm->control_lock, flags);
-	if (gsm->pending_cmd != NULL) {
+	if ((gsm->pending_cmd != NULL) && !gsm->dead) {
 		spin_unlock_irqrestore(&gsm->control_lock, flags);
 		goto retry;
 	}
+	if (gsm->dead) {
+		spin_unlock_irqrestore(&gsm->control_lock, flags);
+		kfree(ctrl);
+		return NULL;
+	}
 	ctrl->cmd = command;
 	ctrl->data = data;
 	ctrl->len = clen;
@@ -1399,8 +1422,18 @@ retry:
 
 static int gsm_control_wait(struct gsm_mux *gsm, struct gsm_control *control)
 {
+	unsigned long flags;
 	int err;
-	wait_event(gsm->event, control->done == 1);
+	wait_event(gsm->event, control->done == 1 || gsm->dead);
+	if (gsm->dead) {
+		spin_lock_irqsave(&gsm->control_lock, flags);
+		if (control == gsm->pending_cmd) {
+			del_timer(&gsm->t2_timer);
+			gsm->pending_cmd = NULL;
+		}
+		control->error = -ETIMEDOUT;
+		spin_unlock_irqrestore(&gsm->control_lock, flags);
+	}
 	err = control->error;
 	kfree(control);
 	return err;
@@ -1426,7 +1459,7 @@ static int gsm_control_wait(struct gsm_mux *gsm, struct gsm_control *control)
 static void gsm_dlci_close(struct gsm_dlci *dlci)
 {
 	del_timer(&dlci->t1);
-	if (debug & 8)
+	if (GSMDBG_DLCI_STREAM_REPORT(debug))
 		pr_debug("DLCI %d goes closed.\n", dlci->addr);
 	dlci->state = DLCI_CLOSED;
 	if (dlci->addr != 0) {
@@ -1453,7 +1486,7 @@ static void gsm_dlci_open(struct gsm_dlci *dlci)
 	del_timer(&dlci->t1);
 	/* This will let a tty open continue */
 	dlci->state = DLCI_OPEN;
-	if (debug & 8)
+	if (GSMDBG_DLCI_STREAM_REPORT(debug))
 		pr_debug("DLCI %d goes open.\n", dlci->addr);
 	wake_up(&dlci->gsm->event);
 }
@@ -1529,7 +1562,8 @@ static void gsm_dlci_begin_open(struct gsm_dlci *dlci)
 static void gsm_dlci_begin_close(struct gsm_dlci *dlci)
 {
 	struct gsm_mux *gsm = dlci->gsm;
-	if (dlci->state == DLCI_CLOSED || dlci->state == DLCI_CLOSING)
+	if (dlci->state == DLCI_CLOSED || dlci->state == DLCI_CLOSING ||
+	    dlci->state == DLCI_HANGUP)
 		return;
 	dlci->retries = gsm->n2;
 	dlci->state = DLCI_CLOSING;
@@ -1556,33 +1590,34 @@ static void gsm_dlci_data(struct gsm_dlci *dlci, u8 *data, int clen)
 	unsigned int modem = 0;
 	int len = clen;
 
-	if (debug & 16)
-		pr_debug("%d bytes for tty\n", len);
-	switch (dlci->adaption)  {
-	/* Unsupported types */
-	/* Packetised interruptible data */
-	case 4:
-		break;
-	/* Packetised uininterruptible voice/data */
-	case 3:
-		break;
-	/* Asynchronous serial with line state in each frame */
-	case 2:
-		while (gsm_read_ea(&modem, *data++) == 0) {
-			len--;
-			if (len == 0)
-				return;
-		}
-		tty = tty_port_tty_get(port);
-		if (tty) {
-			gsm_process_modem(tty, dlci, modem, clen);
-			tty_kref_put(tty);
-		}
-	/* Line state will go via DLCI 0 controls only */
-	case 1:
-	default:
-		tty_insert_flip_string(port, data, len);
-		tty_flip_buffer_push(port);
+	if (GSMDBG_DLCI_DATA_REPORT(debug))
+		pr_debug("%s: %d bytes for tty\n", __func__, len);
+		switch (dlci->adaption)  {
+		/* Unsupported types */
+		/* Packetised interruptible data */
+		case 4:
+			break;
+		/* Packetised uininterruptible voice/data */
+		case 3:
+			break;
+		/* Asynchronous serial with line state in each frame */
+		case 2:
+			while (gsm_read_ea(&modem, *data++) == 0) {
+				len--;
+				if (len == 0)
+					return;
+			}
+			tty = tty_port_tty_get(port);
+			if (tty) {
+				gsm_process_modem(tty, dlci, modem, clen);
+				tty_kref_put(tty);
+			}
+		/* Line state will go via DLCI 0 controls only */
+		/* fall through */
+		case 1:
+		default:
+			tty_insert_flip_string(port, data, len);
+			tty_flip_buffer_push(port);
 	}
 }
 
@@ -1641,7 +1676,10 @@ static struct gsm_dlci *gsm_dlci_alloc(struct gsm_mux *gsm, int addr)
 	struct gsm_dlci *dlci = kzalloc(sizeof(struct gsm_dlci), GFP_ATOMIC);
 	if (dlci == NULL)
 		return NULL;
+	mutex_init(&dlci->rx_mutex);
 	spin_lock_init(&dlci->lock);
+	spin_lock_init(&dlci->gsmtty_lock);
+	kref_init(&dlci->ref);
 	mutex_init(&dlci->mutex);
 	dlci->fifo = &dlci->_fifo;
 	if (kfifo_alloc(&dlci->_fifo, 4096, GFP_KERNEL) < 0) {
@@ -1659,6 +1697,7 @@ static struct gsm_dlci *gsm_dlci_alloc(struct gsm_mux *gsm, int addr)
 	dlci->addr = addr;
 	dlci->adaption = gsm->adaption;
 	dlci->state = DLCI_CLOSED;
+	dlci->net = NULL;	/* network not initially created */
 	if (addr)
 		dlci->data = gsm_dlci_data;
 	else
@@ -1716,8 +1755,7 @@ static void gsm_dlci_release(struct gsm_dlci *dlci)
 		gsm_destroy_network(dlci);
 		mutex_unlock(&dlci->mutex);
 
-		tty_vhangup(tty);
-
+		tty_hangup(tty);
 		tty_port_tty_set(&dlci->port, NULL);
 		tty_kref_put(tty);
 	}
@@ -1751,14 +1789,14 @@ static void gsm_queue(struct gsm_mux *gsm)
 		gsm->fcs = gsm_fcs_add_block(gsm->fcs, gsm->buf, gsm->len);
 	if (gsm->encoding == 0) {
 		/* WARNING: gsm->received_fcs is used for
-		gsm->encoding = 0 only.
-		In this case it contain the last piece of data
-		required to generate final CRC */
+		   gsm->encoding = 0 only.
+		   In this case it contain the last piece of data
+		   required to generate final CRC */
 		gsm->fcs = gsm_fcs_add(gsm->fcs, gsm->received_fcs);
 	}
 	if (gsm->fcs != GOOD_FCS) {
 		gsm->bad_fcs++;
-		if (debug & 4)
+		if (GSMDBG_DATA_FULL_REPORT(debug))
 			pr_debug("BAD FCS %02x\n", gsm->fcs);
 		return;
 	}
@@ -1832,7 +1870,10 @@ static void gsm_queue(struct gsm_mux *gsm)
 			gsm_command(gsm, address, DM|PF);
 			return;
 		}
+		/* We must prevent from changing adaption while receiving */
+		mutex_lock(&dlci->rx_mutex);
 		dlci->data(dlci, gsm->buf, gsm->len);
+		mutex_unlock(&dlci->rx_mutex);
 		break;
 	default:
 		goto invalid;
@@ -1922,6 +1963,7 @@ static void gsm0_receive(struct gsm_mux *gsm, unsigned char c)
 			gsm->state = GSM_SEARCH;
 			break;
 		}
+		pr_debug("wait for GSM0_SOF, while got 0x%x\n", (u32)c);
 		break;
 	}
 }
@@ -2031,47 +2073,51 @@ static void gsm_error(struct gsm_mux *gsm,
 static void gsm_cleanup_mux(struct gsm_mux *gsm)
 {
 	int i;
-	struct gsm_dlci *dlci = gsm->dlci[0];
+	int t;
+	struct gsm_dlci *dlci;
 	struct gsm_msg *txq, *ntxq;
-	struct gsm_control *gc;
+	unsigned long flags;
 
 	gsm->dead = 1;
 
 	spin_lock(&gsm_mux_lock);
-	for (i = 0; i < MAX_MUX; i++) {
-		if (gsm_mux[i] == gsm) {
-			gsm_mux[i] = NULL;
-			break;
-		}
-	}
+	gsm_mux[gsm->num] = NULL;
 	spin_unlock(&gsm_mux_lock);
-	WARN_ON(i == MAX_MUX);
 
-	/* In theory disconnecting DLCI 0 is sufficient but for some
-	   modems this is apparently not the case. */
-	if (dlci) {
-		gc = gsm_control_send(gsm, CMD_CLD, NULL, 0);
-		if (gc)
-			gsm_control_wait(gsm, gc);
-	}
 	del_timer_sync(&gsm->t2_timer);
 	/* Now we are sure T2 has stopped */
-	if (dlci) {
-		dlci->dead = 1;
-		gsm_dlci_begin_close(dlci);
-		wait_event_interruptible(gsm->event,
-					dlci->state == DLCI_CLOSED);
-	}
 	/* Free up any link layer users */
-	mutex_lock(&gsm->mutex);
-	for (i = 0; i < NUM_DLCI; i++)
+	for (i = NUM_DLCI-1; i >= 0; i--) {
+		dlci = gsm->dlci[i];
+		if (dlci) {
+			if (i != 0)
+				gsm_dlci_begin_close(dlci);
+			else {
+				dlci->dead = 1;
+				gsm_dlci_begin_close(dlci);
+				if (dlci->state == DLCI_HANGUP)
+					goto close_this_dlci;
+				t = wait_event_timeout(gsm->event,
+					   dlci->state == DLCI_CLOSED,
+					   gsm->t2 * HZ / 100);
+				if (!t) {
+					pr_info("%s: timeout dlci0 close",
+						__func__);
+close_this_dlci:
+					gsm_dlci_close(dlci);
+				}
+			}
+		}
+	}
+	for (i = NUM_DLCI-1; i >= 0; i--)
 		if (gsm->dlci[i])
 			gsm_dlci_release(gsm->dlci[i]);
-	mutex_unlock(&gsm->mutex);
+	spin_lock_irqsave(&gsm->tx_lock, flags);
 	/* Now wipe the queues */
 	list_for_each_entry_safe(txq, ntxq, &gsm->tx_list, list)
 		kfree(txq);
 	INIT_LIST_HEAD(&gsm->tx_list);
+	spin_unlock_irqrestore(&gsm->tx_lock, flags);
 }
 
 /**
@@ -2121,6 +2167,35 @@ static int gsm_activate_mux(struct gsm_mux *gsm)
 }
 
 /**
+ *	gsm_mux_malloc		-
+ *	@size: bytes to allocate
+ *
+ *	Dedicated for gsm_mux buf/txframe malloc
+ */
+unsigned char *gsm_mux_buf_malloc(unsigned int size)
+{
+	if (size <= PAGE_SIZE)
+		return kmalloc(size, GFP_KERNEL);
+	else
+		return vmalloc(size);
+}
+
+/**
+ *	gsm_mux_buf_free		-
+ *	@size: bytes to free
+ *	@add: addr to free
+ *
+ *	Dedicated for gsm_mux buf/txframe free
+ */
+void gsm_mux_buf_free(unsigned int size, void *addr)
+{
+	if (size <= PAGE_SIZE)
+		kfree(addr);
+	else
+		vfree(addr);
+}
+
+/**
  *	gsm_free_mux		-	free up a mux
  *	@mux: mux to free
  *
@@ -2128,8 +2203,14 @@ static int gsm_activate_mux(struct gsm_mux *gsm)
  */
 static void gsm_free_mux(struct gsm_mux *gsm)
 {
-	kfree(gsm->txframe);
-	kfree(gsm->buf);
+	if (gsm->buf != NULL)
+		gsm_mux_buf_free(gsm->mru + 1, gsm->buf);
+	if (gsm->txframe != NULL) {
+		if (gsm->encoding == 0)
+			gsm_mux_buf_free(gsm->mtu + 1, gsm->txframe);
+		else
+			gsm_mux_buf_free(2 * gsm->mtu + 2, gsm->txframe);
+	}
 	kfree(gsm);
 }
 
@@ -2150,6 +2231,13 @@ static inline void mux_get(struct gsm_mux *gsm)
 	kref_get(&gsm->ref);
 }
 
+/**
+ *	mux_put		-	release a mux
+ *	@mux: mux to release
+ *
+ *	Dispose of allocated resources for a dead mux on release
+ *	from last client.
+ */
 static inline void mux_put(struct gsm_mux *gsm)
 {
 	kref_put(&gsm->ref, gsm_free_muxr);
@@ -2166,17 +2254,6 @@ static struct gsm_mux *gsm_alloc_mux(void)
 	struct gsm_mux *gsm = kzalloc(sizeof(struct gsm_mux), GFP_KERNEL);
 	if (gsm == NULL)
 		return NULL;
-	gsm->buf = kmalloc(MAX_MRU + 1, GFP_KERNEL);
-	if (gsm->buf == NULL) {
-		kfree(gsm);
-		return NULL;
-	}
-	gsm->txframe = kmalloc(2 * MAX_MRU + 2, GFP_KERNEL);
-	if (gsm->txframe == NULL) {
-		kfree(gsm->buf);
-		kfree(gsm);
-		return NULL;
-	}
 	spin_lock_init(&gsm->lock);
 	mutex_init(&gsm->mutex);
 	kref_init(&gsm->ref);
@@ -2186,10 +2263,13 @@ static struct gsm_mux *gsm_alloc_mux(void)
 	gsm->t2 = T2;
 	gsm->n2 = N2;
 	gsm->ftype = UIH;
+	gsm->initiator = 0;
 	gsm->adaption = 1;
 	gsm->encoding = 1;
 	gsm->mru = 64;	/* Default to encoding 1 so these should be 64 */
 	gsm->mtu = 64;
+	gsm->clocal = 1; /* Ignore CD (DV flags in MSC)*/
+	gsm->burst = 1; /* Support burst mode by default */
 	gsm->dead = 1;	/* Avoid early tty opens */
 
 	return gsm;
@@ -2207,13 +2287,20 @@ static struct gsm_mux *gsm_alloc_mux(void)
 
 static int gsmld_output(struct gsm_mux *gsm, u8 *data, int len)
 {
+	if (!gsm->tty) {
+		WARN_ON(1);
+		return -ENXIO;
+	}
 	if (tty_write_room(gsm->tty) < len) {
 		set_bit(TTY_DO_WRITE_WAKEUP, &gsm->tty->flags);
 		return -ENOSPC;
 	}
-	if (debug & 4)
-		print_hex_dump_bytes("gsmld_output: ", DUMP_PREFIX_OFFSET,
+	if (GSMDBG_DATA_FULL_REPORT(debug))
+		print_hex_dump_bytes(__func__, DUMP_PREFIX_OFFSET,
 				     data, len);
+	else if (GSMDBG_DATA_LEN_REPORT(debug))
+		pr_debug("n_gsm: >> %d bytes\n", len);
+
 	gsm->tty->ops->write(gsm->tty, data, len);
 	return len;
 }
@@ -2279,9 +2366,11 @@ static void gsmld_receive_buf(struct tty_struct *tty, const unsigned char *cp,
 	char buf[64];
 	char flags = TTY_NORMAL;
 
-	if (debug & 4)
-		print_hex_dump_bytes("gsmld_receive: ", DUMP_PREFIX_OFFSET,
+	if (GSMDBG_DATA_FULL_REPORT(debug))
+		print_hex_dump_bytes(__func__, DUMP_PREFIX_OFFSET,
 				     cp, count);
+	else if (GSMDBG_DATA_LEN_REPORT(debug))
+		pr_debug("n_gsm: << %d bytes\n", count);
 
 	for (i = count, dp = cp, f = fp; i; i--, dp++) {
 		if (f)
@@ -2335,6 +2424,26 @@ static void gsmld_flush_buffer(struct tty_struct *tty)
 }
 
 /**
+ *	gsmld_hangup		-	hangup the ldisc for this tty
+ *	@tty: device
+ */
+
+static int gsmld_hangup(struct tty_struct *tty)
+{
+	struct gsm_mux *gsm = tty->disc_data;
+	int i;
+	struct gsm_dlci *dlci;
+
+	for (i = NUM_DLCI-1; i >= 0; i--) {
+		dlci = gsm->dlci[i];
+		if (dlci)
+			dlci->state = DLCI_HANGUP;
+	}
+
+	return 0;
+}
+
+/**
  *	gsmld_close		-	close the ldisc for this tty
  *	@tty: device
  *
@@ -2403,9 +2512,8 @@ static void gsmld_write_wakeup(struct tty_struct *tty)
 	clear_bit(TTY_DO_WRITE_WAKEUP, &tty->flags);
 	spin_lock_irqsave(&gsm->tx_lock, flags);
 	gsm_data_kick(gsm);
-	if (gsm->tx_bytes < TX_THRESH_LO) {
+	if (gsm->tx_bytes < TX_THRESH_LO)
 		gsm_dlci_data_sweep(gsm);
-	}
 	spin_unlock_irqrestore(&gsm->tx_lock, flags);
 }
 
@@ -2527,6 +2635,34 @@ static int gsmld_config(struct tty_struct *tty, struct gsm_mux *gsm,
 		need_restart = 1;
 
 	/*
+	 *	gsm_mux.buf allocate dynamically
+	 *	according to ldisc configuration
+	 */
+	if (gsm->buf != NULL)
+		gsm_mux_buf_free(gsm->mru + 1, gsm->buf);
+	gsm->buf = gsm_mux_buf_malloc(c->mru + 1);
+	if (gsm->buf == NULL)
+		return -ENOMEM;
+	/*
+	 *	gsm_mux.txframe allocate dynamically
+	 *	according to ldisc configuration
+	 */
+	if (gsm->txframe != NULL) {
+		if (gsm->encoding == 0)
+			gsm_mux_buf_free(gsm->mtu + 1, gsm->txframe);
+		else
+			gsm_mux_buf_free(2 * gsm->mtu + 2, gsm->txframe);
+	}
+	if (c->encapsulation == 0)
+		gsm->txframe = gsm_mux_buf_malloc(c->mtu + 1);
+	else
+		gsm->txframe = gsm_mux_buf_malloc(2 * c->mtu + 2);
+	if (gsm->txframe == NULL) {
+		gsm_mux_buf_free(c->mru + 1, gsm->buf);
+		return -ENOMEM;
+	}
+
+	/*
 	 *	Close down what is needed, restart and initiate the new
 	 *	configuration
 	 */
@@ -2548,6 +2684,8 @@ static int gsmld_config(struct tty_struct *tty, struct gsm_mux *gsm,
 	gsm->encoding = c->encapsulation;
 	gsm->adaption = c->adaption;
 	gsm->n2 = c->n2;
+	gsm->clocal = c->clocal;
+	gsm->burst = c->burst;
 
 	if (c->i == 1)
 		gsm->ftype = UIH;
@@ -2591,6 +2729,8 @@ static int gsmld_ioctl(struct tty_struct *tty, struct file *file,
 		pr_debug("Ftype %d i %d\n", gsm->ftype, c.i);
 		c.mru = gsm->mru;
 		c.mtu = gsm->mtu;
+		c.clocal = gsm->clocal;
+		c.burst = gsm->burst;
 		c.k = 0;
 		if (copy_to_user((void *)arg, &c, sizeof(c)))
 			return -EFAULT;
@@ -2671,6 +2811,8 @@ static int gsm_mux_net_start_xmit(struct sk_buff *skb,
 	skb_queue_head(&dlci->skb_list, skb);
 	STATS(net).tx_packets++;
 	STATS(net).tx_bytes += skb->len;
+	if (skb_queue_len(&dlci->skb_list) >= TXLIST_THRESH_HI)
+		netif_stop_queue(net);
 	gsm_dlci_data_kick(dlci);
 	/* And tell the kernel when the last transmit started. */
 	net->trans_start = jiffies;
@@ -2682,7 +2824,7 @@ static int gsm_mux_net_start_xmit(struct sk_buff *skb,
 static void gsm_mux_net_tx_timeout(struct net_device *net)
 {
 	/* Tell syslog we are hosed. */
-	dev_dbg(&net->dev, "Tx timed out.\n");
+	dev_dbg((struct device *)&net->dev, "Tx timed out.\n");
 
 	/* Update statistics */
 	STATS(net).tx_errors++;
@@ -2708,7 +2850,15 @@ static void gsm_mux_rx_netchar(struct gsm_dlci *dlci,
 	memcpy(skb_put(skb, size), in_buf, size);
 
 	skb->dev = net;
-	skb->protocol = __constant_htons(ETH_P_IP);
+	/* IP version bit 4 to 7 */
+	switch ((*in_buf) >> 4) {
+	case 4:
+		skb->protocol = htons(ETH_P_IP);
+		break;
+	case 6:
+		skb->protocol = htons(ETH_P_IPV6);
+		break;
+	}
 
 	/* Ship it off to the kernel */
 	netif_rx(skb);
@@ -2729,6 +2879,9 @@ static int gsm_change_mtu(struct net_device *net, int new_mtu)
 	return 0;
 }
 
+/*
+ * RRG: FIXME: replace MAX_MTU w/ gsm->mtu which can be smaller
+ */
 static void gsm_mux_net_init(struct net_device *net)
 {
 	static const struct net_device_ops gsm_netdev_ops = {
@@ -2739,13 +2892,13 @@ static void gsm_mux_net_init(struct net_device *net)
 		.ndo_get_stats		= gsm_mux_net_get_stats,
 		.ndo_change_mtu		= gsm_change_mtu,
 	};
-
 	net->netdev_ops = &gsm_netdev_ops;
 
 	/* fill in the other fields */
 	net->watchdog_timeo = GSM_NET_TX_TIMEOUT;
 	net->flags = IFF_POINTOPOINT | IFF_NOARP | IFF_MULTICAST;
 	net->type = ARPHRD_NONE;
+	net->mtu = MAX_MTU;
 	net->tx_queue_len = 10;
 }
 
@@ -2756,14 +2909,16 @@ static void gsm_destroy_network(struct gsm_dlci *dlci)
 	struct gsm_mux_net *mux_net;
 
 	pr_debug("destroy network interface");
-	if (!dlci->net)
-		return;
-	mux_net = (struct gsm_mux_net *)netdev_priv(dlci->net);
-	muxnet_put(mux_net);
+	mutex_lock(&dlci->rx_mutex);
+	if (dlci->net) {
+		netif_tx_disable(dlci->net);
+		mux_net = (struct gsm_mux_net *)netdev_priv(dlci->net);
+		muxnet_put(mux_net);
+	}
+	mutex_unlock(&dlci->rx_mutex);
 }
 
 
-/* caller holds the dlci mutex */
 static int gsm_create_network(struct gsm_dlci *dlci, struct gsm_netconfig *nc)
 {
 	char *netname;
@@ -2778,8 +2933,11 @@ static int gsm_create_network(struct gsm_dlci *dlci, struct gsm_netconfig *nc)
 	if (dlci->adaption > 2)
 		return -EBUSY;
 
-	if (nc->protocol != htons(ETH_P_IP))
+	if (nc->protocol != htons(ETH_P_IP)
+	  && nc->protocol != htons(ETH_P_IPV6)) {
+		pr_err("only IPV4/V6 protocol supported");
 		return -EPROTONOSUPPORT;
+	}
 
 	if (nc->adaption != 3 && nc->adaption != 4)
 		return -EPROTONOSUPPORT;
@@ -2796,6 +2954,8 @@ static int gsm_create_network(struct gsm_dlci *dlci, struct gsm_netconfig *nc)
 		pr_err("alloc_netdev failed");
 		return -ENOMEM;
 	}
+
+	mutex_lock(&dlci->rx_mutex);
 	net->mtu = dlci->gsm->mtu;
 	mux_net = (struct gsm_mux_net *)netdev_priv(net);
 	mux_net->dlci = dlci;
@@ -2808,6 +2968,7 @@ static int gsm_create_network(struct gsm_dlci *dlci, struct gsm_netconfig *nc)
 	dlci->adaption = nc->adaption;
 	dlci->data = gsm_mux_rx_netchar;
 	dlci->net = net;
+	mutex_unlock(&dlci->rx_mutex);
 
 	pr_debug("register netdev");
 	retval = register_netdev(net);
@@ -2826,6 +2987,7 @@ struct tty_ldisc_ops tty_ldisc_packet = {
 	.name            = "n_gsm",
 	.open            = gsmld_open,
 	.close           = gsmld_close,
+	.hangup          = gsmld_hangup,
 	.flush_buffer    = gsmld_flush_buffer,
 	.chars_in_buffer = gsmld_chars_in_buffer,
 	.read            = gsmld_read,
@@ -2868,7 +3030,7 @@ static int gsm_carrier_raised(struct tty_port *port)
 	/* Not yet open so no carrier info */
 	if (dlci->state != DLCI_OPEN)
 		return 0;
-	if (debug & 2)
+	if (GSMDBG_FORCE_CARRIER(debug))
 		return 1;
 	return dlci->modem_rx & TIOCM_CD;
 }
@@ -2893,6 +3055,40 @@ static const struct tty_port_operations gsm_port_ops = {
 	.destruct = gsm_dlci_free,
 };
 
+static void gsmtty_attach_dlci(struct tty_struct *tty, struct gsm_dlci *dlci)
+{
+	spin_lock(&dlci->gsmtty_lock);
+	dlci->gsmtty_count++;
+	spin_unlock(&dlci->gsmtty_lock);
+	dlci_get(dlci);
+	dlci_get(dlci->gsm->dlci[0]);
+	mux_get(dlci->gsm);
+}
+
+static void gsmtty_detach_dlci(struct tty_struct *tty)
+{
+	struct gsm_dlci *dlci = tty->driver_data;
+	struct gsm_mux *gsm;
+	int has_open;
+
+	if (!dlci) {
+		WARN(1, "dlci shouldn't be NULL\n");
+		return;
+	}
+	spin_lock(&dlci->gsmtty_lock);
+	has_open = --dlci->gsmtty_count;
+	if (!has_open) {
+		tty_port_tty_set(&dlci->port, NULL);
+		tty->driver_data = NULL;
+	}
+	spin_unlock(&dlci->gsmtty_lock);
+
+	gsm = dlci->gsm;
+	dlci_put(dlci);
+	dlci_put(gsm->dlci[0]);
+	mux_put(gsm);
+}
+
 static int gsmtty_install(struct tty_driver *driver, struct tty_struct *tty)
 {
 	struct gsm_mux *gsm;
@@ -2953,16 +3149,40 @@ static int gsmtty_open(struct tty_struct *tty, struct file *filp)
 {
 	struct gsm_dlci *dlci = tty->driver_data;
 	struct tty_port *port = &dlci->port;
+	struct gsm_mux *gsm = dlci->gsm;
+	struct ktermios save;
+	int t;
 
 	port->count++;
 	tty_port_tty_set(port, tty);
-
+	gsmtty_attach_dlci(tty, dlci);
+
+	/* Perform a change to the CLOCAL state and call into the driver
+	   layer to make it visible. All done with the termios mutex */
+	if (gsm->clocal) {
+		down_write(&tty->termios_rwsem);
+		save = tty->termios;
+		tty->termios.c_cflag |= CLOCAL;
+		if (tty->ops->set_termios)
+			tty->ops->set_termios(tty, &save);
+		up_write(&tty->termios_rwsem);
+	}
 	dlci->modem_rx = 0;
 	/* We could in theory open and close before we wait - eg if we get
 	   a DM straight back. This is ok as that will have caused a hangup */
 	set_bit(ASYNCB_INITIALIZED, &port->flags);
 	/* Start sending off SABM messages */
 	gsm_dlci_begin_open(dlci);
+
+	/* Wait for UA */
+	if (!(filp->f_flags & O_NONBLOCK)) {
+		t = wait_event_timeout(gsm->event,
+					dlci->state == DLCI_OPEN,
+					gsm->n2 * gsm->t1 * HZ / 100);
+		if (!t)
+			return -ENXIO;
+	}
+
 	/* And wait for virtual carrier */
 	return tty_port_block_til_ready(port, tty, filp);
 }
@@ -2974,28 +3194,36 @@ static void gsmtty_close(struct tty_struct *tty, struct file *filp)
 
 	if (dlci == NULL)
 		return;
+
 	if (dlci->state == DLCI_CLOSED)
 		return;
+	gsm = dlci->gsm;
 	mutex_lock(&dlci->mutex);
 	gsm_destroy_network(dlci);
 	mutex_unlock(&dlci->mutex);
-	gsm = dlci->gsm;
-	if (tty_port_close_start(&dlci->port, tty, filp) == 0)
+	if (tty_port_close_start(&dlci->port, tty, filp) == 0) {
+		gsmtty_detach_dlci(tty);
 		return;
+	}
 	gsm_dlci_begin_close(dlci);
 	if (test_bit(ASYNCB_INITIALIZED, &dlci->port.flags)) {
 		if (C_HUPCL(tty))
 			tty_port_lower_dtr_rts(&dlci->port);
 	}
+
+	/* Wait for UA */
+	if (!(filp->f_flags & O_NONBLOCK))
+		wait_event_timeout(gsm->event,
+					dlci->state == DLCI_CLOSED,
+					gsm->n2 * gsm->t1 * HZ / 100);
 	tty_port_close_end(&dlci->port, tty);
-	tty_port_tty_set(&dlci->port, NULL);
-	return;
+	gsmtty_detach_dlci(tty);
 }
 
 static void gsmtty_hangup(struct tty_struct *tty)
 {
 	struct gsm_dlci *dlci = tty->driver_data;
-	if (dlci->state == DLCI_CLOSED)
+	if (!dlci)
 		return;
 	tty_port_hangup(&dlci->port);
 	gsm_dlci_begin_close(dlci);
@@ -3006,8 +3234,12 @@ static int gsmtty_write(struct tty_struct *tty, const unsigned char *buf,
 {
 	int sent;
 	struct gsm_dlci *dlci = tty->driver_data;
-	if (dlci->state == DLCI_CLOSED)
-		return -EINVAL;
+
+	if (dlci->state == DLCI_OPENING)
+		return -EAGAIN;
+
+	if (dlci->state != DLCI_OPEN)
+		return -ENXIO;
 	/* Stuff the bytes into the fifo queue */
 	sent = kfifo_in_locked(dlci->fifo, buf, len, &dlci->lock);
 	/* Need to kick the channel */
@@ -3034,7 +3266,7 @@ static int gsmtty_chars_in_buffer(struct tty_struct *tty)
 static void gsmtty_flush_buffer(struct tty_struct *tty)
 {
 	struct gsm_dlci *dlci = tty->driver_data;
-	if (dlci->state == DLCI_CLOSED)
+	if (!dlci)
 		return;
 	/* Caution needed: If we implement reliable transport classes
 	   then the data being transmitted can't simply be junked once
@@ -3216,6 +3448,7 @@ static int __init gsm_init(void)
 		pr_err("gsm_init: tty allocation failed.\n");
 		return -EINVAL;
 	}
+	gsm_tty_driver->owner	= THIS_MODULE;
 	gsm_tty_driver->driver_name	= "gsmtty";
 	gsm_tty_driver->name		= "gsmtty";
 	gsm_tty_driver->major		= 0;	/* Dynamic */
diff --git a/include/linux/gsmmux.h b/include/linux/gsmmux.h
index c25e9477f7c3..e9678551036e 100644
--- a/include/linux/gsmmux.h
+++ b/include/linux/gsmmux.h
@@ -1,8 +1,9 @@
 #ifndef _LINUX_GSMMUX_H
 #define _LINUX_GSMMUX_H
 
-struct gsm_config
-{
+#include <linux/if.h>
+
+struct gsm_config {
 	unsigned int adaption;
 	unsigned int encapsulation;
 	unsigned int initiator;
@@ -14,7 +15,9 @@ struct gsm_config
 	unsigned int mtu;
 	unsigned int k;
 	unsigned int i;
-	unsigned int unused[8];		/* Padding for expansion without
+	unsigned int clocal;
+	unsigned int burst;
+	unsigned int unused[6];		/* Padding for expansion without
 					   breaking stuff */
 };
 
-- 
1.9.1

