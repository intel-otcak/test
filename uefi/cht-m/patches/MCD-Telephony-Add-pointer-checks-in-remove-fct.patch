From 4b6250eae0b3e38590b86befd1eef009fa4097e1 Mon Sep 17 00:00:00 2001
From: Gwenn Bourree <gwenn.bourree@intel.com>
Date: Thu, 16 Apr 2015 16:49:24 +0200
Subject: [PATCH] [MCD/Telephony]: Add pointer checks in remove fct

In case of no initialization from MMGR, some function
pointers are not initialized. Then when they are used
in the remove/shutdown function, they generate a kernel
panic.
Moreover, some invalid pointer checks have been removed
or replaced by valid ones.

Change-Id: I9071d38d7c9a3c5722252bf3e5aa419b441b2e3e
Signed-off-by: Gwenn Bourree <gwenn.bourree@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-30607
---
 drivers/staging/modem_control/mcd_acpi.c |  19 ++++++
 drivers/staging/modem_control/mcd_acpi.h |   1 +
 drivers/staging/modem_control/mdm_ctrl.c | 108 ++++++++++++++++++++++++-------
 drivers/staging/modem_control/mdm_util.c |  28 ++++++++
 drivers/staging/modem_control/mdm_util.h |   2 +
 5 files changed, 135 insertions(+), 23 deletions(-)

diff --git a/drivers/staging/modem_control/mcd_acpi.c b/drivers/staging/modem_control/mcd_acpi.c
index 5533580c656c..b2b986d1b11e 100644
--- a/drivers/staging/modem_control/mcd_acpi.c
+++ b/drivers/staging/modem_control/mcd_acpi.c
@@ -97,6 +97,14 @@ static struct attribute_group mdm_attr_group = {
 static struct kobject *telephony_kobj;
 static int nb_mdms;
 
+int remove_sysfs_telephony_entry(void *pdata)
+{
+	sysfs_remove_group(telephony_kobj, &mdm_attr_group);
+
+	kobject_put(telephony_kobj);
+
+	return 0;
+}
 
 int create_sysfs_telephony_entry(void *pdata)
 {
@@ -413,6 +421,17 @@ int get_modem_acpi_data(struct platform_device *pdev)
 	return ret;
 }
 
+void put_modem_acpi_data(struct platform_device *pdev)
+{
+	struct mcd_base_info *info = pdev->dev.platform_data;
+
+	if (!info)
+		return;
+
+	remove_sysfs_telephony_entry(info);
+}
+
+
 int get_nb_mdms(void)
 {
 	return nb_mdms;
diff --git a/drivers/staging/modem_control/mcd_acpi.h b/drivers/staging/modem_control/mcd_acpi.h
index 646dc4488762..bf1977a09731 100644
--- a/drivers/staging/modem_control/mcd_acpi.h
+++ b/drivers/staging/modem_control/mcd_acpi.h
@@ -13,3 +13,4 @@
 
 /* Retrieve modem parameters on ACPI framework */
 int get_modem_acpi_data(struct platform_device *pdev);
+void put_modem_acpi_data(struct platform_device *pdev);
\ No newline at end of file
diff --git a/drivers/staging/modem_control/mdm_ctrl.c b/drivers/staging/modem_control/mdm_ctrl.c
index ee22c46e5a19..0f3eb5a418a8 100644
--- a/drivers/staging/modem_control/mdm_ctrl.c
+++ b/drivers/staging/modem_control/mdm_ctrl.c
@@ -309,7 +309,12 @@ static int get_hangup_reasons(struct mdm_info *mdm)
 static int mdm_ctrl_dev_open(struct inode *inode, struct file *filep)
 {
 	unsigned int minor = iminor(inode);
-	struct mdm_info *mdm = &mdm_drv->mdm[minor];
+	struct mdm_info *mdm;
+
+	if (!mdm_drv)
+		return -ENODEV;
+
+	mdm = &mdm_drv->mdm[minor];
 
 	mutex_lock(&mdm->lock);
 	/* Only ONE instance of this device can be opened */
@@ -334,7 +339,12 @@ static int mdm_ctrl_dev_open(struct inode *inode, struct file *filep)
 static int mdm_ctrl_dev_close(struct inode *inode, struct file *filep)
 {
 	unsigned int minor = iminor(inode);
-	struct mdm_info *mdm = &mdm_drv->mdm[minor];
+	struct mdm_info *mdm;
+
+	if (!mdm_drv)
+		return -ENODEV;
+
+	mdm = &mdm_drv->mdm[minor];
 
 	/* Set the open flag */
 	mutex_lock(&mdm->lock);
@@ -699,9 +709,17 @@ static unsigned int mdm_ctrl_dev_poll(struct file *filep,
 	struct mdm_info *mdm = &mdm_drv->mdm[minor];
 	unsigned int ret = 0;
 
+	if (!mdm_drv)
+		return -ENODEV;
+
+	mdm = &mdm_drv->mdm[minor];
+
 	/* Wait event change */
 	poll_wait(filep, &mdm->wait_wq, pt);
 
+	if (!mdm_drv)
+		return -ENODEV;
+
 	/* State notify */
 	if (mdm->polled_state_reached ||
 	    (mdm_ctrl_get_state(mdm) & mdm->polled_states)) {
@@ -792,7 +810,7 @@ static int mdm_ctrl_module_probe(struct platform_device *pdev)
 			MDM_BOOT_DEVNAME);
 	if (ret) {
 		pr_err(DRVNAME ": alloc_chrdev_region failed (err: %d)\n", ret);
-		goto free_drv;
+		goto put_device_info;
 	}
 
 	new_drv->major = MAJOR(new_drv->tdev);
@@ -897,8 +915,10 @@ static int mdm_ctrl_module_probe(struct platform_device *pdev)
  unreg_reg:
 	unregister_chrdev_region(new_drv->tdev, 1);
 
+ put_device_info:
+	mdm_ctrl_put_device_info(new_drv, pdev);
+
  free_drv:
-	kfree(new_drv->all_pdata);
 	kfree(new_drv);
 
  out:
@@ -907,37 +927,74 @@ static int mdm_ctrl_module_probe(struct platform_device *pdev)
 }
 
 /**
- *  mdm_ctrl_module_exit - Frees the resources taken by the control driver
+ *  mdm_ctrl_module_remove - Frees the resources taken by the control driver
  */
 static int mdm_ctrl_module_remove(struct platform_device *pdev)
 {
 	int i = 0;
+	int irq_to_be_freed = INVALID_GPIO;
+	struct mdm_ctrl *driver_data;
 
 	if (!mdm_drv)
 		return 0;
 
-	for (i = 0; i < mdm_drv->nb_mdms; i++) {
-		struct mdm_info *mdm = &mdm_drv->mdm[i];
+	driver_data = mdm_drv;
+	mdm_drv = NULL;
+
+	/* Unregister the device */
+	device_destroy(driver_data->class, driver_data->tdev);
+	class_destroy(driver_data->class);
+	cdev_del(&driver_data->cdev);
+	unregister_chrdev_region(driver_data->tdev, 1);
+
+	for (i = 0; i < driver_data->nb_mdms; i++) {
+		struct mdm_info *mdm = &driver_data->mdm[i];
 
 		if (mdm->is_mdm_ctrl_disabled)
 			continue;
+		/*
+		 * Free the irqs that will not be used anymore
+		 * Core dump IRQ first
+		 */
+		if (mdm->pdata->cpu.get_irq_cdump) {
+			irq_to_be_freed =
+				mdm->pdata->cpu.get_irq_cdump(
+					mdm->pdata->cpu_data);
+			if (irq_to_be_freed != INVALID_GPIO) {
+				disable_irq_nosync(irq_to_be_freed);
+				free_irq(irq_to_be_freed, mdm);
+			}
+		}
+		/*
+		 * Then modem reset
+		 */
+		if (mdm->pdata->cpu.get_irq_rst) {
+			irq_to_be_freed =
+				mdm->pdata->cpu.get_irq_rst(
+					mdm->pdata->cpu_data);
+			if (irq_to_be_freed != INVALID_GPIO) {
+				disable_irq_nosync(irq_to_be_freed);
+				free_irq(irq_to_be_freed, mdm);
+			}
+		}
 
-		mdm_cleanup(mdm);
+		/*
+		 * swith off the modem
+		 */
+		if (mdm_ctrl_get_state(mdm) != MDM_CTRL_STATE_OFF)
+			mdm_ctrl_power_off(mdm);
 
-		if (mdm->pdata->cpu.get_irq_cdump(mdm->pdata->cpu_data) > 0)
-			free_irq(mdm->pdata->cpu.
-				 get_irq_cdump(mdm->pdata->cpu_data), NULL);
-		if (mdm->pdata->cpu.get_irq_rst(mdm->pdata->cpu_data) > 0)
-			free_irq(mdm->pdata->cpu.
-				 get_irq_rst(mdm->pdata->cpu_data), NULL);
+		mdm_cleanup(mdm);
 
-		mdm->pdata->mdm.cleanup(mdm->pdata->modem_data);
-		mdm->pdata->cpu.cleanup(mdm->pdata->cpu_data);
-		mdm->pdata->pmic.cleanup(mdm->pdata->pmic_data);
+		if (mdm->pdata->mdm.cleanup)
+			mdm->pdata->mdm.cleanup(mdm->pdata->modem_data);
+		if (mdm->pdata->cpu.cleanup)
+			mdm->pdata->cpu.cleanup(mdm->pdata->cpu_data);
+		if (mdm->pdata->pmic.cleanup)
+			mdm->pdata->pmic.cleanup(mdm->pdata->pmic_data);
 
 		kfree(mdm->pdata->cpu_data);
 		kfree(mdm->pdata->pmic_data);
-		kfree(mdm->pdata);
 	}
 
 	/* Unregister the device */
@@ -947,15 +1004,20 @@ static int mdm_ctrl_module_remove(struct platform_device *pdev)
 	unregister_chrdev_region(mdm_drv->tdev, 1);
 
 	/* Free the driver context */
-	kfree(mdm_drv->all_pdata);
-	kfree(mdm_drv->mdm);
-	kfree(mdm_drv);
-
-	mdm_drv = NULL;
+	mdm_ctrl_put_device_info(driver_data, pdev);
+	kfree(driver_data->mdm);
+	kfree(driver_data);
 
 	return 0;
 }
 
+static void mdm_ctrl_module_shutdown(struct platform_device *pdev)
+{
+	mdm_ctrl_module_remove(pdev);
+
+	return;
+}
+
 /* FOR ACPI HANDLING */
 static struct acpi_device_id mdm_ctrl_acpi_ids[] = {
 	/* ACPI IDs here */
diff --git a/drivers/staging/modem_control/mdm_util.c b/drivers/staging/modem_control/mdm_util.c
index 2621a95d6475..91d8c4e61141 100644
--- a/drivers/staging/modem_control/mdm_util.c
+++ b/drivers/staging/modem_control/mdm_util.c
@@ -243,6 +243,17 @@ struct mcd_base_info *modem_ctrl_get_dev_data(struct platform_device *pdev)
 }
 
 /**
+ *  modem_ctrl_put_dev_data - Release ACPI data.
+ *  @pdev: Reference to platform device data
+ *
+ *  Release the data used for ACPI data storage.
+ */
+void modem_ctrl_put_dev_data(struct platform_device *pdev)
+{
+	put_modem_acpi_data(pdev);
+}
+
+/**
  *  mdm_ctrl_get_device_info - Create platform and modem data.
  *  @drv: Reference to the driver structure
  *  @pdev: Reference to platform device data
@@ -262,6 +273,23 @@ int mdm_ctrl_get_device_info(struct mdm_ctrl *drv,
 }
 
 /**
+ *  mdm_ctrl_put_device_info - Release platform and modem data.
+ *  @drv: Reference to the driver structure
+ *  @pdev: Reference to platform device data
+ *
+ *  Platform are build from ACPI table data.
+ */
+void mdm_ctrl_put_device_info(struct mdm_ctrl *drv,
+			      struct platform_device *pdev)
+{
+	if (!drv->all_pdata)
+		return;
+	modem_ctrl_put_dev_data(pdev);
+	kfree(drv->all_pdata);
+	drv->all_pdata = NULL;
+}
+
+/**
  * mdm_ctrl_get_modem_data - get platform data for one modem
  * @drv: Reference to the driver structure
  * @minor: modem id
diff --git a/drivers/staging/modem_control/mdm_util.h b/drivers/staging/modem_control/mdm_util.h
index e0836373c22c..fadf3f26cb7c 100644
--- a/drivers/staging/modem_control/mdm_util.h
+++ b/drivers/staging/modem_control/mdm_util.h
@@ -135,6 +135,8 @@ inline int mdm_ctrl_get_state(struct mdm_info *mdm);
 
 int mdm_ctrl_get_device_info(struct mdm_ctrl *drv,
 		struct platform_device *pdev);
+void mdm_ctrl_put_device_info(struct mdm_ctrl *drv,
+		struct platform_device *pdev);
 int mdm_ctrl_get_modem_data(struct mdm_ctrl *drv, int minor);
 
 void mdm_ctrl_set_mdm_cpu(struct mdm_info *mdm);
-- 
1.9.1

