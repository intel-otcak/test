From 637ad212a98108f91c6e60153fd949c0fd61d519 Mon Sep 17 00:00:00 2001
From: Carlos Rodriguez <carlos.a.rodriguez@intel.com>
Date: Thu, 25 Feb 2016 01:37:14 -0600
Subject: [PATCH 3/7] ASoC: Intel: Enable HS buttons on codec rt5645

This patch enables the HS buttons on the Realtek codec
chip rt5645.

Change-Id: I58fc646400ce4b6a63e4a0e813ebfb50b65a50d5
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-24331
Signed-off-by: Carlos Rodriguez <carlos.a.rodriguez@intel.com>
Reviewed-on: https://android.intel.com:443/474833
Reviewed-on: https://android.intel.com:443/481554
---
 sound/soc/codecs/rt5645.c                  | 14 +++++----
 sound/soc/codecs/rt5645.h                  |  5 +++
 sound/soc/intel/board/cht_cr_dpcm_rt5645.c | 49 ++++++++++++++++++------------
 3 files changed, 43 insertions(+), 25 deletions(-)

diff --git a/sound/soc/codecs/rt5645.c b/sound/soc/codecs/rt5645.c
index d888faf..0033eae 100644
--- a/sound/soc/codecs/rt5645.c
+++ b/sound/soc/codecs/rt5645.c
@@ -55,6 +55,7 @@ static struct rt5645_init_reg init_list[] = {
 	{ RT5645_DIG_MISC	, 0x0129 },
 	{ RT5645_ADDA_CLK1	, 0x0005 },
 	{ RT5645_IL_CMD2	, 0x0010 }, /* set Inline Command Window */
+	{ RT5645_IL_CMD3	, 0x0009 },
 	{ RT5645_PRIV_INDEX	, 0x003d },
 	{ RT5645_PRIV_DATA	, 0x3600 },
 	{ RT5645_A_JD_CTRL1	, 0x0202 },/* for combo jack 1.8v */
@@ -385,6 +386,7 @@ static int rt5645_volatile_register(
 	case RT5645_IRQ_CTRL3:
 	case RT5645_INT_IRQ_ST:
 	case RT5645_IL_CMD:
+	case RT5645_JD_CTRL3:
 	case RT5645_VENDOR_ID:
 	case RT5645_VENDOR_ID1:
 	case RT5645_VENDOR_ID2:
@@ -597,7 +599,7 @@ int rt5645_headset_detect(struct snd_soc_codec *codec, int jack_insert)
 		snd_soc_dapm_force_enable_pin(&codec->dapm, "LDO2");
 		snd_soc_dapm_force_enable_pin(&codec->dapm, "Mic Det Power");
 		snd_soc_dapm_sync(&codec->dapm);
-		snd_soc_write(codec, RT5645_CJ_CTRL1, 0x4006);
+		snd_soc_write(codec, RT5645_CJ_CTRL1, 0x0006);
 
 		snd_soc_write(codec, RT5645_JD_CTRL3, 0x00b0);
 		snd_soc_update_bits(codec, RT5645_CJ_CTRL2,
@@ -612,11 +614,11 @@ int rt5645_headset_detect(struct snd_soc_codec *codec, int jack_insert)
 		case 0x1: /* Nokia type*/
 		case 0x2: /* iPhone type*/
 			/* for push button */
-			/*snd_soc_update_bits(codec, RT5645_INT_IRQ_ST,
-								0x8, 0x8);*/
-			/*snd_soc_update_bits(codec, RT5645_IL_CMD,
-								0x40, 0x40);*/
-			/*snd_soc_read(codec, RT5645_IL_CMD);*/
+			snd_soc_update_bits(codec, RT5645_INT_IRQ_ST,
+								0x8, 0x8);
+			snd_soc_update_bits(codec, RT5645_IL_CMD,
+								0x20, 0x20);
+			snd_soc_read(codec, RT5645_IL_CMD);
 			jack_type = SND_JACK_HEADSET;
 			break;
 		default:
diff --git a/sound/soc/codecs/rt5645.h b/sound/soc/codecs/rt5645.h
index 7f3c74e..2fdbc6f 100644
--- a/sound/soc/codecs/rt5645.h
+++ b/sound/soc/codecs/rt5645.h
@@ -2087,6 +2087,11 @@
 #define RT5645_ZCD_HP_DIS			(0x0 << 15)
 #define RT5645_ZCD_HP_EN			(0x1 << 15)
 
+/* Inline Command Control 1 (0xdb) */
+#define RT5645_STA_HOLD_UP_BTN			(0x1 << 13)
+#define RT5645_STA_HOLD_CENTER_BTN		(0x1 << 10)
+#define RT5645_STA_HOLD_DOWN_BTN		(0x1 << 7)
+#define RT5645_INLINE_EN			(0x1 << 5)
 
 /* Codec Private Register definition */
 /* 3D Speaker Control (0x63) */
diff --git a/sound/soc/intel/board/cht_cr_dpcm_rt5645.c b/sound/soc/intel/board/cht_cr_dpcm_rt5645.c
index 01c1dc0..50bcc18 100644
--- a/sound/soc/intel/board/cht_cr_dpcm_rt5645.c
+++ b/sound/soc/intel/board/cht_cr_dpcm_rt5645.c
@@ -78,7 +78,9 @@ static struct snd_soc_jack_gpio hs_gpio = {
 		.name			= "cht-codec-int",
 		.report			= SND_JACK_HEADSET |
 					  SND_JACK_HEADPHONE |
-					  SND_JACK_BTN_0,
+					  SND_JACK_BTN_0 |
+					  SND_JACK_BTN_1 |
+					  SND_JACK_BTN_2,
 		.debounce_time		= CHT_INTR_DEBOUNCE,
 		.jack_status_check	= cht_hs_detection,
 };
@@ -360,25 +362,29 @@ static void cht_check_hs_button_status(struct work_struct *work)
 	if (((jack->status & SND_JACK_HEADSET) == SND_JACK_HEADSET)
 			&& ctx->process_button_events) {
 
-		status = rt5645_check_jd_status(codec);
-		if (!status) {
-			/* confirm jack is connected */
-			status = rt5645_button_detect(codec);
-			if (jack->status & SND_JACK_BTN_0) {
-				/* if button was previosly in pressed state*/
-				if (!status) {
-					pr_debug("BR event received\n");
-					jack_type = SND_JACK_HEADSET;
-				}
-			} else {
-				/* If button was previously in released state */
-				if (status) {
-					pr_debug("BP event received\n");
-					jack_type = SND_JACK_HEADSET |
-								SND_JACK_BTN_0;
-				}
-			}
+		status = rt5645_button_detect(codec);
+		switch (status) {
+		case RT5645_STA_HOLD_UP_BTN:
+			/* Up */
+			jack_type = SND_JACK_HEADSET |
+				SND_JACK_BTN_1;
+			break;
+		case RT5645_STA_HOLD_CENTER_BTN:
+			/* Center */
+			jack_type = SND_JACK_HEADSET |
+				SND_JACK_BTN_0;
+			break;
+		case RT5645_STA_HOLD_DOWN_BTN:
+			/* Down */
+			jack_type = SND_JACK_HEADSET |
+				SND_JACK_BTN_2;
+			break;
+		default:
+			/* Release */
+			jack_type = SND_JACK_HEADSET;
+			break;
 		}
+
 		/* There could be button interrupts during jack removal.
 		 * There can be situations where a button interrupt is generated
 		 * first but no jack removal interrupt is generated.
@@ -641,6 +647,9 @@ static int cht_audio_init(struct snd_soc_pcm_runtime *runtime)
 	cht_set_bias_level(card, &card->dapm, SND_SOC_BIAS_OFF);
 	card->dapm.idle_bias_off = true;
 
+	snd_soc_update_bits(codec, RT5645_IL_CMD, RT5645_INLINE_EN,
+			RT5645_INLINE_EN);
+
 	desc = devm_gpiod_get_index(codec->dev, NULL, 0);
 	if (!IS_ERR(desc)) {
 		codec_gpio = desc_to_gpio(desc);
@@ -687,6 +696,8 @@ static int cht_audio_init(struct snd_soc_pcm_runtime *runtime)
 		return ret;
 	}
 	snd_jack_set_key(ctx->jack.jack, SND_JACK_BTN_0, KEY_MEDIA);
+	snd_jack_set_key(ctx->jack.jack, SND_JACK_BTN_1, KEY_VOLUMEUP);
+	snd_jack_set_key(ctx->jack.jack, SND_JACK_BTN_2, KEY_VOLUMEDOWN);
 	ret = snd_soc_jack_add_gpios(&ctx->jack, 1, &hs_gpio);
 	if (ret) {
 		pr_err("adding jack GPIO failed\n");
-- 
1.9.1

