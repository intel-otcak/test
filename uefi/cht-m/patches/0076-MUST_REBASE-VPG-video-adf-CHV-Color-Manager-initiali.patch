From 0cee1b64174328113dc885c60f93084db115c838 Mon Sep 17 00:00:00 2001
Message-Id: <0cee1b64174328113dc885c60f93084db115c838.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Kausal Malladi <Kausal.Malladi@intel.com>
Date: Sun, 1 Feb 2015 14:05:13 +0530
Subject: [PATCH 76/95] MUST_REBASE [VPG]: video/adf: CHV Color Manager
 initialization

This patch :
* Creates the basic initialization and validation of property for CHV
  color correction.
* Adds Color Manager specific register details inside chv_dc_regs.
* Initializes pipe and plane properties for CHV platform.
* Creates helper function to register pipe and plane properties
  with the color manager framework.
* Updates Makefile to have the CHV Color Correction included for
  compilation.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-4163
Change-Id: I9fc00f6345e8570c95836b7c358b3360d22ff468
Signed-off-by: Kausal Malladi <Kausal.Malladi@intel.com>
---
 drivers/video/adf/intel/core/intel_color_manager.c |    1 +
 drivers/video/adf/intel/core/vlv/Makefile          |    3 +-
 .../adf/intel/core/vlv/chv_color_correction.c      |  197 ++++++++++++++++++++
 .../intel/include/core/vlv/chv_color_correction.h  |  133 +++++++++++++
 .../video/adf/intel/include/core/vlv/chv_dc_regs.h |   77 +++++++-
 5 files changed, 409 insertions(+), 2 deletions(-)
 create mode 100644 drivers/video/adf/intel/core/vlv/chv_color_correction.c
 create mode 100644 drivers/video/adf/intel/include/core/vlv/chv_color_correction.h

diff --git a/drivers/video/adf/intel/core/intel_color_manager.c b/drivers/video/adf/intel/core/intel_color_manager.c
index c17ff5d4..23584d2 100644
--- a/drivers/video/adf/intel/core/intel_color_manager.c
+++ b/drivers/video/adf/intel/core/intel_color_manager.c
@@ -36,6 +36,7 @@
 typedef bool (*get_color_capabilities)(void *props_data, int object_type);
 get_color_capabilities platform_color_capabilities[] = {
 	vlv_get_color_correction,
+	chv_get_color_correction,
 };
 
 /*
diff --git a/drivers/video/adf/intel/core/vlv/Makefile b/drivers/video/adf/intel/core/vlv/Makefile
index a022ef6..2e43386 100644
--- a/drivers/video/adf/intel/core/vlv/Makefile
+++ b/drivers/video/adf/intel/core/vlv/Makefile
@@ -15,4 +15,5 @@ obj-y := vlv_dc_config.o \
 	vlv_hdmi_port.o \
 	chv_dpio.o \
 	vlv_dp_port.o\
-	vlv_color_correction.o
+	vlv_color_correction.o \
+	chv_color_correction.o
diff --git a/drivers/video/adf/intel/core/vlv/chv_color_correction.c b/drivers/video/adf/intel/core/vlv/chv_color_correction.c
new file mode 100644
index 0000000..48740cf
--- /dev/null
+++ b/drivers/video/adf/intel/core/vlv/chv_color_correction.c
@@ -0,0 +1,197 @@
+/*
+ * Copyright © 2014 Intel Corporation
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ * Author:
+ * Shashank Sharma <shashank.sharma@intel.com>
+ * Ramalingam C <Ramalingam.c@intel.com>
+ * Kausal Malladi <Kausal.Malladi@intel.com>
+ */
+
+#include <core/vlv/chv_color_correction.h>
+
+/*
+ * Cherryview SOC allows following color correction values:
+ *	- CSC(wide gamut) with 3x3 matrix = 9 csc correction values.
+ *	- Gamma correction with 128 gamma values + 1 GCMAX value.
+ */
+const struct color_property chv_pipe_color_corrections[] = {
+	{
+		.status = false,
+		.prop_id = csc,
+		.len = CHV_CSC_VALS,
+		.name = "csc-correction",
+		.validate = chv_validate,
+	},
+
+	{
+		.status = false,
+		.prop_id = gamma,
+		.len = CHV_GAMMA_VALS,
+		.name = "gamma-correction",
+		.validate = chv_validate,
+	},
+
+	{
+		.status = false,
+		.prop_id = degamma,
+		.len = CHV_DEGAMMA_VALS,
+		.name = "degamma-enable-disable",
+		.validate = chv_validate,
+	}
+};
+
+/*
+ * Cherryview SOC allows following plane level color correction values:
+ *	- contrast: single valued property
+ *	- brightness: single valued property
+ *	- hue: single valued property
+ *	- saturation: single valued property
+ */
+const struct color_property chv_plane_color_corrections[] = {
+	{
+		.status = false,
+		.prop_id = contrast,
+		.len = CHV_CB_VALS,
+		.name = "contrast",
+		.validate = chv_validate,
+	},
+
+	{
+		.status = false,
+		.prop_id = brightness,
+		.len = CHV_CB_VALS,
+		.name = "brightness",
+		.validate = chv_validate,
+	},
+
+	{
+		.status = false,
+		.prop_id = hue,
+		.len = CHV_HS_VALS,
+		.name = "hue",
+		.validate = chv_validate
+	},
+
+	{
+		.status = false,
+		.prop_id = saturation,
+		.len = CHV_HS_VALS,
+		.name = "saturation",
+		.validate = chv_validate
+	}
+};
+
+bool chv_get_color_correction(void *props_data, int object_type)
+{
+	u32 count = 0;
+	u32 index = 0;
+
+	/* Sanity */
+	if (!props_data) {
+		pr_err("ADF: CM: CHV: Null input to get_color_correction\n");
+		return false;
+	}
+
+	/* Allocate pipe color capabilities holder if request is from pipe */
+	if (object_type == CLRMGR_REQUEST_FROM_PIPE) {
+		struct pipe_properties *pipe_props =
+			(struct pipe_properties *) props_data;
+		if (!pipe_props) {
+			pr_err("ADF: CM: CHV: OOM while loading color correction data\n");
+			return false;
+		}
+
+		pipe_props->no_of_pipe_props =
+			ARRAY_SIZE(chv_pipe_color_corrections);
+		count = ARRAY_SIZE(chv_pipe_color_corrections);
+
+		for (index = 0; index < count; index++) {
+			struct color_property *cp =
+				kzalloc(sizeof(struct color_property),
+					GFP_KERNEL);
+			if (!cp) {
+				pr_err("ADF: CM: Out of Memory for creating a color property\n");
+
+				while (index--)
+					kfree(pipe_props->props[index]);
+				return false;
+			}
+			memcpy((void *) cp, (const void *)
+				(&(chv_pipe_color_corrections[index])),
+					sizeof(struct color_property));
+			pipe_props->props[index] = cp;
+		}
+
+		pr_info("ADF: CM: CHV: Pipe color correction data loading done, details are:\n");
+		pr_info("ADF: CM: Properties(pipe=%d)\n",
+				(int)pipe_props->no_of_pipe_props);
+	}
+	/* Allocate plane color capabilities holder if request is from plane */
+	else if (object_type == CLRMGR_REQUEST_FROM_PLANE) {
+		struct plane_properties *plane_props =
+			(struct plane_properties *) props_data;
+		if (!plane_props) {
+			pr_err("ADF: CM: CHV: OOM while loading color correction data\n");
+			return false;
+		}
+
+		plane_props->no_of_plane_props =
+			ARRAY_SIZE(chv_plane_color_corrections);
+		count = ARRAY_SIZE(chv_plane_color_corrections);
+
+		for (index = 0; index < count; index++) {
+			struct color_property *cp =
+				kzalloc(sizeof(struct color_property),
+					GFP_KERNEL);
+			if (!cp) {
+				pr_err("ADF: CM: Out of Memory for creating a color property\n");
+
+				while (index--)
+					kfree(plane_props->props[index]);
+				return false;
+			}
+			memcpy((void *) cp, (const void *)
+				(&(chv_plane_color_corrections[index])),
+					sizeof(struct color_property));
+			plane_props->props[index] = cp;
+		}
+
+		pr_info("ADF: CM: CHV: Plane color correction data loading done, details are:\n");
+		pr_info("ADF: CM: Properties(plane=%d)\n",
+				(int)plane_props->no_of_plane_props);
+	} else
+		return false;
+
+	return true;
+}
+
+bool chv_validate(u8 property)
+{
+	/* Validate if we support this property */
+	if ((int)property < csc || (int)property > saturation) {
+		pr_err("ADF: CM: CHV: Invalid input, propery Max=%d, Min=%d\n",
+			csc, saturation);
+		return false;
+	}
+
+	pr_info("ADF: CM: CHV: Input is valid for property\n");
+	return true;
+}
diff --git a/drivers/video/adf/intel/include/core/vlv/chv_color_correction.h b/drivers/video/adf/intel/include/core/vlv/chv_color_correction.h
new file mode 100644
index 0000000..a8393e0
--- /dev/null
+++ b/drivers/video/adf/intel/include/core/vlv/chv_color_correction.h
@@ -0,0 +1,133 @@
+/*
+ * Copyright © 2014 Intel Corporation
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ * Author:
+ * Shashank Sharma <shashank.sharma@intel.com>
+ * Ramalingam C <Ramalingam.c@intel.com>
+ * Kausal Malladi <Kausal.Malladi@intel.com>
+ */
+
+#include <core/intel_color_manager.h>
+#include <core/common/intel_dc_regs.h>
+#include <core/vlv/chv_dc_regs.h>
+
+/* Platform */
+#define CHV_NO_PIPES				3
+#define CHV_NO_PRIMARY_PLANES			3
+#define CHV_NO_SPRITE_PLANES			6
+#define CHV_NO_PIPE_PROP			2
+#define CHV_NO_PLANE_PROP			4
+
+/* Bit 2 to be enabled */
+#define CGM_GAMMA_EN				4
+/* Bit 1 to be enabled */
+#define CGM_CSC_EN				2
+/* Bit 0 to be enabled */
+#define CGM_DEGAMMA_EN				1
+/* Bits 2 and 1 to be enabled */
+#define CGM_GAMMA_CSC_EN			6
+/* Bits 1 and 0 to be enabled */
+#define CGM_CSC_DEGAMMA_EN			3
+/* Bits 2 and 0 to be enabled */
+#define CGM_GAMMA_DEGAMMA_EN			5
+
+#define SPRITE_A 1
+
+
+/* DeGamma */
+/* Green will be in 29:16 bits */
+#define DEGAMMA_GREEN_LEFT_SHIFT		16
+#define DEGAMMA_RED_LEFT_SHIFT			0
+#define DEGAMMA_BLUE_LEFT_SHIFT			0
+#define CHV_DEGAMMA_MAX_INDEX			64
+#define CHV_DEGAMMA_VALS			65
+
+/* Property correction size */
+#define CHV_CSC_VALS				9
+#define CHV_GAMMA_VALS				257
+#define CHV_CB_VALS				1
+#define CHV_HS_VALS				1
+
+/* CSC correction */
+#define CHV_CSC_VALUE_MASK			0xFFF
+#define CHV_CSC_COEFF_SHIFT			16
+
+/* Gamma correction */
+#define CHV_10BIT_GAMMA_MAX_INDEX		256
+#define CHV_GAMMA_MSB_SHIFT			6
+#define CHV_GAMMA_EVEN_MASK			0xFF
+#define CHV_GAMMA_SHIFT_BLUE			0
+#define CHV_GAMMA_SHIFT_GREEN			16
+#define CHV_GAMMA_SHIFT_RED			0
+#define CHV_GAMMA_ODD_SHIFT			8
+#define CHV_CLRMGR_GAMMA_GCMAX_SHIFT		17
+#define CHV_GAMMA_GCMAX_MASK			0x1FFFF
+#define CHV_CLRMGR_GAMMA_GCMAX_MAX		0x400
+#define CHV_10BIT_GAMMA_MAX_VALS		(CHV_10BIT_GAMMA_MAX_INDEX + 1)
+
+/* Sprite contrast */
+#define CHV_CONTRAST_DEFAULT			0x40
+#define CHV_CONTRAST_MASK			0x1FF
+#define CHV_CONTRAST_SHIFT			18
+#define CHV_CONTRAST_MAX			0x1F5
+
+/* Sprite brightness */
+#define CHV_BRIGHTNESS_MASK			0xFF
+#define CHV_BRIGHTNESS_DEFAULT			0
+
+/* Sprite HUE */
+#define CHV_HUE_MASK				0x7FF
+#define CHV_HUE_SHIFT				16
+#define CHV_HUE_DEFAULT				0
+
+/* Sprite Saturation */
+#define CHV_SATURATION_MASK			0x3FF
+#define CHV_SATURATION_DEFAULT			(1 << 7)
+
+/* Get sprite control */
+#define CHV_CLRMGR_SPRITE_OFFSET		0x100
+#define CHV_CLRMGR_SPCNTR(sp)			(CHV_SPR_CTRL_BASE + \
+			(sp - SPRITE_A) * CHV_CLRMGR_SPRITE_OFFSET)
+
+/* Brightness and contrast control register */
+#define CHV_CLRMGR_SPCB(sp)			(CHV_SPR_CB_BASE + \
+			(sp - SPRITE_A) * CHV_CLRMGR_SPRITE_OFFSET)
+
+/* Hue and Sat control register */
+#define CHV_CLRMGR_SPHS(sp)			(CHV_SPR_HS_BASE + \
+			(sp - SPRITE_A) * CHV_CLRMGR_SPRITE_OFFSET)
+
+
+bool chv_validate(u8 property);
+bool chv_set_csc(struct color_property *property, u64 *data, u8 idx);
+bool chv_disable_csc(struct color_property *property, u8 idx);
+bool chv_set_gamma(struct color_property *property, u64 *data, u8 idx);
+bool chv_disable_gamma(struct color_property *property, u8 idx);
+bool chv_set_contrast(struct color_property *property, u64 *data, u8 idx);
+bool chv_disable_contrast(struct color_property *property, u8 idx);
+bool chv_set_brightness(struct color_property *property, u64 *data, u8 idx);
+bool chv_disable_brightness(struct color_property *property, u8 idx);
+bool chv_set_hue(struct color_property *property, u64 *data, u8 idx);
+bool chv_disable_hue(struct color_property *property, u8 idx);
+bool chv_set_saturation(struct color_property *property, u64 *data, u8 idx);
+bool chv_disable_saturation(struct color_property *property, u8 idx);
+bool chv_set_degamma(struct color_property *property, u64 *data, u8 idx);
+bool chv_disable_degamma(struct color_property *property, u8 idx);
diff --git a/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h
index 6cb8848..38fb6e8 100644
--- a/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h
@@ -33,6 +33,81 @@
 #define   SDVO_PIPE_SEL_CHV(pipe)		((pipe) << 24)
 #define   SDVO_PIPE_SEL_MASK_CHV		(3 << 24)
 
-#define   GMBUS_PORT_DPD_CHV      3
+#define   GMBUS_PORT_DPD_CHV			3
+
+/* CGM Registers */
+
+#define CGM_OFFSET 0x2000
+
+#define PIPEA_CGM_CONTROL (CHV_DISPLAY_BASE + 0x67A00)
+#define PIPEB_CGM_CONTROL (CHV_DISPLAY_BASE + 0x69A00)
+#define PIPEC_CGM_CONTROL (CHV_DISPLAY_BASE + 0x6BA00)
+
+#define _PIPE_CGM_CONTROL(pipe) \
+	(PIPEA_CGM_CONTROL + (pipe * CGM_OFFSET))
+
+#define PIPEA_CGM_DEGAMMA_MIN (CHV_DISPLAY_BASE + 0x66000)
+#define PIPEA_CGM_DEGAMMA_MAX (CHV_DISPLAY_BASE + 0x66208)
+
+#define PIPEB_CGM_DEGAMMA_MIN (CHV_DISPLAY_BASE + 0x68000)
+#define PIPEB_CGM_DEGAMMA_MAX (CHV_DISPLAY_BASE + 0x68208)
+
+#define PIPEC_CGM_DEGAMMA_MIN (CHV_DISPLAY_BASE + 0x6A000)
+#define PIPEC_CGM_DEGAMMA_MAX (CHV_DISPLAY_BASE + 0x6A208)
+
+#define DEGAMMA_OFFSET 0x2000
+
+#define _PIPE_DEGAMMA_BASE(pipe) \
+	(PIPEA_CGM_DEGAMMA_MIN + (pipe * DEGAMMA_OFFSET))
+
+#define PIPEA_CGM_GAMMA_MIN (CHV_DISPLAY_BASE + 0x67000)
+#define PIPEA_CGM_GAMMA_MAX (CHV_DISPLAY_BASE + 0x67808)
+
+#define PIPEB_CGM_GAMMA_MIN (CHV_DISPLAY_BASE + 0x69000)
+#define PIPEB_CGM_GAMMA_MAX (CHV_DISPLAY_BASE + 0x69808)
+
+#define PIPEC_CGM_GAMMA_MIN (CHV_DISPLAY_BASE + 0x6B000)
+#define PIPEC_CGM_GAMMA_MAX (CHV_DISPLAY_BASE + 0x6B808)
+
+#define GAMMA_OFFSET 0x2000
+
+#define _PIPE_GAMMA_BASE(pipe) \
+	(PIPEA_CGM_GAMMA_MIN + (pipe * GAMMA_OFFSET))
+
+#define PIPEA_CGM_CSC_COEF01 (CHV_DISPLAY_BASE + 0x67900)
+#define PIPEB_CGM_CSC_COEF01 (CHV_DISPLAY_BASE + 0x69900)
+#define PIPEC_CGM_CSC_COEF01 (CHV_DISPLAY_BASE + 0x6B900)
+
+#define PIPEA_CGM_CSC_COEF23 (CHV_DISPLAY_BASE + 0x67904)
+#define PIPEB_CGM_CSC_COEF23 (CHV_DISPLAY_BASE + 0x69904)
+#define PIPEC_CGM_CSC_COEF23 (CHV_DISPLAY_BASE + 0x6B904)
+
+#define PIPEA_CGM_CSC_COEF45 (CHV_DISPLAY_BASE + 0x67908)
+#define PIPEB_CGM_CSC_COEF45 (CHV_DISPLAY_BASE + 0x69908)
+#define PIPEC_CGM_CSC_COEF45 (CHV_DISPLAY_BASE + 0x6B908)
+
+#define PIPEA_CGM_CSC_COEF67 (CHV_DISPLAY_BASE + 0x6790C)
+#define PIPEB_CGM_CSC_COEF67 (CHV_DISPLAY_BASE + 0x6990C)
+#define PIPEC_CGM_CSC_COEF67 (CHV_DISPLAY_BASE + 0x6B90C)
+
+#define PIPEA_CGM_CSC_COEF8 (CHV_DISPLAY_BASE + 0x67910)
+#define PIPEB_CGM_CSC_COEF8 (CHV_DISPLAY_BASE + 0x69910)
+#define PIPEC_CGM_CSC_COEF8 (CHV_DISPLAY_BASE + 0x6B910)
+
+#define CSC_REG_OFFSET 0x2000
+
+#define _PIPE_CSC_BASE(pipe) \
+	(PIPEA_CGM_CSC_COEF01 + (pipe * CSC_REG_OFFSET))
+
+/* Sprite control */
+#define CHV_SPR_CTRL_BASE               (CHV_DISPLAY_BASE + 0x72180)
+
+/* Contrast and brightness */
+#define CHV_SPR_CB_BASE                 (CHV_DISPLAY_BASE + 0x721d0)
+
+/* Hue and Saturation */
+#define CHV_SPR_HS_BASE                 (CHV_DISPLAY_BASE + 0x721d4)
+
+#define   SP_ENABLE                     (1<<31)
 
 #endif
-- 
1.7.9.5

