From 576eaa7a79c9b4dfa1f97a9c05bef6a9e3988b76 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Fri, 16 Jan 2015 11:54:19 -0800
Subject: [PATCH] ov5648: Focus support

Integrate the CTS "wv511" driver, which seems to be what shipped on
the relevant devices.  Delete the unused dw9714 and vm149 drivers,
which are for compatible parts but were never validated.

Crib an initial focus position for the device (vs. leaving it at
infinity to start) from the ad5823 integration on ov5693, which helps
early focus speed.

Misc. cleanup: remove unused/dead code from the VCM abstraction.
Also, GMIN integrations place VCM power control into the platform
layer, not here.

Change-Id: Ic746a0f19f6e6d78d9737ab6d744ed00fb76a74c
Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 drivers/media/i2c/atomisp/Kconfig  |  16 ---
 drivers/media/i2c/atomisp/Makefile |   3 -
 drivers/media/i2c/atomisp/dw9714.c | 241 -------------------------------------
 drivers/media/i2c/atomisp/dw9714.h |  79 ------------
 drivers/media/i2c/atomisp/ov5648.c |  57 ++-------
 drivers/media/i2c/atomisp/ov5648.h |  62 ----------
 drivers/media/i2c/atomisp/vm149.c  | 153 -----------------------
 drivers/media/i2c/atomisp/vm149.h  |  51 --------
 drivers/media/i2c/atomisp/wv511.c  |  32 +----
 9 files changed, 14 insertions(+), 680 deletions(-)
 delete mode 100644 drivers/media/i2c/atomisp/dw9714.c
 delete mode 100644 drivers/media/i2c/atomisp/dw9714.h
 delete mode 100644 drivers/media/i2c/atomisp/vm149.c
 delete mode 100644 drivers/media/i2c/atomisp/vm149.h

diff --git a/drivers/media/i2c/atomisp/Kconfig b/drivers/media/i2c/atomisp/Kconfig
index 6315ed5..ab06f1b 100644
--- a/drivers/media/i2c/atomisp/Kconfig
+++ b/drivers/media/i2c/atomisp/Kconfig
@@ -12,22 +12,6 @@ config VIDEO_GC2155
          This is a Video4Linux2 sensor-level driver for the Galaxycore
          GC2155 0.3MP sensor.
 
-config VCM_DW9714
-       tristate "VCM dw9714 support"
-       depends on I2C && VIDEO_V4L2
-       ---help---
-         This is a Video4Linux2 sensor-level driver for the dw9714.
-
-         It currently only works with the atomisp driver.
-
-config VCM_WV511
-       tristate "VCM wv511 support"
-       depends on I2C && VIDEO_V4L2
-       ---help---
-         This is a Video4Linux2 sensor-level driver for the wv511.
-
-         It currently only works with the atomisp driver.
-	
 config VIDEO_OV2680
        tristate "Omnivision OV2680 sensor support"
        depends on I2C && VIDEO_V4L2
diff --git a/drivers/media/i2c/atomisp/Makefile b/drivers/media/i2c/atomisp/Makefile
index 4c3e4f9..c5b3dbe 100644
--- a/drivers/media/i2c/atomisp/Makefile
+++ b/drivers/media/i2c/atomisp/Makefile
@@ -2,6 +2,3 @@ obj-$(CONFIG_VIDEO_OV5648)     += ov5648.o
 obj-$(CONFIG_VIDEO_OV2680)     += ov2680.o
 obj-$(CONFIG_VIDEO_GC2155)     += gc2155.o
 obj-$(CONFIG_VIDEO_GC0310)     += gc0310.o
-
-obj-$(CONFIG_VCM_WV511)      += wv511.o
-obj-$(CONFIG_VCM_DW9714)     += dw9714.o
diff --git a/drivers/media/i2c/atomisp/dw9714.c b/drivers/media/i2c/atomisp/dw9714.c
deleted file mode 100644
index 507de3b..0000000
--- a/drivers/media/i2c/atomisp/dw9714.c
+++ /dev/null
@@ -1,241 +0,0 @@
-/*
- * Copyright (c) 2012 Intel Corporation. All Rights Reserved.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License version
- * 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/bitops.h>
-#include <linux/device.h>
-#include <linux/delay.h>
-#include <linux/errno.h>
-#include <linux/fs.h>
-#include <linux/gpio.h>
-#include <linux/init.h>
-#include <linux/i2c.h>
-#include <linux/io.h>
-#include <linux/kernel.h>
-#include <linux/mm.h>
-#include <linux/kmod.h>
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/string.h>
-#include <linux/slab.h>
-#include <linux/types.h>
-#include <media/v4l2-chip-ident.h>
-#include <media/v4l2-device.h>
-#include <asm/intel-mid.h>
-
-#include "dw9714.h"
-
-static struct dw9714_device dw9714_dev;
-static int dw9714_i2c_write(struct i2c_client *client, u16 data)
-{
-	struct i2c_msg msg;
-	const int num_msg = 1;
-	int ret;
-	u16 val;
-
-	val = cpu_to_be16(data);
-	msg.addr = DW9714_VCM_ADDR;
-	msg.flags = 0;
-	msg.len = DW9714_16BIT;
-	msg.buf = (u8 *) & val;
-
-	ret = i2c_transfer(client->adapter, &msg, 1);
-
-	return ret == num_msg ? 0 : -EIO;
-}
-
-int dw9714_vcm_power_up(struct v4l2_subdev *sd)
-{
-	int ret;
-
-	/* Enable power */
-	ret = dw9714_dev.platform_data->power_ctrl(sd, 1);
-	/* waiting time requested by DW9714A(vcm) */
-	usleep_range(12000, 12500);
-	return ret;
-}
-
-int dw9714_vcm_power_down(struct v4l2_subdev *sd)
-{
-	return dw9714_dev.platform_data->power_ctrl(sd, 0);
-}
-
-int dw9714_t_focus_vcm(struct v4l2_subdev *sd, u16 val)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	int ret = -EINVAL;
-	u8 mclk = vcm_step_mclk(dw9714_dev.vcm_settings.step_setting);
-	u8 s = vcm_step_s(dw9714_dev.vcm_settings.step_setting);
-
-	v4l2_info(client, "__9714_t_focus_vcm mode=%d, val=%d\n",
-		  dw9714_dev.vcm_mode, val);
-	/*
-	 * For different mode, VCM_PROTECTION_OFF/ON required by the
-	 * control procedure. For DW9714_DIRECT/DLC mode, slew value is
-	 * VCM_DEFAULT_S(0).
-	 */
-	switch (dw9714_dev.vcm_mode) {
-	case DW9714_DIRECT:
-		if (dw9714_dev.vcm_settings.update) {
-			ret = dw9714_i2c_write(client, VCM_PROTECTION_OFF);
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client, DIRECT_VCM);
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client, VCM_PROTECTION_ON);
-			if (ret)
-				return ret;
-			dw9714_dev.vcm_settings.update = false;
-		}
-		ret = dw9714_i2c_write(client, vcm_val(val, VCM_DEFAULT_S));
-		break;
-	case DW9714_LSC:
-		if (dw9714_dev.vcm_settings.update) {
-			ret = dw9714_i2c_write(client, VCM_PROTECTION_OFF);
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client,
-					       vcm_dlc_mclk(DLC_DISABLE, mclk));
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client,
-					       vcm_tsrc(dw9714_dev.vcm_settings.
-							t_src));
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client, VCM_PROTECTION_ON);
-			if (ret)
-				return ret;
-			dw9714_dev.vcm_settings.update = false;
-		}
-		ret = dw9714_i2c_write(client, vcm_val(val, s));
-		break;
-	case DW9714_DLC:
-		if (dw9714_dev.vcm_settings.update) {
-			ret = dw9714_i2c_write(client, VCM_PROTECTION_OFF);
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client,
-					       vcm_dlc_mclk(DLC_ENABLE, mclk));
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client,
-					       vcm_tsrc(dw9714_dev.vcm_settings.
-							t_src));
-			if (ret)
-				return ret;
-			ret = dw9714_i2c_write(client, VCM_PROTECTION_ON);
-			if (ret)
-				return ret;
-			dw9714_dev.vcm_settings.update = false;
-		}
-		ret = dw9714_i2c_write(client, vcm_val(val, VCM_DEFAULT_S));
-		break;
-	}
-	return ret;
-}
-
-int dw9714_t_focus_abs(struct v4l2_subdev *sd, s32 value)
-{
-	int ret;
-
-	value = min(value, DW9714_MAX_FOCUS_POS);
-	ret = dw9714_t_focus_vcm(sd, DW9714_MAX_FOCUS_POS - value);
-	//ret = dw9714_t_focus_vcm(sd, value);
-	if (ret == 0) {
-		dw9714_dev.number_of_steps = value - dw9714_dev.focus;
-		dw9714_dev.focus = value;
-		getnstimeofday(&(dw9714_dev.timestamp_t_focus_abs));
-	}
-
-	return ret;
-}
-
-int dw9714_t_focus_rel(struct v4l2_subdev *sd, s32 value)
-{
-
-	return dw9714_t_focus_abs(sd, dw9714_dev.focus + value);
-}
-
-int dw9714_q_focus_status(struct v4l2_subdev *sd, s32 * value)
-{
-	u32 status = 0;
-	struct timespec temptime;
-	const struct timespec timedelay = {
-		0,
-		min_t(u32, abs(dw9714_dev.number_of_steps) * DELAY_PER_STEP_NS,
-		      DELAY_MAX_PER_STEP_NS),
-	};
-
-	ktime_get_ts(&temptime);
-
-	temptime = timespec_sub(temptime, (dw9714_dev.timestamp_t_focus_abs));
-
-	if (timespec_compare(&temptime, &timedelay) <= 0) {
-		status |= ATOMISP_FOCUS_STATUS_MOVING;
-		status |= ATOMISP_FOCUS_HP_IN_PROGRESS;
-	} else {
-		status |= ATOMISP_FOCUS_STATUS_ACCEPTS_NEW_MOVE;
-		status |= ATOMISP_FOCUS_HP_COMPLETE;
-	}
-	*value = status;
-
-	return 0;
-}
-
-int dw9714_q_focus_abs(struct v4l2_subdev *sd, s32 * value)
-{
-	s32 val;
-
-	dw9714_q_focus_status(sd, &val);
-
-	if (val & ATOMISP_FOCUS_STATUS_MOVING)
-		*value = dw9714_dev.focus - dw9714_dev.number_of_steps;
-	else
-		*value = dw9714_dev.focus;
-
-	return 0;
-}
-
-int dw9714_t_vcm_slew(struct v4l2_subdev *sd, s32 value)
-{
-	dw9714_dev.vcm_settings.step_setting = value;
-	dw9714_dev.vcm_settings.update = true;
-
-	return 0;
-}
-
-int dw9714_t_vcm_timing(struct v4l2_subdev *sd, s32 value)
-{
-	dw9714_dev.vcm_settings.t_src = value;
-	dw9714_dev.vcm_settings.update = true;
-
-	return 0;
-}
-
-int dw9714_vcm_init(struct v4l2_subdev *sd)
-{
-
-	/* set VCM to home position and vcm mode to direct */
-	dw9714_dev.vcm_mode = DW9714_DIRECT;
-	dw9714_dev.vcm_settings.update = false;
-	dw9714_dev.platform_data = camera_get_af_platform_data();
-	return (NULL == dw9714_dev.platform_data) ? -ENODEV : 0;
-
-}
diff --git a/drivers/media/i2c/atomisp/dw9714.h b/drivers/media/i2c/atomisp/dw9714.h
deleted file mode 100644
index f447279..0000000
--- a/drivers/media/i2c/atomisp/dw9714.h
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (c) 2012 Intel Corporation. All Rights Reserved.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License version
- * 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#ifndef __DW9714_H__
-#define __DW9714_H__
-
-#include <linux/atomisp_platform.h>
-#include <linux/types.h>
-
-#define DW9714_VCM_ADDR	0x0c
-
-enum dw9714_tok_type {
-	DW9714_8BIT = 0x0001,
-	DW9714_16BIT = 0x0002,
-};
-
-struct dw9714_vcm_settings {
-	u16 code;		/* bit[9:0]: Data[9:0] */
-	u8 t_src;		/* bit[4:0]: T_SRC[4:0] */
-	u8 step_setting;	/* bit[3:0]: S[3:0]/bit[5:4]: MCLK[1:0] */
-	bool update;
-};
-
-enum dw9714_vcm_mode {
-	DW9714_DIRECT = 0x1,	/* direct control */
-	DW9714_LSC = 0x2,	/* linear slope control */
-	DW9714_DLC = 0x3,	/* dual level control */
-};
-
-/* dw9714 device structure */
-struct dw9714_device {
-	struct dw9714_vcm_settings vcm_settings;
-	struct timespec timestamp_t_focus_abs;
-	enum dw9714_vcm_mode vcm_mode;
-	s16 number_of_steps;
-	bool initialized;	/* true if dw9714 is detected */
-	s32 focus;		/* Current focus value */
-	struct timespec focus_time;	/* Time when focus was last time set */
-	__u8 buffer[4];		/* Used for i2c transactions */
-	const struct camera_af_platform_data *platform_data;
-};
-
-#define DW9714_INVALID_CONFIG	0xffffffff
-#define DW9714_MAX_FOCUS_POS	1024
-
-/* MCLK[1:0] = 01 T_SRC[4:0] = 00001 S[3:0] = 0111 */
-#define DELAY_PER_STEP_NS	1000000
-#define DELAY_MAX_PER_STEP_NS	(1000000 * 1023)
-
-#define DLC_ENABLE 1
-#define DLC_DISABLE 0
-#define VCM_PROTECTION_OFF	0xeca3
-#define VCM_PROTECTION_ON	0xdc51
-#define VCM_DEFAULT_S 0x0
-
-#define vcm_step_s(a) (u8)(a & 0xf)
-#define vcm_step_mclk(a) (u8)((a >> 4) & 0x3)
-#define vcm_dlc_mclk(dlc, mclk) (u16)((dlc << 3) | mclk | 0xa104)
-#define vcm_tsrc(tsrc) (u16)(tsrc << 3 | 0xf200)
-#define vcm_val(data, s) (u16)(data << 4 | s)
-#define DIRECT_VCM vcm_dlc_mclk(0, 0)
-
-#endif
diff --git a/drivers/media/i2c/atomisp/ov5648.c b/drivers/media/i2c/atomisp/ov5648.c
index d4c6c36..65092d3 100644
--- a/drivers/media/i2c/atomisp/ov5648.c
+++ b/drivers/media/i2c/atomisp/ov5648.c
@@ -40,6 +40,11 @@
 
 #include "ov5648.h"
 
+// This code was originally written to be compiled =y, so it lacks the
+// module system handling needed to make modpost.  Just include here
+// for now.  Will be replaced with a proper VCM driver soon.
+#include "wv511.c"
+
 #define OV5648_DEBUG_EN 0
 #define ov5648_debug(...) // dev_err(__VA_ARGS__)
 
@@ -580,38 +585,6 @@ err:
 	return ret;
 }
 
-int ov5648_vcm_power_up(struct v4l2_subdev *sd)
-{
-	struct ov5648_device *dev = to_ov5648_sensor(sd);
-	if (dev->vcm_driver && dev->vcm_driver->power_up)
-		return dev->vcm_driver->power_up(sd);
-	return 0;
-}
-
-int ov5648_vcm_power_down(struct v4l2_subdev *sd)
-{
-	struct ov5648_device *dev = to_ov5648_sensor(sd);
-	if (dev->vcm_driver && dev->vcm_driver->power_down)
-		return dev->vcm_driver->power_down(sd);
-	return 0;
-}
-
-int ov5648_vcm_init(struct v4l2_subdev *sd)
-{
-	struct ov5648_device *dev = to_ov5648_sensor(sd);
-	if (dev->vcm_driver && dev->vcm_driver->init)
-		return dev->vcm_driver->init(sd);
-	return 0;
-}
-
-int ov5648_t_focus_vcm(struct v4l2_subdev *sd, u16 val)
-{
-	struct ov5648_device *dev = to_ov5648_sensor(sd);
-	if (dev->vcm_driver && dev->vcm_driver->t_focus_vcm)
-		return dev->vcm_driver->t_focus_vcm(sd, val);
-	return 0;
-}
-
 int ov5648_t_focus_abs(struct v4l2_subdev *sd, s32 value)
 {
 	struct ov5648_device *dev = to_ov5648_sensor(sd);
@@ -973,6 +946,9 @@ static int ov5648_init(struct v4l2_subdev *sd)
 		return ret;
 	}
 
+	if (dev->vcm_driver)
+		dev->vcm_driver->init(&dev->sd);
+
 	mutex_unlock(&dev->input_lock);
 
 	return 0;
@@ -1457,11 +1433,7 @@ static int ov5648_s_power(struct v4l2_subdev *sd, int on)
 	dev_dbg(&client->dev, "@%s:\n", __func__);
 	if (on == 0) {
 		ret = power_down(sd);
-		if (dev->vcm_driver && dev->vcm_driver->power_down)
-			ret |= dev->vcm_driver->power_down(sd);
 	} else {
-		if (dev->vcm_driver && dev->vcm_driver->power_up)
-			ret = dev->vcm_driver->power_up(sd);
 		if (ret)
 			return ret;
 
@@ -2048,6 +2020,8 @@ static int ov5648_probe(struct i2c_client *client,
 		goto out_free;
 	}
 
+	dev->vcm_driver = &ov5648_vcms[WV511];
+
 	ret = ov5648_s_config(&dev->sd, client->irq, pdata);
 	if (ret)
 		goto out_free;
@@ -2056,17 +2030,6 @@ static int ov5648_probe(struct i2c_client *client,
 	if (ret)
 		goto out_free;
 
-#ifdef CONFIG_VCM_WV511
-	dev->vcm_driver = &ov5648_vcms[WV511];
-	dev->vcm_driver->init(&dev->sd);
-	dev_err(&client->dev, "CONFIG_VIDEO_WV511\n");
-#elif defined (CONFIG_VCM_DW9714)
-		/*set default vcm driver*/
-	dev_info(&client->dev, "Set default VCM driver\n");
-	dev->vcm_driver = &ov5648_vcms[DW9714];
-	dev->vcm_driver->init(&dev->sd);
-#endif
-
 	dev->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
 	dev->pad.flags = MEDIA_PAD_FL_SOURCE;
 	dev->format.code = V4L2_MBUS_FMT_SBGGR10_1X10;
diff --git a/drivers/media/i2c/atomisp/ov5648.h b/drivers/media/i2c/atomisp/ov5648.h
index 8609bb4..274e0c7 100644
--- a/drivers/media/i2c/atomisp/ov5648.h
+++ b/drivers/media/i2c/atomisp/ov5648.h
@@ -168,10 +168,7 @@ struct otp_struct {
 		int B_gain;
 };
 struct ov5648_vcm {
-	int (*power_up) (struct v4l2_subdev *sd);
-	int (*power_down) (struct v4l2_subdev *sd);
 	int (*init) (struct v4l2_subdev *sd);
-	int (*t_focus_vcm) (struct v4l2_subdev *sd, u16 val);
 	int (*t_focus_abs) (struct v4l2_subdev *sd, s32 value);
 	int (*t_focus_rel) (struct v4l2_subdev *sd, s32 value);
 	int (*q_focus_status) (struct v4l2_subdev *sd, s32 *value);
@@ -754,32 +751,6 @@ static int N_RES = N_RES_PREVIEW;
 //static int has_otp = -1;	/*0:has valid otp, 1:no valid otp */
 
 #define WV511  0x11
-#define DW9714 0x14
-#define VM149  0x49
-extern int dw9714_vcm_power_up(struct v4l2_subdev *sd);
-extern int dw9714_vcm_power_down(struct v4l2_subdev *sd);
-extern int dw9714_vcm_init(struct v4l2_subdev *sd);
-extern int dw9714_t_focus_vcm(struct v4l2_subdev *sd, u16 val);
-extern int dw9714_t_focus_abs(struct v4l2_subdev *sd, s32 value);
-extern int dw9714_t_focus_rel(struct v4l2_subdev *sd, s32 value);
-extern int dw9714_q_focus_status(struct v4l2_subdev *sd, s32 *value);
-extern int dw9714_q_focus_abs(struct v4l2_subdev *sd, s32 *value);
-extern int dw9714_t_vcm_slew(struct v4l2_subdev *sd, s32 value);
-extern int dw9714_t_vcm_timing(struct v4l2_subdev *sd, s32 value);
-
-extern int vm149_vcm_power_up(struct v4l2_subdev *sd);
-extern int vm149_vcm_power_down(struct v4l2_subdev *sd);
-extern int vm149_vcm_init(struct v4l2_subdev *sd);
-extern int vm149_t_focus_vcm(struct v4l2_subdev *sd, u16 val);
-extern int vm149_t_focus_abs(struct v4l2_subdev *sd, s32 value);
-extern int vm149_t_focus_rel(struct v4l2_subdev *sd, s32 value);
-extern int vm149_q_focus_status(struct v4l2_subdev *sd, s32 *value);
-extern int vm149_q_focus_abs(struct v4l2_subdev *sd, s32 *value);
-extern int vm149_t_vcm_slew(struct v4l2_subdev *sd, s32 value);
-extern int vm149_t_vcm_timing(struct v4l2_subdev *sd, s32 value);
-
-extern int wv511_vcm_power_up(struct v4l2_subdev *sd);
-extern int wv511_vcm_power_down(struct v4l2_subdev *sd);
 extern int wv511_vcm_init(struct v4l2_subdev *sd);
 extern int wv511_t_focus_vcm(struct v4l2_subdev *sd, u16 val);
 extern int wv511_t_focus_abs(struct v4l2_subdev *sd, s32 value);
@@ -790,12 +761,8 @@ extern int wv511_t_vcm_slew(struct v4l2_subdev *sd, s32 value);
 extern int wv511_t_vcm_timing(struct v4l2_subdev *sd, s32 value);
 
 struct ov5648_vcm ov5648_vcms[] = {
-#ifdef CONFIG_VCM_WV511
 	[WV511] = {
-		.power_up = wv511_vcm_power_up,
-		.power_down = wv511_vcm_power_down,
 		.init = wv511_vcm_init,
-		.t_focus_vcm = wv511_t_focus_vcm,
 		.t_focus_abs = wv511_t_focus_abs,
 		.t_focus_rel = wv511_t_focus_rel,
 		.q_focus_status = wv511_q_focus_status,
@@ -803,35 +770,6 @@ struct ov5648_vcm ov5648_vcms[] = {
 		.t_vcm_slew = wv511_t_vcm_slew,
 		.t_vcm_timing = wv511_t_vcm_timing,
 	},
-#endif
-#ifdef CONFIG_VCM_DW9714
-	[DW9714] = {
-		    .power_up = dw9714_vcm_power_up,
-		    .power_down = dw9714_vcm_power_down,
-		    .init = dw9714_vcm_init,
-		    .t_focus_vcm = dw9714_t_focus_vcm,
-		    .t_focus_abs = dw9714_t_focus_abs,
-		    .t_focus_rel = dw9714_t_focus_rel,
-		    .q_focus_status = dw9714_q_focus_status,
-		    .q_focus_abs = dw9714_q_focus_abs,
-		    .t_vcm_slew = dw9714_t_vcm_slew,
-		    .t_vcm_timing = dw9714_t_vcm_timing,
-		    },
-#endif
-#if 0
-	[VM149] = {
-		   .power_up = vm149_vcm_power_up,
-		   .power_down = vm149_vcm_power_down,
-		   .init = vm149_vcm_init,
-		   .t_focus_vcm = vm149_t_focus_vcm,
-		   .t_focus_abs = vm149_t_focus_abs,
-		   .t_focus_rel = vm149_t_focus_rel,
-		   .q_focus_status = vm149_q_focus_status,
-		   .q_focus_abs = vm149_q_focus_abs,
-		   .t_vcm_slew = vm149_t_vcm_slew,
-		   .t_vcm_timing = vm149_t_vcm_timing,
-		   },
-#endif
 };
 
 #endif
diff --git a/drivers/media/i2c/atomisp/vm149.c b/drivers/media/i2c/atomisp/vm149.c
deleted file mode 100644
index f76ee25..0000000
--- a/drivers/media/i2c/atomisp/vm149.c
+++ /dev/null
@@ -1,153 +0,0 @@
-#include <linux/bitops.h>
-#include <linux/device.h>
-#include <linux/delay.h>
-#include <linux/errno.h>
-#include <linux/fs.h>
-#include <linux/gpio.h>
-#include <linux/init.h>
-#include <linux/i2c.h>
-#include <linux/io.h>
-#include <linux/kernel.h>
-#include <linux/mm.h>
-#include <linux/kmod.h>
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/string.h>
-#include <linux/slab.h>
-#include <linux/types.h>
-#include <media/v4l2-chip-ident.h>
-#include <media/v4l2-device.h>
-#include <asm/intel-mid.h>
-
-#include "vm149.h"
-
-static struct vm149_device vm149_dev;
-static int vm149_i2c_write(struct i2c_client *client, u16 data)
-{
-	struct i2c_msg msg;
-	const int num_msg = 1;
-	int ret;
-	u16 val;
-
-	val = cpu_to_be16(data);
-	msg.addr = VM149_VCM_ADDR;
-	msg.flags = 0;
-	msg.len = VM149_16BIT;
-	msg.buf = (u8 *)&val;
-
-	ret = i2c_transfer(client->adapter, &msg, 1);
-
-	return ret == num_msg ? 0 : -EIO;
-}
-
-int vm149_vcm_power_up(struct v4l2_subdev *sd)
-{
-	int ret;
-
-	/* Enable power */
-	ret = vm149_dev.platform_data->power_ctrl(sd, 1);
-	/* TODO:waiting time requested by VM149A(vcm) */
-	usleep_range(12000, 12500);
-	return ret;
-}
-
-int vm149_vcm_power_down(struct v4l2_subdev *sd)
-{
-	return vm149_dev.platform_data->power_ctrl(sd, 0);
-}
-
-
-int vm149_t_focus_vcm(struct v4l2_subdev *sd, u16 val)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	int ret = -EINVAL;
-	u8 s = vm149_vcm_step_s(vm149_dev.vcm_settings.step_setting);
-
-	ret = vm149_i2c_write(client,
-				vm149_vcm_val(val, s));
-	return ret;
-}
-
-int vm149_t_focus_abs(struct v4l2_subdev *sd, s32 value)
-{
-	int ret;
-
-	value = min(value, VM149_MAX_FOCUS_POS);
-	ret = vm149_t_focus_vcm(sd, VM149_MAX_FOCUS_POS - value);
-	if (ret == 0) {
-		vm149_dev.number_of_steps = value - vm149_dev.focus;
-		vm149_dev.focus = value;
-		getnstimeofday(&(vm149_dev.timestamp_t_focus_abs));
-	}
-
-	return ret;
-}
-
-int vm149_t_focus_rel(struct v4l2_subdev *sd, s32 value)
-{
-
-	return vm149_t_focus_abs(sd, vm149_dev.focus + value);
-}
-
-int vm149_q_focus_status(struct v4l2_subdev *sd, s32 *value)
-{
-	u32 status = 0;
-	struct timespec temptime;
-	const struct timespec timedelay = {
-		0,
-		min_t(u32, abs(vm149_dev.number_of_steps)*DELAY_PER_STEP_NS,
-			DELAY_MAX_PER_STEP_NS),
-	};
-
-	ktime_get_ts(&temptime);
-
-	temptime = timespec_sub(temptime, (vm149_dev.timestamp_t_focus_abs));
-
-	if (timespec_compare(&temptime, &timedelay) <= 0) {
-		status |= ATOMISP_FOCUS_STATUS_MOVING;
-		status |= ATOMISP_FOCUS_HP_IN_PROGRESS;
-	} else {
-		status |= ATOMISP_FOCUS_STATUS_ACCEPTS_NEW_MOVE;
-		status |= ATOMISP_FOCUS_HP_COMPLETE;
-	}
-	*value = status;
-
-	return 0;
-}
-
-int vm149_q_focus_abs(struct v4l2_subdev *sd, s32 *value)
-{
-	s32 val;
-
-	vm149_q_focus_status(sd, &val);
-
-	if (val & ATOMISP_FOCUS_STATUS_MOVING)
-		*value  = vm149_dev.focus - vm149_dev.number_of_steps;
-	else
-		*value  = vm149_dev.focus ;
-
-	return 0;
-}
-
-int vm149_t_vcm_slew(struct v4l2_subdev *sd, s32 value)
-{
-	vm149_dev.vcm_settings.step_setting = value;
-
-	return 0;
-}
-
-int vm149_t_vcm_timing(struct v4l2_subdev *sd, s32 value)
-{
-
-	return 0;
-}
-
-int vm149_vcm_init(struct v4l2_subdev *sd)
-{
-
-	/* set VCM to home position and vcm mode to direct*/
-	vm149_dev.platform_data = camera_get_af_platform_data();
-	return (NULL == vm149_dev.platform_data) ? -ENODEV : 0;
-
-}
-
diff --git a/drivers/media/i2c/atomisp/vm149.h b/drivers/media/i2c/atomisp/vm149.h
deleted file mode 100644
index cd8ec2d..0000000
--- a/drivers/media/i2c/atomisp/vm149.h
+++ /dev/null
@@ -1,51 +0,0 @@
-#ifndef __VM149_H__
-#define __VM149_H__
-
-#include <linux/atomisp_platform.h>
-#include <linux/types.h>
-
-
-#define VM149_VCM_ADDR	0x0c
-
-enum vm149_tok_type {
-	VM149_8BIT  = 0x0001,
-	VM149_16BIT = 0x0002,
-};
-
-struct vm149_vcm_settings {
-	u16 code;	/* bit[9:0]: Data[9:0] */
-	u8 step_setting;	/* bit[3:0]: S[3:0]/bit[5:4]: MCLK[1:0] */
-	bool update;
-};
-
-enum vm149_vcm_mode {
-	VM149_DIRECT = 0x1,	/* direct control */
-	VM149_LSC = 0x2,	/* linear slope control */
-	VM149_DLC = 0x3,	/* dual level control */
-};
-
-/* vm149 device structure */
-struct vm149_device {
-	struct vm149_vcm_settings vcm_settings;
-	struct timespec timestamp_t_focus_abs;
-	s16 number_of_steps;
-	bool initialized;		/* true if vm149 is detected */
-	s32 focus;			/* Current focus value */
-	struct timespec focus_time;	/* Time when focus was last time set */
-	__u8 buffer[4];			/* Used for i2c transactions */
-	const struct camera_af_platform_data *platform_data;
-};
-
-#define VM149_INVALID_CONFIG	0xffffffff
-#define VM149_MAX_FOCUS_POS	1023
-
-
-/* MCLK[1:0] = 01 T_SRC[4:0] = 00001 S[3:0] = 0111 */
-#define DELAY_PER_STEP_NS	1000000
-#define DELAY_MAX_PER_STEP_NS	(1000000 * 1023)
-
-#define vm149_vcm_step_s(a) (u8)(a & 0xf)
-#define vm149_vcm_val(data, s) (u16)(data << 4 | s)
-
-
-#endif
diff --git a/drivers/media/i2c/atomisp/wv511.c b/drivers/media/i2c/atomisp/wv511.c
index f3289bc..56a53a0 100644
--- a/drivers/media/i2c/atomisp/wv511.c
+++ b/drivers/media/i2c/atomisp/wv511.c
@@ -15,12 +15,13 @@
 #include <linux/string.h>
 #include <linux/slab.h>
 #include <linux/types.h>
-#include <media/v4l2-chip-ident.h>
 #include <media/v4l2-device.h>
 #include <asm/intel-mid.h>
 
 #include "wv511.h"
 
+#define INIT_FOCUS_POS 350
+
 //#define WV_DEBUG 1
 #define wv511_debug dev_err
 
@@ -35,6 +36,7 @@ static int wv511_i2c_write(struct i2c_client *client, u16 data)
 	//struct i2c_client *client = v4l2_get_subdevdata(sd);
 	wv511_debug(&client->dev, "_wv511_: %s: wr %x\n",__func__,data);
 #endif
+
 	val = cpu_to_be16(data);
 	msg.addr = wv511_VCM_ADDR;
 	msg.flags = 0;
@@ -47,30 +49,6 @@ static int wv511_i2c_write(struct i2c_client *client, u16 data)
 	return ret == num_msg ? 0 : -EIO;
 }
 
-int wv511_vcm_power_up(struct v4l2_subdev *sd)
-{
-	int ret;
-#ifdef WV_DEBUG
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	wv511_debug(&client->dev, "_wv511_: %s: wv511_vcm_power_up\n",__func__);
-#endif
-	/* Enable power */
-	ret = wv511_dev.platform_data->power_ctrl(sd, 1);
-	usleep_range(12000, 12500);
-	return ret;
-}
-
-int wv511_vcm_power_down(struct v4l2_subdev *sd)
-{
-#ifdef WV_DEBUG
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	wv511_debug(&client->dev, "_wv511_: %s: wv511_vcm_power_down\n",__func__);
-#endif
-
-	return wv511_dev.platform_data->power_ctrl(sd, 0);
-}
-
-
 int wv511_t_focus_vcm(struct v4l2_subdev *sd, u16 val)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
@@ -186,8 +164,6 @@ int wv511_vcm_init(struct v4l2_subdev *sd)
 	wv511_dev.vcm_mode = wv511_DIRECT;
 	wv511_dev.vcm_settings.slew_rate_setting = 0;
 	wv511_dev.vcm_settings.dac_code = 0;
-	wv511_dev.platform_data = camera_get_af_platform_data();
-	return (NULL == wv511_dev.platform_data) ? -ENODEV : 0;
 
+	return wv511_t_focus_abs(sd, INIT_FOCUS_POS);
 }
-
-- 
2.1.0

