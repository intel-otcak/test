From 7e739ba5626ed0bf437dbc6742ed758f6836ef77 Mon Sep 17 00:00:00 2001
From: Aubrey Li <aubrey.li@intel.com>
Date: Fri, 9 May 2014 01:01:02 -0500
Subject: [PATCH 091/152] Expose OSPM capability for ACPI low-power idle

Platform architectures may support hardware power management
models other than the traditional ACPI Sleep/Resume model.
These are typically implemented in proprietary hardware and
are capable of delivering low-latency, connected idle while
saving as much energy as ACPI Sleep states. To support the
diversity of hardware implementations, ACPI provides a
mechanism for the platform to indicate to OSPM that such
capability is available.

dmesg on ASUS-T100:
	[    0.274752] ACPI: (supports S0 S0idle)

Signed-off-by: Aubrey Li <aubrey.li@intel.com>
---
 drivers/acpi/sleep.c |   26 ++++++++++++++++++++++++--
 1 file changed, 24 insertions(+), 2 deletions(-)

diff --git a/drivers/acpi/sleep.c b/drivers/acpi/sleep.c
index c40fb2e..0fe057c 100644
--- a/drivers/acpi/sleep.c
+++ b/drivers/acpi/sleep.c
@@ -24,6 +24,17 @@
 #include "sleep.h"
 
 static u8 sleep_states[ACPI_S_STATE_COUNT];
+/*
+ * Platform architectures may support hardware power management
+ * models other than the traditional ACPI Sleep/Resume model.
+ * These are typically implemented in proprietary hardware and
+ * are capable of delivering low-latency, connected idle while
+ * saving as much energy as ACPI Sleep states. To support the
+ * diversity of hardware implementations
+ */
+static u8 low_power_s0idle;
+char	*s0idle_str = "S0idle";
+#define	ACPI_S_STATE_STR_LEN	32
 
 static void acpi_sleep_tts_switch(u32 acpi_state)
 {
@@ -82,6 +93,11 @@ static bool acpi_sleep_state_supported(u8 sleep_state)
 			&& acpi_gbl_FADT.sleep_status.address));
 }
 
+static bool acpi_low_power_s0idle_supported(void)
+{
+	return acpi_gbl_FADT.flags & ACPI_FADT_LOW_POWER_S0;
+}
+
 #ifdef CONFIG_ACPI_SLEEP
 static u32 acpi_target_sleep_state = ACPI_STATE_S0;
 
@@ -619,6 +635,9 @@ static void acpi_sleep_suspend_setup(void)
 		if (acpi_sleep_state_supported(i))
 			sleep_states[i] = 1;
 
+	if (acpi_low_power_s0idle_supported())
+		low_power_s0idle = 1;
+
 	suspend_set_ops(old_suspend_ordering ?
 		&acpi_suspend_ops_old : &acpi_suspend_ops);
 }
@@ -794,7 +813,7 @@ static void acpi_power_off(void)
 
 int __init acpi_sleep_init(void)
 {
-	char supported[ACPI_S_STATE_COUNT * 3 + 1];
+	char supported[ACPI_S_STATE_STR_LEN];
 	char *pos = supported;
 	int i;
 
@@ -816,8 +835,11 @@ int __init acpi_sleep_init(void)
 		if (sleep_states[i])
 			pos += sprintf(pos, " S%d", i);
 	}
-	pr_info(PREFIX "(supports%s)\n", supported);
 
+	if (low_power_s0idle)
+		pos += sprintf(pos, " %s", s0idle_str);
+
+	pr_info(PREFIX "(supports%s)\n", supported);
 	/*
 	 * Register the tts_notifier to reboot notifier list so that the _TTS
 	 * object can also be evaluated when the system enters S5.
-- 
1.7.10.4

