From 744295fc10585b47fac7419f5d3a0409855aa7a2 Mon Sep 17 00:00:00 2001
Message-Id: <744295fc10585b47fac7419f5d3a0409855aa7a2.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Fri, 4 Jul 2014 22:47:52 +0530
Subject: [PATCH 080/312] FOR_UPSTREAM [VPG]: drm/i915: Adding the missing
 NULL checks

In intel_plane_queue_unpin funtion a NULL check on function pointer
intel_plane->current_sureface is missing, this function goes uninitialized
in VLV, and calling this function without a NULL check results in a kernel crash.
This patch adds a NULL check on the function pointer before invoking it.

A check is missing on pixel-size in vlv_compute_drain_latency, and there is a
call being made with zero pixel-size during plane disable which is resulting in
divide by zero error. This patch adds a check on zero pixel size and doesnt
compute the drain latency. The vlv disable plane routine needs to be relooked (TBD)

Issue: APDEV-1575
OTC_TRACKER: VIZ-3538
Change-Id: Ic583a097973d673918f1972521adedc1d2aa8975
Signed-off-by: vanditak <vandita.kulkarni@intel.com>
Signed-off-by: Bloomfield, Jon <jon.bloomfield@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/intel_pm.c     |    4 ++++
 drivers/gpu/drm/i915/intel_sprite.c |   10 ++++++----
 2 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 10fb213..a96e1f9 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -1403,6 +1403,8 @@ static bool vlv_compute_drain_latency(struct drm_device *dev,
 		entries = (clock / 1000) * pixel_size;
 		*plane_prec_mult = (entries > 256) ?
 			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
+		if (WARN_ON(pixel_size == 0))
+			return latencyprogrammed;
 		*plane_dl = (64 * (*plane_prec_mult) * 4) / ((clock / 1000) *
 				pixel_size);
 		latencyprogrammed = true;
@@ -1420,6 +1422,8 @@ static bool vlv_compute_drain_latency(struct drm_device *dev,
 		entries = (clock / 1000) * sprite_pixel_size;
 		*sprite_prec_mult = (entries > 256) ?
 			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
+		if (WARN_ON(sprite_pixel_size == 0))
+			return latencyprogrammed;
 		*sprite_dl = (64 * (*sprite_prec_mult) * 4) / ((clock / 1000) *
 						sprite_pixel_size);
 		latencyprogrammed = true;
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index b4fac63..81f2447 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -1099,10 +1099,12 @@ intel_plane_queue_unpin(struct intel_plane *plane,
 	 * However, if the old object isn't currently 'live', we can just
 	 * unpin right away.
 	 */
-	if (plane->current_surface(&plane->base) != i915_gem_obj_ggtt_offset(obj)) {
-		intel_unpin_fb_obj(obj);
-		return;
-	}
+	if (plane->current_surface)
+		if (plane->current_surface(&plane->base) !=
+					i915_gem_obj_ggtt_offset(obj)) {
+			intel_unpin_fb_obj(obj);
+			return;
+		}
 
 	intel_crtc_queue_unpin(to_intel_crtc(plane->base.crtc), obj);
 }
-- 
1.7.9.5

