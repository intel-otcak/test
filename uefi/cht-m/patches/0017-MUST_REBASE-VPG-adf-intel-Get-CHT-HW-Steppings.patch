From e51fe6bcb198613daba722ffabe76f1c8e37adca Mon Sep 17 00:00:00 2001
Message-Id: <e51fe6bcb198613daba722ffabe76f1c8e37adca.1423872525.git.feitong.yi@intel.com>
In-Reply-To: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
References: <3062c7e6b919c393846ff0e13558e7f648b352ca.1423872525.git.feitong.yi@intel.com>
From: Gaurav K Singh <gaurav.k.singh@intel.com>
Date: Fri, 30 Jan 2015 03:22:19 +0530
Subject: [PATCH 17/95] MUST_REBASE [VPG]: adf/intel: Get CHT HW Steppings

A few of the hardware features on CHT are enabled/disabled on certain
specific steppings. This patch to be used for providing the stepping check.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

Issue: GMINL-4870
Change-Id: I34f014345f818de3da4e1be67b296d5fb0dc1d1c
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
---
 drivers/video/adf/intel/core/vlv/vlv_dc_config.c   |   45 +++++++++++++++++---
 .../video/adf/intel/include/core/intel_dc_config.h |   39 +++++++++++++++++
 .../adf/intel/include/core/vlv/vlv_dc_config.h     |   16 +++++++
 3 files changed, 95 insertions(+), 5 deletions(-)

diff --git a/drivers/video/adf/intel/core/vlv/vlv_dc_config.c b/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
index 59dbd38..e22e9e0 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_dc_config.c
@@ -201,7 +201,7 @@ static int vlv_initialize_port(struct vlv_dc_config *vlv_config,
 
 static int vlv_initialize_disp(struct vlv_dc_config *vlv_config,
 			enum pipe pipe, enum intel_pipe_type type,
-			enum port port, u8 disp_no)
+			enum port port, u8 disp_no, u16 stepping)
 {
 	struct vlv_pri_plane *pplane;
 	struct vlv_sp_plane *splane;
@@ -229,6 +229,9 @@ static int vlv_initialize_disp(struct vlv_dc_config *vlv_config,
 
 	disp->type = type;
 
+	/* Initialising each pipeline stepping id */
+	disp->dc_stepping = stepping;
+
 	plane = pipe * VLV_MAX_PLANES;
 
 	/* Initialize the plane */
@@ -292,6 +295,31 @@ static int vlv_initialize_disp(struct vlv_dc_config *vlv_config,
 	return err;
 }
 
+static u16 chv_dc_get_stepping(struct pci_dev *pdev)
+{
+	u16 stepping = 0;
+	u8 rev_id;
+
+	if (!pdev) {
+		pr_err("ADF: %s Null parameter\n", __func__);
+		return 0;
+	}
+
+	rev_id = pdev->revision;
+
+	stepping = ((rev_id & CHV_PCI_MINOR_STEP_MASK)
+					>> CHV_PCI_MINOR_STEP_SHIFT) + '0';
+	if ((rev_id & CHV_PCI_STEP_SEL_MASK) >> CHV_PCI_STEP_SEL_SHIFT)
+		stepping = stepping + ('K' << 8);
+	else
+		stepping = stepping + ('A' << 8);
+
+	stepping = stepping + (((rev_id & CHV_PCI_MAJOR_STEP_MASK)
+					>> CHV_PCI_MAJOR_STEP_SHIFT) << 8);
+
+	pr_info("ADF %s CHV stepping id = 0x%x\n", __func__, stepping);
+	return stepping;
+}
 struct intel_dc_config *vlv_get_dc_config(struct pci_dev *pdev, u32 id)
 {
 	struct vlv_dc_config *config;
@@ -305,6 +333,7 @@ struct intel_dc_config *vlv_get_dc_config(struct pci_dev *pdev, u32 id)
 	u16 port;
 	int i, lfp_pipe = 0;
 	enum pipe pipe = PIPE_A;
+	u16 stepping = 0;
 
 	if (!pdev)
 		return ERR_PTR(-EINVAL);
@@ -315,6 +344,10 @@ struct intel_dc_config *vlv_get_dc_config(struct pci_dev *pdev, u32 id)
 		return ERR_PTR(-ENOMEM);
 	}
 
+	/* Detect stepping of CHV display controller */
+	if (IS_CHERRYVIEW())
+		stepping = chv_dc_get_stepping(pdev);
+
 	/* Init config */
 	if (id == gen_cherryview) {
 		config->max_planes = sizeof(chv_allowed_attachments)/
@@ -386,13 +419,13 @@ struct intel_dc_config *vlv_get_dc_config(struct pci_dev *pdev, u32 id)
 				vlv_initialize_disp(config, pipe,
 						INTEL_PIPE_DSI,
 						(dvo_port - DVO_PORT_MIPIA),
-						display_no++);
+						display_no++, stepping);
 			} else if (devtype & DEVICE_TYPE_EDP_BITS) {
 				pipe = PIPE_B;
 				vlv_initialize_disp(config, pipe,
 						INTEL_PIPE_EDP,
 						dvo_port - DVO_PORT_CRT,
-						display_no++);
+						display_no++, stepping);
 			}
 			lfp_pipe = pipe;
 		}
@@ -435,11 +468,13 @@ struct intel_dc_config *vlv_get_dc_config(struct pci_dev *pdev, u32 id)
 				 */
 				vlv_initialize_disp(config, pipe,
 						INTEL_PIPE_DP,
-						dvo_port, display_no++);
+						dvo_port, display_no++,
+						stepping);
 			else
 				vlv_initialize_disp(config, pipe,
 						INTEL_PIPE_HDMI,
-						dvo_port, display_no++);
+						dvo_port, display_no++,
+						stepping);
 		}
 	}
 
diff --git a/drivers/video/adf/intel/include/core/intel_dc_config.h b/drivers/video/adf/intel/include/core/intel_dc_config.h
index b8fbbcd..6c61035 100644
--- a/drivers/video/adf/intel/include/core/intel_dc_config.h
+++ b/drivers/video/adf/intel/include/core/intel_dc_config.h
@@ -37,6 +37,44 @@
 
 #define CHV_MAX_PLANES VLV_MAX_PLANES
 
+#define STEP_A0				0x4130
+#define STEP_A1				0x4131
+#define STEP_A2				0x4132
+#define STEP_A3				0x4133
+#define STEP_B0				0x4230
+#define STEP_B1				0x4231
+#define STEP_B2				0x4232
+#define STEP_B3				0x4233
+#define STEP_C0				0x4330
+#define STEP_C1				0x4331
+#define STEP_C2				0x4332
+#define STEP_C3				0x4333
+#define STEP_D0				0x4430
+#define STEP_D1				0x4431
+#define STEP_D2				0x4432
+#define STEP_D3				0x4433
+#define STEP_K0				0x4B30
+#define STEP_K1				0x4B31
+#define STEP_K2				0x4B32
+#define STEP_K3				0x4B33
+#define STEP_L0				0x4C30
+#define STEP_L1				0x4C31
+#define STEP_L2				0x4C32
+#define STEP_L3				0x4C33
+#define STEP_M0				0x4D30
+#define STEP_M1				0x4D31
+#define STEP_M2				0x4D32
+#define STEP_M3				0x4D33
+
+#define STEP_BETWEEN_INCLUSIVE(step_id, from, to) ((step_id >= from && \
+			step_id  <= to) ? true : false)
+#define STEP_ABOVE(step_id, above) (step_id > above ? true : false)
+#define STEP_BELOW(step_id, below) (step_id < below ? true : false)
+#define STEP_BETWEEN(step_id, below, above) ((step_id > below && \
+			step_id < above) ? true : false)
+#define STEP_FROM(step_id, from)  (step_id >= from ? true : false)
+#define STEP_TO(step_id, to) (step_id <= to ? true : false)
+
 struct intel_dc_component;
 struct intel_plane;
 struct intel_pipe;
@@ -627,4 +665,5 @@ extern int intel_adf_handle_events(struct intel_pipe *pipe, u32 events);
 extern int intel_adf_set_event(struct intel_pipe *pipe, u16 event,
 		bool enabled);
 extern int intel_adf_get_events(struct intel_pipe *pipe, u32 *events);
+
 #endif /* INTEL_DC_CONFIG_H_ */
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
index fc182bd..33561f9 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_config.h
@@ -38,6 +38,21 @@
 #define VLV_NUM_SPRITES 2
 #define VLV_SP_12BIT_MASK 0xFFF
 
+#define CHV_PCI_MINOR_STEP_MASK		0x0C
+#define CHV_PCI_MAJOR_STEP_MASK		0x30
+
+#define CHV_PCI_MINOR_STEP_SHIFT	0x02
+#define CHV_PCI_MAJOR_STEP_SHIFT	0x04
+
+#define CHV_PCI_STEP_SEL_MASK		0x40
+#define CHV_PCI_STEP_SEL_SHIFT		0x06
+#define CHV_PCI_OVERFLOW_MASK		0x80
+#define CHV_PCI_OVERFLOW_SHIFT		0x07
+
+#define CHV_MAX_STEP_SEL		1
+#define CHV_MAX_MAJ_STEP		1
+#define CHV_MAX_MIN_STEP		3
+
 enum planes {
 	PRIMARY_PLANE = 0,
 	SPRITE_A = 1,
@@ -111,6 +126,7 @@ struct vlv_pipeline {
 	struct vlv_pri_plane pplane;
 	struct vlv_sp_plane splane[2];
 	enum intel_pipe_type type;
+	u16 dc_stepping;
 	union {
 		struct dsi_pipe dsi;
 		/* later we will have hdmi pipe */
-- 
1.7.9.5

