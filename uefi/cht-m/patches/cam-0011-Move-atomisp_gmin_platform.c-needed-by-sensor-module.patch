From 043692ff250697d0cef83ad93984e97ffaf1d3b6 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 30 Apr 2014 15:24:26 -0700
Subject: [PATCH 011/117] Move atomisp_gmin_platform.c; needed by sensor
 modules too

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 arch/x86/platform/intel-mid/Makefile               |  3 +-
 .../x86/platform/intel-mid/atomisp_gmin_platform.c | 71 ++++++++++++++++++++++
 .../drivers/media/pci/atomisp2/Makefile.common     |  1 -
 .../atomisp_driver/atomisp_gmin_platform.c         | 71 ----------------------
 4 files changed, 73 insertions(+), 73 deletions(-)
 create mode 100644 arch/x86/platform/intel-mid/atomisp_gmin_platform.c
 delete mode 100644 drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_gmin_platform.c

diff --git a/arch/x86/platform/intel-mid/Makefile b/arch/x86/platform/intel-mid/Makefile
index 2428cfc..88d00d9 100644
--- a/arch/x86/platform/intel-mid/Makefile
+++ b/arch/x86/platform/intel-mid/Makefile
@@ -1,7 +1,8 @@
 obj-$(CONFIG_X86_INTEL_MID) += intel-mid.o intel_mid_vrtc.o mfld.o mrfl.o
 obj-$(CONFIG_EARLY_PRINTK_INTEL_MID) += early_printk_intel_mid.o
 
-obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o
+obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o atomisp_gmin_platform.o
+
 
 # SFI specific code
 ifdef CONFIG_X86_INTEL_MID
diff --git a/arch/x86/platform/intel-mid/atomisp_gmin_platform.c b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
new file mode 100644
index 0000000..1338635
--- /dev/null
+++ b/arch/x86/platform/intel-mid/atomisp_gmin_platform.c
@@ -0,0 +1,71 @@
+#include <linux/module.h>
+#include <asm/spid.h>
+
+/*
+ *   struct atomisp_sensor_caps {
+ *       int stream_num;
+ *   };
+ *   struct atomisp_camera_caps {
+ *       int sensor_num;
+ *       struct atomisp_sensor_caps sensor[MAX_SENSORS_PER_PORT];
+ *   };
+ */
+const struct atomisp_camera_caps *atomisp_get_default_camera_caps(void)
+{
+    /* This is near-legacy.  The camera_caps field is ultimately used
+     * only in two spots in atomisp_cmd, one checks if it's ==1 and
+     * the other if it's <2 (is 0 legal?). */
+    return NULL;
+}
+EXPORT_SYMBOL_GPL(atomisp_get_default_camera_caps);
+
+/*
+ *   struct intel_v4l2_subdev_i2c_board_info {
+ *       struct i2c_board_info board_info;
+ *       int i2c_adapter_id;
+ *   };
+ *   struct intel_v4l2_subdev_table {
+ *       struct intel_v4l2_subdev_i2c_board_info v4l2_subdev;
+ *       enum intel_v4l2_subdev_qtype type;
+ *       enum atomisp_camera_port port;
+ *   };
+ *   struct atomisp_platform_data {
+ *       struct intel_v4l2_subdev_table *subdevs;
+ *       const struct soft_platform_id *spid;
+ *   };
+ */
+const struct atomisp_platform_data *atomisp_get_platform_data(void)
+{
+    /* This gets enumerated in
+     * atomisp_pci_probe->atomisp_register_entites->atomisp_subdev_probe,
+     * which means that it's going to be needed before it's available.
+     * I think that's the only spot it's needed though.
+     *
+     * Note that it also talks about stuff like flash and motor
+     * devices, which are not going to be uniquely identifiable
+     * electronically (i.e. which flash goes with which camera?)  May
+     * really need the firmware intervention, or else duplicate with
+     * e.g.  module parameters on the subdevices... */
+    return NULL;
+}
+EXPORT_SYMBOL_GPL(atomisp_get_platform_data);
+
+/*
+ * Used in a handful of modules.  Focus motor maybe?
+ *
+ * struct camera_af_platform_data {
+ *     int (*power_ctrl)(struct v4l2_subdev *subdev, int flag);
+ * };
+*/
+const struct camera_af_platform_data *camera_get_af_platform_data(void)
+{
+    return NULL;
+}
+EXPORT_SYMBOL_GPL(camera_get_af_platform_data);
+
+/* This needs to be initialized at runtime so the various
+ * platform-checking macros in spid.h return the correct results.
+ * Either that, or we need to fix up the usage of those macros so that
+ * it's checking more appropriate runtime-detectable data. */
+struct soft_platform_id spid;
+EXPORT_SYMBOL(spid);
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/Makefile.common b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/Makefile.common
index b2d0938..5d46d48 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/Makefile.common
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/Makefile.common
@@ -12,7 +12,6 @@ endif
 
 ifneq ($(CSS15), )
 atomisp-$(postfix)-objs := \
-		atomisp_driver/atomisp_gmin_platform.o \
 		atomisp_driver/atomisp_ioctl.o \
 		atomisp_driver/atomisp_compat_ioctl32.o \
 		atomisp_driver/atomisp_cmd.o \
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_gmin_platform.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_gmin_platform.c
deleted file mode 100644
index 1338635..0000000
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_gmin_platform.c
+++ /dev/null
@@ -1,71 +0,0 @@
-#include <linux/module.h>
-#include <asm/spid.h>
-
-/*
- *   struct atomisp_sensor_caps {
- *       int stream_num;
- *   };
- *   struct atomisp_camera_caps {
- *       int sensor_num;
- *       struct atomisp_sensor_caps sensor[MAX_SENSORS_PER_PORT];
- *   };
- */
-const struct atomisp_camera_caps *atomisp_get_default_camera_caps(void)
-{
-    /* This is near-legacy.  The camera_caps field is ultimately used
-     * only in two spots in atomisp_cmd, one checks if it's ==1 and
-     * the other if it's <2 (is 0 legal?). */
-    return NULL;
-}
-EXPORT_SYMBOL_GPL(atomisp_get_default_camera_caps);
-
-/*
- *   struct intel_v4l2_subdev_i2c_board_info {
- *       struct i2c_board_info board_info;
- *       int i2c_adapter_id;
- *   };
- *   struct intel_v4l2_subdev_table {
- *       struct intel_v4l2_subdev_i2c_board_info v4l2_subdev;
- *       enum intel_v4l2_subdev_qtype type;
- *       enum atomisp_camera_port port;
- *   };
- *   struct atomisp_platform_data {
- *       struct intel_v4l2_subdev_table *subdevs;
- *       const struct soft_platform_id *spid;
- *   };
- */
-const struct atomisp_platform_data *atomisp_get_platform_data(void)
-{
-    /* This gets enumerated in
-     * atomisp_pci_probe->atomisp_register_entites->atomisp_subdev_probe,
-     * which means that it's going to be needed before it's available.
-     * I think that's the only spot it's needed though.
-     *
-     * Note that it also talks about stuff like flash and motor
-     * devices, which are not going to be uniquely identifiable
-     * electronically (i.e. which flash goes with which camera?)  May
-     * really need the firmware intervention, or else duplicate with
-     * e.g.  module parameters on the subdevices... */
-    return NULL;
-}
-EXPORT_SYMBOL_GPL(atomisp_get_platform_data);
-
-/*
- * Used in a handful of modules.  Focus motor maybe?
- *
- * struct camera_af_platform_data {
- *     int (*power_ctrl)(struct v4l2_subdev *subdev, int flag);
- * };
-*/
-const struct camera_af_platform_data *camera_get_af_platform_data(void)
-{
-    return NULL;
-}
-EXPORT_SYMBOL_GPL(camera_get_af_platform_data);
-
-/* This needs to be initialized at runtime so the various
- * platform-checking macros in spid.h return the correct results.
- * Either that, or we need to fix up the usage of those macros so that
- * it's checking more appropriate runtime-detectable data. */
-struct soft_platform_id spid;
-EXPORT_SYMBOL(spid);
-- 
1.9.3

