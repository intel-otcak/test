From 24590cff5b9a7285be44fd4655a24dbf78128c9d Mon Sep 17 00:00:00 2001
Message-Id: <24590cff5b9a7285be44fd4655a24dbf78128c9d.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Akash Goel <akash.goel@intel.com>
Date: Mon, 23 Dec 2013 15:59:40 +0530
Subject: [PATCH 122/312] FOR_UPSTREAM [VPG]: drm/i915/vlv: Clear out contents
 of Frame buffer allocations from Stolen area.

On VLV the User frame buffers could also get allocated from stolen area,
but there was no zeroing-out of the contents done, whereas by default
any allocation from shmem is zeroed out. Now the contents of Frame
buffers allocated from stolen area are also cleared, otherwise there
are corruptions observed in the display.

Issue: VIZ-3434
Change-Id: I9dfdd0a5c3006d797bff20630f2d68ba1a152610
Signed-off-by: Akash Goel <akash.goel@intel.com>
Signed-off-by: Deepak S <deepak.s@intel.com>
Reviewed-on: https://android.intel.com/164329
Tested-by: sys_abtbuild <sys_abtbuild@intel.com>
Reviewed-by: Bloomfield, Jon <jon.bloomfield@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/i915_gem_stolen.c |   37 +++++++++++++++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/i915_gem_stolen.c b/drivers/gpu/drm/i915/i915_gem_stolen.c
index 3621953..c186ddf 100644
--- a/drivers/gpu/drm/i915/i915_gem_stolen.c
+++ b/drivers/gpu/drm/i915/i915_gem_stolen.c
@@ -365,6 +365,38 @@ i915_gem_object_create_stolen(struct drm_device *dev, u32 size)
 	return NULL;
 }
 
+static void i915_memset_stolen_obj(struct drm_i915_gem_object *obj)
+{
+	int ret;
+	char __iomem *base;
+	int size = obj->base.size;
+	struct drm_i915_private *dev_priv = obj->base.dev->dev_private;
+	unsigned alignment = 0;
+
+	ret = i915_gem_obj_ggtt_pin(obj, alignment, PIN_MAPPABLE);
+	if (ret) {
+		DRM_ERROR("Mapping of User FB to GTT failed\n");
+		return;
+	}
+
+	/* Get the CPU virtual address of the frame buffer */
+	base = ioremap_wc(dev_priv->gtt.mappable_base +
+				i915_gem_obj_ggtt_offset(obj), size);
+	if (base == NULL) {
+		DRM_ERROR("Mapping of User FB to CPU failed\n");
+		i915_gem_object_ggtt_unpin(obj);
+		return;
+	}
+
+	memset_io(base, 0, size);
+
+	iounmap(base);
+	i915_gem_object_ggtt_unpin(obj);
+
+	DRM_DEBUG_DRIVER("User FB obj ptr=%p cleared using CPU virt add %p\n",
+			 obj, base);
+}
+
 void
 i915_gem_object_move_to_stolen(struct drm_i915_gem_object *obj)
 {
@@ -447,7 +479,10 @@ i915_gem_object_move_to_stolen(struct drm_i915_gem_object *obj)
 	obj->base.read_domains = I915_GEM_DOMAIN_CPU | I915_GEM_DOMAIN_GTT;
 	obj->cache_level = HAS_LLC(dev) ? I915_CACHE_LLC : I915_CACHE_NONE;
 
-	/* No zeroing-out of buffers allocated from stolen area */
+	/* Zero-out the contents of the stolen object, otherwise we observe
+	 * corruptions in the display.
+	 */
+	i915_memset_stolen_obj(obj);
 	return;
 
 cleanup:
-- 
1.7.9.5

