From 3b38fac6f88651012a0782fc8fe377bef56f06b4 Mon Sep 17 00:00:00 2001
From: Jianxu Zheng <jian.xu.zheng@intel.com>
Date: Tue, 25 Nov 2014 19:00:42 +0800
Subject: [PATCH 174/176] atomisp2: acc pipe should be asd specific

previous implementation didn't make dual stream in consideration.
2 streams may share same variable.

Change-Id: I5ef5c46cf2ced9257d0a28cce92a92795d6b4f8c
Tracked-on: https://jira01.devtools.intel.com/browse/IMINAN-12492
Signed-off-by: Jianxu Zheng <jian.xu.zheng@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/31861
Reviewed-by: Bin B Han <bin.b.han@intel.com>
Reviewed-by: Jukka O Kaartinen <jukka.o.kaartinen@intel.com>
Reviewed-by: Soren Friis <soren.friis@intel.com>
Integrator: Wei Tao <wei.tao@intel.com>
Reviewed-by: Ilkka Koskinen <ilkka.koskinen@intel.com>
Approver: Wei Tao <wei.tao@intel.com>
Build: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
Maintainer: Wei Tao <wei.tao@intel.com>
---
 .../pci/atomisp2/atomisp_driver/atomisp_acc.c      | 124 +++++++++++----------
 .../pci/atomisp2/atomisp_driver/atomisp_acc.h      |  16 +--
 .../pci/atomisp2/atomisp_driver/atomisp_cmd.c      |   7 +-
 .../atomisp2/atomisp_driver/atomisp_compat_css20.c |  22 ++--
 .../pci/atomisp2/atomisp_driver/atomisp_fops.c     |   3 +-
 .../pci/atomisp2/atomisp_driver/atomisp_internal.h |  32 ------
 .../pci/atomisp2/atomisp_driver/atomisp_ioctl.c    |  22 +++-
 .../pci/atomisp2/atomisp_driver/atomisp_ioctl.h    |   1 +
 .../pci/atomisp2/atomisp_driver/atomisp_subdev.h   |  32 ++++++
 9 files changed, 138 insertions(+), 121 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c
index e019dc3..4a648d5 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.c
@@ -75,23 +75,23 @@ static void acc_free_fw(struct atomisp_acc_fw *acc_fw)
 }
 
 static struct atomisp_acc_fw *
-acc_get_fw(struct atomisp_device *isp, unsigned int handle)
+acc_get_fw(struct atomisp_sub_device *asd, unsigned int handle)
 {
 	struct atomisp_acc_fw *acc_fw;
 
-	list_for_each_entry(acc_fw, &isp->acc.fw, list)
+	list_for_each_entry(acc_fw, &asd->acc.fw, list)
 		if (acc_fw->handle == handle)
 			return acc_fw;
 
 	return NULL;
 }
 
-static struct atomisp_map *acc_get_map(struct atomisp_device *isp,
+static struct atomisp_map *acc_get_map(struct atomisp_sub_device *asd,
 				       unsigned long css_ptr, size_t length)
 {
 	struct atomisp_map *atomisp_map;
 
-	list_for_each_entry(atomisp_map, &isp->acc.memory_maps, list) {
+	list_for_each_entry(atomisp_map, &asd->acc.memory_maps, list) {
 		if (atomisp_map->ptr == css_ptr &&
 		    atomisp_map->length == length)
 			return atomisp_map;
@@ -99,53 +99,60 @@ static struct atomisp_map *acc_get_map(struct atomisp_device *isp,
 	return NULL;
 }
 
-static int acc_stop_acceleration(struct atomisp_device *isp)
+static int acc_stop_acceleration(struct atomisp_sub_device *asd)
 {
 	int ret;
 
-	ret = atomisp_css_stop_acc_pipe(isp->asd);
-	atomisp_css_destroy_acc_pipe(isp->asd);
+	ret = atomisp_css_stop_acc_pipe(asd);
+	atomisp_css_destroy_acc_pipe(asd);
 
 	return ret;
 }
 
 void atomisp_acc_init(struct atomisp_device *isp)
 {
-	INIT_LIST_HEAD(&isp->acc.fw);
-	INIT_LIST_HEAD(&isp->acc.memory_maps);
-	ida_init(&isp->acc.ida);
+	int i;
+
+	for (i = 0; i < isp->num_of_streams; i++) {
+		INIT_LIST_HEAD(&isp->asd[i].acc.fw);
+		INIT_LIST_HEAD(&isp->asd[i].acc.memory_maps);
+		ida_init(&isp->asd[i].acc.ida);
+	}
 }
 
 void atomisp_acc_cleanup(struct atomisp_device *isp)
 {
-	ida_destroy(&isp->acc.ida);
+	int i;
+
+	for (i = 0; i < isp->num_of_streams; i++)
+		ida_destroy(&isp->asd[i].acc.ida);
 }
 
-void atomisp_acc_release(struct atomisp_device *isp)
+void atomisp_acc_release(struct atomisp_sub_device *asd)
 {
 	struct atomisp_acc_fw *acc_fw, *ta;
 	struct atomisp_map *atomisp_map, *tm;
 
 	/* Stop acceleration if already running */
-	if (isp->acc.pipeline)
-		acc_stop_acceleration(isp);
+	if (asd->acc.pipeline)
+		acc_stop_acceleration(asd);
 
 	/* Unload all loaded acceleration binaries */
-	list_for_each_entry_safe(acc_fw, ta, &isp->acc.fw, list) {
+	list_for_each_entry_safe(acc_fw, ta, &asd->acc.fw, list) {
 		list_del(&acc_fw->list);
-		ida_remove(&isp->acc.ida, acc_fw->handle);
+		ida_remove(&asd->acc.ida, acc_fw->handle);
 		acc_free_fw(acc_fw);
 	}
 
 	/* Free all mapped memory blocks */
-	list_for_each_entry_safe(atomisp_map, tm, &isp->acc.memory_maps, list) {
+	list_for_each_entry_safe(atomisp_map, tm, &asd->acc.memory_maps, list) {
 		list_del(&atomisp_map->list);
 		mmgr_free(atomisp_map->ptr);
 		kfree(atomisp_map);
 	}
 }
 
-int atomisp_acc_load_to_pipe(struct atomisp_device *isp,
+int atomisp_acc_load_to_pipe(struct atomisp_sub_device *asd,
 			     struct atomisp_acc_fw_load_to_pipe *user_fw)
 {
 	static const unsigned int pipeline_flags =
@@ -171,7 +178,7 @@ int atomisp_acc_load_to_pipe(struct atomisp_device *isp,
 	    user_fw->type > ATOMISP_ACC_FW_LOAD_TYPE_STANDALONE)
 		return -EINVAL;
 
-	if (isp->acc.pipeline || isp->acc.extension_mode)
+	if (asd->acc.pipeline || asd->acc.extension_mode)
 		return -EBUSY;
 
 	acc_fw = acc_alloc_fw(user_fw->size);
@@ -183,8 +190,8 @@ int atomisp_acc_load_to_pipe(struct atomisp_device *isp,
 		return -EFAULT;
 	}
 
-	if (!ida_pre_get(&isp->acc.ida, GFP_KERNEL) ||
-	    ida_get_new_above(&isp->acc.ida, 1, &handle)) {
+	if (!ida_pre_get(&asd->acc.ida, GFP_KERNEL) ||
+	    ida_get_new_above(&asd->acc.ida, 1, &handle)) {
 		acc_free_fw(acc_fw);
 		return -ENOSPC;
 	}
@@ -211,11 +218,11 @@ int atomisp_acc_load_to_pipe(struct atomisp_device *isp,
 		acc_fw->fw->info.isp.type = type_to_css[acc_fw->type];
 	}
 
-	list_add_tail(&acc_fw->list, &isp->acc.fw);
+	list_add_tail(&acc_fw->list, &asd->acc.fw);
 	return 0;
 }
 
-int atomisp_acc_load(struct atomisp_device *isp,
+int atomisp_acc_load(struct atomisp_sub_device *asd,
 		     struct atomisp_acc_fw_load *user_fw)
 {
 	struct atomisp_acc_fw_load_to_pipe ltp = {0};
@@ -225,24 +232,24 @@ int atomisp_acc_load(struct atomisp_device *isp,
 	ltp.type = ATOMISP_ACC_FW_LOAD_TYPE_STANDALONE;
 	ltp.size = user_fw->size;
 	ltp.data = user_fw->data;
-	r = atomisp_acc_load_to_pipe(isp, &ltp);
+	r = atomisp_acc_load_to_pipe(asd, &ltp);
 	user_fw->fw_handle = ltp.fw_handle;
 	return r;
 }
 
-int atomisp_acc_unload(struct atomisp_device *isp, unsigned int *handle)
+int atomisp_acc_unload(struct atomisp_sub_device *asd, unsigned int *handle)
 {
 	struct atomisp_acc_fw *acc_fw;
 
-	if (isp->acc.pipeline || isp->acc.extension_mode)
+	if (asd->acc.pipeline || asd->acc.extension_mode)
 		return -EBUSY;
 
-	acc_fw = acc_get_fw(isp, *handle);
+	acc_fw = acc_get_fw(asd, *handle);
 	if (!acc_fw)
 		return -EINVAL;
 
 	list_del(&acc_fw->list);
-	ida_remove(&isp->acc.ida, acc_fw->handle);
+	ida_remove(&asd->acc.ida, acc_fw->handle);
 	acc_free_fw(acc_fw);
 
 	return 0;
@@ -255,7 +262,7 @@ int atomisp_acc_start(struct atomisp_sub_device *asd, unsigned int *handle)
 	int ret;
 	unsigned int nbin;
 
-	if (isp->acc.pipeline || isp->acc.extension_mode)
+	if (asd->acc.pipeline || asd->acc.extension_mode)
 		return -EBUSY;
 
 	/* Invalidate caches. FIXME: should flush only necessary buffers */
@@ -266,7 +273,7 @@ int atomisp_acc_start(struct atomisp_sub_device *asd, unsigned int *handle)
 		return ret;
 
 	nbin = 0;
-	list_for_each_entry(acc_fw, &isp->acc.fw, list) {
+	list_for_each_entry(acc_fw, &asd->acc.fw, list) {
 		if (*handle != 0 && *handle != acc_fw->handle)
 			continue;
 
@@ -313,14 +320,14 @@ int atomisp_acc_wait(struct atomisp_sub_device *asd, unsigned int *handle)
 	struct atomisp_device *isp = asd->isp;
 	int ret;
 
-	if (!isp->acc.pipeline)
+	if (!asd->acc.pipeline)
 		return -ENOENT;
 
-	if (*handle && !acc_get_fw(isp, *handle))
+	if (*handle && !acc_get_fw(asd, *handle))
 		return -EINVAL;
 
 	ret = atomisp_css_wait_acc_finish(asd);
-	if (acc_stop_acceleration(isp) == -EIO) {
+	if (acc_stop_acceleration(asd) == -EIO) {
 		atomisp_reset(isp);
 		return -EINVAL;
 	}
@@ -339,7 +346,7 @@ void atomisp_acc_done(struct atomisp_sub_device *asd, unsigned int handle)
 	v4l2_event_queue(asd->subdev.devnode, &event);
 }
 
-int atomisp_acc_map(struct atomisp_device *isp, struct atomisp_acc_map *map)
+int atomisp_acc_map(struct atomisp_sub_device *asd, struct atomisp_acc_map *map)
 {
 	struct atomisp_map *atomisp_map;
 	ia_css_ptr cssptr;
@@ -348,13 +355,13 @@ int atomisp_acc_map(struct atomisp_device *isp, struct atomisp_acc_map *map)
 	if (map->css_ptr)
 		return -EINVAL;
 
-	if (isp->acc.pipeline)
+	if (asd->acc.pipeline)
 		return -EBUSY;
 
 	if (map->user_ptr) {
 		/* Buffer to map must be page-aligned */
 		if ((unsigned long)map->user_ptr & ~PAGE_MASK) {
-			dev_err(isp->dev,
+			dev_err(asd->isp->dev,
 				"%s: mapped buffer address %p is not page aligned\n",
 				__func__, map->user_ptr);
 			return -EINVAL;
@@ -383,22 +390,22 @@ int atomisp_acc_map(struct atomisp_device *isp, struct atomisp_acc_map *map)
 	}
 	atomisp_map->ptr = cssptr;
 	atomisp_map->length = map->length;
-	list_add(&atomisp_map->list, &isp->acc.memory_maps);
+	list_add(&atomisp_map->list, &asd->acc.memory_maps);
 
-	dev_dbg(isp->dev, "%s: userptr %p, css_address 0x%x, size %d\n",
+	dev_dbg(asd->isp->dev, "%s: userptr %p, css_address 0x%x, size %d\n",
 		__func__, map->user_ptr, cssptr, map->length);
 	map->css_ptr = cssptr;
 	return 0;
 }
 
-int atomisp_acc_unmap(struct atomisp_device *isp, struct atomisp_acc_map *map)
+int atomisp_acc_unmap(struct atomisp_sub_device *asd, struct atomisp_acc_map *map)
 {
 	struct atomisp_map *atomisp_map;
 
-	if (isp->acc.pipeline)
+	if (asd->acc.pipeline)
 		return -EBUSY;
 
-	atomisp_map = acc_get_map(isp, map->css_ptr, map->length);
+	atomisp_map = acc_get_map(asd, map->css_ptr, map->length);
 	if (!atomisp_map)
 		return -EINVAL;
 
@@ -408,7 +415,7 @@ int atomisp_acc_unmap(struct atomisp_device *isp, struct atomisp_acc_map *map)
 	return 0;
 }
 
-int atomisp_acc_s_mapped_arg(struct atomisp_device *isp,
+int atomisp_acc_s_mapped_arg(struct atomisp_sub_device *asd,
 			     struct atomisp_acc_s_mapped_arg *arg)
 {
 	struct atomisp_acc_fw *acc_fw;
@@ -416,23 +423,23 @@ int atomisp_acc_s_mapped_arg(struct atomisp_device *isp,
 	if (arg->memory >= ATOMISP_ACC_NR_MEMORY)
 		return -EINVAL;
 
-	if (isp->acc.pipeline)
+	if (asd->acc.pipeline)
 		return -EBUSY;
 
-	acc_fw = acc_get_fw(isp, arg->fw_handle);
+	acc_fw = acc_get_fw(asd, arg->fw_handle);
 	if (!acc_fw)
 		return -EINVAL;
 
 	if (arg->css_ptr != 0 || arg->length != 0) {
 		/* Unless the parameter is cleared, check that it exists */
-		if (!acc_get_map(isp, arg->css_ptr, arg->length))
+		if (!acc_get_map(asd, arg->css_ptr, arg->length))
 			return -EINVAL;
 	}
 
 	acc_fw->args[arg->memory].length = arg->length;
 	acc_fw->args[arg->memory].css_ptr = arg->css_ptr;
 
-	dev_dbg(isp->dev, "%s: mem %d, address %p, size %ld\n",
+	dev_dbg(asd->isp->dev, "%s: mem %d, address %p, size %ld\n",
 		__func__, arg->memory, (void *)arg->css_ptr,
 		(unsigned long)arg->length);
 	return 0;
@@ -451,13 +458,13 @@ int atomisp_acc_load_extensions(struct atomisp_sub_device *asd)
 	int ret = 0, i = -1;
 	struct atomisp_device *isp = asd->isp;
 
-	if (isp->acc.pipeline || isp->acc.extension_mode)
+	if (asd->acc.pipeline || asd->acc.extension_mode)
 		return -EBUSY;
 
 	/* Invalidate caches. FIXME: should flush only necessary buffers */
 	wbinvd();
 
-	list_for_each_entry(acc_fw, &isp->acc.fw, list) {
+	list_for_each_entry(acc_fw, &asd->acc.fw, list) {
 		if (acc_fw->type != ATOMISP_ACC_FW_LOAD_TYPE_OUTPUT &&
 		    acc_fw->type != ATOMISP_ACC_FW_LOAD_TYPE_VIEWFINDER)
 			continue;
@@ -498,7 +505,7 @@ int atomisp_acc_load_extensions(struct atomisp_sub_device *asd)
 		goto error;
 	}
 
-	isp->acc.extension_mode = true;
+	asd->acc.extension_mode = true;
 	return 0;
 
 error:
@@ -509,7 +516,7 @@ error:
 		}
 	}
 
-	list_for_each_entry_continue_reverse(acc_fw, &isp->acc.fw, list) {
+	list_for_each_entry_continue_reverse(acc_fw, &asd->acc.fw, list) {
 		if (acc_fw->type != ATOMISP_ACC_FW_LOAD_TYPE_OUTPUT &&
 		    acc_fw->type != ATOMISP_ACC_FW_LOAD_TYPE_VIEWFINDER)
 			continue;
@@ -531,14 +538,13 @@ error:
 
 void atomisp_acc_unload_extensions(struct atomisp_sub_device *asd)
 {
-	struct atomisp_device *isp = asd->isp;
 	struct atomisp_acc_fw *acc_fw;
 	int i;
 
-	if (!isp->acc.extension_mode)
+	if (!asd->acc.extension_mode)
 		return;
 
-	list_for_each_entry_reverse(acc_fw, &isp->acc.fw, list) {
+	list_for_each_entry_reverse(acc_fw, &asd->acc.fw, list) {
 		if (acc_fw->type != ATOMISP_ACC_FW_LOAD_TYPE_OUTPUT &&
 		    acc_fw->type != ATOMISP_ACC_FW_LOAD_TYPE_VIEWFINDER)
 			continue;
@@ -552,26 +558,25 @@ void atomisp_acc_unload_extensions(struct atomisp_sub_device *asd)
 		}
 	}
 
-	isp->acc.extension_mode = false;
+	asd->acc.extension_mode = false;
 }
 
 int atomisp_acc_set_state(struct atomisp_sub_device *asd,
 			  struct atomisp_acc_state *arg)
 {
-	struct atomisp_device *isp = asd->isp;
 	struct atomisp_acc_fw *acc_fw;
 	bool enable = (arg->flags & ATOMISP_STATE_FLAG_ENABLE) != 0;
 	struct ia_css_pipe *pipe;
 	enum ia_css_err r;
 	int i;
 
-	if (!isp->acc.extension_mode)
+	if (!asd->acc.extension_mode)
 		return -EBUSY;
 
 	if (arg->flags & ~ATOMISP_STATE_FLAG_ENABLE)
 		return -EINVAL;
 
-	acc_fw = acc_get_fw(isp, arg->fw_handle);
+	acc_fw = acc_get_fw(asd, arg->fw_handle);
 	if (!acc_fw)
 		return -EINVAL;
 
@@ -597,13 +602,12 @@ int atomisp_acc_set_state(struct atomisp_sub_device *asd,
 int atomisp_acc_get_state(struct atomisp_sub_device *asd,
 			  struct atomisp_acc_state *arg)
 {
-	struct atomisp_device *isp = asd->isp;
 	struct atomisp_acc_fw *acc_fw;
 
-	if (!isp->acc.extension_mode)
+	if (!asd->acc.extension_mode)
 		return -EBUSY;
 
-	acc_fw = acc_get_fw(isp, arg->fw_handle);
+	acc_fw = acc_get_fw(asd, arg->fw_handle);
 	if (!acc_fw)
 		return -EINVAL;
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h
index 8cef429..ae7d2f8 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_acc.h
@@ -31,7 +31,7 @@
  * Interface functions for AtomISP driver acceleration API implementation.
  */
 
-struct atomisp_device;
+struct atomisp_sub_device;
 
 /*
  * Initialize acceleration interface.
@@ -48,36 +48,36 @@ void atomisp_acc_cleanup(struct atomisp_device *isp);
  * this function may be called sequentially multiple times.
  * Must be called to free up resources before driver is unloaded.
  */
-void atomisp_acc_release(struct atomisp_device *isp);
+void atomisp_acc_release(struct atomisp_sub_device *asd);
 
 /* Load acceleration binary. DEPRECATED. */
-int atomisp_acc_load(struct atomisp_device *isp,
+int atomisp_acc_load(struct atomisp_sub_device *asd,
 		     struct atomisp_acc_fw_load *fw);
 
 /* Load acceleration binary with specified properties */
-int atomisp_acc_load_to_pipe(struct atomisp_device *isp,
+int atomisp_acc_load_to_pipe(struct atomisp_sub_device *asd,
 			     struct atomisp_acc_fw_load_to_pipe *fw);
 
 /* Unload specified acceleration binary */
-int atomisp_acc_unload(struct atomisp_device *isp,
+int atomisp_acc_unload(struct atomisp_sub_device *asd,
 		       unsigned int *handle);
 
 /*
  * Map a memory region into ISP memory space.
  */
-int atomisp_acc_map(struct atomisp_device *isp,
+int atomisp_acc_map(struct atomisp_sub_device *asd,
 		    struct atomisp_acc_map *map);
 
 /*
  * Unmap a mapped memory region.
  */
-int atomisp_acc_unmap(struct atomisp_device *isp,
+int atomisp_acc_unmap(struct atomisp_sub_device *asd,
 		      struct atomisp_acc_map *map);
 
 /*
  * Set acceleration binary argument to a previously mapped memory region.
  */
-int atomisp_acc_s_mapped_arg(struct atomisp_device *isp,
+int atomisp_acc_s_mapped_arg(struct atomisp_sub_device *asd,
 			     struct atomisp_acc_s_mapped_arg *arg);
 
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
index ee3c7c3..c9504bf 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_cmd.c
@@ -587,11 +587,12 @@ irqreturn_t atomisp_isr(int irq, void *dev)
 
 	clear_irq_reg(isp);
 
-	if (!atomisp_streaming_count(isp) && !isp->acc.pipeline)
+	if (!atomisp_streaming_count(isp) && !atomisp_is_acc_enabled(isp))
 		goto out_nowake;
 
 	for (i = 0; i < isp->num_of_streams; i++) {
 		asd = &isp->asd[i];
+
 		if (asd->streaming != ATOMISP_DEVICE_STREAMING_ENABLED)
 			continue;
 		/*
@@ -1638,7 +1639,7 @@ irqreturn_t atomisp_isr_thread(int irq, void *isp_ptr)
 
 	spin_lock_irqsave(&isp->lock, flags);
 
-	if (!atomisp_streaming_count(isp) && !isp->acc.pipeline) {
+	if (!atomisp_streaming_count(isp) && !atomisp_is_acc_enabled(isp)) {
 		spin_unlock_irqrestore(&isp->lock, flags);
 		return IRQ_HANDLED;
 	}
@@ -1697,7 +1698,7 @@ out:
 			v4l2_subdev_call(isp->inputs[asd->input_curr].camera,
 					 video, s_stream, 1);
 		/* FIXME! FIX ACC implementation */
-		if (isp->acc.pipeline && css_pipe_done[asd->index])
+		if (asd->acc.pipeline && css_pipe_done[asd->index])
 			atomisp_css_acc_done(asd);
 	}
 	dev_dbg(isp->dev, "<%s\n", __func__);
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
index b77a1b6..f9072f3 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_compat_css20.c
@@ -4280,7 +4280,7 @@ void atomisp_css_set_cont_prev_start_time(struct atomisp_device *isp,
 
 void atomisp_css_acc_done(struct atomisp_sub_device *asd)
 {
-	complete(&asd->isp->acc.acc_done);
+	complete(&asd->acc.acc_done);
 }
 
 int atomisp_css_wait_acc_finish(struct atomisp_sub_device *asd)
@@ -4290,7 +4290,7 @@ int atomisp_css_wait_acc_finish(struct atomisp_sub_device *asd)
 
 	/* Unlock the isp mutex taken in IOCTL handler before sleeping! */
 	rt_mutex_unlock(&isp->mutex);
-	if (wait_for_completion_interruptible_timeout(&isp->acc.acc_done,
+	if (wait_for_completion_interruptible_timeout(&asd->acc.acc_done,
 					ATOMISP_ISP_TIMEOUT_DURATION) == 0) {
 		dev_err(isp->dev, "<%s: completion timeout\n", __func__);
 		atomisp_css_debug_dump_sp_sw_debug_info();
@@ -4388,11 +4388,11 @@ int atomisp_css_create_acc_pipe(struct atomisp_sub_device *asd)
 
 	pipe_config = &stream_env->pipe_configs[CSS_PIPE_ID_ACC];
 	ia_css_pipe_config_defaults(pipe_config);
-	isp->acc.acc_stages = kzalloc(MAX_ACC_STAGES *
+	asd->acc.acc_stages = kzalloc(MAX_ACC_STAGES *
 				sizeof(void *), GFP_KERNEL);
-	if (!isp->acc.acc_stages)
+	if (!asd->acc.acc_stages)
 		return -ENOMEM;
-	pipe_config->acc_stages = isp->acc.acc_stages;
+	pipe_config->acc_stages = asd->acc.acc_stages;
 	pipe_config->mode = IA_CSS_PIPE_MODE_ACC;
 	pipe_config->num_acc_stages = 0;
 
@@ -4429,8 +4429,8 @@ int atomisp_css_start_acc_pipe(struct atomisp_sub_device *asd)
 	}
 	stream_env->acc_stream_state = CSS_STREAM_CREATED;
 
-	init_completion(&isp->acc.acc_done);
-	isp->acc.pipeline = stream_env->pipes[IA_CSS_PIPE_ID_ACC];
+	init_completion(&asd->acc.acc_done);
+	asd->acc.pipeline = stream_env->pipes[IA_CSS_PIPE_ID_ACC];
 
 	atomisp_freq_scaling(isp, ATOMISP_DFS_MODE_MAX, false);
 
@@ -4484,15 +4484,15 @@ void atomisp_css_destroy_acc_pipe(struct atomisp_sub_device *asd)
 		ia_css_pipe_extra_config_defaults(
 			&stream_env->pipe_extra_configs[IA_CSS_PIPE_ID_ACC]);
 	}
-	asd->isp->acc.pipeline = NULL;
+	asd->acc.pipeline = NULL;
 
 	/* css 2.0 API limitation: ia_css_stop_sp() could be only called after
 	 * destroy all pipes
 	 */
 	ia_css_stop_sp();
 
-	kfree(asd->isp->acc.acc_stages);
-	asd->isp->acc.acc_stages = NULL;
+	kfree(asd->acc.acc_stages);
+	asd->acc.acc_stages = NULL;
 
 	atomisp_freq_scaling(asd->isp, ATOMISP_DFS_MODE_LOW, false);
 }
@@ -4529,7 +4529,7 @@ static struct atomisp_sub_device *__get_atomisp_subdev(
 	for (i = 0; i < isp->num_of_streams; i++) {
 		asd = &isp->asd[i];
 		if (asd->streaming == ATOMISP_DEVICE_STREAMING_DISABLED &&
-		    !isp->acc.pipeline)
+		    !asd->acc.pipeline)
 			continue;
 		for (j = 0; j < ATOMISP_INPUT_STREAM_NUM; j++) {
 			stream_env = &asd->stream_env[j];
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c
index 5b2f03e..f524791 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_fops.c
@@ -949,7 +949,8 @@ static int atomisp_release(struct file *file)
 	if (atomisp_dev_users(isp))
 		goto done;
 
-	atomisp_acc_release(isp);
+	atomisp_acc_release(asd);
+
 	atomisp_destroy_pipes_stream_force(asd);
 	atomisp_css_uninit(isp);
 
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_internal.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_internal.h
index 3180b8c..677b6fb 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_internal.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_internal.h
@@ -232,27 +232,6 @@ struct atomisp_sw_contex {
 	int running_freq;
 };
 
-struct atomisp_acc_fw {
-	struct atomisp_css_fw_info *fw;
-	unsigned int handle;
-	unsigned int flags;
-	unsigned int type;
-	struct {
-		size_t length;
-		unsigned long css_ptr;
-	} args[ATOMISP_ACC_NR_MEMORY];
-	struct list_head list;
-};
-
-struct atomisp_map {
-	ia_css_ptr ptr;
-	size_t length;
-	struct list_head list;
-	/* FIXME: should keep book which maps are currently used
-	 * by binaries and not allow releasing those
-	 * which are in use. Implement by reference counting.
-	 */
-};
 
 #define ATOMISP_DEVICE_STREAMING_DISABLED	0
 #define ATOMISP_DEVICE_STREAMING_ENABLED	1
@@ -274,17 +253,6 @@ struct atomisp_device {
 	struct pm_qos_request pm_qos;
 	s32 max_isr_latency;
 
-	struct {
-		struct list_head fw;
-		struct list_head memory_maps;
-		struct atomisp_css_pipeline *pipeline;
-		bool extension_mode;
-		struct ida ida;
-		struct completion acc_done;
-		void *acc_stages;
-	} acc;
-
-
 	/*
 	 * ISP modules
 	 * Multiple streams are represents by multiple
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
index a51af20..9840049 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.c
@@ -663,6 +663,16 @@ unsigned int atomisp_streaming_count(struct atomisp_device *isp)
 	return sum;
 }
 
+unsigned int atomisp_is_acc_enabled(struct atomisp_device *isp)
+{
+	unsigned int i;
+
+	for (i = 0; i < isp->num_of_streams; i++)
+		if (isp->asd[i].acc.pipeline)
+			return 1;
+
+	return 0;
+}
 /*
  * get input are used to get current primary/secondary camera
  */
@@ -2813,15 +2823,15 @@ static long atomisp_vidioc_default(struct file *file, void *fh,
 		break;
 
 	case ATOMISP_IOC_ACC_LOAD:
-		err = atomisp_acc_load(isp, arg);
+		err = atomisp_acc_load(asd, arg);
 		break;
 
 	case ATOMISP_IOC_ACC_LOAD_TO_PIPE:
-		err = atomisp_acc_load_to_pipe(isp, arg);
+		err = atomisp_acc_load_to_pipe(asd, arg);
 		break;
 
 	case ATOMISP_IOC_ACC_UNLOAD:
-		err = atomisp_acc_unload(isp, arg);
+		err = atomisp_acc_unload(asd, arg);
 		break;
 
 	case ATOMISP_IOC_ACC_START:
@@ -2833,15 +2843,15 @@ static long atomisp_vidioc_default(struct file *file, void *fh,
 		break;
 
 	case ATOMISP_IOC_ACC_MAP:
-		err = atomisp_acc_map(isp, arg);
+		err = atomisp_acc_map(asd, arg);
 		break;
 
 	case ATOMISP_IOC_ACC_UNMAP:
-		err = atomisp_acc_unmap(isp, arg);
+		err = atomisp_acc_unmap(asd, arg);
 		break;
 
 	case ATOMISP_IOC_ACC_S_MAPPED_ARG:
-		err = atomisp_acc_s_mapped_arg(isp, arg);
+		err = atomisp_acc_s_mapped_arg(asd, arg);
 		break;
 
 	case ATOMISP_IOC_S_ISP_SHD_TAB:
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.h
index a2c4c81..2db9aeb 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_ioctl.h
@@ -59,6 +59,7 @@ extern const struct v4l2_ioctl_ops atomisp_file_ioctl_ops;
 
 unsigned int atomisp_streaming_count(struct atomisp_device *isp);
 
+unsigned int atomisp_is_acc_enabled(struct atomisp_device *isp);
 /* compat_ioctl for 32bit userland app and 64bit kernel */
 long atomisp_compat_ioctl32(struct file *file,
 			    unsigned int cmd, unsigned long arg);
diff --git a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
index c0954b5..418b207 100644
--- a/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
+++ b/drivers/external_drivers/camera/drivers/media/pci/atomisp2/atomisp_driver/atomisp_subdev.h
@@ -249,6 +249,28 @@ struct atomisp_css_params_with_list {
 	struct list_head list;
 };
 
+struct atomisp_acc_fw {
+	struct atomisp_css_fw_info *fw;
+	unsigned int handle;
+	unsigned int flags;
+	unsigned int type;
+	struct {
+		size_t length;
+		unsigned long css_ptr;
+	} args[ATOMISP_ACC_NR_MEMORY];
+	struct list_head list;
+};
+
+struct atomisp_map {
+	ia_css_ptr ptr;
+	size_t length;
+	struct list_head list;
+	/* FIXME: should keep book which maps are currently used
+	 * by binaries and not allow releasing those
+	 * which are in use. Implement by reference counting.
+	 */
+};
+
 struct atomisp_sub_device {
 	struct v4l2_subdev subdev;
 	struct media_pad pads[ATOMISP_SUBDEV_PADS_NUM];
@@ -277,6 +299,16 @@ struct atomisp_sub_device {
 	struct v4l2_ctrl *enable_raw_buffer_lock;
 	struct v4l2_ctrl *disable_dz;
 
+	struct {
+		struct list_head fw;
+		struct list_head memory_maps;
+		struct atomisp_css_pipeline *pipeline;
+		bool extension_mode;
+		struct ida ida;
+		struct completion acc_done;
+		void *acc_stages;
+	} acc;
+
 	struct atomisp_subdev_params params;
 
 	struct atomisp_stream_env stream_env[ATOMISP_INPUT_STREAM_NUM];
-- 
1.9.1

