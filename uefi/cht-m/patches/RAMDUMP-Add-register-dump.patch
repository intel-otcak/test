From 0e1dd4b53cf865e6be61d1b42df76780aab4e0a9 Mon Sep 17 00:00:00 2001
From: Emmanuel Berthier <emmanuel.berthier@intel.com>
Date: Wed, 5 Nov 2014 13:41:24 +0100
Subject: [PATCH] [RAMDUMP] Add register dump

Store CPU registers during cpu stop in order to get them with ramdump.

Change-Id: Ibc35b70e71df16e8721faba1b6ce5dfcc5310f29
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17325
Signed-off-by: Emmanuel Berthier <emmanuel.berthier@intel.com>
---
 arch/x86/kernel/smp.c | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/arch/x86/kernel/smp.c b/arch/x86/kernel/smp.c
index 7c3a5a6..bfec8ab 100644
--- a/arch/x86/kernel/smp.c
+++ b/arch/x86/kernel/smp.c
@@ -31,6 +31,8 @@
 #include <asm/apic.h>
 #include <asm/nmi.h>
 #include <asm/trace/irq_vectors.h>
+#include <asm/kexec.h>
+
 /*
  *	Some notes on x86 processor bugs affecting SMP operation:
  *
@@ -113,6 +115,17 @@
 static atomic_t stopping_cpu = ATOMIC_INIT(-1);
 static bool smp_no_nmi_ipi = false;
 
+static DEFINE_PER_CPU(struct pt_regs, cpu_regs);
+
+/* Store regs of this CPU for RAM dump decoding help */
+static inline void store_regs(struct pt_regs *regs)
+{
+	crash_setup_regs(&get_cpu_var(cpu_regs), regs);
+
+	/* Flush CPU cache */
+	asm("cli;wbinvd;sti");
+}
+
 /*
  * this function sends a 'reschedule' IPI to another CPU.
  * it goes straight through and wastes no time serializing
@@ -159,6 +172,7 @@ static int smp_stop_nmi_callback(unsigned int val, struct pt_regs *regs)
 	if (raw_smp_processor_id() == atomic_read(&stopping_cpu))
 		return NMI_HANDLED;
 
+	store_regs(regs);
 	stop_this_cpu(NULL);
 
 	return NMI_HANDLED;
@@ -168,10 +182,11 @@ static int smp_stop_nmi_callback(unsigned int val, struct pt_regs *regs)
  * this function calls the 'stop' function on all other CPUs in the system.
  */
 
-asmlinkage void smp_reboot_interrupt(void)
+void smp_reboot_interrupt(struct pt_regs *regs)
 {
 	ack_APIC_irq();
 	irq_enter();
+	store_regs(regs);
 	stop_this_cpu(NULL);
 	irq_exit();
 }
@@ -242,6 +257,7 @@ static void native_stop_other_cpus(int wait)
 	}
 
 finish:
+	store_regs(NULL);
 	local_irq_save(flags);
 	disable_local_APIC();
 	local_irq_restore(flags);
-- 
1.9.1

