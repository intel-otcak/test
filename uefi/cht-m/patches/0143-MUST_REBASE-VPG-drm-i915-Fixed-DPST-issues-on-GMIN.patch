From 6843adc36b94bb5ca3648cec5e5b59012e56d344 Mon Sep 17 00:00:00 2001
Message-Id: <6843adc36b94bb5ca3648cec5e5b59012e56d344.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: arsharma <ankitprasad.r.sharma@intel.com>
Date: Fri, 4 Jul 2014 15:09:11 +0530
Subject: [PATCH 143/312] MUST_REBASE [VPG]: drm/i915: Fixed DPST issues on
 GMIN
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fixed issues in the DPST implementation, to make it work properly with
EDP panel on MRD7. DPST feature is not to be upstreamed, as the
corresponding User mode component can not be open sourced.

v2: Fixed the soft lockup issue on Display resume.

Issue: GMIN-2179

Change-Id: I3f2fc89d0b32e4a783a37c75ee4ecd2367461c60
Signed-off-by: arsharma <ankitprasad.r.sharma@intel.com>

Conflicts:

	drivers/gpu/drm/i915/intel_display.c
---
 drivers/gpu/drm/i915/i915_dpst.c     |   49 ++++++++++++++++++++++++++++------
 drivers/gpu/drm/i915/i915_drv.h      |    1 +
 drivers/gpu/drm/i915/i915_irq.c      |    7 +++--
 drivers/gpu/drm/i915/intel_display.c |    7 +++++
 4 files changed, 54 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dpst.c b/drivers/gpu/drm/i915/i915_dpst.c
index f892685..f153a7b 100644
--- a/drivers/gpu/drm/i915/i915_dpst.c
+++ b/drivers/gpu/drm/i915/i915_dpst.c
@@ -63,7 +63,8 @@ i915_dpst_save_conn_on_edp(struct drm_device *dev)
 	{
 		i_connector = to_intel_connector(d_connector);
 		if (i_connector->encoder
-			&& i_connector->encoder->type == INTEL_OUTPUT_EDP) {
+			&& (i_connector->encoder->type == INTEL_OUTPUT_EDP ||
+			i_connector->encoder->type == INTEL_OUTPUT_DSI)) {
 			dev_priv->dpst.connector = i_connector;
 			new_pipe = to_intel_crtc(i_connector->encoder->base.crtc)->pipe;
 			if (new_pipe != dev_priv->dpst.pipe)
@@ -158,6 +159,7 @@ static int
 i915_dpst_set_user_enable(struct drm_device *dev, bool enable)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	int ret = 0;
 
 	dev_priv->dpst.user_enable = enable;
 
@@ -168,11 +170,15 @@ i915_dpst_set_user_enable(struct drm_device *dev, bool enable)
 		/* User disabling invalidates any saved settings */
 		dev_priv->dpst.saved.is_valid = false;
 
+		/* Avoid warning messages */
+		mutex_lock(&dev->mode_config.mutex);
 		if (dev_priv->dpst.enabled)
-			return i915_dpst_disable_hist_interrupt(dev);
+			ret = i915_dpst_disable_hist_interrupt(dev);
+
+		mutex_unlock(&dev->mode_config.mutex);
 	}
 
-	return 0;
+	return ret;
 }
 
 static int
@@ -225,9 +231,12 @@ i915_dpst_apply_luma(struct drm_device *dev,
 	dev_priv->dpst.blc_adjustment =
 	ioctl_data->ie_container.dpst_blc_factor;
 
+	/* Avoid warning messages */
+	mutex_lock(&dev->mode_config.mutex);
 	spin_lock_irqsave(&dev_priv->backlight_lock, spin_lock_flags);
 	i915_dpst_set_brightness(dev, panel->backlight.level);
 	spin_unlock_irqrestore(&dev_priv->backlight_lock, spin_lock_flags);
+	mutex_unlock(&dev->mode_config.mutex);
 
 	/* Enable Image Enhancement Table */
 	blm_hist_ctl = I915_READ(dev_priv->dpst.reg.blm_hist_ctl);
@@ -267,9 +276,12 @@ i915_dpst_restore_luma(struct drm_device *dev)
 
 	dev_priv->dpst.blc_adjustment = dev_priv->dpst.saved.blc_adjustment;
 
+	/* Avoid warning messages */
+	mutex_lock(&dev->mode_config.mutex);
 	spin_lock_irqsave(&dev_priv->backlight_lock, spin_lock_flags);
 	i915_dpst_set_brightness(dev, panel->backlight.level);
 	spin_unlock_irqrestore(&dev_priv->backlight_lock, spin_lock_flags);
+	mutex_unlock(&dev->mode_config.mutex);
 
 	/* IE mod table entries are saved in the hardware even if the table
 	 * is disabled, so we only need to re-enable the table */
@@ -414,11 +426,21 @@ i915_dpst_display_off(struct drm_device *dev)
 	if (!dev_priv->dpst.user_enable)
 		return;
 
-	mutex_lock(&dev_priv->dpst.ioctl_lock);
-
-	i915_dpst_disable_hist_interrupt(dev);
-
-	mutex_unlock(&dev_priv->dpst.ioctl_lock);
+	/* Set the flag to reject all the subsequent DPST ioctls
+	 * till the Display is turned on again
+	 */
+	dev_priv->dpst.display_off = true;
+
+	/* To avoid the deadlock with the concurrent dpst ioctl path
+	 * (like apply_luma) due to cross dependency between the
+	 * ioctl_lock & mode_config.mutex. Although this leaves
+	 * a very tiny window, but it shall be benign */
+	if (!mutex_trylock(&dev_priv->dpst.ioctl_lock))
+		i915_dpst_disable_hist_interrupt(dev);
+	else {
+		i915_dpst_disable_hist_interrupt(dev);
+		mutex_unlock(&dev_priv->dpst.ioctl_lock);
+	}
 }
 
 void
@@ -436,6 +458,7 @@ i915_dpst_display_on(struct drm_device *dev)
 			&& !dev_priv->dpst.kernel_disable)
 		i915_dpst_enable_hist_interrupt(dev);
 
+	dev_priv->dpst.display_off = false;
 	mutex_unlock(&dev_priv->dpst.ioctl_lock);
 }
 
@@ -540,9 +563,19 @@ i915_dpst_context(struct drm_device *dev, void *data,
 	if (!I915_HAS_DPST(dev))
 		return -EINVAL;
 
+
 	/* Can be called from multiple usermode, prevent race condition */
 	mutex_lock(&dev_priv->dpst.ioctl_lock);
 
+	/* If Display is currently off (could be power gated also),
+	 * don't service the ioctls
+	 */
+	if (dev_priv->dpst.display_off) {
+		DRM_DEBUG_KMS("Display is off\n");
+		mutex_unlock(&dev_priv->dpst.ioctl_lock);
+		return -EINVAL;
+	}
+
 	ioctl_data = (struct dpst_initialize_context *) data;
 	switch (ioctl_data->dpst_ioctl_type) {
 	case DPST_ENABLE:
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 89b0826..27e9f02 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1527,6 +1527,7 @@ struct drm_i915_private {
 		bool kernel_disable;	/* kernel override wishes to disable */
 		bool enabled;		/* actual functional state */
 		bool pipe_mismatch;	/* Indicates pipe mismatch between user mode and kernel */
+		bool display_off;	/* Indicates that Display is off (could be power gated also) */
 		struct {
 			bool is_valid;
 			u32 blc_adjustment;
diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index 4e5dbf1..ede3e99 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -3564,10 +3564,12 @@ static void valleyview_display_irqs_install(struct drm_i915_private *dev_priv)
 	I915_WRITE(PIPESTAT(PIPE_B), pipestat_mask);
 	POSTING_READ(PIPESTAT(PIPE_A));
 
+	/* Enable the DPST interrupt also */
 	pipestat_mask = PLANE_FLIP_DONE_INT_STATUS_VLV |
 			PIPE_CRC_DONE_INTERRUPT_STATUS |
 			SPRITE0_FLIP_DONE_INT_STATUS_VLV |
-			SPRITE1_FLIP_DONE_INT_STATUS_VLV;
+			SPRITE1_FLIP_DONE_INT_STATUS_VLV |
+			PIPE_DPST_EVENT_STATUS;
 
 	i915_enable_pipestat(dev_priv, PIPE_A, pipestat_mask |
 					       PIPE_GMBUS_INTERRUPT_STATUS);
@@ -3602,7 +3604,8 @@ static void valleyview_display_irqs_uninstall(struct drm_i915_private *dev_priv)
 	POSTING_READ(VLV_IIR);
 
 	pipestat_mask = PLANE_FLIP_DONE_INT_STATUS_VLV |
-			PIPE_CRC_DONE_INTERRUPT_STATUS;
+			PIPE_CRC_DONE_INTERRUPT_STATUS |
+			PIPE_DPST_EVENT_STATUS;
 
 	i915_disable_pipestat(dev_priv, PIPE_A, pipestat_mask |
 					        PIPE_GMBUS_INTERRUPT_STATUS);
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index e102db1..9bf6ad0 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -5246,6 +5246,10 @@ static void valleyview_crtc_enable(struct drm_crtc *crtc)
 			encoder->enable(encoder);
 	}
 
+	/* Update DPST context after mode change */
+	if (I915_HAS_DPST(dev))
+		i915_dpst_display_on(dev);
+
 	intel_crtc_enable_planes(crtc);
 	intel_update_drrs(dev);
 
@@ -5386,6 +5390,9 @@ static void i9xx_crtc_disable(struct drm_crtc *crtc)
 	if (IS_GEN2(dev))
 		intel_set_cpu_fifo_underrun_reporting(dev, pipe, false);
 
+	if (I915_HAS_DPST(dev))
+		i915_dpst_display_off(dev);
+
 	intel_crtc_disable_planes(crtc);
 
 	for_each_encoder_on_crtc(dev, crtc, encoder)
-- 
1.7.9.5

