From d7bf32f9c01c20d19e1554cffdb3cb2a265c3969 Mon Sep 17 00:00:00 2001
From: Andrey Gostev <fga022c@motorola.com>
Date: Tue, 26 Aug 2014 20:53:54 -0400
Subject: [PATCH 66/77] net: wireless: bcmdhd: changed SAR control

Modified SAR callback function to allow dynamically control max TX power
for SAR reasons and for optimal RF performance of WLAN.

Change-Id: I7dcce16c5a9b361681aff132fed1ebf41b29edcb
Signed-off-by: Andrey Gostev <fga022c@motorola.com>
---
 drivers/net/wireless/bcmdhd/Makefile    |  2 ++
 drivers/net/wireless/bcmdhd/dhd_linux.c | 37 +++++++++++++++++++++++++--------
 2 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/drivers/net/wireless/bcmdhd/Makefile b/drivers/net/wireless/bcmdhd/Makefile
index b3d6f4611605..924d8b377133 100644
--- a/drivers/net/wireless/bcmdhd/Makefile
+++ b/drivers/net/wireless/bcmdhd/Makefile
@@ -152,6 +152,8 @@ ifneq ($(CONFIG_BCMDHD_PCIE),)
   DHDCFLAGS += -DCUSTOM_AMPDU_RELEASE=16
 # Disable watchdog thread
   DHDCFLAGS += -DCUSTOM_DHD_WATCHDOG_MS=0
+
+  DHDCFLAGS += -DSAR_SUPPORT
 endif
 endif
 
diff --git a/drivers/net/wireless/bcmdhd/dhd_linux.c b/drivers/net/wireless/bcmdhd/dhd_linux.c
index 033971e0e243..095bf3d3b239 100644
--- a/drivers/net/wireless/bcmdhd/dhd_linux.c
+++ b/drivers/net/wireless/bcmdhd/dhd_linux.c
@@ -796,21 +796,40 @@ dhd_dev_priv_save(struct net_device * dev, dhd_info_t * dhd, dhd_if_t * ifp,
 	dev_priv->ifidx = ifidx;
 }
 #ifdef SAR_SUPPORT
-static int dhd_sar_callback(struct notifier_block *nfb, unsigned long action, void *ignored)
+static int dhd_sar_callback(struct notifier_block *nfb, unsigned long action, void *data)
 {
 	dhd_info_t *dhd = (dhd_info_t*)container_of(nfb, struct dhd_info, sar_notifier);
 	char iovbuf[32];
 	s32 sar_enable;
-	int ret = 0;
+	s32 txpower;
+	int ret;
 
-	/* '0' means activate sarlimit and '-1' means back to normal state (deactivate
-	 * sarlimit)
-	 */
-	sar_enable = action ? 0 : -1;
+	if (data) {
+		/* if data != NULL then we expect that the notifier passed
+		 * the exact value of max tx power in quarters of dB.
+		 * qtxpower variable allows us to overwrite TX power.
+		 */
+		txpower = *(s32*)data;
+		if (txpower == -1 || txpower > 127)
+			txpower = 127; /* Max val of 127 qdbm */
+
+		txpower |= WL_TXPWR_OVERRIDE;
+		txpower = htod32(txpower);
 
-	bcm_mkiovar("sar_enable", (char *)&sar_enable, 4, iovbuf, sizeof(iovbuf));
-	if ((ret = dhd_wl_ioctl_cmd(&dhd->pub, WLC_SET_VAR, iovbuf, sizeof(iovbuf), TRUE, 0)) < 0)
-		DHD_ERROR(("%s wl sar_enable %d failed %d\n", __FUNCTION__, sar_enable, ret));
+		bcm_mkiovar("qtxpower", (char *)&txpower, 4, iovbuf, sizeof(iovbuf));
+		if ((ret = dhd_wl_ioctl_cmd(&dhd->pub, WLC_SET_VAR,
+				iovbuf, sizeof(iovbuf), TRUE, 0)) < 0)
+			DHD_ERROR(("%s wl qtxpower failed %d\n", __FUNCTION__, ret));
+	} else {
+		/* '0' means activate sarlimit and '-1' means back to normal state (deactivate
+		 * sarlimit)
+		 */
+		sar_enable = action ? 0 : -1;
+
+		bcm_mkiovar("sar_enable", (char *)&sar_enable, 4, iovbuf, sizeof(iovbuf));
+		if ((ret = dhd_wl_ioctl_cmd(&dhd->pub, WLC_SET_VAR, iovbuf, sizeof(iovbuf), TRUE, 0)) < 0)
+			DHD_ERROR(("%s wl sar_enable %d failed %d\n", __FUNCTION__, sar_enable, ret));
+	}
 
 	return NOTIFY_DONE;
 }
-- 
2.0.3

