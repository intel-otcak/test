From 13403fe5726ebddd7dba07513f349cdd7c4290ed Mon Sep 17 00:00:00 2001
Message-Id: <13403fe5726ebddd7dba07513f349cdd7c4290ed.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: =?UTF-8?q?Fr=C3=A9d=C3=A9ric=20Dalleau?=
 <frederic.dalleau@linux.intel.com>
Date: Fri, 11 Apr 2014 15:00:29 +0200
Subject: [PATCH 041/312] STPK-1634: Fix freeze on fullscreen applications
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fullscreen application make use of dynamic pixel format switching.
The pixel format is changed during pageflip.
This patch add support for this feature on BYT.
At the time of writing this patch, the UFO in use in Starpeak is 2014.02.17.
The abt ww11 upmerge must be used to fix STPK-1634.

The haswell version is available at :
"drm/i915: Add support to change pixel format, tiling mode, tiling... "
http://lists.freedesktop.org/archives/intel-gfx/2013-September/033064.html

This is the original valleyview version :
"drm/i915: Add dynamic tile format support"
http://android.intel.com:8080/#/c/121673/

Some additional fixes worth a look:
"drm/i915: UI hang issue while HDMI monitor connected"
http://android.intel.com:8080/#/c/170701/
"drm/i915: Add support to change the pixel format"
http://android.intel.com:8080/#/c/116274/

The difference between haswell and valleyview is that Haswell uses
MI commands to set the pixel format where as ValleyView uses I915_WRITE.
Also hsw_update_plane is not called.

Issue: STPK-1634
Change-Id: I182a1f6ddff89a314e9d7ec924732e3933cecffc
Signed-off-by: Frédéric Dalleau <frederic.dalleau@linux.intel.com>
---
 drivers/gpu/drm/i915/intel_display.c |   71 +++++++++++++++++++++++++++++++++-
 1 file changed, 69 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 16ba224..0a3c6ee 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2800,6 +2800,57 @@ static int hsw_set_pixelformat(struct drm_crtc *crtc, u32 pixel_format)
 	return 0;
 }
 
+/* Set Pixel format for ValleyView */
+static int vlv_set_pixelformat(struct drm_crtc *crtc, u32 pixel_format)
+{
+	u32 dspcntr, reg;
+	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
+
+	reg = DSPCNTR(intel_crtc->pipe);
+	dspcntr = I915_READ(reg);
+	DRM_DEBUG_DRIVER("pixel format = %d\n", pixel_format);
+	/* Mask out pixel format bits in case we change it */
+	dspcntr &= ~DISPPLANE_PIXFORMAT_MASK;
+
+	switch (pixel_format) {
+	case DRM_FORMAT_C8:
+		dspcntr |= DISPPLANE_8BPP;
+		break;
+	case DRM_FORMAT_XRGB1555:
+	case DRM_FORMAT_ARGB1555:
+		dspcntr |= DISPPLANE_BGRX555;
+		break;
+	case DRM_FORMAT_RGB565:
+		dspcntr |= DISPPLANE_BGRX565;
+		break;
+	case DRM_FORMAT_XRGB8888:
+	case DRM_FORMAT_ARGB8888:
+		dspcntr |= DISPPLANE_BGRX888;
+		break;
+	case DRM_FORMAT_XBGR8888:
+	case DRM_FORMAT_ABGR8888:
+		dspcntr |= DISPPLANE_RGBX888;
+		break;
+	case DRM_FORMAT_XRGB2101010:
+	case DRM_FORMAT_ARGB2101010:
+		dspcntr |= DISPPLANE_BGRX101010;
+		break;
+	case DRM_FORMAT_XBGR2101010:
+	case DRM_FORMAT_ABGR2101010:
+		dspcntr |= DISPPLANE_RGBX101010;
+		break;
+	default:
+		DRM_ERROR("Unsupported pixel format 0x%08x\n", pixel_format);
+		return -EINVAL;
+	}
+
+	I915_WRITE(reg, dspcntr);
+	return 0;
+}
+
+
 /* This sets the params using MI commands */
 static int hsw_update_plane(struct drm_crtc *crtc,
 				struct drm_framebuffer *fb, int x, int y)
@@ -9941,7 +9992,7 @@ static int intel_crtc_page_flip(struct drm_crtc *crtc,
 
 	/* Can't change pixel format via MI display flips. */
 	if (fb->pixel_format != crtc->primary->fb->pixel_format) {
-		if (IS_HASWELL(dev))
+		if (IS_HASWELL(dev) || IS_VALLEYVIEW(dev))
 			DRM_DEBUG_DRIVER(" Allow dynamic pixel format\n");
 		else
 			return -EINVAL;
@@ -9951,7 +10002,7 @@ static int intel_crtc_page_flip(struct drm_crtc *crtc,
 	 * TILEOFF/LINOFF registers can't be changed via MI display flips.
 	 * Note that pitch changes could also affect these register.
 	 */
-	if ((IS_HASWELL(dev)) &&
+	if ((IS_HASWELL(dev) || IS_VALLEYVIEW(dev)) &&
 		((obj->tiling_mode !=
 		to_intel_framebuffer(crtc->primary->fb)->obj->tiling_mode) ||
 		(fb->offsets[0] != crtc->primary->fb->offsets[0]) ||
@@ -9960,8 +10011,12 @@ static int intel_crtc_page_flip(struct drm_crtc *crtc,
 				crtc->primary->fb->pitches[0], crtc->primary->fb->offsets[0]);
 			DRM_DEBUG_DRIVER(" input fb: pitch = %d offset = %d\n",
 				fb->pitches[0], fb->offsets[0]);
+		if (IS_HASWELL(dev)) {
 			if (hsw_update_plane(crtc, fb, 0, 0))
 				DRM_ERROR("Failed to update plane\n");
+		} else if (IS_VALLEYVIEW(dev)) {
+			DRM_DEBUG_DRIVER(" Allow dynamic pixel format\n");
+		}
 	}
 
 	if (INTEL_INFO(dev)->gen > 3 &&
@@ -10099,6 +10154,18 @@ static int intel_crtc_set_pixel_format(struct drm_crtc *crtc,
 		}
 
 		return hsw_set_pixelformat(crtc, fb->pixel_format);
+	} else if (IS_VALLEYVIEW(dev)) {
+
+		obj = to_intel_framebuffer(fb)->obj;
+		if (obj == NULL)
+			return -EINVAL;
+
+		if (list_empty(&obj->vma_list)) {
+			DRM_ERROR("empty list in object\n");
+			return -EINVAL;
+		}
+
+		return vlv_set_pixelformat(crtc, fb->pixel_format);
 	} else {
 		DRM_ERROR("Pixel format change not allowed.\n");
 		return -EINVAL;
-- 
1.7.9.5

