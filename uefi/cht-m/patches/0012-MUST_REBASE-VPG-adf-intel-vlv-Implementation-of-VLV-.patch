From 5bea566deeab32f3ab56ec8c3fd6b39794f8e153 Mon Sep 17 00:00:00 2001
Message-Id: <5bea566deeab32f3ab56ec8c3fd6b39794f8e153.1424979244.git.feitong.yi@intel.com>
In-Reply-To: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
References: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
From: Ramalingam C <ramalingam.c@intel.com>
Date: Thu, 5 Feb 2015 09:41:02 +0530
Subject: [PATCH 12/28] MUST_REBASE [VPG]: adf/intel/vlv: Implementation of
 VLV/CHV DSI DRRS

Implementation of the pll setting for VLV and CHV for all DRRS states.
These functions are registered with Generic DSI DRRS implementation

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5610
Change-Id: I253c48ae56fd139dff29cf47467f33493e16109f
Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
---
 .../adf/intel/core/common/dsi/intel_dsi_drrs.c     |    8 +
 drivers/video/adf/intel/core/vlv/Makefile          |    1 +
 drivers/video/adf/intel/core/vlv/vlv_dsi_drrs.c    |   27 +++
 drivers/video/adf/intel/core/vlv/vlv_dsi_pll.c     |  187 ++++++++++++++++++--
 .../intel/include/core/common/dsi/intel_dsi_drrs.h |    1 +
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |    3 +
 drivers/video/adf/intel/include/core/vlv/vlv_pll.h |    6 +
 7 files changed, 216 insertions(+), 17 deletions(-)
 create mode 100644 drivers/video/adf/intel/core/vlv/vlv_dsi_drrs.c

diff --git a/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c b/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c
index 6b75789..7cd55a0 100644
--- a/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c
+++ b/drivers/video/adf/intel/core/common/dsi/intel_dsi_drrs.c
@@ -271,6 +271,14 @@ int intel_dsi_drrs_init(struct intel_pipeline *pipeline)
 
 	adf_drrs->panel_mode.target_mode = NULL;
 
+	if (IS_VALLEYVIEW() || IS_CHERRYVIEW()) {
+		dsi_pipe->drrs.platform_ops = vlv_dsi_drrs_ops_init();
+	} else {
+		pr_err("ADF: %s: Unsupported platform\n", __func__);
+		ret = -EINVAL;
+		goto out_err;
+	}
+
 	if (!dsi_pipe->drrs.platform_ops) {
 		pr_err("ADF: %s: DSI platform ops not initialized\n", __func__);
 		ret = -EINVAL;
diff --git a/drivers/video/adf/intel/core/vlv/Makefile b/drivers/video/adf/intel/core/vlv/Makefile
index 35060bc..d559c50 100644
--- a/drivers/video/adf/intel/core/vlv/Makefile
+++ b/drivers/video/adf/intel/core/vlv/Makefile
@@ -8,6 +8,7 @@ obj-y := vlv_dc_config.o \
 	vlv_pipe.o \
 	vlv_pll.o \
 	vlv_dsi_pll.o \
+	vlv_dsi_drrs.o \
 	vlv_pm.o \
 	vlv_dsi_port.o \
 	vlv_dsi_port_cmd.o \
diff --git a/drivers/video/adf/intel/core/vlv/vlv_dsi_drrs.c b/drivers/video/adf/intel/core/vlv/vlv_dsi_drrs.c
new file mode 100644
index 0000000..e7d5bb2
--- /dev/null
+++ b/drivers/video/adf/intel/core/vlv/vlv_dsi_drrs.c
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2015, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Author:
+ * Ramalingam C <ramalingam.c@intel.com>
+ */
+
+#include <core/common/dsi/intel_dsi_drrs.h>
+
+struct drrs_dsi_platform_ops vlv_dsi_drrs_ops = {
+	.configure_dsi_pll = vlv_drrs_configure_dsi_pll,
+	.mnp_calculate_for_pclk	= vlv_dsi_mnp_calculate_for_pclk,
+};
+
+inline struct drrs_dsi_platform_ops *vlv_dsi_drrs_ops_init(void)
+{
+	return &vlv_dsi_drrs_ops;
+}
diff --git a/drivers/video/adf/intel/core/vlv/vlv_dsi_pll.c b/drivers/video/adf/intel/core/vlv/vlv_dsi_pll.c
index d6fd032..001464d 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_dsi_pll.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_dsi_pll.c
@@ -26,7 +26,7 @@
 #define DSI_HFP_PACKET_EXTRA_SIZE	6
 #define DSI_EOTP_PACKET_SIZE		4
 
-
+#define DSI_DRRS_PLL_CONFIG_TIMEOUT_MS	100
 
 static const u32 lfsr_converts[] = {
 	426, 469, 234, 373, 442, 221, 110, 311, 411,		/* 62 - 70 */
@@ -207,6 +207,174 @@ u32 chv_dsi_pll_calc_mnp(struct vlv_pll *pll, u32 dsi_clk,
 }
 
 /*
+ * vlv_dsi_pll_reg_configure:
+ *	Function to configure the CCK registers for PLL control and dividers
+ *
+ * pll		: Pll that is getting configure
+ * dsi_mnp	: Struct with divider values
+ * pll_enable	: Flag to indicate whether it is a fresh pll enable call or
+ *		  call on DRRS purpose
+ */
+static void vlv_dsi_pll_reg_configure(struct vlv_pll *pll,
+				struct dsi_mnp *dsi_mnp, bool pll_enable)
+{
+	struct dsi_config *intel_dsi = pll->config;
+	struct dsi_context *dsi_ctx = &intel_dsi->ctx;
+
+	if (pll_enable) {
+		vlv_cck_write(CCK_REG_DSI_PLL_CONTROL, 0);
+
+		/* Enable DSI0 pll for DSI Port A & DSI Dual link*/
+		if (dsi_ctx->ports & (1 << PORT_A))
+			dsi_mnp->dsi_pll_ctrl |= DSI_PLL_CLK_GATE_DSI0_DSIPLL;
+
+		/* Enable DSI1 pll for DSI Port C & DSI Dual link*/
+		else if (dsi_ctx->ports & (1 << PORT_C))
+			dsi_mnp->dsi_pll_ctrl |= DSI_PLL_CLK_GATE_DSI1_DSIPLL;
+	} else {
+
+		/*
+		 * Updating the M1, N1, P1 div values alone on the
+		 * CCK registers. these new values are abstracted from
+		 * the dsi_mnp struction
+		 */
+		dsi_mnp->dsi_pll_ctrl =
+			(dsi_mnp->dsi_pll_ctrl & DSI_PLL_P1_POST_DIV_MASK) |
+			(vlv_cck_read(CCK_REG_DSI_PLL_CONTROL) &
+			~DSI_PLL_P1_POST_DIV_MASK);
+		dsi_mnp->dsi_pll_div = (dsi_mnp->dsi_pll_div &
+			(DSI_PLL_M1_DIV_MASK | DSI_PLL_N1_DIV_MASK)) |
+			(vlv_cck_read(CCK_REG_DSI_PLL_DIVIDER)
+			& ~(DSI_PLL_M1_DIV_MASK | DSI_PLL_N1_DIV_MASK));
+	}
+
+	pr_debug("ADF: %s: dsi_pll: div %08x, ctrl %08x\n", __func__,
+				dsi_mnp->dsi_pll_div, dsi_mnp->dsi_pll_ctrl);
+
+	vlv_cck_write(CCK_REG_DSI_PLL_DIVIDER, dsi_mnp->dsi_pll_div);
+	vlv_cck_write(CCK_REG_DSI_PLL_CONTROL, dsi_mnp->dsi_pll_ctrl);
+
+	return;
+}
+
+/*
+ * vlv_drrs_configure_dsi_pll:
+ *	Function to configure the PLL dividers and bring the new values
+ * into effect by power cycling the VCO. This power cycle is supposed
+ * to be completed within the vblank period. This is software implementation
+ * and depends on the CCK register access. Needs to be tested thoroughly.
+ *
+ * pipeline	: target pipeline
+ * dsi_mnp	: struct with pll divider values
+ */
+int vlv_drrs_configure_dsi_pll(struct intel_pipeline *pipeline,
+						struct dsi_mnp *dsi_mnp)
+{
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct vlv_pll *pll = &vlv_pipeline->pll;
+	u32 dsl_offset = PIPEDSL(pll->config->pipe), dsl, dsl_end;
+	u32 vactive, vtotal, vblank, vblank_30_percent, vblank_70_percent;
+	unsigned long timeout;
+
+	vlv_dsi_pll_reg_configure(pll, dsi_mnp, false);
+
+	pr_debug("ADF: %s: dsi_mnp:: ctrl: 0x%X, div: 0x%X\n", __func__,
+				dsi_mnp->dsi_pll_ctrl, dsi_mnp->dsi_pll_div);
+
+	dsi_mnp->dsi_pll_ctrl &= (~DSI_PLL_VCO_EN);
+
+	vtotal = REG_READ(VTOTAL(pll->config->pipe));
+	vactive = (vtotal & VERTICAL_ACTIVE_DISPLAY_MASK);
+	vtotal = (vtotal & VERTICAL_TOTAL_DISPLAY_MASK) >>
+					VERTICAL_TOTAL_DISPLAY_OFFSET;
+	vblank = vtotal - vactive;
+	vblank_30_percent = vactive + DIV_ROUND_UP((vblank * 3), 10);
+	vblank_70_percent = vactive + DIV_ROUND_UP((vblank * 7), 10);
+
+	timeout = jiffies + msecs_to_jiffies(DSI_DRRS_PLL_CONFIG_TIMEOUT_MS);
+
+tap_vblank_start:
+	do {
+		if (time_after(jiffies, timeout)) {
+			pr_err("ADF: %s: Timeout at waiting for Vblank\n",
+								__func__);
+			return -ETIMEDOUT;
+		}
+
+		dsl = (REG_READ(dsl_offset) & DSL_LINEMASK_GEN3);
+
+	} while (dsl <= vactive || dsl > vblank_30_percent);
+
+	vlv_cck_mutex_acquire(true);
+
+	dsl_end = REG_READ(dsl_offset) & DSL_LINEMASK_GEN3;
+
+	/*
+	 * Did we cross Vblank due to delay in mutex acquirement?
+	 * Keeping two scanlines in vblank as buffer for ops.
+	 */
+	if (dsl_end < vactive || dsl_end > vblank_70_percent) {
+		vlv_cck_mutex_acquire(false);
+		goto tap_vblank_start;
+	}
+
+	/* Toggle the VCO_EN to bring in the new dividers values */
+	vlv_cck_write_no_lock(CCK_REG_DSI_PLL_CONTROL, dsi_mnp->dsi_pll_ctrl);
+	dsi_mnp->dsi_pll_ctrl |= DSI_PLL_VCO_EN;
+	vlv_cck_write_no_lock(CCK_REG_DSI_PLL_CONTROL, dsi_mnp->dsi_pll_ctrl);
+
+	dsl_end = REG_READ(dsl_offset) & DSL_LINEMASK_GEN3;
+
+	vlv_cck_mutex_acquire(false);
+
+	if (wait_for(REG_READ(PIPECONF(pll->config->pipe)) &
+					PIPECONF_DSI_PLL_LOCKED, 20)) {
+		pr_err("ADF: %s: DSI PLL lock failed\n", __func__);
+		return -1;
+	}
+
+	pr_debug("ADF: %s: PLL Changed between DSL: %u, %u\n", __func__, dsl,
+								dsl_end);
+	pr_debug("ADF: %s: DSI PLL locked\n", __func__);
+	return 0;
+}
+
+/*
+ * vlv_dsi_mnp_calculate_for_pclk:
+ *	calculates the dsi_mnp values for a given pclk
+ *
+ * pipeline	: Target pipeline
+ * dsi_mnp	: output struct to store divider values
+ * pclk		: Input mode clock
+ */
+int vlv_dsi_mnp_calculate_for_pclk(struct intel_pipeline *pipeline,
+				struct dsi_mnp *dsi_mnp, unsigned int pclk)
+{
+	struct vlv_pipeline *vlv_pipeline = to_vlv_pipeline(pipeline);
+	struct vlv_pll *pll = &vlv_pipeline->pll;
+	struct dsi_config *intel_dsi = pll->config;
+	u32 dsi_clk, ret;
+
+	dsi_clk = vlv_dsi_pll_clk_from_pclk(pclk,
+		intel_dsi->ctx.pixel_format, intel_dsi->ctx.lane_count);
+
+	pr_debug("ADF: %s: pclk: %u, dsi_clk: %u\n", __func__, pclk, dsi_clk);
+
+	if (IS_CHERRYVIEW())
+		ret = chv_dsi_pll_calc_mnp(pll, dsi_clk, dsi_mnp);
+	else
+		ret = vlv_dsi_pll_calc_mnp(pll, dsi_clk, dsi_mnp);
+
+	if (ret)
+		pr_info("ADF: %s: dsi_calc_mnp failed\n", __func__);
+	else
+		pr_debug("ADF: %s: dsi_mnp: ctrl : 0x%X, div : 0x%X\n",
+					__func__, dsi_mnp->dsi_pll_ctrl,
+							dsi_mnp->dsi_pll_div);
+	return ret;
+}
+
+/*
  * XXX: The muxing and gating is hard coded for now. Need to add support for
  * sharing PLLs with two DSI outputs.
  */
@@ -214,7 +382,6 @@ static void vlv_dsi_pll_configure(struct vlv_pll *pll)
 {
 	u32 ret;
 	struct dsi_config *intel_dsi = pll->config;
-	struct dsi_context *dsi_ctx = &intel_dsi->ctx;
 	struct dsi_mnp dsi_mnp;
 	u32 dsi_clk;
 
@@ -231,21 +398,7 @@ static void vlv_dsi_pll_configure(struct vlv_pll *pll)
 		return;
 	}
 
-	/* Enable DSI0 pll for DSI Port A & DSI Dual link */
-	if (dsi_ctx->ports & (1 << PORT_A))
-		dsi_mnp.dsi_pll_ctrl |= DSI_PLL_CLK_GATE_DSI0_DSIPLL;
-
-	/* Enable DSI1 pll for DSI Port C & DSI Dual link */
-	if (dsi_ctx->ports & (1 << PORT_C))
-		dsi_mnp.dsi_pll_ctrl |= DSI_PLL_CLK_GATE_DSI1_DSIPLL;
-
-	pr_info("dsi pll div %08x, ctrl %08x\n",
-			dsi_mnp.dsi_pll_div, dsi_mnp.dsi_pll_ctrl);
-
-	vlv_cck_write(CCK_REG_DSI_PLL_CONTROL, 0);
-	vlv_cck_write(CCK_REG_DSI_PLL_DIVIDER, dsi_mnp.dsi_pll_div);
-	vlv_cck_write(CCK_REG_DSI_PLL_CONTROL, dsi_mnp.dsi_pll_ctrl);
-
+	vlv_dsi_pll_reg_configure(pll, &dsi_mnp, true);
 	return;
 }
 
diff --git a/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h b/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h
index c4876ae..d97de25 100644
--- a/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h
+++ b/drivers/video/adf/intel/include/core/common/dsi/intel_dsi_drrs.h
@@ -56,5 +56,6 @@ struct dsi_drrs {
 
 
 extern inline struct drrs_encoder_ops *intel_drrs_dsi_encoder_ops_init(void);
+extern inline struct drrs_dsi_platform_ops *vlv_dsi_drrs_ops_init(void);
 
 #endif /* INTEL_DSI_DRRS_H */
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index a0d479e..9fbc0ef 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -2232,6 +2232,9 @@ extern int chv_cursor_offsets[];
 #define BCLRPAT(pipe) _TRANSCODER2(pipe, _BCLRPAT_A)
 #define VSYNCSHIFT(trans) _TRANSCODER2(trans, _VSYNCSHIFT_A)
 
+#define VERTICAL_ACTIVE_DISPLAY_MASK		(0xfff)
+#define VERTICAL_TOTAL_DISPLAY_OFFSET		16
+#define VERTICAL_TOTAL_DISPLAY_MASK		(0xfff<<16)
 /* HSW+ eDP PSR registers */
 #define EDP_PSR_BASE(dev)                       (IS_HASWELL(dev) ? 0x64800 : 0x6f800)
 #define EDP_PSR_CTL(dev)			(EDP_PSR_BASE(dev) + 0)
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pll.h b/drivers/video/adf/intel/include/core/vlv/vlv_pll.h
index 1313a01..d56736b 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pll.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pll.h
@@ -78,4 +78,10 @@ u32 vlv_pll_dpms(struct vlv_pll *pll, u8 dpms_state);
 
 bool calc_clock_timings(u32 target, struct intel_clock *best_clock);
 bool get_best_hdmi_pll(int target, struct intel_clock *best_clock);
+
+/* DRRS Related */
+int vlv_dsi_mnp_calculate_for_pclk(struct intel_pipeline *pipeline,
+		struct dsi_mnp *dsi_mnp, unsigned int pclk);
+int vlv_drrs_configure_dsi_pll(struct intel_pipeline *pipeline,
+		struct dsi_mnp *dsi_mnp);
 #endif /*_VLV_PLL_H_*/
-- 
1.7.9.5

