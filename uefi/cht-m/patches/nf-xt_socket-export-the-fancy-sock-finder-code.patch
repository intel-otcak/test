From 05a5288143114b25a1f2da1338925f4afeb31546 Mon Sep 17 00:00:00 2001
Message-Id: <05a5288143114b25a1f2da1338925f4afeb31546.1398812351.git.mark.gross@intel.com>
In-Reply-To: <e87e3533536ae5eec0e06ceb7ef7428e42855790.1398812350.git.mark.gross@intel.com>
References: <e87e3533536ae5eec0e06ceb7ef7428e42855790.1398812350.git.mark.gross@intel.com>
From: JP Abgrall <jpa@google.com>
Date: Wed, 15 Jun 2011 16:52:40 -0700
Subject: [PATCH 055/429] nf: xt_socket: export the fancy sock finder code

The socket matching function has some nifty logic to get the struct sock
from the skb or from the connection tracker.
We export this so other xt_* can use it, similarly to ho how
xt_socket uses nf_tproxy_get_sock.

Change-Id: I11c58f59087e7f7ae09e4abd4b937cd3370fa2fd
Signed-off-by: JP Abgrall <jpa@google.com>

Conflicts:
	include/uapi/linux/netfilter/xt_socket.h
	net/netfilter/xt_socket.c

Updated: I made non-trivial changes in original patch in order to port it.

Signed-off-by: Tushar Dave <tushar.n.dave@intel.com>
---
 include/uapi/linux/netfilter/xt_socket.h |    1 +
 net/netfilter/xt_socket.c                |    2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

--- linux.orig/include/uapi/linux/netfilter/xt_socket.h
+++ linux/include/uapi/linux/netfilter/xt_socket.h
@@ -18,6 +18,7 @@ struct xt_socket_mtinfo2 {
 };
 #define XT_SOCKET_FLAGS_V2 (XT_SOCKET_TRANSPARENT | XT_SOCKET_NOWILDCARD)
 
+void xt_socket_put_sk(struct sock *sk);
 struct sock *xt_socket_get4_sk(const struct sk_buff *skb,
 			       struct xt_action_param *par);
 struct sock *xt_socket_get6_sk(const struct sk_buff *skb,
--- linux.orig/net/netfilter/xt_socket.c
+++ linux/net/netfilter/xt_socket.c
@@ -206,7 +206,7 @@ socket_match(const struct sk_buff *skb,
 
 	sk = xt_socket_get4_sk(skb, par);
 
-	if (sk) {
+	if (sk != NULL) {
 		bool wildcard;
 		bool transparent = true;
 
