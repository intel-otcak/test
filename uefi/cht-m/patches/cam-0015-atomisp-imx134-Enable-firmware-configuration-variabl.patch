From f87a8c03e9e0c7f5c8954964eff7494bf230a804 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Thu, 1 May 2014 15:23:53 -0700
Subject: [PATCH 015/117] atomisp/imx134: Enable firmware configuration
 variables

Use the new gmin configuration API to query status that used to be
either hard-coded or stored in a MCG platform data struct:

+ IMX hardware subtype
+ atomisp camera type (RAW vs. SOC)
+ MIPI-CSI port and lane configuration
+ MIPI-CSI pixel format
+ Bayer color component order

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 arch/x86/platform/intel-mid/platform_imx134.c      | 35 ++++++++++++++++++++--
 .../camera/drivers/media/i2c/imx/imx.c             | 26 ++++++++++++----
 2 files changed, 53 insertions(+), 8 deletions(-)

diff --git a/arch/x86/platform/intel-mid/platform_imx134.c b/arch/x86/platform/intel-mid/platform_imx134.c
index ad5bc6a..1c0802d 100644
--- a/arch/x86/platform/intel-mid/platform_imx134.c
+++ b/arch/x86/platform/intel-mid/platform_imx134.c
@@ -12,6 +12,7 @@
 #include <linux/gpio.h>
 #include <linux/delay.h>
 #include <linux/i2c.h>
+#include <linux/acpi.h>
 #include <linux/atomisp_platform.h>
 #include <linux/regulator/consumer.h>
 #include <asm/intel-mid.h>
@@ -346,11 +347,39 @@ static int imx134_power_ctrl(struct v4l2_subdev *sd, int flag)
 	return ret;
 }
 
+static int getvar_int(struct device *dev, const char *var, int def)
+{
+	char val[16];
+	size_t len = sizeof(val);
+	long result;
+	int ret;
+
+	ret = gmin_get_config_var(dev, var, val, &len);
+	val[len] = 0;
+	if (!ret)
+		ret = kstrtol(val, 0, &result);
+
+	return ret ? def : result;
+}
+
 static int imx134_csi_configure(struct v4l2_subdev *sd, int flag)
 {
-	static const int LANES = 4;
-	return camera_sensor_csi(sd, ATOMISP_CAMERA_PORT_PRIMARY, LANES,
-		ATOMISP_INPUT_FORMAT_RAW_10, atomisp_bayer_order_rggb, flag);
+	/* Default from legacy platform w/o firmware config */
+	int port = ATOMISP_CAMERA_PORT_PRIMARY;
+	int lanes = 4;
+	int format = ATOMISP_INPUT_FORMAT_RAW_10;
+	int bayer = atomisp_bayer_order_rggb;
+
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	if (client && ACPI_COMPANION(&client->dev)) {
+		struct device *dev = &client->dev;
+		port = getvar_int(dev, "CsiPort", port);
+		lanes = getvar_int(dev, "CsiLanes", lanes);
+		format = getvar_int(dev, "CsiFmt", format);
+		bayer = getvar_int(dev, "CsiBayer", bayer);
+	}
+
+	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
 }
 
 #ifdef CONFIG_CRYSTAL_COVE
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
index 312d5784..a89cf9f 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
@@ -2228,6 +2228,21 @@ static int __imx_init_ctrl_handler(struct imx_device *dev)
 	return 0;
 }
 
+static int getvar_int(struct device *dev, const char *var, int def)
+{
+	char val[16];
+	size_t len = sizeof(val);
+	long result;
+	int ret;
+
+	ret = gmin_get_config_var(dev, var, val, &len);
+	val[len] = 0;
+	if (!ret)
+		ret = kstrtol(val, 0, &result);
+
+	return ret ? def : result;
+}
+
 static int imx_probe(struct i2c_client *client,
 			 const struct i2c_device_id *id)
 {
@@ -2253,10 +2268,7 @@ static int imx_probe(struct i2c_client *client,
 	if (id) {
 		dev->i2c_id = id->driver_data;
 	} else {
-		/* FIXME: ACPI-probed devices don't get this, need to find a
-		 * different mechanism. */
-		dev_info(&client->dev, "No i2c_device_id, defaulting to IMX134\n");
-		dev->i2c_id = IMX134_ID;
+		dev->i2c_id = getvar_int(&client->dev, "ImxId", IMX134_ID);
 	}
 	dev->fmt_idx = 0;
 	dev->sensor_id = IMX_ID_DEFAULT;
@@ -2325,7 +2337,11 @@ static int imx_probe(struct i2c_client *client,
 	 * subdevices, but this API matches upstream better. */
 	/* FIXME: type and port need to come from ACPI/EFI config,
 	 * this is hard coded to FFRD8 */
-	ret = atomisp_register_i2c_module(client, RAW_CAMERA, ATOMISP_CAMERA_PORT_PRIMARY);
+	ret = atomisp_register_i2c_module(client,
+					  getvar_int(&client->dev, "CamType",
+						     RAW_CAMERA),
+					  getvar_int(&client->dev, "CsiPort",
+						     ATOMISP_CAMERA_PORT_PRIMARY));
 	if (ret) {
 		imx_remove(client);
 		return ret;
-- 
1.9.3

