From eb0aca8d9cf46a5c9dd0bee69d16ed0993e8265d Mon Sep 17 00:00:00 2001
From: Konrad Leszczynski <konrad.leszczynski@intel.com>
Date: Mon, 7 Dec 2015 10:50:16 +0000
Subject: [PATCH 11/13] usb: core: output error message when an unusual device
 is plugged in

This patch creates and output error message on the serial port
when an unusual device (except hub/bulk only msd/keyboard/mouse)
is plugged in.

Change-Id: Ie08d6ff90d9a7bf6587a6039ee2c412a9ef514f1
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-12669
Signed-off-by: Konrad Leszczynski <konrad.leszczynski@intel.com>
Reviewed-on: https://android.intel.com:443/445021
---
 drivers/usb/core/otg_whitelist.h | 22 ++++++++++++++++++----
 drivers/usb/core/quirks.c        |  2 +-
 drivers/usb/core/usb.h           |  2 ++
 include/uapi/linux/usb/cdc.h     |  1 +
 4 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/drivers/usb/core/otg_whitelist.h b/drivers/usb/core/otg_whitelist.h
index e8cdce5..144562e 100644
--- a/drivers/usb/core/otg_whitelist.h
+++ b/drivers/usb/core/otg_whitelist.h
@@ -16,11 +16,25 @@
  * YOU _SHOULD_ CHANGE THIS LIST TO MATCH YOUR PRODUCT AND ITS TESTING!
  */
 
+#include <linux/usb/storage.h>
+#include <linux/usb/cdc.h>
+
 static struct usb_device_id whitelist_table [] = {
 
 /* hubs are optional in OTG, but very handy ... */
 { USB_DEVICE_INFO(USB_CLASS_HUB, 0, 0), },
 { USB_DEVICE_INFO(USB_CLASS_HUB, 0, 1), },
+{ USB_DEVICE_INFO(USB_CLASS_HUB, 0, 2), },
+{ USB_DEVICE_INFO(USB_CLASS_HUB, 0, 3), },
+{ USB_INTERFACE_INFO(USB_CLASS_MASS_STORAGE, USB_SC_SCSI, USB_PR_BULK), },
+{ USB_INTERFACE_INFO(USB_CLASS_CDC_DATA, USB_CDC_SUBCLASS_NONE,
+	USB_CDC_PROTO_NONE), },
+{ USB_INTERFACE_INFO(USB_CLASS_CDC_DATA, USB_CDC_SUBCLASS_NONE,
+	USB_CDC_ACM_PROTO_AT_V25TER), },
+{ USB_INTERFACE_INFO(USB_CLASS_COMM, USB_CDC_SUBCLASS_ACM, 0), },
+{ USB_INTERFACE_INFO(USB_CLASS_COMM, USB_CDC_SUBCLASS_NCM, 0), },
+{ USB_INTERFACE_INFO(USB_CLASS_HID, 1, 1), },
+{ USB_INTERFACE_INFO(USB_CLASS_HID, 1, 2), },
 
 #ifdef	CONFIG_USB_PRINTER		/* ignoring nonstatic linkage! */
 /* FIXME actually, printers are NOT supposed to use device classes;
@@ -50,10 +64,6 @@ static int is_targeted(struct usb_device *dev)
 {
 	struct usb_device_id	*id = whitelist_table;
 
-	/* possible in developer configs only! */
-	if (!dev->bus->otg_port)
-		return 1;
-
 	/* HNP test device is _never_ targeted (see OTG spec 6.6.6) */
 	if ((le16_to_cpu(dev->descriptor.idVendor) == 0x1a0a &&
 	     le16_to_cpu(dev->descriptor.idProduct) == 0xbadd))
@@ -93,6 +103,10 @@ static int is_targeted(struct usb_device *dev)
 		    (id->bDeviceProtocol != dev->descriptor.bDeviceProtocol))
 			continue;
 
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_INT_INFO) &&
+		    !usb_match_any_interface(dev, id))
+			continue;
+
 		return 1;
 	}
 
diff --git a/drivers/usb/core/quirks.c b/drivers/usb/core/quirks.c
index c7ef069..44ee4e7 100644
--- a/drivers/usb/core/quirks.c
+++ b/drivers/usb/core/quirks.c
@@ -211,7 +211,7 @@ static const struct usb_device_id usb_amd_resume_quirk_list[] = {
 	{ }  /* terminating entry must be last */
 };
 
-static bool usb_match_any_interface(struct usb_device *udev,
+bool usb_match_any_interface(struct usb_device *udev,
 				    const struct usb_device_id *id)
 {
 	unsigned int i;
diff --git a/drivers/usb/core/usb.h b/drivers/usb/core/usb.h
index 7e35e51..2f2dad9 100644
--- a/drivers/usb/core/usb.h
+++ b/drivers/usb/core/usb.h
@@ -27,6 +27,8 @@ extern void usb_release_interface_cache(struct kref *ref);
 extern void usb_disable_device(struct usb_device *dev, int skip_ep0);
 extern int usb_deauthorize_device(struct usb_device *);
 extern int usb_authorize_device(struct usb_device *);
+extern bool usb_match_any_interface(struct usb_device *udev,
+		const struct usb_device_id *id);
 extern void usb_detect_quirks(struct usb_device *udev);
 extern void usb_detect_interface_quirks(struct usb_device *udev);
 extern int usb_remove_device(struct usb_device *udev);
diff --git a/include/uapi/linux/usb/cdc.h b/include/uapi/linux/usb/cdc.h
index f35aa0a..4162941 100644
--- a/include/uapi/linux/usb/cdc.h
+++ b/include/uapi/linux/usb/cdc.h
@@ -11,6 +11,7 @@
 
 #include <linux/types.h>
 
+#define USB_CDC_SUBCLASS_NONE			0x00
 #define USB_CDC_SUBCLASS_ACM			0x02
 #define USB_CDC_SUBCLASS_ETHERNET		0x06
 #define USB_CDC_SUBCLASS_WHCM			0x08
-- 
1.9.1

