From d5aaea4607a840c25d758fdf10b3b6ebc2ea4f5a Mon Sep 17 00:00:00 2001
From: ysiyer <yegnesh.s.iyer@intel.com>
Date: Tue, 9 Dec 2014 15:15:24 +0530
Subject: [PATCH 1/2] ACPI: Adding support for Xpower pmic opregion

This change adds the support for Xpower pmic opregion.

Change-Id: I5669ee53c2d895ffc6223f421a969489d607e033
Signed-off-by: Lu, Aaron <aaron.lu@intel.com>
Signed-off-by: ysiyer <yegnesh.s.iyer@intel.com>
---
 drivers/acpi/Kconfig                               |   7 +
 drivers/acpi/Makefile                              |   1 +
 .../pmic_opregion/intel_soc_pmic_dc_opregion.c     | 311 +++++++++++++++++++++
 drivers/mfd/intel_soc_pmic_dc.c                    |   3 +
 4 files changed, 322 insertions(+)
 create mode 100644 drivers/acpi/pmic_opregion/intel_soc_pmic_dc_opregion.c

diff --git a/drivers/acpi/Kconfig b/drivers/acpi/Kconfig
index 82cc294..d003807 100644
--- a/drivers/acpi/Kconfig
+++ b/drivers/acpi/Kconfig
@@ -409,6 +409,13 @@ config WC_PMIC_OPREGION
 	depends on INTEL_SOC_PMIC
 	help
 	  This config adds ACPI operation region support for WhiskeyCove PMIC.
+
+config DC_PMIC_OPREGION
+	bool "ACPI operation region support for Dollar Cove PMIC"
+	depends on INTEL_SOC_PMIC
+	help
+	  This config adds ACPI operation region support for DollarCove PMIC.
+
 endif
 
 endif	# ACPI
diff --git a/drivers/acpi/Makefile b/drivers/acpi/Makefile
index 72a8791..cc07746 100644
--- a/drivers/acpi/Makefile
+++ b/drivers/acpi/Makefile
@@ -90,4 +90,5 @@ obj-$(CONFIG_ACPI_EXTLOG)	+= acpi_extlog.o
 obj-$(CONFIG_PMIC_OPREGION)	+= pmic_opregion/intel_soc_pmic_opregion.o
 obj-$(CONFIG_CRC_PMIC_OPREGION) += pmic_opregion/intel_soc_pmic_crc_opregion.o
 obj-$(CONFIG_WC_PMIC_OPREGION) += pmic_opregion/intel_soc_pmic_wc_opregion.o
+obj-$(CONFIG_DC_PMIC_OPREGION) += pmic_opregion/intel_soc_pmic_dc_opregion.o
 
diff --git a/drivers/acpi/pmic_opregion/intel_soc_pmic_dc_opregion.c b/drivers/acpi/pmic_opregion/intel_soc_pmic_dc_opregion.c
new file mode 100644
index 0000000..c4f54ca
--- /dev/null
+++ b/drivers/acpi/pmic_opregion/intel_soc_pmic_dc_opregion.c
@@ -0,0 +1,311 @@
+/*
+ * intel_pmic_xpower.c - XPower AXP288 PMIC operation region driver
+ *
+ * Copyright (C) 2014 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/acpi.h>
+#include <linux/platform_device.h>
+#include <linux/iio/consumer.h>
+#include <linux/mfd/intel_soc_pmic.h>
+#include "intel_soc_pmic_opregion.h"
+
+#define DRV_NAME "dollar_cove_region"
+
+#define XPOWER_PMICTEMP_LOW	0x57
+#define XPOWER_BATTEMP_LOW	0x59
+#define XPOWER_GPADC_LOW	0x5b
+
+static struct pmic_pwr_table pwr_table[] = {
+	{
+		.address = 0x00,
+		.pwr_reg = {
+			.reg = 0x13,
+			.bit = 0x05,
+		},
+	},
+	{
+		.address = 0x04,
+		.pwr_reg = {
+			.reg = 0x13,
+			.bit = 0x06,
+		},
+	},
+	{
+		.address = 0x08,
+		.pwr_reg = {
+			.reg = 0x13,
+			.bit = 0x07,
+		},
+	},
+	{
+		.address = 0x0c,
+		.pwr_reg = {
+			.reg = 0x12,
+			.bit = 0x03,
+		},
+	},
+	{
+		.address = 0x10,
+		.pwr_reg = {
+			.reg = 0x12,
+			.bit = 0x04,
+		},
+	},
+	{
+		.address = 0x14,
+		.pwr_reg = {
+			.reg = 0x12,
+			.bit = 0x05,
+		},
+	},
+	{
+		.address = 0x18,
+		.pwr_reg = {
+			.reg = 0x12,
+			.bit = 0x06,
+		},
+	},
+	{
+		.address = 0x1c,
+		.pwr_reg = {
+			.reg = 0x12,
+			.bit = 0x00,
+		},
+	},
+	{
+		.address = 0x20,
+		.pwr_reg = {
+			.reg = 0x12,
+			.bit = 0x01,
+		},
+	},
+	{
+		.address = 0x24,
+		.pwr_reg = {
+			.reg = 0x12,
+			.bit = 0x02,
+		},
+	},
+	{
+		.address = 0x28,
+		.pwr_reg = {
+			.reg = 0x13,
+			.bit = 0x02,
+		},
+	},
+	{
+		.address = 0x2c,
+		.pwr_reg = {
+			.reg = 0x13,
+			.bit = 0x03,
+		},
+	},
+	{
+		.address = 0x30,
+		.pwr_reg = {
+			.reg = 0x13,
+			.bit = 0x04,
+		},
+	},
+	{
+		.address = 0x38,
+		.pwr_reg = {
+			.reg = 0x10,
+			.bit = 0x03,
+		},
+	},
+	{
+		.address = 0x3c,
+		.pwr_reg = {
+			.reg = 0x10,
+			.bit = 0x06,
+		},
+	},
+	{
+		.address = 0x40,
+		.pwr_reg = {
+			.reg = 0x10,
+			.bit = 0x05,
+		},
+	},
+	{
+		.address = 0x44,
+		.pwr_reg = {
+			.reg = 0x10,
+			.bit = 0x04,
+		},
+	},
+	{
+		.address = 0x48,
+		.pwr_reg = {
+			.reg = 0x10,
+			.bit = 0x01,
+		},
+	},
+	{
+		.address = 0x4c,
+		.pwr_reg = {
+			.reg = 0x10,
+			.bit = 0x00
+		},
+	},
+};
+
+static struct pmic_dptf_table dptf_table[] = {
+	{
+		.address = 0x00,
+		.reg = XPOWER_GPADC_LOW
+	},
+	{
+		.address = 0x0c,
+		.reg = XPOWER_GPADC_LOW
+	},
+	{
+		.address = 0x18,
+		.reg = XPOWER_GPADC_LOW
+	}, /* TMP2 -> SYSTEMP */
+	{
+		.address = 0x24,
+		.reg = XPOWER_BATTEMP_LOW
+	}, /* TMP3 -> BATTEMP */
+	{
+		.address = 0x30,
+		.reg = XPOWER_GPADC_LOW
+	},
+	{
+		.address = 0x3c,
+		.reg = XPOWER_PMICTEMP_LOW
+	}, /* TMP5 -> PMICTEMP */
+};
+
+static int intel_xpower_pmic_get_power(struct pmic_pwr_reg *preg, u64 *value)
+{
+	int ret;
+	u8 data;
+
+	ret = intel_soc_pmic_readb(preg->reg);
+
+	if (ret < 0)
+		return -EIO;
+
+	data = (u8)ret;
+	*value = (data & BIT(preg->bit)) ? 1 : 0;
+	return 0;
+}
+
+static int intel_xpower_pmic_update_power(struct pmic_pwr_reg *preg, bool on)
+{
+	int ret;
+	u8 data;
+
+	ret = intel_soc_pmic_readb(preg->reg);
+	if (ret < 0)
+		return -EIO;
+
+	data = (u8)ret;
+	if (on)
+		data |= BIT(preg->bit);
+	else
+		data &= ~BIT(preg->bit);
+
+	ret = intel_soc_pmic_writeb(preg->reg, data);
+	if (ret < 0)
+		return -EIO;
+
+	return 0;
+}
+
+/**
+ * intel_xpower_pmic_get_raw_temp(): Get raw temperature reading from the PMIC
+ *
+ * @reg: register to get the reading
+ *
+ * We could get the sensor value by manipulating the HW regs here, but since
+ * the axp288 IIO driver may also access the same regs at the same time, the
+ * APIs provided by IIO subsystem are used here instead to avoid problems. As
+ * a result, the two passed in params are of no actual use.
+ *
+ * Return a positive value on success, errno on failure.
+ */
+static int intel_xpower_pmic_get_raw_temp(int reg)
+{
+	struct iio_channel *gpadc_chan;
+	int ret, val;
+	char *channel_name = NULL;
+
+	if (reg == XPOWER_GPADC_LOW)
+		channel_name = "SYSTEMP0";
+	else if (reg == XPOWER_BATTEMP_LOW)
+		channel_name = "BATTEMP";
+	else if (reg == XPOWER_PMICTEMP_LOW)
+		channel_name = "PMICTEMP";
+
+	if (channel_name == NULL)
+		return -EINVAL;
+
+	gpadc_chan = iio_channel_get(NULL, channel_name);
+	if (IS_ERR_OR_NULL(gpadc_chan))
+		return -EACCES;
+
+	ret = iio_read_channel_raw(gpadc_chan, &val);
+	if (ret < 0)
+		val = ret;
+
+	iio_channel_release(gpadc_chan);
+	return val;
+}
+
+static struct intel_soc_pmic_opregion_data intel_xpower_pmic_opregion_data = {
+	.get_power = intel_xpower_pmic_get_power,
+	.update_power = intel_xpower_pmic_update_power,
+	.get_raw_temp = intel_xpower_pmic_get_raw_temp,
+	.pwr_table = pwr_table,
+	.pwr_table_count = ARRAY_SIZE(pwr_table),
+	.dptf_table = dptf_table,
+	.dptf_table_count = ARRAY_SIZE(dptf_table)
+};
+
+
+static int intel_xpower_pmic_opregion_probe(struct platform_device *pdev)
+{
+	return intel_soc_pmic_install_opregion_handler(&pdev->dev,
+			ACPI_HANDLE(pdev->dev.parent),
+			&intel_xpower_pmic_opregion_data);
+}
+
+static int intel_xpower_pmic_opregion_remove(struct platform_device *pdev)
+{
+	intel_soc_pmic_remove_opregion_handler(ACPI_HANDLE(pdev->dev.parent));
+	return 0;
+}
+
+static struct platform_device_id dollar_cove_opregion_id_table[] = {
+	{ .name = DRV_NAME },
+	{},
+};
+
+static struct platform_driver intel_xpower_pmic_opregion_driver = {
+	.probe = intel_xpower_pmic_opregion_probe,
+	.remove = intel_xpower_pmic_opregion_remove,
+	.id_table = dollar_cove_opregion_id_table,
+	.driver = {
+		.name = DRV_NAME,
+	},
+};
+
+MODULE_DEVICE_TABLE(platform, dollar_cove_opregion_id_table);
+module_platform_driver(intel_xpower_pmic_opregion_driver);
+
+MODULE_DESCRIPTION("XPower AXP288 ACPI operation region driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/mfd/intel_soc_pmic_dc.c b/drivers/mfd/intel_soc_pmic_dc.c
index 9e79733..9f5c226 100644
--- a/drivers/mfd/intel_soc_pmic_dc.c
+++ b/drivers/mfd/intel_soc_pmic_dc.c
@@ -244,6 +244,9 @@ static struct mfd_cell dollar_cove_dev[] = {
 		.num_resources = ARRAY_SIZE(battery_resources),
 		.resources = battery_resources,
 	},
+	{
+		.name = "dollar_cove_region",
+	},
 	{NULL, },
 };
 
-- 
1.9.1

