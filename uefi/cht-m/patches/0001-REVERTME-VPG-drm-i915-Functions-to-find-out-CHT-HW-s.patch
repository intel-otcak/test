From f393e797ccaaf66a25ee3d7c4e6136083a6effeb Mon Sep 17 00:00:00 2001
Message-Id: <f393e797ccaaf66a25ee3d7c4e6136083a6effeb.1414143271.git.chang-joon.lee@intel.com>
From: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
Date: Tue, 14 Oct 2014 10:34:53 +0530
Subject: [PATCH 01/26] REVERTME [VPG]: drm/i915: Functions to find out CHT HW
 steppings

This patch adds functions to check for particular SoC steppings
with logical conditions such as above or below.

REVERTME: Only from CHT C0 stepping, CHT will be available as product
to public. Hence need to remove this patch from the product once
everyone within intel stops using SoC stepping older than C0. This patch
is of upstream quality and if there is a need to check for SoC stepping
>=C0, then this patch can be changed from REVERTME to FOR_UPSTREAM.

For: GMINL-1532
Change-Id: Ib44bceaabc50724c58a11d1a95a544aaf7e0c8d5
Signed-off-by: Gaurav K Singh <gaurav.k.singh@intel.com>
Signed-off-by: Yogesh Mohan Marimuthu <yogesh.mohan.marimuthu@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c |    1 +
 drivers/gpu/drm/i915/i915_drv.c |   39 +++++++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_drv.h |   32 ++++++++++++++++++++++++++++++++
 3 files changed, 72 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 0955f0f..86dc9db 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -1700,6 +1700,7 @@ int i915_driver_load(struct drm_device *dev, unsigned long flags)
 
 	/* This must be called before any calls to HAS_PCH_* */
 	intel_detect_pch(dev);
+	intel_detect_stepping(dev);
 
 	intel_uncore_init(dev);
 
diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 35c44fd..f065fc4 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -39,6 +39,19 @@
 #include <linux/pm_runtime.h>
 #include <drm/drm_crtc_helper.h>
 
+#define CHV_PCI_MINOR_STEP_MASK		0x0C
+#define CHV_PCI_MINOR_STEP_SHIFT	0x02
+#define CHV_PCI_MAJOR_STEP_MASK		0x30
+#define CHV_PCI_MAJOR_STEP_SHIFT	0x04
+#define CHV_PCI_STEP_SEL_MASK		0x40
+#define CHV_PCI_STEP_SEL_SHIFT		0x06
+#define CHV_PCI_OVERFLOW_MASK		0x80
+#define CHV_PCI_OVERFLOW_SHIFT		0x07
+
+#define CHV_MAX_STEP_SEL	1
+#define CHV_MAX_MAJ_STEP	1
+#define CHV_MAX_MIN_STEP	3
+
 static struct drm_driver driver;
 
 #define GEN_DEFAULT_PIPEOFFSETS \
@@ -472,6 +485,32 @@ void intel_detect_pch(struct drm_device *dev)
 	pci_dev_put(pch);
 }
 
+void intel_detect_stepping(struct drm_device *dev)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	u16 stepping_id;
+	u16 rev_id;
+
+	pci_read_config_word(dev->pdev, PCI_REVISION_ID, &rev_id);
+
+	if (IS_CHERRYVIEW(dev)) {
+		stepping_id = ((rev_id & CHV_PCI_MINOR_STEP_MASK)
+				>> CHV_PCI_MINOR_STEP_SHIFT) + ASCII_0;
+
+		if ((rev_id & CHV_PCI_STEP_SEL_MASK) >> CHV_PCI_STEP_SEL_SHIFT)
+			stepping_id = stepping_id + (ASCII_K << 8);
+		else
+			stepping_id = stepping_id + (ASCII_A << 8);
+
+		stepping_id = stepping_id + (((rev_id & CHV_PCI_MAJOR_STEP_MASK)
+				>> CHV_PCI_MAJOR_STEP_SHIFT) << 8);
+
+		dev_priv->stepping_id = stepping_id;
+
+		DRM_DEBUG_KMS("stepping id = 0x%x\n", dev_priv->stepping_id);
+	}
+}
+
 bool i915_semaphore_is_enabled(struct drm_device *dev)
 {
 	if (INTEL_INFO(dev)->gen < 6)
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 7841982..88bea72 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -61,6 +61,23 @@
 #define DRIVER_DESC		"Intel Graphics"
 #define DRIVER_DATE		"20080730"
 
+#define ASCII_0				0x30
+#define ASCII_A				0x41
+#define ASCII_K				0x4B
+
+#define STEP_A0				0x4130
+#define STEP_A1				0x4131
+#define STEP_A2				0x4132
+#define STEP_A3				0x4133
+#define STEP_B0				0x4230
+#define STEP_B1				0x4231
+#define STEP_B2				0x4232
+#define STEP_B3				0x4233
+#define STEP_C0				0x4330
+#define STEP_C1				0x4331
+#define STEP_C2				0x4332
+#define STEP_C3				0x4333
+
 enum planes {
 	DISPLAY_PLANE = 0,
 	SPRITE_PLANE,
@@ -1576,6 +1593,7 @@ struct drm_i915_private {
 
 	unsigned int fsb_freq, mem_freq, is_ddr3;
 	unsigned int vlv_cdclk_freq;
+	u16 stepping_id;
 
 	/**
 	 * wq - Driver workqueue for GEM.
@@ -3003,6 +3021,8 @@ int i915_perfmon_ioctl(struct drm_device *dev, void *data,
 extern void i915_write_bits32(struct drm_i915_private *dev_priv,
 	u32 reg, u32 val, u32 mask, bool trace);
 
+void intel_detect_stepping(struct drm_device *dev);
+
 #define I915_READ8(reg)		dev_priv->uncore.funcs.mmio_readb(dev_priv, (reg), true)
 #define I915_WRITE8(reg, val)	dev_priv->uncore.funcs.mmio_writeb(dev_priv, (reg), (val), true)
 
@@ -3060,6 +3080,18 @@ void i915_init_watchdog(struct drm_device *dev);
 #define INTEL_BROADCAST_RGB_FULL 1
 #define INTEL_BROADCAST_RGB_LIMITED 2
 
+#define STEP_BETWEEN_INCLUSIVE(from, to) ((dev_priv->stepping_id >= from \
+			&& dev_priv->stepping_id <= to) ? true : false)
+
+#define STEP_ABOVE(above) (dev_priv->stepping_id > above ? true : false)
+#define STEP_BELOW(below) (dev_priv->stepping_id < below ? true : false)
+
+#define STEP_BETWEEN(below, above) ((dev_priv->stepping_id > below \
+		&& dev_priv->stepping_id < above) ? true : false)
+
+#define STEP_FROM(from)  (dev_priv->stepping_id >= from ? true : false)
+#define STEP_TO(to) (dev_priv->stepping_id <= to ? true : false)
+
 static inline uint32_t i915_vgacntrl_reg(struct drm_device *dev)
 {
 	if (HAS_PCH_SPLIT(dev))
-- 
1.7.9.5

