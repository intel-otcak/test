From a2d43322d5eedf9f8452ffe32c49594ed69de5a4 Mon Sep 17 00:00:00 2001
From: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date: Mon, 23 Jun 2014 15:13:24 +0100
Subject: [PATCH 232/351] drivers: switch: Take wake lock whilst handling jack
 detection

We want jack detection to run to completion and not be delayed by the AP
suspending, if the AP were to suspend whilst we are not waiting on an
IRQ the jack will not be reported until the AP resumes. This patch adds
a wake lock covering the portions of jack detection were we are not
waiting for an IRQ.

Change-Id: I03b73afa344e69c8c786afa99883754aa92e7e3a
Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Signed-off-by: Nikesh Oswal <Nikesh.Oswal@wolfsonmicro.com>
---
 drivers/switch/switch-arizona.c   |   17 ++++++++++++++++-
 include/linux/mfd/arizona/pdata.h |    3 +++
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/drivers/switch/switch-arizona.c b/drivers/switch/switch-arizona.c
index de8ffc5..44b64a7 100644
--- a/drivers/switch/switch-arizona.c
+++ b/drivers/switch/switch-arizona.c
@@ -31,6 +31,7 @@
 #include <linux/delay.h>
 #include <linux/regmap.h>
 #include <linux/switch-arizona.h>
+#include <linux/wakelock.h>
 
 #include <sound/soc.h>
 
@@ -104,6 +105,8 @@ struct arizona_extcon_info {
 
 	const struct arizona_jd_state *state;
 	struct delayed_work state_timeout_work;
+
+	struct wake_lock detection_wake_lock;
 };
 
 static const struct arizona_micd_config micd_default_modes[] = {
@@ -1486,6 +1489,10 @@ static irqreturn_t arizona_jackdet(int irq, void *data)
 	if (info->last_jackdet == present) {
 		dev_dbg(arizona->dev, "Detected jack\n");
 
+		if (arizona->pdata.jd_wake_time)
+			wake_lock_timeout(&info->detection_wake_lock,
+				msecs_to_jiffies(arizona->pdata.jd_wake_time));
+
 		if (!arizona->pdata.hpdet_acc_id) {
 			info->mic = false;
 			info->jack_flips = 0;
@@ -1650,6 +1657,9 @@ static int arizona_extcon_get_pdata(struct arizona *arizona)
 	arizona_of_read_u32(arizona, "wlf,hpdet-channel", false,
 			    &pdata->hpdet_channel);
 
+	arizona_of_read_u32(arizona, "wlf,jd-wake-time", false,
+			    &pdata->jd_wake_time);
+
 	return 0;
 }
 #else
@@ -1699,6 +1709,8 @@ static int arizona_extcon_probe(struct platform_device *pdev)
 	}
 
 	mutex_init(&info->lock);
+	wake_lock_init(&info->detection_wake_lock, WAKE_LOCK_SUSPEND,
+		       "arizona-jack-detection");
 	info->arizona = arizona;
 	info->dev = &pdev->dev;
 	info->last_jackdet = ~(ARIZONA_MICD_CLAMP_STS | ARIZONA_JD1_STS);
@@ -1741,7 +1753,7 @@ static int arizona_extcon_probe(struct platform_device *pdev)
 	if (ret < 0) {
 		dev_err(arizona->dev, "extcon_dev_register() failed: %d\n",
 			ret);
-		goto err;
+		goto err_wakelock;
 	}
 
 	info->input = devm_input_allocate_device(&pdev->dev);
@@ -2010,6 +2022,8 @@ err_input:
 err_register:
 	pm_runtime_disable(&pdev->dev);
 	switch_dev_unregister(&info->edev);
+err_wakelock:
+	wake_lock_destroy(&info->detection_wake_lock);
 err:
 	return ret;
 }
@@ -2047,6 +2061,7 @@ static int arizona_extcon_remove(struct platform_device *pdev)
 
 	device_remove_file(&pdev->dev, &dev_attr_hp_impedance);
 	switch_dev_unregister(&info->edev);
+	wake_lock_destroy(&info->detection_wake_lock);
 
 	return 0;
 }
diff --git a/include/linux/mfd/arizona/pdata.h b/include/linux/mfd/arizona/pdata.h
index 424fbde..2e543eb 100644
--- a/include/linux/mfd/arizona/pdata.h
+++ b/include/linux/mfd/arizona/pdata.h
@@ -128,6 +128,9 @@ struct arizona_pdata {
 	 */
 	int max_channels_clocked[ARIZONA_MAX_AIF];
 
+	/** Time in milliseconds to keep wake lock during jack detection */
+	int jd_wake_time;
+
 	/** GPIO5 is used for jack detection */
 	bool jd_gpio5;
 
-- 
1.7.9.5

