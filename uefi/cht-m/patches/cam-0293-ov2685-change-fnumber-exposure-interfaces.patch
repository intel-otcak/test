From 202c992900a41a0970f4e5df470f15e9dffc83f4 Mon Sep 17 00:00:00 2001
From: Shuguang Gong <shuguang.gong@intel.com>
Date: Wed, 4 Mar 2015 12:09:05 +0800
Subject: [PATCH 289/307] ov2685: change fnumber&exposure interfaces

Change-Id: I0da73fecef12e3ffb3307288109cdb8b22e69bd0
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-21106
Signed-off-by: Shuguang Gong <shuguang.gong@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/#/c/44526/
Reviewed-on: https://icggerrit.ir.intel.com/44526
Integrator: Wei Tao <wei.tao@intel.com>
Build: IMIN-legacy (SC)
Approver: Wei Tao <wei.tao@intel.com>
Build: Wei Tao <wei.tao@intel.com>
Reviewed-by: Wei Tao <wei.tao@intel.com>
Maintainer: Wei Tao <wei.tao@intel.com>
---
 .../camera/drivers/media/i2c/ov2685.c              | 116 +++++++++++++++++++++
 .../camera/drivers/media/i2c/ov2685.h              |  17 +++
 2 files changed, 133 insertions(+)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c
index 7592cf1..17b2a89 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c
@@ -292,9 +292,103 @@ static int ov2685_s_wb(struct v4l2_subdev *sd, int value)
 	return 0;
 }
 
+static int ov2685_get_sysclk(struct v4l2_subdev *sd)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int sysclk;
+	u16 reg_val;
+	int pre_div0, pre_div2x, div_loop, sp_div, sys_div, vco;
+	int pre_div2x_map[] = {2, 3, 4, 5, 6, 8, 12, 16};
+
+	ov2685_read_reg(client, MISENSOR_8BIT,
+			OV2685_REG_PLL_CTRL, &reg_val);
+	pre_div0 = ((reg_val >> 4) & 0x01) + 1;
+
+	ov2685_read_reg(client, MISENSOR_8BIT,
+			OV2685_REG_PLL_PRE_DIV, &reg_val);
+	reg_val &= 0x07;
+	pre_div2x = pre_div2x_map[reg_val];
+
+	ov2685_read_reg(client, MISENSOR_8BIT,
+				OV2685_REG_PLL_MULT_H, &reg_val);
+	div_loop = (reg_val & 0x01) << 8;
+
+	ov2685_read_reg(client, MISENSOR_8BIT,
+				OV2685_REG_PLL_MULT_L, &reg_val);
+	div_loop += reg_val;
+
+	ov2685_read_reg(client, MISENSOR_8BIT,
+				OV2685_REG_PLL_SP_DIV, &reg_val);
+	sp_div = (reg_val & 0x07) + 1;
+
+	ov2685_read_reg(client, MISENSOR_8BIT,
+				OV2685_REG_PLL_SYS_DIV, &reg_val);
+
+	sys_div = (reg_val & 0x0f) + 1;
+
+	vco = OV2685_XVCLK * div_loop * 2 / pre_div0 / pre_div2x;
+	sysclk = vco / sp_div / sys_div;
+	return sysclk;
+}
+
 static int ov2685_g_exposure(struct v4l2_subdev *sd, s32 *value)
 {
+
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	u16 reg_v, reg_v2, hts, hts_v2;
+	u32 exp_val, sys_clk;
+	int ret;
+
+	*value = OV2685_EXPOSURE_DEFAULT_VAL;
+
+	/* get exposure */
+	ret = ov2685_read_reg(client, MISENSOR_8BIT,
+					OV2685_REG_EXPOSURE_2,
+					&reg_v);
+	if (ret)
+		goto err;
+
+	ret = ov2685_read_reg(client, MISENSOR_8BIT,
+					OV2685_REG_EXPOSURE_1,
+					&reg_v2);
+	if (ret)
+		goto err;
+
+	reg_v = (reg_v >> 4) | (reg_v2 << 4);
+	ret = ov2685_read_reg(client, MISENSOR_8BIT,
+					OV2685_REG_EXPOSURE_0,
+					&reg_v2);
+	if (ret)
+		goto err;
+
+	ret = ov2685_read_reg(client, MISENSOR_8BIT,
+					OV2685_REG_HTS_H,
+					&hts);
+	if (ret)
+		goto err;
+
+	ret = ov2685_read_reg(client, MISENSOR_8BIT,
+					OV2685_REG_HTS_L,
+					&hts_v2);
+	if (ret)
+		goto err;
+
+	hts = (hts << 8) | hts_v2;
+
+	sys_clk = ov2685_get_sysclk(sd);
+	if (!sys_clk)
+		return 0;
+
+	/* transfer exposure time to us */
+	exp_val = ((reg_v | (((u32)reg_v2 << 12))) * hts)  * 1000 / (sys_clk*10);
+
+	/* FIX ME! The exposure value could be 0 in some cases*/
+	if (exp_val)
+		*value = exp_val;
+
 	return 0;
+err:
+	return ret;
 }
 
 static int ov2685_s_exposure(struct v4l2_subdev *sd, int value)
@@ -338,6 +432,14 @@ static int ov2685_s_exposure(struct v4l2_subdev *sd, int value)
 
 	return 0;
 }
+
+static int ov2685_g_fnumber(struct v4l2_subdev *sd, s32 *value)
+{
+	/*const f number for imx*/
+	*value = (OV2685_F_NUMBER_DEFAULT_NUM << 16) | OV2685_F_NUMBER_DEM;
+	return 0;
+}
+
 static long ov2685_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 {
 	return 0;
@@ -713,6 +815,9 @@ static int ov2685_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 	case V4L2_CID_HFLIP:
 		ret = ov2685_g_hflip(&dev->sd, &ctrl->val);
 		break;
+	case V4L2_CID_FNUMBER_ABSOLUTE:
+		ret = ov2685_g_fnumber(&dev->sd, &ctrl->val);
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -822,6 +927,17 @@ static const struct v4l2_ctrl_config ov2685_controls[] = {
 		.def = 0,
 		.flags = 0,
 	},
+	{
+		.ops = &ctrl_ops,
+		.id = V4L2_CID_FNUMBER_ABSOLUTE,
+		.name = "focal number",
+		.type = V4L2_CTRL_TYPE_INTEGER,
+		.min = OV2685_F_NUMBER_DEFAULT,
+		.max = OV2685_F_NUMBER_DEFAULT,
+		.step = 1,
+		.def = OV2685_F_NUMBER_DEFAULT,
+		.flags = V4L2_CTRL_FLAG_VOLATILE,
+	},
 };
 
 static int ov2685_s_stream(struct v4l2_subdev *sd, int enable)
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h
index b997903..8193604 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h
@@ -38,6 +38,15 @@
 #define V4L2_IDENT_OV2685 1111
 #define	LAST_REG_SETING	{0xffff, 0xff}
 
+#define OV2685_XVCLK	1920
+#define OV2685_EXPOSURE_DEFAULT_VAL 33 /* 33ms*/
+
+#define OV2685_FOCAL_LENGTH_NUM	270	/*2.70mm*/
+#define OV2685_FOCAL_LENGTH_DEM	100
+#define OV2685_F_NUMBER_DEFAULT_NUM	26
+#define OV2685_F_NUMBER_DEM	10
+#define OV2685_F_NUMBER_DEFAULT 0x16000a
+
 /* #defines for register writes and register array processing */
 #define MISENSOR_8BIT		1
 #define MISENSOR_16BIT		2
@@ -52,6 +61,14 @@
 #define MSG_LEN_OFFSET		2
 
 /*register */
+#define OV2685_REG_HTS_H	0x380c
+#define OV2685_REG_HTS_L	0x380d
+#define OV2685_REG_PLL_CTRL	0x3088
+#define OV2685_REG_PLL_PRE_DIV	0x3080
+#define OV2685_REG_PLL_MULT_H	0x3081
+#define OV2685_REG_PLL_MULT_L	0x3082
+#define OV2685_REG_PLL_SP_DIV	0x3086
+#define OV2685_REG_PLL_SYS_DIV	0x3084
 #define OV2685_REG_GAIN_0	0x350a
 #define OV2685_REG_GAIN_1	0x350b
 #define OV2685_REG_EXPOSURE_0	0x3500
-- 
1.9.1

