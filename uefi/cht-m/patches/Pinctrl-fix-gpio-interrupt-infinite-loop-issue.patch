From 07814c8421ea90d399ae24bc0dc98929b4b4ac5d Mon Sep 17 00:00:00 2001
From: zhengq <qi.zheng@intel.com>
Date: Thu, 18 Jun 2015 18:54:54 +0800
Subject: [PATCH] Pinctrl: fix gpio interrupt infinite loop issue

Sometimes the BIOS may enable some GPIO interrupts
which the kernel doesn't know. In that case, there is
no corresponding registered interrupt handler to respond,
ACK or mask properly which may cause the interrupt keeps
coming all the time.
Add a check in GPIO interrupt, for those kernel unknown
interrupt, just ACK and mask, then it will not enter the
loop anymore.

Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-35173
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1916
Change-Id: Idbd4e387a688d081687f57015b924923d99a9810
Signed-off-by: zhengq <qi.zheng@intel.com>
---
 drivers/pinctrl/pinctrl-cherryview.c | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/drivers/pinctrl/pinctrl-cherryview.c b/drivers/pinctrl/pinctrl-cherryview.c
index bf26c27fb1ea..512728b2b31e 100644
--- a/drivers/pinctrl/pinctrl-cherryview.c
+++ b/drivers/pinctrl/pinctrl-cherryview.c
@@ -1272,7 +1272,7 @@ EXPORT_SYMBOL_GPL(chv_gpio_cfg_inv);
 
 static void chv_gpio_irq_dispatch(struct chv_gpio *cg)
 {
-	u32 intr_line, mask, offset;
+	u32 intr_line, mask, offset, irq;
 	void __iomem *reg, *mask_reg;
 	u32 pending;
 
@@ -1282,14 +1282,21 @@ static void chv_gpio_irq_dispatch(struct chv_gpio *cg)
 	while ((pending = (chv_readl(reg) & chv_readl(mask_reg) & 0xFFFF))) {
 		intr_line = __ffs(pending);
 		offset = cg->intr_lines[intr_line];
+		/*
+		* For the interrupts the kernel doens't know, do ack
+		* and mask to prevent it from entering the loop again.
+		*/
 		if (unlikely(offset < 0)) {
 			mask = BIT(intr_line);
 			chv_writel(mask, reg);
-			dev_warn(&cg->pdev->dev, "unregistered shared irq\n");
+			chv_writel(chv_readl(mask_reg) & (~mask), mask_reg);
+			dev_warn(&cg->pdev->dev,
+				"unregistered irq, line %d\n", intr_line);
 			continue;
+		} else {
+			irq = irq_find_mapping(cg->domain, offset);
+			generic_handle_irq(irq);
 		}
-
-		generic_handle_irq(irq_find_mapping(cg->domain, offset));
 	}
 }
 
-- 
1.9.1

