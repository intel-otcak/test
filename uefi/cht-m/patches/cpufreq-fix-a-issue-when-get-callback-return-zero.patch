From ea1201e63188ce02c7dec71b7cd52c2e71728170 Mon Sep 17 00:00:00 2001
From: "xinhui.pan" <xinhuix.pan@intel.com>
Date: Tue, 7 Jul 2015 15:13:18 +0800
Subject: [PATCH] cpufreq: fix a issue when get callback return zero

This commit includes two patch from upstream

upsteam commit: bd0fa9bb455d9b58ec2d7a36cd08afed9e3411b4
    cpufreq: Return error if ->get() failed in cpufreq_update_policy()

    cpufreq_update_policy() calls cpufreq_driver->get() to get current
    frequency of a CPU and it is not supposed to fail or return zero.
    Return error in case that happens.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

upstream commit: fefa8ff810c5ab4c4206aed9d159c4d6fe8d4f1c
    cpufreq: unlock when failing cpufreq_update_policy()

    Commit bd0fa9bb455d introduced a failure path to cpufreq_update_policy() if
    cpufreq_driver->get(cpu) returns NULL.  However, it jumps to the 'no_policy'
    label, which exits without unlocking any of the locks the function acquired
    earlier.  This causes later calls into cpufreq to hang.

    Fix this by creating a new 'unlock' label and jumping to that instead.

    Fixes: bd0fa9bb455d ("cpufreq: Return error if ->get() failed in cpufreq_update_policy()")
    Link: https://devtalk.nvidia.com/default/topic/751903/kernel-3-15-and-nv-drivers-337-340-failed-to-initialize-the-nvidia-kernel-module-gtx-550-ti-/
    Signed-off-by: Aaron Plattner <aplattner@nvidia.com>
    Cc: 3.15+ <stable@vger.kernel.org> # 3.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Change-Id: Ia9f27012d8ded87ee0c6e9a68bab5b5fe44739cd
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-40894
Signed-off-by: xinhui.pan <xinhuix.pan@intel.com>
---
 drivers/cpufreq/cpufreq.c | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 890e60a64922..ab81519e5434 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -2168,10 +2168,8 @@ int cpufreq_update_policy(unsigned int cpu)
 	struct cpufreq_policy new_policy;
 	int ret;
 
-	if (!policy) {
-		ret = -ENODEV;
-		goto no_policy;
-	}
+	if (!policy)
+		return -ENODEV;
 
 	down_write(&policy->rwsem);
 
@@ -2188,6 +2186,10 @@ int cpufreq_update_policy(unsigned int cpu)
 	 */
 	if (cpufreq_driver->get && !cpufreq_driver->setpolicy) {
 		new_policy.cur = cpufreq_driver->get(cpu);
+		if (WARN_ON(!new_policy.cur)) {
+			ret = -EIO;
+			goto unlock;
+		}
 		if (!policy->cur) {
 			pr_debug("Driver did not initialize current freq");
 			policy->cur = new_policy.cur;
@@ -2200,10 +2202,10 @@ int cpufreq_update_policy(unsigned int cpu)
 
 	ret = cpufreq_set_policy(policy, &new_policy);
 
+unlock:
 	up_write(&policy->rwsem);
 
 	cpufreq_cpu_put(policy);
-no_policy:
 	return ret;
 }
 EXPORT_SYMBOL(cpufreq_update_policy);
-- 
1.9.1

