From c406a3261cdb77b4a8da279f142a731021e7f4b4 Mon Sep 17 00:00:00 2001
From: Zhang Yanmin <yanmin.zhang@intel.com>
Date: Thu, 3 Mar 2016 11:17:53 +0800
Subject: [PATCH 3/7] gpio-crystalcove: dump wakeup source after system is
 woken up from deep sleep

Change-Id: Iab7a1ae92dfdcc0f85f1348c5345aa39a593dd80
Tracked-On:
Signed-off-by: Zhang Yanmin <yanmin.zhang@intel.com>
Signed-off-by: Li Youx <youx.li@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-26841
Reviewed-on: https://android.intel.com:443/477221
---
 drivers/gpio/gpio-crystalcove.c    | 39 ++++++++++++++++++++++++++++++++++++--
 include/linux/mfd/intel_soc_pmic.h |  1 +
 2 files changed, 38 insertions(+), 2 deletions(-)

diff --git a/drivers/gpio/gpio-crystalcove.c b/drivers/gpio/gpio-crystalcove.c
index 9dff39f..544ff9b 100644
--- a/drivers/gpio/gpio-crystalcove.c
+++ b/drivers/gpio/gpio-crystalcove.c
@@ -180,6 +180,22 @@ static struct irq_chip crystalcove_irqchip = {
 	.flags = IRQCHIP_SKIP_SET_WAKE,
 };
 
+#ifdef CONFIG_PM_SLEEP
+static int crystalcove_suspend_noirq(struct device *dev)
+{
+	struct pmic_gpio *cg = dev_get_drvdata(dev);
+	cg->print_wakeup = 1;
+	return 0;
+}
+
+static int crystalcove_resume_early(struct device *dev)
+{
+	struct pmic_gpio *cg = dev_get_drvdata(dev);
+	cg->print_wakeup = 0;
+	return 0;
+}
+#endif
+
 static irqreturn_t crystalcove_gpio_irq_handler(int irq, void *data)
 {
 	struct pmic_gpio *cg = data;
@@ -192,9 +208,16 @@ static irqreturn_t crystalcove_gpio_irq_handler(int irq, void *data)
 	intel_soc_pmic_writeb(GPIO1IRQ, (pending >> 8) & 0xff);
 
 	local_irq_disable();
-	for (gpio = 0; gpio < cg->gpio_data->num_gpio; gpio++)
-		if (pending & (1 << gpio))
+	for (gpio = 0; gpio < cg->gpio_data->num_gpio; gpio++) {
+		if (pending & (1 << gpio)) {
+			if (cg->print_wakeup) {
+				pr_info("crystalcove_gpio: irq[%d]"
+					" might wake up system!\n",
+					cg->irq_base + gpio);
+			}
 			generic_handle_irq(cg->irq_base + gpio);
+		}
+	}
 	local_irq_enable();
 
 	return IRQ_HANDLED;
@@ -288,9 +311,20 @@ static int crystalcove_gpio_probe(struct platform_device *pdev)
 		return retval;
 	}
 
+	dev_set_drvdata(&pdev->dev, cg);
+
 	return 0;
 }
 
+#ifdef CONFIG_PM_SLEEP
+static const struct dev_pm_ops crystalcove_pm = {
+	.suspend_noirq = crystalcove_suspend_noirq,
+	.resume_early = crystalcove_resume_early,
+};
+#else
+static const struct dev_pm_ops crystalcove_pm;
+#endif
+
 static struct platform_device_id crystalcove_gpio_id_table[] = {
 	{ .name = "crystal_cove_gpio" },
 	{ .name = "whiskey_cove_gpio" },
@@ -300,6 +334,7 @@ static struct platform_driver crystalcove_gpio_driver = {
 	.probe = crystalcove_gpio_probe,
 	.driver = {
 		.name = "crystal_cove_gpio",
+		.pm = &crystalcove_pm,
 	},
 	.id_table = crystalcove_gpio_id_table,
 };
diff --git a/include/linux/mfd/intel_soc_pmic.h b/include/linux/mfd/intel_soc_pmic.h
index 9dc9e4a..4dd7d18 100644
--- a/include/linux/mfd/intel_soc_pmic.h
+++ b/include/linux/mfd/intel_soc_pmic.h
@@ -96,6 +96,7 @@ struct pmic_gpio {
 	int			trigger_type;
 	int			irq_mask;
 	struct pmic_gpio_data	*gpio_data;
+	int			print_wakeup;
 };
 
 int intel_soc_pmic_readb(int reg);
-- 
1.9.1

