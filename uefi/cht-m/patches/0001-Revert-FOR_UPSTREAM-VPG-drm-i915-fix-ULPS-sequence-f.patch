From 00f6b81c4f7cda14fdf1b65e3b265e32931fdb59 Mon Sep 17 00:00:00 2001
Message-Id: <00f6b81c4f7cda14fdf1b65e3b265e32931fdb59.1422954363.git.chang-joon.lee@intel.com>
From: CJ Lee <chang-joon.lee@intel.com>
Date: Tue, 3 Feb 2015 00:44:50 -0800
Subject: [PATCH] Revert "FOR_UPSTREAM [VPG]: drm/i915: fix ULPS sequence for
 MIPI"

This reverts commit d57680a991fe17077d2e24b3f0b5de6e587fa038.
---
 drivers/gpu/drm/i915/intel_dsi.c |   72 ++++++++++++++------------------------
 1 file changed, 27 insertions(+), 45 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index 818e94e..33a5e8c 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -137,27 +137,14 @@ static void intel_dsi_pre_pll_enable(struct intel_encoder *encoder)
 	vlv_enable_dsi_pll(encoder);
 }
 
-static void intel_dsi_write_dev_rdy_on_A_and_C(struct intel_encoder *encoder,
-								u32 val)
-{
-	struct drm_i915_private *dev_priv = encoder->base.dev->dev_private;
-	struct intel_dsi *intel_dsi = enc_to_intel_dsi(&encoder->base);
-	struct intel_crtc *intel_crtc = to_intel_crtc(encoder->base.crtc);
-	int pipe = intel_crtc->pipe;
-
-	if (intel_dsi->dual_link) {
-		I915_WRITE(MIPI_DEVICE_READY(PIPE_A), val);
-		I915_WRITE(MIPI_DEVICE_READY(PIPE_B), val);
-	} else
-		I915_WRITE(MIPI_DEVICE_READY(pipe), val);
-}
-
 static void intel_dsi_device_ready(struct intel_encoder *encoder)
 {
 	struct drm_i915_private *dev_priv = encoder->base.dev->dev_private;
+	struct intel_dsi *intel_dsi = enc_to_intel_dsi(&encoder->base);
 	struct intel_crtc *intel_crtc = to_intel_crtc(encoder->base.crtc);
 	int pipe = intel_crtc->pipe;
 	u32 val;
+	int count = 1;
 
 	DRM_DEBUG_KMS("\n");
 
@@ -182,23 +169,29 @@ static void intel_dsi_device_ready(struct intel_encoder *encoder)
 	if (IS_CHERRYVIEW(dev_priv->dev) && STEP_TO(STEP_A2))
 		val |= pipe ? DELAY_180_PHASE_SHIFT_MIPIC :
 				DELAY_180_PHASE_SHIFT_MIPIA;
-
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, DEVICE_READY |
-							ULPS_STATE_ENTER);
-
-	/* wait for LP state to go 00 */
-	usleep_range(2000, 2500);
 	I915_WRITE(MIPI_PORT_CTRL(0), val | LP_OUTPUT_HOLD);
 	usleep_range(1000, 1500);
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, DEVICE_READY |
-							ULPS_STATE_EXIT);
 
-	/* wait for LP state to goto 11 */
-	usleep_range(2000, 2500);
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, DEVICE_READY);
+	if (intel_dsi->dual_link) {
+		count = 2;
+		pipe = PIPE_A;
+	}
 
-	/* wait for dsi controller hw enumeration */
-	usleep_range(2000, 2500);
+	do {
+		I915_WRITE(MIPI_DEVICE_READY(pipe), DEVICE_READY |
+							ULPS_STATE_EXIT);
+		usleep_range(2000, 2500);
+		I915_WRITE(MIPI_DEVICE_READY(pipe), DEVICE_READY);
+		usleep_range(2000, 2500);
+		I915_WRITE(MIPI_DEVICE_READY(pipe), 0x00);
+		usleep_range(2000, 2500);
+		I915_WRITE(MIPI_DEVICE_READY(pipe), DEVICE_READY);
+		usleep_range(2000, 2500);
+
+		/* For Port C for dual link */
+		if (intel_dsi->dual_link)
+			pipe = PIPE_B;
+	} while (--count > 0);
 }
 
 static void intel_dsi_port_enable(struct intel_encoder *encoder)
@@ -541,41 +534,30 @@ static void intel_dsi_disable(struct intel_encoder *encoder)
 static void intel_dsi_clear_device_ready(struct intel_encoder *encoder)
 {
 	struct drm_i915_private *dev_priv = encoder->base.dev->dev_private;
+	struct intel_crtc *intel_crtc = to_intel_crtc(encoder->base.crtc);
+	int pipe = intel_crtc->pipe;
 	u32 val;
 
 	DRM_DEBUG_KMS("\n");
 
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_ENTER |
-								DEVICE_READY);
-
-	/* wait for LP state to go 00 */
+	I915_WRITE(MIPI_DEVICE_READY(pipe), DEVICE_READY | ULPS_STATE_ENTER);
 	usleep_range(2000, 2500);
 
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_EXIT |
-								DEVICE_READY);
-
-	/* wait for LP state to goto 11 */
+	I915_WRITE(MIPI_DEVICE_READY(pipe), DEVICE_READY | ULPS_STATE_EXIT);
 	usleep_range(2000, 2500);
 
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, ULPS_STATE_ENTER |
-								DEVICE_READY);
-
-	/* wait for LP state to go 00 */
+	I915_WRITE(MIPI_DEVICE_READY(pipe), DEVICE_READY | ULPS_STATE_ENTER);
 	usleep_range(2000, 2500);
 
 	val = I915_READ(MIPI_PORT_CTRL(0));
 	I915_WRITE(MIPI_PORT_CTRL(0), val & ~LP_OUTPUT_HOLD);
-
-	/* wait to latch the state */
 	usleep_range(1000, 1500);
 
 	if (wait_for(((I915_READ(MIPI_PORT_CTRL(0)) & AFE_LATCHOUT)
 					== 0x00000), 30))
 		DRM_ERROR("DSI LP not going Low\n");
 
-	intel_dsi_write_dev_rdy_on_A_and_C(encoder, 0x00);
-
-	/* wait for dsi controller to be off */
+	I915_WRITE(MIPI_DEVICE_READY(pipe), 0x00);
 	usleep_range(2000, 2500);
 
 	vlv_disable_dsi_pll(encoder);
-- 
1.7.9.5

