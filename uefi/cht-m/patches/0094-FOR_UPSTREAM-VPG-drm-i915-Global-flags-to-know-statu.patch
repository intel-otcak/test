From 062e130481fc4044d1cc8e3454d84e3ed388425f Mon Sep 17 00:00:00 2001
Message-Id: <062e130481fc4044d1cc8e3454d84e3ed388425f.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Sat, 5 Jul 2014 01:30:39 +0530
Subject: [PATCH 094/312] FOR_UPSTREAM [VPG]: drm/i915: Global flags to know
 status of the planes.

 The following changes have been ported:

 	global flags to update the status of plane
	(OriginalChangeID - I4943d9f9dd79c8777522c52a77c5a3d22069a1b1)
	Description: Use global flags to update the status of flags and use this flags in
	future when required instead of doing a mmio read to the register to
	know the status of a particular plane.

Issue: GMIN-1468
Change-Id: I8cb0847a50339bceed8e05247e64ea1c1d361150
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |   15 +++++++
 drivers/gpu/drm/i915/intel_display.c |   78 ++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_drv.h     |    3 ++
 drivers/gpu/drm/i915/intel_sprite.c  |   11 ++++-
 4 files changed, 106 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 4af6f9a5..96def61 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -55,6 +55,11 @@
 #define DRIVER_DESC		"Intel Graphics"
 #define DRIVER_DATE		"20080730"
 
+enum planes {
+	DISPLAY_PLANE = 0,
+	SPRITE_PLANE,
+};
+
 enum pipe {
 	INVALID_PIPE = -1,
 	PIPE_A = 0,
@@ -1366,6 +1371,15 @@ struct i915_dpst_registers {
 	uint32_t blm_hist_bin_count_mask;
 };
 
+struct i915_plane_stat {
+	bool primary;
+	bool secondary;
+	bool sprite_a;
+	bool sprite_b;
+	bool sprite_c;
+	bool sprite_d;
+};
+
 struct drm_i915_private {
 	struct drm_device *dev;
 	struct kmem_cache *slab;
@@ -1501,6 +1515,7 @@ struct drm_i915_private {
 	bool csc_enabled;
 	bool gamma_enabled;
 	bool is_resuming;
+	struct i915_plane_stat plane_stat;
 
 	/* PCH chipset type */
 	enum intel_pch pch_type;
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 23471c3..0c2db34 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -402,6 +402,59 @@ bool intel_pipe_has_type(struct drm_crtc *crtc, int type)
 	return false;
 }
 
+void i915_update_plane_stat(struct drm_i915_private *dev_priv, int pipe,
+		int plane, bool enable, int planes)
+{
+	switch (pipe) {
+	case 0:
+		if (planes == DISPLAY_PLANE) {
+			if (enable)
+				dev_priv->plane_stat.primary = true;
+			else
+				dev_priv->plane_stat.primary = false;
+		} else {
+			switch (plane) {
+			case 0:
+				if (enable)
+					dev_priv->plane_stat.sprite_a = true;
+				else
+					dev_priv->plane_stat.sprite_a = false;
+				break;
+			case 1:
+				if (enable)
+					dev_priv->plane_stat.sprite_b = true;
+				else
+					dev_priv->plane_stat.sprite_b = false;
+				break;
+			}
+		}
+		break;
+	case 1:
+		if (planes == DISPLAY_PLANE) {
+			if (enable)
+				dev_priv->plane_stat.secondary = true;
+			else
+				dev_priv->plane_stat.secondary = false;
+		} else {
+			switch (plane) {
+			case 0:
+				if (enable)
+					dev_priv->plane_stat.sprite_c = true;
+				else
+					dev_priv->plane_stat.sprite_c = false;
+				break;
+			case 1:
+				if (enable)
+					dev_priv->plane_stat.sprite_d = true;
+				else
+					dev_priv->plane_stat.sprite_d = false;
+				break;
+			}
+		}
+		break;
+	}
+}
+
 static const intel_limit_t *intel_ironlake_limit(struct drm_crtc *crtc,
 						int refclk)
 {
@@ -1375,6 +1428,29 @@ static void assert_plane(struct drm_i915_private *dev_priv,
 	     plane_name(plane), state_string(state), state_string(cur_state));
 }
 
+bool is_maxfifo_needed(struct drm_i915_private *dev_priv)
+{
+	int cnt = 0;
+
+	if (dev_priv->plane_stat.primary)
+		cnt++;
+	if (dev_priv->plane_stat.secondary)
+		cnt++;
+	if (dev_priv->plane_stat.sprite_a)
+		cnt++;
+	if (dev_priv->plane_stat.sprite_b)
+		cnt++;
+	if (dev_priv->plane_stat.sprite_c)
+		cnt++;
+	if (dev_priv->plane_stat.sprite_d)
+		cnt++;
+
+	if (cnt == 1)
+		return true;
+	else
+		return false;
+}
+
 #define assert_plane_enabled(d, p) assert_plane(d, p, true)
 #define assert_plane_disabled(d, p) assert_plane(d, p, false)
 
@@ -2263,6 +2339,7 @@ static void intel_enable_primary_hw_plane(struct drm_i915_private *dev_priv,
 	WARN_ON(val & DISPLAY_PLANE_ENABLE);
 
 	I915_WRITE(reg, val | DISPLAY_PLANE_ENABLE);
+	i915_update_plane_stat(dev_priv, pipe, plane, true, DISPLAY_PLANE);
 	intel_flush_primary_plane(dev_priv, plane);
 
 	/*
@@ -2300,6 +2377,7 @@ static void intel_disable_primary_hw_plane(struct drm_i915_private *dev_priv,
 	WARN_ON((val & DISPLAY_PLANE_ENABLE) == 0);
 
 	I915_WRITE(reg, val & ~DISPLAY_PLANE_ENABLE);
+	i915_update_plane_stat(dev_priv, pipe, plane, false, DISPLAY_PLANE);
 	intel_flush_primary_plane(dev_priv, plane);
 }
 
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index c388e69..ad6d244 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -1070,6 +1070,9 @@ bool is_sprite_enabled(struct drm_i915_private *dev_priv,
 			enum pipe pipe, enum plane plane);
 bool is_cursor_enabled(struct drm_i915_private *dev_priv,
 			enum pipe pipe);
+bool is_maxfifo_needed(struct drm_i915_private *dev_priv);
+void i915_update_plane_stat(struct drm_i915_private *dev_priv, int pipe,
+		int plane, bool enable, int planes);
 
 extern void intel_unpin_work_fn(struct work_struct *__work);
 extern void intel_unpin_sprite_work_fn(struct work_struct *__work);
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index e4ec109..acc9c77 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -131,13 +131,20 @@ static void intel_update_primary_plane(struct intel_crtc *crtc)
 	struct drm_i915_private *dev_priv = crtc->base.dev->dev_private;
 	int reg = DSPCNTR(crtc->plane);
 	int plane = crtc->plane;
+	bool flagret = true;
+	int pipe = crtc->pipe;
 
-	if (crtc->primary_enabled)
+	if (crtc->primary_enabled) {
 		I915_WRITE(reg, I915_READ(reg) | DISPLAY_PLANE_ENABLE);
+			flagret = true;
+	}
 	else {
 		I915_WRITE(reg, I915_READ(reg) & ~DISPLAY_PLANE_ENABLE);
 		I915_WRITE(DSPSURF(plane), I915_READ(DSPSURF(plane)));
+		flagret = false;
 	}
+	i915_update_plane_stat(dev_priv, pipe,
+		plane, flagret, DISPLAY_PLANE);
 }
 
 void
@@ -518,6 +525,7 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 		sprctl &= ~DISPPLANE_180_ROTATION_ENABLE;
 
 	I915_WRITE(SPCNTR(pipe, plane), sprctl);
+	i915_update_plane_stat(dev_priv, pipe, plane, true, SPRITE_PLANE);
 	I915_MODIFY_DISPBASE(SPSURF(pipe, plane),
 		i915_gem_obj_ggtt_offset(obj) + sprsurf_offset);
 	intel_flush_primary_plane(dev_priv, intel_crtc->plane);
@@ -546,6 +554,7 @@ vlv_disable_plane(struct drm_plane *dplane, struct drm_crtc *crtc)
 
 	I915_WRITE(SPCNTR(pipe, plane), I915_READ(SPCNTR(pipe, plane)) &
 		   ~SP_ENABLE);
+	i915_update_plane_stat(dev_priv, pipe, plane, false, SPRITE_PLANE);
 	/* Activate double buffered register update */
 	I915_MODIFY_DISPBASE(SPSURF(pipe, plane), 0);
 
-- 
1.7.9.5

