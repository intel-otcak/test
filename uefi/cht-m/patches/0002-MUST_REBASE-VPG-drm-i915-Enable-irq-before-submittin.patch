From 0d161618a4d29bb50aeb183fcc9eea2e0de5943e Mon Sep 17 00:00:00 2001
Message-Id: <0d161618a4d29bb50aeb183fcc9eea2e0de5943e.1423288862.git.chang-joon.lee@intel.com>
In-Reply-To: <f73f06e8e99aa68e75d55ffc4fa907c471523e67.1423288862.git.chang-joon.lee@intel.com>
References: <f73f06e8e99aa68e75d55ffc4fa907c471523e67.1423288862.git.chang-joon.lee@intel.com>
From: Deepak S <deepak.s@intel.com>
Date: Sat, 13 Dec 2014 18:52:09 +0530
Subject: [PATCH 2/3] MUST_REBASE [VPG]: drm/i915: Enable irq before
 submitting the HuC BB during resume.

During pm_resume, We are submitting HuC batchbuffers before enabling Interrupts
this is causing us to miss the context switch interrupt, and in consequence
intel_execlists_handle_ctx_events is not triggered. This patch matches pm_resume
the irq enable & gem_init_hw sequence with driver_load.

pm_resume sequence:
	drm_irq_install
		--> intel_modeset_init_hw
			--> i915_gem_init_hw (chv_huc_load).

MUST_REBASE because initial huc load patches are MUST_REBASE. Upstream this change
as part of huc load patches are sent for upstream.

The initial HuC firmware loading patch was introduced in:
commit 9f16402b1c95230bfc6a38c52c65e18c7daa26db
Author: Michael H. Nguyen <michael.h.nguyen@intel.com>
Date:   Fri Oct 3 08:57:05 2014 -0700

    MUST_REBASE [VPG]: drm/i915/chv: HuC firmware loading

Issue: GMINL-4750
Change-Id: I51f383b1a5d3cae49de051aa2c0ff020d5a184b9
Signed-off-by: Deepak S <deepak.s@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.c |   10 +++++++++-
 drivers/gpu/drm/i915/i915_gem.c |    9 ++++++---
 2 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index c5af16b..1730393 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -752,7 +752,8 @@ static int __i915_drm_thaw(struct drm_device *dev, bool restore_gtt_mappings)
 		drm_mode_config_reset(dev);
 
 		mutex_lock(&dev->struct_mutex);
-		if (i915_gem_init_hw(dev)) {
+		ret = i915_gem_init_hw(dev);
+		if (ret) {
 			DRM_ERROR("failed to re-initialize GPU, declaring wedged!\n");
 			atomic_set_mask(I915_WEDGED, &dev_priv->gpu_error.reset_counter);
 		}
@@ -763,6 +764,10 @@ static int __i915_drm_thaw(struct drm_device *dev, bool restore_gtt_mappings)
 
 		intel_modeset_init_hw(dev);
 
+		/* We need to load HuC after enabling irq */
+		if (ret == 0)
+			intel_chv_huc_load(dev);
+
 		if (!IS_VALLEYVIEW(dev) || IS_CHERRYVIEW(dev)
 						|| display_is_on(dev)) {
 			drm_modeset_lock_all(dev);
@@ -1239,6 +1244,9 @@ int i915_reset(struct drm_device *dev)
 			goto exit_locked;
 		}
 
+		if (ret == 0)
+			intel_chv_huc_load(dev);
+
 		if (i915.enable_execlists)
 			for_each_ring(ring, dev_priv, i) {
 				if (current_contexts[i]) {
diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 63608f0..37865fe5 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -5136,9 +5136,6 @@ i915_gem_init_hw(struct drm_device *dev)
 		i915_gem_cleanup_ringbuffer(dev);
 	}
 
-	if (ret == 0)
-		intel_chv_huc_load(dev);
-
 	return ret;
 }
 
@@ -5202,6 +5199,9 @@ int i915_gem_init(struct drm_device *dev)
 	}
 	mutex_unlock(&dev->struct_mutex);
 
+	if (ret == 0)
+		intel_chv_huc_load(dev);
+
 	/* Allow hardware batchbuffers unless told otherwise, but not for KMS. */
 	if (!drm_core_check_feature(dev, DRIVER_MODESET))
 		dev_priv->dri1.allow_batchbuffer = 1;
@@ -5249,6 +5249,9 @@ i915_gem_entervt_ioctl(struct drm_device *dev, void *data,
 		return ret;
 	}
 
+	if (ret == 0)
+		intel_chv_huc_load(dev);
+
 	BUG_ON(!list_empty(&dev_priv->gtt.base.active_list));
 
 	ret = drm_irq_install(dev, dev->pdev->irq);
-- 
1.7.9.5

