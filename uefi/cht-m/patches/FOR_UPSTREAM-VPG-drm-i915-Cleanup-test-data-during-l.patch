From 3e52fcd9bcbbf7f045840dfbc55e08afb2f0f3f9 Mon Sep 17 00:00:00 2001
From: "Thulasimani,Sivakumar" <sivakumar.thulasimani@intel.com>
Date: Thu, 24 Sep 2015 14:20:06 +0530
Subject: [PATCH 08/28] FOR_UPSTREAM [VPG]: drm/i915: Cleanup test data during
 long/short hotplug

Automated test data that is updated when a test is requested is not
cleared till next automated test request is received which can cause
various problems. This patch fixes this by clearing this during the
next short pulse and on hot unplug.

For example: If the sink requested link_training test as part of
automated test requests, the internal variable will be updated
for that short pulse but is not cleared. if the sink issues
short pulse for any other purpose later since our link_training
test varialbe is still set it will force the driver to do
another link training which will result in anything from
temporary blanking to repeated loop of interrupt and
link training.

Change-Id: I4c065e20dc081ae0aeced683eb50a53eabee28ef
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-9749
Signed-off-by: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
Reviewed-on: https://android.intel.com:443/439681
---
 drivers/gpu/drm/i915/intel_dp.c | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index 5b5fda5..86f62bd 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -4349,12 +4349,6 @@ static void intel_dp_handle_test_request(struct intel_dp *intel_dp,
 	uint8_t rxdata = 0;
 	int status = 0;
 
-	intel_dp->compliance_test_active = 0;
-	intel_dp->compliance_test_type = 0;
-	intel_dp->compliance_test_data = 0;
-
-	intel_dp->aux.i2c_nack_count = 0;
-	intel_dp->aux.i2c_defer_count = 0;
 
 	status = drm_dp_dpcd_read(&intel_dp->aux, DP_TEST_REQUEST, &rxdata, 1);
 	if (status <= 0) {
@@ -4420,6 +4414,9 @@ intel_dp_check_link_status(struct intel_dp *intel_dp, bool *perform_full_detect)
 	bool ret;
 
 	*perform_full_detect = false;
+	intel_dp->compliance_test_active = 0;
+	intel_dp->compliance_test_type = 0;
+	intel_dp->compliance_test_data = 0;
 
 	/* Try to read receiver status if the link appears to be up */
 	if (!intel_dp_get_link_status(intel_dp, link_status)) {
@@ -4688,6 +4685,13 @@ intel_dp_detect(struct drm_connector *connector, bool force)
 		status = g4x_dp_detect(intel_dp);
 
 	if (status != connector_status_connected) {
+		intel_dp->compliance_test_active = 0;
+		intel_dp->compliance_test_type = 0;
+		intel_dp->compliance_test_data = 0;
+
+		intel_dp->aux.i2c_nack_count = 0;
+		intel_dp->aux.i2c_defer_count = 0;
+
 		intel_dp->has_audio =  false;
 		goto out;
 	}
-- 
1.9.1

