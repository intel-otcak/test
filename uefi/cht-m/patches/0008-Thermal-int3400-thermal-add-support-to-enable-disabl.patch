From 2a9a5bc1c77ae30873ae9d71714e227da3dc69ae Mon Sep 17 00:00:00 2001
From: Zhang Rui <rui.zhang@intel.com>
Date: Mon, 24 Mar 2014 00:06:28 +0800
Subject: [PATCH 08/23] Thermal: int3400 thermal: add support to
 enable/disable thermal control

Change-Id: I26dd6fa5b6805b683088625a7f0e13b26630143c
Signed-off-by: Zhang Rui <rui.zhang@intel.com>
---
 drivers/thermal/intel_thermal/int3400_thermal.c |   76 ++++++++++++++++++++++-
 1 file changed, 75 insertions(+), 1 deletion(-)

diff --git a/drivers/thermal/intel_thermal/int3400_thermal.c b/drivers/thermal/intel_thermal/int3400_thermal.c
index 2cb47cd..3f41cf4 100644
--- a/drivers/thermal/intel_thermal/int3400_thermal.c
+++ b/drivers/thermal/intel_thermal/int3400_thermal.c
@@ -62,6 +62,7 @@ static u8* int3400_thermal_uuids[INT3400_THERMAL_MAXIMUM_UUID] = {
 struct int3400_thermal_priv {
 	struct acpi_device *adev;
 	struct thermal_zone_device *thermal;
+	int mode;
 	int art_count;
 	struct art *arts;
 	int trt_count;
@@ -115,6 +116,36 @@ end:
 	return result;
 }
 
+static int int3400_thermal_run_osc(acpi_handle handle,
+                                  enum int3400_thermal_uuid uuid, bool enable)
+{
+	u32 ret, buf[2];
+	acpi_status status;
+	int result = 0;
+	struct acpi_osc_context context = {
+		.uuid_str = int3400_thermal_uuids[uuid],
+		.rev = 1,
+		.cap.length = 8,
+	};
+
+	buf[OSC_QUERY_DWORD] = 0;
+	buf[OSC_SUPPORT_DWORD] = enable;
+
+	context.cap.pointer = buf;
+
+	status = acpi_run_osc(handle, &context);
+	if (ACPI_SUCCESS(status)) {
+		ret = *((u32 *)(context.ret.pointer + 4));
+		if (ret != enable)
+			result = -EPERM;
+	} else
+		result = -EPERM;
+
+	kfree(context.ret.pointer);
+	return result;
+}
+
+
 static int parse_art(struct int3400_thermal_priv *priv)
 {
 	acpi_handle handle = priv->adev->handle;
@@ -251,6 +282,45 @@ static int int3400_thermal_get_temp(struct thermal_zone_device *thermal,
 	return 0;
 }
 
+static int int3400_thermal_get_mode(struct thermal_zone_device *thermal,
+				enum thermal_device_mode *mode)
+{
+	struct int3400_thermal_priv *priv = thermal->devdata; 
+
+	if (!priv)
+		return -EINVAL;
+
+	*mode = priv->mode;
+
+        return 0;
+}
+
+static int int3400_thermal_set_mode(struct thermal_zone_device *thermal,
+                                enum thermal_device_mode mode)
+{
+	struct int3400_thermal_priv *priv = thermal->devdata;
+	bool enable;
+	int result = 0;
+
+	if (!priv)
+                return -EINVAL;
+
+	if (mode == THERMAL_DEVICE_ENABLED)
+		enable = true;
+	else if (mode == THERMAL_DEVICE_DISABLED)
+		enable = false;
+	else
+		return -EINVAL;
+
+	if (enable != priv->mode) {
+		priv->mode = enable;
+		/* currently, only PASSIVE COOLING is supported */
+		result = int3400_thermal_run_osc(priv->adev->handle,
+					INT3400_THERMAL_PASSIVE_1, enable);
+        }
+        return result;
+}
+
 static struct thermal_zone_device_ops int3400_thermal_ops = {
         .get_temp = int3400_thermal_get_temp,
 };
@@ -289,8 +359,12 @@ static int int3400_thermal_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, priv);
 
+	if (priv->uuid_bitmap & 1 << INT3400_THERMAL_PASSIVE_1) {
+		int3400_thermal_ops.get_mode = int3400_thermal_get_mode;
+		int3400_thermal_ops.set_mode = int3400_thermal_set_mode;
+	}
 	priv->thermal = thermal_zone_device_register("INT3400 Thermal", 0, 0,
-						NULL, &int3400_thermal_ops,
+						priv, &int3400_thermal_ops,
 						&int3400_thermal_params, 0, 0);
 	if (IS_ERR(priv->thermal)) {
 		result = PTR_ERR(priv->thermal);
-- 
1.7.9.5

