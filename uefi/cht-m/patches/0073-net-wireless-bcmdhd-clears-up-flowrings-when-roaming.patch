From 8196768f0c7dd380274988186c12dd51c438498e Mon Sep 17 00:00:00 2001
From: Ecco park <eccopark@broadcom.com>
Date: Tue, 9 Sep 2014 15:51:00 -0700
Subject: [PATCH 73/77] net: wireless: bcmdhd clears up flowrings when roaming
 completed

1) flowring doesn't clean up when dut roaming.
2) If user do roaming continuously, flowring created continuously,
   previous flowring remained until legacy connection disconnected.
3) 17441235 Driver prints not-associated errors when it is not asociated
Signed-off-by: Ecco park <eccopark@broadcom.com>

Change-Id: I471e042951498e814c08f20a8f85bccd2a64555e
Signed-off-by: Iliyan Malchev <malchev@google.com>
---
 drivers/net/wireless/bcmdhd/dhd_cfg80211.c | 13 +++++++++++++
 drivers/net/wireless/bcmdhd/dhd_cfg80211.h |  3 +++
 drivers/net/wireless/bcmdhd/dhd_msgbuf.c   |  4 +++-
 drivers/net/wireless/bcmdhd/wl_cfg80211.c  |  3 +++
 4 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/bcmdhd/dhd_cfg80211.c b/drivers/net/wireless/bcmdhd/dhd_cfg80211.c
index 63b55cdda1c4..eb98e28dbe8f 100644
--- a/drivers/net/wireless/bcmdhd/dhd_cfg80211.c
+++ b/drivers/net/wireless/bcmdhd/dhd_cfg80211.c
@@ -53,6 +53,9 @@ static int dhd_dongle_up = FALSE;
 #include <wlioctl.h>
 #include <brcm_nl80211.h>
 #include <dhd_cfg80211.h>
+#ifdef PCIE_FULL_DONGLE
+#include <dhd_flowring.h>
+#endif
 
 static s32 wl_dongle_up(struct net_device *ndev);
 static s32 wl_dongle_down(struct net_device *ndev);
@@ -218,6 +221,16 @@ default_conf_out:
 
 }
 
+#ifdef PCIE_FULL_DONGLE
+void wl_roam_flowring_cleanup(struct bcm_cfg80211 *cfg)
+{
+	int hostidx = 0;
+	dhd_pub_t *dhd_pub =  (dhd_pub_t *)(cfg->pub);
+	hostidx = dhd_ifidx2hostidx(dhd_pub->info, hostidx);
+	dhd_flow_rings_delete(dhd_pub, hostidx);
+}
+#endif
+
 #ifdef CONFIG_NL80211_TESTMODE
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 11, 0))
 int dhd_cfg80211_testmode_cmd(struct wiphy *wiphy, struct wireless_dev *wdev, void *data, int len)
diff --git a/drivers/net/wireless/bcmdhd/dhd_cfg80211.h b/drivers/net/wireless/bcmdhd/dhd_cfg80211.h
index d0fd59dc80ce..bf89f12ee60b 100644
--- a/drivers/net/wireless/bcmdhd/dhd_cfg80211.h
+++ b/drivers/net/wireless/bcmdhd/dhd_cfg80211.h
@@ -44,6 +44,9 @@ s32 dhd_cfg80211_down(struct bcm_cfg80211 *cfg);
 s32 dhd_cfg80211_set_p2p_info(struct bcm_cfg80211 *cfg, int val);
 s32 dhd_cfg80211_clean_p2p_info(struct bcm_cfg80211 *cfg);
 s32 dhd_config_dongle(struct bcm_cfg80211 *cfg);
+#ifdef PCIE_FULL_DONGLE
+void wl_roam_flowring_cleanup(struct bcm_cfg80211 *cfg);
+#endif
 
 #ifdef CONFIG_NL80211_TESTMODE
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 11, 0))
diff --git a/drivers/net/wireless/bcmdhd/dhd_msgbuf.c b/drivers/net/wireless/bcmdhd/dhd_msgbuf.c
index 2803f8a42d05..a49c705626fb 100644
--- a/drivers/net/wireless/bcmdhd/dhd_msgbuf.c
+++ b/drivers/net/wireless/bcmdhd/dhd_msgbuf.c
@@ -2165,7 +2165,9 @@ int dhd_prot_ioctl(dhd_pub_t *dhd, int ifidx, wl_ioctl_t * ioc, void * buf, int
 	if (ret >= 0)
 		ret = 0;
 	else {
-		DHD_ERROR(("%s: status ret value is %d \n", __FUNCTION__, ret));
+		if (ret != BCME_NOTASSOCIATED) {
+			DHD_ERROR(("%s: status ret value is %d \n", __FUNCTION__, ret));
+		}
 		dhd->dongle_error = ret;
 	}
 
diff --git a/drivers/net/wireless/bcmdhd/wl_cfg80211.c b/drivers/net/wireless/bcmdhd/wl_cfg80211.c
index ee699833f4e9..891a3d0fd103 100644
--- a/drivers/net/wireless/bcmdhd/wl_cfg80211.c
+++ b/drivers/net/wireless/bcmdhd/wl_cfg80211.c
@@ -8780,6 +8780,9 @@ wl_bss_roaming_done(struct bcm_cfg80211 *cfg, struct net_device *ndev,
 #endif
 	printk("wl_bss_roaming_done succeeded to " MACDBG "\n",
 		MAC2STRDBG((u8*)(&e->addr)));
+#ifdef PCIE_FULL_DONGLE
+	wl_roam_flowring_cleanup(cfg);
+#endif /* PCIE_FULL_DONGLE */
 
 	cfg80211_roamed(ndev,
 #if (LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 39))
-- 
2.0.3

