From 5b2575e1b2074be142cb3b78068e8d43f3728f23 Mon Sep 17 00:00:00 2001
From: Andy Ross <andrew.j.ross@intel.com>
Date: Wed, 30 Apr 2014 16:30:01 -0700
Subject: [PATCH 012/117] atomisp imx: probe via ACPI

Load the imx driver via ACPI enumeration.  Fetch the platform data
block directly under those circumstances.

Requires porting work on platform_imx134 to break dependence on legacy
bits of the MCG platform API.

Signed-off-by: Andy Ross <andrew.j.ross@intel.com>
---
 arch/x86/platform/intel-mid/Makefile               |   2 +-
 arch/x86/platform/intel-mid/platform_imx134.c      | 101 +++++++++++----------
 .../camera/drivers/media/i2c/imx/imx.c             |  33 ++++++-
 3 files changed, 88 insertions(+), 48 deletions(-)

diff --git a/arch/x86/platform/intel-mid/Makefile b/arch/x86/platform/intel-mid/Makefile
index 88d00d9..b3bf80a 100644
--- a/arch/x86/platform/intel-mid/Makefile
+++ b/arch/x86/platform/intel-mid/Makefile
@@ -1,7 +1,7 @@
 obj-$(CONFIG_X86_INTEL_MID) += intel-mid.o intel_mid_vrtc.o mfld.o mrfl.o
 obj-$(CONFIG_EARLY_PRINTK_INTEL_MID) += early_printk_intel_mid.o
 
-obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o atomisp_gmin_platform.o
+obj-$(CONFIG_GMIN_INTEL_MID) += intel_mid_pcihelpers.o platform_imx134.o atomisp_gmin_platform.o
 
 
 # SFI specific code
diff --git a/arch/x86/platform/intel-mid/platform_imx134.c b/arch/x86/platform/intel-mid/platform_imx134.c
index 4bc36cc..ad5bc6a 100644
--- a/arch/x86/platform/intel-mid/platform_imx134.c
+++ b/arch/x86/platform/intel-mid/platform_imx134.c
@@ -14,7 +14,6 @@
 #include <linux/i2c.h>
 #include <linux/atomisp_platform.h>
 #include <linux/regulator/consumer.h>
-#include <asm/intel_scu_ipcutil.h>
 #include <asm/intel-mid.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_mid_pmic.h>
@@ -23,9 +22,6 @@
 #include <linux/vlv2_plat_clock.h>
 #endif
 
-#include "platform_camera.h"
-#include "platform_imx134.h"
-
 /* workround - pin defined for byt */
 #define CAMERA_0_RESET 126
 #define CAMERA_0_RESET_CRV2 119
@@ -75,6 +71,40 @@ static int camera_reset;
 static int camera_power_down;
 static int camera_vprog1_on;
 
+/* Cloned from MCG platform_camera.c because it's small and
+ * self-contained.  All it does is maintain the V4L2 subdev hostdate
+ * pointer */
+static int camera_sensor_csi(struct v4l2_subdev *sd, u32 port,
+                        u32 lanes, u32 format, u32 bayer_order, int flag)
+{
+        struct i2c_client *client = v4l2_get_subdevdata(sd);
+        struct camera_mipi_info *csi = NULL;
+
+        if (flag) {
+                csi = kzalloc(sizeof(*csi), GFP_KERNEL);
+                if (!csi) {
+                        dev_err(&client->dev, "out of memory\n");
+                        return -ENOMEM;
+                }
+                csi->port = port;
+                csi->num_lanes = lanes;
+                csi->input_format = format;
+                csi->raw_bayer_order = bayer_order;
+                v4l2_set_subdev_hostdata(sd, (void *)csi);
+                csi->metadata_format = ATOMISP_INPUT_FORMAT_EMBEDDED;
+                csi->metadata_effective_width = NULL;
+                dev_info(&client->dev,
+                         "camera pdata: port: %d lanes: %d order: %8.8x\n",
+                         port, lanes, bayer_order);
+        } else {
+                csi = v4l2_get_subdev_hostdata(sd);
+                kfree(csi);
+        }
+
+        return 0;
+}
+
+
 /*
  * MRFLD VV primary camera sensor - IMX134 platform data
  */
@@ -93,12 +123,11 @@ static struct i2c_client *i2c_find_client_by_name(char *name)
 	return dev ? to_i2c_client(dev) : NULL;
 }
 
-static enum pmic_ids camera_pmic_probe()
+static enum pmic_ids camera_pmic_probe(void)
 {
 	/* search by client name */
 	struct i2c_client *client;
-	if (spid.hardware_id != BYT_TABLET_BLK_CRV2 ||
-		i2c_find_client_by_name(PMIC_HID_ROHM))
+	if (i2c_find_client_by_name(PMIC_HID_ROHM))
 		return PMIC_ROHM;
 
 	client = i2c_find_client_by_name(PMIC_HID_XPOWER);
@@ -211,41 +240,28 @@ static int imx134_gpio_ctrl(struct v4l2_subdev *sd, int flag)
 {
 	int ret;
 
-	if (!IS_BYT) {
-		if (camera_reset < 0) {
-			ret = camera_sensor_gpio(-1, GP_CAMERA_0_RESET,
-					GPIOF_DIR_OUT, 1);
-			if (ret < 0)
-				return ret;
-			camera_reset = ret;
-		}
-	} else {
-		/*
-		 * FIXME: WA using hardcoded GPIO value here.
-		 * The GPIO value would be provided by ACPI table, which is
-		 * not implemented currently
-		 */
-		if (camera_reset < 0) {
-			if (spid.hardware_id == BYT_TABLET_BLK_CRV2)
-				camera_reset = CAMERA_0_RESET_CRV2;
-			else
-				camera_reset = CAMERA_0_RESET;
+	/*
+	 * FIXME: WA using hardcoded GPIO value here.
+	 * The GPIO value would be provided by ACPI table, which is
+	 * not implemented currently
+	 */
+	if (camera_reset < 0) {
+		camera_reset = CAMERA_0_RESET;
 
-			ret = gpio_request(camera_reset, "camera_reset");
-			if (ret) {
-				pr_err("%s: failed to request gpio(pin %d)\n",
-				__func__, CAMERA_0_RESET);
-				return -EINVAL;
-			}
-		}
-
-		ret = gpio_direction_output(camera_reset, 1);
+		ret = gpio_request(camera_reset, "camera_reset");
 		if (ret) {
-			pr_err("%s: failed to set gpio(pin %d) direction\n",
-				__func__, camera_reset);
-			gpio_free(camera_reset);
+			pr_err("%s: failed to request gpio(pin %d)\n",
+			       __func__, CAMERA_0_RESET);
+			return -EINVAL;
 		}
 	}
+
+	ret = gpio_direction_output(camera_reset, 1);
+	if (ret) {
+		pr_err("%s: failed to set gpio(pin %d) direction\n",
+		       __func__, camera_reset);
+		gpio_free(camera_reset);
+	}
 	if (flag) {
 		gpio_set_value(camera_reset, 1);
 		/* imx134 core silicon initializing time - t1+t2+t3
@@ -278,10 +294,6 @@ static int imx134_flisclk_ctrl(struct v4l2_subdev *sd, int flag)
 		return vlv2_plat_configure_clock(OSC_CAM0_CLK, CLK_ON);
 	}
 	return vlv2_plat_configure_clock(OSC_CAM0_CLK, CLK_OFF);
-#elif defined(CONFIG_INTEL_SCU_IPC_UTIL)
-	static const unsigned int clock_khz = 19200;
-	return intel_scu_ipc_osc_clk(OSC_CLK_CAM0,
-			flag ? clock_khz : 0);
 #else
 	pr_err("imx134 clock is not set.\n");
 	return 0;
@@ -304,8 +316,6 @@ static int imx134_power_ctrl(struct v4l2_subdev *sd, int flag)
 						"Failed to enable regulator\n");
 				return ret;
 			}
-#elif defined(CONFIG_INTEL_SCU_IPC_UTIL)
-			ret = intel_scu_ipc_msic_vprog1(1);
 #else
 			pr_err("imx134 power is not set.\n");
 #endif
@@ -325,8 +335,6 @@ static int imx134_power_ctrl(struct v4l2_subdev *sd, int flag)
 						"Failed to enable regulator\n");
 				return ret;
 			}
-#elif defined(CONFIG_INTEL_SCU_IPC_UTIL)
-			ret = intel_scu_ipc_msic_vprog1(0);
 #else
 			pr_err("imx134 power is not set.\n");
 #endif
@@ -400,3 +408,4 @@ void *imx134_platform_data(void *info)
 #endif
 	return &imx134_sensor_platform_data;
 }
+EXPORT_SYMBOL_GPL(imx134_platform_data);
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
index d0f1db7..772479b 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/imx/imx.c
@@ -38,11 +38,13 @@
 #include <linux/string.h>
 #include <linux/slab.h>
 #include <linux/types.h>
+#include <linux/acpi.h>
 #include <media/v4l2-chip-ident.h>
 #include <media/v4l2-ctrls.h>
 #include <media/v4l2-device.h>
 #include "imx.h"
 
+void *imx134_platform_data(void *info); /* From platform_imx134.c */
 
 static enum atomisp_bayer_order imx_bayer_order_mapping[] = {
 	atomisp_bayer_order_rggb,
@@ -2234,6 +2236,11 @@ static int imx_probe(struct i2c_client *client,
 	int ret;
 	char *msr_file_name = NULL;
 
+	/* DEBUG */
+	dev_info(&client->dev, "imx_probe adapter %d addr 0x%x acpi %s\n",
+		 client->adapter->nr, client->addr,
+		 dev_name(&ACPI_COMPANION(&client->dev)->dev));
+
 	/* allocate sensor device & init sub device */
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
@@ -2243,7 +2250,14 @@ static int imx_probe(struct i2c_client *client,
 
 	mutex_init(&dev->input_lock);
 
-	dev->i2c_id = id->driver_data;
+	if (id) {
+		dev->i2c_id = id->driver_data;
+	} else {
+		/* FIXME: ACPI-probed devices don't get this, need to find a
+		 * different mechanism. */
+		dev_info(&client->dev, "No i2c_device_id, defaulting to IMX134\n");
+		dev->i2c_id = IMX134_ID;
+	}
 	dev->fmt_idx = 0;
 	dev->sensor_id = IMX_ID_DEFAULT;
 	dev->vcm_driver = &imx_vcms[IMX_ID_DEFAULT];
@@ -2255,6 +2269,15 @@ static int imx_probe(struct i2c_client *client,
 				       client->dev.platform_data);
 		if (ret)
 			goto out_free;
+	} else if (ACPI_COMPANION(&client->dev)) {
+		// If no SFI firmware, grab the platform struct
+		// directly and configure via ACPI/EFIvars instead.
+		//
+		// Works only with IMX134 for now.
+		ret = imx_s_config(&dev->sd, client->irq,
+				   imx134_platform_data(NULL));
+		if (ret)
+			goto out_free;
 	}
 	imx_info = v4l2_get_subdev_hostdata(&dev->sd);
 
@@ -2318,10 +2341,18 @@ static const struct i2c_device_id imx_ids[] = {
 
 MODULE_DEVICE_TABLE(i2c, imx_ids);
 
+static struct acpi_device_id imx_acpi_match[] = {
+	{ "INTCF1B" },
+	{},
+};
+
+MODULE_DEVICE_TABLE(acpi, imx_acpi_match);
+
 static struct i2c_driver imx_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = IMX_DRIVER,
+		.acpi_match_table = ACPI_PTR(imx_acpi_match),
 	},
 	.probe = imx_probe,
 	.remove = imx_remove,
-- 
1.9.3

