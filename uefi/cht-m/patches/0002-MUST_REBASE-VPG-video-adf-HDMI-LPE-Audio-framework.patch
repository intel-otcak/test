From ae937668b79b66a034512b8c630841635b7ec06e Mon Sep 17 00:00:00 2001
Message-Id: <ae937668b79b66a034512b8c630841635b7ec06e.1424394676.git.feitong.yi@intel.com>
In-Reply-To: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
References: <00f4430a265007e8e2c016cc7926bf530835ea30.1424394676.git.feitong.yi@intel.com>
From: Akashdeep Sharma <akashdeep.sharma@intel.com>
Date: Mon, 2 Feb 2015 10:04:27 +0530
Subject: [PATCH 02/61] MUST_REBASE [VPG]: video/adf: HDMI LPE Audio framework

Framework for registering callbacks between ADF driver and HDMI
LPE Audio driver. Moving HDMI audio driver event type enum
definition from gen_hdmi_pipe.h to gen_hdmi_audio.h.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5532
Change-Id: I0d8c78c5247bfa99c50443b0ada7ce2cef70fb09
Signed-off-by: Akashdeep Sharma <akashdeep.sharma@intel.com>
---
 drivers/video/adf/intel/core/common/hdmi/Makefile  |    1 +
 .../adf/intel/core/common/hdmi/gen_hdmi_audio.c    |  223 ++++++++++++++++++++
 .../include/core/common/hdmi/gen_hdmi_audio.h      |   89 ++++++++
 .../intel/include/core/common/hdmi/gen_hdmi_pipe.h |   11 -
 .../video/adf/intel/include/core/vlv/chv_dc_regs.h |    3 +
 5 files changed, 316 insertions(+), 11 deletions(-)
 create mode 100644 drivers/video/adf/intel/core/common/hdmi/gen_hdmi_audio.c
 create mode 100644 drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_audio.h

diff --git a/drivers/video/adf/intel/core/common/hdmi/Makefile b/drivers/video/adf/intel/core/common/hdmi/Makefile
index 5e9989e..9dc358e 100644
--- a/drivers/video/adf/intel/core/common/hdmi/Makefile
+++ b/drivers/video/adf/intel/core/common/hdmi/Makefile
@@ -9,4 +9,5 @@ ifdef CONFIG_ADF_INTEL_VLV
 	obj-y += gen_hdmi_pipe_ops.o
 	obj-y += gen_hdmi_edid.o
 	obj-y += gen_hdmi_hotplug.o
+	obj-y += gen_hdmi_audio.o
 endif
diff --git a/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_audio.c b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_audio.c
new file mode 100644
index 0000000..adf7f37
--- /dev/null
+++ b/drivers/video/adf/intel/core/common/hdmi/gen_hdmi_audio.c
@@ -0,0 +1,223 @@
+/*
+ * Copyright (C) 2014, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Create on 21 Jan 2015
+ * Author: Akashdeep Sharma <akashdeep.sharma@intel.com>
+ */
+
+#include <core/common/hdmi/gen_hdmi_audio.h>
+#include <core/common/hdmi/gen_hdmi_pipe.h>
+#include <core/vlv/vlv_dc_regs.h>
+#include <core/vlv/chv_dc_regs.h>
+#include <intel_adf.h>
+
+
+/* Audio register range 0x65000 to 0x65FFF */
+#define IS_HDMI_AUDIO_REG(reg) ((reg >= 0x65000) && (reg < 0x65FFF))
+
+static struct hdmi_audio_priv hdmi_priv;
+
+void adf_hdmi_audio_signal_event(enum had_event_type event)
+{
+	pr_debug("ADF: HDMI:%s: event type= %d\n", __func__, event);
+	if (hdmi_priv.callbacks) {
+		(hdmi_priv.callbacks)
+				(event, hdmi_priv.had_pvt_data);
+	}
+}
+
+/**
+ * mid_hdmi_audio_get_caps:
+ * used to return the HDMI audio capabilities.
+ * e.g. resolution, frame rate.
+ */
+static int adf_hdmi_audio_get_caps(enum had_caps_list get_element,
+		void *capabilities)
+{
+	pr_debug("ADF: HDMI:%s\n", __func__);
+
+	switch (get_element) {
+	case HAD_GET_ELD:
+		break;
+	case HAD_GET_SAMPLING_FREQ:
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+/**
+ * hdmi_audio_get_register_base
+ * used to get the current hdmi base address
+ */
+int adf_audio_get_register_base(uint32_t *reg_base)
+{
+	/*
+	 * HDMI audio LPE register hardcoded to pipe C for CHV.
+	 * Audio driver needs to know which pipe to route audio to
+	 */
+	u32 reg_address = ADF_HDMI_AUDIO_LPE_C_CONFIG;
+	pr_debug("ADF: HDMI:%s\n", __func__);
+
+	*reg_base = reg_address;
+	return 0;
+}
+
+/**
+ * mid_hdmi_audio_set_caps:
+ * used to set the HDMI audio capabilities.
+ * e.g. Audio INT.
+ */
+static int adf_hdmi_audio_set_caps(enum had_caps_list set_element,
+		void *capabilties)
+{
+	int ret = 0;
+	pr_debug("ADF: HDMI:%s\n", __func__);
+
+	switch (set_element) {
+	case HAD_SET_ENABLE_AUDIO:
+		break;
+	case HAD_SET_DISABLE_AUDIO:
+		break;
+	case HAD_SET_ENABLE_AUDIO_INT:
+		break;
+	case HAD_SET_DISABLE_AUDIO_INT:
+		break;
+	default:
+		break;
+	}
+
+	return ret;
+}
+
+/**
+ * mid_hdmi_audio_write:
+ * used to write into display controller HDMI audio registers.
+ */
+static int adf_hdmi_audio_write(uint32_t reg, uint32_t val)
+{
+	int ret = 0;
+	pr_debug("ADF: HDMI:%s: reg=%x, val=%x\n", __func__, reg, val);
+
+	if (IS_HDMI_AUDIO_REG(reg))
+		REG_WRITE((CHV_DISPLAY_BASE + reg), val);
+	else
+		return -EINVAL;
+
+	return ret;
+}
+
+/**
+ * mid_hdmi_audio_read:
+ * used to get the register value read
+ * from display controller HDMI audio registers.
+ */
+static int adf_hdmi_audio_read(uint32_t reg, uint32_t *val)
+{
+	int ret = 0;
+	pr_debug("ADF: HDMI:%s: reg=%x\n", __func__, reg);
+
+	if (IS_HDMI_AUDIO_REG(reg))
+		*val = REG_READ(CHV_DISPLAY_BASE + reg);
+	else
+		return -EINVAL;
+
+	return ret;
+}
+
+/**
+ * mid_hdmi_audio_rmw:
+ * used to update the masked bits in display
+ * controller HDMI audio registers .
+ */
+static int adf_hdmi_audio_rmw(uint32_t reg,
+				uint32_t val, uint32_t mask)
+{
+	int ret = 0;
+	u32 val_tmp;
+	pr_debug("ADF: HDMI:%s: reg=%x, val=%x\n", __func__, reg, val);
+
+	if (IS_HDMI_AUDIO_REG(reg)) {
+		val_tmp = (val & mask) |
+			(REG_READ(CHV_DISPLAY_BASE + reg) & ~mask);
+		REG_WRITE((CHV_DISPLAY_BASE + reg), val_tmp);
+	} else {
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static struct  hdmi_audio_registers_ops hdmi_audio_reg_ops = {
+	.hdmi_audio_get_register_base = adf_audio_get_register_base,
+	.hdmi_audio_read_register = adf_hdmi_audio_read,
+	.hdmi_audio_write_register = adf_hdmi_audio_write,
+	.hdmi_audio_read_modify = adf_hdmi_audio_rmw,
+};
+
+static struct hdmi_audio_query_set_ops hdmi_audio_get_set_ops = {
+	.hdmi_audio_get_caps = adf_hdmi_audio_get_caps,
+	.hdmi_audio_set_caps = adf_hdmi_audio_set_caps,
+};
+
+int adf_hdmi_audio_setup(
+	void *callbacks,
+	void *r_ops, void *q_ops)
+{
+	had_event_call_back audio_callbacks = callbacks;
+	struct hdmi_audio_registers_ops *reg_ops = r_ops;
+	struct hdmi_audio_query_set_ops *query_ops = q_ops;
+
+	int ret = 0;
+
+	pr_debug("ADF: HDMI:%s\n", __func__);
+
+	reg_ops->hdmi_audio_get_register_base =
+			(hdmi_audio_reg_ops.hdmi_audio_get_register_base);
+	reg_ops->hdmi_audio_read_register =
+			(hdmi_audio_reg_ops.hdmi_audio_read_register);
+	reg_ops->hdmi_audio_write_register =
+			(hdmi_audio_reg_ops.hdmi_audio_write_register);
+	reg_ops->hdmi_audio_read_modify =
+			(hdmi_audio_reg_ops.hdmi_audio_read_modify);
+	query_ops->hdmi_audio_get_caps =
+			hdmi_audio_get_set_ops.hdmi_audio_get_caps;
+	query_ops->hdmi_audio_set_caps =
+			hdmi_audio_get_set_ops.hdmi_audio_set_caps;
+
+	hdmi_priv.callbacks = audio_callbacks;
+	return ret;
+}
+EXPORT_SYMBOL(adf_hdmi_audio_setup);
+
+int adf_hdmi_audio_register(
+	void *drv,
+	void *had_data)
+{
+	struct snd_intel_had_interface *driver = drv;
+
+	pr_debug("ADF: HDMI:%s\n", __func__);
+
+	hdmi_priv.had_pvt_data = had_data;
+	hdmi_priv.had_interface = driver;
+
+	/*
+	 * The Audio driver is loading now and we need to notify
+	 * it if there is an HDMI device attached
+	 */
+
+	adf_hdmi_audio_signal_event(HAD_EVENT_HOT_PLUG);
+	return 0;
+}
+EXPORT_SYMBOL(adf_hdmi_audio_register);
diff --git a/drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_audio.h b/drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_audio.h
new file mode 100644
index 0000000..bc1157a
--- /dev/null
+++ b/drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_audio.h
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2014, Intel Corporation.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Create on 21 Jan 2015
+ * Author: Akashdeep Sharma <akashdeep.sharma@intel.com>
+ */
+
+#ifndef GEN_HDMI_AUDIO_H_
+#define GEN_HDMI_AUDIO_H_
+
+#include <linux/types.h>
+
+/* HDMI AUDIO INTERRUPT TYPE */
+#define HDMI_AUDIO_UNDERRUN     (1UL<<0)
+#define HDMI_AUDIO_BUFFER_DONE  (1UL<<1)
+
+enum had_caps_list {
+	HAD_GET_ELD = 1,
+	HAD_GET_SAMPLING_FREQ,
+	HAD_GET_DISPLAY_RATE,
+	HAD_GET_HDCP_STATUS,
+	HAD_GET_AUDIO_STATUS,
+	HAD_SET_ENABLE_AUDIO,
+	HAD_SET_DISABLE_AUDIO,
+	HAD_SET_ENABLE_AUDIO_INT,
+	HAD_SET_DISABLE_AUDIO_INT,
+	OTHERS_TBD,
+};
+
+enum had_event_type {
+	HAD_EVENT_HOT_PLUG = 1,
+	HAD_EVENT_HOT_UNPLUG,
+	HAD_EVENT_MODE_CHANGING,
+	HAD_EVENT_PM_CHANGING,
+	HAD_EVENT_AUDIO_BUFFER_DONE,
+	HAD_EVENT_AUDIO_BUFFER_UNDERRUN,
+	HAD_EVENT_QUERY_IS_AUDIO_BUSY,
+	HAD_EVENT_QUERY_IS_AUDIO_SUSPENDED,
+};
+
+/**
+ * HDMI Display Controller Audio Interface
+ */
+typedef int (*had_event_call_back)(enum had_event_type event_type,
+			void *ctxt_info);
+
+struct  hdmi_audio_registers_ops {
+	int (*hdmi_audio_get_register_base)(uint32_t *reg_base);
+	int (*hdmi_audio_read_register)(uint32_t reg_addr, uint32_t *data);
+	int (*hdmi_audio_write_register)(uint32_t reg_addr, uint32_t data);
+	int (*hdmi_audio_read_modify)(uint32_t reg_addr,
+			uint32_t data, uint32_t mask);
+};
+
+struct hdmi_audio_query_set_ops {
+	int (*hdmi_audio_get_caps)(enum had_caps_list query_element,
+					void *capabilties);
+	int (*hdmi_audio_set_caps)(enum had_caps_list set_element,
+					void *capabilties);
+};
+
+struct hdmi_audio_event {
+	int type;
+};
+
+struct snd_intel_had_interface {
+	const char *name;
+	int (*query)(void *had_data, struct hdmi_audio_event event);
+	int (*suspend)(void *had_data, struct hdmi_audio_event event);
+	int (*resume)(void *had_data);
+};
+
+struct hdmi_audio_priv {
+	had_event_call_back callbacks;
+	struct snd_intel_had_interface *had_interface;
+	void *had_pvt_data;
+};
+
+extern void adf_hdmi_audio_signal_event(enum had_event_type event);
+#endif /* GEN_HDMI_AUDIO_H_ */
diff --git a/drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_pipe.h b/drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_pipe.h
index 320d22f..05f35a1 100644
--- a/drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_pipe.h
+++ b/drivers/video/adf/intel/include/core/common/hdmi/gen_hdmi_pipe.h
@@ -26,17 +26,6 @@
 #define CHV_HDMI_MIN_CLK_KHZ	20000
 #define VSYNC_COUNT_MAX_MASK 0xffffff
 
-enum had_event_type {
-	HAD_EVENT_HOT_PLUG = 1,
-	HAD_EVENT_HOT_UNPLUG,
-	HAD_EVENT_MODE_CHANGING,
-	HAD_EVENT_PM_CHANGING,
-	HAD_EVENT_AUDIO_BUFFER_DONE,
-	HAD_EVENT_AUDIO_BUFFER_UNDERRUN,
-	HAD_EVENT_QUERY_IS_AUDIO_BUSY,
-	HAD_EVENT_QUERY_IS_AUDIO_SUSPENDED,
-};
-
 struct  avi_info_packet {
 	uint8_t header[HDMI_DIP_PACKET_HEADER_LEN];
 	union {
diff --git a/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h
index 38fb6e8..3f75524 100644
--- a/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/chv_dc_regs.h
@@ -110,4 +110,7 @@
 
 #define   SP_ENABLE                     (1<<31)
 
+/* Added for HDMI LPE Audio */
+#define ADF_HDMI_AUDIO_LPE_C_CONFIG	0x65900
+#define ADF_HDMI_AUDIO_LPE_B_CONFIG	0x65800
 #endif
-- 
1.7.9.5

