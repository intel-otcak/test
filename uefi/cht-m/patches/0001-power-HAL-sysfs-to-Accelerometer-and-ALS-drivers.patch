From 15bccc3959e25f6fa839a0491f3ccd9d4b4cfb2d Mon Sep 17 00:00:00 2001
From: "Richard A. Griffiths" <richard.a.griffiths@intel.com>
Date: Wed, 11 Jun 2014 16:46:05 -0700
Subject: [PATCH] power HAL sysfs to Accelerometer and ALS drivers

Add power HAL sysfs support to the kxcjk-1013 accelerometer
and the JSA1212 ambient light sensor drivers.

Signed-off-by: Richard A. Griffiths <richard.a.griffiths@intel.com>
---
 drivers/iio/accel/kxcjk-1013.c |   72 +++++++++++++++++++-------
 drivers/iio/light/jsa1212.c    |  110 +++++++++++++++++++++++++---------------
 2 files changed, 123 insertions(+), 59 deletions(-)

diff --git a/drivers/iio/accel/kxcjk-1013.c b/drivers/iio/accel/kxcjk-1013.c
index 879ceda8e776..850c84d55533 100644
--- a/drivers/iio/accel/kxcjk-1013.c
+++ b/drivers/iio/accel/kxcjk-1013.c
@@ -28,6 +28,7 @@
 #include <linux/iio/trigger.h>
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/triggered_buffer.h>
+#include <linux/power_hal_sysfs.h>
 
 #define KXCJK1013_DRV_NAME "kxcjk1013"
 #define KXCJK1013_IRQ_NAME "kxcjk1013_event"
@@ -558,6 +559,56 @@ static int kxcjk1013_acpi_gpio_probe(struct i2c_client *client,
 	return 0;
 }
 
+#ifdef CONFIG_PM_SLEEP
+static int kxcjk1013_suspend(struct device *dev)
+{
+	struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
+	struct kxcjk1013_data *data = iio_priv(indio_dev);
+
+	mutex_lock(&data->mutex);
+	kxcjk1013_set_mode(data, STANDBY);
+	mutex_unlock(&data->mutex);
+
+	return 0;
+}
+
+static int kxcjk1013_resume(struct device *dev)
+{
+	struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
+	struct kxcjk1013_data *data = iio_priv(indio_dev);
+
+	mutex_lock(&data->mutex);
+	kxcjk1013_set_mode(data, OPERATION);
+	mutex_unlock(&data->mutex);
+
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(kxcjk1013_pm_ops, kxcjk1013_suspend, NULL);
+#define KXCJK1013_PM_OPS (&kxcjk1013_pm_ops)
+#else
+#define KXCJK1013_PM_OPS NULL
+#endif
+
+#define POWER_HAL_SUSPEND_STATUS_LEN  1
+#define POWER_HAL_SUSPEND_ON         "1"
+#define POWER_SUSPEND_OFF        "0"
+
+static ssize_t kxcjk1013_power_hal_suspend_store(struct device *dev,
+       struct device_attribute *attr, const char *buf, size_t count)
+{
+
+       if (!strncmp(buf, POWER_HAL_SUSPEND_ON, POWER_HAL_SUSPEND_STATUS_LEN))
+               // Call device specific power HAL suspend routine
+		kxcjk1013_suspend(dev);
+       else if (!strncmp(buf, POWER_HAL_SUSPEND_OFF, POWER_HAL_SUSPEND_STATUS_LEN))
+               // Call device specific resume routine
+		kxcjk1013_resume(dev);
+       return count;
+}
+
+static DEVICE_POWER_HAL_SUSPEND_ATTR(kxcjk1013_power_hal_suspend_store);
+
 static int kxcjk1013_probe(struct i2c_client *client,
 		const struct i2c_device_id *id)
 {
@@ -637,6 +688,8 @@ skip_setup_trigger:
 		else
 			return ret;
 	}
+	device_create_file(&client->dev, &dev_attr_power_HAL_suspend);
+	register_power_hal_suspend_device(&client->dev);
 
 	return 0;
 
@@ -667,27 +720,12 @@ static int kxcjk1013_remove(struct i2c_client *client)
 	kxcjk1013_set_mode(data, STANDBY);
 	mutex_unlock(&data->mutex);
 
-	return 0;
-}
-
-#ifdef CONFIG_PM_SLEEP
-static int kxcjk1013_suspend(struct device *dev)
-{
-	struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
-	struct kxcjk1013_data *data = iio_priv(indio_dev);
-
-	mutex_lock(&data->mutex);
-	kxcjk1013_set_mode(data, STANDBY);
-	mutex_unlock(&data->mutex);
+	device_remove_file(&client->dev, &dev_attr_power_HAL_suspend);
+	unregister_power_hal_suspend_device(&client->dev);
 
 	return 0;
 }
 
-static SIMPLE_DEV_PM_OPS(kxcjk1013_pm_ops, kxcjk1013_suspend, NULL);
-#define KXCJK1013_PM_OPS (&kxcjk1013_pm_ops)
-#else
-#define KXCJK1013_PM_OPS NULL
-#endif
 
 static const struct acpi_device_id kx_acpi_match[] = {
 	{"KXCJ1013", 0},
diff --git a/drivers/iio/light/jsa1212.c b/drivers/iio/light/jsa1212.c
index 8f72c73d323f..3966f8b56a56 100644
--- a/drivers/iio/light/jsa1212.c
+++ b/drivers/iio/light/jsa1212.c
@@ -26,6 +26,7 @@
 #include <linux/acpi.h>
 #include <linux/gpio/consumer.h>
 
+#include <linux/power_hal_sysfs.h>
 #include <linux/iio/iio.h>
 #include <linux/iio/sysfs.h>
 #include <linux/iio/events.h>
@@ -1130,6 +1131,67 @@ static int jsa1212_acpi_gpio_probe(struct i2c_client *client,
 	return 0;
 }
 
+#ifdef CONFIG_PM_SLEEP
+static int jsa1212_suspend(struct device *dev)
+{
+	int ret;
+	struct jsa1212_data *data;
+
+	data = iio_priv(i2c_get_clientdata(to_i2c_client(dev)));
+
+	mutex_lock(&data->lock);
+
+	ret = jsa1212_send_cmd(data, JSA1212_CMD_SUSPEND);
+
+	if (ret < 0)
+		dev_err(dev, "send shutdown cmd failed\n");
+
+	mutex_unlock(&data->lock);
+
+	return ret;
+}
+
+static int jsa1212_resume(struct device *dev)
+{
+	int ret;
+	struct jsa1212_data *data;
+
+	data = iio_priv(i2c_get_clientdata(to_i2c_client(dev)));
+
+	mutex_lock(&data->lock);
+
+	ret = jsa1212_send_cmd(data, JSA1212_CMD_RESUME);
+
+	if (ret < 0)
+		dev_err(dev, "send resume cmd failed\n");
+
+	mutex_unlock(&data->lock);
+
+	return ret;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(jsa1212_pm_ops, jsa1212_suspend, jsa1212_resume);
+
+#define POWER_HAL_SUSPEND_STATUS_LEN  1
+#define POWER_HAL_SUSPEND_ON         "1"
+#define POWER_SUSPEND_OFF        "0"
+
+static ssize_t jsa1212_power_hal_suspend_store(struct device *dev,
+       struct device_attribute *attr, const char *buf, size_t count)
+{
+
+       if (!strncmp(buf, POWER_HAL_SUSPEND_ON, POWER_HAL_SUSPEND_STATUS_LEN))
+               // Call device specific power HAL suspend routine
+		jsa1212_suspend(dev);
+       else if (!strncmp(buf, POWER_HAL_SUSPEND_OFF, POWER_HAL_SUSPEND_STATUS_LEN))
+               // Call device specific resume routine
+		jsa1212_resume(dev);
+       return count;
+}
+
+static DEVICE_POWER_HAL_SUSPEND_ATTR(jsa1212_power_hal_suspend_store);
+
 static int jsa1212_probe(struct i2c_client *client,
 			     const struct i2c_device_id *id)
 {
@@ -1188,6 +1250,9 @@ static int jsa1212_probe(struct i2c_client *client,
 		return -ENODEV;
 	}
 
+	device_create_file(&client->dev, &dev_attr_power_HAL_suspend);
+	register_power_hal_suspend_device(&client->dev);
+	
 	return 0;
 }
 
@@ -1207,51 +1272,12 @@ static int jsa1212_remove(struct i2c_client *client)
 
 	mutex_unlock(&data->lock);
 
+	device_remove_file(&client->dev, &dev_attr_power_HAL_suspend);
+	unregister_power_hal_suspend_device(&client->dev);
+	
 	return ret;
 }
 
-#ifdef CONFIG_PM_SLEEP
-static int jsa1212_suspend(struct device *dev)
-{
-	int ret;
-	struct jsa1212_data *data;
-
-	data = iio_priv(i2c_get_clientdata(to_i2c_client(dev)));
-
-	mutex_lock(&data->lock);
-
-	ret = jsa1212_send_cmd(data, JSA1212_CMD_SUSPEND);
-
-	if (ret < 0)
-		dev_err(dev, "send shutdown cmd failed\n");
-
-	mutex_unlock(&data->lock);
-
-	return ret;
-}
-
-static int jsa1212_resume(struct device *dev)
-{
-	int ret;
-	struct jsa1212_data *data;
-
-	data = iio_priv(i2c_get_clientdata(to_i2c_client(dev)));
-
-	mutex_lock(&data->lock);
-
-	ret = jsa1212_send_cmd(data, JSA1212_CMD_RESUME);
-
-	if (ret < 0)
-		dev_err(dev, "send resume cmd failed\n");
-
-	mutex_unlock(&data->lock);
-
-	return ret;
-}
-#endif
-
-static SIMPLE_DEV_PM_OPS(jsa1212_pm_ops, jsa1212_suspend, jsa1212_resume);
-
 static const struct acpi_device_id jsa1212_acpi_match[] = {
 	{"JSA1212", 0},
 	{ },
-- 
1.7.9.5

