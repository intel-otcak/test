From 97d8113e6281f3f4a5e6b5c90cb315f30de8c783 Mon Sep 17 00:00:00 2001
From: Hans Holmberg <hans.holmberg@intel.com>
Date: Wed, 28 May 2014 11:11:50 +0200
Subject: [PATCH 050/117] ov5693: Add PMIC detection

Adds PMIC autodetection, and presumably support
for ROHM, TI and XPOWER.

Change-Id: I2ec5a5c614c37befea84eb2b2db7c66ab2bd7960
Signed-off-by: Hans Holmberg <hans.holmberg@intel.com>
---
 .../intel-mid/device_libs/platform_ov5693.c        | 257 +++++++++++++++++----
 .../camera/drivers/media/i2c/ov5693/ov5693.c       |  14 ++
 2 files changed, 224 insertions(+), 47 deletions(-)

diff --git a/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c b/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c
index f2f3543..aecbd9d 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_ov5693.c
@@ -11,9 +11,11 @@
  */
 
 #include <linux/acpi.h>
+#include <linux/i2c.h>
 #include <linux/gpio.h>
 #include <linux/delay.h>
 #include <linux/atomisp_platform.h>
+#include <linux/regulator/consumer.h>
 #include <asm/intel-mid.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_soc_pmic.h>
@@ -29,47 +31,170 @@
 #define CLK_19P2MHz 0x1
 #endif
 
-#define VPROG_2P8V 0x66
-#define VPROG_1P8V 0x5D
+#define ALDO1_SEL_REG	0x28
+#define ALDO1_CTRL3_REG	0x13
+#define ALDO1_2P8V	0x16
+#define ALDO1_CTRL3_SHIFT 0x05
+
+#define ELDO2_SEL_REG	0x1a
+#define ELDO2_CTRL2_REG 0x12
+#define ELDO2_1P8V	0x16
+#define ELDO2_CTRL2_SHIFT 0x01
+
+#define LDO9_REG	0x49
+#define LDO9_2P8V_ON	0x2f
+#define LDO9_2P8V_OFF	0x2e
+
+#define LDO10_REG	0x4a
+#define LDO10_1P8V_ON	0x59
+#define LDO10_1P8V_OFF	0x58
+
+/* PMIC HID */
+#define PMIC_HID_ROHM	"INT33FD:00"
+#define PMIC_HID_XPOWER	"INT33F4:00"
+#define PMIC_HID_TI	"INT33F5:00"
+
+static struct regulator *v1p8_reg;
+static struct regulator *v2p8_reg;
+
+enum pmic_ids {
+	PMIC_ROHM = 0,
+	PMIC_XPOWER,
+	PMIC_TI,
+	PMIC_MAX
+};
+
+static enum pmic_ids pmic_id;
 
 static int camera_vprog1_on;
 static struct gpio_desc *camera_reset;
 
-/* workaround - code duplication from platform_gc0339.c start -->*/
-#define VPROG_ENABLE 0x3
-#define VPROG_DISABLE 0x2
 
-enum camera_pmic_pin {
-        CAMERA_1P8V,
-        CAMERA_2P8V,
-        CAMERA_POWER_NUM,
-};
-/*
- * WA for BTY as simple VRF management
- */
-static int camera_set_pmic_power(enum camera_pmic_pin pin, bool flag)
+static int match_name(struct device *dev, void *data)
 {
-        u8 reg_addr[CAMERA_POWER_NUM] = {VPROG_1P8V, VPROG_2P8V};
-        u8 reg_value[2] = {VPROG_DISABLE, VPROG_ENABLE};
-        int val;
-        static DEFINE_MUTEX(mutex_power);
-        int ret = 0;
+	const char *name = data;
+	struct i2c_client *client = to_i2c_client(dev);
+	return !strncmp(client->name, name, strlen(client->name));
+}
 
-        if (pin >= CAMERA_POWER_NUM)
-                return -EINVAL;
+static struct i2c_client *i2c_find_client_by_name(char *name)
+{
+	struct device *dev = bus_find_device(&i2c_bus_type, NULL,
+						name, match_name);
+	return dev ? to_i2c_client(dev) : NULL;
+}
+
+static enum pmic_ids camera_pmic_probe(void)
+{
+	/* search by client name */
+	struct i2c_client *client;
+	if (i2c_find_client_by_name(PMIC_HID_ROHM))
+		return PMIC_ROHM;
 
-        mutex_lock(&mutex_power);
-        val = intel_soc_pmic_readb(reg_addr[pin]) & 0x3;
+	client = i2c_find_client_by_name(PMIC_HID_XPOWER);
+	if (client)
+		return PMIC_XPOWER;
 
-        if ((flag && (val == VPROG_DISABLE)) ||
-                (!flag && (val == VPROG_ENABLE)))
-                ret = intel_soc_pmic_writeb(reg_addr[pin], reg_value[flag]);
+	client = i2c_find_client_by_name(PMIC_HID_TI);
+	if (client)
+		return PMIC_TI;
 
-        mutex_unlock(&mutex_power);
-        return ret;
+	return PMIC_MAX;
 }
-/* <-- end */
 
+static int camera_pmic_set(bool flag)
+{
+	int val;
+	int ret = 0;
+	if (pmic_id == PMIC_MAX) {
+		pmic_id = camera_pmic_probe();
+		if (pmic_id == PMIC_MAX)
+			return -EINVAL;
+	}
+
+	if (flag) {
+		switch (pmic_id) {
+		case PMIC_ROHM:
+			ret = regulator_enable(v2p8_reg);
+			if (ret)
+				return ret;
+
+			ret = regulator_enable(v1p8_reg);
+			if (ret)
+				regulator_disable(v2p8_reg);
+			break;
+		case PMIC_XPOWER:
+			/* ALDO1 */
+			ret = intel_soc_pmic_writeb(ALDO1_SEL_REG, ALDO1_2P8V);
+			if (ret)
+				return ret;
+
+			/* PMIC Output CTRL 3 for ALDO1 */
+			val = intel_soc_pmic_readb(ALDO1_CTRL3_REG);
+			val |= (1 << ALDO1_CTRL3_SHIFT);
+			ret = intel_soc_pmic_writeb(ALDO1_CTRL3_REG, val);
+			if (ret)
+				return ret;
+
+			/* ELDO2 */
+			ret = intel_soc_pmic_writeb(ELDO2_SEL_REG, ELDO2_1P8V);
+			if (ret)
+				return ret;
+
+			/* PMIC Output CTRL 2 for ELDO2 */
+			val = intel_soc_pmic_readb(ELDO2_CTRL2_REG);
+			val |= (1 << ELDO2_CTRL2_SHIFT);
+			ret = intel_soc_pmic_writeb(ELDO2_CTRL2_REG, val);
+			break;
+		case PMIC_TI:
+			/* LDO9 */
+			ret = intel_soc_pmic_writeb(LDO9_REG, LDO9_2P8V_ON);
+			if (ret)
+				return ret;
+
+			/* LDO10 */
+			ret = intel_soc_pmic_writeb(LDO10_REG, LDO10_1P8V_ON);
+			if (ret)
+				return ret;
+			break;
+		default:
+			return -EINVAL;
+		}
+
+	} else {
+		switch (pmic_id) {
+		case PMIC_ROHM:
+			ret = regulator_disable(v2p8_reg);
+			ret += regulator_disable(v1p8_reg);
+			break;
+		case PMIC_XPOWER:
+			val = intel_soc_pmic_readb(ALDO1_CTRL3_REG);
+			val &= ~(1 << ALDO1_CTRL3_SHIFT);
+			ret = intel_soc_pmic_writeb(ALDO1_CTRL3_REG, val);
+			if (ret)
+				return ret;
+
+			val = intel_soc_pmic_readb(ELDO2_CTRL2_REG);
+			val &= ~(1 << ELDO2_CTRL2_SHIFT);
+			ret = intel_soc_pmic_writeb(ELDO2_CTRL2_REG, val);
+			break;
+		case PMIC_TI:
+			/* LDO9 */
+			ret = intel_soc_pmic_writeb(LDO9_REG, LDO9_2P8V_OFF);
+			if (ret)
+				return ret;
+
+			/* LDO10 */
+			ret = intel_soc_pmic_writeb(LDO10_REG, LDO10_1P8V_OFF);
+			if (ret)
+				return ret;
+			break;
+		default:
+			return -EINVAL;
+		}
+	}
+	return ret;
+}
 
 /*
  * OV5693 platform data
@@ -164,27 +289,28 @@ static int ov5693_power_ctrl(struct v4l2_subdev *sd, int flag)
 
 	if (flag) {
 		if (!camera_vprog1_on) {
-			/*
-			 * This should call VRF APIs.
-			 *
-			 * VRF not implemented for BTY, so call this
-			 * as WAs
-			 */
-			camera_set_pmic_power(CAMERA_2P8V, true);
-			camera_set_pmic_power(CAMERA_1P8V, true);
-			/* enable 1.8v power */
-			gpiod_set_value(camera_v1p8_en, 1);
-
-			camera_vprog1_on = 1;
-			usleep_range(10000, 11000);
+			ret = camera_pmic_set(flag);
+			if (ret) {
+				dev_err(&client->dev,
+						"Failed to enable regulator\n");
+			} else {
+				/* enable 1.8v power */
+				gpiod_set_value(camera_v1p8_en, 1);
+				usleep_range(10000, 11000);
+				camera_vprog1_on = 1;
+			}
 		}
 	} else {
 		if (camera_vprog1_on) {
-			camera_set_pmic_power(CAMERA_2P8V, false);
-			camera_set_pmic_power(CAMERA_1P8V, false);
-			/* disable 1.8v power */
-			gpiod_set_value(camera_v1p8_en, 0);
-			camera_vprog1_on = 0;
+			ret = camera_pmic_set(flag);
+			if (ret) {
+				dev_err(&client->dev,
+						"Failed to disable regulator\n");
+			} else {
+				/* disable 1.8v power */
+				gpiod_set_value(camera_v1p8_en, 0);
+				camera_vprog1_on = 0;
+			}
 		}
 	}
 
@@ -211,16 +337,53 @@ static int ov5693_csi_configure(struct v4l2_subdev *sd, int flag)
 	return camera_sensor_csi(sd, port, lanes, format, bayer, flag);
 }
 
+
+static int ov5693_platform_init(struct i2c_client *client)
+{
+	pmic_id = camera_pmic_probe();
+	if (pmic_id != PMIC_ROHM)
+		return 0;
+
+	v1p8_reg = regulator_get(&client->dev, "v1p8sx");
+	if (IS_ERR(v1p8_reg)) {
+		dev_err(&client->dev, "v1p8s regulator_get failed\n");
+		return PTR_ERR(v1p8_reg);
+	}
+
+	v2p8_reg = regulator_get(&client->dev, "v2p85sx");
+	if (IS_ERR(v2p8_reg)) {
+		regulator_put(v1p8_reg);
+		dev_err(&client->dev, "v2p85sx regulator_get failed\n");
+		return PTR_ERR(v2p8_reg);
+	}
+
+	return 0;
+}
+
+static int ov5693_platform_deinit(void)
+{
+	if (pmic_id != PMIC_ROHM)
+		return 0;
+
+	regulator_put(v1p8_reg);
+	regulator_put(v2p8_reg);
+
+	return 0;
+}
+
 static struct camera_sensor_platform_data ov5693_sensor_platform_data = {
 	.gpio_ctrl	= ov5693_gpio_ctrl,
 	.flisclk_ctrl	= ov5693_flisclk_ctrl,
 	.power_ctrl	= ov5693_power_ctrl,
 	.csi_cfg	= ov5693_csi_configure,
+	.platform_init = ov5693_platform_init,
+	.platform_deinit = ov5693_platform_deinit,
 };
 
 void *ov5693_platform_data(void *info)
 {
 	camera_reset = NULL;
+	pmic_id = PMIC_MAX;
 	return &ov5693_sensor_platform_data;
 }
 
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c b/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c
index 9e631c8..6241daa 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov5693/ov5693.c
@@ -1052,6 +1052,15 @@ static int ov5693_s_config(struct v4l2_subdev *sd,
 
 	dev->platform_data = platform_data;
 
+	if (dev->platform_data->platform_init) {
+		ret = dev->platform_data->platform_init(client);
+		if (ret) {
+			mutex_unlock(&dev->input_lock);
+			dev_err(&client->dev, "ov5693 platform init err\n");
+			return ret;
+		}
+	}
+
 	ret = power_up(sd);
 	if (ret) {
 		dev_err(&client->dev, "ov5693 power-up err.\n");
@@ -1099,6 +1108,8 @@ fail_csi_cfg:
 fail_power_on:
 	power_down(sd);
 	dev_err(&client->dev, "sensor power-gating failed\n");
+	if (dev->platform_data->platform_deinit)
+		dev->platform_data->platform_deinit();
 	mutex_unlock(&dev->input_lock);
 	return ret;
 }
@@ -1392,6 +1403,9 @@ static int ov5693_remove(struct i2c_client *client)
 	media_entity_cleanup(&dev->sd.entity);
 	devm_kfree(&client->dev, dev);
 
+	if (dev->platform_data->platform_deinit)
+		dev->platform_data->platform_deinit();
+
 	return 0;
 }
 
-- 
1.9.3

