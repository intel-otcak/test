From 3923bb65fc7b980723d4c9bd63642cb528ab39b7 Mon Sep 17 00:00:00 2001
Message-Id: <3923bb65fc7b980723d4c9bd63642cb528ab39b7.1424979244.git.feitong.yi@intel.com>
In-Reply-To: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
References: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
From: Alok Pandey <alok.pandey@intel.com>
Date: Thu, 5 Feb 2015 11:31:38 -0500
Subject: [PATCH 20/28] MUST_REBASE [VPG]: video/adf/intel: Enable DP hotplug

This patch enables hot plug handling for DP.

It does the following:
1. Requests for hotplug event and lists hotplug as supported
   events to userland.
2. Creates a DP encoder specific hotplug handler function.
3. Schedules a hotplug workqueue to handle bottom half.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

ISSUE: GMINL-5607
Change-Id: Id8c9a7bc15a8cce492b5a878b1c405168f60eb98
Signed-off-by: Alok Pandey <alok.pandey@intel.com>
---
 .../video/adf/intel/core/common/dp/gen_dp_pipe.c   |   68 ++++++++++++++++++--
 .../video/adf/intel/core/common/intel_adf_events.c |   48 ++++++++++++++
 drivers/video/adf/intel/core/vlv/vlv_pipeline.c    |    4 +-
 .../adf/intel/include/core/common/dp/gen_dp_pipe.h |    5 ++
 4 files changed, 120 insertions(+), 5 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
index ad5a983..e73d492 100644
--- a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
+++ b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
@@ -17,7 +17,7 @@
 #include <drm/i915_adf.h>
 #include <core/common/dp/gen_dp_pipe.h>
 #include <core/intel_platform_config.h>
-
+#include <intel_adf.h>
 #include <core/vlv/vlv_dc_config.h>
 #include <core/vlv/vlv_dc_regs.h>
 #include <core/vlv/vlv_pm.h>
@@ -324,7 +324,7 @@ static void dp_pipe_get_modelist(struct intel_pipe *pipe,
 	*n_modes = panel->no_probed_modes;
 
 	dp_pipe_dump_modes(*modelist, *n_modes);
-	pr_err("%s done, no_modes=%d\n", __func__, (int)*n_modes);
+	pr_err("%s, number of modes =%d\n", __func__, (int)*n_modes);
 }
 
 static void dp_pipe_get_preferred_mode(struct intel_pipe *pipe,
@@ -357,6 +357,28 @@ static int dp_pipe_hw_init(struct intel_pipe *pipe)
 
 static void dp_pipe_handle_events(struct intel_pipe *pipe, u32 events)
 {
+	struct workqueue_struct *hotplug_wq;
+	struct work_struct *hotplug_work;
+
+	if (intel_adf_handle_events(pipe, events))
+		pr_err("ADF: DP: %s handle events (type=%d) failed\n",
+				__func__, pipe->type);
+
+	/* DP expects hot plug event */
+	if (events & INTEL_PORT_EVENT_HOTPLUG_DISPLAY) {
+
+		/* Validate input */
+		if (!g_adf_context) {
+			pr_err("ADF: %s: No adf context present\n", __func__);
+			return;
+		}
+
+		hotplug_wq = g_adf_context->hotplug_wq;
+		hotplug_work = (struct work_struct *)
+			&g_adf_context->hotplug_work;
+		queue_work(hotplug_wq, hotplug_work);
+	}
+
 	return;
 }
 
@@ -445,7 +467,10 @@ static void dp_pipe_pre_post(struct intel_pipe *pipe)
 
 static u32 dp_pipe_get_supported_events(struct intel_pipe *pipe)
 {
-	return INTEL_PIPE_EVENT_VSYNC;
+	return INTEL_PIPE_EVENT_VSYNC |
+		INTEL_PORT_EVENT_HOTPLUG_DISPLAY |
+		INTEL_PIPE_EVENT_HOTPLUG_CONNECTED |
+		INTEL_PIPE_EVENT_HOTPLUG_DISCONNECTED;
 }
 
 u32 dp_pipe_get_vsync_counter(struct intel_pipe *pipe, u32 interval)
@@ -548,7 +573,7 @@ u32 dp_pipe_init(struct dp_pipe *dp_pipe, struct device *dev,
 		/* Initialize PSR for eDP */
 		vlv_edp_psr_init(pipeline);
 	}
-
+	dp_pipe->base.hp_reqd = true;
 	pr_debug("%s: exit :%x\n", __func__, (unsigned int)err);
 	return err;
 }
@@ -557,3 +582,38 @@ u32 dp_pipe_destroy(struct dp_pipe *pipe)
 {
 	return 0;
 }
+
+int intel_adf_dp_hot_plug(struct dp_pipe *dp_pipe)
+{
+	if (dp_pipe_is_screen_connected(&dp_pipe->base)) {
+		pr_info("DP: %s: Triggering self modeset\n", __func__);
+		return intel_dp_self_modeset(dp_pipe);
+	} else
+		pr_err("DP screen is not connected\n");
+	return 0;
+}
+
+int intel_dp_self_modeset(struct dp_pipe *dp_pipe)
+{
+	int ret = 0;
+	struct intel_pipe *pipe = &dp_pipe->base;
+	struct dp_panel *panel = &dp_pipe->panel;
+	struct drm_mode_modeinfo *mode;
+
+	mode = panel->preferred_mode;
+	if (!mode) {
+		pr_err("DP: %s No preferred mode\n", __func__);
+		return -EINVAL;
+	}
+
+	if (pipe->ops->modeset) {
+		ret = pipe->ops->modeset(pipe, mode);
+		if (ret) {
+			pr_err("DP: %s Self modeset failed\n", __func__);
+			return ret;
+		}
+		pr_info("DP: %s Self modeset success\n", __func__);
+	}
+
+	return ret;
+}
diff --git a/drivers/video/adf/intel/core/common/intel_adf_events.c b/drivers/video/adf/intel/core/common/intel_adf_events.c
index 0434292..2023536 100644
--- a/drivers/video/adf/intel/core/common/intel_adf_events.c
+++ b/drivers/video/adf/intel/core/common/intel_adf_events.c
@@ -98,6 +98,7 @@ void intel_adf_hotplug_work_function(struct work_struct *work)
 	struct intel_pipe *intel_pipe;
 	struct intel_adf_interface *intf;
 	struct intel_adf_context *adf_context = context_from_hp_work(work);
+	bool old_status;
 
 	pr_info("ADF: %s\n", __func__);
 	while (count < adf_context->n_intfs) {
@@ -127,6 +128,53 @@ void intel_adf_hotplug_work_function(struct work_struct *work)
 				return;
 			}
 		}
+
+		if (intel_pipe->type == INTEL_PIPE_DP) {
+			size_t n_modes;
+			struct dp_pipe *dp_pipe;
+			struct dp_panel *monitor;
+			struct drm_mode_modeinfo *modelist;
+
+			dp_pipe = to_dp_pipe(intel_pipe);
+			old_status = dp_pipe->panel_present;
+			if (intel_adf_dp_hot_plug(dp_pipe)) {
+				pr_err("ADF: %s: DP failed to handle interrupt\n",
+						__func__);
+				return;
+			}
+			if (old_status == dp_pipe->panel_present) {
+				pr_info("ADF: %s: Not a DP event\n",
+							__func__);
+				continue;
+			}
+
+			/* Inform userspace about detection status */
+			if (dp_pipe->panel_present) {
+				monitor = &dp_pipe->panel;
+				intel_pipe->ops->get_modelist(intel_pipe,
+						&modelist, &n_modes);
+
+				if (!modelist || !n_modes) {
+					pr_err("ADF: %s: Invalid/NULL modelist\n",
+							__func__);
+					return;
+				}
+
+				if (adf_hotplug_notify_connected(&intf->base,
+							modelist, n_modes))
+					pr_err("ADF: %s: send DP connected noti failed\n",
+							__func__);
+			} else {
+				pr_err("ADF: %s: sending DP disconnect noti\n",
+						__func__);
+				if (adf_interface_blank(&intf->base,
+							DRM_MODE_DPMS_OFF))
+					pr_err("ADF: %s: Disable DP failed\n",
+							__func__);
+				adf_hotplug_notify_disconnected(&intf->base);
+				pr_err("ADF: DP disabled\n");
+			}
+		}
 	}
 }
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
index 866966e..edc2b25 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
@@ -50,7 +50,9 @@ enum port vlv_get_connected_port(struct intel_pipe *intel_pipe)
 		return port->port_id;
 	}
 
-	pr_err("ADF: %s: invalid display type\n", __func__);
+	if (intel_pipe->type != INTEL_PIPE_EDP)
+		pr_err("ADF: %s: No HDMI/DP display\n", __func__);
+
 	return PORT_INVALID;
 }
 
diff --git a/drivers/video/adf/intel/include/core/common/dp/gen_dp_pipe.h b/drivers/video/adf/intel/include/core/common/dp/gen_dp_pipe.h
index 5106a57..49dcae5 100644
--- a/drivers/video/adf/intel/include/core/common/dp/gen_dp_pipe.h
+++ b/drivers/video/adf/intel/include/core/common/dp/gen_dp_pipe.h
@@ -74,4 +74,9 @@ u32 dp_pipe_init(struct dp_pipe *pipe, struct device *dev,
 
 u32 dp_pipe_destroy(struct dp_pipe *pipe);
 
+int intel_adf_dp_hot_plug(struct dp_pipe *dp_pipe);
+int intel_dp_self_modeset(struct dp_pipe *dp_pipe);
+extern int
+intel_adf_dp_handle_events(struct dp_pipe *dp_pipe, u32 events);
+
 #endif /* _INTEL_DP_PIPE_H_ */
-- 
1.7.9.5

