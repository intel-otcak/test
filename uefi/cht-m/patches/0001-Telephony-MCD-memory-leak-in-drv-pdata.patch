From 8dd9eba56ecbe769dd51bb813a6af4fe368a28ec Mon Sep 17 00:00:00 2001
From: Gwenn Bourree <gwenn.bourree@intel.com>
Date: Wed, 7 Jan 2015 15:23:12 +0100
Subject: [PATCH] [Telephony/MCD]: memory leak in drv pdata

When the driver is removed from the system, the
allocated memory to store the ACPI data, recovered
during the driver probe are not freed.
Moreover, the object used to parse the ACPI table is
not freed after used.
This patch solves this issue by adding the
corresponding kfree calls for the corresponding
memory allocations.

Change-Id: Ic6d645c1a48a82690af8bc6266cffbdeed9be9fd
Signed-off-by: Gwenn Bourree <gwenn.bourree@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-10626
---
 drivers/staging/modem_control/mcd_acpi.c | 7 +++++++
 drivers/staging/modem_control/mdm_ctrl.c | 4 ++++
 2 files changed, 11 insertions(+)

diff --git a/drivers/staging/modem_control/mcd_acpi.c b/drivers/staging/modem_control/mcd_acpi.c
index f9d9b02..bc722f2 100644
--- a/drivers/staging/modem_control/mcd_acpi.c
+++ b/drivers/staging/modem_control/mcd_acpi.c
@@ -136,6 +136,7 @@ acpi_status get_acpi_param(acpi_handle handle, int type, char *id,
 	pr_err("%s: acpi_evaluate_object, status:%d\n", __func__, status);
 	if (ACPI_FAILURE(status)) {
 		pr_err("%s: ERROR %d evaluating ID:%s\n", __func__, status, id);
+		*result = NULL;
 		goto error;
 	}
 
@@ -143,6 +144,8 @@ acpi_status get_acpi_param(acpi_handle handle, int type, char *id,
 	if (!out_obj || out_obj->type != type) {
 		pr_err("%s: Invalid type:%d for Id:%s\n", __func__, type, id);
 		status = AE_BAD_PARAMETER;
+		kfree(out_obj);
+		*result = NULL;
 		goto error;
 	} else {
 		*result = out_obj;
@@ -216,6 +219,7 @@ void *retrieve_acpi_modem_data(struct platform_device *pdev)
 		       out_obj->string.pointer);
 		goto free_mdm_info;
 	}
+	kfree(out_obj);
 
 	mcd_reg_info->mdm_ver = MODEM_UNSUP;
 
@@ -231,6 +235,7 @@ void *retrieve_acpi_modem_data(struct platform_device *pdev)
 	} else {
 		strncpy(config_name, out_obj->string.pointer, NAME_LEN - 1);
 	}
+	kfree(out_obj);
 
 	/* PMIC */
 	switch (mcd_reg_info->cpu_ver) {
@@ -263,6 +268,7 @@ void *retrieve_acpi_modem_data(struct platform_device *pdev)
 	pr_info("%s: Retrieved PMIC values:Reg:%x, On:%x, Off:%x, Mask:%x\n",
 		__func__, pmic_data->chipctrl, pmic_data->chipctrlon,
 		pmic_data->chipctrloff, pmic_data->chipctrl_mask);
+	kfree(out_obj);
 
 	pr_info("%s: cpu info setup\n", __func__);
 	/*CPU Data*/
@@ -286,6 +292,7 @@ void *retrieve_acpi_modem_data(struct platform_device *pdev)
 	pmic_data->early_pwr_on = (int)item->integer.value;
 	item = &(out_obj->package.elements[1]);
 	pmic_data->early_pwr_off = (int)item->integer.value;
+	kfree(out_obj);
 
 	mcd_reg_info->cpu_data = cpu_data;
 	mcd_reg_info->pmic_data = pmic_data;
diff --git a/drivers/staging/modem_control/mdm_ctrl.c b/drivers/staging/modem_control/mdm_ctrl.c
index 018cf19..74c4c6a 100644
--- a/drivers/staging/modem_control/mdm_ctrl.c
+++ b/drivers/staging/modem_control/mdm_ctrl.c
@@ -952,6 +952,10 @@ static int mdm_ctrl_module_remove(struct platform_device *pdev)
 		mdm->pdata->mdm.cleanup(mdm->pdata->modem_data);
 		mdm->pdata->cpu.cleanup(mdm->pdata->cpu_data);
 		mdm->pdata->pmic.cleanup(mdm->pdata->pmic_data);
+
+		kfree(mdm->pdata->cpu_data);
+		kfree(mdm->pdata->pmic_data);
+		kfree(mdm->pdata);
 	}
 
 	/* Unregister the device */
-- 
1.9.1

