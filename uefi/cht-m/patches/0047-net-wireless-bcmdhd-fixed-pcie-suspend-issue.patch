From 874bfd25e411ff1ef2e9b3c00989f03441f7af5a Mon Sep 17 00:00:00 2001
From: Ecco park <eccopark@broadcom.com>
Date: Mon, 11 Aug 2014 22:05:25 -0700
Subject: [PATCH 47/77] net: wireless: bcmdhd fixed pcie suspend issue

Root cause : There are some delay code in dhd_bus_dpc to cause not
   to handle D3_ACK during suspend mode.
Solution : remove the delay code in dhd_bus_dpc
   change the current logic to interrupt to WLAN by not using message
   box interrupt.
Bug: 16934751 Terrible battery life
Bug: 16392971 [WiFi] WiFi Data Stall
Signed-off-by: Ecco park <eccopark@broadcom.com>

Change-Id: Ia6c665ccae68fcac6261e191197faf1a620da2a4
---
 drivers/net/wireless/bcmdhd/dhd_pcie.c          | 51 +++++++++++++++++++------
 drivers/net/wireless/bcmdhd/dhd_pcie.h          |  4 +-
 drivers/net/wireless/bcmdhd/include/pcie_core.h |  1 +
 3 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/drivers/net/wireless/bcmdhd/dhd_pcie.c b/drivers/net/wireless/bcmdhd/dhd_pcie.c
index 69cac784b89e..366a923c3656 100644
--- a/drivers/net/wireless/bcmdhd/dhd_pcie.c
+++ b/drivers/net/wireless/bcmdhd/dhd_pcie.c
@@ -138,6 +138,7 @@ enum {
 	IOV_PCIEREG,
 	IOV_PCIECFGREG,
 	IOV_PCIECOREREG,
+	IOV_PCIESERDESREG,
 	IOV_BAR0_SECWIN_REG,
 	IOV_SBREG,
 	IOV_DONGLEISOLATION,
@@ -148,10 +149,12 @@ enum {
 	IOV_BUZZZ_DUMP,
 	IOV_DUMP_RINGUPD_BLOCK,
 	IOV_DMA_RINGINDICES,
+	IOV_DB1_FOR_MB,
 	IOV_FLOW_PRIO_MAP
 };
 
 
+
 const bcm_iovar_t dhdpcie_iovars[] = {
 	{"intr",	IOV_INTR,	0,	IOVT_BOOL,	0 },
 	{"membytes",	IOV_MEMBYTES,	0,	IOVT_BUFFER,	2 * sizeof(int) },
@@ -264,6 +267,7 @@ dhd_bus_t* dhdpcie_bus_attach(osl_t *osh, volatile char* regs, volatile char* tc
 			break;
 		}
 		bus->dhd->busstate = DHD_BUS_DOWN;
+		bus->db1_for_mb = TRUE;
 		bus->dhd->hang_report  = TRUE;
 
 		DHD_TRACE(("%s: EXIT SUCCESS\n",
@@ -2606,6 +2610,22 @@ dhdpcie_bus_doiovar(dhd_bus_t *bus, const bcm_iovar_t *vi, uint32 actionid, cons
 		bcopy(&int_val, arg, val_size);
 		break;
 
+	case IOV_SVAL(IOV_DB1_FOR_MB):
+		if (int_val)
+			bus->db1_for_mb = TRUE;
+		else
+			bus->db1_for_mb = FALSE;
+		break;
+
+	case IOV_GVAL(IOV_DB1_FOR_MB):
+		if (bus->db1_for_mb)
+			int_val = 1;
+		else
+			int_val = 0;
+		val_size = MIN(val_size, sizeof(int_val));
+		bcopy(&int_val, arg, val_size);
+		break;
+
 	case IOV_GVAL(IOV_TX_METADATALEN):
 		int_val = dhd_prot_metadatalen_get(bus->dhd, FALSE);
 		bcopy(&int_val, arg, val_size);
@@ -3077,7 +3097,6 @@ dhd_update_txflowrings(dhd_pub_t *dhd)
 	}
 }
 
-
 /* Mailbox ringbell Function */
 static void
 dhd_bus_gen_devmb_intr(struct dhd_bus *bus)
@@ -3087,10 +3106,18 @@ dhd_bus_gen_devmb_intr(struct dhd_bus *bus)
 		DHD_ERROR(("mailbox communication not supported\n"));
 		return;
 	}
-	/* this is a pcie core register, not the config regsiter */
-	DHD_INFO(("writing a mail box interrupt to the device, through config space\n"));
-	dhdpcie_bus_cfg_write_dword(bus, PCISBMbx, 4, (1 << 0));
-	dhdpcie_bus_cfg_write_dword(bus, PCISBMbx, 4, (1 << 0));
+	if (bus->db1_for_mb)  {
+		/* this is a pcie core register, not the config regsiter */
+		/* XXX: makesure we are on PCIE */
+		DHD_INFO(("writing a mail box interrupt to the device, through doorbell 1\n"));
+		si_corereg(bus->sih, bus->sih->buscoreidx, PCIH2D_DB1, ~0, 0x12345678);
+	}
+	else {
+		DHD_INFO(("writing a mail box interrupt to the device, through config space\n"));
+		dhdpcie_bus_cfg_write_dword(bus, PCISBMbx, 4, (1 << 0));
+		/* XXX CRWLPCIEGEN2-182 requires double write */
+		dhdpcie_bus_cfg_write_dword(bus, PCISBMbx, 4, (1 << 0));
+	}
 }
 
 /* doorbell ring Function */
@@ -3157,12 +3184,7 @@ dhd_bus_dpc(struct dhd_bus *bus)
 		bus->intstatus = 0;
 		return 0;
 	}
-	if (bus->suspended) {
-		resched = TRUE;
-		DHD_INFO(("%s : PCIe is still in suspend state\n",__FUNCTION__));
-		OSL_DELAY(20 * 1000);
-		return resched;
-	}
+
 	intstatus = bus->intstatus;
 
 	if ((bus->sih->buscorerev == 6) || (bus->sih->buscorerev == 4) ||
@@ -3238,7 +3260,7 @@ dhdpcie_handle_mb_data(dhd_bus_t *bus)
 	}
 	if (d2h_mb_data & D2H_DEV_D3_ACK)  {
 		/* what should we do */
-		DHD_INFO(("D2H_MB_DATA: D3 ACK\n"));
+		DHD_ERROR(("D2H_MB_DATA: D3 ACK\n"));
 		if (!bus->wait_for_d3_ack) {
 			bus->wait_for_d3_ack = 1;
 			dhd_os_ioctl_resp_wake(bus->dhd);
@@ -3269,6 +3291,11 @@ dhdpcie_bus_process_mailbox_intr(dhd_bus_t *bus, uint32 intstatus)
 	else {
 		if (intstatus & (PCIE_MB_TOPCIE_FN0_0 | PCIE_MB_TOPCIE_FN0_1))
 			dhdpcie_handle_mb_data(bus);
+
+		if (bus->dhd->busstate == DHD_BUS_SUSPEND) {
+			return;
+		}
+
 		if (intstatus & PCIE_MB_D2H_MB_MASK) {
 				dhdpci_bus_read_frames(bus);
 		}
diff --git a/drivers/net/wireless/bcmdhd/dhd_pcie.h b/drivers/net/wireless/bcmdhd/dhd_pcie.h
index f5cf827d6370..7ce8aa3b2703 100644
--- a/drivers/net/wireless/bcmdhd/dhd_pcie.h
+++ b/drivers/net/wireless/bcmdhd/dhd_pcie.h
@@ -152,11 +152,11 @@ typedef struct dhd_bus {
 
 	uint32 def_intmask;
 	bool	ltrsleep_on_unload;
-	bool	suspended;
 	uint	wait_for_d3_ack;
 	uint8	txmode_push;
 	uint32 max_sub_queues;
-
+	bool	db1_for_mb;
+	bool	suspended;
 } dhd_bus_t;
 
 /* function declarations */
diff --git a/drivers/net/wireless/bcmdhd/include/pcie_core.h b/drivers/net/wireless/bcmdhd/include/pcie_core.h
index efba30ab9367..242a9a2685ff 100644
--- a/drivers/net/wireless/bcmdhd/include/pcie_core.h
+++ b/drivers/net/wireless/bcmdhd/include/pcie_core.h
@@ -543,6 +543,7 @@ typedef struct sbpcieregs {
 
 /* enumeration Core regs */
 #define PCIH2D_MailBox  0x140
+#define PCIH2D_DB1 0x144
 #define PCID2H_MailBox  0x148
 #define PCIMailBoxInt	0x48
 #define PCIMailBoxMask	0x4C
-- 
2.0.3

