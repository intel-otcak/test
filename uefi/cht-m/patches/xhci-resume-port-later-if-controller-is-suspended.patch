From 9932f8fe766fa6654784da5011f078e3b5c595ff Mon Sep 17 00:00:00 2001
From: Zhuang Jin Can <jin.can.zhuang@intel.com>
Date: Thu, 19 Mar 2015 18:11:48 +0800
Subject: [PATCH] xhci: resume port later if controller is suspended

When the remote wakeup port change event is received and controller is
being halted, driver does not set the link to U0 from Resume state, because
when the controller is stopped, ITP packets are stopped.

However, in below case, the link will never be set to U0 from Resume State.
1. xhci_suspend() executed and controller is halted.
2. remote wakeup port change event happens, and HCD_FLAG_WAKEUP_PENDING is
set, and link is not set to U0 because controller is halted.
3. suspend_common() finds HCD_FLAG_WAKEUP_PENDING is set, thus xhci_resume()
is called, but link will never be set to U0.

To fix the issue, we mark the port as resume pending if port resumes
when the controller is halted, and resumes the port as soon as the controller
is running.

Change-Id: If5471d42224f780b694e4d7eea7df287a5af2c32
Signed-off-by: Zhuang Jin Can <jin.can.zhuang@intel.com>
---
 drivers/usb/host/xhci-ring.c |  3 +++
 drivers/usb/host/xhci.c      | 40 ++++++++++++++++++++++++++++++++++++++++
 drivers/usb/host/xhci.h      |  1 +
 3 files changed, 44 insertions(+)

diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index faa8b98954d9..98d46a413e34 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -1746,6 +1746,9 @@ static void handle_port_status(struct xhci_hcd *xhci,
 		temp1 = readl(&xhci->op_regs->command);
 		if (!(temp1 & CMD_RUN)) {
 			xhci_warn(xhci, "xHC is not running.\n");
+			if (DEV_SUPERSPEED(temp))
+				set_bit(faked_port_index,
+						&bus_state->resume_pending);
 			goto cleanup;
 		}
 
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index e1d1e0376432..be80421639e4 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -193,6 +193,7 @@ int xhci_reset(struct xhci_hcd *xhci)
 		xhci->bus_state[i].port_c_suspend = 0;
 		xhci->bus_state[i].suspended_ports = 0;
 		xhci->bus_state[i].resuming_ports = 0;
+		xhci->bus_state[i].resume_pending = 0;
 	}
 
 	return ret;
@@ -878,6 +879,43 @@ static void xhci_disable_port_wake_on_bits(struct xhci_hcd *xhci)
 	spin_unlock_irqrestore(&xhci->lock, flags);
 }
 
+static inline void xhci_resume_pending_ports(struct xhci_hcd *xhci)
+{
+	struct xhci_bus_state	*bus_state;
+	__le32 __iomem		**port_array;
+	int			port_index;
+	u32			temp;
+
+	/* check if any usb3 port to resume */
+	bus_state = &xhci->bus_state[hcd_index(xhci->shared_hcd)];
+	if (!bus_state->resume_pending)
+		return;
+
+	port_index = xhci->num_usb3_ports;
+	port_array = xhci->usb3_ports;
+
+	while (--port_index) {
+		if (!test_bit(port_index, &bus_state->resume_pending))
+			continue;
+
+		xhci_dbg(xhci, "resume SS port %d\n", port_index);
+		clear_bit(port_index, &bus_state->resume_pending);
+		temp = readl(port_array[port_index]);
+		if ((temp & PORT_PLC) &&
+				(temp & PORT_PLS_MASK) == XDEV_RESUME) {
+
+			bus_state->port_remote_wakeup |=
+				1 << port_index;
+			xhci_test_and_clear_bit(xhci, port_array,
+					port_index, PORT_PLC);
+			xhci_set_link_state(xhci, port_array,
+					port_index, XDEV_U0);
+			xhci_dbg(xhci, "link set to U0 from resume\n");
+		} else
+			xhci_err(xhci, "PLC && PLS=RESUME is not true!\n");
+	}
+}
+
 /*
  * Stop HC (not bus-specific)
  *
@@ -1076,6 +1114,8 @@ int xhci_resume(struct xhci_hcd *xhci, bool hibernated)
 	xhci_handshake(xhci, &xhci->op_regs->status, STS_HALT,
 		  0, 250 * 1000);
 
+	xhci_resume_pending_ports(xhci);
+
 	/* step 5: walk topology and initialize portsc,
 	 * portpmsc and portli
 	 */
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index 1f33fc39311f..5e2d105aac2c 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1417,6 +1417,7 @@ struct xhci_bus_state {
 	unsigned long		resume_done[USB_MAXCHILDREN];
 	/* which ports have started to resume */
 	unsigned long		resuming_ports;
+	unsigned long		resume_pending;
 	/* Which ports are waiting on RExit to U0 transition. */
 	unsigned long		rexit_ports;
 	struct completion	rexit_done[USB_MAXCHILDREN];
-- 
2.1.0

