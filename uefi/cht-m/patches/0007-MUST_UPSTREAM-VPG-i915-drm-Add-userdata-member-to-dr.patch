From 1df5cae34167ea16e40a96ae8a3befef7d4b2688 Mon Sep 17 00:00:00 2001
Message-Id: <1df5cae34167ea16e40a96ae8a3befef7d4b2688.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Armin Reese <armin.c.reese@intel.com>
Date: Tue, 20 Aug 2013 15:26:10 -0700
Subject: [PATCH 007/312] MUST_UPSTREAM [VPG]: i915/drm: Add userdata member
 to drm_i915_gem_object for storing app specific
 metainfo

New feature:  A uint32_t 'userdata' member has been added to struct drm_i915_gem_object.
This member can be used to tag a surface with information needed to interpret its contents.
In a typical scenario, 'userdata' will be set by the process providing the GEM object with
its contents and sharing via flink. Later, another process also accessing the surface
(via create_from_name) can consume the data, interpreting it according to the value of
'userdata'. Though this is one possible function of 'userdata', it can be applied anywhere
user processes agree on its interpretation.  Two functions will be added to libdrm_intel
allowing apps to easily access this new member:  drm_intel_bo_get_userdata() and
drm_intel_bo_set_userdata().

Issue:  AMW-2

Conflicts:
	drivers/gpu/drm/i915/i915_dma.c
	drivers/gpu/drm/i915/i915_gem.c
	drivers/gpu/drm/i915/i915_drv.h
(cherry picked from commit 54aea34e6fd52cddf5fffd5839162d195a04377e)

Change-Id: I1ed205881984d130b5f94d6dfe5c7577b7221a52
Signed-off-by: Armin Reese <armin.c.reese@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c |    2 ++
 drivers/gpu/drm/i915/i915_drv.h |    5 +++++
 drivers/gpu/drm/i915/i915_gem.c |   27 +++++++++++++++++++++++++++
 include/uapi/drm/i915_drm.h     |   19 +++++++++++++++++++
 4 files changed, 53 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 134928b..64d42d7 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -2020,6 +2020,8 @@ const struct drm_ioctl_desc i915_ioctls[] = {
 	DRM_IOCTL_DEF_DRV(I915_GEM_USERPTR, i915_gem_userptr_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_ENABLE_PLANE_RESERVED_REG_BIT_2,
 		i915_enable_plane_reserved_reg_bit_2, DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(I915_GEM_ACCESS_USERDATA, i915_gem_access_userdata,
+							DRM_UNLOCKED|DRM_RENDER_ALLOW),
 };
 
 int i915_max_ioctl = ARRAY_SIZE(i915_ioctls);
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 2fd2098..2984110 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1702,6 +1702,9 @@ struct drm_i915_gem_object {
 	/** for phy allocated objects */
 	drm_dma_handle_t *phys_handle;
 
+	/** Object userdata */
+	uint32_t userdata;
+
 	union {
 		struct i915_gem_userptr {
 			uintptr_t ptr;
@@ -2295,6 +2298,8 @@ int i915_gem_object_attach_phys(struct drm_i915_gem_object *obj,
 int i915_gem_open(struct drm_device *dev, struct drm_file *file);
 void i915_gem_release(struct drm_device *dev, struct drm_file *file);
 
+int i915_gem_access_userdata(struct drm_device *dev, void *data,
+		   struct drm_file *file);
 uint32_t
 i915_gem_get_gtt_size(struct drm_device *dev, uint32_t size, int tiling_mode);
 uint32_t
diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index d86b77e..a923eca 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -5219,3 +5219,30 @@ struct i915_vma *i915_gem_obj_to_ggtt(struct drm_i915_gem_object *obj)
 
 	return vma;
 }
+
+/**
+ * Reads/writes userdata for the object.
+ */
+int
+i915_gem_access_userdata(struct drm_device *dev, void *data,
+		   struct drm_file *file)
+{
+	struct drm_i915_gem_access_userdata *args = data;
+	struct drm_i915_gem_object *obj;
+
+	obj = to_intel_bo(drm_gem_object_lookup(dev, file, args->handle));
+	if (&obj->base == NULL)
+		return -ENOENT;
+
+	mutex_lock(&dev->struct_mutex);
+
+	if (args->write)
+		obj->userdata = args->userdata;
+	else
+		args->userdata = obj->userdata;
+
+	drm_gem_object_unreference(&obj->base);
+	mutex_unlock(&dev->struct_mutex);
+
+	return 0;
+}
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 71d2b3f..d418397 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -225,6 +225,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_I915_GET_RESET_STATS	0x32
 #define DRM_I915_GEM_USERPTR		0x33
 #define DRM_I915_ENABLE_PLANE_RESERVED_REG_BIT_2	0x37
+#define DRM_I915_GEM_ACCESS_USERDATA	0x3c
 
 #define DRM_IOCTL_I915_INIT		DRM_IOW( DRM_COMMAND_BASE + DRM_I915_INIT, drm_i915_init_t)
 #define DRM_IOCTL_I915_FLUSH		DRM_IO ( DRM_COMMAND_BASE + DRM_I915_FLUSH)
@@ -279,6 +280,9 @@ typedef struct _drm_i915_sarea {
 #define DRM_IOCTL_I915_ENABLE_PLANE_RESERVED_REG_BIT_2	\
 	DRM_IOW(DRM_COMMAND_BASE + DRM_I915_ENABLE_PLANE_RESERVED_REG_BIT_2, \
 	struct drm_i915_enable_plane_reserved_reg_bit_2)
+#define DRM_IOCTL_I915_GEM_ACCESS_USERDATA	\
+		DRM_IOWR(DRM_COMMAND_BASE + DRM_I915_GEM_ACCESS_USERDATA, \
+		struct drm_i915_gem_access_userdata)
 
 /* Allow drivers to submit batchbuffers directly to hardware, relying
  * on the security mechanisms provided by hardware.
@@ -882,6 +886,21 @@ struct drm_i915_gem_get_tiling {
 	__u32 swizzle_mode;
 };
 
+struct drm_i915_gem_access_userdata {
+	/** Handle of the buffer whose userdata will be accessed */
+	__u32 handle;
+
+	/**
+	* Userdata:  This quantity is user defined
+	*/
+	__u32 userdata;
+
+	/**
+	* Write: 0=read userdata, 1=write userdata
+	*/
+	__u32 write;
+};
+
 struct drm_i915_gem_get_aperture {
 	/** Total size of the aperture used by i915_gem_execbuffer, in bytes */
 	__u64 aper_size;
-- 
1.7.9.5

