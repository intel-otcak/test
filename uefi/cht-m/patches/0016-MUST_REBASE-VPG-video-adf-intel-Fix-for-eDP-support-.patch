From 1b8b0c74f35c7499ed2306fbb56dee314a6f38ae Mon Sep 17 00:00:00 2001
Message-Id: <1b8b0c74f35c7499ed2306fbb56dee314a6f38ae.1425610844.git.chang-joon.lee@intel.com>
In-Reply-To: <6fa2ab23adf6d7de781e906d04a0224410262d9b.1425610844.git.chang-joon.lee@intel.com>
References: <6fa2ab23adf6d7de781e906d04a0224410262d9b.1425610844.git.chang-joon.lee@intel.com>
From: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
Date: Fri, 13 Feb 2015 17:22:19 +0530
Subject: [PATCH 16/27] MUST_REBASE [VPG]: video/adf/intel: Fix for eDP
 support on PIPE A

This patch provides fixes that can allow eDP to be used in PIPE A
later when required.
1) The main change required is to disable write protect for PIPE A
pps registers which will allow loading of pps delay values.
2) pipe based channel is used to update clock instead of port based
channel selection
3) rpm_get is called only during DPMS_OFF state. this will avoid
get being called for repeated modesets.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-6011
Change-Id: If1c2f118734a33b9616b1eab5f59c963657736b7
Signed-off-by: Thulasimani, Sivakumar <sivakumar.thulasimani@intel.com>
---
 .../video/adf/intel/core/common/dp/gen_dp_pipe.c   |    2 +-
 drivers/video/adf/intel/core/vlv/chv_dpio.c        |    2 +-
 drivers/video/adf/intel/core/vlv/vlv_dp_port.c     |   10 ++++++++--
 3 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
index 98a8a2a..b1922b6 100644
--- a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
+++ b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
@@ -199,7 +199,7 @@ static int dp_pipe_modeset(struct intel_pipe *pipe,
 	/* if NULL the current call is from dpms so use saved mode */
 	if (mode == NULL)
 		mode = &dp_pipe->current_mode;
-	else
+	else if (dp_pipe->dpms_state == DRM_MODE_DPMS_OFF)
 		intel_adf_display_rpm_get();
 
 	dotclock = mode->clock;
diff --git a/drivers/video/adf/intel/core/vlv/chv_dpio.c b/drivers/video/adf/intel/core/vlv/chv_dpio.c
index a252615..fd5ab18 100644
--- a/drivers/video/adf/intel/core/vlv/chv_dpio.c
+++ b/drivers/video/adf/intel/core/vlv/chv_dpio.c
@@ -166,7 +166,7 @@ void chv_dpio_update_clock(struct intel_pipeline *pipeline,
 		struct intel_clock *clock)
 {
 	struct vlv_pipeline *disp = to_vlv_pipeline(pipeline);
-	enum dpio_channel ch = vlv_disp_to_port(disp);
+	enum dpio_channel ch = vlv_pipe_to_channel(disp->pipe.pipe_id);
 	struct vlv_dc_config *config = get_vlv_dc_config(disp);
 	u32 val, temp;
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_dp_port.c b/drivers/video/adf/intel/core/vlv/vlv_dp_port.c
index d39fbc7..f577980 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_dp_port.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_dp_port.c
@@ -231,6 +231,10 @@ int vlv_dp_port_enable(struct vlv_dp_port *port, u32 flags,
 	 * bit varies between VLV/CHV hence using local var
 	 * that was set during init itself
 	 */
+	if (IS_CHERRYVIEW())
+		reg_val &= ~(DP_PIPE_MASK_CHV);
+	else
+		reg_val &= ~(DP_PIPE_MASK);
 	reg_val |= port->pipe_select_val;
 
 	REG_WRITE(port->offset, reg_val);
@@ -956,12 +960,14 @@ bool vlv_dp_port_init(struct vlv_dp_port *port, enum port port_id,
 
 	port->duty_cycle_delay = 0;
 
-	ret = vlv_dp_port_load_panel_delays(port);
 	vlv_dp_port_i2c_register(port, dev);
 
 	/* enable vdd in case it is not already on for edid read */
-	if (port->is_edp)
+	if (port->is_edp) {
+		vlv_dp_port_write_protect_off(port, true);
 		vlv_dp_port_vdd_seq(port, true);
+		ret = vlv_dp_port_load_panel_delays(port);
+	}
 
 	if (IS_CHERRYVIEW())
 		port->pipe_select_val = DP_PIPE_SELECT_CHV(pipe_id);
-- 
1.7.9.5

