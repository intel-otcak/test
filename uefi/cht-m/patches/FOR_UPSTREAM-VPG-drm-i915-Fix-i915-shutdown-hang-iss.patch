From e9fd4162002e743d39d91df465e75c78a20b0aa3 Mon Sep 17 00:00:00 2001
From: Gajanan Bhat <gajanan.bhat@intel.com>
Date: Thu, 8 Oct 2015 10:17:11 +0530
Subject: [PATCH] FOR_UPSTREAM [VPG]: drm/i915: Fix i915 shutdown hang issue

When i915 shutdown is called, there are still IOCTLs being processed.
It is causing state assert check failures and mutex lock hangs.
Avoid holding DRM global mutex locks and use a custom lock for IOCTLs.
Wait for already running IOCTLs to finish before CRTC is disabled.

Change-Id: I2978e589e5876007536871ac31d3558025bd04f7
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-19694
Signed-off-by: weizeye <weize.ye@intel.com>
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
---
 drivers/gpu/drm/drm_drv.c       | 63 ++++++++++++++++++++++++++++++++++++-----
 drivers/gpu/drm/drm_fops.c      |  3 ++
 drivers/gpu/drm/drm_stub.c      |  2 ++
 drivers/gpu/drm/i915/i915_drv.c | 25 +++++++---------
 include/drm/drmP.h              |  4 +++
 5 files changed, 76 insertions(+), 21 deletions(-)

diff --git a/drivers/gpu/drm/drm_drv.c b/drivers/gpu/drm/drm_drv.c
index ee16638..e176815 100644
--- a/drivers/gpu/drm/drm_drv.c
+++ b/drivers/gpu/drm/drm_drv.c
@@ -340,12 +340,34 @@ void drm_halt(struct drm_device *dev)
 
 	/* Hold the mutex to prevent the ioctl_count incrementing
 	* while halt_count == 0 in drm_ioctl */
-	mutex_lock(&drm_global_mutex);
+	mutex_lock(&dev->halt_mutex);
 	atomic_inc(&dev->halt_count);
-	mutex_unlock(&drm_global_mutex);
+	mutex_unlock(&dev->halt_mutex);
 }
 EXPORT_SYMBOL(drm_halt);
 
+/** Wait up to timeout milliseconds for active IOCTLs to complete.
+ * Note: drm_continue() must be called to allow new
+ *       IOCTLs even if this call timeout.
+ */
+int drm_wait_idle(struct drm_device *dev, unsigned timeout)
+{
+	int rc;
+
+	/* Wait for all active IOCTLs to exit */
+	rc = wait_event_interruptible_timeout(dev->halt_queue,
+		(atomic_read(&dev->ioctl_count) == 0),
+		msecs_to_jiffies(timeout));
+
+	if (rc == 0)
+		return -ETIMEDOUT;
+	else if (rc < 0)
+		return rc;
+
+	return 0;
+}
+EXPORT_SYMBOL(drm_wait_idle);
+
 /**
  * Called whenever a process performs an ioctl on /dev/drm.
  *
@@ -370,18 +392,41 @@ long drm_ioctl(struct file *filp,
 	char stack_kdata[128];
 	char *kdata = NULL;
 	unsigned int usize, asize;
+	unsigned int ready = 0;
 
 	dev = file_priv->minor->dev;
 
 	if (drm_device_is_unplugged(dev))
 		return -ENODEV;
 
-	mutex_lock(&drm_global_mutex);
-	if (atomic_read(&dev->halt_count)) {
-		mutex_unlock(&drm_global_mutex);
-		return -EBUSY;
+	while (!ready) {
+		/* halt_mutex ensures that ioctl_count can only increment
+		* whilst halt_count == 0. Without this we could get
+		* the following scenario:
+		*
+		*	drm_ioctl:	halt_count == 0 ? --> YES
+		*	    drm_halt:	    halt_count++
+		*	    drm_wait_idle:  ioctl_count == 0 ? --> YES
+		*	drm_ioctl:	ioctl_count++
+		*	    drm_wait_idle:  return "idle" to caller
+		*	drm_ioctl:	ioctl continues executing
+		*
+		* In the above scenario drm_wait_idle thinks we are
+		* halted with no active ioctls but drm_ioctl
+		* thinks we are not halted so it allows the current
+		* ioctl to execute! The mutex protects against this
+		* concurrency problem.
+		*/
+		mutex_lock(&dev->halt_mutex);
+		if (atomic_read(&dev->halt_count) == 0) {
+			atomic_inc(&dev->ioctl_count);
+			ready = 1;
+		}
+		mutex_unlock(&dev->halt_mutex);
+
+		if (!ready)
+			return retcode;
 	}
-	mutex_unlock(&drm_global_mutex);
 
 	if ((nr >= DRM_CORE_IOCTL_COUNT) &&
 	    ((nr < DRM_COMMAND_BASE) || (nr >= DRM_COMMAND_END)))
@@ -477,6 +522,10 @@ long drm_ioctl(struct file *filp,
 		kfree(kdata);
 	if (retcode)
 		DRM_DEBUG("ret = %d\n", retcode);
+
+	if (atomic_dec_return(&dev->ioctl_count) == 0)
+		wake_up_all(&dev->halt_queue);
+
 	return retcode;
 }
 EXPORT_SYMBOL(drm_ioctl);
diff --git a/drivers/gpu/drm/drm_fops.c b/drivers/gpu/drm/drm_fops.c
index 1d328a8..c9befa2 100644
--- a/drivers/gpu/drm/drm_fops.c
+++ b/drivers/gpu/drm/drm_fops.c
@@ -49,6 +49,9 @@ static int drm_setup(struct drm_device * dev)
 {
 	int ret;
 
+	atomic_set(&dev->ioctl_count, 0);
+	atomic_set(&dev->halt_count, 0);
+
 	if (dev->driver->firstopen &&
 	    !drm_core_check_feature(dev, DRIVER_MODESET)) {
 		ret = dev->driver->firstopen(dev);
diff --git a/drivers/gpu/drm/drm_stub.c b/drivers/gpu/drm/drm_stub.c
index 233ea20..32a113f 100644
--- a/drivers/gpu/drm/drm_stub.c
+++ b/drivers/gpu/drm/drm_stub.c
@@ -562,6 +562,8 @@ struct drm_device *drm_dev_alloc(struct drm_driver *driver,
 	mutex_init(&dev->struct_mutex);
 	mutex_init(&dev->ctxlist_mutex);
 	mutex_init(&dev->master_mutex);
+	mutex_init(&dev->halt_mutex);
+	init_waitqueue_head(&dev->halt_queue);
 
 	dev->anon_inode = drm_fs_inode_new();
 	if (IS_ERR(dev->anon_inode)) {
diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index aecf41c..e974507 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -2202,7 +2202,6 @@ static void i915_pm_shutdown(struct pci_dev *pdev)
 {
 	struct drm_device *drm_dev = pci_get_drvdata(pdev);
 	struct drm_i915_private *dev_priv = drm_dev->dev_private;
-	struct drm_crtc *crtc;
 
 	if (drm_dev->switch_power_state == DRM_SWITCH_POWER_OFF)
 		return;
@@ -2210,24 +2209,22 @@ static void i915_pm_shutdown(struct pci_dev *pdev)
 	/* make sure drm stops processing new ioctls */
 	drm_halt(drm_dev);
 
-	/* Device already in suspend state */
-	if (i915_is_device_suspended(drm_dev))
-		return;
+	/* wait for drm to go idle */
+	if (drm_wait_idle(drm_dev, 5000))
+		DRM_ERROR("Failed to halt DRM. going for shutdown anyway...\n");
 
+	/* take struct_mutex to avoid sync issue with i915_gem_fault */
+	mutex_lock(&drm_dev->struct_mutex);
 	dev_priv->shutdown_in_progress = true;
+	mutex_unlock(&drm_dev->struct_mutex);
 
-	/* If KMS is active, we do the leavevt stuff here */
-	if (drm_core_check_feature(drm_dev, DRIVER_MODESET)) {
-		/* Disable CRTCs */
-		list_for_each_entry(crtc, &drm_dev->mode_config.crtc_list,
-									head) {
-			drm_modeset_lock(&crtc->mutex, NULL);
-			dev_priv->display.crtc_disable(crtc);
-			drm_modeset_unlock(&crtc->mutex);
-		}
-	}
+	/* Device already in suspend state */
+	if (i915_is_device_suspended(drm_dev))
+		return;
 
 	i915_drm_freeze(drm_dev);
+	pci_disable_device(drm_dev->pdev);
+	pci_set_power_state(drm_dev->pdev, PCI_D3hot);
 }
 
 static struct pci_driver i915_pci_driver = {
diff --git a/include/drm/drmP.h b/include/drm/drmP.h
index f0161f0..6f91516 100644
--- a/include/drm/drmP.h
+++ b/include/drm/drmP.h
@@ -1172,7 +1172,10 @@ struct drm_device {
 	struct drm_vma_offset_manager *vma_offset_manager;
 	/*@} */
 	int switch_power_state;
+	struct mutex halt_mutex;
 	atomic_t halt_count;
+	atomic_t ioctl_count;
+	wait_queue_head_t halt_queue;
 };
 
 #define DRM_SWITCH_POWER_ON 0
@@ -1478,6 +1481,7 @@ extern int drm_clients_info(struct seq_file *m, void* data);
 extern int drm_gem_name_info(struct seq_file *m, void *data);
 
 extern void drm_halt(struct drm_device *dev);
+extern int drm_wait_idle(struct drm_device *dev, unsigned timeout);
 
 extern struct dma_buf *drm_gem_prime_export(struct drm_device *dev,
 		struct drm_gem_object *obj, int flags);
-- 
1.9.1

