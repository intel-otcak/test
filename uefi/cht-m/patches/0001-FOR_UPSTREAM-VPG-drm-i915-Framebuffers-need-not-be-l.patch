From 544bc8239c02b7975f1c2b572598450d11535d39 Mon Sep 17 00:00:00 2001
Message-Id: <544bc8239c02b7975f1c2b572598450d11535d39.1424222301.git.chang-joon.lee@intel.com>
From: Deepak S <deepak.s@intel.com>
Date: Fri, 30 Jan 2015 12:36:09 +0530
Subject: [PATCH 1/4] FOR_UPSTREAM [VPG]: drm/i915: Framebuffers need not be
 limited to 256MB on gen8+.

The restriction of Framebuffer to first 256MB is removed from CHV onwards.
Removing the restriction so that FB can be pinned in any space within
GTT/PPGTT Also, for gen8+ no need to use pin_mappable for Framebuffer &
also we do not take fence as Framebuffer compression is not enabled.

Issue: GMIN-3639
Change-Id: I1f0def85e27d05f1f9513dcb5972f1ed3bdd19e0
Signed-off-by: Deepak S <deepak.s@intel.com>
Signed-off-by: Satyanantha, Rama Gopal M <rama.gopal.m.satyanantha@intel.com>
---
 drivers/gpu/drm/i915/i915_gem.c      |    9 +++++++--
 drivers/gpu/drm/i915/intel_display.c |   23 ++++++++++++++---------
 2 files changed, 21 insertions(+), 11 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 37865fe5..3b2e9b0 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -4149,6 +4149,7 @@ i915_gem_object_pin_to_display_plane(struct drm_i915_gem_object *obj,
 	u32 old_read_domains, old_write_domain;
 	bool was_pin_display;
 	int ret;
+	struct drm_device *dev = obj->base.dev;
 
 	if (pipelined != i915_gem_request_get_ring(obj->last_read_req)) {
 		ret = i915_gem_object_sync(obj, pipelined, true);
@@ -4178,9 +4179,13 @@ i915_gem_object_pin_to_display_plane(struct drm_i915_gem_object *obj,
 
 	/* As the user may map the buffer once pinned in the display plane
 	 * (e.g. libkms for the bootup splash), we have to ensure that we
-	 * always use map_and_fenceable for all scanout buffers.
+	 * always use map_and_fenceable for all scanout buffers. No need
+	 * of map_fenceable for >= gen8
 	 */
-	ret = i915_gem_obj_ggtt_pin(obj, alignment, PIN_MAPPABLE);
+	if ((INTEL_INFO(dev)->gen >= 8))
+		ret = i915_gem_obj_ggtt_pin(obj, alignment, 0);
+	else
+		ret = i915_gem_obj_ggtt_pin(obj, alignment, PIN_MAPPABLE);
 	if (ret)
 		goto err_unpin_display;
 
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index e0ef5a6..97fceb8 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2390,11 +2390,14 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
 	/* Install a fence for tiled scan-out. Pre-i965 always needs a
 	 * fence, whereas 965+ only requires a fence if using
 	 * framebuffer compression.  For simplicity, we always install
-	 * a fence as the cost is not that onerous.
+	 * a fence as the cost is not that onerous. Fence is only required
+	 * for gen 7 & below
 	 */
-	ret = i915_gem_object_get_fence(obj);
-	if (ret)
-		goto err_unpin;
+	if ((INTEL_INFO(dev)->gen <= 7)) {
+		ret = i915_gem_object_get_fence(obj);
+		if (ret)
+			goto err_unpin;
+	}
 
 	i915_gem_object_pin_fence(obj);
 	drm_gem_object_reference(&obj->base);
@@ -9186,12 +9189,14 @@ static int intel_crtc_cursor_set(struct drm_crtc *crtc,
 			goto fail_locked;
 		}
 
-		ret = i915_gem_object_put_fence(obj);
-		if (ret) {
-			DRM_DEBUG_KMS("failed to release fence for cursor");
-			goto fail_unpin;
+		/* Fence is required only for gen7 & below */
+		if ((INTEL_INFO(dev)->gen <= 7)) {
+			ret = i915_gem_object_put_fence(obj);
+			if (ret) {
+				DRM_DEBUG_KMS("failed to release fence cursor");
+				goto fail_unpin;
+			}
 		}
-
 		addr = i915_gem_obj_ggtt_offset(obj);
 	} else {
 		int align = IS_I830(dev) ? 16 * 1024 : 256;
-- 
1.7.9.5

