From 8d29a0d007c1995917c5666f25bbb9e7c2134b38 Mon Sep 17 00:00:00 2001
From: Janusz Dziedzic <januszx.dziedzic@intel.com>
Date: Mon, 9 May 2016 16:23:11 +0200
Subject: [PATCH 11/78] usb: dwc3: trace: use traces instead of dbg

Use traces instead of dev_dbg/dev_vdbg.

Change-Id: Ibf5bce02f7861017b78a6b7352f1fcfa6647a328
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-29845
Signed-off-by: Janusz Dziedzic <januszx.dziedzic@intel.com>
Reviewed-on: https://android.intel.com:443/508187
---
 drivers/usb/dwc3/core.c   | 21 ++++++------
 drivers/usb/dwc3/ep0.c    |  6 ++--
 drivers/usb/dwc3/gadget.c | 86 ++++++++++++++++++++++-------------------------
 3 files changed, 54 insertions(+), 59 deletions(-)

diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index a1cf639..3c0f00b 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -104,12 +104,12 @@ static int ulpi_read(struct dwc3 *dwc, u32 reg)
 	count = 200;
 	/* Determine if use extend registers access */
 	if (reg & EXTEND_ULPI_REGISTER_ACCESS_MASK) {
-		dev_dbg(dwc->dev, "Access extend registers 0x%x\n", reg);
+		dwc3_trace(trace_dwc3_core, "Access extend registers 0x%x", reg);
 		val32 = GUSB2PHYACC0_NEWREGREQ
 			| GUSB2PHYACC0_REGADDR(ULPI_ACCESS_EXTENDED)
 			| GUSB2PHYACC0_VCTRL(reg);
 	} else {
-		dev_dbg(dwc->dev, "Access normal registers 0x%x\n", reg);
+		dwc3_trace(trace_dwc3_core, "Access normal registers 0x%x", reg);
 		val32 = GUSB2PHYACC0_NEWREGREQ | GUSB2PHYACC0_REGADDR(reg)
 			| GUSB2PHYACC0_VCTRL(0x00);
 	}
@@ -119,7 +119,7 @@ static int ulpi_read(struct dwc3 *dwc, u32 reg)
 		if (dwc3_readl(dwc->regs, GUSB2PHYACC0) & GUSB2PHYACC0_VSTSDONE) {
 			val = dwc3_readl(dwc->regs, GUSB2PHYACC0) &
 				GUSB2PHYACC0_REGDATA_MASK;
-			dev_dbg(dwc->dev, "%s - reg 0x%x data 0x%x\n",
+			dwc3_trace(trace_dwc3_core, "%s - reg 0x%x data 0x%x",
 					__func__, reg, val);
 			goto cleanup;
 		}
@@ -161,13 +161,13 @@ static int ulpi_write(struct dwc3 *dwc, u32 val, u32 reg)
 
 	count = 10000;
 	if (reg & EXTEND_ULPI_REGISTER_ACCESS_MASK) {
-		dev_dbg(dwc->dev, "Access extend registers 0x%x\n", reg);
+		dwc3_trace(trace_dwc3_core, "Access extend registers 0x%x", reg);
 		val32 = GUSB2PHYACC0_NEWREGREQ
 			| GUSB2PHYACC0_REGADDR(ULPI_ACCESS_EXTENDED)
 			| GUSB2PHYACC0_VCTRL(reg)
 			| GUSB2PHYACC0_REGWR | GUSB2PHYACC0_REGDATA(val);
 	} else {
-		dev_dbg(dwc->dev, "Access normal registers 0x%x\n", reg);
+		dwc3_trace(trace_dwc3_core, "Access normal registers 0x%x", reg);
 		val32 = GUSB2PHYACC0_NEWREGREQ
 			| GUSB2PHYACC0_REGADDR(reg)
 			| GUSB2PHYACC0_REGWR
@@ -178,7 +178,7 @@ static int ulpi_write(struct dwc3 *dwc, u32 val, u32 reg)
 	while (count) {
 		if (dwc3_readl(dwc->regs, GUSB2PHYACC0) &
 			GUSB2PHYACC0_VSTSDONE) {
-			dev_dbg(dwc->dev, "%s - reg 0x%x data 0x%x write done\n",
+			dwc3_trace(trace_dwc3_core, "%s - reg 0x%x data 0x%x write done",
 				__func__, reg, val);
 			goto cleanup;
 		}
@@ -411,7 +411,7 @@ static int dwc3_event_buffers_setup(struct dwc3 *dwc)
 
 	for (n = 0; n < dwc->num_event_buffers; n++) {
 		evt = dwc->ev_buffs[n];
-		dev_dbg(dwc->dev, "Event buf %p dma %08llx length %d\n",
+		dwc3_trace(trace_dwc3_core, "Event buf %p dma %08llx length %d",
 				evt->buf, (unsigned long long) evt->dma,
 				evt->length);
 
@@ -454,7 +454,7 @@ static void dwc3_core_num_eps(struct dwc3 *dwc)
 	dwc->num_in_eps = DWC3_NUM_IN_EPS(parms);
 	dwc->num_out_eps = DWC3_NUM_EPS(parms) - dwc->num_in_eps;
 
-	dev_vdbg(dwc->dev, "found %d IN and %d OUT endpoints\n",
+	dwc3_trace(trace_dwc3_core, "found %d IN and %d OUT endpoints",
 			dwc->num_in_eps, dwc->num_out_eps);
 }
 
@@ -535,7 +535,7 @@ static int dwc3_core_init(struct dwc3 *dwc)
 		reg &= ~DWC3_GCTL_DSBLCLKGTNG;
 		break;
 	default:
-		dev_dbg(dwc->dev, "No power optimization available\n");
+		dwc3_trace(trace_dwc3_core, "No power optimization available");
 	}
 
 	/*
@@ -632,10 +632,9 @@ static int dwc3_handle_otg_notification(struct notifier_block *nb,
 		spin_unlock_irqrestore(&dwc->lock, flags);
 		break;
 	default:
-		dev_dbg(dwc->dev, "DWC3 OTG Notify unknow notify message\n");
+		dwc3_trace(trace_dwc3_core, "DWC3 OTG Notify unknow notify message");
 	}
 
-out:
 	return state;
 }
 
diff --git a/drivers/usb/dwc3/ep0.c b/drivers/usb/dwc3/ep0.c
index 318edcf..2be60c7 100644
--- a/drivers/usb/dwc3/ep0.c
+++ b/drivers/usb/dwc3/ep0.c
@@ -729,7 +729,7 @@ static int dwc3_ep0_std_request(struct dwc3 *dwc, struct usb_ctrlrequest *ctrl)
 		ret = dwc3_ep0_set_isoch_delay(dwc, ctrl);
 		break;
 	case USB_REQ_SET_INTERFACE:
-		dev_vdbg(dwc->dev, "USB_REQ_SET_INTERFACE\n");
+		dwc3_trace(trace_dwc3_ep0, "USB_REQ_SET_INTERFACE");
 		dwc->start_config_issued = false;
 		/* Fall through */
 	default:
@@ -932,7 +932,7 @@ static void __dwc3_ep0_do_control_data(struct dwc3 *dwc,
 		ret = usb_gadget_map_request(&dwc->gadget, &req->request,
 				dep->number);
 		if (ret) {
-			dev_dbg(dwc->dev, "failed to map request\n");
+			dwc3_trace(trace_dwc3_ep0, "failed to map request");
 			return;
 		}
 
@@ -958,7 +958,7 @@ static void __dwc3_ep0_do_control_data(struct dwc3 *dwc,
 		ret = usb_gadget_map_request(&dwc->gadget, &req->request,
 				dep->number);
 		if (ret) {
-			dev_dbg(dwc->dev, "failed to map request\n");
+			dwc3_trace(trace_dwc3_ep0, "failed to map request");
 			return;
 		}
 
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 23966229a..ce46289 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -124,7 +124,7 @@ int dwc3_gadget_set_link_state(struct dwc3 *dwc, enum dwc3_link_state state)
 		udelay(5);
 	}
 
-	dev_vdbg(dwc->dev, "link state change request timed out\n");
+	dwc3_trace(trace_dwc3_gadget, "link state change request timed out");
 
 	return -ETIMEDOUT;
 }
@@ -207,7 +207,7 @@ int dwc3_gadget_resize_tx_fifos(struct dwc3 *dwc)
 
 		fifo_size |= (last_fifo_depth << 16);
 
-		dev_vdbg(dwc->dev, "%s: Fifo Addr %04x Size %d\n",
+		dwc3_trace(trace_dwc3_gadget, "%s: Fifo Addr %04x Size %d",
 				dep->name, last_fifo_depth, fifo_size & 0xffff);
 
 		dwc3_writel(dwc->regs, DWC3_GTXFIFOSIZ(fifo_number),
@@ -253,9 +253,6 @@ void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
 		usb_gadget_unmap_request(&dwc->gadget, &req->request,
 				req->direction);
 
-	dev_dbg(dwc->dev, "request %p from %s completed %d/%d ===> %d\n",
-			req, dep->name, req->request.actual,
-			req->request.length, status);
 	trace_dwc3_gadget_giveback(req);
 
 	spin_unlock(&dwc->lock);
@@ -276,7 +273,7 @@ int dwc3_send_gadget_generic_command(struct dwc3 *dwc, unsigned cmd, u32 param)
 	do {
 		reg = dwc3_readl(dwc->regs, DWC3_DGCMD);
 		if (!(reg & DWC3_DGCMD_CMDACT)) {
-			dev_vdbg(dwc->dev, "Command Complete --> %d\n",
+			dwc3_trace(trace_dwc3_gadget, "Command Complete --> %d",
 					DWC3_DGCMD_STATUS(reg));
 			if (DWC3_DGCMD_STATUS(reg))
 				return -EINVAL;
@@ -288,8 +285,10 @@ int dwc3_send_gadget_generic_command(struct dwc3 *dwc, unsigned cmd, u32 param)
 		 * interrupt context.
 		 */
 		timeout--;
-		if (!timeout)
+		if (!timeout) {
+			dwc3_trace(trace_dwc3_gadget, "Command Timed Out");
 			return -ETIMEDOUT;
+		}
 		udelay(1);
 	} while (1);
 }
@@ -319,7 +318,7 @@ int dwc3_send_gadget_ep_cmd(struct dwc3 *dwc, unsigned ep,
 	do {
 		reg = dwc3_readl(dwc->regs, DWC3_DEPCMD(ep));
 		if (!(reg & DWC3_DEPCMD_CMDACT)) {
-			dev_vdbg(dwc->dev, "Command Complete --> %d\n",
+			dwc3_trace(trace_dwc3_gadget, "Command Complete --> %d",
 					DWC3_DEPCMD_STATUS(reg));
 			if (dwc->gadget.speed != USB_SPEED_SUPER)
 				dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0),
@@ -501,7 +500,7 @@ static int __dwc3_gadget_ep_enable(struct dwc3_ep *dep,
 	u32			reg;
 	int			ret = -ENOMEM;
 
-	dev_vdbg(dwc->dev, "Enabling %s\n", dep->name);
+	dwc3_trace(trace_dwc3_gadget, "Enabling %s", dep->name);
 
 	if (!(dep->flags & DWC3_EP_ENABLED)) {
 		ret = dwc3_gadget_start_config(dwc, dep);
@@ -740,10 +739,9 @@ static void dwc3_prepare_one_trb(struct dwc3_ep *dep,
 		struct dwc3_request *req, dma_addr_t dma,
 		unsigned length, unsigned last, unsigned chain, unsigned node)
 {
-	struct dwc3		*dwc = dep->dwc;
 	struct dwc3_trb		*trb;
 
-	dev_vdbg(dwc->dev, "%s: req %p dma %08llx length %d%s%s\n",
+	dwc3_trace(trace_dwc3_gadget, "%s: req %p dma %08llx length %d%s%s",
 			dep->name, req, (unsigned long long) dma,
 			length, last ? " last" : "",
 			chain ? " chain" : "");
@@ -946,7 +944,7 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 	u32				reg;
 
 	if (start_new && (dep->flags & DWC3_EP_BUSY)) {
-		dev_vdbg(dwc->dev, "%s: endpoint busy\n", dep->name);
+		dwc3_trace(trace_dwc3_gadget, "%s: endpoint busy", dep->name);
 		return -EBUSY;
 	}
 	dep->flags &= ~DWC3_EP_PENDING_REQUEST;
@@ -998,7 +996,7 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 	cmd |= DWC3_DEPCMD_PARAM(cmd_param);
 	ret = dwc3_send_gadget_ep_cmd(dwc, dep->number, cmd, &params);
 	if (ret < 0) {
-		dev_dbg(dwc->dev, "failed to send STARTTRANSFER command\n");
+		dwc3_trace(trace_dwc3_gadget, "failed to send STARTTRANSFER command");
 
 		if ((ret == -EAGAIN) && start_new &&
 				usb_endpoint_xfer_isoc(dep->endpoint.desc)) {
@@ -1059,7 +1057,7 @@ static void __dwc3_gadget_start_isoc(struct dwc3 *dwc,
 	dep->current_uf = cur_uf;
 
 	if (list_empty(&dep->request_list)) {
-		dev_vdbg(dwc->dev, "ISOC ep %s run out for requests.\n",
+		dwc3_trace(trace_dwc3_gadget, "ISOC ep %s run out for requests.",
 			dep->name);
 		dep->flags |= DWC3_EP_PENDING_REQUEST;
 		return;
@@ -1146,7 +1144,7 @@ static int __dwc3_gadget_ep_queue(struct dwc3_ep *dep, struct dwc3_request *req)
 
 		ret = __dwc3_gadget_kick_transfer(dep, 0, true);
 		if (ret && ret != -EBUSY)
-			dev_dbg(dwc->dev, "%s: failed to kick transfers\n",
+			dwc3_trace(trace_dwc3_gadget, "%s: failed to kick transfers",
 					dep->name);
 		return ret;
 	}
@@ -1163,7 +1161,7 @@ static int __dwc3_gadget_ep_queue(struct dwc3_ep *dep, struct dwc3_request *req)
 		ret = __dwc3_gadget_kick_transfer(dep, dep->resource_index,
 				false);
 		if (ret && ret != -EBUSY)
-			dev_dbg(dwc->dev, "%s: failed to kick transfers\n",
+			dwc3_trace(trace_dwc3_gadget, "%s: failed to kick transfers",
 					dep->name);
 		return ret;
 	}
@@ -1184,14 +1182,12 @@ static int dwc3_gadget_ep_queue(struct usb_ep *ep, struct usb_request *request,
 
 	spin_lock_irqsave(&dwc->lock, flags);
 	if (!dep->endpoint.desc) {
-		dev_dbg(dwc->dev, "trying to queue request %p to disabled %s\n",
+		dwc3_trace(trace_dwc3_gadget, "trying to queue request %p to disabled %s",
 				request, ep->name);
 		spin_unlock_irqrestore(&dwc->lock, flags);
 		return -ESHUTDOWN;
 	}
 
-	dev_vdbg(dwc->dev, "queing request %p to %s length %d\n",
-			request, ep->name, request->length);
 	trace_dwc3_ep_queue(req);
 
 	ret = __dwc3_gadget_ep_queue(dep, req);
@@ -1271,7 +1267,7 @@ int __dwc3_gadget_ep_set_halt(struct dwc3_ep *dep, int value, int protocol)
 		if (!protocol && ((dep->direction && dep->flags & DWC3_EP_BUSY) ||
 				(!list_empty(&dep->req_queued) ||
 				 !list_empty(&dep->request_list)))) {
-			dev_dbg(dwc->dev, "%s: pending request, cannot halt\n",
+			dwc3_trace(trace_dwc3_gadget, "%s: pending request, cannot halt",
 					dep->name);
 			return -EAGAIN;
 		}
@@ -1445,7 +1441,7 @@ static int dwc3_gadget_wakeup(struct usb_gadget *g)
 
 	speed = reg & DWC3_DSTS_CONNECTSPD;
 	if (speed == DWC3_DSTS_SUPERSPEED) {
-		dev_dbg(dwc->dev, "no wakeup on SuperSpeed\n");
+		dwc3_trace(trace_dwc3_gadget, "no wakeup on SuperSpeed");
 		ret = -EINVAL;
 		goto out;
 	}
@@ -1457,7 +1453,7 @@ static int dwc3_gadget_wakeup(struct usb_gadget *g)
 	case DWC3_LINK_STATE_U3:	/* in HS, means SUSPEND */
 		break;
 	default:
-		dev_dbg(dwc->dev, "can't wakeup from link state %d\n",
+		dwc3_trace(trace_dwc3_gadget, "can't wakeup from link state %d",
 				link_state);
 		ret = -EINVAL;
 		goto out;
@@ -1518,7 +1514,7 @@ static void dwc3_gadget_enable_irq(struct dwc3 *dwc)
 {
 	u32 reg;
 
-	dev_vdbg(dwc->dev, "%s: DWC3_DEVTEN 0x%08x\n",
+	dwc3_trace(trace_dwc3_gadget, "%s: DWC3_DEVTEN 0x%08x",
 		 __func__, dwc3_readl(dwc->regs, DWC3_DEVTEN));
 
 	/* Enable all but Start and End of Frame IRQs */
@@ -1580,7 +1576,7 @@ static int dwc3_gadget_run_stop(struct dwc3 *dwc, int is_on)
 		udelay(1);
 	} while (1);
 
-	dev_vdbg(dwc->dev, "gadget %s data soft-%s\n",
+	dwc3_trace(trace_dwc3_gadget, "gadget %s data soft-%s",
 			dwc->gadget_driver
 			? dwc->gadget_driver->function : "no-function",
 			is_on ? "connect" : "disconnect");
@@ -1607,7 +1603,7 @@ static int dwc3_gadget_pullup(struct usb_gadget *g, int is_on)
 	 */
 	if (!is_on && dwc->gadget_driver && dwc->gadget_driver->disconnect) {
 		if (dwc->gadget.speed != USB_SPEED_UNKNOWN) {
-			dev_dbg(dwc->dev, "fake dissconnect event\n");
+			dwc3_trace(trace_dwc3_gadget, "fake dissconnect event");
 			irq = platform_get_irq(to_platform_device(dwc->dev), 0);
 			disable_irq(irq);
 			dwc->gadget_driver->disconnect(&dwc->gadget);
@@ -1847,7 +1843,7 @@ static int dwc3_gadget_init_hw_endpoints(struct dwc3 *dwc,
 
 		dep->endpoint.name = dep->name;
 
-		dev_vdbg(dwc->dev, "initializing %s\n", dep->name);
+		dwc3_trace(trace_dwc3_gadget, "initializing %s", dep->name);
 
 		if (epnum == 0 || epnum == 1) {
 			usb_ep_set_maxpacket_limit(&dep->endpoint, 512);
@@ -1884,13 +1880,13 @@ static int dwc3_gadget_init_endpoints(struct dwc3 *dwc)
 
 	ret = dwc3_gadget_init_hw_endpoints(dwc, dwc->num_out_eps, 0);
 	if (ret < 0) {
-		dev_vdbg(dwc->dev, "failed to allocate OUT endpoints\n");
+		dwc3_trace(trace_dwc3_gadget, "failed to allocate OUT endpoints");
 		return ret;
 	}
 
 	ret = dwc3_gadget_init_hw_endpoints(dwc, dwc->num_in_eps, 1);
 	if (ret < 0) {
-		dev_vdbg(dwc->dev, "failed to allocate IN endpoints\n");
+		dwc3_trace(trace_dwc3_gadget, "failed to allocate IN endpoints");
 		return ret;
 	}
 
@@ -1953,7 +1949,7 @@ static int __dwc3_cleanup_done_trbs(struct dwc3 *dwc, struct dwc3_ep *dep,
 		if (count) {
 			trb_status = DWC3_TRB_SIZE_TRBSTS(trb->size);
 			if (trb_status == DWC3_TRBSTS_MISSED_ISOC) {
-				dev_dbg(dwc->dev, "incomplete IN transfer %s\n",
+				dwc3_trace(trace_dwc3_gadget, "incomplete IN transfer %s",
 						dep->name);
 				/*
 				 * If missed isoc occurred and there is
@@ -2123,7 +2119,7 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 		dep->resource_index = 0;
 
 		if (usb_endpoint_xfer_isoc(dep->endpoint.desc)) {
-			dev_dbg(dwc->dev, "%s is an Isochronous endpoint\n",
+			dwc3_trace(trace_dwc3_gadget, "%s is an Isochronous endpoint",
 					dep->name);
 			return;
 		}
@@ -2132,7 +2128,7 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 		break;
 	case DWC3_DEPEVT_XFERINPROGRESS:
 		if (!usb_endpoint_xfer_isoc(dep->endpoint.desc)) {
-			dev_dbg(dwc->dev, "%s is not an Isochronous endpoint\n",
+			dwc3_trace(trace_dwc3_gadget, "%s is not an Isochronous endpoint",
 					dep->name);
 			return;
 		}
@@ -2145,7 +2141,7 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 		} else {
 			int ret;
 
-			dev_vdbg(dwc->dev, "%s: reason %s\n",
+			dwc3_trace(trace_dwc3_gadget, "%s: reason %s",
 					dep->name, event->status &
 					DEPEVT_STATUS_TRANSFER_ACTIVE
 					? "Transfer Active"
@@ -2155,7 +2151,7 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 			if (!ret || ret == -EBUSY)
 				return;
 
-			dev_dbg(dwc->dev, "%s: failed to kick transfers\n",
+			dwc3_trace(trace_dwc3_gadget, "%s: failed to kick transfers",
 					dep->name);
 		}
 
@@ -2169,21 +2165,21 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 
 		switch (event->status) {
 		case DEPEVT_STREAMEVT_FOUND:
-			dev_vdbg(dwc->dev, "Stream %d found and started\n",
+			dwc3_trace(trace_dwc3_gadget, "Stream %d found and started",
 					event->parameters);
 
 			break;
 		case DEPEVT_STREAMEVT_NOTFOUND:
 			/* FALLTHROUGH */
 		default:
-			dev_dbg(dwc->dev, "Couldn't find suitable stream\n");
+			dwc3_trace(trace_dwc3_gadget, "Couldn't find suitable stream");
 		}
 		break;
 	case DWC3_DEPEVT_RXTXFIFOEVT:
-		dev_dbg(dwc->dev, "%s FIFO Overrun\n", dep->name);
+		dwc3_trace(trace_dwc3_gadget, "%s FIFO Overrun", dep->name);
 		break;
 	case DWC3_DEPEVT_EPCMDCMPLT:
-		dev_vdbg(dwc->dev, "Endpoint Command Complete\n");
+		dwc3_trace(trace_dwc3_gadget, "Endpoint Command Complete");
 		break;
 	}
 }
@@ -2575,7 +2571,7 @@ static void dwc3_gadget_linksts_change_interrupt(struct dwc3 *dwc,
 			(pwropt != DWC3_GHWPARAMS1_EN_PWROPT_HIB)) {
 		if ((dwc->link_state == DWC3_LINK_STATE_U3) &&
 				(next == DWC3_LINK_STATE_RESUME)) {
-			dev_vdbg(dwc->dev, "ignoring transition U3 -> Resume\n");
+			dwc3_trace(trace_dwc3_gadget, "ignoring transition U3 -> Resume");
 			return;
 		}
 	}
@@ -2640,7 +2636,7 @@ static void dwc3_gadget_linksts_change_interrupt(struct dwc3 *dwc,
 
 	dwc->link_state = next;
 
-	dev_vdbg(dwc->dev, "%s link %d\n", __func__, dwc->link_state);
+	dwc3_trace(trace_dwc3_gadget, "%s link %d\n", __func__, dwc->link_state);
 }
 
 static void dwc3_gadget_interrupt(struct dwc3 *dwc,
@@ -2663,22 +2659,22 @@ static void dwc3_gadget_interrupt(struct dwc3 *dwc,
 		dwc3_gadget_linksts_change_interrupt(dwc, event->event_info);
 		break;
 	case DWC3_DEVICE_EVENT_EOPF:
-		dev_vdbg(dwc->dev, "End of Periodic Frame\n");
+		dwc3_trace(trace_dwc3_gadget, "End of Periodic Frame");
 		break;
 	case DWC3_DEVICE_EVENT_SOF:
-		dev_vdbg(dwc->dev, "Start of Periodic Frame\n");
+		dwc3_trace(trace_dwc3_gadget, "Start of Periodic Frame");
 		break;
 	case DWC3_DEVICE_EVENT_ERRATIC_ERROR:
-		dev_vdbg(dwc->dev, "Erratic Error\n");
+		dwc3_trace(trace_dwc3_gadget, "Erratic Error");
 		break;
 	case DWC3_DEVICE_EVENT_CMD_CMPL:
-		dev_vdbg(dwc->dev, "Command Complete\n");
+		dwc3_trace(trace_dwc3_gadget, "Command Complete");
 		break;
 	case DWC3_DEVICE_EVENT_OVERFLOW:
-		dev_vdbg(dwc->dev, "Overflow\n");
+		dwc3_trace(trace_dwc3_gadget, "Overflow");
 		break;
 	default:
-		dev_dbg(dwc->dev, "UNKNOWN IRQ %d\n", event->type);
+		dwc3_trace(trace_dwc3_gadget, "UNKNOWN IRQ %d", event->type);
 	}
 }
 
-- 
1.9.1

