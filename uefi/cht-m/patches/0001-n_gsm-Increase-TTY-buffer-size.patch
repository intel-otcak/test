From 5214f22e04ba630a850c04e8080bcfdb05489334 Mon Sep 17 00:00:00 2001
From: Mustapha Ben Zoubeir <mustaphax.ben.zoubeir@intel.com>
Date: Tue, 23 Dec 2014 11:22:38 +0100
Subject: [PATCH] n_gsm: Increase TTY buffer size.

NVM data is flushed at Modem boot after Modem
flashed by a Modem feature that triggers a full
static.nvm & dynamic.nvm file update from modem
to AP at first modem boot after new Modem FW flashed.
Issue (see Bug 129534, Bug 133604) was observed
on AP side (on 7160-chassis, 7260-chassis platforms)
which is that NVM server (connected to gsmtty18
over MUX/ACM) on AP side fails receiving the
whole NVM data for static.nvm and dynamic.nvm.
NVM data packets are lost between HSIC controller
and NVM server, more specifically in ACM buffer
and N_TTY buffers. This is due to max buffer size
on ACM and N_TTY being limited to 64kB (on Linux
kernel 3.10/3.14), and because there is no efficient
flow control at ACM/MUX layers in kernel.
This patch is increasing the TTY Buffer between
ACM and MUX to avoid data loss.

Change-Id: I26c9161cc63fca64e44b05eec5e4ac5b1a004356
Signed-off-by: Mustapha Ben Zoubeir <mustaphax.ben.zoubeir@intel.com>
---
 drivers/tty/n_gsm.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/tty/n_gsm.c b/drivers/tty/n_gsm.c
index 7fc64b4..896462b 100644
--- a/drivers/tty/n_gsm.c
+++ b/drivers/tty/n_gsm.c
@@ -70,6 +70,7 @@ static int debug;
 module_param(debug, int, 0600);
 
 #define MAX_CONFIG_LEN 256
+#define MAX_BUF_SIZE  (6 * 65536)
 static char mux_base_config[MAX_CONFIG_LEN];
 /* refcounting if mux is activated ... need to think of a better way */
 static int activated;
@@ -1700,6 +1701,7 @@ static struct gsm_dlci *gsm_dlci_alloc(struct gsm_mux *gsm, int addr)
 	dlci->t1.data = (unsigned long)dlci;
 	tty_port_init(&dlci->port);
 	dlci->port.ops = &gsm_port_ops;
+	tty_buffer_set_limit(&dlci->port, MAX_BUF_SIZE);
 	dlci->gsm = gsm;
 	dlci->addr = addr;
 	dlci->adaption = gsm->adaption;
@@ -2572,6 +2574,7 @@ static int gsmld_open(struct tty_struct *tty)
 
 	tty->disc_data = gsm;
 	tty->receive_room = 65536;
+	tty_buffer_set_limit(tty->port, MAX_BUF_SIZE);
 
 	/* Attach the initial passive connection */
 	gsm->encoding = 1;
@@ -3223,7 +3226,6 @@ static int gsmtty_install(struct tty_driver *driver, struct tty_struct *tty)
 		mutex_unlock(&gsm->mutex);
 		return ret;
 	}
-
 	dlci_get(dlci);
 	dlci_get(gsm->dlci[0]);
 	mux_get(gsm);
@@ -3485,7 +3487,6 @@ static void gsmtty_throttle(struct tty_struct *tty)
 	if (tty->termios.c_cflag & CRTSCTS)
 		dlci->modem_tx &= ~TIOCM_DTR;
 	dlci->throttled = 1;
-	pr_err(DRVNAME ": > Throttled\n");
 	/* Send an MSC with DTR cleared */
 	gsmtty_modem_update(dlci, 0);
 }
@@ -3498,7 +3499,6 @@ static void gsmtty_unthrottle(struct tty_struct *tty)
 	if (tty->termios.c_cflag & CRTSCTS)
 		dlci->modem_tx |= TIOCM_DTR;
 	dlci->throttled = 0;
-	pr_err(DRVNAME ": < unThrottled\n");
 	/* Send an MSC with DTR set */
 	gsmtty_modem_update(dlci, 0);
 }
-- 
1.9.1

