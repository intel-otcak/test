From 66a189e00e4441209f747f815f43042e0c000057 Mon Sep 17 00:00:00 2001
From: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date: Sat, 9 Nov 2013 15:36:37 +0000
Subject: [PATCH 041/351] ASoC: wm_adsp: Add support for setting firmwares
 from device tree

Change-Id: I85fdd673c35be9296f25773872d0c7c4e7c2e8fe
Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Signed-off-by: Nikesh Oswal <Nikesh.Oswal@wolfsonmicro.com>
---
 sound/soc/codecs/wm_adsp.c |   99 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 96 insertions(+), 3 deletions(-)

diff --git a/sound/soc/codecs/wm_adsp.c b/sound/soc/codecs/wm_adsp.c
index c87a3a7..1f79086 100644
--- a/sound/soc/codecs/wm_adsp.c
+++ b/sound/soc/codecs/wm_adsp.c
@@ -16,6 +16,7 @@
 #include <linux/delay.h>
 #include <linux/firmware.h>
 #include <linux/list.h>
+#include <linux/of.h>
 #include <linux/pm.h>
 #include <linux/pm_runtime.h>
 #include <linux/regmap.h>
@@ -380,7 +381,7 @@ static int wm_adsp_fw_put(struct snd_kcontrol *kcontrol,
 	return 0;
 }
 
-static const struct soc_enum wm_adsp_fw_enum[] = {
+static struct soc_enum wm_adsp_fw_enum[] = {
 	SOC_ENUM_SINGLE(0, 0, ARRAY_SIZE(wm_adsp_fw_text), wm_adsp_fw_text),
 	SOC_ENUM_SINGLE(0, 1, ARRAY_SIZE(wm_adsp_fw_text), wm_adsp_fw_text),
 	SOC_ENUM_SINGLE(0, 2, ARRAY_SIZE(wm_adsp_fw_text), wm_adsp_fw_text),
@@ -1848,6 +1849,96 @@ err:
 }
 EXPORT_SYMBOL_GPL(wm_adsp2_event);
 
+static int wm_adsp_of_parse_firmware(struct wm_adsp *adsp,
+				     struct device_node *np)
+{
+	struct device_node *fws = of_get_child_by_name(np, "firmware");
+	struct device_node *fw = NULL;
+	const char **ctl_names;
+	int ret;
+	int i;
+
+	if (!fws)
+		return 0;
+
+	i = 0;
+	while ((fw = of_get_next_child(fws, fw)) != NULL)
+		i++;
+
+	if (i == 0)
+		return 0;
+
+	adsp->num_firmwares = i;
+
+	adsp->firmwares = devm_kzalloc(adsp->dev,
+				       i * sizeof(struct wm_adsp_fw_defs),
+				       GFP_KERNEL);
+	if (!adsp->firmwares)
+		return -ENOMEM;
+
+	ctl_names = devm_kzalloc(adsp->dev,
+				 i * sizeof(const char *),
+				 GFP_KERNEL);
+	if (!ctl_names)
+		return -ENOMEM;
+
+	i = 0;
+	while ((fw = of_get_next_child(fws, fw)) != NULL) {
+		ctl_names[i] = fw->name;
+
+		ret = of_property_read_string(fw, "wlf,wmfw-file",
+					      &adsp->firmwares[i].file);
+		if (ret < 0) {
+			dev_err(adsp->dev,
+				"Firmware filename missing/malformed: %d\n",
+				ret);
+			return ret;
+		}
+
+		ret = of_property_read_string(fw, "wlf,bin-file",
+					      &adsp->firmwares[i].binfile);
+		if (ret < 0)
+			adsp->firmwares[i].binfile = NULL;
+
+		i++;
+	}
+
+	wm_adsp_fw_enum[adsp->num - 1].max = adsp->num_firmwares;
+	wm_adsp_fw_enum[adsp->num - 1].texts = ctl_names;
+
+	return adsp->num_firmwares;
+}
+
+static int wm_adsp_of_parse_adsp(struct wm_adsp *adsp)
+{
+	struct device_node *np = of_get_child_by_name(adsp->dev->of_node,
+						      "adsps");
+	struct device_node *core = NULL;
+	unsigned int addr;
+	int ret;
+
+	if (!np)
+		return 0;
+
+	while ((core = of_get_next_child(np, core)) != NULL) {
+		ret = of_property_read_u32(core, "reg", &addr);
+		if (ret < 0) {
+			dev_err(adsp->dev,
+				"Failed to get ADSP base address: %d\n",
+				ret);
+			return ret;
+		}
+
+		if (addr == adsp->base)
+			break;
+	}
+
+	if (!core)
+		return 0;
+
+	return wm_adsp_of_parse_firmware(adsp, core);
+}
+
 int wm_adsp2_init(struct wm_adsp *adsp, bool dvfs)
 {
 	int ret;
@@ -1897,8 +1988,10 @@ int wm_adsp2_init(struct wm_adsp *adsp, bool dvfs)
 		}
 	}
 
-	adsp->num_firmwares = WM_ADSP_NUM_FW;
-	adsp->firmwares = wm_adsp_fw;
+	if (!adsp->dev->of_node || wm_adsp_of_parse_adsp(adsp) <= 0) {
+		adsp->num_firmwares = WM_ADSP_NUM_FW;
+		adsp->firmwares = wm_adsp_fw;
+	}
 
 	return 0;
 }
-- 
1.7.9.5

