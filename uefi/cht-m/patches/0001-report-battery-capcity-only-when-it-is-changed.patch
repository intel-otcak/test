From 0b06f411e1b5c727acdd190297069d761e858ee1 Mon Sep 17 00:00:00 2001
From: Zhang Ning <ning.a.zhang@intel.com>
Date: Tue, 7 Oct 2014 14:53:23 +0800
Subject: [PATCH] report battery capcity only when it is changed

Signed-off-by: Zhang Ning <ning.a.zhang@intel.com>
---
 drivers/power/dc_xpwr_battery.c | 73 ++++++++++++++++++++++++++++++++---------
 1 file changed, 57 insertions(+), 16 deletions(-)

diff --git a/drivers/power/dc_xpwr_battery.c b/drivers/power/dc_xpwr_battery.c
index 5394cd8..d26792c 100644
--- a/drivers/power/dc_xpwr_battery.c
+++ b/drivers/power/dc_xpwr_battery.c
@@ -196,6 +196,7 @@ struct pmic_fg_info {
 	struct mutex		lock;
 
 	int			status;
+	int			btemp;
 	/* Worker to monitor status and faults */
 	struct delayed_work status_monitor;
 };
@@ -471,6 +472,29 @@ vocv_read_fail:
 	return ret;
 }
 
+static int pmic_fg_get_capacity(struct pmic_fg_info *info)
+{
+	int ret, value;
+
+	ret = pmic_fg_get_vocv(info, &value);
+	if (ret < 0)
+		return ret;
+
+	/* do Vocv min threshold check */
+	if (value < info->pdata->design_min_volt)
+		return 0;
+
+	ret = pmic_fg_reg_readb(info, DC_FG_REP_CAP_REG);
+	if (ret < 0)
+		return ret;
+
+	if (!(ret & FG_REP_CAP_VALID))
+		dev_err(&info->pdev->dev,
+				"capacity measurement not valid\n");
+
+	return (ret & FG_REP_CAP_VAL_MASK);
+}
+
 static int pmic_fg_battery_health(struct pmic_fg_info *info)
 {
 	int temp, vocv;
@@ -480,6 +504,8 @@ static int pmic_fg_battery_health(struct pmic_fg_info *info)
 	if (ret < 0)
 		goto health_read_fail;
 
+	info->btemp = temp;
+
 	ret = pmic_fg_get_vocv(info, &vocv);
 	if (ret < 0)
 		goto health_read_fail;
@@ -544,24 +570,11 @@ static int pmic_fg_get_battery_property(struct power_supply *psy,
 			val->intval = 0;
 		break;
 	case POWER_SUPPLY_PROP_CAPACITY:
-		ret = pmic_fg_get_vocv(info, &value);
+		ret = pmic_fg_get_capacity(info);
 		if (ret < 0)
 			goto pmic_fg_read_err;
 
-		/* do Vocv min threshold check */
-		if (value < info->pdata->design_min_volt) {
-			val->intval = 0;
-			break;
-		}
-
-		ret = pmic_fg_reg_readb(info, DC_FG_REP_CAP_REG);
-		if (ret < 0)
-			goto pmic_fg_read_err;
-
-		if (!(ret & FG_REP_CAP_VALID))
-			dev_err(&info->pdev->dev,
-				"capacity measurement not valid\n");
-		val->intval = (ret & FG_REP_CAP_VAL_MASK);
+		val->intval = ret;
 		break;
 	case POWER_SUPPLY_PROP_TEMP:
 		ret = pmic_fg_get_btemp(info, &value);
@@ -641,8 +654,36 @@ static void pmic_fg_status_monitor(struct work_struct *work)
 {
 	struct pmic_fg_info *info = container_of(work,
 		struct pmic_fg_info, status_monitor.work);
+	static int cache_cap = -1;
+	static int cache_health = POWER_SUPPLY_HEALTH_UNKNOWN;
+	static int cache_temp = INT_MAX;
+	int present_cap, present_health;
 
-	power_supply_changed(&info->bat);
+	mutex_lock(&info->lock);
+	present_cap = pmic_fg_get_capacity(info);
+	if (present_cap < 0) {
+		mutex_unlock(&info->lock);
+		goto end_stat_mon;
+	}
+	/*
+	 *temp and ocv values are read here.
+	*/
+	present_health = pmic_fg_battery_health(info);
+	mutex_unlock(&info->lock);
+
+	/*
+	 *PSY change event is sent only upon change in
+	 *health,cap,temp.
+	*/
+	if ((cache_health != present_health)
+			|| (cache_cap != present_cap)
+			|| (info->btemp != cache_temp)) {
+		power_supply_changed(&info->bat);
+		cache_cap = present_cap;
+		cache_health = present_health;
+		cache_temp = info->btemp;
+	}
+end_stat_mon:
 	schedule_delayed_work(&info->status_monitor, STATUS_MON_DELAY_JIFFIES);
 }
 
-- 
1.9.1

