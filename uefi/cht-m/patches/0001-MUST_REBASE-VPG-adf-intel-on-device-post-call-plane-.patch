From 149a6863e085e113eb3c4f75ec994895411447d6 Mon Sep 17 00:00:00 2001
Message-Id: <149a6863e085e113eb3c4f75ec994895411447d6.1421897934.git.chang-joon.lee@intel.com>
From: Arun R Murthy <arun.r.murthy@intel.com>
Date: Fri, 28 Nov 2014 15:28:45 +0530
Subject: [PATCH 1/7] MUST_REBASE [VPG]: adf/intel: on device post call
 plane->pre_validate

On device post before calling plane validate, call pipe pre_validate
which ensures certain check like maxfifo and panel fitter which are
related to per pipe and device basis.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed

For: GMINL-4646
Change-Id: I92757dac57fe36020b63923b526a41678a508839
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
---
 drivers/video/adf/intel/intel_adf_device.c |   38 ++++++++++++++++++----------
 1 file changed, 24 insertions(+), 14 deletions(-)

diff --git a/drivers/video/adf/intel/intel_adf_device.c b/drivers/video/adf/intel/intel_adf_device.c
index cf2465b..5d8ceaa 100644
--- a/drivers/video/adf/intel/intel_adf_device.c
+++ b/drivers/video/adf/intel/intel_adf_device.c
@@ -332,6 +332,7 @@ static int intel_adf_device_validate(struct adf_device *dev,
 	struct intel_adf_post_custom_data *custom = cfg->custom_data;
 	struct intel_adf_config *custom_config;
 	struct intel_adf_overlay_engine *eng;
+	struct intel_adf_interface *intel_intf;
 	struct driver_state *state;
 	struct adf_interface *intf;
 	struct adf_buffer *buf;
@@ -349,7 +350,7 @@ static int intel_adf_device_validate(struct adf_device *dev,
 		return -EINVAL;
 	}
 
-	/*verify version*/
+	/* verify version */
 	if (custom->version != INTEL_ADF_VERSION) {
 		dev_err(dev->dev, "%s: version mismatch\n", __func__);
 		return -EINVAL;
@@ -357,7 +358,7 @@ static int intel_adf_device_validate(struct adf_device *dev,
 
 	n_configs = custom->n_configs;
 
-	/*verify custom size*/
+	/* verify custom size */
 	custom_size = sizeof(struct intel_adf_post_custom_data) +
 		n_configs * sizeof(struct intel_adf_config);
 	if (custom_size != cfg->custom_data_size) {
@@ -365,7 +366,7 @@ static int intel_adf_device_validate(struct adf_device *dev,
 		return -EINVAL;
 	}
 
-	/*allocate driver state*/
+	/* allocate driver state */
 	state = driver_state_create_and_init();
 	if (!state) {
 		dev_err(dev->dev, "%s: failed to allocate driver state\n",
@@ -373,17 +374,11 @@ static int intel_adf_device_validate(struct adf_device *dev,
 		return -ENOMEM;
 	}
 
-	/*verify custom configs*/
+	/* verify custom configs */
 	for (i = 0; i < n_configs; i++) {
 		custom_config = &custom->configs[i];
-		/*verify buffer id set in plane*/
-		if (custom_config->plane.buffer_id > n_bufs) {
-			dev_err(dev->dev, "%s: invalid custom buffer id %d\n",
-				__func__, custom_config->plane.buffer_id);
-			err = -EINVAL;
-			goto err;
-		}
-		/*verify interface id set in plane*/
+
+		/* verify interface id set in plane */
 		intf = idr_find(&dev->interfaces,
 			custom_config->interface_id);
 		if (!intf) {
@@ -394,13 +389,28 @@ static int intel_adf_device_validate(struct adf_device *dev,
 		}
 		driver_state_add_interface(state, to_intel_intf(intf));
 
-		/*get adf_buffer for this overlay*/
+		intel_intf = to_intel_intf(intf);
+
+		/* Validate the pipe properties if any */
+		if (intel_intf->pipe && intel_intf->pipe->ops &&
+				intel_intf->pipe->ops->pre_validate)
+			intel_intf->pipe->ops->pre_validate(intel_intf->pipe,
+					custom);
+
+		/* verify buffer id set in plane */
+		if (custom_config->plane.buffer_id > n_bufs) {
+			dev_err(dev->dev, "%s: invalid custom buffer id %d\n",
+				__func__, custom_config->plane.buffer_id);
+			err = -EINVAL;
+			goto err;
+		}
+		/* get adf_buffer for this overlay */
 		buf = &cfg->bufs[custom_config->plane.buffer_id];
 		mapping = &cfg->mappings[custom_config->plane.buffer_id];
 		eng = to_intel_eng(buf->overlay_engine);
 		driver_state_add_overlay_engine(state, eng);
 
-		/*create and queue a flip for this overlay*/
+		/* create and queue a flip for this overlay */
 		f = driver_state_create_add_flip(state, eng,
 			to_intel_intf(intf), buf, mapping,
 				&custom_config->plane, custom->zorder);
-- 
1.7.9.5

