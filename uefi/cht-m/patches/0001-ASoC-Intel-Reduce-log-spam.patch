From cd0829554146c457fa461182d1bc38cd7ae80ef2 Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Wed, 19 Nov 2014 19:36:23 +0100
Subject: [PATCH 1/1] ASoC: Intel: Reduce log spam

Lots of debugging messages are done in pr_info() and pr_err().
So move them to be pr_debug() instead.

Add a debug flag (disabled) to remove the print_hex_dump_bytes calls.

Signed-off-by: Daniel Leung <daniel.leung@intel.com>
Signed-off-by: Faouaz TENOUTIT <faouaz.tenoutit@intel.com>
---
 sound/soc/intel/pcm.c                            | 10 +++++-----
 sound/soc/intel/platform-libs/controls_v2_dpcm.c |  7 ++++++-
 sound/soc/intel/sst/sst.c                        | 18 +++++++++---------
 sound/soc/intel/sst/sst_acpi.c                   |  2 +-
 sound/soc/intel/sst/sst_ipc.c                    |  2 +-
 sound/soc/intel/sst/sst_stream.c                 |  2 +-
 6 files changed, 23 insertions(+), 18 deletions(-)

diff --git a/sound/soc/intel/pcm.c b/sound/soc/intel/pcm.c
index baf9689..bd462a8 100644
--- a/sound/soc/intel/pcm.c
+++ b/sound/soc/intel/pcm.c
@@ -151,8 +151,8 @@ static void sst_fill_alloc_params(struct snd_pcm_substream *substream,
 
 	u32 buffer_addr = virt_to_phys(substream->dma_buffer.area);
 
-	pr_err("phy_to_virt: %p\n", phys_to_virt(buffer_addr));
-	pr_err("Virtual address: %p\n", substream->dma_buffer.area);
+	pr_debug("phy_to_virt: %p\n", phys_to_virt(buffer_addr));
+	pr_debug("Virtual address: %p\n", substream->dma_buffer.area);
 
 	channels = substream->runtime->channels;
 	period_size = substream->runtime->period_size;
@@ -855,7 +855,7 @@ static int sst_platform_async_cb(struct sst_platform_cb_params *params)
 		return -EINVAL;
 	}
 
-	pr_info("%s: event = %d\n", __func__, params->event);
+	pr_debug("%s: event = %d\n", __func__, params->event);
 
 	switch (params->event) {
 	case SST_PLATFORM_VTSV_READ_EVENT: {
@@ -885,7 +885,7 @@ static int sst_platform_async_cb(struct sst_platform_cb_params *params)
 	}
 
 	default:
-		pr_info("No event handler for event Id %d\n", params->event);
+		pr_debug("No event handler for event Id %d\n", params->event);
 	}
 
 	return retval;
@@ -949,7 +949,7 @@ static int sst_platform_probe(struct platform_device *pdev)
 	}
 
 	if (dpcm_enable == 1) {
-		pr_info("dpcm enabled; overriding stream map\n");
+		pr_debug("dpcm enabled; overriding stream map\n");
 		pdata->pdev_strm_map = dpcm_strm_map;
 		pdata->strm_map_size = ARRAY_SIZE(dpcm_strm_map);
 	}
diff --git a/sound/soc/intel/platform-libs/controls_v2_dpcm.c b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
index 46eb0f0..08a15af 100644
--- a/sound/soc/intel/platform-libs/controls_v2_dpcm.c
+++ b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
@@ -29,6 +29,8 @@
 #include "controls_v2.h"
 #include "sst_widgets.h"
 
+#define DUMP_LPE_BUFFERS 0
+
 static inline void sst_fill_byte_control(char *param,
 					 u8 ipc_msg, u8 block,
 					 u8 task_id, u8 pipe_id,
@@ -49,8 +51,11 @@ static inline void sst_fill_byte_control(char *param,
 	}
 	byte_data->len = len;
 	memcpy(byte_data->bytes, cmd_data, len);
+
+#if	DUMP_LPE_BUFFERS
 	print_hex_dump_bytes("writing to lpe: ", DUMP_PREFIX_OFFSET,
 			     byte_data, len + sizeof(*byte_data));
+#endif
 }
 
 static int sst_fill_and_send_cmd_unlocked(struct sst_data *sst,
@@ -880,7 +885,7 @@ void send_ssp_cmd(struct snd_soc_platform *platform, const char *id, bool enable
 	int domain_shift, mux_shift, ssp_no;
 	const struct sst_ssp_config *config;
 
-	pr_err("Enter:%s, enable=%d port_name=%s\n", __func__, enable, id);
+	pr_debug("Enter:%s, enable=%d port_name=%s\n", __func__, enable, id);
 
 	if (strcmp(id, "ssp0-port") == 0)
 		ssp_no = SST_SSP0;
diff --git a/sound/soc/intel/sst/sst.c b/sound/soc/intel/sst/sst.c
index afad59b..c112ff2 100644
--- a/sound/soc/intel/sst/sst.c
+++ b/sound/soc/intel/sst/sst.c
@@ -539,7 +539,7 @@ static ssize_t sst_sysfs_set_recovery_interval(struct device *dev,
 	val = max(val, (long)MIN_FW_MONITOR_INTERVAL);
 	ctx->monitor_lpe.interval = min(val, (long)MAX_FW_MONITOR_INTERVAL);
 
-	pr_info("%s: setting recovery interval to %d\n", __func__,
+	pr_debug("%s: setting recovery interval to %d\n", __func__,
 							 ctx->monitor_lpe.interval);
 
 	return len;
@@ -727,7 +727,7 @@ static int intel_sst_probe(struct pci_dev *pci,
 	pr_debug("ipcx 0x%x ipxd 0x%x", sst_drv_ctx->ipc_reg.ipcx,
 					sst_drv_ctx->ipc_reg.ipcd);
 
-	pr_info("Got drv data max stream %d\n",
+	pr_debug("Got drv data max stream %d\n",
 				sst_drv_ctx->info.max_streams);
 	for (i = 1; i <= sst_drv_ctx->info.max_streams; i++) {
 		struct stream_info *stream = &sst_drv_ctx->streams[i];
@@ -988,7 +988,7 @@ static int intel_sst_probe(struct pci_dev *pci,
 
 	}
 
-	pr_info("%s successfully done!\n", __func__);
+	pr_debug("%s successfully done!\n", __func__);
 	return ret;
 
 do_free_qos:
@@ -1144,7 +1144,7 @@ static int intel_sst_runtime_suspend(struct device *dev)
 	int ret = 0;
 	struct intel_sst_drv *ctx = dev_get_drvdata(dev);
 
-	pr_info("runtime_suspend called\n");
+	pr_debug("runtime_suspend called\n");
 	if (ctx->sst_state == SST_RESET) {
 		pr_debug("LPE is already in RESET state, No action");
 		return 0;
@@ -1180,7 +1180,7 @@ static int intel_sst_runtime_resume(struct device *dev)
 	int ret = 0;
 	struct intel_sst_drv *ctx = dev_get_drvdata(dev);
 
-	pr_info("runtime_resume called\n");
+	pr_debug("runtime_resume called\n");
 
 	if (ctx->pci_id == SST_BYT_PCI_ID || ctx->pci_id == SST_CHT_PCI_ID) {
 		/* wait for device power up a/c to PCI spec */
@@ -1225,7 +1225,7 @@ static int intel_sst_suspend(struct device *dev)
 	bool reset_dapm;
 	struct sst_platform_cb_params cb_params;
 
-	pr_info("Enter: %s\n", __func__);
+	pr_debug("Enter: %s\n", __func__);
 	mutex_lock(&ctx->sst_lock);
 	sst_drv_ctx->sst_suspend_state = true;
 	mutex_unlock(&ctx->sst_lock);
@@ -1249,7 +1249,7 @@ static int intel_sst_suspend(struct device *dev)
 	reset_dapm = true;
 	sst_platform_cb(&cb_params);
 
-	pr_info("reset the pvt id from val %d\n", ctx->pvt_id);
+	pr_debug("reset the pvt id from val %d\n", ctx->pvt_id);
 	spin_lock(&ctx->pvt_id_lock);
 	ctx->pvt_id = 0;
 	spin_unlock(&ctx->pvt_id_lock);
@@ -1271,7 +1271,7 @@ static int intel_sst_resume(struct device *dev)
 {
 	struct intel_sst_drv *ctx = dev_get_drvdata(dev);
 
-	pr_info("Enter: %s\n", __func__);
+	pr_debug("Enter: %s\n", __func__);
 	mutex_lock(&ctx->sst_lock);
 	sst_drv_ctx->sst_suspend_state = false;
 	mutex_unlock(&ctx->sst_lock);
@@ -1426,7 +1426,7 @@ static int __init intel_sst_init(void)
 {
 	/* Init all variables, data structure etc....*/
 	int ret = 0;
-	pr_info("INFO: ******** SST DRIVER loading.. Ver: %s\n",
+	pr_debug("INFO: ******** SST DRIVER loading.. Ver: %s\n",
 				       SST_DRIVER_VERSION);
 
 	mutex_init(&drv_ctx_lock);
diff --git a/sound/soc/intel/sst/sst_acpi.c b/sound/soc/intel/sst/sst_acpi.c
index 222365e..9c7f2fd 100644
--- a/sound/soc/intel/sst/sst_acpi.c
+++ b/sound/soc/intel/sst/sst_acpi.c
@@ -672,7 +672,7 @@ int sst_acpi_probe(struct platform_device *pdev)
 
 	sst_set_fw_state_locked(ctx, SST_RESET);
 	sst_save_shim64(ctx, ctx->shim, ctx->shim_regs64);
-	pr_info("%s successfully done!\n", __func__);
+	pr_debug("%s successfully done!\n", __func__);
 	return ret;
 
 do_free_misc:
diff --git a/sound/soc/intel/sst/sst_ipc.c b/sound/soc/intel/sst/sst_ipc.c
index ce0885d..885260e 100644
--- a/sound/soc/intel/sst/sst_ipc.c
+++ b/sound/soc/intel/sst/sst_ipc.c
@@ -420,7 +420,7 @@ static void process_fw_init(void *msg)
 	pr_info("FW Version %02x.%02x.%02x.%02x\n",
 		init->fw_version.type, init->fw_version.major,
 		init->fw_version.minor, init->fw_version.build);
-	pr_info("Build date %s Time %s\n",
+	pr_debug("Build date %s Time %s\n",
 			init->build_info.date, init->build_info.time);
 
 	/* If there any runtime parameter to set, send it */
diff --git a/sound/soc/intel/sst/sst_stream.c b/sound/soc/intel/sst/sst_stream.c
index 2c2d7e2..10d736c 100644
--- a/sound/soc/intel/sst/sst_stream.c
+++ b/sound/soc/intel/sst/sst_stream.c
@@ -195,7 +195,7 @@ int sst_alloc_stream_mrfld(char *params, struct sst_block *block)
 	pr_debug("header:%x\n", msg->mrfld_header.p.header_high.full);
 	pr_debug("response rqd: %x", msg->mrfld_header.p.header_high.part.res_rqd);
 	pr_debug("calling post_message\n");
-	pr_info("Alloc for str %d pipe %#x\n", str_id, pipe_id);
+	pr_debug("Alloc for str %d pipe %#x\n", str_id, pipe_id);
 
 	sst_add_to_dispatch_list_and_post(sst_drv_ctx, msg);
 	return str_id;
-- 
2.1.1

