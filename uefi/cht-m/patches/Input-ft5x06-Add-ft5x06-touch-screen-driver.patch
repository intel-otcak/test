From d2dd468a2f60498929b0fa1b680fa3104ffd3951 Mon Sep 17 00:00:00 2001
From: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@intel.com>
Date: Tue, 20 May 2014 21:38:02 -0700
Subject: Input: ft5x06: Add ft5x06 touch screen driver

Added ft5x06 touch screen driver.

Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@intel.com>
---
 drivers/input/touchscreen/Kconfig     |   13 +
 drivers/input/touchscreen/Makefile    |    1 +
 drivers/input/touchscreen/ft5x06_ts.c |  745 +++++++++++++++++++++++++++++++++
 include/linux/input/ft5x06_ts.h       |   87 ++++
 4 files changed, 846 insertions(+)
 create mode 100644 drivers/input/touchscreen/ft5x06_ts.c
 create mode 100644 include/linux/input/ft5x06_ts.h

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index e73d383..2544f42 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -956,4 +956,17 @@ config TOUCHSCREEN_ZFORCE
 	  To compile this driver as a module, choose M here: the
 	  module will be called zforce_ts.
 
+config TOUCHSCREEN_FOCALTECH_FT5X06
+	tristate "FOCALTECH FT5X06 touchscreen"
+	depends on I2C
+	default n
+	help
+	  Say Y here if you have a FocalTech ft5x06 series
+	  touchscreen chip.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, Choose M here: the
+	  module will be called ft5x06_ts.
+
 endif
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index efefb2f..7bdfc7d 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -78,3 +78,4 @@ obj-$(CONFIG_TOUCHSCREEN_WM97XX_ZYLONITE)	+= zylonite-wm97xx.o
 obj-$(CONFIG_TOUCHSCREEN_W90X900)	+= w90p910_ts.o
 obj-$(CONFIG_TOUCHSCREEN_TPS6507X)	+= tps6507x-ts.o
 obj-$(CONFIG_TOUCHSCREEN_ZFORCE)	+= zforce_ts.o
+obj-$(CONFIG_TOUCHSCREEN_FOCALTECH_FT5X06)	+= ft5x06_ts.o
diff --git a/drivers/input/touchscreen/ft5x06_ts.c b/drivers/input/touchscreen/ft5x06_ts.c
new file mode 100644
index 0000000..7f4cc7c
--- /dev/null
+++ b/drivers/input/touchscreen/ft5x06_ts.c
@@ -0,0 +1,745 @@
+/*
+ * drivers/input/touchscreen/ft5x06_ts.c
+ *
+ * FocalTech ft5x0x TouchScreen driver.
+ *
+ * Copyright (c) 2010  Focal tech Ltd.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * VERSION		DATE			AUTHOR
+ *    1.0		  2010-01-05			WenFS
+ *
+ * note: only support mulititouch	Wenfs 2010-10-01
+ */
+
+#define DEBUG
+
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/input/mt.h>
+#include <linux/acpi.h>
+#include <linux/gpio/consumer.h>
+#include <linux/input/ft5x06_ts.h>
+
+#define FT5X0X_NAME "ft5x0x"
+#define FT5X0X_IRQ_NAME "ft5x0x_gpio_irq"
+#define FT5X0X_RESET_NAME "ft5x0x_gpio_reset"
+#define FT5X0X_WAKE_NAME "ft5x0x_gpio_wake"
+#define BYTES_PER_LINE 16
+#define MAX_REG_LEN 256
+
+struct ft5x0x_ts_data {
+	struct i2c_client *client;
+	struct input_dev *input_dev;
+	int irq;
+	struct mutex lock;
+	u16 touch_points;
+	u8 addr;
+	u8 reg;
+	bool x_flip;
+	bool y_flip;
+	bool swap_axis;
+	struct gpio_desc *gpio_irq;
+	struct gpio_desc *gpio_wake;
+	struct gpio_desc *gpio_reset;
+	u8 power_mode;
+	u8 op_mode;
+};
+
+static int ft5x0x_i2c_rxdata(struct i2c_client *client,
+	char *rxdata, int length)
+{
+	int ret;
+
+	struct i2c_msg msgs[] = {
+		{
+			.addr	= client->addr,
+			.flags	= 0,
+			.len	= 1,
+			.buf	= rxdata,
+		},
+		{
+			.addr	= client->addr,
+			.flags	= I2C_M_RD,
+			.len	= length,
+			.buf	= rxdata,
+		},
+	};
+
+	ret = i2c_transfer(client->adapter, msgs, 2);
+	if (ret < 0)
+		dev_err(&client->dev, "%s error: %d\n", __func__, ret);
+
+	return ret;
+}
+
+static int ft5x0x_i2c_txdata(struct i2c_client *client,
+	char *txdata, int length)
+{
+	int ret;
+
+	struct i2c_msg msg[] = {
+		{
+			.addr	= client->addr,
+			.flags	= 0,
+			.len	= length,
+			.buf	= txdata,
+		},
+	};
+
+	ret = i2c_transfer(client->adapter, msg, 1);
+	if (ret < 0)
+		dev_err(&client->dev, "%s error: %d\n", __func__, ret);
+
+	return ret;
+}
+
+static int ft5x0x_write_reg(struct i2c_client *client, u8 addr, u8 value)
+{
+	u8 buf[2];
+	int ret;
+
+	buf[0] = addr;
+	buf[1] = value;
+
+	ret = ft5x0x_i2c_txdata(client, buf, 2);
+	if (ret < 0)
+		dev_err(&client->dev, "%s failed! %#x ret: %d\n",
+						__func__, buf[0], ret);
+
+	return ret;
+}
+
+static int ft5x0x_read_reg(struct i2c_client *client, u8 addr, u8 *pdata)
+{
+	int ret;
+	u8 buf[2] = {0};
+
+	buf[0] = addr;
+
+	ret = ft5x0x_i2c_rxdata(client, buf, 1);
+	if (ret < 0)
+		dev_err(&client->dev, "%s failed! %#x ret: %d\n",
+						__func__, buf[0], ret);
+
+	*pdata = buf[0];
+
+	return ret;
+}
+
+/* set ft5x0x power mode 0-active, 1-monitor, 3-hibernate */
+static int ft5x0x_set_pmode(struct ft5x0x_ts_data *ts_data, u8 mode)
+{
+	int ret;
+	struct i2c_client *client = ts_data->client;
+
+	/* set the touch pmode */
+	ret = ft5x0x_write_reg(client, FT5X0X_REG_PMODE, mode);
+
+	if (ret < 0)
+		dev_err(&client->dev, "set pmode %d failed!\n", mode);
+
+	mutex_lock(&ts_data->lock);
+	ts_data->power_mode = mode;
+	mutex_unlock(&ts_data->lock);
+
+	return ret;
+}
+
+/* set ft5x0x device mode 0-normal, 1-system, 4-test */
+static int ft5x0x_set_devmode(struct ft5x0x_ts_data *ts_data, u8 mode)
+{
+	int ret;
+	struct i2c_client *client = ts_data->client;
+
+	/* set the touch mode */
+	ret = ft5x0x_write_reg(client, FT5X0X_REG_DEV_MODE, mode);
+
+	if (ret < 0)
+		dev_err(&client->dev, "set mode %d failed!\n", mode);
+
+	mutex_lock(&ts_data->lock);
+	ts_data->op_mode = mode;
+	mutex_unlock(&ts_data->lock);
+
+	msleep(FT5X0X_DEVMODE_MS);
+
+	return ret;
+}
+
+static int ft5x0x_reg_init(struct ft5x0x_ts_data *ts_data)
+{
+	int ret;
+	struct i2c_client *client = ts_data->client;
+
+	/* set the touch threshold */
+	ret = ft5x0x_write_reg(client, FT5X0X_REG_THGROUP, FT5X0X_THGROUP);
+	if (ret < 0) {
+		dev_err(&client->dev, "set threshold group failed!\n");
+		return ret;
+	}
+
+	/* set device mode to normal */
+	ret = ft5x0x_set_devmode(ts_data, DEV_MODE_NORMAL);
+
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static int ft5x0x_wake_device(struct ft5x0x_ts_data *ts_data)
+{
+	/* wake the device by wake line*/
+	gpiod_set_value(ts_data->gpio_reset, 0);
+	usleep_range(6000, 7000);
+	gpiod_set_value(ts_data->gpio_reset, 1);
+	msleep(FT5X0X_RST_MS);
+
+	return 0;
+}
+
+static void ft5x0x_report_touch(struct ft5x0x_ts_data *ft)
+{
+	u8 buf[62] = {0};
+	u8 reg, num, id, flag;
+	int i, ret = -1;
+	u16 points = 0;
+	u32 x, y;
+
+	ret = ft5x0x_i2c_rxdata(ft->client, buf, 62);
+	if (ret < 0) {
+		dev_err(&ft->client->dev, "ft5x0x %s i2c_rxdata failed: %d",
+			__func__, ret);
+		return;
+	}
+
+	num = buf[FT5X0X_REG_TS_NUM];
+	reg = FT5X0X_REG_DATA;
+
+	for (i = 0; i < num; i++) {
+		flag = buf[reg] >> 6;
+		id = buf[reg + 2] >> 4;
+		input_mt_slot(ft->input_dev, id);
+		input_mt_report_slot_state(ft->input_dev,
+				MT_TOOL_FINGER, true);
+
+		x = ((u16)(buf[reg] & 0x0f)) << 8 | buf[reg + 1];
+		y = ((u16)(buf[reg + 2] & 0x0f)) << 8 | buf[reg + 3];
+
+		if (ft->swap_axis)
+			swap(x, y);
+		if (ft->x_flip)
+			x = SCREEN_MAX_X - x;
+		if (ft->y_flip)
+			y = SCREEN_MAX_Y - y;
+		input_report_abs(ft->input_dev, ABS_MT_POSITION_X, x);
+		input_report_abs(ft->input_dev, ABS_MT_POSITION_Y, y);
+		/* record the put down points */
+		points |= (1 << id);
+		reg += 6;
+		dev_dbg(&ft->client->dev,
+			"ft5x0x num=%d, i=%d, id=%d, flag=%d, touch_points=0x%x, points=0x%x",
+				num, i, id, flag, ft->touch_points, points);
+	}
+	/* get the put up touch points */
+	ft->touch_points &= ~points;
+
+	/* release the put up touch points */
+	for (i = 0; ft->touch_points != 0; i++) {
+		if (ft->touch_points & 0x01) {
+			dev_dbg(&ft->client->dev,
+					"ft5x0x release touch id=%d", i);
+			input_mt_slot(ft->input_dev, i);
+			input_mt_report_slot_state(ft->input_dev,
+					MT_TOOL_FINGER, false);
+		}
+		ft->touch_points >>= 1;
+	}
+	input_sync(ft->input_dev);
+	ft->touch_points = points;
+}
+
+static irqreturn_t ft5x0x_irq_handler(int irq, void *dev_id)
+{
+
+	struct ft5x0x_ts_data *ft = dev_id;
+
+	mutex_lock(&ft->lock);
+	ft5x0x_report_touch(ft);
+	mutex_unlock(&ft->lock);
+
+	return IRQ_HANDLED;
+}
+
+static int ft5x0x_gpio_init(struct ft5x0x_ts_data *ts_data)
+{
+	struct i2c_client *client;
+	struct device *dev;
+	int ret;
+
+	if (!ts_data)
+		return -EINVAL;
+
+	client = ts_data->client;
+	dev = &client->dev;
+
+	ret = gpiod_direction_input(ts_data->gpio_irq);
+	if (ret) {
+		dev_err(dev, "gpio %d dir set failed\n",
+				desc_to_gpio(ts_data->gpio_irq));
+		return ret;
+	}
+
+	ret = gpiod_direction_output(ts_data->gpio_reset, 1);
+	if (ret) {
+		dev_err(dev, "gpio %d dir set failed\n",
+				desc_to_gpio(ts_data->gpio_reset));
+		return ret;
+	}
+
+	ret = gpiod_direction_output(ts_data->gpio_wake, 1);
+	if (ret) {
+		dev_err(dev, "gpio %d dir set failed\n",
+				desc_to_gpio(ts_data->gpio_wake));
+		return ret;
+	}
+
+	return 0;
+}
+
+static int ft5x0x_irq_init(struct ft5x0x_ts_data *ts_data)
+{
+	struct i2c_client *client;
+	struct device *dev;
+	int ret;
+
+	if (!ts_data)
+		return -EINVAL;
+
+	client = ts_data->client;
+	dev = &client->dev;
+
+	ret = gpiod_to_irq(ts_data->gpio_irq);
+	if (ret < 0) {
+		dev_err(dev, "gpio %d irq failed\n",
+				desc_to_gpio(ts_data->gpio_irq));
+		return ret;
+	}
+
+	/* Update client irq if its invalid */
+	if (client->irq < 0)
+		client->irq = ret;
+
+	dev_dbg(dev, "gpio no:%d irq:%d\n",
+			desc_to_gpio(ts_data->gpio_irq), ret);
+
+	return 0;
+}
+
+static int ft5x0x_platform_probe(struct ft5x0x_ts_data *ts_data)
+{
+	struct i2c_client *client = ts_data->client;
+	struct device *dev = &client->dev;
+	struct ft5x0x_ts_platform_data *pdata;
+	int err;
+
+	pdata = dev->platform_data;
+
+	if (!pdata)
+		return -ENODEV;
+
+	ts_data->gpio_irq = gpio_to_desc(pdata->irq);
+	ts_data->gpio_reset = gpio_to_desc(pdata->reset);
+	ts_data->gpio_wake = gpio_to_desc(pdata->wake);
+	ts_data->x_flip = pdata->x_flip;
+	ts_data->y_flip = pdata->y_flip;
+	ts_data->swap_axis = pdata->swap_axis;
+
+	err = gpio_request(desc_to_gpio(ts_data->gpio_irq),
+					FT5X0X_IRQ_NAME);
+	if (err < 0) {
+		dev_err(dev, "Failed request gpio=%d irq error=%d\n",
+			pdata->irq, err);
+		return err;
+	}
+
+	err = gpio_request(desc_to_gpio(ts_data->gpio_reset),
+						FT5X0X_RESET_NAME);
+	if (err < 0) {
+		dev_err(dev, "Failed request gpio=%d reset error=%d\n",
+			pdata->reset, err);
+		return err;
+	}
+
+	err = gpio_request(desc_to_gpio(ts_data->gpio_wake),
+						FT5X0X_WAKE_NAME);
+	if (err < 0) {
+		dev_err(dev, "Failed request gpio=%d wake error=%d\n",
+			pdata->wake, err);
+		return err;
+	}
+
+	err = ft5x0x_gpio_init(ts_data);
+	if (err < 0) {
+		dev_err(dev, "gpio init failed\n");
+		return err;
+	}
+
+	err = ft5x0x_irq_init(ts_data);
+	if (err < 0) {
+		dev_err(dev, "irq init failed\n");
+		return err;
+	}
+
+	return 0;
+}
+
+static int ft5x0x_acpi_probe(struct ft5x0x_ts_data *ts_data)
+{
+	const struct acpi_device_id *id;
+	struct i2c_client *client = ts_data->client;
+	struct device *dev;
+	struct gpio_desc *gpio;
+	int ret, index = 0;
+
+	if (!client)
+		return -EINVAL;
+
+	dev = &client->dev;
+
+	if (!ACPI_HANDLE(dev))
+		return -ENODEV;
+
+	id = acpi_match_device(dev->driver->acpi_match_table, dev);
+
+	if (!id)
+		return -ENODEV;
+
+	/* touch gpio interrupt pin */
+	gpio = devm_gpiod_get_index(dev, FT5X0X_IRQ_NAME, index);
+
+	if (IS_ERR(gpio)) {
+		dev_err(dev, "acpi gpio get index %d failed\n", index);
+		return PTR_ERR(gpio);
+	}
+
+	ts_data->gpio_irq = gpio;
+
+	dev_dbg(dev, "gpio resource %d, no %d\n", index, desc_to_gpio(gpio));
+
+	index++;
+
+	/* touch gpio reset pin */
+	gpio = devm_gpiod_get_index(dev, FT5X0X_RESET_NAME, index);
+
+	if (IS_ERR(gpio)) {
+		dev_err(dev, "acpi gpio get index %d failed\n", index);
+		return PTR_ERR(gpio);
+	}
+
+	ts_data->gpio_reset = gpio;
+
+	dev_dbg(dev, "gpio resource %d, no %d\n", index, desc_to_gpio(gpio));
+
+	index++;
+
+	/* touch gpio wake pin */
+	gpio = devm_gpiod_get_index(dev, FT5X0X_WAKE_NAME, index);
+
+	if (IS_ERR(gpio)) {
+		dev_err(dev, "acpi gpio get index 2 failed\n");
+		return PTR_ERR(gpio);
+	}
+
+	ts_data->gpio_wake = gpio;
+
+	dev_dbg(dev, "gpio resource %d, no %d\n", index, desc_to_gpio(gpio));
+
+	ret = ft5x0x_gpio_init(ts_data);
+	if (ret < 0) {
+		dev_err(dev, "gpio init failed\n");
+		return ret;
+	}
+
+	ret = ft5x0x_irq_init(ts_data);
+	if (ret < 0) {
+		dev_err(dev, "irq init failed\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+#ifdef DEBUG
+
+int ft5x0x_reg_dump(struct ft5x0x_ts_data *ts_data, u8 mode)
+{
+	int ret, i, j;
+	u8 reg_buf[MAX_REG_LEN] = {0};
+	u8 dbg_buf_str[BYTES_PER_LINE * 3 + 1] = "";
+	u8 reg_buf_str[BYTES_PER_LINE * 3 + 1] = "";
+	struct i2c_client *client = ts_data->client;
+
+	ret = ft5x0x_set_devmode(ts_data, mode);
+	if (ret < 0)
+		return ret;
+
+	ret = ft5x0x_i2c_rxdata(ts_data->client, reg_buf, MAX_REG_LEN);
+	if (ret < 0)
+		return ret;
+
+	for (j = 0; j < MAX_REG_LEN;) {
+		for (i = 0; i < BYTES_PER_LINE; i++, j++) {
+			sprintf(dbg_buf_str + i * 3, "%02x%c",
+				j,
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+			sprintf(reg_buf_str + i * 3, "%02x%c",
+				reg_buf[j],
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+
+		}
+		dev_dbg(&client->dev, "%s\n", dbg_buf_str);
+		dev_dbg(&client->dev, "%s\n", reg_buf_str);
+	}
+
+	return 0;
+}
+
+static ssize_t attr_reg_dump_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct ft5x0x_ts_data *ts_data = dev_get_drvdata(dev);
+	struct i2c_client *client = ts_data->client;
+	u8 mode = ts_data->op_mode;
+	u8 ret;
+
+	ft5x0x_reg_dump(ts_data, DEV_MODE_NORMAL);
+	ft5x0x_reg_dump(ts_data, DEV_MODE_SYSTEM);
+	ft5x0x_reg_dump(ts_data, DEV_MODE_TEST);
+
+	ret = ft5x0x_set_devmode(ts_data, mode);
+	if (ret < 0) {
+		dev_err(&client->dev, "reg dump set mode failed\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static DEVICE_ATTR(reg_dump, S_IRUSR, attr_reg_dump_show, NULL);
+
+static struct attribute *attrs[] = {
+	&dev_attr_reg_dump.attr,
+	NULL
+};
+
+static struct attribute_group debug_attr = {
+	.name = "ft_debug",
+	.attrs = attrs
+};
+#endif
+
+static int ft5x0x_ts_probe(struct i2c_client *client,
+				const struct i2c_device_id *id)
+{
+	struct ft5x0x_ts_data *ts_data;
+	struct input_dev *input_dev;
+	int err;
+
+	dev_dbg(&client->dev, "probe start\n");
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_dbg(&client->dev, "Invalid I2C function\n");
+		return -ENODEV;
+	}
+
+	ts_data = devm_kzalloc(&client->dev, sizeof(*ts_data), GFP_KERNEL);
+	if (!ts_data) {
+		dev_err(&client->dev, "failed to allocate driver data.\n");
+		return -ENOMEM;
+	}
+
+	input_dev = devm_input_allocate_device(&client->dev);
+	if (!input_dev) {
+		dev_err(&client->dev, "failed to allocate input device.\n");
+		return -ENOMEM;
+	}
+
+	mutex_init(&ts_data->lock);
+
+	ts_data->client = client;
+	ts_data->input_dev = input_dev;
+
+	if (client->dev.platform_data)
+		err = ft5x0x_platform_probe(ts_data);
+	else if (ACPI_HANDLE(&client->dev))
+		err = ft5x0x_acpi_probe(ts_data);
+	else
+		err = -ENODEV;
+
+	if (err) {
+		dev_err(&client->dev, "no platform resources found\n");
+		return err;
+	}
+
+	input_dev->name = FT5X0X_NAME;
+	input_mt_init_slots(ts_data->input_dev, MAX_TS_NUM, 0);
+	input_set_abs_params(ts_data->input_dev,
+			     ABS_MT_POSITION_X, 0, SCREEN_MAX_X, 0, 0);
+	input_set_abs_params(ts_data->input_dev,
+			     ABS_MT_POSITION_Y, 0, SCREEN_MAX_Y, 0, 0);
+
+	__set_bit(EV_ABS, ts_data->input_dev->evbit);
+
+	input_set_drvdata(input_dev, ts_data);
+	i2c_set_clientdata(client, ts_data);
+
+	if (client->irq < 0)
+		return -ENODEV;
+
+	err = devm_request_threaded_irq(&client->dev, client->irq,
+					  NULL, ft5x0x_irq_handler,
+					  IRQF_TRIGGER_FALLING | IRQF_ONESHOT,
+					  client->name, ts_data);
+	if (err) {
+		dev_err(&client->dev, "Unable to request touchscreen irq.\n");
+		return err;
+	}
+
+	disable_irq(client->irq);
+
+	err = input_register_device(input_dev);
+	if (err) {
+		dev_err(&client->dev, "failed to register input device: %s\n",
+			dev_name(&client->dev));
+		return err;
+	}
+
+#ifdef DEBUG
+	err = sysfs_create_group(&client->dev.kobj, &debug_attr);
+	if (err < 0) {
+		dev_err(&client->dev, "debug sysfs register failed\n");
+		goto err_sysfs_create;
+	}
+#endif
+	err = ft5x0x_reg_init(ts_data);
+
+	if (err) {
+		dev_err(&client->dev, "reg init failed\n");
+		goto err_sysfs_create;
+	}
+
+	err = ft5x0x_wake_device(ts_data);
+
+	if (err) {
+		dev_err(&client->dev, "enable device failed\n");
+		goto err_sysfs_create;
+	}
+
+	enable_irq(client->irq);
+
+	dev_dbg(&client->dev, "probe end\n");
+
+	return 0;
+
+err_sysfs_create:
+	input_unregister_device(ts_data->input_dev);
+	return err;
+}
+
+static int ft5x0x_ts_remove(struct i2c_client *client)
+{
+	struct ft5x0x_ts_data *ts_data = i2c_get_clientdata(client);
+
+#ifdef DEBUG
+	sysfs_remove_group(&client->dev.kobj, &debug_attr);
+#endif
+	input_unregister_device(ts_data->input_dev);
+	i2c_set_clientdata(client, NULL);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int ft5x0x_ts_suspend(struct device *dev)
+{
+	struct ft5x0x_ts_data *tsdata = i2c_get_clientdata(to_i2c_client(dev));
+	int ret;
+
+	dev_dbg(&tsdata->client->dev, "suspend");
+
+	disable_irq(tsdata->irq);
+
+	ret = ft5x0x_set_pmode(tsdata, PMODE_HIBERNATE);
+
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static int ft5x0x_ts_resume(struct device *dev)
+{
+	struct ft5x0x_ts_data *tsdata = i2c_get_clientdata(to_i2c_client(dev));
+	int ret;
+
+	dev_dbg(&tsdata->client->dev, "resume");
+
+	ret = ft5x0x_set_pmode(tsdata, PMODE_ACTIVE);
+
+	if (ret < 0)
+		return ret;
+
+	ft5x0x_wake_device(tsdata);
+
+	enable_irq(tsdata->irq);
+
+	return 0;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(ft5x0x_ts_pm_ops,
+			 ft5x0x_ts_suspend, ft5x0x_ts_resume);
+
+static const struct acpi_device_id ft5x0x_acpi_match[] = {
+	{"FT05506", 0},
+	{ },
+};
+MODULE_DEVICE_TABLE(acpi, ft5x0x_acpi_match);
+
+static const struct i2c_device_id ft5x0x_ts_id[] = {
+	{ "ft5x06", 0,},
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, ft5x0x_ts_id);
+
+static struct i2c_driver ft5x0x_ts_driver = {
+	.probe		= ft5x0x_ts_probe,
+	.remove		= ft5x0x_ts_remove,
+	.id_table	= ft5x0x_ts_id,
+	.driver	= {
+		.name	= FT5X0X_NAME,
+		.owner	= THIS_MODULE,
+		.pm	= &ft5x0x_ts_pm_ops,
+		.acpi_match_table = ACPI_PTR(ft5x0x_acpi_match),
+	},
+};
+module_i2c_driver(ft5x0x_ts_driver);
+
+MODULE_AUTHOR("<wenfs@Focaltech-systems.com>");
+MODULE_DESCRIPTION("FocalTech ft5x0x TouchScreen driver");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/input/ft5x06_ts.h b/include/linux/input/ft5x06_ts.h
new file mode 100644
index 0000000..a821478
--- /dev/null
+++ b/include/linux/input/ft5x06_ts.h
@@ -0,0 +1,87 @@
+#ifndef __LINUX_FT5X0X_TS_H__
+#define __LINUX_FT5X0X_TS_H__
+
+#define SCREEN_MAX_X    1024
+#define SCREEN_MAX_Y    600
+#define PRESS_MAX       255
+
+#define FT5X0X_RST_MS		500
+#define FT5X0X_DEVMODE_MS	500
+
+#define MAX_TS_NUM	10
+
+struct ft5x0x_ts_platform_data {
+	u16 irq; /* irq gpio */
+	u16 wake; /* wake gpio */
+	u16 reset; /* reset gpio */
+
+	bool x_flip;
+	bool y_flip;
+	bool swap_axis;
+};
+
+enum ft5x0x_ts_regs {
+	FT5X0X_REG_DEV_MODE = 0x00,
+	FT5X0X_REG_TS_NUM = 0x02,
+	FT5X0X_REG_DATA = 0x03,
+	FT5X0X_REG_THGROUP = 0x80,
+	FT5X0X_REG_THPEAK = 0x81,
+	FT5X0X_REG_THCAL = 0x82,
+	FT5X0X_REG_THWATER = 0x83,
+	FT5X0X_REG_THTEMP = 0x84,
+	FT5X0X_REG_THDIFF = 0x85,
+	FT5X0X_REG_CTRL = 0x86,
+	FT5X0X_REG_TIMEENTERMONITOR = 0x87,
+	FT5X0X_REG_PERIODACTIVE = 0x88,
+	FT5X0X_REG_PERIODMONITOR = 0x89,
+	FT5X0X_REG_HEIGHT_B = 0x8a,
+	FT5X0X_REG_MAX_FRAME = 0x8b,
+	FT5X0X_REG_DIST_MOVE = 0x8c,
+	FT5X0X_REG_DIST_POINT = 0x8d,
+	FT5X0X_REG_FEG_FRAME = 0x8e,
+	FT5X0X_REG_SINGLE_CLICK_OFFSET = 0x8f,
+	FT5X0X_REG_DOUBLE_CLICK_TIME_MIN = 0x90,
+	FT5X0X_REG_SINGLE_CLICK_TIME = 0x91,
+	FT5X0X_REG_LEFT_RIGHT_OFFSET = 0x92,
+	FT5X0X_REG_UP_DOWN_OFFSET = 0x93,
+	FT5X0X_REG_DISTANCE_LEFT_RIGHT = 0x94,
+	FT5X0X_REG_DISTANCE_UP_DOWN = 0x95,
+	FT5X0X_REG_ZOOM_DIS_SQR = 0x96,
+	FT5X0X_REG_RADIAN_VALUE = 0x97,
+	FT5X0X_REG_MAX_X_HIGH = 0x98,
+	FT5X0X_REG_MAX_X_LOW = 0x99,
+	FT5X0X_REG_MAX_Y_HIGH = 0x9a,
+	FT5X0X_REG_MAX_Y_LOW = 0x9b,
+	FT5X0X_REG_K_X_HIGH = 0x9c,
+	FT5X0X_REG_K_X_LOW = 0x9d,
+	FT5X0X_REG_K_Y_HIGH = 0x9e,
+	FT5X0X_REG_K_Y_LOW = 0x9f,
+	FT5X0X_REG_AUTO_CLB_MODE = 0xa0,
+	FT5X0X_REG_LIB_VERSION_H = 0xa1,
+	FT5X0X_REG_LIB_VERSION_L = 0xa2,
+	FT5X0X_REG_CIPHER = 0xa3,
+	FT5X0X_REG_MODE = 0xa4,
+	FT5X0X_REG_PMODE = 0xa5,	/* Power Consume Mode */
+	FT5X0X_REG_FIRMID = 0xa6,
+	FT5X0X_REG_STATE = 0xa7,
+	FT5X0X_REG_FT5201ID = 0xa8,
+	FT5X0X_REG_ERR = 0xa9,
+	FT5X0X_REG_CLB = 0xaa,
+};
+
+#define FT5X0X_THGROUP 25
+
+/* FT5X0X_REG_PMODE */
+#define PMODE_ACTIVE 0x00
+#define PMODE_MONITOR 0x01
+#define PMODE_STANDBY 0x02
+#define PMODE_HIBERNATE 0x03
+
+#define MODE_INTERRUPT 0x01
+#define MODE_POLLING 0x00
+
+#define DEV_MODE_NORMAL 0x00
+#define DEV_MODE_SYSTEM 0x01
+#define DEV_MODE_TEST 0x04
+
+#endif
-- 
1.7.9.5

