From 11bbe0464a325aa6efec1e6847dd6fe6ca66756d Mon Sep 17 00:00:00 2001
Message-Id: <11bbe0464a325aa6efec1e6847dd6fe6ca66756d.1438876442.git.yunwei.zhang@intel.com>
From: Arun R Murthy <arun.r.murthy@intel.com>
Date: Fri, 24 Jul 2015 09:06:47 +0530
Subject: [PATCH] REVERTME [VPG]: drm/i915: update arbiter in non-atomic case

While in full screen video, i.e only sprite enable case, if sprite
plane is forcefully disabled, as part of sprite disable, primary
plane is enabled. Hence update dsparb also so that some buffer will
be allocated for primary.

This patch is REVERTME because it is based on the VPG internal
set_display atomic call. On migrating to nuclear page flip this will be
reverted.

Tracked-On: http://jira01.devtools.intel.com/browse/IMINAN-41371
Change-Id: I07cd8e24a6a094bea7b5602c86c5ae74b2a48381
Signed-off-by: Arun R Murthy <arun.r.murthy@intel.com>
Signed-off-by: Shen, Lei <lei.shen@intel.com>
## Don't forget to add a JIRA URL to the Tracked-On metadata!
## https://wiki.ith.intel.com/display/CACTUS/Patch+requirements+check
## url should be in the form:
## Tracked-On: https://jira01.devtools.intel.com/browse/<PROJ>-<NUMB>
## Several Tracked-On lines are allowed
## you can fully prefill your Tracked-On commits using environment variable:
## export CURRENT_TRACKED_ON=https://jira01.devtools.intel.com/browse/<PROJ>-<NUMB>
##
---
 drivers/gpu/drm/i915/intel_sprite.c |    5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 9694c59..dc5d0c4 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -745,6 +745,7 @@ vlv_disable_plane(struct drm_plane *dplane, struct drm_crtc *crtc)
 
 	if (!intel_crtc->atomic_update) {
 		intel_flush_primary_plane(dev_priv, intel_crtc->plane);
+		vlv_update_dsparb(intel_crtc);
 		if (atomic_update)
 			intel_pipe_update_end(intel_crtc, start_vbl_count);
 	}
@@ -1636,10 +1637,10 @@ intel_update_plane(struct drm_plane *plane, struct drm_crtc *crtc,
 	 * come from the user layer. But if in worst case faulty situations
 	 * we get then the system will enter into an unrecoverable state, which
 	 * needs hard shutdown. So as a precaution if the sprite_unpin_work is
-	 * not null then unpin immediately. This is done by passing NULL event.
+	 * not null, wait for the pending flip to be completed and then proceed.
 	 */
 	if (intel_crtc->sprite_unpin_work)
-		event = NULL;
+		intel_crtc_wait_for_pending_flips(crtc);
 
 	if (event) {
 		work = kzalloc(sizeof(*work), GFP_KERNEL);
-- 
1.7.9.5

