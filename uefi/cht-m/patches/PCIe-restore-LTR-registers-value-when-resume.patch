From 7c886e29b6892424ef0d98b22cdb7972d431bb2c Mon Sep 17 00:00:00 2001
From: zhengq <qi.zheng@intel.com>
Date: Wed, 2 Sep 2015 21:28:50 +0800
Subject: [PATCH] PCIe: restore LTR registers value when resume.

For some PCIe devices, the "No_Soft_Reset" is 0 thus there
is internal reset during transition from D3hot to D0. In that
case, the LTR registers value may get clear. The effective
LTR values are important for ASPM L1 sub-status support.

There is an existing LTR restore for re-powering the PCIe device.
Just make sure this restore could happen for every resume from
S3 can fix this bug.

Change-Id: Idd68a415f11b27f8993b8a1db3096456641c7dcb
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-17746
Signed-off-by: zhengq <qi.zheng@intel.com>
---
 drivers/pci/pcie/aspm.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/pci/pcie/aspm.c b/drivers/pci/pcie/aspm.c
index a46bd2d807c8..eccff7de1c28 100644
--- a/drivers/pci/pcie/aspm.c
+++ b/drivers/pci/pcie/aspm.c
@@ -258,14 +258,14 @@ static void pcie_aspm_l1ss_cfg(struct pcie_link_state *link, u32 state)
 	pr_debug("%s: state %d, old state %d\n",
 		__func__, l1ss_state, link->l1ss_enabled);
 
-	if (link->l1ss_enabled == l1ss_state)
-		return;
-
 	/* Restore the LTR values */
 	child = list_entry(linkbus->devices.next, struct pci_dev, bus_list);
 	pcie_write_ltr(child, link->dw_max_snoop_ltr,
 		link->dw_max_no_snoop_ltr);
 
+	if (link->l1ss_enabled == l1ss_state)
+		return;
+
 	/* Clear L1SS enable bits if L1 is going to be disabled
 	* or l1ss is disabled */
 	if (!(state & ASPM_STATE_L1) || (!l1ss_state)) {
-- 
2.6.0.rc0.2.g7662973

