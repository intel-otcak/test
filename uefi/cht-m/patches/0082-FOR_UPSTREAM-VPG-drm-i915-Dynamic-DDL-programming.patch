From bae3a3aff1ef1845cc2aade39868876024893642 Mon Sep 17 00:00:00 2001
Message-Id: <bae3a3aff1ef1845cc2aade39868876024893642.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Sat, 5 Jul 2014 00:17:18 +0530
Subject: [PATCH 082/312] FOR_UPSTREAM [VPG]: drm/i915: Dynamic DDL
 programming

The following changes have been ported:

	drm/i915: Dynamic DDL programming
	(OriginalChangeID - I5691ab347862c343848f47646a830d70475ac27f)
	Description: Program Drain Latency values dynamically when plane properties change.

	drm/i915: Memory arbiter sprite support
	Changes for checking if sprite/primary/plane/cursor is enabled.
	Added support to compute drain latency when Primary plane/sprite/cursor is
	enabled. Added support to compute drain latency for sprite.
	(OriginalChangeID - I0b06677daafc0b5ef9a5ca8bd9b1fba9ae6b0384)

Issue: GMIN-1440
Change-Id: Ibd364fe533916022f0b925c4157b6e20f5058bd4
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
Signed-off-by: Pallavi <pallavi.g@intel.com>
Signed-off-by: Arun Murthy <arun.r.murthy@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |    6 +
 drivers/gpu/drm/i915/intel_display.c |    2 +
 drivers/gpu/drm/i915/intel_drv.h     |    6 +-
 drivers/gpu/drm/i915/intel_pm.c      |  225 ++++++++++++----------------------
 drivers/gpu/drm/i915/intel_uncore.c  |   11 ++
 5 files changed, 100 insertions(+), 150 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index f631734..3b4489a 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2762,6 +2762,9 @@ int vlv_freq_opcode(struct drm_i915_private *dev_priv, int val);
 int i915_perfmon_ioctl(struct drm_device *dev, void *data,
 	struct drm_file *file);
 
+extern void i915_write_bits32(struct drm_i915_private *dev_priv,
+	u32 reg, u32 val, u32 mask, bool trace);
+
 #define I915_READ8(reg)		dev_priv->uncore.funcs.mmio_readb(dev_priv, (reg), true)
 #define I915_WRITE8(reg, val)	dev_priv->uncore.funcs.mmio_writeb(dev_priv, (reg), (val), true)
 
@@ -2798,6 +2801,9 @@ int i915_perfmon_ioctl(struct drm_device *dev, void *data,
 #define POSTING_READ(reg)	(void)I915_READ_NOTRACE(reg)
 #define POSTING_READ16(reg)	(void)I915_READ16_NOTRACE(reg)
 
+#define I915_WRITE_BITS(reg, val, mask) \
+	i915_write_bits32(dev_priv, (reg), (val), (mask), true)
+
 /* "Broadcast RGB" property */
 #define INTEL_BROADCAST_RGB_AUTO 0
 #define INTEL_BROADCAST_RGB_FULL 1
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 652085d..9dfb482 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2733,6 +2733,8 @@ static void ironlake_update_primary_plane(struct drm_crtc *crtc,
 	intel_fb = to_intel_framebuffer(fb);
 	obj = intel_fb->obj;
 
+	intel_update_watermarks(crtc);
+
 	reg = DSPCNTR(plane);
 	dspcntr = I915_READ(reg);
 	/* Mask out pixel format bits in case we change it */
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 9cec89c..f182eab 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -480,9 +480,9 @@ struct vlv_MA_component_enabled {
 	union {
 		u8 component;
 		struct {
-			u8 EnPlane:1;
-			u8 EnSprite:1;
-			u8 EnCursor:1;
+			u8 plane_enabled:1;
+			u8 sprite_enabled:1;
+			u8 cursor_enabled:1;
 			u8 reserved:5;
 		};
 	};
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index a96e1f9..a8509ff 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -1395,22 +1395,21 @@ static bool vlv_compute_drain_latency(struct drm_device *dev,
 	if (!intel_crtc_active(crtc))
 		return false;
 
+	/* VESA DOT Clock */
 	clock = to_intel_crtc(crtc)->config.adjusted_mode.crtc_clock;
-	if (enable.EnPlane) {
+	if (enable.plane_enabled) {
 		pixel_size =
 			crtc->primary->fb->bits_per_pixel / 8;	/* BPP */
 
 		entries = (clock / 1000) * pixel_size;
 		*plane_prec_mult = (entries > 256) ?
 			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
-		if (WARN_ON(pixel_size == 0))
-			return latencyprogrammed;
 		*plane_dl = (64 * (*plane_prec_mult) * 4) / ((clock / 1000) *
 				pixel_size);
 		latencyprogrammed = true;
 	}
 
-	if (enable.EnCursor) {
+	if (enable.cursor_enabled) {
 		entries = (clock / 1000) * 4;	/* BPP is always 4 for cursor */
 		*cursor_prec_mult = (entries > 256) ?
 			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
@@ -1418,12 +1417,10 @@ static bool vlv_compute_drain_latency(struct drm_device *dev,
 							4);
 		latencyprogrammed = true;
 	}
-	if (enable.EnSprite) {
+	if (enable.sprite_enabled) {
 		entries = (clock / 1000) * sprite_pixel_size;
 		*sprite_prec_mult = (entries > 256) ?
 			DRAIN_LATENCY_PRECISION_64 : DRAIN_LATENCY_PRECISION_32;
-		if (WARN_ON(sprite_pixel_size == 0))
-			return latencyprogrammed;
 		*sprite_dl = (64 * (*sprite_prec_mult) * 4) / ((clock / 1000) *
 						sprite_pixel_size);
 		latencyprogrammed = true;
@@ -1432,14 +1429,6 @@ static bool vlv_compute_drain_latency(struct drm_device *dev,
 	return latencyprogrammed;
 }
 
-/*
- * Update drain latency registers of memory arbiter
- *
- * Valleyview SoC has a new memory arbiter and needs drain latency registers
- * to be programmed. Each plane has a drain latency multiplier and a drain
- * latency value.
- */
-
 static void vlv_update_drain_latency(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
@@ -1448,58 +1437,68 @@ static void vlv_update_drain_latency(struct drm_device *dev)
 	int plane_prec_mult = 0, cursor_prec_mult = 0;
 	/* Precision multiplier is either 64 or 32 */
 	struct vlv_MA_component_enabled enable;
-	u32 val;
 
+	enable.plane_enabled = is_plane_enabled(dev_priv, 0);
+	enable.cursor_enabled = false;
+	enable.sprite_enabled = false;
 
-	/* compute & update drain latency only if plane enabled */
-	enable.EnPlane = is_plane_enabled(dev_priv, 0);
-	enable.EnCursor = is_cursor_enabled(dev_priv, 0);
-	enable.EnSprite = false;
-
-	/* For plane A, Cursor A */
+	/* For plane A */
 	if (vlv_compute_drain_latency(dev, 0, &plane_prec_mult,
-		&planea_dl, &cursor_prec_mult, &cursora_dl, NULL,
-		NULL, 0, enable)) {
-		cursora_prec = (cursor_prec_mult ==
-				DRAIN_LATENCY_PRECISION_32) ?
-				DDL_CURSORA_PRECISION_32 :
-				DDL_CURSORA_PRECISION_64;
+		&planea_dl, NULL, NULL, NULL, NULL, 0, enable)) {
+
 		planea_prec = (plane_prec_mult ==
 				DRAIN_LATENCY_PRECISION_32) ?
 				DDL_PLANEA_PRECISION_32 :
 				DDL_PLANEA_PRECISION_64;
 
-		val = I915_READ(VLV_DDL1);
-		I915_WRITE(VLV_DDL1, val | cursora_prec |
-			(cursora_dl << DDL_CURSORA_SHIFT) |
-			planea_prec | planea_dl);
-	} else {
-		I915_WRITE(VLV_DDL1, 0);
-	}
-	enable.EnPlane = is_plane_enabled(dev_priv, 1);
-	enable.EnCursor = is_cursor_enabled(dev_priv, 1);
-	enable.EnSprite = false;
+		I915_WRITE_BITS(VLV_DDL1, planea_prec | planea_dl, 0x000000ff);
+	} else
+		I915_WRITE_BITS(VLV_DDL1, 0x0000, 0x000000ff);
 
-	/* For plane B, Cursor B */
-	if (vlv_compute_drain_latency(dev, 1, &plane_prec_mult,
-		&planeb_dl, &cursor_prec_mult, &cursorb_dl, NULL,
-		NULL, 0, enable)) {
-		cursorb_prec = (cursor_prec_mult ==
+	/* Cursor A */
+	enable.plane_enabled = false;
+	enable.cursor_enabled = is_cursor_enabled(dev_priv, 0);
+
+	if (vlv_compute_drain_latency(dev, 0, NULL, NULL, &cursor_prec_mult,
+			&cursora_dl, NULL, NULL, 0, enable)) {
+		cursora_prec = (cursor_prec_mult ==
 				DRAIN_LATENCY_PRECISION_32) ?
-				DDL_CURSORB_PRECISION_32 :
-				DDL_CURSORB_PRECISION_64;
+				DDL_CURSORA_PRECISION_32 :
+				DDL_CURSORA_PRECISION_64;
+
+		I915_WRITE_BITS(VLV_DDL1, cursora_prec |
+			(cursora_dl << DDL_CURSORA_SHIFT), 0xff000000);
+	} else
+		I915_WRITE_BITS(VLV_DDL1, 0x0000, 0xff000000);
+
+	/* For plane B */
+	enable.plane_enabled = is_plane_enabled(dev_priv, 1);
+	enable.cursor_enabled = false;
+	if (vlv_compute_drain_latency(dev, 1, &plane_prec_mult,
+		&planeb_dl, NULL, NULL, NULL, NULL, 0, enable)) {
+
 		planeb_prec = (plane_prec_mult ==
 				DRAIN_LATENCY_PRECISION_32) ?
 				DDL_PLANEB_PRECISION_32 :
 				DDL_PLANEB_PRECISION_64;
+		I915_WRITE_BITS(VLV_DDL2, planeb_prec | planeb_dl, 0x000000ff);
+	} else
+		I915_WRITE_BITS(VLV_DDL2, 0x0000, 0x000000ff);
 
-		val = I915_READ(VLV_DDL2);
-		I915_WRITE(VLV_DDL2, val | cursorb_prec |
-			(cursorb_dl << DDL_CURSORB_SHIFT) |
-			planeb_prec | planeb_dl);
-	} else {
-		I915_WRITE(VLV_DDL1, 0);
-	}
+	/* Cursor B */
+	enable.plane_enabled = false;
+	enable.cursor_enabled = is_cursor_enabled(dev_priv, 1);
+	if (vlv_compute_drain_latency(dev, 1, NULL, NULL, &cursor_prec_mult,
+			&cursorb_dl, NULL, NULL, 0, enable)) {
+		cursorb_prec = (cursor_prec_mult ==
+				DRAIN_LATENCY_PRECISION_32) ?
+				DDL_CURSORB_PRECISION_32 :
+				DDL_CURSORB_PRECISION_64;
+
+		I915_WRITE_BITS(VLV_DDL2, cursorb_prec | (cursorb_dl <<
+				DDL_CURSORB_SHIFT), 0xff000000);
+	} else
+		I915_WRITE_BITS(VLV_DDL2, 0x0000, 0xff000000);
 }
 
 #define single_plane_enabled(mask) is_power_of_2(mask)
@@ -1507,13 +1506,9 @@ static void vlv_update_drain_latency(struct drm_device *dev)
 static void valleyview_update_wm(struct drm_crtc *crtc)
 {
 	struct drm_device *dev = crtc->dev;
-	static const int sr_latency_ns = 12000;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	int planea_wm, planeb_wm, cursora_wm, cursorb_wm;
-	int plane_sr, cursor_sr;
-	int ignore_plane_sr, ignore_cursor_sr;
 	unsigned int enabled = 0;
-
 	vlv_update_drain_latency(dev);
 
 	if (g4x_compute_wm0(dev, PIPE_A,
@@ -1528,30 +1523,6 @@ static void valleyview_update_wm(struct drm_crtc *crtc)
 			    &planeb_wm, &cursorb_wm))
 		enabled |= 1 << PIPE_B;
 
-	if (single_plane_enabled(enabled) &&
-	    !dev_priv->sr_disable &&
-	    g4x_compute_srwm(dev, ffs(enabled) - 1,
-			     sr_latency_ns,
-			     &valleyview_wm_info,
-			     &valleyview_cursor_wm_info,
-			     &plane_sr, &ignore_cursor_sr) &&
-	    g4x_compute_srwm(dev, ffs(enabled) - 1,
-			     2*sr_latency_ns,
-			     &valleyview_wm_info,
-			     &valleyview_cursor_wm_info,
-			     &ignore_plane_sr, &cursor_sr)) {
-		I915_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
-	} else {
-		I915_WRITE(FW_BLC_SELF_VLV,
-			   I915_READ(FW_BLC_SELF_VLV) & ~FW_CSPWRDWNEN);
-		plane_sr = cursor_sr = 0;
-	}
-
-	DRM_DEBUG_KMS("Setting FIFO watermarks - A: plane=%d, cursor=%d, B: plane=%d, cursor=%d, SR: plane=%d, cursor=%d\n",
-		      planea_wm, cursora_wm,
-		      planeb_wm, cursorb_wm,
-		      plane_sr, cursor_sr);
-
 	I915_WRITE(DSPFW1,
 		   (DSPFW_SR_VAL << DSPFW_SR_SHIFT) |
 		   (DSPFW_CURSORB_VAL << DSPFW_CURSORB_SHIFT) |
@@ -3049,83 +3020,43 @@ static void valleyview_update_sprite_wm(struct drm_plane *plane,
 {
 	struct drm_device *dev = plane->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	int pipe = to_intel_plane(plane)->pipe;
+	struct intel_plane *intel_plane = to_intel_plane(plane);
 	int sprite_prec = 0, sprite_dl = 0;
 	int sprite_prec_mult = 0;
+	u32 mask, shift;
 	struct vlv_MA_component_enabled enable;
-	u32 val;
 
-	/* Sprite A */
-	enable.EnSprite = is_sprite_enabled(dev_priv, 0, 0);
+	enable.plane_enabled = false;
+	enable.cursor_enabled = false;
+	enable.sprite_enabled = enabled;
 
-	val = I915_READ(VLV_DDL1);
-	if (vlv_compute_drain_latency(dev, 0, NULL, NULL, NULL, NULL,
-		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
-		sprite_prec = (sprite_prec_mult ==
-				DRAIN_LATENCY_PRECISION_32) ?
-				DDL_SPRITEA_PRECISION_32 :
-				DDL_SPRITEA_PRECISION_64;
-
-		I915_WRITE(VLV_DDL1, val |
-			(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
-	} else {
-		I915_WRITE(VLV_DDL1, val &
-			(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
-	}
-
-	/* Sprite B */
-	enable.EnSprite = is_sprite_enabled(dev_priv, 0, 1);
-
-	val = I915_READ(VLV_DDL1);
-	if (vlv_compute_drain_latency(dev, 0, NULL, NULL, NULL, NULL,
-		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
-		sprite_prec = (sprite_prec_mult ==
-				DRAIN_LATENCY_PRECISION_32) ?
-				DDL_SPRITEB_PRECISION_32 :
-				DDL_SPRITEB_PRECISION_64;
-
-		I915_WRITE(VLV_DDL1, val |
-			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
-	}  else {
-		I915_WRITE(VLV_DDL1, val &
-			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
-	}
-
-	/* Sprite C */
-	enable.EnSprite = is_sprite_enabled(dev_priv, 1, 0);
-
-	val = I915_READ(VLV_DDL2);
-	if (vlv_compute_drain_latency(dev, 1, NULL, NULL, NULL, NULL,
-		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
-		sprite_prec = (sprite_prec_mult ==
-				DRAIN_LATENCY_PRECISION_32) ?
-				DDL_SPRITEA_PRECISION_32 :
-				DDL_SPRITEA_PRECISION_64;
-
-		I915_WRITE(VLV_DDL2, val |
-			(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
+	if (intel_plane->plane == 0) {
+		mask = 0x0000ff00;
+		shift = DDL_SPRITEA_SHIFT;
 	} else {
-		I915_WRITE(VLV_DDL2, val &
-		(sprite_prec | (sprite_dl << DDL_SPRITEA_SHIFT)));
+		mask = 0x00ff0000;
+		shift = DDL_SPRITEB_SHIFT;
 	}
 
-	/* Sprite D */
-	enable.EnSprite = is_sprite_enabled(dev_priv, 1, 1);
+	if (enabled && vlv_compute_drain_latency(dev, 0, NULL, NULL, NULL, NULL,
+			&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
 
-	val = I915_READ(VLV_DDL2);
-	if (vlv_compute_drain_latency(dev, 1, NULL, NULL, NULL, NULL,
-		&sprite_prec_mult, &sprite_dl, pixel_size, enable)) {
-		sprite_prec = (sprite_prec_mult ==
-				DRAIN_LATENCY_PRECISION_32) ?
-				DDL_SPRITEB_PRECISION_32 :
-				DDL_SPRITEB_PRECISION_64;
+		if (intel_plane->plane == 0) {
+			sprite_prec = (sprite_prec_mult ==
+					DRAIN_LATENCY_PRECISION_32) ?
+					DDL_SPRITEA_PRECISION_32 :
+					DDL_SPRITEA_PRECISION_64;
+		} else {
+			sprite_prec = (sprite_prec_mult ==
+					DRAIN_LATENCY_PRECISION_32) ?
+					DDL_SPRITEB_PRECISION_32 :
+					DDL_SPRITEB_PRECISION_64;
+		}
 
-		I915_WRITE(VLV_DDL2, val |
-			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
-	} else {
-		I915_WRITE(VLV_DDL2, val &
-			(sprite_prec | (sprite_dl << DDL_SPRITEB_SHIFT)));
-	}
+		I915_WRITE_BITS(VLV_DDL(intel_plane->pipe),
+				sprite_prec | (sprite_dl << shift), mask);
+	} else
+		I915_WRITE_BITS(VLV_DDL(intel_plane->pipe), 0x00, mask);
 
 	I915_WRITE(DSPFW4, (DSPFW4_SPRITEB_VAL << DSPFW4_SPRITEB_SHIFT) |
 			(DSPFW4_CURSORA_VAL << DSPFW4_CURSORA_SHIFT) |
diff --git a/drivers/gpu/drm/i915/intel_uncore.c b/drivers/gpu/drm/i915/intel_uncore.c
index 4f6fef7..3d463af 100644
--- a/drivers/gpu/drm/i915/intel_uncore.c
+++ b/drivers/gpu/drm/i915/intel_uncore.c
@@ -1077,3 +1077,14 @@ void intel_uncore_check_errors(struct drm_device *dev)
 		__raw_i915_write32(dev_priv, FPGA_DBG, FPGA_DBG_RM_NOCLAIM);
 	}
 }
+
+void i915_write_bits32(struct drm_i915_private *dev_priv,
+	u32 reg, u32 val, u32 mask, bool trace)
+{
+	u32 tmp;
+	tmp = I915_READ(reg);
+	tmp &= ~mask;
+	val &= mask;
+	val |= tmp;
+	I915_WRITE(reg, val);
+}
-- 
1.7.9.5

