From 65524b72aa69fd2e3f1fd933be26a5eab7dfc457 Mon Sep 17 00:00:00 2001
Message-Id: <65524b72aa69fd2e3f1fd933be26a5eab7dfc457.1413837857.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Deepak M <m.deepak@intel.com>
Date: Mon, 7 Jul 2014 04:01:47 +0530
Subject: [PATCH 161/312] FOR_UPSTREAM [VPG]: Added the acpi PWM device id and
 pwm platform driver

These drivers are added to support the backlight
control for the display.

Issue: GMIN-85
Change-Id: I3e8f015960c395086b2dd3dabb349eea0df8f35c
Signed-off-by: Deepak M <m.deepak@intel.com>
Signed-off-by: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
---
 drivers/acpi/acpi_lpss.c           |    2 
 drivers/acpi/internal.h            |    6 
 drivers/acpi/scan.c                |    1 
 drivers/misc/Kconfig               |    1 
 drivers/misc/Makefile              |    1 
 drivers/misc/pwm/Kconfig           |   28 ++
 drivers/misc/pwm/Makefile          |    3 
 drivers/misc/pwm/pwm_byt_core.c    |  512 +++++++++++++++++++++++++++++++++++++
 drivers/misc/pwm/pwm_byt_core.h    |   17 +
 drivers/misc/pwm/pwm_byt_pci.c     |   97 +++++++
 drivers/misc/pwm/pwm_byt_platdrv.c |  116 ++++++++
 include/linux/pwm.h                |    7 
 12 files changed, 791 insertions(+)
 create mode 100644 drivers/misc/pwm/Kconfig
 create mode 100644 drivers/misc/pwm/Makefile
 create mode 100644 drivers/misc/pwm/pwm_byt_core.c
 create mode 100644 drivers/misc/pwm/pwm_byt_core.h
 create mode 100644 drivers/misc/pwm/pwm_byt_pci.c
 create mode 100644 drivers/misc/pwm/pwm_byt_platdrv.c

Index: b/drivers/acpi/acpi_lpss.c
===================================================================
--- a/drivers/acpi/acpi_lpss.c	2015-11-16 11:14:40.804275427 -0800
+++ b/drivers/acpi/acpi_lpss.c	2015-11-16 11:14:57.384383548 -0800
@@ -210,6 +210,8 @@
 	{ "INT3437", },
 	{ "INT3496", },
 
+	/* BYT PWM */
+	{ "80860F09", },
 	{ }
 };
 
Index: b/drivers/acpi/internal.h
===================================================================
--- a/drivers/acpi/internal.h	2015-11-16 11:14:40.808275453 -0800
+++ b/drivers/acpi/internal.h	2015-11-16 11:14:57.384383548 -0800
@@ -73,6 +73,12 @@
 static inline void acpi_lpss_init(void) {}
 #endif
 
+#ifdef CONFIG_INTEL_MID_LPSS
+void acpi_mid_lpss_init(void);
+#else
+static inline void acpi_mid_lpss_init(void) {}
+#endif
+
 bool acpi_queue_hotplug_work(struct work_struct *work);
 bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent);
 
Index: b/drivers/acpi/scan.c
===================================================================
--- a/drivers/acpi/scan.c	2015-11-16 11:14:40.808275453 -0800
+++ b/drivers/acpi/scan.c	2015-11-16 11:14:57.384383548 -0800
@@ -2317,6 +2317,7 @@
 	acpi_processor_init();
 	acpi_platform_init();
 	acpi_lpss_init();
+	acpi_mid_lpss_init();
 	acpi_cmos_rtc_init();
 	acpi_container_init();
 	acpi_memory_hotplug_init();
Index: b/drivers/misc/Kconfig
===================================================================
--- a/drivers/misc/Kconfig	2015-11-16 11:14:40.808275453 -0800
+++ b/drivers/misc/Kconfig	2015-11-16 11:14:57.384383548 -0800
@@ -530,6 +530,7 @@
         ---help---
          Driver to enable the platform clock control for valleyview2
 
+source "drivers/misc/pwm/Kconfig"
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
Index: b/drivers/misc/Makefile
===================================================================
--- a/drivers/misc/Makefile	2015-11-16 11:14:57.388383576 -0800
+++ b/drivers/misc/Makefile	2015-11-16 11:15:22.960553616 -0800
@@ -59,3 +59,4 @@
 obj-$(CONFIG_UID_CPUTIME) += uid_cputime.o
 obj-$(CONFIG_VLV2_PLAT_CLK)     += vlv2_plat_clock.o
 obj-$(CONFIG_DGNSS)             += dgnss/
+obj-$(CONFIG_PWM)               += pwm/
Index: b/drivers/misc/pwm/Kconfig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/pwm/Kconfig	2015-11-16 11:14:57.388383576 -0800
@@ -0,0 +1,28 @@
+if PWM
+
+config PWM_BYT_CORE
+	tristate "Intel Baytrail SoC PWM Core Logic"
+	help
+	  Core logic for generic PWM framework driver for Intel Baytrail SoC.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called pwm_byt_core.
+
+config PWM_BYT_PCI
+	tristate "Intel Baytrail SoC PWM PCI support"
+	depends on PWM && PWM_BYT_CORE
+	help
+	  PCI based generic PWM framework driver for Intel Baytrail SoC.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called pwm-byt.
+
+config PWM_BYT_PLATFORM
+	tristate "Intel Baytrail SoC PWM PCI support"
+	depends on PWM && PWM_BYT_CORE
+	help
+	  Platform driver based generic PWM framework driver for Intel Baytrail SoC.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called pwm-byt.
+endif
Index: b/drivers/misc/pwm/Makefile
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/pwm/Makefile	2015-11-16 11:14:57.388383576 -0800
@@ -0,0 +1,3 @@
+obj-$(CONFIG_PWM_BYT_CORE)	+= pwm_byt_core.o
+obj-$(CONFIG_PWM_BYT_PCI)	+= pwm_byt_pci.o
+obj-$(CONFIG_PWM_BYT_PLATFORM)	+= pwm_byt_platdrv.o
Index: b/drivers/misc/pwm/pwm_byt_core.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/pwm/pwm_byt_core.c	2015-11-16 11:14:57.388383576 -0800
@@ -0,0 +1,512 @@
+/*
+ * Intel Baytrail PWM driver.
+ *
+ * Copyright (C) 2013 Intel corporation.
+ *
+ * ----------------------------------------------------------------------------
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/errno.h>
+#include <linux/sched.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/pm_runtime.h>
+#include <linux/fs.h>
+#include <linux/pwm.h>
+#include "pwm_byt_core.h"
+
+/* PWM registers and bits definitions */
+
+#define PWMCR(chip)	(chip->mmio_base + 0)
+#define PWMRESET(chip)	(chip->mmio_base + 0x804)
+#define PWMCR_EN	(1 << 31)
+#define PWMCR_UP	(1 << 30)
+#define PWMRESET_EN	3
+
+#define PWMCR_OTD_MASK	0xff
+#define PWMCR_BU_MASK	0xff00
+#define PWMCR_BUF_MASK	0xff0000
+
+#define PWMCR_OTD_OFFSET	0
+#define PWMCR_BU_OFFSET	8
+#define PWMCR_BUF_OFFSET	16
+
+struct byt_pwm_chip {
+	struct mutex lock;
+	unsigned int pwm_num;
+	struct pwm_chip	chip;
+	struct device	*dev;
+	struct list_head list;
+	void __iomem	*mmio_base;
+	unsigned int   clk_khz;
+};
+
+static LIST_HEAD(pwm_chip_list);
+
+static inline struct byt_pwm_chip *to_byt_pwm_chip(struct pwm_chip *chip)
+{
+	return container_of(chip, struct byt_pwm_chip, chip);
+}
+
+static int byt_pwm_wait_update_complete(struct byt_pwm_chip *byt_pwm)
+{
+	uint32_t update;
+	int retry = 1000000;
+
+	while (retry--) {
+		update = ioread32(PWMCR(byt_pwm));
+		if (!(update & PWMCR_UP))
+			break;
+		if (!(update & PWMCR_EN))
+			break;
+
+		usleep_range(1, 10);
+	}
+
+	if (retry < 0) {
+		pr_err("PWM update failed, update bit is not cleared!");
+		return -EBUSY;
+	} else {
+		return 0;
+	}
+}
+
+static int byt_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
+			  int duty_ns, int period_ns)
+{
+	struct byt_pwm_chip *byt_pwm = to_byt_pwm_chip(chip);
+	uint32_t bu;
+	uint32_t bu_f;
+	uint32_t otd;
+	uint32_t update;
+	int r;
+
+	pm_runtime_get_sync(byt_pwm->dev);
+
+	/* frequency = clock * base_unit/256, so:
+	   base_unit = frequency * 256 / clock, which result:
+	   base_unit = 256 * 10^6 / (clock_khz * period_ns); */
+	bu = (256 * 1000000) / (byt_pwm->clk_khz * period_ns);
+	bu_f = (256 * 1000000) % (byt_pwm->clk_khz * period_ns);
+	bu_f = bu_f * 256 / (byt_pwm->clk_khz * period_ns);
+
+	/* one time divison calculation:
+	   duty_ns / period_ns = (256 - otd) / 256 */
+	otd = 256 - duty_ns * 256 / period_ns;
+
+	mutex_lock(&byt_pwm->lock);
+
+	/* update counter */
+	update = ioread32(PWMCR(byt_pwm));
+	update &= (~PWMCR_OTD_MASK & ~PWMCR_BU_MASK & ~PWMCR_BUF_MASK);
+	update |= (otd & 0xff) << PWMCR_OTD_OFFSET;
+	update |= (bu & 0xff) << PWMCR_BU_OFFSET;
+	update |= (bu_f & 0xff) << PWMCR_BUF_OFFSET;
+	iowrite32(update, PWMCR(byt_pwm));
+
+	/* set update flag */
+	update |= PWMCR_UP;
+	iowrite32(update, PWMCR(byt_pwm));
+	r = byt_pwm_wait_update_complete(byt_pwm);
+
+	mutex_unlock(&byt_pwm->lock);
+
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+
+	return r;
+}
+
+static int byt_pwm_enable(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct byt_pwm_chip *byt_pwm = to_byt_pwm_chip(chip);
+	uint32_t val;
+	int r;
+
+	pm_runtime_get_sync(byt_pwm->dev);
+	mutex_lock(&byt_pwm->lock);
+
+	val = ioread32(PWMCR(byt_pwm));
+	iowrite32(val | PWMCR_EN, PWMCR(byt_pwm));
+	r = byt_pwm_wait_update_complete(byt_pwm);
+
+	mutex_unlock(&byt_pwm->lock);
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+
+	return r;
+}
+
+static void byt_pwm_disable(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct byt_pwm_chip *byt_pwm = to_byt_pwm_chip(chip);
+	uint32_t val;
+
+	pm_runtime_get_sync(byt_pwm->dev);
+	mutex_lock(&byt_pwm->lock);
+
+	val = ioread32(PWMCR(byt_pwm));
+	iowrite32(val & ~PWMCR_EN, PWMCR(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+}
+
+static struct pwm_ops byt_pwm_ops = {
+	.config = byt_pwm_config,
+	.enable = byt_pwm_enable,
+	.disable = byt_pwm_disable,
+	.owner = THIS_MODULE,
+};
+
+
+static struct byt_pwm_chip *find_pwm_chip(unsigned int pwm_num)
+{
+	struct byt_pwm_chip *p;
+	list_for_each_entry(p, &pwm_chip_list, list) {
+		if (p->pwm_num == pwm_num)
+			return p;
+	}
+	return NULL;
+}
+
+/* directly read a value to a PWM register */
+int lpio_bl_read(uint8_t pwm_num, uint32_t reg)
+{
+	struct byt_pwm_chip *byt_pwm;
+	int ret;
+
+	/* only PWM_CTRL register is supported */
+	if (reg != LPIO_PWM_CTRL)
+		return -EINVAL;
+
+	byt_pwm = find_pwm_chip(pwm_num);
+	if (!byt_pwm) {
+		pr_err("%s: can't find pwm device with pwm_num %d\n",
+				__func__, (int) pwm_num);
+		return -EINVAL;
+	}
+
+	pm_runtime_get_sync(byt_pwm->dev);
+	mutex_lock(&byt_pwm->lock);
+
+	ret = ioread32(PWMCR(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+
+	return ret;
+
+}
+EXPORT_SYMBOL(lpio_bl_read);
+
+/* directly write a value to a PWM register */
+int lpio_bl_write(uint8_t pwm_num, uint32_t reg, uint32_t val)
+{
+	struct byt_pwm_chip *byt_pwm;
+
+	/* only PWM_CTRL register is supported */
+	if (reg != LPIO_PWM_CTRL)
+		return -EINVAL;
+
+	byt_pwm = find_pwm_chip(pwm_num);
+	if (!byt_pwm) {
+		pr_err("%s: can't find pwm device with pwm_num %d\n",
+				__func__, (int) pwm_num);
+		return -EINVAL;
+	}
+
+	pm_runtime_get_sync(byt_pwm->dev);
+	mutex_lock(&byt_pwm->lock);
+
+	iowrite32(val, PWMCR(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+
+	return 0;
+
+}
+EXPORT_SYMBOL(lpio_bl_write);
+
+/* directly update bits of a PWM register */
+int lpio_bl_write_bits(uint8_t pwm_num, uint32_t reg, uint32_t val,
+		uint32_t mask)
+{
+	struct byt_pwm_chip *byt_pwm;
+	uint32_t update;
+	int ret;
+
+	/* only PWM_CTRL register is supported */
+	if (reg != LPIO_PWM_CTRL)
+		return -EINVAL;
+
+	byt_pwm = find_pwm_chip(pwm_num);
+	if (!byt_pwm) {
+		pr_err("%s: can't find pwm device with pwm_num %d\n",
+				__func__, (int) pwm_num);
+		return -EINVAL;
+	}
+
+	pm_runtime_get_sync(byt_pwm->dev);
+	mutex_lock(&byt_pwm->lock);
+
+	ret = byt_pwm_wait_update_complete(byt_pwm);
+	update = ioread32(PWMCR(byt_pwm));
+	update = (update & ~mask) | (val & mask);
+	iowrite32(update, PWMCR(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+	return ret;
+}
+EXPORT_SYMBOL(lpio_bl_write_bits);
+
+/* set the update bit of the PWM control register to force PWM device to use the
+new configuration */
+int lpio_bl_update(uint8_t pwm_num, uint32_t reg)
+{
+	struct byt_pwm_chip *byt_pwm;
+	uint32_t update;
+
+	/* only PWM_CTRL register is supported */
+	if (reg != LPIO_PWM_CTRL)
+		return -EINVAL;
+
+	byt_pwm = find_pwm_chip(pwm_num);
+	if (!byt_pwm) {
+		pr_err("%s: can't find pwm device with pwm_num %d\n",
+				__func__, (int) pwm_num);
+		return -EINVAL;
+	}
+
+	pm_runtime_get_sync(byt_pwm->dev);
+	mutex_lock(&byt_pwm->lock);
+
+	update = ioread32(PWMCR(byt_pwm));
+	update |= PWMCR_UP;
+	iowrite32(update, PWMCR(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+	return 0;
+}
+EXPORT_SYMBOL(lpio_bl_update);
+
+static ssize_t attr_ctl_reg_show(struct device *dev,
+		struct device_attribute *attr,
+		char *buf)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+	uint32_t val;
+
+	pm_runtime_get_sync(byt_pwm->dev);
+	mutex_lock(&byt_pwm->lock);
+
+	val = ioread32(PWMCR(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	pm_runtime_mark_last_busy(byt_pwm->dev);
+	pm_runtime_put_autosuspend(byt_pwm->dev);
+
+	return sprintf(buf, "0x%x\n", val);
+}
+
+static ssize_t attr_test_pwm_config(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+	int duty_ns, period_ns;
+	int r;
+	int pwm_id;
+	struct pwm_device *pwm;
+
+	r = sscanf(buf, "%d %d", &duty_ns, &period_ns);
+	if (r != 2)
+		return -EINVAL;
+
+	pwm_id = byt_pwm->chip.pwms[0].pwm;
+	pwm = pwm_request(pwm_id, "test");
+	if (!pwm)
+		return -ENODEV;
+	r = pwm_config(pwm, duty_ns, period_ns);
+	pwm_free(pwm);
+	if (r)
+		return r;
+
+	return size;
+}
+
+static ssize_t attr_test_write(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+	u32 val;
+
+	if (kstrtou32(buf, 16, &val))
+		return -EINVAL;
+
+	lpio_bl_write(byt_pwm->pwm_num, LPIO_PWM_CTRL, val);
+	return size;
+}
+
+static ssize_t attr_test_update(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+	lpio_bl_update(byt_pwm->pwm_num, LPIO_PWM_CTRL);
+	return size;
+}
+
+static ssize_t attr_test_write_bits(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+	unsigned int val, mask;
+	int r;
+
+	r = sscanf(buf, "%x %x", &val, &mask);
+	if (r != 2)
+		return -EINVAL;
+
+	lpio_bl_write_bits(byt_pwm->pwm_num, LPIO_PWM_CTRL, val, mask);
+	return size;
+}
+
+static DEVICE_ATTR(ctl_reg, S_IRUSR, attr_ctl_reg_show, NULL);
+static DEVICE_ATTR(pwm_config, S_IWUSR, NULL, attr_test_pwm_config);
+static DEVICE_ATTR(test_write, S_IWUSR, NULL, attr_test_write);
+static DEVICE_ATTR(test_update, S_IWUSR, NULL, attr_test_update);
+static DEVICE_ATTR(test_write_bits, S_IWUSR, NULL, attr_test_write_bits);
+
+static struct attribute *byt_pwm_attrs[] = {
+	&dev_attr_ctl_reg.attr,
+	&dev_attr_pwm_config.attr,
+	&dev_attr_test_write.attr,
+	&dev_attr_test_update.attr,
+	&dev_attr_test_write_bits.attr,
+	NULL
+};
+
+static const struct attribute_group byt_pwm_attr_group = {
+	.attrs = byt_pwm_attrs,
+};
+
+int pwm_byt_init(struct device *dev, void __iomem *base,
+		int pwm_num, unsigned int clk_khz)
+{
+
+	struct byt_pwm_chip *byt_pwm;
+	int r;
+
+	byt_pwm = devm_kzalloc(dev, sizeof(*byt_pwm), GFP_KERNEL);
+	if (!byt_pwm) {
+		dev_err(dev, "Failed to allocate memory\n");
+		return -ENOMEM;
+	}
+	mutex_init(&byt_pwm->lock);
+	byt_pwm->dev = dev;
+	byt_pwm->chip.dev = dev;
+	byt_pwm->chip.ops = &byt_pwm_ops;
+	byt_pwm->chip.base = -1;
+	byt_pwm->chip.npwm = 1;
+	byt_pwm->mmio_base = base;
+	byt_pwm->pwm_num = pwm_num;
+	byt_pwm->clk_khz = clk_khz;
+	dev_set_drvdata(dev, byt_pwm);
+
+	r = pwmchip_add(&byt_pwm->chip);
+	if (r < 0) {
+		dev_err(dev, "pwmchip_add() failed: %d\n", r);
+		r = -ENODEV;
+		goto err_kfree;
+	}
+	r = sysfs_create_group(&dev->kobj, &byt_pwm_attr_group);
+	if (r) {
+		dev_err(dev, "failed to create sysfs files: %d\n", r);
+		goto err_remove_chip;
+	}
+	list_add_tail(&byt_pwm->list, &pwm_chip_list);
+	dev_info(dev, "PWM device probed: pwm_num=%d, mmio_base=%p clk_khz=%d\n",
+			byt_pwm->pwm_num, byt_pwm->mmio_base, byt_pwm->clk_khz);
+
+	return 0;
+
+err_remove_chip:
+	pwmchip_remove(&byt_pwm->chip);
+err_kfree:
+	devm_kfree(dev, byt_pwm);
+	dev_err(dev, "PWM device probe failed!\n");
+	return r;
+}
+EXPORT_SYMBOL(pwm_byt_init);
+
+void pwm_byt_remove(struct device *dev)
+{
+	struct byt_pwm_chip *byt_pwm;
+
+	sysfs_remove_group(&dev->kobj, &byt_pwm_attr_group);
+	byt_pwm = dev_get_drvdata(dev);
+	list_del(&byt_pwm->list);
+	pwmchip_remove(&byt_pwm->chip);
+	mutex_destroy(&byt_pwm->lock);
+}
+EXPORT_SYMBOL(pwm_byt_remove);
+
+
+static int pwm_byt_suspend(struct device *dev)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+	uint32_t val;
+	int r = 0;
+
+	if (!mutex_trylock(&byt_pwm->lock)) {
+		dev_err(dev, "PWM suspend called! can't get lock\n");
+		return -EAGAIN;
+	}
+
+	val = ioread32(PWMCR(byt_pwm));
+	r = (val & PWMCR_EN) ? -EAGAIN : 0;
+
+	mutex_unlock(&byt_pwm->lock);
+	return r;
+}
+
+static int pwm_byt_resume(struct device *dev)
+{
+	struct byt_pwm_chip *byt_pwm = dev_get_drvdata(dev);
+
+	if (!mutex_trylock(&byt_pwm->lock)) {
+		dev_err(dev, "Can't get lock\n");
+		return -EAGAIN;
+	}
+
+	iowrite32(PWMRESET_EN, PWMRESET(byt_pwm));
+
+	mutex_unlock(&byt_pwm->lock);
+	return 0;
+}
+
+const struct dev_pm_ops pwm_byt_pm = {
+	.suspend_late = pwm_byt_suspend,
+	.resume_early = pwm_byt_resume,
+	SET_RUNTIME_PM_OPS(pwm_byt_suspend, pwm_byt_resume, NULL)
+};
+EXPORT_SYMBOL(pwm_byt_pm);
Index: b/drivers/misc/pwm/pwm_byt_core.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/pwm/pwm_byt_core.h	2015-11-16 11:14:57.388383576 -0800
@@ -0,0 +1,17 @@
+/*
+ * Intel Baytrail PWM driver.
+ *
+ * Copyright (C) 2013 Intel corporation.
+ *
+ * ----------------------------------------------------------------------------
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#define PWM_BYT_CLK_KHZ	25000
+int pwm_byt_init(struct device *pdev, void __iomem *base,
+		int pwm_num, unsigned int clk_khz);
+void pwm_byt_remove(struct device *dev);
+extern const struct dev_pm_ops pwm_byt_pm;
Index: b/drivers/misc/pwm/pwm_byt_pci.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/pwm/pwm_byt_pci.c	2015-11-16 11:14:57.388383576 -0800
@@ -0,0 +1,97 @@
+/*
+ * Intel Baytrail PWM driver.
+ *
+ * Copyright (C) 2013 Intel corporation.
+ *
+ * ----------------------------------------------------------------------------
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/pci.h>
+#include <linux/pm_runtime.h>
+#include <linux/pwm.h>
+#include "pwm_byt_core.h"
+
+static int pwm_byt_pci_probe(struct pci_dev *pdev,
+			    const struct pci_device_id *id)
+{
+	static int pwm_num;
+	void __iomem **tbl;
+	int r;
+	r = pcim_enable_device(pdev);
+	if (r) {
+		dev_err(&pdev->dev, "Failed to enable PWM PCI device (%d)\n",
+			r);
+		return r;
+	}
+
+	r = pcim_iomap_regions(pdev, 1 << 0, pci_name(pdev));
+	if (r) {
+		dev_err(&pdev->dev, "I/O memory remapping failed\n");
+		return r;
+	}
+
+	tbl = (void __iomem **) pcim_iomap_table(pdev);
+	if (!tbl) {
+		dev_err(&pdev->dev, "IO map table doesn't exist\n");
+		pcim_iounmap_regions(pdev, 1 << 0);
+		return -EFAULT;
+	}
+
+	r = pwm_byt_init(&pdev->dev, tbl[0], pwm_num, id->driver_data);
+	if (r) {
+		pcim_iounmap_regions(pdev, 1 << 0);
+		dev_info(&pdev->dev, "PWM device probe failed!\n");
+		return r;
+	}
+
+	pm_runtime_set_autosuspend_delay(&pdev->dev, 5);
+	pm_runtime_use_autosuspend(&pdev->dev);
+	pm_runtime_put_noidle(&pdev->dev);
+	pm_runtime_allow(&pdev->dev);
+
+	++pwm_num;
+	return 0;
+}
+
+static void pwm_byt_pci_remove(struct pci_dev *pdev)
+{
+	pm_runtime_forbid(&pdev->dev);
+	pwm_byt_remove(&pdev->dev);
+	pcim_iounmap_regions(pdev, 1 << 0);
+	pci_disable_device(pdev);
+	pci_dev_put(pdev);
+}
+
+static const struct pci_device_id pwm_byt_pci_ids[] = {
+	{ PCI_VDEVICE(INTEL, 0x0F08), PWM_BYT_CLK_KHZ},
+	{ PCI_VDEVICE(INTEL, 0x0F09), PWM_BYT_CLK_KHZ},
+	{ 0,}
+};
+MODULE_DEVICE_TABLE(pci, pwm_byt_pci_ids);
+
+static struct pci_driver pwm_byt_driver = {
+	.name	= "pwm-byt-pci",
+	.id_table	= pwm_byt_pci_ids,
+	.probe	= pwm_byt_pci_probe,
+	.remove	= pwm_byt_pci_remove,
+	.driver = {
+		.pm = &pwm_byt_pm,
+	},
+};
+
+module_pci_driver(pwm_byt_driver);
+
+MODULE_ALIAS("pwm-byt-pci");
+MODULE_AUTHOR("Wang, Zhifeng<zhifeng.wang@intel.com>");
+MODULE_DESCRIPTION("Intel Baytrail PWM driver");
+MODULE_LICENSE("GPL");
Index: b/drivers/misc/pwm/pwm_byt_platdrv.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/misc/pwm/pwm_byt_platdrv.c	2015-11-16 11:14:57.388383576 -0800
@@ -0,0 +1,116 @@
+/*
+ * Intel Baytrail PWM ACPI driver.
+ *
+ * Copyright (C) 2013 Intel corporation.
+ *
+ * ----------------------------------------------------------------------------
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/pm_runtime.h>
+#include <linux/pwm.h>
+#include <linux/platform_device.h>
+#include <linux/acpi.h>
+#include "pwm_byt_core.h"
+
+#ifdef CONFIG_ACPI
+static const struct acpi_device_id pwm_byt_acpi_ids[] = {
+	{ "80860F09", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(acpi, pwm_byt_acpi_ids);
+#endif
+
+static int pwm_byt_plat_probe(struct platform_device *pdev)
+{
+	static int pwm_num;
+	struct resource *mem, *ioarea;
+	void __iomem *base;
+	int r;
+
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!mem) {
+		dev_err(&pdev->dev, "no mem resource?\n");
+		return -EINVAL;
+	}
+	ioarea = request_mem_region(mem->start, resource_size(mem),
+			pdev->name);
+	if (!ioarea) {
+		dev_err(&pdev->dev, "pwm region already claimed\n");
+		return -EBUSY;
+	}
+	base = ioremap_nocache(mem->start, resource_size(mem));
+	if (!base) {
+		dev_err(&pdev->dev, "I/O memory remapping failed\n");
+		r = -ENOMEM;
+		goto err_release_region;
+	}
+	r = pwm_byt_init(&pdev->dev, base, pwm_num, PWM_BYT_CLK_KHZ);
+	if (r)
+		goto err_iounmap;
+
+	pm_runtime_set_autosuspend_delay(&pdev->dev, 5);
+	pm_runtime_use_autosuspend(&pdev->dev);
+	pm_runtime_set_active(&pdev->dev);
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_allow(&pdev->dev);
+
+	++pwm_num;
+	return 0;
+
+err_iounmap:
+	iounmap(base);
+err_release_region:
+	release_mem_region(mem->start, resource_size(mem));
+	dev_info(&pdev->dev, "PWM device probe failed!\n");
+	return r;
+}
+
+static int pwm_byt_plat_remove(struct platform_device *pdev)
+{
+	struct resource *mem;
+	pm_runtime_forbid(&pdev->dev);
+	pwm_byt_remove(&pdev->dev);
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (mem)
+		release_mem_region(mem->start, resource_size(mem));
+	return 0;
+}
+
+static struct platform_driver pwm_byt_plat_driver = {
+	.remove	= pwm_byt_plat_remove,
+	.driver	= {
+		.name	= "pwm-byt-plat",
+		.owner	= THIS_MODULE,
+		.pm     = &pwm_byt_pm,
+#ifdef CONFIG_ACPI
+		.acpi_match_table = ACPI_PTR(pwm_byt_acpi_ids),
+#endif
+	},
+};
+
+static int __init pwm_byt_init_driver(void)
+{
+	return platform_driver_probe(&pwm_byt_plat_driver, pwm_byt_plat_probe);
+}
+module_init(pwm_byt_init_driver);
+
+static void __exit pwm_byt_exit_driver(void)
+{
+	platform_driver_unregister(&pwm_byt_plat_driver);
+}
+module_exit(pwm_byt_exit_driver);
+
+MODULE_ALIAS("pwm-byt-plat");
+MODULE_AUTHOR("Wang, Zhifeng<zhifeng.wang@intel.com>");
+MODULE_DESCRIPTION("Intel Baytrail PWM driver");
+MODULE_LICENSE("GPL");
Index: b/include/linux/pwm.h
===================================================================
--- a/include/linux/pwm.h	2015-11-16 11:14:40.808275453 -0800
+++ b/include/linux/pwm.h	2015-11-16 11:14:57.388383576 -0800
@@ -305,4 +305,11 @@
 }
 #endif /* CONFIG_PWM_SYSFS */
 
+#define LPIO_PWM_CTRL 0
+int lpio_bl_read(uint8_t pwm_num, uint32_t reg);
+int lpio_bl_write(uint8_t pwm_num, uint32_t reg, uint32_t val);
+int lpio_bl_write_bits(uint8_t pwm_num, uint32_t reg, uint32_t val,
+		uint32_t mask);
+int lpio_bl_update(uint8_t pwm_num, uint32_t reg);
+
 #endif /* __LINUX_PWM_H */
