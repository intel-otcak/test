From b65b0e44c617b15fbb70673756904642c820a8a2 Mon Sep 17 00:00:00 2001
From: Aviv Greenberg <aviv.d.greenberg@intel.com>
Date: Mon, 25 Aug 2014 17:11:18 -0700
Subject: [PATCH 3/3] UVC: Remove extra commit on resume()

The UVC spec is a bit vague regarding devices using bulk usb endpoints,
specifically, how to signal such devices to start streaming.

For devices using isoc usb endpoints, the sequence for start
streaming is:

1) The host sends PROBE_CONTROL(SET_CUR) and PROBE_CONTROL(GET_CUR)
2) Host selects a desired config and calls COMMIT_CONTROL(SET_CUR)
3) Host selects an alt interface *other than zero* -
   e.g SELECT_ALTERNATE_INTERFACE(1)
4) The device starts streaming

However for usb devices using bulk endpoints, there must be *no* alt
interface other than alternate setting zero. From the UVC spec:

"A VideoStreaming interface containing a bulk endpoint for streaming
shall support only alternate setting zero. Additional alternate
settings containing bulk endpoints are not permitted in a device that
is compliant with the Video Class specification."

So for devices using bulk endpoints, step #3 above is irrelevant,
and thus cannot be used as an indication for a device to start
streaming data. So in practice, such devices start streaming
immediately after a COMMIT_CONTROL(SET_CUR) is sent.

But in the uvc driver resume() handler, an unsolicited commit is sent,
which causes devices using bulk endpoints to start streaming
unintentionally.

This patch modifies the resume() handler to send a commit only if
streaming needs to be reestablished, i.e if the device was actually
streaming before it got suspended.

Change-Id: I2f68521b014e353efea6633f5574e004fb0956ea
Signed-off-by: Aviv Greenberg <aviv.d.greenberg@intel.com>
Reviewed-on: https://android.intel.com/235780
---
 drivers/media/usb/uvc/uvc_video.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/media/usb/uvc/uvc_video.c b/drivers/media/usb/uvc/uvc_video.c
index ebe2660..de5f4e8 100644
--- a/drivers/media/usb/uvc/uvc_video.c
+++ b/drivers/media/usb/uvc/uvc_video.c
@@ -1745,15 +1745,15 @@ int uvc_video_resume(struct uvc_streaming *stream, int reset)
 
 	uvc_video_clock_reset(stream);
 
+	if (!uvc_queue_streaming(&stream->queue))
+		return 0;
+
 	ret = uvc_commit_video(stream, &stream->ctrl);
 	if (ret < 0) {
 		uvc_queue_enable(&stream->queue, 0);
 		return ret;
 	}
 
-	if (!uvc_queue_streaming(&stream->queue))
-		return 0;
-
 	ret = uvc_init_video(stream, GFP_NOIO);
 	if (ret < 0)
 		uvc_queue_enable(&stream->queue, 0);
-- 
1.9.1

