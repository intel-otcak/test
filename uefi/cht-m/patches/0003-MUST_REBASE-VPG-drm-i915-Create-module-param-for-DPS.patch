From 9e4bafaf803250a738eb5f761a9c7694216c9fa6 Mon Sep 17 00:00:00 2001
Message-Id: <9e4bafaf803250a738eb5f761a9c7694216c9fa6.1440053504.git.chang-joon.lee@intel.com>
In-Reply-To: <6008ee84d5599bc5fa55865b2ba0bb03e982c7b7.1440053504.git.chang-joon.lee@intel.com>
References: <6008ee84d5599bc5fa55865b2ba0bb03e982c7b7.1440053504.git.chang-joon.lee@intel.com>
From: Praveen Paneri <praveen.paneri@intel.com>
Date: Mon, 8 Jun 2015 14:46:50 +0530
Subject: [PATCH 3/5] MUST_REBASE [VPG]: drm/i915: Create module param for DPST
 pipe C workaround

Creates a module parameter called enable_dpst_wa. This is sanitized to be
enabled for CHV. This parameter will be used to apply a workaround to
disable DPST on pipe B when pipe C is active.

Using module parameter as this will allow us to enable/disable this WA
without having to rebuild the source.

At the moment it is an internal requirement; hence marked as MUST_REBASE.

Change-Id: I00e6acd5fa27108c7956e29171a8ef499d205a47
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-13783
Signed-off-by: Praveen Paneri <praveen.paneri@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c    | 7 +++++++
 drivers/gpu/drm/i915/i915_dpst.c   | 9 +++++++++
 drivers/gpu/drm/i915/i915_drv.h    | 2 ++
 drivers/gpu/drm/i915/i915_params.c | 5 +++++
 4 files changed, 23 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 3ae61a5..9afd213 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -1936,6 +1936,13 @@ int i915_driver_load(struct drm_device *dev, unsigned long flags)
 	i915_adf_wrapper_init(dev_priv);
 #endif
 
+	/*
+	 * i915.enable_dpst_wa is intended for a dpst workaround. This W/A is
+	 * required only for CHV. Sanitize prevents it from affecting other
+	 * HWs.
+	 */
+	i915.enable_dpst_wa = i915_dpst_sanitize_wa(dev, i915.enable_dpst_wa);
+
 	return 0;
 
 out_power_well:
diff --git a/drivers/gpu/drm/i915/i915_dpst.c b/drivers/gpu/drm/i915/i915_dpst.c
index 6c4524f..7655512 100644
--- a/drivers/gpu/drm/i915/i915_dpst.c
+++ b/drivers/gpu/drm/i915/i915_dpst.c
@@ -78,6 +78,15 @@ i915_dpst_save_conn_on_edp(struct drm_device *dev)
 	return false;
 }
 
+int i915_dpst_sanitize_wa(struct drm_device *dev, int enable_dpst_wa)
+{
+	/* This W/A should be enabled only on CHV */
+	if (IS_CHERRYVIEW(dev) && enable_dpst_wa)
+		return 1;
+
+	return 0;
+}
+
 static int
 i915_dpst_clear_hist_interrupt(struct drm_device *dev)
 {
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 4987bfc..a1f23d7 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2566,6 +2566,7 @@ struct i915_params {
 	int use_mmio_flip;
 	int memtrack_debug;
 	int scheduler_override;
+	int enable_dpst_wa;
 };
 extern struct i915_params i915 __read_mostly;
 
@@ -3200,6 +3201,7 @@ void intel_panel_actually_set_backlight(struct intel_connector *conn, u32 level)
 void i915_dpst_display_on(struct drm_device *dev);
 void i915_dpst_display_off(struct drm_device *dev);
 int i915_dpst_enable_disable(struct drm_device *dev, unsigned int val);
+int i915_dpst_sanitize_wa(struct drm_device *dev, int enable_dpst_wa);
 
 /* intel_acpi.c */
 #ifdef CONFIG_ACPI
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index ae8f56b..edb83aa 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -59,6 +59,7 @@ struct i915_params i915 __read_mostly = {
 	.memtrack_debug = 1,
 	.enable_intel_adf = 0,
 	.scheduler_override = 0,
+	.enable_dpst_wa = 1,
 };
 module_param_named(limitbw, i915.limitbw, int, 0400);
 MODULE_PARM_DESC(limitbw,
@@ -250,3 +251,7 @@ MODULE_PARM_DESC(memtrack_debug,
 
 module_param_named(scheduler_override, i915.scheduler_override, int, 0600);
 MODULE_PARM_DESC(scheduler_override, "Scheduler override mask (default: 0)");
+
+module_param_named(enable_dpst_wa, i915.enable_dpst_wa, int, 0400);
+MODULE_PARM_DESC(enable_dpst_wa, "Disable DPST when pipe C is being used for chv "
+		"default=1 (enabled)");
-- 
1.9.1

