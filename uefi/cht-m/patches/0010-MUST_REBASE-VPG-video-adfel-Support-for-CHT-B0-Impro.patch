From 10273c1bfac2888254290c80588a9840193030c6 Mon Sep 17 00:00:00 2001
Message-Id: <10273c1bfac2888254290c80588a9840193030c6.1425610844.git.chang-joon.lee@intel.com>
In-Reply-To: <6fa2ab23adf6d7de781e906d04a0224410262d9b.1425610844.git.chang-joon.lee@intel.com>
References: <6fa2ab23adf6d7de781e906d04a0224410262d9b.1425610844.git.chang-joon.lee@intel.com>
From: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
Date: Mon, 29 Dec 2014 19:43:57 +0530
Subject: [PATCH 10/27] MUST_REBASE [VPG]: video/adfel: Support for CHT B0
 Improved Alpha Blending

This patch is adding support for Cherryview B0 Display improved
alpha blending on pipe B. With this userland can request concurrent
per-pixel and plane Alpha blendinig.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5606
Change-Id: I71b4823bb9367c07eafa52b5a8ec7ca9547697d3
Signed-off-by: Nabendu Maiti <nabendu.bikash.maiti@intel.com>
---
 drivers/video/adf/intel/core/vlv/vlv_pri_plane.c   |   36 +++++++++++++++++-
 drivers/video/adf/intel/core/vlv/vlv_sp_plane.c    |   40 +++++++++++++++++++-
 .../video/adf/intel/include/core/vlv/vlv_dc_regs.h |    6 +++
 .../adf/intel/include/core/vlv/vlv_pri_plane.h     |    4 ++
 .../adf/intel/include/core/vlv/vlv_sp_plane.h      |    4 ++
 5 files changed, 88 insertions(+), 2 deletions(-)

diff --git a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
index 884025f..79374df 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pri_plane.c
@@ -154,6 +154,7 @@ static int get_format_config(u32 drm_format, u32 *config, u8 *bpp,
 			break;
 		}
 	}
+
 	if (alpha)
 		return ret;
 
@@ -257,6 +258,8 @@ static int vlv_pri_calculate(struct intel_plane *plane,
 	u32 mask;
 	u32 pidx = pri_plane->ctx.plane;
 	u32 format_config = 0;
+	u8 alpha = 0x0;
+	bool cons_alpha = 0;
 	u8 bpp = 0, prev_bpp = 0;
 	u8 i = 0;
 
@@ -340,6 +343,30 @@ static int vlv_pri_calculate(struct intel_plane *plane,
 		regs->canvas_col = color;
 	}
 
+	/*
+	 * Constant Alpha and PreMul alpha setting.
+	 */
+	if ((intel_adf_get_platform_id() == gen_cherryview) &&
+		    STEP_FROM(pipeline->dc_stepping, STEP_B0) &&
+		    (pipe == PIPE_B)) {
+
+		alpha = (config->alpha & 0xFF);
+
+		if (config->blending == INTEL_PLANE_BLENDING_COVERAGE)
+			cons_alpha = true;
+		else
+			cons_alpha = false;
+
+		if (alpha != REG_READ(CHT_PRIMB_CONSTALPHA)) {
+			regs->const_alpha = (cons_alpha ? (1 << 31) : 0) |
+				alpha;
+			regs->blend = cons_alpha ? CHT_PIPE_B_BLEND_ANDROID :
+				CHT_PIPE_B_BLEND_LEGACY;
+			pri_plane->alpha_updated = true;
+			pri_plane->blend_updated = true;
+		}
+	}
+
 	regs->stride = buf->stride;
 	regs->linearoff = src_y * regs->stride + src_x * bpp;
 	dspaddr_offset = vlv_compute_page_offset(&src_x, &src_y,
@@ -412,7 +439,14 @@ static void vlv_pri_flip(struct intel_plane *plane,
 		REG_WRITE(CHT_PIPE_B_CANVAS_REG, regs->canvas_col);
 		pri_plane->canvas_updated = false;
 	}
-
+	if (pri_plane->alpha_updated) {
+		REG_WRITE(CHT_PRIMB_CONSTALPHA, regs->const_alpha);
+		pri_plane->alpha_updated = false;
+	}
+	if (pri_plane->blend_updated) {
+		REG_WRITE(CHT_PIPEB_BLEND_CONFIG, regs->blend);
+		pri_plane->blend_updated = false;
+	}
 	REG_WRITE(pri_plane->offset, regs->dspcntr);
 	I915_MODIFY_DISPBASE(pri_plane->surf_offset, regs->surfaddr);
 	REG_POSTING_READ(pri_plane->surf_offset);
diff --git a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
index ec08428..cc8aefd 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_sp_plane.c
@@ -162,8 +162,10 @@ static int get_format_config(u32 drm_format, u32 *format, u32 *bpp,
 			break;
 		}
 	}
+
 	if (alpha)
 		return ret;
+
 	switch (*format) {
 	case DISPPLANE_BGRA888:
 		*format = DISPPLANE_BGRX888;
@@ -301,6 +303,8 @@ static int vlv_sp_calculate(struct intel_plane *planeptr,
 	u32 dst_w = (config->dst_w & VLV_SP_12BIT_MASK) - 1;
 	u32 dst_h = (config->dst_h & VLV_SP_12BIT_MASK) - 1;
 	u32 src_w = (config->src_w & VLV_SP_12BIT_MASK) - 1;
+	u32 alpha = 0x0;
+	bool cons_alpha = 0;
 	u8 i = 0;
 
 	/*
@@ -383,6 +387,32 @@ static int vlv_sp_calculate(struct intel_plane *planeptr,
 	sprctl |= SP_ENABLE;
 	regs->dspcntr = sprctl;
 
+	/*
+	 * Constant Alpha and PreMul alpha setting.
+	 */
+	if ((intel_adf_get_platform_id() == gen_cherryview) &&
+		    STEP_FROM(pipeline->dc_stepping, STEP_B0)) {
+
+		alpha = (config->alpha & 0xFF);
+
+		if (config->blending == INTEL_PLANE_BLENDING_COVERAGE)
+			cons_alpha = true;
+		else
+			cons_alpha = false;
+
+		if (alpha != REG_READ(SPCONSTALPHA(pipe, plane))) {
+			regs->const_alpha = (cons_alpha ? (1 << 31) : 0) |
+				alpha;
+			regs->blend = cons_alpha ? CHT_PIPE_B_BLEND_ANDROID :
+				CHT_PIPE_B_BLEND_LEGACY;
+			splane->alpha_updated = true;
+
+			/* CHT has blending support on PIPEB only */
+			if (pipe == PIPE_B)
+				splane->blend_updated = true;
+		}
+	}
+
 	if (buf->tiling_mode != I915_TILING_NONE)
 		regs->dspcntr |= SP_TILED;
 	else
@@ -614,11 +644,19 @@ static void vlv_sp_flip(struct intel_plane *planeptr, struct intel_buffer *buf,
 	REG_WRITE(SPTILEOFF(pipe, plane), regs->tileoff);
 	REG_WRITE(SPLINOFF(pipe, plane), regs->linearoff);
 	REG_WRITE(SPSIZE(pipe, plane), regs->size);
+	if (splane->alpha_updated) {
+		REG_WRITE(SPCONSTALPHA(pipe, plane), regs->const_alpha);
+		splane->alpha_updated = false;
+	}
+	if (splane->blend_updated) {
+		REG_WRITE(CHT_PIPEB_BLEND_CONFIG, regs->blend);
+		splane->blend_updated = false;
+	}
 	REG_WRITE(SPCNTR(pipe, plane), regs->dspcntr);
-
 	I915_MODIFY_DISPBASE(SPSURF(pipe, plane), regs->surfaddr);
 	REG_POSTING_READ(SPSURF(pipe, plane));
 	splane->enabled = true;
+
 	/* Check for reserved register bit 2 */
 	val = REG_READ(SPSURF(pipe, plane));
 	if (config->flags & INTEL_ADF_PLANE_HW_PRIVATE_1) {
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
index 0c8adc7..1b4b8c4 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_dc_regs.h
@@ -4263,6 +4263,12 @@ extern int chv_cursor_offsets[];
 
 #define CHT_PIPE_B_CANVAS_REG	(VLV_DISPLAY_BASE + 0x61A04)
 
+#define CHT_PRIMB_CONSTALPHA (VLV_DISPLAY_BASE + 0x61A10)
+#define CHT_PIPEB_BLEND_CONFIG (VLV_DISPLAY_BASE + 0x61A00)
+
+#define CHT_PIPE_B_BLEND_ANDROID		0x40000000
+#define CHT_PIPE_B_BLEND_LEGACY			0x00000000
+
 #define	  PLANE_RESERVED_REG_BIT_2_ENABLE	(1 << 2)
 #define	SPRITE_FORCE_BOTTOM	(1<<2)
 #define	SPRITE_ZORDER_ENABLE	(1<<0)
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
index 3c063fa..ed5dc91 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_pri_plane.h
@@ -26,6 +26,8 @@ struct pri_plane_regs_value {
 	u32 dspcntr;
 	u32 stride;
 	u32 canvas_col;
+	u32 const_alpha;
+	u32 blend;
 	unsigned long linearoff;
 	unsigned long tileoff;
 	unsigned long surfaddr;
@@ -58,6 +60,8 @@ struct vlv_pri_plane {
 	bool enabled;
 	bool canvas_updated;
 	u32 canvas_col;
+	bool alpha_updated;
+	bool blend_updated;
 	struct vlv_pri_plane_context ctx;
 };
 
diff --git a/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h b/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h
index e2038d9..90243c3 100644
--- a/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h
+++ b/drivers/video/adf/intel/include/core/vlv/vlv_sp_plane.h
@@ -24,6 +24,8 @@ struct sp_plane_regs_value {
 	u32 stride;
 	u32 pos;
 	u32 size;
+	u32 const_alpha;
+	u32 blend;
 	unsigned long linearoff;
 	unsigned long tileoff;
 	unsigned long surfaddr;
@@ -43,6 +45,8 @@ struct vlv_sp_plane {
 	struct intel_plane base;
 	u32 offset;
 	bool enabled;
+	bool alpha_updated;
+	bool blend_updated;
 	struct vlv_sp_plane_context ctx;
 };
 
-- 
1.7.9.5

