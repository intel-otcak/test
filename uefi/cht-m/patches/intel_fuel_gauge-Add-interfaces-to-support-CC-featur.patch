From 02b2f2ae6ba01a23e43c0efc20410051a6dadb7f Mon Sep 17 00:00:00 2001
From: raosrini <srinidhi.rao@intel.com>
Date: Tue, 14 Apr 2015 15:46:08 +0530
Subject: [PATCH] intel_fuel_gauge: Add interfaces to support CC features

Some advanced coulomb counters might support interrupt
feature to convey that programmed coulombs have been
charger or discharged and does not need OS to poll for
the change in coulombs at fixed interval of time. It
may also support some unique features to improve the
accuracy of the estimated SoC, which can be then be
used by the FG Algo library in android user space.

This patch adds new sysfs interfaces so that the
unique feature data of the coulomb counter can be
sent to FG Algo library in user space.

Change-Id: Icd84535c626d66447eec5bddb00fca82f1907a34
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1400
Signed-off-by: raosrini <srinidhi.rao@intel.com>
---
 drivers/power/intel_fg_uiface.c        | 285 +++++++++++++++++++++++++++++----
 drivers/power/intel_fuel_gauge.c       |  68 +++++++-
 include/linux/power/intel_fuel_gauge.h |  46 ++++++
 3 files changed, 369 insertions(+), 30 deletions(-)

diff --git a/drivers/power/intel_fg_uiface.c b/drivers/power/intel_fg_uiface.c
index 6f541e6..7df5b65 100644
--- a/drivers/power/intel_fg_uiface.c
+++ b/drivers/power/intel_fg_uiface.c
@@ -53,6 +53,20 @@ struct fg_iface_info {
 	int fcc;
 	int cycle_count;
 	int calib_cc;
+
+	/* Coulomb Counter params */
+	int up_cc;
+	int down_cc;
+	int acc_err;
+	int delta_thr;
+	int long_avg;
+	int long_avg_at_ocv;
+	int ocv_accuracy;
+
+	struct set_cc_val reset_acc_err;
+	struct set_cc_val set_delta_thr;
+	struct set_cc_val clr_latched_ibat_avg;
+
 	wait_queue_head_t wait;
 	bool uevent_ack;
 	bool suspended;
@@ -66,99 +80,108 @@ static struct fg_iface_info *info_ptr;
 static ssize_t fg_iface_get_volt_now(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->vbatt);
+	val = info_ptr->vbatt;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_volt_ocv(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->vocv);
+	val = info_ptr->vocv;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_volt_boot(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->vbatt_boot);
+	val = info_ptr->vbatt_boot;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_ibat_boot(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->ibat_boot);
+	val = info_ptr->ibat_boot;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_cur_now(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->ibatt);
+	val = info_ptr->ibatt;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_cur_avg(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->iavg);
+	val = info_ptr->iavg;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_batt_temp(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->bat_temp);
+	val = info_ptr->bat_temp;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_delta_q(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->delta_q);
+	val = info_ptr->delta_q;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
 static ssize_t fg_iface_get_capacity(struct device *dev,
 			    struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->soc);
+	val = info_ptr->soc;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
@@ -180,11 +203,12 @@ static ssize_t fg_iface_set_capacity(struct device *dev,
 static ssize_t fg_iface_get_nac(struct device *dev,
 			struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->nac);
+	val = info_ptr->nac;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
@@ -206,11 +230,12 @@ static ssize_t fg_iface_set_nac(struct device *dev,
 static ssize_t fg_iface_get_fcc(struct device *dev,
 			struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->fcc);
+	val = info_ptr->fcc;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
@@ -232,11 +257,12 @@ static ssize_t fg_iface_set_fcc(struct device *dev,
 static ssize_t fg_iface_get_cyc_cnt(struct device *dev,
 			struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->cycle_count);
+	val = info_ptr->cycle_count;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
@@ -259,11 +285,12 @@ static ssize_t fg_iface_set_cyc_cnt(struct device *dev,
 static ssize_t fg_iface_get_cc_calib(struct device *dev,
 			struct device_attribute *attr, char *buf)
 {
-	int ret;
+	int ret, val;
 
 	mutex_lock(&info_ptr->lock);
-	ret = sprintf(buf, "%d\n", info_ptr->calib_cc);
+	val = info_ptr->calib_cc;
 	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
 	return ret;
 }
 
@@ -284,6 +311,141 @@ static ssize_t fg_iface_set_cc_calib(struct device *dev,
 	return count;
 }
 
+/* Coulomb Counter input attribute APIs */
+
+static ssize_t fg_iface_get_up_cc(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	int ret, val;
+
+	mutex_lock(&info_ptr->lock);
+	val = info_ptr->up_cc;
+	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
+	return ret;
+}
+
+static ssize_t fg_iface_get_down_cc(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	int ret, val;
+
+	mutex_lock(&info_ptr->lock);
+	val = info_ptr->down_cc;
+	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
+	return ret;
+}
+
+static ssize_t fg_iface_get_acc_err(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	int ret, val;
+
+	mutex_lock(&info_ptr->lock);
+	val = info_ptr->acc_err;
+	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
+	return ret;
+}
+
+static ssize_t fg_iface_get_delta_thr(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	int ret, val;
+
+	mutex_lock(&info_ptr->lock);
+	val = info_ptr->delta_thr;
+	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
+	return ret;
+}
+
+static ssize_t fg_iface_get_long_avg(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	int ret, val;
+
+	mutex_lock(&info_ptr->lock);
+	val = info_ptr->long_avg;
+	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
+	return ret;
+}
+
+static ssize_t fg_iface_get_long_avg_ocv(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	int ret, val;
+
+	mutex_lock(&info_ptr->lock);
+	val = info_ptr->long_avg_at_ocv;
+	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
+	return ret;
+}
+
+static ssize_t fg_iface_get_ocv_accuracy(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	int ret, val;
+
+	mutex_lock(&info_ptr->lock);
+	val = info_ptr->ocv_accuracy;
+	mutex_unlock(&info_ptr->lock);
+	ret = sprintf(buf, "%d\n", val);
+	return ret;
+}
+
+/* Coulomb Counter Output attributes */
+
+static ssize_t fg_iface_set_delta_thr(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	long val;
+
+	if (kstrtol(buf, 10, &val) < 0)
+		return -EINVAL;
+
+	mutex_lock(&info_ptr->lock);
+	info_ptr->set_delta_thr.val = val;
+	info_ptr->set_delta_thr.is_set = true;
+	mutex_unlock(&info_ptr->lock);
+	return count;
+}
+
+static ssize_t fg_iface_reset_acc_err(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	long val;
+
+	if (kstrtol(buf, 10, &val) < 0)
+		return -EINVAL;
+
+	mutex_lock(&info_ptr->lock);
+	info_ptr->reset_acc_err.val = val;
+	info_ptr->reset_acc_err.is_set = true;
+	mutex_unlock(&info_ptr->lock);
+	return count;
+}
+
+static ssize_t fg_iface_clr_latched_ibat_avg(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	long val;
+
+	if (kstrtol(buf, 10, &val) < 0)
+		return -EINVAL;
+
+	mutex_lock(&info_ptr->lock);
+	info_ptr->clr_latched_ibat_avg.val = val;
+	info_ptr->clr_latched_ibat_avg.is_set = true;
+	mutex_unlock(&info_ptr->lock);
+	return count;
+}
 
 static DEVICE_ATTR(volt_now, S_IRUGO,
 			fg_iface_get_volt_now, NULL);
@@ -302,6 +464,7 @@ static DEVICE_ATTR(batt_temp, S_IRUGO,
 static DEVICE_ATTR(delta_q, S_IRUGO,
 			fg_iface_get_delta_q, NULL);
 
+
 static DEVICE_ATTR(capacity, S_IWUSR | S_IRUGO,
 		fg_iface_get_capacity, fg_iface_set_capacity);
 static DEVICE_ATTR(nac, S_IWUSR | S_IRUGO,
@@ -313,6 +476,29 @@ static DEVICE_ATTR(cyc_cnt, S_IWUSR | S_IRUGO,
 static DEVICE_ATTR(cc_calib, S_IWUSR | S_IRUGO,
 		fg_iface_get_cc_calib, fg_iface_set_cc_calib);
 
+
+/* Coulomb Counter Read-only attribute */
+static DEVICE_ATTR(up_cc, S_IRUGO,
+			fg_iface_get_up_cc, NULL);
+static DEVICE_ATTR(down_cc, S_IRUGO,
+			fg_iface_get_down_cc, NULL);
+static DEVICE_ATTR(long_avg, S_IRUGO,
+			fg_iface_get_long_avg, NULL);
+static DEVICE_ATTR(long_avg_ocv, S_IRUGO,
+			fg_iface_get_long_avg_ocv, NULL);
+static DEVICE_ATTR(ocv_accuracy, S_IRUGO,
+			fg_iface_get_ocv_accuracy, NULL);
+static DEVICE_ATTR(acc_err, S_IRUGO,
+			fg_iface_get_acc_err, NULL);
+
+/* Coulomb Counter Read/Write attributes */
+static DEVICE_ATTR(reset_acc_err, S_IWUSR | S_IRUGO,
+		NULL, fg_iface_reset_acc_err);
+static DEVICE_ATTR(delta_thr, S_IWUSR | S_IRUGO,
+		fg_iface_get_delta_thr, fg_iface_set_delta_thr);
+static DEVICE_ATTR(clr_latched_ibat_avg, S_IWUSR | S_IRUGO,
+		NULL, fg_iface_clr_latched_ibat_avg);
+
 static struct attribute *fg_iface_sysfs_attributes[] = {
 	&dev_attr_volt_now.attr,
 	&dev_attr_volt_ocv.attr,
@@ -327,6 +513,17 @@ static struct attribute *fg_iface_sysfs_attributes[] = {
 	&dev_attr_fcc.attr,
 	&dev_attr_cyc_cnt.attr,
 	&dev_attr_cc_calib.attr,
+	/* Coulomb Counter attributes */
+	&dev_attr_up_cc.attr,
+	&dev_attr_down_cc.attr,
+	&dev_attr_long_avg.attr,
+	&dev_attr_long_avg_ocv.attr,
+	&dev_attr_ocv_accuracy.attr,
+	&dev_attr_acc_err.attr,
+
+	&dev_attr_reset_acc_err.attr,
+	&dev_attr_delta_thr.attr,
+	&dev_attr_clr_latched_ibat_avg.attr,
 	NULL,
 };
 
@@ -379,7 +576,16 @@ static int intel_fg_iface_algo_process(struct fg_algo_ip_params *ip,
 	info_ptr->bat_temp = ip->bat_temp;
 	info_ptr->delta_q = ip->delta_q;
 
-	/* TODO: Add user space event generation mechanism */
+	/* Coulomb Counter I/P params assignment */
+	info_ptr->up_cc = ip->up_cc;
+	info_ptr->down_cc = ip->down_cc;
+	info_ptr->acc_err = ip->acc_err;
+	info_ptr->delta_thr = ip->delta_thr;
+	info_ptr->long_avg = ip->long_avg;
+	info_ptr->long_avg_at_ocv = ip->long_avg_at_ocv;
+	info_ptr->ocv_accuracy = ip->ocv_accuracy;
+
+	/* Add user space event generation mechanism */
 	dev_dbg(&info_ptr->pdev->dev, "Sending uevent from intel_fg_uiface\n");
 
 	if (!IS_ERR_OR_NULL(info_ptr->intel_fg_misc_device.this_device))
@@ -414,6 +620,21 @@ static int intel_fg_iface_algo_process(struct fg_algo_ip_params *ip,
 	op->fcc = info_ptr->fcc;
 	op->cycle_count = info_ptr->cycle_count;
 	op->calib_cc = info_ptr->calib_cc;
+
+	/* Coulomb Counter O/P params assignment */
+	op->set_delta_thr.val = info_ptr->set_delta_thr.val;
+	op->set_delta_thr.is_set = info_ptr->set_delta_thr.is_set;
+
+	op->reset_acc_err.val =
+				info_ptr->reset_acc_err.val;
+	op->reset_acc_err.is_set =
+				info_ptr->reset_acc_err.is_set;
+
+	op->clr_latched_ibat_avg.val =
+				info_ptr->clr_latched_ibat_avg.val;
+	op->clr_latched_ibat_avg.is_set =
+				info_ptr->clr_latched_ibat_avg.is_set;
+
 	mutex_unlock(&info_ptr->lock);
 
 	return 0;
@@ -429,6 +650,16 @@ static int intel_fg_iface_algo_init(struct fg_batt_params *bat_params)
 	info_ptr->ibatt = bat_params->i_batt_now;
 	info_ptr->iavg = bat_params->i_batt_avg;
 	info_ptr->bat_temp = bat_params->batt_temp_now;
+
+	/* Coulomb Counter params initialization */
+	info_ptr->up_cc = bat_params->up_cc;
+	info_ptr->down_cc = bat_params->down_cc;
+	info_ptr->delta_thr = bat_params->delta_thr;
+	info_ptr->acc_err = bat_params->acc_err;
+	info_ptr->long_avg = bat_params->long_avg;
+	info_ptr->long_avg_at_ocv = bat_params->long_avg_ocv;
+	info_ptr->ocv_accuracy = bat_params->ocv_accuracy;
+
 	mutex_unlock(&info_ptr->lock);
 
 	fg_iface_sysfs_init(info_ptr);
diff --git a/drivers/power/intel_fuel_gauge.c b/drivers/power/intel_fuel_gauge.c
index 34a1de5..9a45e7c 100644
--- a/drivers/power/intel_fuel_gauge.c
+++ b/drivers/power/intel_fuel_gauge.c
@@ -212,12 +212,19 @@ static void intel_fg_worker(struct work_struct *work)
 				struct intel_fg_info, fg_worker);
 	struct fg_algo_ip_params ip;
 	struct fg_algo_op_params op;
-	int ret;
+	int ret, sched_time;
 
 	memset(&op, 0, sizeof(struct fg_algo_op_params));
 
 	mutex_lock(&fg_info->lock);
 
+	/* Blocking wait call if PMIC supports CCTICK IRQ */
+	if (fg_info->input->wait_for_cc) {
+		fg_info->input->wait_for_cc();
+		sched_time = 1;
+	} else
+		sched_time = 30;
+
 	ret = fg_info->input->get_delta_q(&ip.delta_q);
 	if (ret)
 		dev_err(fg_info->dev, "Error while getting delta Q\n");
@@ -248,6 +255,44 @@ static void intel_fg_worker(struct work_struct *work)
 	if (ret)
 		dev_err(fg_info->dev, "Error while getting Current Average\n");
 
+	if (fg_info->input->get_up_cc) {
+		ret = fg_info->input->get_up_cc(&ip.up_cc);
+		if (ret)
+			dev_err(fg_info->dev, "Error while reading UP CC");
+	}
+	if (fg_info->input->get_down_cc) {
+		ret = fg_info->input->get_down_cc(&ip.down_cc);
+		if (ret)
+			dev_err(fg_info->dev, "Error while reading DOWN CC");
+	}
+	if (fg_info->input->get_acc_err) {
+		ret = fg_info->input->get_acc_err(&ip.acc_err);
+		if (ret)
+			dev_err(fg_info->dev,
+					"Error while reading Accumulated Err");
+	}
+	if (fg_info->input->get_delta_thr) {
+		ret = fg_info->input->get_delta_thr(&ip.delta_thr);
+		if (ret)
+			dev_err(fg_info->dev,
+				"Error while reading Delta Threshold");
+	}
+	if (fg_info->input->get_long_avg) {
+		ret = fg_info->input->get_long_avg(&ip.up_cc);
+		if (ret)
+			dev_err(fg_info->dev, "Error while reading UP CC");
+	}
+	if (fg_info->input->get_long_avg_ocv) {
+		ret = fg_info->input->get_long_avg(&ip.long_avg_at_ocv);
+		if (ret)
+			dev_err(fg_info->dev, "Error while reading UP CC");
+	}
+	if (fg_info->input->get_long_avg) {
+		ret = fg_info->input->get_long_avg(&ip.ocv_accuracy);
+		if (ret)
+			dev_err(fg_info->dev, "Error while reading UP CC");
+	}
+
 	mutex_unlock(&fg_info->lock);
 	if (fg_info->algo) {
 		ret = fg_info->algo->fg_algo_process(&ip, &op);
@@ -275,6 +320,23 @@ static void intel_fg_worker(struct work_struct *work)
 		fg_info->batt_params.charge_now = op.nac;
 		fg_info->batt_params.charge_full = op.fcc;
 	}
+	/* CHeck the Algo Output and pass it to input driver */
+	if (op.reset_acc_err.is_set) {
+		fg_info->input->reset_acc_err(op.reset_acc_err.val);
+		op.reset_acc_err.is_set = false;
+	}
+
+	if (op.set_delta_thr.is_set) {
+		fg_info->input->set_delta_thr(op.set_delta_thr.val);
+		op.set_delta_thr.is_set = false;
+	}
+
+	if (op.clr_latched_ibat_avg.is_set) {
+		fg_info->input->clr_latched_ibat_avg(
+				op.clr_latched_ibat_avg.val);
+		op.clr_latched_ibat_avg.is_set = false;
+	}
+
 	fg_info->batt_params.vbatt_now = ip.vbatt;
 	fg_info->batt_params.v_ocv_now =
 		intel_fg_apply_volt_smooth(ip.vocv, ip.vbatt, ip.ibatt, op.soc);
@@ -293,7 +355,7 @@ static void intel_fg_worker(struct work_struct *work)
 	power_supply_changed(&fg_info->psy);
 	if (fg_info->wake_ui.wake_enable)
 		intel_fg_check_low_batt_event(fg_info);
-	schedule_delayed_work(&fg_info->fg_worker, 30 * HZ);
+	schedule_delayed_work(&fg_info->fg_worker, sched_time * HZ);
 }
 
 static int intel_fg_battery_health(struct intel_fg_info *info)
@@ -495,6 +557,7 @@ int intel_fg_register_input(struct intel_fg_input *input)
 	mutex_lock(&info_ptr->lock);
 
 	info_ptr->input = input;
+
 	/* init fuel gauge lib's or algo's */
 	if (info_ptr->algo || info_ptr->algo_sec)
 		intel_fuel_gauge_algo_init(info_ptr);
@@ -606,7 +669,6 @@ static int intel_fuel_gauge_probe(struct platform_device *pdev)
 {
 	struct intel_fg_info *fg_info;
 	struct em_config_oem0_data oem0_data;
-	int ret = 0;
 
 	fg_info = devm_kzalloc(&pdev->dev, sizeof(*fg_info), GFP_KERNEL);
 	if (!fg_info) {
diff --git a/include/linux/power/intel_fuel_gauge.h b/include/linux/power/intel_fuel_gauge.h
index 9e06947..e479b19 100644
--- a/include/linux/power/intel_fuel_gauge.h
+++ b/include/linux/power/intel_fuel_gauge.h
@@ -27,6 +27,11 @@
 #include <linux/mutex.h>
 #include <linux/power/battery_id.h>
 
+struct set_cc_val {
+	bool is_set;
+	int val;
+};
+
 struct fg_algo_ip_params {
 	int vbatt;
 	int vavg;
@@ -35,6 +40,15 @@ struct fg_algo_ip_params {
 	int iavg;
 	int bat_temp;
 	int delta_q;
+
+	/* Coulomb Counter I/P Params */
+	int up_cc;
+	int down_cc;
+	int acc_err;
+	int delta_thr;
+	int long_avg;
+	int long_avg_at_ocv;
+	int ocv_accuracy;
 };
 
 struct fg_algo_op_params {
@@ -43,6 +57,15 @@ struct fg_algo_op_params {
 	int fcc;
 	int cycle_count;
 	bool calib_cc;
+
+	/* Coulomb Counter O/P Params */
+	int acc_err;
+	int delta_thr;
+	int ibat_avg_at_ocv;
+
+	struct set_cc_val reset_acc_err;
+	struct set_cc_val set_delta_thr;
+	struct set_cc_val clr_latched_ibat_avg;
 };
 
 struct fg_batt_params {
@@ -61,6 +84,15 @@ struct fg_batt_params {
 	bool boot_flag;
 	bool is_valid_battery;
 	char battid[BATTID_STR_LEN + 1];
+
+	/* Coulomb Counter initial params */
+	int up_cc;
+	int down_cc;
+	int acc_err;
+	int delta_thr;
+	int long_avg;
+	int long_avg_ocv;
+	int ocv_accuracy;
 };
 
 struct fg_algo_params {
@@ -85,6 +117,20 @@ struct intel_fg_input {
 	int (*get_i_avg)(int *i_avg);
 	int (*get_delta_q)(int *delta_q);
 	int (*calibrate_cc)(void);
+
+	/* Coulomb Counter APIs */
+	bool (*wait_for_cc)(void);
+	int (*get_up_cc)(int *up_cc);
+	int (*get_down_cc)(int *down_cc);
+	int (*get_acc_err)(int *acc_err);
+	int (*get_delta_thr)(int *delta_thr);
+	int (*get_long_avg)(int *long_avg);
+	int (*get_long_avg_ocv)(int *long_avg_ocv);
+	int (*get_ocv_accuracy)(int *ocv_acuracy);
+
+	int (*reset_acc_err)(int acc_err);
+	int (*set_delta_thr)(int delta_thr);
+	int (*clr_latched_ibat_avg)(int ibat_avg_at_ocv);
 };
 
 enum intel_fg_algo_type {
-- 
1.9.1

