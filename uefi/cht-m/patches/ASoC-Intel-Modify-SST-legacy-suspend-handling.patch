From fab0f43558ff852539e5220feb1d43bac585120c Mon Sep 17 00:00:00 2001
From: Jayachandran B <jayachandran.b@intel.com>
Date: Tue, 16 Sep 2014 19:54:29 +0530
Subject: ASoC: Intel: Modify SST legacy suspend handling

SST used to keep its own usage count and used return EBUSY
if legacy suspend was called when this usage count was non zero.
This used prevent system suspend if application relinquished
wakelock (e.g. due to any app crash) triggering a legacy suspend
while audio was active.

 * Removed dependency of legacy suspend on sst's local usage count
and made suspend to always return success
 * Added a state variable to keep track of legacy suspend state
so that if app continues to send audio commands while in suspend
state, those commands are not processed.
 * Prepare for D3 is sent to LPE FW in suspend.
 * Recovery timer is stopped, active streams closed and dapm reset
in suspend.

Issue: GMINL-1311
Depends-Change-Id: Ia1c0692a173bf08fdeadff45eff2b8706dfb8e7b
Change-Id: I9823579135e511fb8abed6d25292da83595e2fd8
Signed-off-by: Jayachandran B <jayachandran.b@intel.com>
---
 sound/soc/intel/pcm.c                   |    5 ++-
 sound/soc/intel/sst/sst.c               |   57 +++++++++++++++++++++++++++----
 sound/soc/intel/sst/sst.h               |    3 ++
 sound/soc/intel/sst/sst_drv_interface.c |    8 +++++
 sound/soc/intel/sst/sst_pvt.c           |    2 +-
 sound/soc/intel/sst_platform.h          |    2 ++
 6 files changed, 69 insertions(+), 8 deletions(-)

diff --git a/sound/soc/intel/pcm.c b/sound/soc/intel/pcm.c
index 6fb1a4f..cc0df9a 100644
--- a/sound/soc/intel/pcm.c
+++ b/sound/soc/intel/pcm.c
@@ -1027,6 +1027,8 @@ static int sst_platform_async_cb(struct sst_platform_cb_params *params)
 		return -EINVAL;
 	}
 
+	pr_info("%s: event = %d\n", __func__, params->event);
+
 	switch (params->event) {
 	case SST_PLATFORM_VTSV_READ_EVENT: {
 		u8 *vtsv_result = params->params;
@@ -1045,7 +1047,8 @@ static int sst_platform_async_cb(struct sst_platform_cb_params *params)
 		break;
 	}
 
-	case SST_PLATFORM_TRIGGER_RECOVERY: {
+	case SST_PLATFORM_TRIGGER_RECOVERY:
+	case SST_PLATFORM_TRIGGER_DAPM_STATE_CHANGE: {
 		bool *dapm_param = params->params;
 
 		card = soc_platform->card;
diff --git a/sound/soc/intel/sst/sst.c b/sound/soc/intel/sst/sst.c
index 3ca683a..ff14a88 100644
--- a/sound/soc/intel/sst/sst.c
+++ b/sound/soc/intel/sst/sst.c
@@ -1222,17 +1222,62 @@ static int intel_sst_runtime_resume(struct device *dev)
 
 static int intel_sst_suspend(struct device *dev)
 {
-	int retval = 0, usage_count;
+	int usage_count;
 	struct intel_sst_drv *ctx = dev_get_drvdata(dev);
+	bool reset_dapm;
+	struct sst_platform_cb_params cb_params;
+
+	pr_info("Enter: %s\n", __func__);
+	mutex_lock(&ctx->sst_lock);
+	sst_drv_ctx->sst_suspend_state = true;
+	mutex_unlock(&ctx->sst_lock);
+
+	if (ctx->sst_state == SST_RESET) {
+		pr_debug("LPE is already in RESET state, No action");
+		return 0;
+	}
 
 	usage_count = atomic_read(&ctx->pm_usage_count);
 	if (usage_count) {
-		pr_err("Ret error for suspend:%d\n", usage_count);
-		return -EBUSY;
+		pr_warn("sst usage count is: %d; But go ahead suspending\n", usage_count);
 	}
-	retval = intel_sst_runtime_suspend(dev);
 
-	return retval;
+	if (ctx->pdata->start_recovery_timer)
+		sst_set_timer(&ctx->monitor_lpe, false);
+
+	intel_sst_runtime_suspend(dev);
+	cb_params.params = &reset_dapm;
+	cb_params.event = SST_PLATFORM_TRIGGER_DAPM_STATE_CHANGE;
+	reset_dapm = true;
+	sst_platform_cb(&cb_params);
+
+	pr_info("reset the pvt id from val %d\n", ctx->pvt_id);
+	spin_lock(&ctx->pvt_id_lock);
+	ctx->pvt_id = 0;
+	spin_unlock(&ctx->pvt_id_lock);
+
+	mutex_lock(&ctx->sst_lock);
+	sst_stream_recovery(ctx);
+	mutex_unlock(&ctx->sst_lock);
+
+	/* Delay is to ensure that the stream is closed before
+	 * powering on DAPM widget
+	 */
+	usleep_range(10000, 12000);
+	reset_dapm = false;
+	sst_platform_cb(&cb_params);
+
+	return 0;
+}
+static int intel_sst_resume(struct device *dev)
+{
+	struct intel_sst_drv *ctx = dev_get_drvdata(dev);
+
+	pr_info("Enter: %s\n", __func__);
+	mutex_lock(&ctx->sst_lock);
+	sst_drv_ctx->sst_suspend_state = false;
+	mutex_unlock(&ctx->sst_lock);
+	return 0;
 }
 
 static void sst_do_shutdown(struct intel_sst_drv *ctx)
@@ -1311,7 +1356,7 @@ static void sst_acpi_shutdown(struct platform_device *pdev)
 
 static const struct dev_pm_ops intel_sst_pm = {
 	.suspend = intel_sst_suspend,
-	.resume = intel_sst_runtime_resume,
+	.resume = intel_sst_resume,
 	.runtime_suspend = intel_sst_runtime_suspend,
 	.runtime_resume = intel_sst_runtime_resume,
 };
diff --git a/sound/soc/intel/sst/sst.h b/sound/soc/intel/sst/sst.h
index bc3798c..3930027 100644
--- a/sound/soc/intel/sst/sst.h
+++ b/sound/soc/intel/sst/sst.h
@@ -447,6 +447,7 @@ struct sst_monitor_lpe {
  * struct intel_sst_drv - driver ops
  *
  * @sst_state : current sst device state
+ * @sst_suspend_state : current sst device (legacy,not runtime) suspend state
  * @pci_id : PCI device id loaded
  * @shim : SST shim pointer
  * @mailbox : SST mailbox pointer
@@ -570,6 +571,7 @@ struct intel_sst_drv {
 	 * different
 	 */
 	const char *hid;
+	bool sst_suspend_state;
 	/* Holder for firmware name. Due to async call it needs to be
 	 * persistent till worker thread gets called
 	 */
@@ -714,6 +716,7 @@ void sst_timer_cb(unsigned long data);
 void sst_dump_to_buffer(const void *from, size_t from_len, char *buf);
 
 extern int intel_scu_ipc_simple_command(int, int);
+void sst_stream_recovery(struct intel_sst_drv *sst);
 
 static inline int sst_pm_runtime_put(struct intel_sst_drv *sst_drv)
 {
diff --git a/sound/soc/intel/sst/sst_drv_interface.c b/sound/soc/intel/sst/sst_drv_interface.c
index 096db6a..d2cb325 100644
--- a/sound/soc/intel/sst/sst_drv_interface.c
+++ b/sound/soc/intel/sst/sst_drv_interface.c
@@ -375,6 +375,14 @@ int intel_sst_check_device(void)
 
 	pr_debug("In %s\n", __func__);
 
+	mutex_lock(&sst_drv_ctx->sst_lock);
+	if (sst_drv_ctx->sst_suspend_state) {
+		pr_err("%s:SST is in suspended state; Returning\n", __func__);
+		mutex_unlock(&sst_drv_ctx->sst_lock);
+		return -ENODEV;
+	}
+	mutex_unlock(&sst_drv_ctx->sst_lock);
+
 	pm_runtime_get_sync(sst_drv_ctx->dev);
 	atomic_inc(&sst_drv_ctx->pm_usage_count);
 
diff --git a/sound/soc/intel/sst/sst_pvt.c b/sound/soc/intel/sst/sst_pvt.c
index 87d8efc..b327d91 100644
--- a/sound/soc/intel/sst/sst_pvt.c
+++ b/sound/soc/intel/sst/sst_pvt.c
@@ -221,7 +221,7 @@ static void dump_ram_area(struct intel_sst_drv *sst,
 }
 
 /*FIXME Disabling IRAM/DRAM dump for timeout issues */
-static void sst_stream_recovery(struct intel_sst_drv *sst)
+void sst_stream_recovery(struct intel_sst_drv *sst)
 {
 	struct stream_info *str_info;
 	u8 i;
diff --git a/sound/soc/intel/sst_platform.h b/sound/soc/intel/sst_platform.h
index 6a218b0..aca394b 100644
--- a/sound/soc/intel/sst_platform.h
+++ b/sound/soc/intel/sst_platform.h
@@ -151,6 +151,8 @@ struct sst_runtime_stream {
 
 #define SST_PLATFORM_VTSV_READ_EVENT	0x1
 #define SST_PLATFORM_TRIGGER_RECOVERY	0x2
+#define SST_PLATFORM_TRIGGER_DAPM_STATE_CHANGE 0x3
+
 struct sst_platform_cb_params {
 	/* Async event from firmware like VTSV*/
 	unsigned int event;
-- 
1.7.9.5

