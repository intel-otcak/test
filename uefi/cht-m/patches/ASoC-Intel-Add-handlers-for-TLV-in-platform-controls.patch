From e8fb8d839e55c6ca857b557d613e18df782f558d Mon Sep 17 00:00:00 2001
From: Samreen Nilofer <samreen.nilofer@intel.com>
Date: Mon, 16 Mar 2015 11:23:55 +0530
Subject: [PATCH] ASoC: Intel: Add handlers for TLV in platform controls

Issue: GMINL-7223

Add respective get/put handlers for TLV in platform file.

Change-Id: I2e67eca29759f50d2e85774980a6d23163b68fef
Signed-off-by: Samreen Nilofer <samreen.nilofer@intel.com>
---
 include/uapi/sound/sst_v2_vendor.h               |   5 +
 sound/soc/intel/platform-libs/controls_v2_dpcm.c | 161 +++++++++++++++++++++--
 sound/soc/intel/sst/sst_stream.c                 |   6 +
 3 files changed, 161 insertions(+), 11 deletions(-)

diff --git a/include/uapi/sound/sst_v2_vendor.h b/include/uapi/sound/sst_v2_vendor.h
index e7683cee0a41..48a9c59b8dc9 100644
--- a/include/uapi/sound/sst_v2_vendor.h
+++ b/include/uapi/sound/sst_v2_vendor.h
@@ -37,6 +37,7 @@
 #define SOC_CONTROL_TYPE_SST_BYTE           108
 #define SOC_CONTROL_TYPE_SST_MODE           109
 #define SOC_CONTROL_TYPE_SST_VOICE_MODE           110
+#define SOC_CONTROL_TYPE_SST_TLV           111
 
 /* REVISIT: Define sst kcontrol index */
 #define SOC_CONTROL_IO_SST_GAIN\
@@ -85,6 +86,10 @@
 		SOC_CONTROL_TYPE_SST_VOICE_MODE, \
 		SOC_CONTROL_TYPE_SST_VOICE_MODE)
 
+#define SOC_CONTROL_IO_SST_TLV\
+	SOC_CONTROL_ID_TLV(SOC_CONTROL_TYPE_SST_TLV, \
+		SOC_CONTROL_TYPE_SST_TLV)
+
 #define SND_SOC_GAIN_CONTROL_NAME 44
 
 /* Event types goes here */
diff --git a/sound/soc/intel/platform-libs/controls_v2_dpcm.c b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
index 35044675410e..29c29e5ce0ba 100644
--- a/sound/soc/intel/platform-libs/controls_v2_dpcm.c
+++ b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
@@ -620,19 +620,10 @@ int sst_algo_bytes_ctl_info(struct snd_kcontrol *kcontrol,
 {
 	struct soc_bytes_ext *sb = (void *) kcontrol->private_value;
 	struct sst_algo_data *bc = (struct sst_algo_data *)sb->pvt_data;
-	struct snd_soc_platform *platform = snd_kcontrol_chip(kcontrol);
 
 	uinfo->type = SNDRV_CTL_ELEM_TYPE_BYTES;
 	uinfo->count = bc->max;
 
-	/* allocate space to cache the algo parameters in the driver */
-	if (bc->params == NULL) {
-		bc->params = devm_kzalloc(platform->dev, bc->max, GFP_KERNEL);
-		if (bc->params == NULL) {
-			pr_err("kzalloc failed\n");
-			return -ENOMEM;
-		}
-	}
 	return 0;
 }
 
@@ -687,6 +678,91 @@ static int sst_algo_control_set(struct snd_kcontrol *kcontrol,
 	return 0;
 }
 
+static int sst_algo_tlv_get(struct snd_kcontrol *kcontrol,
+			unsigned int __user *data, unsigned int size)
+{
+	struct soc_bytes_ext *sb = (void *) kcontrol->private_value;
+	struct sst_algo_data *bc = (struct sst_algo_data *)sb->pvt_data;
+
+	pr_debug("%s: size =%d\n", __func__, size);
+
+	if (bc->params == NULL) {
+		pr_err("param is NULL\n");
+		return -EINVAL;
+	}
+
+	if (bc->type == SST_ALGO_PARAMS) {
+		if (copy_to_user(data, bc->params, bc->max))
+			return -EFAULT;
+
+		print_hex_dump_bytes("bc->params:", DUMP_PREFIX_OFFSET,
+					bc->params, bc->max);
+	} else {
+		pr_err("Invalid Input- algo type:%d\n", bc->type);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int sst_algo_tlv_put(struct snd_kcontrol *kcontrol,
+			const unsigned int __user *data, unsigned int size)
+{
+	struct snd_soc_platform *platform = snd_kcontrol_chip(kcontrol);
+	struct sst_data *sst = snd_soc_platform_get_drvdata(platform);
+	struct soc_bytes_ext *sb = (void *) kcontrol->private_value;
+	struct sst_algo_data *bc = (struct sst_algo_data *)sb->pvt_data;
+
+	pr_debug("%s:cntrl name=%s size %#x\n", __func__,
+			kcontrol->id.name, size);
+
+	/* Not required to copy data into bc->params */
+	pr_debug("%s: bc type %#x max %#x\n", __func__,
+				bc->type, bc->max);
+
+	/* Update a copy */
+	if (bc->params) {
+		if (copy_from_user(bc->params, data, bc->max))
+			return -EFAULT;
+
+		print_hex_dump_bytes("bc->params:", DUMP_PREFIX_OFFSET,
+					bc->params, bc->max);
+	} else {
+		pr_err("%s: bc param is NULL\n", __func__);
+		return -EINVAL;
+	}
+
+	/*if pipe is enabled, need to send the algo params from here */
+	if (bc->w && bc->w->power) {
+		int len;
+		struct sst_cmd_set_params *cmd;
+
+		/* bc->max includes sizeof algos + length field */
+		len = sizeof(cmd->dst) + sizeof(cmd->command_id) + bc->max;
+
+		cmd = kzalloc(len, GFP_KERNEL);
+		if (cmd == NULL) {
+			pr_err("%s, Failed to send cmd, kzalloc failed\n",
+					__func__);
+			return -EINVAL;
+		}
+
+		SST_FILL_DESTINATION(2, cmd->dst, bc->pipe_id, bc->module_id);
+		cmd->command_id = bc->cmd_id;
+		memcpy(cmd->params, bc->params, bc->max);
+
+		print_hex_dump_bytes(__func__, DUMP_PREFIX_OFFSET,
+					cmd->params, size);
+
+		sst_fill_and_send_cmd(sst, SST_IPC_IA_SET_PARAMS,
+					SST_FLAG_BLOCKED,
+					bc->task_id, 0, cmd, len);
+		kfree(cmd);
+	}
+
+	return 0;
+}
+
 static int sst_gain_ctl_info(struct snd_kcontrol *kcontrol,
 	struct snd_ctl_elem_info *uinfo)
 {
@@ -2250,8 +2326,26 @@ static int sst_fill_module_list(struct snd_kcontrol *kctl,
 		struct soc_bytes_ext *sb = (void *) kctl->private_value;
 		struct sst_algo_data *bc = (struct sst_algo_data *)sb->pvt_data;
 
+		if (bc == NULL) {
+			pr_err("%s: bc pointer is NULL\n", __func__);
+			return -EINVAL;
+		}
+
 		bc->w = w;
 		module->kctl = kctl;
+
+		/* allocate space to cache the algo parameters in the driver */
+		if (bc->params == NULL) {
+
+			bc->params = devm_kzalloc(w->platform->dev, bc->max,
+							GFP_KERNEL);
+			if (bc->params == NULL) {
+				pr_err("%s: kzalloc failed\n", __func__);
+				return -ENOMEM;
+			}
+			pr_debug("%s allocated bc->params size 0x%x\n",
+					__func__, bc->max);
+		}
 		list_add_tail(&module->node, &ids->algo_list);
 	}
 
@@ -2383,11 +2477,16 @@ const struct snd_soc_fw_widget_events sst_widget_ops[] = {
 	{SST_EVENT_VTSV, sst_vtsv_event},
 };
 
+const struct snd_soc_fw_tlv_ops tlv_control_ops[] = {
+	{SOC_CONTROL_IO_SST_TLV, sst_algo_tlv_get, sst_algo_tlv_put},
+};
+
 static int sst_copy_algo_control(struct snd_soc_platform *platform,
 		struct soc_bytes_ext *be, struct snd_soc_fw_bytes_ext *mbe)
 {
 	struct sst_algo_data *ac;
 	struct sst_dfw_algo_data *fw_ac = (struct sst_dfw_algo_data *)mbe->pvt_data;
+
 	ac = devm_kzalloc(platform->dev, sizeof(*ac), GFP_KERNEL);
 	if (!ac) {
 		pr_err("kzalloc failed\n");
@@ -2413,6 +2512,7 @@ static int sst_copy_algo_control(struct snd_soc_platform *platform,
 	}
 	be->pvt_data  = (char *)ac;
 	be->pvt_data_len = sizeof(struct sst_algo_data) + ac->max;
+
 	return 0;
 }
 
@@ -2454,6 +2554,7 @@ static int sst_copy_gain_control(struct snd_soc_platform *platform,
 	sm->pvt_data_len = sizeof(*mc_pvt);
 	return 0;
 }
+
 static int sst_fw_kcontrol_find_io(struct snd_soc_platform *platform,
 		u32 io_type, const struct snd_soc_fw_kcontrol_ops *ops,
 		int num_ops, unsigned long sm, unsigned long mc)
@@ -2461,12 +2562,16 @@ static int sst_fw_kcontrol_find_io(struct snd_soc_platform *platform,
 	int i;
 
 	pr_debug("number of ops = %d %x io_type\n", num_ops, io_type);
+
 	for (i = 0; i < num_ops; i++) {
+
 		if ((SOC_CONTROL_GET_ID_PUT(ops[i].id) ==
 			SOC_CONTROL_GET_ID_PUT(io_type) && ops[i].put)
 			&& (SOC_CONTROL_GET_ID_GET(ops[i].id) ==
 			 SOC_CONTROL_GET_ID_GET(io_type) && ops[i].get)) {
+
 			switch (SOC_CONTROL_GET_ID_PUT(ops[i].id)) {
+
 			case SOC_CONTROL_TYPE_SST_GAIN:
 				sst_copy_gain_control(platform, (struct soc_mixer_control *)sm,
 						(struct snd_soc_fw_mixer_control *)mc);
@@ -2484,6 +2589,32 @@ static int sst_fw_kcontrol_find_io(struct snd_soc_platform *platform,
 	return 0;
 }
 
+static int sst_fw_tlv_find_io(struct snd_soc_platform *platform,
+		u32 io_type, const struct snd_soc_fw_tlv_ops *ops,
+		int num_ops, unsigned long sm, unsigned long mc)
+{
+	int i;
+
+	pr_debug("tlv ops = %d %x io_type\n", num_ops, io_type);
+
+	for (i = 0; i < num_ops; i++) {
+
+		if ((SOC_CONTROL_GET_ID_TLV_PUT(ops[i].id) ==
+			SOC_CONTROL_GET_ID_TLV_PUT(io_type) && ops[i].put)
+			&& (SOC_CONTROL_GET_ID_TLV_GET(ops[i].id) ==
+			 SOC_CONTROL_GET_ID_TLV_GET(io_type) && ops[i].get)) {
+
+			if (SOC_CONTROL_GET_ID_TLV_PUT(ops[i].id) ==
+					SOC_CONTROL_TYPE_SST_TLV)
+				sst_copy_algo_control(platform,
+					(struct soc_bytes_ext *)sm,
+					(struct snd_soc_fw_bytes_ext *)mc);
+		}
+	}
+
+	return 0;
+}
+
 static int sst_widget_load(struct snd_soc_platform *platform,
 		struct snd_soc_dapm_widget *w, struct snd_soc_fw_dapm_widget *fw_w)
 {
@@ -2531,8 +2662,13 @@ bind_event:
 static int sst_pvt_load(struct snd_soc_platform *platform,
 			u32 io_type, unsigned long sm, unsigned long mc)
 {
-	return sst_fw_kcontrol_find_io(platform, io_type,
-			control_ops, ARRAY_SIZE(control_ops), sm, mc);
+	if (io_type == SOC_CONTROL_IO_SST_TLV) {
+		return sst_fw_tlv_find_io(platform, io_type,
+			tlv_control_ops, ARRAY_SIZE(tlv_control_ops), sm, mc);
+	} else {
+		return sst_fw_kcontrol_find_io(platform, io_type,
+				control_ops, ARRAY_SIZE(control_ops), sm, mc);
+	}
 }
 
 static int sst_verify_plgn_version(u32 version)
@@ -2554,6 +2690,8 @@ static struct snd_soc_fw_platform_ops soc_fw_ops = {
 	.io_ops = control_ops,
 	.io_ops_count = ARRAY_SIZE(control_ops),
 	.version_check = sst_verify_plgn_version,
+	.tlv_ops = tlv_control_ops,
+	.tlv_ops_count = ARRAY_SIZE(tlv_control_ops),
 };
 
 int sst_dsp_init_v2_dpcm(struct snd_soc_platform *platform)
@@ -2626,6 +2764,7 @@ int sst_dsp_init_v2_dpcm_dfw(struct snd_soc_platform *platform)
 		pr_err("%s: kzalloc failed\n", __func__);
 		return -ENOMEM;
 	}
+
 	sst->widget = devm_kzalloc(platform->dev,
 				   SST_NUM_WIDGETS * sizeof(*sst->widget),
 				   GFP_KERNEL);
diff --git a/sound/soc/intel/sst/sst_stream.c b/sound/soc/intel/sst/sst_stream.c
index 3d00e9ddba50..3cddc7a6caca 100644
--- a/sound/soc/intel/sst/sst_stream.c
+++ b/sound/soc/intel/sst/sst_stream.c
@@ -268,6 +268,12 @@ int sst_send_byte_stream_mrfld(void *sbytes)
 		bytes->block, bytes->task_id,
 		bytes->pipe_id, bytes->len);
 
+	if (bytes->len > sst_drv_ctx->mailbox_size - sizeof(*bytes)) {
+		pr_err("%s:bytes size exceeds mailbox size len(%u), mail:(%u)",
+			__func__, bytes->len, sst_drv_ctx->mailbox_size);
+		return -EINVAL;
+	}
+
 	/* need some err check as this is user data, perhpas move this to the
 	 * platform driver and pass the struct
 	 */
-- 
1.9.1

