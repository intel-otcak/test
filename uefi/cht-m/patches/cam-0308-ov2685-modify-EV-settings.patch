From f13bec7a6e99b3601157346df4263f6be27da5b7 Mon Sep 17 00:00:00 2001
From: Shuguang Gong <shuguang.gong@intel.com>
Date: Wed, 11 Mar 2015 18:29:48 +0800
Subject: [PATCH 304/307] ov2685: modify EV settings

The EV settings are not correct. Modify the settings according
to design document.

Change-Id: Iaed8bdd4eed6b0d5f98318d495572a33097931f9
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-21305
Signed-off-by: Shuguang Gong <shuguang.gong@intel.com>
Signed-off-by: Tao Wei <wei.tao@intel.com>
Reviewed-on: https://icggerrit.ir.intel.com/45826
---
 .../camera/drivers/media/i2c/ov2685.c              | 129 +++++++++++++++++++--
 .../camera/drivers/media/i2c/ov2685.h              |   9 +-
 2 files changed, 123 insertions(+), 15 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c
index d29fda7..a3fc339 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.c
@@ -398,41 +398,105 @@ static int ov2685_s_exposure(struct v4l2_subdev *sd, int value)
 	switch (value) {
 	case -2:
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_AUTO, 0x3);
+			OV2685_REG_WPT, 0x32);
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_1, 0x6);
+			OV2685_REG_BPT, 0x28);
 		break;
 	case -1:
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_AUTO, 0x3);
+			OV2685_REG_WPT, 0x3a);
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_1, 0x16);
+			OV2685_REG_BPT, 0x30);
 		break;
 	case 0:
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_AUTO, 0x0);
+			OV2685_REG_WPT, 0x4e);
+		ov2685_write_reg(client, OV2685_8BIT,
+			OV2685_REG_BPT, 0x40);
 		break;
 	case 1:
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_AUTO, 0x3);
-		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_1, 0x36);
+			OV2685_REG_WPT, 0x5a);
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_GAIN_1, 0x46);
+			OV2685_REG_BPT, 0x50);
 		break;
 	case 2:
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_AUTO, 0x3);
+			OV2685_REG_WPT, 0x62);
+		ov2685_write_reg(client, OV2685_8BIT,
+			OV2685_REG_BPT, 0x58);
+		break;
+	}
+
+	return 0;
+}
+
+static int ov2685_g_exposure_mode(struct v4l2_subdev *sd, s32 *value)
+{
+
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	u16 reg_v;
+	int ret;
+
+	/* get exposure mode */
+	ret = ov2685_read_reg(client, OV2685_8BIT,
+					OV2685_REG_EXPOSURE_AUTO,
+					&reg_v);
+	if (ret)
+		return ret;
+
+	*value = reg_v & OV2685_EXPOSURE_MANUAL_MASK;
+	return 0;
+}
+
+static int ov2685_s_exposure_mode(struct v4l2_subdev *sd, int value)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int ret;
+	u16 reg_v;
+
+	ret = ov2685_read_reg(client, OV2685_8BIT,
+					OV2685_REG_EXPOSURE_AUTO,
+					&reg_v);
+	if (ret)
+		return ret;
+
+	switch (value) {
+	case V4L2_EXPOSURE_AUTO:
+		reg_v &= 0xfffc;
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_EXPOSURE_1, 0x46);
+					OV2685_REG_EXPOSURE_AUTO, reg_v);
+		break;
+	case V4L2_EXPOSURE_MANUAL:
+		reg_v |= 0x03;
 		ov2685_write_reg(client, OV2685_8BIT,
-			OV2685_REG_GAIN_1, 0x56);
+					OV2685_REG_EXPOSURE_AUTO, reg_v);
 		break;
+	default:
+		dev_err(&client->dev,
+				"Failed to set unsupported exposure mode!\n");
+		return -EINVAL;
 	}
 
 	return 0;
 }
 
+static int ov2685_g_ae_lock(struct v4l2_subdev *sd, s32 *value)
+{
+	struct ov2685_device *dev = to_ov2685_sensor(sd);
+
+	*value = dev->ae_lock;
+	return 0;
+}
+
+static int ov2685_s_ae_lock(struct v4l2_subdev *sd, int value)
+{
+	struct ov2685_device *dev = to_ov2685_sensor(sd);
+
+	dev->ae_lock = value;
+	return 0;
+}
+
 static int ov2685_g_fnumber(struct v4l2_subdev *sd, s32 *value)
 {
 	/*const f number for imx*/
@@ -831,6 +895,17 @@ static int ov2685_s_ctrl(struct v4l2_ctrl *ctrl)
 			__func__, ctrl->val);
 		ret = ov2685_s_exposure(&dev->sd, ctrl->val);
 		break;
+	case V4L2_CID_EXPOSURE_AUTO:
+		dev_dbg(&client->dev, "%s: CID_EXPOSURE_AUTO:%d.\n",
+			__func__, ctrl->val);
+		ret = ov2685_s_exposure_mode(&dev->sd, ctrl->val);
+		break;
+	case V4L2_CID_3A_LOCK:
+		dev_dbg(&client->dev, "%s: CID_3A_LOCK:%d.\n",
+			__func__, ctrl->val);
+		ret = ov2685_s_ae_lock(&dev->sd, ctrl->val);
+		break;
+
 	case V4L2_CID_VFLIP:
 		dev_dbg(&client->dev, "%s: CID_VFLIP:%d.\n",
 			__func__, ctrl->val);
@@ -871,6 +946,13 @@ static int ov2685_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 	case V4L2_CID_EXPOSURE_ABSOLUTE:
 		ret = ov2685_g_exposure(&dev->sd, &ctrl->val);
 		break;
+	case V4L2_CID_EXPOSURE_AUTO:
+		ret = ov2685_g_exposure_mode(&dev->sd, &ctrl->val);
+		break;
+
+	case V4L2_CID_3A_LOCK:
+		ret = ov2685_g_ae_lock(&dev->sd, &ctrl->val);
+		break;
 	case V4L2_CID_SCENE_MODE:
 		ret = ov2685_g_scene(&dev->sd, &ctrl->val);
 		break;
@@ -922,6 +1004,28 @@ static const struct v4l2_ctrl_config ov2685_controls[] = {
 	},
 	{
 		.ops = &ctrl_ops,
+		.id = V4L2_CID_EXPOSURE_AUTO,
+		.type = V4L2_CTRL_TYPE_INTEGER,
+		.name = "exposure mode",
+		.min = 0,
+		.max = 3,
+		.step = 1,
+		.def = 0,
+		.flags = 0,
+	},
+	{
+		.ops = &ctrl_ops,
+		.id = V4L2_CID_3A_LOCK,
+		.type = V4L2_CTRL_TYPE_INTEGER,
+		.name = "exposure mode",
+		.min = 0,
+		.max = SHRT_MAX,
+		.step = 1,
+		.def = 0,
+		.flags = 0,
+	},
+	{
+		.ops = &ctrl_ops,
 		.id = V4L2_CID_VFLIP,
 		.type = V4L2_CTRL_TYPE_BOOLEAN,
 		.name = "Flip",
@@ -1294,6 +1398,7 @@ static int ov2685_probe(struct i2c_client *client,
 	dev->format.code = V4L2_MBUS_FMT_UYVY8_1X16;
 	dev->sd.entity.ops = &ov2685_entity_ops;
 	dev->sd.entity.type = MEDIA_ENT_T_V4L2_SUBDEV_SENSOR;
+	dev->ae_lock = 0;
 
 	ret = media_entity_init(&dev->sd.entity, 1, &dev->pad, 0);
 	if (ret)
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h
index 2e964ac..ac24b60 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov2685.h
@@ -80,8 +80,10 @@
 #define OV2685_REG_EXPOSURE_1	0x3501
 #define OV2685_REG_EXPOSURE_2	0x3502
 #define OV2685_REG_EXPOSURE_AUTO	0x3503
-#define OV2685_REG_SMIA	0x0100
-#define OV2685_REG_PID	0x300a
+#define OV2685_REG_WPT		0x3a03
+#define OV2685_REG_BPT		0x3a04
+#define OV2685_REG_SMIA		0x0100
+#define OV2685_REG_PID		0x300a
 #define OV2685_REG_SYS_RESET	0x3000
 #define OV2685_REG_FW_START	0x8000
 #define OV2685_REG_H_START_H	0x3800
@@ -102,6 +104,7 @@
 #define OV2685_FRAME_STOP	0x00
 #define OV2685_AWB_GAIN_AUTO	0
 #define OV2685_AWB_GAIN_MANUAL	1
+#define OV2685_EXPOSURE_MANUAL_MASK 0x01
 
 #define MIN_SYSCLK		10
 #define MIN_VTS			8
@@ -185,7 +188,7 @@ struct ov2685_device {
 	unsigned int preview_hts;
 	unsigned int preview_vts;
 	unsigned int fmt_idx;
-
+	unsigned int ae_lock;
 	struct v4l2_ctrl_handler ctrl_handler;
 };
 
-- 
1.9.1

