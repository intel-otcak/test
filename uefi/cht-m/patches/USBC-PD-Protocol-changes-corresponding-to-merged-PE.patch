From e19af336854603b10e277c71a394a8987b602486 Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Tue, 15 Dec 2015 17:56:38 +0530
Subject: [PATCH 6/8] USBC-PD: Protocol changes corresponding to merged PE.

With sink, source and display policies merged to single policy engine,
the PE interface and other data structures used by protocol and dpm
are extracted from struct policy_engine and created new struct policy
which acts as policy handler. This patch incorporates corresponding
change to protocol.

Change-Id: I789dc52eff4311bfb77196c636798e8cf8143d4d
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-12097
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/448722
---
 drivers/usb/typec/pd/pd_policy.h | 132 +++++++++++++++++++++++++++++++++++++++
 drivers/usb/typec/pd/protocol.c  |  29 ++++-----
 drivers/usb/typec/pd/protocol.h  |   3 +-
 3 files changed, 148 insertions(+), 16 deletions(-)
 create mode 100644 drivers/usb/typec/pd/pd_policy.h

diff --git a/drivers/usb/typec/pd/pd_policy.h b/drivers/usb/typec/pd/pd_policy.h
new file mode 100644
index 0000000..fc54968
--- /dev/null
+++ b/drivers/usb/typec/pd/pd_policy.h
@@ -0,0 +1,132 @@
+#ifndef __PD_POLICY_H__
+#define __PD_POLICY_H__
+
+#include "devpolicy_mgr.h"
+#include "message.h"
+
+enum pe_event {
+
+	/* Control Messages (0 - 13) */
+	PE_EVT_SEND_NONE,
+	PE_EVT_SEND_GOODCRC,
+	PE_EVT_SEND_GOTOMIN,
+	PE_EVT_SEND_ACCEPT,
+	PE_EVT_SEND_REJECT,
+	PE_EVT_SEND_PING,
+	PE_EVT_SEND_PS_RDY,
+	PE_EVT_SEND_GET_SRC_CAP,
+	PE_EVT_SEND_GET_SINK_CAP,
+	PE_EVT_SEND_DR_SWAP,
+	PE_EVT_SEND_PR_SWAP,
+	PE_EVT_SEND_VCONN_SWAP,
+	PE_EVT_SEND_WAIT,
+	PE_EVT_SEND_SOFT_RESET,
+
+	/* Data Messages (14 - 18) */
+	PE_EVT_SEND_SRC_CAP,
+	PE_EVT_SEND_REQUEST,
+	PE_EVT_SEND_BIST,
+	PE_EVT_SEND_SNK_CAP,
+	PE_EVT_SEND_VDM,
+
+	/* Control Messages (19 - 32) */
+	PE_EVT_RCVD_NONE,
+	PE_EVT_RCVD_GOODCRC,
+	PE_EVT_RCVD_GOTOMIN,
+	PE_EVT_RCVD_ACCEPT,
+	PE_EVT_RCVD_REJECT,
+	PE_EVT_RCVD_PING,
+	PE_EVT_RCVD_PS_RDY,
+	PE_EVT_RCVD_GET_SRC_CAP,
+	PE_EVT_RCVD_GET_SINK_CAP,
+	PE_EVT_RCVD_DR_SWAP,
+	PE_EVT_RCVD_PR_SWAP,
+	PE_EVT_RCVD_VCONN_SWAP,
+	PE_EVT_RCVD_WAIT,
+	PE_EVT_RCVD_SOFT_RESET,
+
+	/* Data Messages (33 - 37) */
+	PE_EVT_RCVD_SRC_CAP,
+	PE_EVT_RCVD_REQUEST,
+	PE_EVT_RCVD_BIST,
+	PE_EVT_RCVD_SNK_CAP,
+	PE_EVT_RCVD_VDM,
+
+	/* Other Messages (38 - 41) */
+	PE_EVT_SEND_HARD_RESET,
+	PE_EVT_SEND_PROTOCOL_RESET,
+	PE_EVT_RCVD_HARD_RESET,
+	PE_EVT_RCVD_HARD_RESET_COMPLETE,
+
+};
+
+struct pe_operations {
+	/* Callback fn to get the current data role of PE */
+	enum data_role (*get_data_role)(struct policy *p);
+	/* Callback fn to get the current power role of PE */
+	enum pwr_role (*get_power_role)(struct policy *p);
+
+	/* Callback functions to receive msgs and cmds from protocol */
+	int (*process_data_msg)(struct policy *p, enum pe_event evt,
+				struct pd_packet *data);
+	int (*process_ctrl_msg)(struct policy *p, enum pe_event evt,
+				struct pd_packet *data);
+	int (*process_cmd)(struct policy *p, enum pe_event cmd);
+
+	/* Callback fn to receive DPM event */
+	int (*notify_dpm_evt)(struct policy *p,
+					enum devpolicy_mgr_events evt);
+};
+
+struct policy {
+	struct pd_prot *prot;
+	struct devpolicy_mgr *dpm;
+	struct pe_operations *ops;
+};
+
+#define pe_get_phy(x)	((x) ?  x->dpm->phy : NULL)
+
+static inline int pe_process_cmd(struct policy *p, enum pe_event cmd)
+{
+	if (p && p->ops && p->ops->process_cmd)
+		return p->ops->process_cmd(p, cmd);
+
+	return -ENOTSUPP;
+}
+
+static inline int pe_process_data_msg(struct policy *p,
+					enum pe_event evt,
+					struct pd_packet *pkt)
+{
+	if (p && p->ops && p->ops->process_data_msg)
+		return p->ops->process_data_msg(p, evt, pkt);
+
+	return -ENOTSUPP;
+}
+
+static inline int pe_process_ctrl_msg(struct policy *p,
+					enum pe_event evt,
+					struct pd_packet *pkt)
+{
+	if (p && p->ops && p->ops->process_ctrl_msg)
+		return p->ops->process_ctrl_msg(p, evt, pkt);
+
+	return -ENOTSUPP;
+}
+
+static inline int pe_notify_dpm_evt(struct policy *p,
+					enum devpolicy_mgr_events evt)
+{
+	if (p && p->ops && p->ops->notify_dpm_evt)
+		return p->ops->notify_dpm_evt(p, evt);
+
+	return -ENOTSUPP;
+}
+
+static inline int policy_engine_bind_dpm(struct devpolicy_mgr *dpm)
+{
+	return 0;
+}
+static inline void policy_engine_unbind_dpm(struct devpolicy_mgr *dpm)
+{ }
+#endif /* __PD_POLICY_H__ */
diff --git a/drivers/usb/typec/pd/protocol.c b/drivers/usb/typec/pd/protocol.c
index d567663..558644b 100644
--- a/drivers/usb/typec/pd/protocol.c
+++ b/drivers/usb/typec/pd/protocol.c
@@ -29,6 +29,7 @@
 #include <linux/errno.h>
 #include "message.h"
 #include "protocol.h"
+#include "pd_policy.h"
 
 struct prot_msg {
 	struct list_head node;
@@ -158,7 +159,7 @@ static int pd_prot_handle_reset(struct pd_prot *pd, enum typec_phy_evts evt)
 
 	if (evt == PROT_PHY_EVENT_HARD_RST)
 		/* notify policy */
-		pe_process_cmd(pd->pe, PE_EVT_RCVD_HARD_RESET);
+		pe_process_cmd(pd->p, PE_EVT_RCVD_HARD_RESET);
 
 	return 0;
 }
@@ -291,7 +292,7 @@ static int prot_fwd_ctrlmsg_to_pe(struct pd_prot *pd, struct prot_msg *msg)
 
 	if (event != PE_EVT_RCVD_NONE) {
 		/* Forward the msg to policy engine. */
-		pe_process_ctrl_msg(pd->pe, event, &msg->pkt);
+		pe_process_ctrl_msg(pd->p, event, &msg->pkt);
 		return 0;
 	}
 	return -EINVAL;
@@ -324,7 +325,7 @@ static int prot_fwd_datamsg_to_pe(struct pd_prot *pd, struct prot_msg *msg)
 
 	if (event != PE_EVT_RCVD_NONE) {
 		/* Forward the msg to policy engine */
-		pe_process_data_msg(pd->pe, event, &msg->pkt);
+		pe_process_data_msg(pd->p, event, &msg->pkt);
 		return 0;
 	}
 	return -EINVAL;
@@ -501,7 +502,7 @@ static void pd_notify_protocol(struct typec_phy *phy, unsigned long event)
 		dev_dbg(phy->dev, "%s: PROT_PHY_EVENT_TX_HARD_RST\n",
 				__func__);
 		/* Hard reset complete signaling */
-		pe_process_cmd(pd->pe, PE_EVT_RCVD_HARD_RESET_COMPLETE);
+		pe_process_cmd(pd->p, PE_EVT_RCVD_HARD_RESET_COMPLETE);
 		break;
 	default:
 		break;
@@ -515,18 +516,18 @@ static void prot_role_chnage_worker(struct work_struct *work)
 	pd_prot_setup_role(prot, prot->data_role, prot->pwr_role);
 }
 
-int protocol_bind_pe(struct policy_engine *pe)
+int protocol_bind_pe(struct policy *p)
 {
 	struct typec_phy *phy;
 	struct pd_prot *prot;
 
-	if (!pe)
+	if (!p)
 		return -EINVAL;
 
-	if (pe->prot)
+	if (p->prot)
 		return -EEXIST;
 
-	phy = pe_get_phy(pe);
+	phy = pe_get_phy(p);
 	if (!phy || !phy->proto)
 		return -ENODEV;
 
@@ -534,19 +535,19 @@ int protocol_bind_pe(struct policy_engine *pe)
 	if (!prot)
 		return -ENODEV;
 
-	pe->prot = prot;
-	prot->pe = pe;
+	p->prot = prot;
+	prot->p = p;
 	return 0;
 }
 EXPORT_SYMBOL_GPL(protocol_bind_pe);
 
-void protocol_unbind_pe(struct policy_engine *pe)
+void protocol_unbind_pe(struct policy *p)
 {
-	if (!pe)
+	if (!p)
 		return;
 
-	pe->prot->pe = NULL;
-	pe->prot = NULL;
+	p->prot->p = NULL;
+	p->prot = NULL;
 }
 EXPORT_SYMBOL_GPL(protocol_unbind_pe);
 
diff --git a/drivers/usb/typec/pd/protocol.h b/drivers/usb/typec/pd/protocol.h
index e09a5b2..804cf2e 100644
--- a/drivers/usb/typec/pd/protocol.h
+++ b/drivers/usb/typec/pd/protocol.h
@@ -7,7 +7,6 @@
 #include <linux/extcon.h>
 #include <linux/usb_typec_phy.h>
 #include "message.h"
-#include "policy_engine.h"
 
 #define PD_MAX_MSG_ID	7
 
@@ -29,7 +28,7 @@ enum prot_tx_fsm {
 
 struct pd_prot {
 	struct typec_phy *phy;
-	struct policy_engine *pe;
+	struct policy *p;
 	u32 retry_count;
 	u8 pd_version;
 
-- 
1.9.1

