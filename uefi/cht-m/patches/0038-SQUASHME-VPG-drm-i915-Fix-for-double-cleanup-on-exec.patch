From 8f6973a51da0b5de6892ed92a7bf0d47b31ecdaf Mon Sep 17 00:00:00 2001
Message-Id: <8f6973a51da0b5de6892ed92a7bf0d47b31ecdaf.1431284209.git.chang-joon.lee@intel.com>
In-Reply-To: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
References: <89460f3fc3d6c0659d44897a6adec3c3fecc5564.1431284209.git.chang-joon.lee@intel.com>
From: John Harrison <John.C.Harrison@Intel.com>
Date: Fri, 10 Apr 2015 13:08:37 +0100
Subject: [PATCH 38/68] SQUASHME! [VPG]: drm/i915: Fix for double cleanup on
 execbuf failure in scheduler bypass mode

In bypass mode, the scheduler immediately submits batch buffers to the
hardware and cleans up all the associated allocations before returning
back to the execbuf code path. Normally, this is all good. However, in
the case where the hardware submission fails for some reason, it led
to the clean up happening twice. The scheduler does it all
unconditionally, and then the execbuf failure path does it all again.

This patch adds an early return on failure to the scheduler path. That
leaves the tidy up to be done once only by the execbuf path.

This patch could be squashed in to the original scheduler patch:
  commit 130244eba1ea2e5744455be5b6f06afdeece095e
  Author: John Harrison <John.C.Harrison@Intel.com>
  Date:   Tue Apr 1 16:27:39 2014 +0100
  Subject: FOR_UPSTREAM [VPG]: drm/i915: Start of GPU scheduler
  Change-Id: I1e08f59e650a3c2bbaaa9de7627da33849b06106

Change-Id: Ifa6a4ce5dab5360f5c445d6c956ce27b73fdeaba
For: VIZ-1587
For: VIZ-4741
Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
---
 drivers/gpu/drm/i915/i915_scheduler.c |    7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_scheduler.c b/drivers/gpu/drm/i915/i915_scheduler.c
index 7bd7033..a25ff00 100644
--- a/drivers/gpu/drm/i915/i915_scheduler.c
+++ b/drivers/gpu/drm/i915/i915_scheduler.c
@@ -226,6 +226,13 @@ int i915_scheduler_queue_execbuffer(struct i915_scheduler_queue_entry *qe)
 		scheduler->stats[qe->params.ring->id].submitted++;
 		scheduler->flags[qe->params.ring->id] &= ~i915_sf_submitting;
 
+		/*
+		 * Don't do any clean up on failure because the caller will
+		 * do it all anyway.
+		 */
+		if (ret)
+			return ret;
+
 		/* Need to release the objects: */
 		for (i = 0; i < qe->num_objs; i++) {
 			if (!qe->saved_objects[i].obj)
-- 
1.7.9.5

