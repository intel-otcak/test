From 3669bbb37a8230c6c51eb69c19ec50a35c8bf222 Mon Sep 17 00:00:00 2001
Message-Id: <3669bbb37a8230c6c51eb69c19ec50a35c8bf222.1424979244.git.feitong.yi@intel.com>
In-Reply-To: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
References: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
From: Ramalingam C <ramalingam.c@intel.com>
Date: Tue, 17 Feb 2015 20:14:53 +0530
Subject: [PATCH 07/28] MUST_REBASE [VPG]: drm/i915: Wrapper for PCI sideband
 rw with no lock

Implements the wrapper functions

  To perform the PCI sideband read and write without any mutex
  protection. Callers of this functions expected to acquire and
  release the DPIO mutex.

  To acquire and release the DPIO mutex

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5610
Change-Id: Ida2a6622a7f049e72acfd66015d9f3161d4457b7
Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
---
 drivers/gpu/drm/i915/i915_adf_wrapper.c |   42 +++++++++++++++++++++++++++++++
 include/drm/i915_adf.h                  |    3 +++
 2 files changed, 45 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_adf_wrapper.c b/drivers/gpu/drm/i915/i915_adf_wrapper.c
index 11b1ff2..1df72ec 100644
--- a/drivers/gpu/drm/i915/i915_adf_wrapper.c
+++ b/drivers/gpu/drm/i915/i915_adf_wrapper.c
@@ -158,6 +158,48 @@ void intel_adf_pci_sideband_rw(u32 operation, u32 port, u32 reg, u32 *val)
 EXPORT_SYMBOL(intel_adf_pci_sideband_rw);
 
 /**
+ * intel_adf_pci_sideband_rw_no_lock - Interface to allow ADF driver read/write
+ * to intel sideband with no mutex protection. Mutex acquirement before calling
+ * this function is callers responsibility.
+ */
+void intel_adf_pci_sideband_rw_no_lock(u32 operation, u32 port,
+							u32 reg, u32 *val)
+{
+	struct drm_i915_private *dev_priv;
+	u32 opcode;
+
+	if (!i915_adf_dev)
+		return;
+
+	dev_priv = i915_adf_dev;
+
+	opcode = (operation == INTEL_SIDEBAND_REG_READ) ?
+				SB_CRRDDA_NP : SB_CRWRDA_NP;
+
+	vlv_adf_sideband_rw(dev_priv, PCI_DEVFN(2, 0), port, opcode, reg, val);
+}
+EXPORT_SYMBOL(intel_adf_pci_sideband_rw_no_lock);
+
+/**
+ * intel_adf_dpio_mutex - Interface to allow ADF driver lock/unlock dpio mutex.
+ */
+void intel_adf_dpio_mutex(bool acquire)
+{
+	struct drm_i915_private *dev_priv;
+
+	if (!i915_adf_dev)
+		return;
+
+	dev_priv = i915_adf_dev;
+
+	if (acquire)
+		mutex_lock(&dev_priv->dpio_lock);
+	else
+		mutex_unlock(&dev_priv->dpio_lock);
+}
+EXPORT_SYMBOL(intel_adf_dpio_mutex);
+
+/**
  * intel_adf_dpio_sideband_rw - Interface to allow ADF driver read/write to intel sideband.
  */
 void intel_adf_dpio_sideband_rw(u32 operation, u32 port, u32 reg, u32 *val)
diff --git a/include/drm/i915_adf.h b/include/drm/i915_adf.h
index 385085d..e942c4d 100644
--- a/include/drm/i915_adf.h
+++ b/include/drm/i915_adf.h
@@ -40,6 +40,9 @@ extern void intel_adf_dpio_sideband_rw(u32 operation, u32 port,
 				       u32 reg, u32 *val);
 extern void intel_adf_pci_sideband_rw(u32 operation, u32 port,
 				      u32 reg, u32 *val);
+extern void intel_adf_pci_sideband_rw_no_lock(u32 operation, u32 port,
+				      u32 reg, u32 *val);
+extern void intel_adf_dpio_mutex(bool acquire);
 extern struct pci_dev *i915_adf_get_pci_dev(void);
 extern void intel_adf_get_dsi_vbt_data(void **vbt_data,
 				   struct drm_display_mode **mode);
-- 
1.7.9.5

