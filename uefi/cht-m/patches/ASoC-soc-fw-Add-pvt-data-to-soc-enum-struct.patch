From 1bffd0d01cc438974ce91ee74896c3fcc83400c8 Mon Sep 17 00:00:00 2001
From: Mythri P K <mythri.p.k@intel.com>
Date: Mon, 12 May 2014 06:27:00 +0530
Subject: [PATCH 12/39] ASoC: soc-fw: Add pvt data to soc-enum struct

Issue: GMINL-3679

Add support for the pvt_data in soc-enum struct and
corresponding parsing function in soc-fw.c to include
the pvt_data

Change-Id: Iec23be35e6d03979211e6a217269b068cb8eb097
Signed-off-by: Mythri P K <mythri.p.k@intel.com>
---
 include/sound/soc.h       |  2 ++
 include/uapi/sound/asoc.h |  3 +++
 sound/soc/soc-fw.c        | 15 +++++++++++----
 3 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/include/sound/soc.h b/include/sound/soc.h
index 41a2e83..cb3b24b 100644
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@ -908,6 +908,8 @@ struct soc_enum {
 	struct snd_kcontrol *dcontrol;
 	int index;
 
+	unsigned int pvt_data_len;
+	char *pvt_data;
 	void *dapm;
 };
 
diff --git a/include/uapi/sound/asoc.h b/include/uapi/sound/asoc.h
index 9ad911b..0a7df81 100644
--- a/include/uapi/sound/asoc.h
+++ b/include/uapi/sound/asoc.h
@@ -843,6 +843,9 @@ struct snd_soc_fw_enum_control {
 	__le32 mask;
 	char texts[SND_SOC_FW_NUM_TEXTS][SND_SOC_FW_TEXT_SIZE];
 	__le32 values[SND_SOC_FW_NUM_TEXTS * SND_SOC_FW_TEXT_SIZE / 4];
+	__le32 reserved[12]; /* Reserved for future use */
+	__le32 pvt_data_len;
+	char pvt_data[0];
 } __attribute__((packed));
 
 
diff --git a/sound/soc/soc-fw.c b/sound/soc/soc-fw.c
index 52451ea..8ae3870 100644
--- a/sound/soc/soc-fw.c
+++ b/sound/soc/soc-fw.c
@@ -671,14 +671,14 @@ static int soc_fw_denum_create(struct soc_fw *sfw, unsigned int count,
 
 	for (i = 0; i < count; i++) {
 		ec = (struct snd_soc_fw_enum_control *)sfw->pos;
-		sfw->pos += sizeof(struct snd_soc_fw_enum_control);
+		sfw->pos += (sizeof(struct snd_soc_fw_enum_control) + ec->pvt_data_len);
 
 		/* validate kcontrol */
 		if (strnlen(ec->hdr.name, SND_SOC_FW_TEXT_SIZE) ==
 			SND_SOC_FW_TEXT_SIZE)
 			return -EINVAL;
 
-		se = kzalloc(sizeof(*se), GFP_KERNEL);
+		se = kzalloc((sizeof(*se) + ec->pvt_data_len), GFP_KERNEL);
 		if (!se)
 			return -ENOMEM;
 
@@ -697,6 +697,10 @@ static int soc_fw_denum_create(struct soc_fw *sfw, unsigned int count,
 		se->items = ec->items;
 		se->mask = ec->mask;
 		se->index = sfw->index;
+		se->pvt_data_len = ec->pvt_data_len;
+		if (ec->pvt_data_len)
+			soc_fw_init_pvt_data(sfw, ec->hdr.index, (unsigned long)se, (unsigned long)ec);
+
 		INIT_LIST_HEAD(&se->list);
 
 		switch (SOC_CONTROL_GET_ID_INFO(ec->hdr.index)) {
@@ -965,7 +969,7 @@ static struct snd_kcontrol_new *soc_fw_dapm_widget_denum_create(struct soc_fw *s
 	int i, err, ext;
 
 	ec = (struct snd_soc_fw_enum_control *)sfw->pos;
-	sfw->pos += sizeof(struct snd_soc_fw_enum_control);
+	sfw->pos += (sizeof(struct snd_soc_fw_enum_control) + ec->pvt_data_len);
 
 	/* validate kcontrol */
 	if (strnlen(ec->hdr.name, SND_SOC_FW_TEXT_SIZE) ==
@@ -976,7 +980,7 @@ static struct snd_kcontrol_new *soc_fw_dapm_widget_denum_create(struct soc_fw *s
 	if (!kc)
 		return NULL;
 
-	se = kzalloc(sizeof(*se), GFP_KERNEL);
+	se = kzalloc((sizeof(*se) + ec->pvt_data_len), GFP_KERNEL);
 	if (!se)
 		goto err_se;
 
@@ -994,6 +998,9 @@ static struct snd_kcontrol_new *soc_fw_dapm_widget_denum_create(struct soc_fw *s
 	se->items = ec->items;
 	se->mask = ec->mask;
 	se->index = sfw->index;
+	se->pvt_data_len = ec->pvt_data_len;
+	if (se->pvt_data_len)
+		soc_fw_init_pvt_data(sfw, ec->hdr.index, (unsigned long)se, (unsigned long)ec);
 
 	switch (SOC_CONTROL_GET_ID_INFO(ec->hdr.index)) {
 	case SOC_CONTROL_TYPE_ENUM:
-- 
1.9.1

