From cad9cd198400d4e021202ac3fe7f4a25cf711c72 Mon Sep 17 00:00:00 2001
Message-Id: <cad9cd198400d4e021202ac3fe7f4a25cf711c72.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Fri, 4 Jul 2014 21:35:21 +0530
Subject: [PATCH 075/312] FOR_UPSTREAM [VPG]: drm/i915: Dont clear LO bits of
 SPSURF and DSPSURF during WRITES.

Writes to SPSURF, DSPSURF, SPRSURF and DVSSURF for modifying base address
need to happen only on Higher bits. Entire writes without
reading the register might cause loss of other lower bits.

Issue: GMIN-910
Change-Id: I26d5ccfca24ef31c1f8afe717b9e2efadf737334
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
Signed-off-by: Kiran Kumar S <kiran.s.kumar@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h      |    2 ++
 drivers/gpu/drm/i915/intel_display.c |   10 +++++-----
 drivers/gpu/drm/i915/intel_sprite.c  |   13 ++++++-------
 3 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 7ebf64f..8c21a25 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4099,6 +4099,8 @@ enum punit_power_well {
 #define DISP_BASEADDR_MASK	(0xfffff000)
 #define I915_LO_DISPBASE(val)	(val & ~DISP_BASEADDR_MASK)
 #define I915_HI_DISPBASE(val)	(val & DISP_BASEADDR_MASK)
+#define I915_MODIFY_DISPBASE(reg, gfx_addr) \
+	(I915_WRITE((reg), (gfx_addr) | I915_LO_DISPBASE(I915_READ(reg))))
 
 /* VBIOS flags */
 #define SWF00			(dev_priv->info.display_mmio_offset + 0x71410)
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index ca7a512..07bd69b 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2121,7 +2121,7 @@ static void intel_enable_pipe(struct intel_crtc *crtc)
 
 			I915_WRITE(SPCNTR(pipe, i), (val & ~SP_ENABLE));
 			/* Activate double buffered register update */
-			I915_WRITE(SPSURF(pipe, i), 0);
+			I915_MODIFY_DISPBASE(SPSURF(pipe, i), 0);
 			POSTING_READ(SPSURF(pipe, i));
 		}
 	}
@@ -2644,7 +2644,7 @@ static void i9xx_update_primary_plane(struct drm_crtc *crtc,
 		      fb->pitches[0]);
 	I915_WRITE(DSPSTRIDE(plane), fb->pitches[0]);
 	if (INTEL_INFO(dev)->gen >= 4) {
-		I915_WRITE(DSPSURF(plane),
+		I915_MODIFY_DISPBASE(DSPSURF(plane),
 			   i915_gem_obj_ggtt_offset(obj) + intel_crtc->dspaddr_offset);
 		if (rotate) {
 			I915_WRITE(DSPTILEOFF(plane), ((intel_fb->base.height
@@ -2732,8 +2732,8 @@ static void ironlake_update_primary_plane(struct drm_crtc *crtc,
 		      i915_gem_obj_ggtt_offset(obj), linear_offset, x, y,
 		      fb->pitches[0]);
 	I915_WRITE(DSPSTRIDE(plane), fb->pitches[0]);
-	I915_WRITE(DSPSURF(plane),
-		   i915_gem_obj_ggtt_offset(obj) + intel_crtc->dspaddr_offset);
+	I915_MODIFY_DISPBASE(DSPSURF(plane),
+		i915_gem_obj_ggtt_offset(obj) + intel_crtc->dspaddr_offset);
 	if (IS_HASWELL(dev) || IS_BROADWELL(dev)) {
 		I915_WRITE(DSPOFFSET(plane), (y << 16) | x);
 	} else {
@@ -9995,7 +9995,7 @@ static int intel_gen7_queue_flip(struct drm_device *dev,
 	 */
 	if (intel_crtc->disable_sprite) {
 		/* Activate double buffered register update */
-		I915_WRITE(SPRSURF(intel_crtc->pipe), 0);
+		I915_MODIFY_DISPBASE(SPRSURF(intel_crtc->pipe), 0);
 		POSTING_READ(SPRSURF(intel_crtc->pipe));
 		intel_crtc->disable_sprite = false;
 	}
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index dd42e92..b4fac63 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -507,9 +507,8 @@ vlv_update_plane(struct drm_plane *dplane, struct drm_crtc *crtc,
 		sprctl |= DISPPLANE_180_ROTATION_ENABLE;
 
 	I915_WRITE(SPCNTR(pipe, plane), sprctl);
-	I915_WRITE(SPSURF(pipe, plane), i915_gem_obj_ggtt_offset(obj) +
-		   sprsurf_offset);
-
+	I915_MODIFY_DISPBASE(SPSURF(pipe, plane),
+		i915_gem_obj_ggtt_offset(obj) + sprsurf_offset);
 	intel_flush_primary_plane(dev_priv, intel_crtc->plane);
 
 	if (atomic_update)
@@ -535,7 +534,7 @@ vlv_disable_plane(struct drm_plane *dplane, struct drm_crtc *crtc)
 	I915_WRITE(SPCNTR(pipe, plane), I915_READ(SPCNTR(pipe, plane)) &
 		   ~SP_ENABLE);
 	/* Activate double buffered register update */
-	I915_WRITE(SPSURF(pipe, plane), 0);
+	I915_MODIFY_DISPBASE(SPSURF(pipe, plane), 0);
 
 	intel_flush_primary_plane(dev_priv, intel_crtc->plane);
 
@@ -703,7 +702,7 @@ ivb_update_plane(struct drm_plane *plane, struct drm_crtc *crtc,
 	if (intel_plane->can_scale)
 		I915_WRITE(SPRSCALE(pipe), sprscale);
 	I915_WRITE(SPRCTL(pipe), sprctl);
-	I915_WRITE(SPRSURF(pipe),
+	I915_MODIFY_DISPBASE(SPRSURF(pipe),
 		   i915_gem_obj_ggtt_offset(obj) + sprsurf_offset);
 
 	intel_flush_primary_plane(dev_priv, intel_crtc->plane);
@@ -910,7 +909,7 @@ ilk_update_plane(struct drm_plane *plane, struct drm_crtc *crtc,
 	I915_WRITE(DVSSIZE(pipe), (crtc_h << 16) | crtc_w);
 	I915_WRITE(DVSSCALE(pipe), dvsscale);
 	I915_WRITE(DVSCNTR(pipe), dvscntr);
-	I915_WRITE(DVSSURF(pipe),
+	I915_MODIFY_DISPBASE(DVSSURF(pipe),
 		   i915_gem_obj_ggtt_offset(obj) + dvssurf_offset);
 
 	intel_flush_primary_plane(dev_priv, intel_crtc->plane);
@@ -938,7 +937,7 @@ ilk_disable_plane(struct drm_plane *plane, struct drm_crtc *crtc)
 	/* Disable the scaler */
 	I915_WRITE(DVSSCALE(pipe), 0);
 	/* Flush double buffered register updates */
-	I915_WRITE(DVSSURF(pipe), 0);
+	I915_MODIFY_DISPBASE(DVSSURF(pipe), 0);
 
 	intel_flush_primary_plane(dev_priv, intel_crtc->plane);
 
-- 
1.7.9.5

