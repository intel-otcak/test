From d809f40d8e22c946aa76456d317a77fa25b6e5e8 Mon Sep 17 00:00:00 2001
Message-Id: <d809f40d8e22c946aa76456d317a77fa25b6e5e8.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Vidya Srinivas <vidya.srinivas@intel.com>
Date: Fri, 4 Jul 2014 21:33:05 +0530
Subject: [PATCH 074/312] MUST_REBASE [VPG]: drm/i915: Decryption bit support
 for planes

The following changes have been ported:

	v1: Enable display plane reserved register bit 2
	Description: This patch enables reserved register bit 2 support for planes.
	v2: Enabling reserved reg bit only for sprite planes.

Since the decryption bit deals with content protection it is not published in open source B spec.
Based on recommendation from OTC Gfx team this patch is tagged as MUST_REBASE.

Issue: GMIN-909
Change-Id: If00bdb22d2ed9c364851c0f7c1aa940ce955061f
Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c      |    2 +-
 drivers/gpu/drm/i915/intel_display.c |   77 +++++++++++++++-------------------
 include/uapi/drm/i915_drm.h          |   11 +++--
 3 files changed, 39 insertions(+), 51 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 3b6c562..2b480f3 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -2026,7 +2026,7 @@ const struct drm_ioctl_desc i915_ioctls[] = {
 	DRM_IOCTL_DEF_DRV(I915_GEM_USERPTR, i915_gem_userptr_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_SET_PLANE_180_ROTATION, \
 		i915_set_plane_180_rotation, DRM_AUTH | DRM_UNLOCKED),
-	DRM_IOCTL_DEF_DRV(I915_ENABLE_PLANE_RESERVED_REG_BIT_2,
+	DRM_IOCTL_DEF_DRV(I915_RESERVED_REG_BIT_2,
 		i915_enable_plane_reserved_reg_bit_2, DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_DPST_CONTEXT, i915_dpst_context, DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_GEM_ACCESS_USERDATA, i915_gem_access_userdata,
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 98d8e77..ca7a512 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -13239,61 +13239,50 @@ int intel_modeset_vga_set_state(struct drm_device *dev, bool state)
 int i915_enable_plane_reserved_reg_bit_2(struct drm_device *dev, void *data,
 					struct drm_file *file)
 {
-	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct drm_i915_enable_plane_reserved_reg_bit_2 *rrb = data;
-	u32 enable = rrb->enable;
-	u32 val,reg=0;
-	u32 surface_id;
+	struct drm_i915_private *dev_priv;
+	struct drm_i915_reserved_reg_bit_2 *rrb;
+	u32 val, reg, surface_id;
 	struct intel_plane *intel_plane;
-
-	/* Added this code for making pipe generalization in HSW */
 	struct drm_mode_object *drmmode_obj;
 	struct intel_crtc *crtc;
 
+	if (!dev)
+		return -EINVAL;
+
+	dev_priv = dev->dev_private;
+
+	if (!data)
+		return -EINVAL;
+
 	if (!drm_core_check_feature(dev, DRIVER_MODESET))
 		return -ENODEV;
-	if (IS_HASWELL(dev) || INTEL_INFO(dev)->gen >= 8) {
-		/* crtc_id is not for Plane*/
-		drmmode_obj = drm_mode_object_find(dev, rrb->plane,
-				DRM_MODE_OBJECT_PLANE);
 
-		if (drmmode_obj) {
-			intel_plane = to_intel_plane(obj_to_plane(drmmode_obj));
-			surface_id = intel_plane->pipe;
+	rrb = data;
+
+	/* crtc_id is not for Plane*/
+	drmmode_obj = drm_mode_object_find(dev, rrb->plane,
+			DRM_MODE_OBJECT_PLANE);
+
+	if (drmmode_obj) {
+		intel_plane = to_intel_plane(obj_to_plane(drmmode_obj));
+		surface_id = intel_plane->pipe;
+		if (IS_VALLEYVIEW(dev))
+			reg = SPSURF(surface_id, intel_plane->plane);
+		else
 			reg = SPRSURF(surface_id);
+	} else {
+		drmmode_obj = drm_mode_object_find(dev, rrb->plane,
+			DRM_MODE_OBJECT_CRTC);
+		if (drmmode_obj) {
+			crtc = to_intel_crtc(obj_to_crtc(drmmode_obj));
+			surface_id = crtc->plane;
+			reg = DSPSURF(surface_id);
 		} else {
-			drmmode_obj = drm_mode_object_find(dev, rrb->plane,
-					DRM_MODE_OBJECT_CRTC);
-			if (drmmode_obj) {
-				crtc = to_intel_crtc(obj_to_crtc(drmmode_obj));
-				surface_id = crtc->plane;
-				reg = DSPSURF(surface_id);
-			} else {
-				DRM_ERROR("no such CRTC id for Plane or Sprite\n");
-				return -EINVAL;
-			}
-		}
-	}
-	if (IS_VALLEYVIEW(dev)) {
-		rrb->plane = rrb->plane - 2;
-		switch (rrb->plane) {
-		case SPRITEA: /* SPRITE A */
-			reg = SPSURF(0, 0);
-			break;
-		case SPRITEB: /* SPRITE B */
-			reg = SPSURF(0, 1);
-			break;
-		case SPRITEC: /* SPRITE C */
-			reg = SPSURF(1, 0);
-			break;
-		case SPRITED: /* SPRITE D */
-			reg = SPSURF(1, 1);
-			break;
-		default: return -EINVAL;
+			DRM_ERROR("no such CRTC id for Plane or Sprite\n");
+			return -EINVAL;
 		}
 	}
-
-	if (enable) {
+	if (rrb->enable) {
 		/* Program bit enable if it was requested */
 		val = I915_READ(reg);
 		val |= SURF_RESERVED_REG_BIT_2_ENABLE;
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 8347bc8..5d8e7c2 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -276,7 +276,7 @@ struct csc_coeff {
 #define DRM_I915_GEM_USERPTR		0x33
 #define DRM_I915_SET_PLANE_ZORDER	0x34
 #define DRM_I915_SET_PLANE_180_ROTATION 0x36
-#define DRM_I915_ENABLE_PLANE_RESERVED_REG_BIT_2	0x37
+#define DRM_I915_RESERVED_REG_BIT_2	0x37
 #define DRM_I915_SET_CSC		0x39
 #define DRM_I915_DPST_CONTEXT		0x3b
 #define DRM_I915_GEM_ACCESS_USERDATA	0x3c
@@ -342,9 +342,9 @@ struct csc_coeff {
 #define DRM_IOCTL_I915_SET_PLANE_180_ROTATION  \
 		DRM_IOW(DRM_COMMAND_BASE + DRM_I915_SET_PLANE_180_ROTATION, \
 		struct drm_i915_plane_180_rotation)
-#define DRM_IOCTL_I915_ENABLE_PLANE_RESERVED_REG_BIT_2	\
-	DRM_IOW(DRM_COMMAND_BASE + DRM_I915_ENABLE_PLANE_RESERVED_REG_BIT_2, \
-	struct drm_i915_enable_plane_reserved_reg_bit_2)
+#define DRM_IOCTL_I915_RESERVED_REG_BIT_2	\
+	DRM_IOW(DRM_COMMAND_BASE + DRM_I915_RESERVED_REG_BIT_2, \
+	struct drm_i915_reserved_reg_bit_2)
 #define DRM_IOCTL_I915_DPST_CONTEXT	DRM_IOWR(DRM_COMMAND_BASE + \
 			DRM_I915_DPST_CONTEXT, struct dpst_initialize_context)
 #define DRM_IOCTL_I915_GEM_ACCESS_USERDATA	\
@@ -1172,10 +1172,9 @@ struct drm_i915_plane_180_rotation {
 	__u32 rotate;
 };
 
-struct drm_i915_enable_plane_reserved_reg_bit_2 {
+struct drm_i915_reserved_reg_bit_2 {
 	__u32 enable;
 	int plane;
-	int crtc_id;
 };
 
 struct drm_i915_set_plane_alpha {
-- 
1.7.9.5

