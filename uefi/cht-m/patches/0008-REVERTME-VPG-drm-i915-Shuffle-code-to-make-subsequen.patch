From 96a3611966f5273488280f878cfdc780a04d2716 Mon Sep 17 00:00:00 2001
Message-Id: <96a3611966f5273488280f878cfdc780a04d2716.1421835210.git.chang-joon.lee@intel.com>
In-Reply-To: <aa9849875fd9575e7de3d51e779ec326100b81c0.1421835210.git.chang-joon.lee@intel.com>
References: <aa9849875fd9575e7de3d51e779ec326100b81c0.1421835210.git.chang-joon.lee@intel.com>
From: John Harrison <John.C.Harrison@Intel.com>
Date: Tue, 25 Nov 2014 11:42:34 +0000
Subject: [PATCH 08/63] REVERTME [VPG]: drm/i915: Shuffle code to make
 subsequent porting cleaner

The official linux tree and the GMin Android tree differ in a number
of ways. One in particular is that logical_ring_alloc_seqno() is in a
different place inside intel_lrc.c. The code itself is identical, only
the position has changed. This causes merge conflicts when merging any
patches that relate to that code. This patch re-positions the
offending function so that further patch ports merge cleanly.

The problem was introduced in the patch:
  REVERTME [VPG]: drm/i915: Adding HW Native Sync support
  commit id: a77945cd130122f1f6979edac76757d2765678fc

So this patch could be squashed into that one and/or reverted when
that patch is also dropped.

Change-Id: I0a080c17f78eeb3478a617802fe41ad2c4586a1c
For: VIZ-4377
Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
---
 drivers/gpu/drm/i915/intel_lrc.c |   55 ++++++++++++++++++++------------------
 1 file changed, 29 insertions(+), 26 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_lrc.c b/drivers/gpu/drm/i915/intel_lrc.c
index 514e73b..d3ac286 100644
--- a/drivers/gpu/drm/i915/intel_lrc.c
+++ b/drivers/gpu/drm/i915/intel_lrc.c
@@ -206,6 +206,9 @@ enum {
 };
 #define GEN8_CTX_ID_SHIFT 32
 
+static int logical_ring_alloc_seqno(struct intel_engine_cs *ring,
+				    struct intel_context *ctx);
+
 /**
  * intel_sanitize_enable_execlists() - sanitize i915.enable_execlists
  * @dev: DRM device.
@@ -815,32 +818,6 @@ gen8_ring_stop_watchdog(struct intel_ringbuffer *ringbuf)
 	return 0;
 }
 
-static int logical_ring_alloc_seqno(struct intel_engine_cs *ring,
-				    struct intel_context *ctx)
-{
-	if (ring->outstanding_lazy_seqno)
-		return 0;
-
-	if (ring->preallocated_lazy_request == NULL) {
-		struct drm_i915_gem_request *request;
-
-		request = kmalloc(sizeof(*request), GFP_KERNEL);
-		if (request == NULL)
-			return -ENOMEM;
-
-		/* Hold a reference to the context this request belongs to
-		 * (we will need it when the time comes to emit/retire the
-		 * request).
-		 */
-		request->ctx = ctx;
-		i915_gem_context_reference(request->ctx);
-
-		ring->preallocated_lazy_request = request;
-	}
-
-	return i915_gem_get_seqno(ring->dev, &ring->outstanding_lazy_seqno);
-}
-
 static int logical_ring_write_active_seqno(struct intel_ringbuffer *ringbuf,
 					   u32 seqno)
 {
@@ -1201,6 +1178,32 @@ void intel_logical_ring_advance_and_submit(struct intel_ringbuffer *ringbuf)
 	execlists_context_queue(ring, ctx, ringbuf->tail);
 }
 
+static int logical_ring_alloc_seqno(struct intel_engine_cs *ring,
+				    struct intel_context *ctx)
+{
+	if (ring->outstanding_lazy_seqno)
+		return 0;
+
+	if (ring->preallocated_lazy_request == NULL) {
+		struct drm_i915_gem_request *request;
+
+		request = kmalloc(sizeof(*request), GFP_KERNEL);
+		if (request == NULL)
+			return -ENOMEM;
+
+		/* Hold a reference to the context this request belongs to
+		 * (we will need it when the time comes to emit/retire the
+		 * request).
+		 */
+		request->ctx = ctx;
+		i915_gem_context_reference(request->ctx);
+
+		ring->preallocated_lazy_request = request;
+	}
+
+	return i915_gem_get_seqno(ring->dev, &ring->outstanding_lazy_seqno);
+}
+
 static int logical_ring_wait_request(struct intel_ringbuffer *ringbuf,
 				     int bytes)
 {
-- 
1.7.9.5

