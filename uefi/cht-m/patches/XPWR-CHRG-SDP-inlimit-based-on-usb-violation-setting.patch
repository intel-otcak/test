From a1b5aa3d96b6ec30c8c0bd5a84acc971a44422f8 Mon Sep 17 00:00:00 2001
From: raosrini <srinidhi.rao@intel.com>
Date: Thu, 9 Apr 2015 16:17:29 +0530
Subject: [PATCH] XPWR/CHRG: SDP inlimit based on usb violation setting in OEM1
 table.

The xpwr pwrsrc driver should set the initial inlimit current for SDP
to 100mA on BC1.2 compliance or to 500mA on BC1.2 non-compliance.
During bootup this compliance setting should be read from OEM1 table
and set the inlimit based on compliance bit in FCO1 filed.

Change-Id: I907dc8cc12d8c413688f6a14bc9e0c1eaeafa485
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1369
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
---
 drivers/extcon/extcon-dc-pwrsrc.c       | 49 ++++++---------------------------
 drivers/mfd/intel_soc_pmic_dc.c         | 24 ++++++++++++++++
 include/linux/extcon/extcon-dc-pwrsrc.h |  1 +
 3 files changed, 34 insertions(+), 40 deletions(-)

diff --git a/drivers/extcon/extcon-dc-pwrsrc.c b/drivers/extcon/extcon-dc-pwrsrc.c
index ca1feb4..0caae93a 100644
--- a/drivers/extcon/extcon-dc-pwrsrc.c
+++ b/drivers/extcon/extcon-dc-pwrsrc.c
@@ -87,12 +87,8 @@
 
 #define DC_XPWR_CHARGE_CUR_DCP		2000
 #define DC_XPWR_CHARGE_CUR_CDP		1500
-/*
- * HACK: USB2 SDP connection supposes to start in 100ma and raise up to 500ma
- * after enumeration. We are still defining a clean standard interface for it.
- * In meanwhile, we'll go to 500ma right away.
- */
-#define DC_XPWR_CHARGE_CUR_SDP		500
+#define DC_XPWR_CHARGE_CUR_SDP_500	500
+#define DC_XPWR_CHARGE_CUR_SDP_100	100
 
 #define DC_PWRSRC_INTR_NUM		4
 #define PWRSRC_DRV_NAME			"dollar_cove_pwrsrc"
@@ -250,7 +246,10 @@ static int handle_chrg_det_event(struct dc_pwrsrc_info *info)
 		info->is_sdp = true;
 		cable_props.chrg_evt = POWER_SUPPLY_CHARGER_EVENT_CONNECT;
 		cable_props.chrg_type = POWER_SUPPLY_CHARGER_TYPE_USB_SDP;
-		cable_props.ma = DC_XPWR_CHARGE_CUR_SDP;
+		if (info->pdata->chrg_usb_compliance)
+			cable_props.ma = DC_XPWR_CHARGE_CUR_SDP_100;
+		else
+			cable_props.ma = DC_XPWR_CHARGE_CUR_SDP_500;
 	} else if (chrg_type == DET_STAT_CDP) {
 		dev_dbg(&info->pdev->dev,
 				"CDP cable connecetd\n");
@@ -359,20 +358,14 @@ static int dc_pwrsrc_handle_otg_notification(struct notifier_block *nb,
 {
 	struct dc_pwrsrc_info *info =
 	    container_of(nb, struct dc_pwrsrc_info, id_nb);
-	struct power_supply_cable_props cable_props;
 	int *val = (int *)param;
 
-	if ((event != USB_EVENT_ID) &&
-		(event != USB_EVENT_NONE) &&
-		(event != USB_EVENT_ENUMERATED))
-		return NOTIFY_DONE;
-
-	if ((event == USB_EVENT_ENUMERATED) && !param)
-		return NOTIFY_DONE;
-
 	dev_info(&info->pdev->dev,
 		"[OTG notification]evt:%lu val:%d\n", event,
 				val ? *val : -1);
+	if ((event != USB_EVENT_ID) &&
+		(event != USB_EVENT_NONE))
+		return NOTIFY_DONE;
 
 	switch (event) {
 	case USB_EVENT_ID:
@@ -385,30 +378,6 @@ static int dc_pwrsrc_handle_otg_notification(struct notifier_block *nb,
 	case USB_EVENT_NONE:
 		info->id_short = false;
 		break;
-	case USB_EVENT_ENUMERATED:
-		/*
-		 * ignore cable plug/unplug events as SMSC
-		 * had already send those event notifications.
-		 * Also only handle notifications for SDP case.
-		 */
-		if (!*val || !info->is_sdp ||
-			(*val == DC_XPWR_CHARGE_CUR_SDP))
-			break;
-		/*
-		 * if current limit is < 100mA
-		 * treat it as suspend event.
-		 */
-		if (*val < DC_XPWR_CHARGE_CUR_SDP)
-			cable_props.chrg_evt =
-					POWER_SUPPLY_CHARGER_EVENT_SUSPEND;
-		else
-			cable_props.chrg_evt =
-					POWER_SUPPLY_CHARGER_EVENT_CONNECT;
-		cable_props.chrg_type = POWER_SUPPLY_CHARGER_TYPE_USB_SDP;
-		cable_props.ma = *val;
-		atomic_notifier_call_chain(&power_supply_notifier,
-					PSY_CABLE_EVENT, &cable_props);
-		break;
 	default:
 		dev_warn(&info->pdev->dev, "invalid OTG event\n");
 	}
diff --git a/drivers/mfd/intel_soc_pmic_dc.c b/drivers/mfd/intel_soc_pmic_dc.c
index ce91da3..e2b331a 100644
--- a/drivers/mfd/intel_soc_pmic_dc.c
+++ b/drivers/mfd/intel_soc_pmic_dc.c
@@ -37,6 +37,7 @@
 
 #define GPIO_USB_MUX_INDEX	1
 #define GPIO_OTG_VBUS_INDEX	2
+#define FPO0_USB_COMP_OFFSET	0x01
 
 enum {
 	VBUS_FALLING_IRQ = 2,
@@ -507,6 +508,20 @@ dc_xpwr_get_acpi_cdata(struct dollarcove_fg_pdata *pdata)
 
 	return 0;
 }
+
+static bool dc_xpwr_get_acpi_usb_compliance(void)
+{
+	struct em_config_oem1_data em_config;
+
+	/*
+	 * On error return true to keep usb compliance and charge
+	*  with 100mA until enumerated.
+	*/
+	if (em_config_get_oem1_data(&em_config) < 0)
+		return true;
+	/* 0 - usb compliance, 1 - no usb compliance */
+	return !(em_config.fpo_0 & FPO0_USB_COMP_OFFSET);
+}
 #endif /* CONFIG_ACPI */
 
 static void dc_xpwr_get_fg_config_data(struct dollarcove_fg_pdata *pdata)
@@ -552,6 +567,14 @@ static void dc_xpwr_get_fg_config_data(struct dollarcove_fg_pdata *pdata)
 	return;
 }
 
+static bool dc_xpwr_is_usb_compliance_charging(void)
+{
+	bool compliance = true;
+#ifdef CONFIG_ACPI
+	compliance = dc_xpwr_get_acpi_usb_compliance();
+#endif /* CONFIG_ACPI */
+	return compliance;
+}
 static void dc_xpwr_fg_pdata(void)
 {
 	static struct dollarcove_fg_pdata pdata;
@@ -613,6 +636,7 @@ static void dc_xpwr_pwrsrc_pdata(void)
 	else
 		gpiod_put(pdata.gpio_mux_cntl);
 
+	pdata.chrg_usb_compliance = dc_xpwr_is_usb_compliance_charging();
 	intel_soc_pmic_set_pdata("dollar_cove_pwrsrc",
 				 (void *)&pdata, sizeof(pdata), 0);
 }
diff --git a/include/linux/extcon/extcon-dc-pwrsrc.h b/include/linux/extcon/extcon-dc-pwrsrc.h
index 616c459..d6eca69 100644
--- a/include/linux/extcon/extcon-dc-pwrsrc.h
+++ b/include/linux/extcon/extcon-dc-pwrsrc.h
@@ -6,6 +6,7 @@ struct dc_xpwr_pwrsrc_pdata {
 	bool	en_chrg_det;
 	/* Gpio based mux to switch D+/D- line between pmic and soc */
 	struct gpio_desc *gpio_mux_cntl;
+	bool chrg_usb_compliance;
 };
 
 #ifdef CONFIG_INTEL_SOC_PMIC
-- 
1.9.1

