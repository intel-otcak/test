From 6d31d3d5c0f76e944ce238980dfc9de6d8c1eb54 Mon Sep 17 00:00:00 2001
From: David Cohen <david.a.cohen@intel.com>
Date: Thu, 22 May 2014 14:19:47 -0700
Subject: [PATCH 1/3] usb: phy-generic: add gpio CS

In some usb phy we may need to assert CS pin when powering up. This
patch adds extra option for gpio CS. It should have no functional
impact on users that don't use it.

Signed-off-by: David Cohen <david.a.cohen@intel.com>
---
 drivers/usb/dwc3/dwc3-pci.c           |  1 +
 drivers/usb/phy/phy-generic.c         | 56 ++++++++++++++++++++++++++++-------
 drivers/usb/phy/phy-generic.h         |  4 ++-
 include/linux/usb/usb_phy_gen_xceiv.h |  1 +
 4 files changed, 51 insertions(+), 11 deletions(-)

Index: linux/drivers/usb/phy/phy-generic.c
===================================================================
--- linux.orig/drivers/usb/phy/phy-generic.c	2014-06-25 12:03:19.347331034 -0700
+++ linux/drivers/usb/phy/phy-generic.c	2014-06-25 12:05:08.271105119 -0700
@@ -68,21 +68,35 @@
 	return 0;
 }
 
-static void nop_reset_set(struct usb_phy_gen_xceiv *nop, int asserted)
+static void nop_func_set(struct usb_phy_gen_xceiv *nop, struct gpio_desc *gpio,
+			 int asserted, int wait)
 {
-	if (IS_ERR(nop->gpio_reset))
+	if (IS_ERR(gpio))
 		return;
 
-	gpiod_set_value_cansleep(nop->gpio_reset, asserted);
+	gpiod_set_value_cansleep(gpio, asserted);
 
-	if (!asserted)
+	if (wait)
 		usleep_range(10000, 20000);
 }
 
+static inline void nop_reset_set(struct usb_phy_gen_xceiv *nop, int asserted)
+{
+	nop_func_set(nop, nop->gpio_reset, asserted, !asserted);
+}
+
+static inline void nop_cs_set(struct usb_phy_gen_xceiv *nop, int asserted)
+{
+	nop_func_set(nop, nop->gpio_cs, asserted, asserted);
+}
+
 int usb_gen_phy_init(struct usb_phy *phy)
 {
 	struct usb_phy_gen_xceiv *nop = dev_get_drvdata(phy->dev);
 
+	/* Assert CS */
+	nop_cs_set(nop, 1);
+
 	if (!IS_ERR(nop->vcc)) {
 		if (regulator_enable(nop->vcc))
 			dev_err(phy->dev, "Failed to enable power\n");
@@ -112,6 +126,9 @@
 		if (regulator_disable(nop->vcc))
 			dev_err(phy->dev, "Failed to disable power\n");
 	}
+
+	/* De-assert CS */
+	nop_cs_set(nop, 0);
 }
 EXPORT_SYMBOL_GPL(usb_gen_phy_shutdown);
 
@@ -203,6 +220,15 @@
 		dev_info(dev, "No RESET GPIO is available\n");
 	}
 
+	nop->gpio_cs = devm_gpiod_get_index(dev, "cs", 1);
+	if (IS_ERR(nop->gpio_cs)) {
+		if (PTR_ERR(nop->gpio_cs) == -EPROBE_DEFER) {
+			dev_err(dev, "Error requesting CS GPIO\n");
+			return -EPROBE_DEFER;
+		}
+		dev_info(dev, "No CS GPIO is available\n");
+	}
+
 	nop->dev		= dev;
 	nop->phy.dev		= nop->dev;
 	nop->phy.label		= "nop-xceiv";
Index: linux/drivers/usb/phy/phy-generic.h
===================================================================
--- linux.orig/drivers/usb/phy/phy-generic.h	2014-06-25 12:03:19.347331034 -0700
+++ linux/drivers/usb/phy/phy-generic.h	2014-06-25 12:03:19.347331034 -0700
@@ -9,6 +9,7 @@
 	struct clk *clk;
 	struct regulator *vcc;
 	struct gpio_desc *gpio_reset;
+	struct gpio_desc *gpio_cs;
 };
 
 int usb_gen_phy_init(struct usb_phy *phy);
