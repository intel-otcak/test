From d240a75ff2bc1659dee925d582c095eb1603f9f5 Mon Sep 17 00:00:00 2001
From: Per Persson <per.persson@intel.com>
Date: Sat, 27 Dec 2014 15:22:05 +0800
Subject: [PATCH] ov8858: fork lift from ICG gerrit

This patch is a fork lift from ICG gerrit
ssh://icggerrit.ir.intel.com:29418/vied-viedandr-camera
based on commit
  commit e461afec210eb7036c7a8a7aa90ec568012e56b5
  Author: Jianxu Zheng <jian.xu.zheng@intel.com>
  Date:   Sat Dec 27 15:22:05 2014 +0800

    ov8858: add acpi platform data support

Change-Id: I0505eebf3e194631357876e5f5fa687b9df9a36f
Signed-off-by: Per Persson <per.persson@intel.com>
---
 .../camera/drivers/media/i2c/ov8858.c              | 303 ++++++++++++++++++---
 .../camera/drivers/media/i2c/ov8858.h              |  30 +-
 2 files changed, 291 insertions(+), 42 deletions(-)

diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c b/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c
index 6642b58..4e98be7 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov8858.c
@@ -21,8 +21,14 @@
 
 #include <linux/delay.h>
 #include <linux/module.h>
-#include <media/v4l2-chip-ident.h>
+#include <asm/spid.h>
 #include <media/v4l2-device.h>
+#include <linux/acpi.h>
+#ifdef CONFIG_GMIN_INTEL_MID
+#include <linux/atomisp_gmin_platform.h>
+#else
+#include <media/v4l2-chip-ident.h>
+#endif
 #include "ov8858.h"
 
 static int ov8858_i2c_read(struct i2c_client *client, u16 len, u16 addr,
@@ -353,13 +359,18 @@ static int __ov8858_update_frame_timing(struct v4l2_subdev *sd,
 static int __ov8858_set_exposure(struct v4l2_subdev *sd, int exposure, int gain,
 				 int dig_gain, u16 *hts, u16 *vts)
 {
+	struct ov8858_device *dev = to_ov8858_sensor(sd);
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	int exp_val, ret;
 	dev_dbg(&client->dev, "%s, exposure = %d, gain=%d, dig_gain=%d\n",
 		__func__, exposure, gain, dig_gain);
 
-	if (*vts < exposure + OV8858_INTEGRATION_TIME_MARGIN) {
-		*vts = (u16) exposure + OV8858_INTEGRATION_TIME_MARGIN;
+	if (dev->limit_exposure_flag) {
+		if (exposure > *vts - OV8858_INTEGRATION_TIME_MARGIN)
+			exposure = *vts - OV8858_INTEGRATION_TIME_MARGIN;
+	} else {
+		if (*vts < exposure + OV8858_INTEGRATION_TIME_MARGIN)
+			*vts = (u16) exposure + OV8858_INTEGRATION_TIME_MARGIN;
 	}
 
 	ret = __ov8858_update_frame_timing(sd, hts, vts);
@@ -401,8 +412,16 @@ static int __ov8858_set_exposure(struct v4l2_subdev *sd, int exposure, int gain,
 			return ret;
 	}
 
-	return ov8858_write_reg(client, OV8858_16BIT, OV8858_LONG_GAIN,
+	ret = ov8858_write_reg(client, OV8858_16BIT, OV8858_LONG_GAIN,
 				gain & 0x07ff);
+	if (ret)
+		return ret;
+
+	dev->gain = gain;
+	dev->exposure = exposure;
+	dev->digital_gain = dig_gain;
+
+	return 0;
 }
 
 static int ov8858_set_exposure(struct v4l2_subdev *sd, int exposure, int gain,
@@ -442,12 +461,6 @@ static int ov8858_set_exposure(struct v4l2_subdev *sd, int exposure, int gain,
 	ret = __ov8858_set_exposure(sd, exposure, gain, dig_gain, &hts, &vts);
 	if (ret)
 		goto out;
-
-	/* Updated the device variable. These are the current values. */
-	dev->gain = gain;
-	dev->exposure = exposure;
-	dev->digital_gain = dig_gain;
-
 out:
 	/* Group hold launch - delayed launch */
 	if (dev->streaming)
@@ -593,7 +606,14 @@ static int __ov8858_init(struct v4l2_subdev *sd)
 	dev->exposure = 256;
 	dev->gain = 16;
 	dev->digital_gain = 1024;
-
+	dev->limit_exposure_flag = false;
+#ifndef CONFIG_GMIN_INTEL_MID
+	if (SPID_PRODUCT_ID(INTEL, MOFD, TABLET, EP, PRO) ||
+	    SPID_PRODUCT_ID(INTEL, MOFD, TABLET, EP, ENG)) {
+		ov8858_BasicSettings[2].val = 0x02; /* pll1_pre_div = /2 */
+		ov8858_BasicSettings[3].val = 0x50; /* pll1_multiplier = 80 */
+	}
+#endif
 	dev_dbg(&client->dev, "%s: Writing basic settings to ov8858\n",
 		__func__);
 	return ov8858_write_reg_array(client, ov8858_BasicSettings);
@@ -615,13 +635,47 @@ static void ov8858_uninit(struct v4l2_subdev *sd)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct ov8858_device *dev = to_ov8858_sensor(sd);
+	struct v4l2_ctrl *ctrl;
 	dev_dbg(&client->dev, "%s:\n", __func__);
 
 	dev->exposure = 0;
 	dev->gain     = 0;
 	dev->digital_gain = 0;
+	dev->limit_exposure_flag = false;
+	mutex_unlock(&dev->input_lock);
+	ctrl = v4l2_ctrl_find(sd->ctrl_handler,
+				V4L2_CID_EXPOSURE_AUTO_PRIORITY);
+	if (ctrl)
+		v4l2_ctrl_s_ctrl(ctrl, V4L2_EXPOSURE_AUTO);
+	mutex_lock(&dev->input_lock);
 }
 
+static int ov8858_g_comp_delay(struct v4l2_subdev *sd, unsigned int *usec)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov8858_device *dev = to_ov8858_sensor(sd);
+	int ret = 0, exposure;
+	u16 vts, data;
+
+	if (dev->exposure == 0) {
+		ret = ov8858_read_reg(client, OV8858_16BIT,
+				       OV8858_LONG_EXPO + 1, &data);
+		if (ret)
+			return ret;
+		exposure = data;
+		exposure >>= 4;
+	} else {
+		exposure = dev->exposure;
+	}
+
+	ret = ov8858_read_reg(client, OV8858_16BIT, OV8858_TIMING_VTS, &vts);
+	if (ret || vts == 0)
+		vts = OV8858_DEPTH_VTS_CONST;
+
+	*usec = (exposure * 33333 / vts) - OV8858_DEPTH_COMP_CONST;
+
+	return 0;
+}
 static long ov8858_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
@@ -630,11 +684,78 @@ static long ov8858_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		return ov8858_s_exposure(sd, (struct atomisp_exposure *)arg);
 	case ATOMISP_IOC_G_SENSOR_PRIV_INT_DATA:
 		return ov8858_g_priv_int_data(sd, arg);
+	case ATOMISP_IOC_G_DEPTH_SYNC_COMP:
+		return ov8858_g_comp_delay(sd, (unsigned int *)arg);
 	default:
 		dev_err(&client->dev, "Unhandled command 0x%X\n", cmd);
 		return -EINVAL;
 	}
-	return 0;
+}
+
+static int __power_ctrl(struct v4l2_subdev *sd, bool flag)
+{
+	int ret = 0;
+	struct ov8858_device *dev = to_ov8858_sensor(sd);
+#ifdef CONFIG_GMIN_INTEL_MID
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+#endif
+
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->power_ctrl)
+		return dev->platform_data->power_ctrl(sd, flag);
+
+#ifdef CONFIG_GMIN_INTEL_MID
+	if (dev->platform_data->v2p8_ctrl) {
+		ret = dev->platform_data->v2p8_ctrl(sd, flag);
+		if (ret) {
+			dev_err(&client->dev,
+				"failed to power %s 2.8v power rail\n",
+				flag ? "up" : "down");
+			return ret;
+		}
+	}
+
+	if (dev->platform_data->v1p8_ctrl) {
+		ret = dev->platform_data->v1p8_ctrl(sd, flag);
+		if (ret) {
+			dev_err(&client->dev,
+				"failed to power %s 1.8v power rail\n",
+				flag ? "up" : "down");
+			if (dev->platform_data->v2p8_ctrl)
+				dev->platform_data->v2p8_ctrl(sd, 0);
+			return ret;
+		}
+	}
+
+	if (flag)
+		msleep(20); /* Wait for power lines to stabilize */
+#endif
+	return ret;
+}
+
+static int __gpio_ctrl(struct v4l2_subdev *sd, bool flag)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov8858_device *dev = to_ov8858_sensor(sd);
+
+	if (!dev || !dev->platform_data)
+		return -ENODEV;
+
+	/* Non-gmin platforms use the legacy callback */
+	if (dev->platform_data->gpio_ctrl)
+		return dev->platform_data->gpio_ctrl(sd, flag);
+
+#ifdef CONFIG_GMIN_INTEL_MID
+	if (dev->platform_data->gpio0_ctrl)
+		return dev->platform_data->gpio0_ctrl(sd, flag);
+#endif
+
+	dev_err(&client->dev, "failed to find platform gpio callback\n");
+
+	return -EINVAL;
 }
 
 static int power_up(struct v4l2_subdev *sd)
@@ -645,7 +766,7 @@ static int power_up(struct v4l2_subdev *sd)
 	dev_dbg(&client->dev, "%s\n", __func__);
 
 	/* Enable power */
-	ret = dev->platform_data->power_ctrl(sd, 1);
+	ret = __power_ctrl(sd, 1);
 	if (ret)
 		goto fail_power;
 
@@ -655,7 +776,7 @@ static int power_up(struct v4l2_subdev *sd)
 		goto fail_clk;
 
 	/* Release reset */
-	ret = dev->platform_data->gpio_ctrl(sd, 1);
+	ret = __gpio_ctrl(sd, 1);
 	if (ret)
 		goto fail_gpio;
 
@@ -665,11 +786,10 @@ static int power_up(struct v4l2_subdev *sd)
 	return 0;
 
 fail_gpio:
-	dev->platform_data->gpio_ctrl(sd, 0);
-fail_clk:
 	dev->platform_data->flisclk_ctrl(sd, 0);
+fail_clk:
+	__power_ctrl(sd, 0);
 fail_power:
-	dev->platform_data->power_ctrl(sd, 0);
 	dev_err(&client->dev, "Sensor power-up failed\n");
 
 	return ret;
@@ -684,15 +804,15 @@ static int power_down(struct v4l2_subdev *sd)
 
 	ret = dev->platform_data->flisclk_ctrl(sd, 0);
 	if (ret)
-		dev_err(&client->dev, "flisclk failed\n");
+		dev_err(&client->dev, "flisclk off failed\n");
 
-	ret = dev->platform_data->gpio_ctrl(sd, 0);
+	ret = __gpio_ctrl(sd, 0);
 	if (ret)
-		dev_err(&client->dev, "Failed to set reset line off\n");
+		dev_err(&client->dev, "gpio off failed\n");
 
-	ret = dev->platform_data->power_ctrl(sd, 0);
+	ret = __power_ctrl(sd, 0);
 	if (ret)
-		dev_err(&client->dev, "vprog failed.\n");
+		dev_err(&client->dev, "power rail off failed.\n");
 
 	return ret;
 }
@@ -700,16 +820,15 @@ static int power_down(struct v4l2_subdev *sd)
 static int __ov8858_s_power(struct v4l2_subdev *sd, int on)
 {
 	struct ov8858_device *dev = to_ov8858_sensor(sd);
-	int ret, r;
+	int ret, r = 0;
 
 	if (on == 0) {
 		ov8858_uninit(sd);
-		ret = power_down(sd);
-		if (dev->vcm_driver && dev->vcm_driver->power_down) {
+		if (dev->vcm_driver && dev->vcm_driver->power_down)
 			r = dev->vcm_driver->power_down(sd);
-			if (ret == 0)
-				ret = r;
-		}
+		ret = power_down(sd);
+		if (r != 0 && ret == 0)
+			ret = r;
 	} else {
 		ret = power_up(sd);
 		if (ret)
@@ -746,6 +865,7 @@ static int ov8858_s_power(struct v4l2_subdev *sd, int on)
 	return ret;
 }
 
+#ifndef CONFIG_GMIN_INTEL_MID
 static int ov8858_g_chip_ident(struct v4l2_subdev *sd,
 			       struct v4l2_dbg_chip_ident *chip)
 {
@@ -759,6 +879,7 @@ static int ov8858_g_chip_ident(struct v4l2_subdev *sd,
 	return 0;
 }
 
+#endif
 /*
  * Return value of the specified register, first try getting it from
  * the register list and if not found, get from the sensor via i2c.
@@ -950,6 +1071,7 @@ static int ov8858_get_intg_factor(struct v4l2_subdev *sd,
 	unsigned int sys_pre_div;
 	unsigned int sclk_pdiv;
 	unsigned int sclk = ext_clk;
+	u16 hts;
 	int ret;
 
 	memset(&info->data, 0, sizeof(info->data));
@@ -1020,6 +1142,11 @@ static int ov8858_get_intg_factor(struct v4l2_subdev *sd,
 
 	m->coarse_integration_time_min = 0;
 	m->coarse_integration_time_max_margin = OV8858_INTEGRATION_TIME_MARGIN;
+	ret = ov8858_read_reg(client, OV8858_16BIT, OV8858_TIMING_HTS, &hts);
+	if (ret < 0)
+		return ret;
+	m->hts = hts;
+	dev_dbg(&client->dev, "%s: get HTS %d\n", __func__, hts);
 
 	/* OV Sensor do not use fine integration time. */
 	m->fine_integration_time_min = 0;
@@ -1353,8 +1480,30 @@ static int ov8858_s_stream(struct v4l2_subdev *sd, int enable)
 	struct ov8858_device *dev = to_ov8858_sensor(sd);
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	int ret;
+	u16 val;
 	dev_dbg(&client->dev, "%s: enable = %d\n", __func__, enable);
 
+	/* Set orientation */
+	ret = ov8858_read_reg(client, OV8858_8BIT, OV8858_FORMAT2, &val);
+	if (ret)
+		return ret;
+
+	ret = ov8858_write_reg(client, OV8858_8BIT, OV8858_FORMAT2,
+			       dev->hflip ? val | OV8858_FLIP_ENABLE :
+			       val & ~OV8858_FLIP_ENABLE);
+	if (ret)
+		return ret;
+
+	ret = ov8858_read_reg(client, OV8858_8BIT, OV8858_FORMAT1, &val);
+	if (ret)
+		return ret;
+
+	ret = ov8858_write_reg(client, OV8858_8BIT, OV8858_FORMAT1,
+			       dev->vflip ? val | OV8858_FLIP_ENABLE :
+			       val & ~OV8858_FLIP_ENABLE);
+	if (ret)
+		return ret;
+
 	mutex_lock(&dev->input_lock);
 	if (enable) {
 		__ov8858_print_timing(sd);
@@ -1633,6 +1782,19 @@ static int ov8858_s_ctrl(struct v4l2_ctrl *ctrl)
 		if (dev->vcm_driver && dev->vcm_driver->t_focus_abs)
 			return dev->vcm_driver->t_focus_abs(&dev->sd,
 							    ctrl->val);
+		return 0;
+	case V4L2_CID_EXPOSURE_AUTO_PRIORITY:
+		if (ctrl->val == V4L2_EXPOSURE_AUTO)
+			dev->limit_exposure_flag = false;
+		else if (ctrl->val == V4L2_EXPOSURE_APERTURE_PRIORITY)
+			dev->limit_exposure_flag = true;
+		return 0;
+	case V4L2_CID_HFLIP:
+		dev->hflip = ctrl->val;
+		return 0;
+	case V4L2_CID_VFLIP:
+		dev->vflip = ctrl->val;
+		return 0;
 	default:
 		dev_err(&client->dev, "%s: Error: Invalid ctrl: 0x%X\n",
 			__func__, ctrl->id);
@@ -1653,6 +1815,7 @@ static int ov8858_g_ctrl(struct v4l2_ctrl *ctrl)
 		if (dev->vcm_driver && dev->vcm_driver->q_focus_status)
 			return dev->vcm_driver->q_focus_status(&dev->sd,
 							       &(ctrl->val));
+		return 0;
 	case V4L2_CID_BIN_FACTOR_HORZ:
 		r_odd = ov8858_get_register_8bit(&dev->sd, OV8858_H_INC_ODD,
 						 dev->curr_res_table[i].regs);
@@ -1676,7 +1839,12 @@ static int ov8858_g_ctrl(struct v4l2_ctrl *ctrl)
 			return r_even;
 		ctrl->val = fls(r_odd + (r_even)) - 2;
 		return 0;
-
+	case V4L2_CID_HFLIP:
+		ctrl->val = dev->hflip;
+		break;
+	case V4L2_CID_VFLIP:
+		ctrl->val = dev->vflip;
+		break;
 	default:
 		dev_warn(&client->dev,
 			 "%s: Error: Invalid ctrl: 0x%X\n", __func__, ctrl->id);
@@ -1815,7 +1983,9 @@ static const struct v4l2_subdev_video_ops ov8858_video_ops = {
 };
 
 static const struct v4l2_subdev_core_ops ov8858_core_ops = {
+#ifndef CONFIG_GMIN_INTEL_MID
 	.g_chip_ident = ov8858_g_chip_ident,
+#endif
 	.queryctrl = v4l2_subdev_queryctrl,
 	.g_ctrl = v4l2_subdev_g_ctrl,
 	.s_ctrl = v4l2_subdev_s_ctrl,
@@ -1880,6 +2050,22 @@ static const struct v4l2_ctrl_config ctrl_run_mode = {
 static const struct v4l2_ctrl_config ctrls[] = {
 	{
 		.ops = &ctrl_ops,
+		.id = V4L2_CID_VFLIP,
+		.name = "Vertical flip",
+		.type = V4L2_CTRL_TYPE_BOOLEAN,
+		.min = false,
+		.max = true,
+		.step = 1,
+	}, {
+		.ops = &ctrl_ops,
+		.id = V4L2_CID_HFLIP,
+		.name = "Horizontal flip",
+		.type = V4L2_CTRL_TYPE_BOOLEAN,
+		.min = false,
+		.max = true,
+		.step = 1,
+	}, {
+		.ops = &ctrl_ops,
 		.id = V4L2_CID_EXPOSURE_ABSOLUTE,
 		.name = "Absolute exposure",
 		.type = V4L2_CTRL_TYPE_MENU,
@@ -1975,6 +2161,14 @@ static const struct v4l2_ctrl_config ctrls[] = {
 		.max = OV8858_BIN_FACTOR_MAX,
 		.step = 1,
 		.flags = V4L2_CTRL_FLAG_READ_ONLY | V4L2_CTRL_FLAG_VOLATILE,
+	}, {
+		.ops = &ctrl_ops,
+		.id = V4L2_CID_EXPOSURE_AUTO_PRIORITY,
+		.name = "Exposure auto priority",
+		.type = V4L2_CTRL_TYPE_INTEGER,
+		.min = V4L2_EXPOSURE_AUTO,
+		.max = V4L2_EXPOSURE_APERTURE_PRIORITY,
+		.step = 1,
 	}
 };
 
@@ -1983,7 +2177,10 @@ static int ov8858_probe(struct i2c_client *client,
 {
 	struct ov8858_device *dev;
 	unsigned int i;
-	int ret;
+	int ret = 0;
+#ifdef CONFIG_GMIN_INTEL_MID
+	struct camera_sensor_platform_data *pdata;
+#endif
 
 	dev_dbg(&client->dev, "%s:\n", __func__);
 
@@ -1996,20 +2193,50 @@ static int ov8858_probe(struct i2c_client *client,
 
 	mutex_init(&dev->input_lock);
 
-	dev->i2c_id = id->driver_data;
+	if (id)
+		dev->i2c_id = id->driver_data;
 	dev->fmt_idx = 0;
 	dev->sensor_id = OV_ID_DEFAULT;
 	dev->vcm_driver = &ov8858_vcms[OV8858_ID_DEFAULT];
 
 	v4l2_i2c_subdev_init(&(dev->sd), client, &ov8858_ops);
 
+#ifdef CONFIG_GMIN_INTEL_MID
+	if (ACPI_COMPANION(&client->dev)) {
+		pdata = gmin_camera_platform_data(&dev->sd,
+						  ATOMISP_INPUT_FORMAT_RAW_10,
+						  atomisp_bayer_order_bggr);
+		if (!pdata) {
+			dev_err(&client->dev,
+				"%s: failed to get acpi platform data\n",
+				__func__);
+			goto out_free;
+		}
+		ret = ov8858_s_config(&dev->sd, client->irq, pdata);
+		if (ret) {
+			dev_err(&client->dev,
+				"%s: failed to set config\n", __func__);
+			goto out_free;
+		}
+		ret = atomisp_register_i2c_module(&dev->sd, pdata, RAW_CAMERA);
+		if (ret) {
+			dev_err(&client->dev,
+				"%s: failed to register subdev\n", __func__);
+			goto out_free;
+		}
+	}
+
+#else
 	if (client->dev.platform_data) {
 		ret = ov8858_s_config(&dev->sd, client->irq,
 				      client->dev.platform_data);
-		if (ret)
+		if (ret) {
+			dev_err(&client->dev,
+				"%s: failed to set config\n", __func__);
 			goto out_free;
+		}
 	}
-
+#endif
 	/*
 	 * sd->name is updated with sensor driver name by the v4l2.
 	 * change it to sensor name in this case.
@@ -2067,10 +2294,20 @@ static const struct i2c_device_id ov8858_id[] = {
 
 MODULE_DEVICE_TABLE(i2c, ov8858_id);
 
+#ifdef CONFIG_GMIN_INTEL_MID
+static struct acpi_device_id ov8858_acpi_match[] = {
+	{"INT33BF"},
+	{},
+};
+#endif
+
 static struct i2c_driver ov8858_driver = {
 	.driver = {
 		.owner = THIS_MODULE,
 		.name = OV8858_NAME,
+#ifdef CONFIG_GMIN_INTEL_MID
+		.acpi_match_table = ACPI_PTR(ov8858_acpi_match),
+#endif
 	},
 	.probe = ov8858_probe,
 	.remove = ov8858_remove,
diff --git a/drivers/external_drivers/camera/drivers/media/i2c/ov8858.h b/drivers/external_drivers/camera/drivers/media/i2c/ov8858.h
index 310335d..847013a 100644
--- a/drivers/external_drivers/camera/drivers/media/i2c/ov8858.h
+++ b/drivers/external_drivers/camera/drivers/media/i2c/ov8858.h
@@ -122,6 +122,11 @@
 #define OV8858_SHORT_GAIN			0x350C
 #define OV8858_SHORT_DIGI_GAIN			0x350E
 
+#define OV8858_FORMAT1				0x3820
+#define OV8858_FORMAT2				0x3821
+
+#define OV8858_FLIP_ENABLE			0x06
+
 #define OV8858_MWB_RED_GAIN_H			0x5032
 #define OV8858_MWB_GREEN_GAIN_H			0x5034
 #define OV8858_MWB_BLUE_GAIN_H			0x5036
@@ -177,6 +182,9 @@ struct ov8858_vcm {
 
 #define MAX_FPS_OPTIONS_SUPPORTED		3
 
+#define OV8858_DEPTH_COMP_CONST			3200
+#define OV8858_DEPTH_VTS_CONST			2573
+
 enum ov8858_tok_type {
 	OV8858_8BIT  = 0x0001,
 	OV8858_16BIT = 0x0002,
@@ -250,6 +258,10 @@ struct ov8858_device {
 	u16 lines_per_frame;
 	u8 fps;
 	u8 *otp_data;
+	/* Prevent the framerate from being lowered in low light scenes. */
+	int limit_exposure_flag;
+	bool hflip;
+	bool vflip;
 
 	const struct ov8858_reg *regs;
 	struct ov8858_vcm *vcm_driver;
@@ -334,7 +346,7 @@ static struct ov8858_vcm ov8858_vcms[] = {
 #define OV8858_RES_WIDTH_MAX	3280
 #define OV8858_RES_HEIGHT_MAX	2464
 
-static const struct ov8858_reg ov8858_BasicSettings[] = {
+static struct ov8858_reg ov8858_BasicSettings[] = {
 	{OV8858_8BIT, 0x0103, 0x01}, /* software_reset */
 	{OV8858_8BIT, 0x0100, 0x00}, /* software_standby */
 	/* PLL settings */
@@ -572,8 +584,8 @@ static const struct ov8858_reg ov8858_BasicSettings[] = {
 	{OV8858_8BIT, 0x3813, 0x02}, /* v_win offset low */
 	{OV8858_8BIT, 0x3814, 0x01}, /* h_odd_inc */
 	{OV8858_8BIT, 0x3815, 0x01}, /* h_even_inc */
-	{OV8858_8BIT, 0x3820, 0x46}, /* format1 */
-	{OV8858_8BIT, 0x3821, 0x00}, /* format2 */
+	{OV8858_8BIT, 0x3820, 0x00}, /* format1 */
+	{OV8858_8BIT, 0x3821, 0x40}, /* format2 */
 	{OV8858_8BIT, 0x382A, 0x01}, /* v_odd_inc */
 	{OV8858_8BIT, 0x382B, 0x01}, /* v_even_inc */
 
@@ -783,10 +795,10 @@ static const struct ov8858_reg ov8858_1080P_60[] = {
 	{OV8858_8BIT, 0x3809, 0x90}, /* h_output_size low */
 	{OV8858_8BIT, 0x380A, 0x04}, /* v_output_size high */
 	{OV8858_8BIT, 0x380B, 0x48}, /* v_output_size low */
-	{OV8858_8BIT, 0x380C, 0x08}, /* horizontal timing size high */
-	{OV8858_8BIT, 0x380D, 0x78}, /* horizontal timing size low */
+	{OV8858_8BIT, 0x380C, 0x07}, /* horizontal timing size high */
+	{OV8858_8BIT, 0x380D, 0x94}, /* horizontal timing size low */
 	{OV8858_8BIT, 0x380E, 0x04}, /* vertical timing size high */
-	{OV8858_8BIT, 0x380F, 0x7f}, /* vertical timing size low */
+	{OV8858_8BIT, 0x380F, 0xEC}, /* vertical timing size low */
 	{OV8858_8BIT, 0x4022, 0x07}, /* Anchor left end = 0x072D */
 	{OV8858_8BIT, 0x4023, 0x2D}, /* Anchor left end = 0x072D */
 	{OV8858_8BIT, 0x4024, 0x07}, /* Anchor right start = 0x079E */
@@ -895,15 +907,15 @@ static struct ov8858_resolution ov8858_res_video[] = {
 		.fps_options =  {
 			{
 				.fps = 60,
-				.pixels_per_line = 4366,
-				.lines_per_frame = 1151,
+				.pixels_per_line = 3880,
+				.lines_per_frame = 1260,
 			},
 			{
 			}
 		},
 	},
 	{
-		 .desc = "ov8858_6M_STILL",
+		 .desc = "ov8858_6M_VIDEO",
 		 .width = 3280,
 		 .height = 1852,
 		 .used = 0,
-- 
1.9.1

