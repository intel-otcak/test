From 75a2b8a689b18663aae7b10353f4088529350ff1 Mon Sep 17 00:00:00 2001
Message-Id: <75a2b8a689b18663aae7b10353f4088529350ff1.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Adam Rutkowski <adam.j.rutkowski@intel.com>
Date: Tue, 17 Dec 2013 11:22:28 +0100
Subject: [PATCH 056/312] FOR_UPSTREAM [VPG]: Exporting ftrace_now() function
 symbol

Exporting ftrace_now() function symbol and moving its declaration
to kernel.h. This allows kernel drivers to read ftrace timestamp
for given CPU.

Conflicts:
	include/linux/kernel.h

Issue: VIZ-3508
Change-Id: Icf7d25fcb084bc760737c415734267262580d46b
Signed-off-by: Adam Rutkowski <adam.j.rutkowski@intel.com>
Reviewed-on: https://android.intel.com/162931
Tested-by: sys_abtbuild <sys_abtbuild@intel.com>
Reviewed-by: Bloomfield, Jon <jon.bloomfield@intel.com>
Reviewed-by: Holmberg, Hans <hans.holmberg@intel.com>
Reviewed-by: Madajczak, Tomasz <Tomasz.Madajczak@intel.com>
Reviewed-by: Nordell, Joakim <joakim.nordell@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 include/linux/kernel.h |    5 +++++
 kernel/trace/trace.c   |    1 +
 kernel/trace/trace.h   |    2 --
 3 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 07b3eb4..fdfb331 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -535,6 +535,9 @@ enum ftrace_dump_mode {
 };
 
 #ifdef CONFIG_TRACING
+
+typedef u64 cycle_t;
+
 void tracing_on(void);
 void tracing_off(void);
 int tracing_is_on(void);
@@ -543,6 +546,7 @@ void tracing_snapshot_alloc(void);
 
 extern void tracing_start(void);
 extern void tracing_stop(void);
+extern cycle_t ftrace_now(int cpu);
 
 static inline __printf(1, 2)
 void ____trace_printk_check_format(const char *fmt, ...)
@@ -681,6 +685,7 @@ extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
 static inline void tracing_start(void) { }
 static inline void tracing_stop(void) { }
 static inline void trace_dump_stack(int skip) { }
+static inline cycle_t ftrace_now(int cpu) { return 0 };
 
 static inline void tracing_on(void) { }
 static inline void tracing_off(void) { }
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index 5010917..4330cd1 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -281,6 +281,7 @@ cycle_t ftrace_now(int cpu)
 {
 	return buffer_ftrace_now(&global_trace.trace_buffer, cpu);
 }
+EXPORT_SYMBOL_GPL(ftrace_now);
 
 /**
  * tracing_is_enabled - Show if global_trace has been disabled
diff --git a/kernel/trace/trace.h b/kernel/trace/trace.h
index efff05f..bf34f251 100644
--- a/kernel/trace/trace.h
+++ b/kernel/trace/trace.h
@@ -642,8 +642,6 @@ static inline void __trace_stack(struct trace_array *tr, unsigned long flags,
 }
 #endif /* CONFIG_STACKTRACE */
 
-extern cycle_t ftrace_now(int cpu);
-
 extern void trace_find_cmdline(int pid, char comm[]);
 extern int trace_find_tgid(int pid);
 
-- 
1.7.9.5

