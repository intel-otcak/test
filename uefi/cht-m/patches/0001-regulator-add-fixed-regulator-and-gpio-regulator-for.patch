From 4dc63769b4b54ea6a9c7e770bfbe4889996c7f68 Mon Sep 17 00:00:00 2001
From: Chuanxiao Dong <chuanxiao.dong@intel.com>
Date: Mon, 21 Apr 2014 11:23:11 +0800
Subject: [PATCH 1/1] regulator: add fixed regulator and gpio regulator for
 the SD

Add regulator device platform data for Crystal Cove PMIC VSDCARD
and VSDIO regulators for SDHC ACPI SD host

Change-Id: Ie9865844dff3d5e2222ebc42be21af4f4d0bbcde
Signed-off-by: Chuanxiao Dong <chuanxiao.dong@intel.com>
---
 arch/x86/platform/intel-mid/device_libs/Makefile   |    2 +-
 .../device_libs/platform_sdio_regulator.c          |  304 ++++++++------------
 2 files changed, 125 insertions(+), 181 deletions(-)

diff --git a/arch/x86/platform/intel-mid/device_libs/Makefile b/arch/x86/platform/intel-mid/device_libs/Makefile
index 30067159440a..74a0bc86bfdc 100644
--- a/arch/x86/platform/intel-mid/device_libs/Makefile
+++ b/arch/x86/platform/intel-mid/device_libs/Makefile
@@ -25,4 +25,4 @@ obj-$(subst m,y,$(CONFIG_SERIAL_MRST_MAX3110)) += platform_max3111.o
 # MISC Devices
 #obj-$(subst m,y,$(CONFIG_KEYBOARD_GPIO)) += platform_gpio_keys.o
 # WIFI devices
-#obj-$(subst m,y,$(CONFIG_MMC_SDHCI_ACPI)) += platform_sdio_regulator.o
+obj-$(subst m,y,$(CONFIG_MMC_SDHCI_ACPI)) += platform_sdio_regulator.o
diff --git a/arch/x86/platform/intel-mid/device_libs/platform_sdio_regulator.c b/arch/x86/platform/intel-mid/device_libs/platform_sdio_regulator.c
index e2cf8e998ada..d7dd5540f5e1 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_sdio_regulator.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_sdio_regulator.c
@@ -12,225 +12,169 @@
 
 #include <linux/init.h>
 #include <linux/kernel.h>
-#include <asm/intel-mid.h>
 #include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
 #include <linux/lnw_gpio.h>
 #include <linux/delay.h>
 #include <linux/regulator/machine.h>
 #include <linux/regulator/fixed.h>
+#include <linux/regulator/driver.h>
+#include <linux/regulator/gpio-regulator.h>
 #include <linux/acpi.h>
-#include <linux/acpi_gpio.h>
-
-#define DELAY_ONOFF 250
+#include <linux/mfd/intel_soc_pmic.h>
+#include <linux/platform_device.h>
+#include <asm/cpu_device_id.h>
 
 struct acpi_ids { char *hid; char *uid; };
 
-static struct acpi_ids intel_sdio_ids[] = {
-	{"INT33BB", "2"}, /* BYT SDIO */
-	{ },
-};
-
-static struct acpi_ids intel_brc_ids[] = {
-	{"BCM4321", NULL}, /* BYT SDIO */
-	{"RTL8723" , NULL}, /* BCR SDIO */
+static struct acpi_ids intel_sd_ids[] = {
+	{"80860F14", "3"}, /* BYT SD */
+	{"INT33BB", "3"},
 	{ },
 };
 
-static struct regulator_consumer_supply wlan_vmmc_supply = {
-	.supply = "vmmc",
+static struct regulator_consumer_supply sd_vqmmc_consumer[] = {
+	REGULATOR_SUPPLY("vqmmc", "80860F14:01"),
+	REGULATOR_SUPPLY("vqmmc", "INT33BB:01"),
 };
 
-static struct regulator_init_data wlan_vmmc_data = {
-	.constraints = {
-		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
-	},
-	.num_consumer_supplies  = 1,
-	.consumer_supplies = &wlan_vmmc_supply,
+static struct regulator_consumer_supply sd_vmmc_consumer[] = {
+	REGULATOR_SUPPLY("vmmc", "80860F14:01"),
+	REGULATOR_SUPPLY("vmmc", "INT33BB:01"),
 };
 
-static struct fixed_voltage_config vwlan = {
-	.supply_name            = "wlan_en_acpi",
-	.microvolts             = 1800000,
-	.gpio                   = -EINVAL,
-	.startup_delay          = 1000 * DELAY_ONOFF,
-	.enable_high            = 1,
-	.enabled_at_boot        = 0,
-	.init_data              = &wlan_vmmc_data,
-};
-
-static void vwlan_device_release(struct device *dev) {}
-
-static struct platform_device vwlan_device = {
-	.name   = "reg-fixed-voltage",
-	.id             = PLATFORM_DEVID_AUTO,
-	.dev = {
-		.platform_data  = &vwlan,
-		.release = vwlan_device_release,
-	},
-};
-
-static struct acpi_device *acpi_bus_get_parent(acpi_handle handle)
-{
-	struct acpi_device *device = NULL;
-	acpi_status status;
-	int result;
-	struct acpi_device *acpi_root;
-
-	result = acpi_bus_get_device(ACPI_ROOT_OBJECT, &acpi_root);
-	if (result)
-		return NULL;
-
-	/*
-	 * Fixed hardware devices do not appear in the namespace and do not
-	 * have handles, but we fabricate acpi_devices for them, so we have
-	 * to deal with them specially.
-	 */
-	if (!handle)
-		return acpi_root;
-
-	do {
-		status = acpi_get_parent(handle, &handle);
-		if (ACPI_FAILURE(status))
-			return status == AE_NULL_ENTRY ? NULL : acpi_root;
-	} while (acpi_bus_get_device(handle, &device));
-
-	return device;
-}
-
-static int sdio_acpi_match(struct device *dev, void *data)
+static int sdhc_acpi_match(struct device *dev, void *data)
 {
 	struct acpi_ids *ids = data;
 	struct acpi_handle *handle = ACPI_HANDLE(dev);
 	struct acpi_device_info *info;
-	char *uid = NULL;
 	acpi_status status;
+	int match = 0;
 
 	status = acpi_get_object_info(handle, &info);
-	if (!ACPI_FAILURE(status) && (info->valid & ACPI_VALID_UID))
-		uid = info->unique_id.string;
-	else
-		return false;
-
-	if (!strncmp(ids->hid, dev_name(dev), strlen(ids->hid)))
-		if (!strcmp(ids->uid, uid))
-			return true;
-
-	return false;
+	if (ACPI_FAILURE(status))
+		return 0;
+
+	if (!(info->valid & ACPI_VALID_UID) ||
+		!(info->valid & ACPI_VALID_HID))
+		goto free;
+
+	if (!strncmp(ids->hid, info->hardware_id.string, strlen(ids->hid)))
+		if (!strncmp(ids->uid, info->unique_id.string,
+					strlen(ids->uid)))
+			match = 1;
+free:
+	kfree(info);
+	return match;
 }
 
-static int brc_acpi_match(struct device *dev, void *data)
-{
-	struct acpi_ids *ids = data;
-
-	if (!strncmp(ids->hid, dev_name(dev), strlen(ids->hid)))
-			return true;
+/* vsdcard regulator */
+static struct regulator_init_data ccove_vsdcard_data = {
+	.constraints = {
+		.valid_ops_mask		= REGULATOR_CHANGE_STATUS,
+		.valid_modes_mask	= REGULATOR_MODE_NORMAL,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(sd_vmmc_consumer),
+	.consumer_supplies	= sd_vmmc_consumer,
+};
 
-	return false;
-}
+static struct fixed_voltage_config ccove_vsdcard = {
+	.supply_name	= "gpio_vsdcard",
+	.microvolts	= 3300000,
+	.init_data	= &ccove_vsdcard_data,
+};
 
+/* vsdio regulator */
+static struct regulator_init_data ccove_vsdio_data = {
+	.constraints = {
+		.min_uV			= 1700000,
+		.max_uV			= 3300000,
+		.valid_ops_mask		= REGULATOR_CHANGE_VOLTAGE |
+					REGULATOR_CHANGE_STATUS,
+		.valid_modes_mask	= REGULATOR_MODE_NORMAL,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(sd_vqmmc_consumer),
+	.consumer_supplies	= sd_vqmmc_consumer,
+};
 
-static int brc_fixed_regulator_register_by_acpi(struct platform_device *pdev)
-{
-	struct device *dev;
-	struct acpi_ids *brc_ids;
-	struct fixed_voltage_config *fixedcfg = NULL;
-	struct regulator_init_data *data = NULL;
-	struct acpi_handle *handle;
-	struct acpi_device *parent;
-
-	if (!pdev)
-		return -ENODEV;
-	fixedcfg = pdev->dev.platform_data;
-	if (!fixedcfg)
-		return -ENODEV;
-	data = fixedcfg->init_data;
-	if (!data || !data->consumer_supplies)
-		return -ENODEV;
-
-	/* get the GPIO pin from ACPI device first */
-	for (brc_ids = intel_brc_ids; brc_ids->hid; brc_ids++) {
-		dev = bus_find_device(&platform_bus_type, NULL,
-				brc_ids, brc_acpi_match);
-		if (dev) {
-			handle = ACPI_HANDLE(dev);
-			if (!ACPI_HANDLE(dev))
-				continue;
-			parent = acpi_bus_get_parent(handle);
-			if (!parent)
-				continue;
-
-			data->consumer_supplies->dev_name =
-						dev_name(&parent->dev);
-			fixedcfg->gpio = acpi_get_gpio_by_index(dev, 1, NULL);
-			if (fixedcfg->gpio < 0) {
-				dev_info(dev, "No wlan-enable GPIO\n");
-				continue;
-			}
-			dev_info(dev, "wlan-enable GPIO %d found\n",
-					fixedcfg->gpio);
-			break;
-		}
-	}
+static struct gpio_regulator_state ccove_vsdio_states[] = {
+	{
+		.value = 3300000,
+		.gpios = 0,
+	},
+	{
+		.value = 1800000,
+		.gpios = 1,
+	},
+};
 
-	if (brc_ids->hid) {
-		/* add a regulator to control wlan enable gpio */
-		return platform_device_register(&vwlan_device);
-	}
+static struct gpio ccove_vsdio_gpios = {
+	.flags = GPIOF_OUT_INIT_LOW,
+	.label = "vsdio",
+};
 
-	return -ENODEV;
-}
+static struct gpio_regulator_config ccove_vsdio = {
+	.supply_name	= "gpio_vsdio",
+	.enable_gpio	= -ENODEV,
+	.gpios		= &ccove_vsdio_gpios,
+	.nr_gpios	= 1,
+	.states		= ccove_vsdio_states,
+	.nr_states	= ARRAY_SIZE(ccove_vsdio_states),
+	.type		= REGULATOR_VOLTAGE,
+	.init_data	= &ccove_vsdio_data,
+};
 
-static int sdio_fixed_regulator_register_by_acpi(struct platform_device *pdev)
+static void intel_setup_ccove_sd_regulators(void)
 {
-	struct device *dev;
-	struct acpi_ids *sdio_ids;
-	struct fixed_voltage_config *fixedcfg = NULL;
-	struct regulator_init_data *data = NULL;
-
-	if (!pdev)
-		return -ENODEV;
-	fixedcfg = pdev->dev.platform_data;
-	if (!fixedcfg)
-		return -ENODEV;
-	data = fixedcfg->init_data;
-	if (!data || !data->consumer_supplies)
-		return -ENODEV;
-
-	/* get the GPIO pin from ACPI device first */
-	for (sdio_ids = intel_sdio_ids; sdio_ids->hid; sdio_ids++) {
+	struct device *dev = NULL;
+	struct acpi_ids *sdhc_ids;
+	struct gpio_desc *desc = NULL;
+
+	for (sdhc_ids = intel_sd_ids; sdhc_ids->hid; sdhc_ids++) {
 		dev = bus_find_device(&platform_bus_type, NULL,
-				sdio_ids, sdio_acpi_match);
-		if (dev) {
-			data->consumer_supplies->dev_name = dev_name(dev);
-
-			fixedcfg->gpio = acpi_get_gpio_by_index(dev, 0, NULL);
-			if (fixedcfg->gpio < 0) {
-				dev_info(dev, "No wlan-enable GPIO\n");
-				continue;
-			}
-			dev_info(dev, "wlan-enable GPIO %d found\n",
-					fixedcfg->gpio);
+				sdhc_ids, sdhc_acpi_match);
+		if (dev)
 			break;
-		}
 	}
 
-	if (sdio_ids->hid) {
-		/* add a regulator to control wlan enable gpio */
-		return platform_device_register(&vwlan_device);
+	if (!dev) {
+		pr_warn("%s: no match device found\n", __func__);
+		return;
 	}
 
-	return -ENODEV;
+	/* configure vsdio */
+	desc = devm_gpiod_get_index(dev, "sd_vsdio", 2);
+	if (!IS_ERR(desc)) {
+		ccove_vsdio_gpios.gpio = desc_to_gpio(desc);
+		devm_gpiod_put(dev, desc);
+		pr_info("%s: sd_vsdio gpio %d\n", __func__,
+				ccove_vsdio_gpios.gpio);
+	} else
+		/* set NULL data for GPIO name */
+		ccove_vsdio.supply_name = NULL;
+
+	intel_soc_pmic_set_pdata("gpio-regulator", &ccove_vsdio,
+			sizeof(struct gpio_regulator_config), 0);
+
+	/* configure vsdcard */
+	desc = devm_gpiod_get_index(dev, "sd_vsdcard", 3);
+	if (!IS_ERR(desc)) {
+		ccove_vsdcard.gpio = desc_to_gpio(desc);
+		devm_gpiod_put(dev, desc);
+		pr_info("%s: sd_vsdcard gpio %d\n", __func__,
+				ccove_vsdcard.gpio);
+	} else
+		/* set NULL data for GPIO name */
+		ccove_vsdcard.supply_name = NULL;
+
+	intel_soc_pmic_set_pdata("reg-fixed-voltage", &ccove_vsdcard,
+			sizeof(struct fixed_voltage_config), 0);
 }
 
-static int __init wifi_regulator_init(void)
+static int __init sdio_regulator_init(void)
 {
-	int ret;
-	/* register fixed regulator through ACPI device */
-	ret = brc_fixed_regulator_register_by_acpi(&vwlan_device);
-	if (!ret)
-		return ret;
-
-	pr_err("%s: No SDIO host in platform devices\n", __func__);
-	return ret;
+	intel_setup_ccove_sd_regulators();
+
+	return 0;
 }
-rootfs_initcall(wifi_regulator_init);
+fs_initcall_sync(sdio_regulator_init);
-- 
1.7.9.5

