From ec5e0fdd27f0c223fff3a0840c438a92fdca7cac Mon Sep 17 00:00:00 2001
Message-Id: <ec5e0fdd27f0c223fff3a0840c438a92fdca7cac.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Pallavi <pallavi.g@intel.com>
Date: Sat, 4 May 2013 16:07:57 +0530
Subject: [PATCH 026/312] FOR_UPSTREAM [VPG]: drm/i915: Added alpha channel
 enable/disable control

This patch adds support to enable/disable the alpha chanel for the
primary and the sprite planes when the z-order changes.

Conflicts:
	drivers/gpu/drm/i915/intel_sprite.c

Issue: APDEV-1088
Change-Id: Iad332e21e68274017e0a2bd0658c51f7cc895751
Signed-off-by: Pallavi <pallavi.g@intel.com>
Reviewed-on: http://android.intel.com:8080/106889
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Purushothaman, Vijay A <vijay.a.purushothaman@intel.com>
Reviewed-by: Stimson, Dale B <dale.b.stimson@intel.com>
Tested-by: Stimson, Dale B <dale.b.stimson@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Signed-off-by: A.Sunil Kamath <sunil.kamath@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/i915_reg.h     |    8 +++
 drivers/gpu/drm/i915/intel_sprite.c |  111 +++++++++++++++++++++++++++++++++++
 2 files changed, 119 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 14d0c0d..0623b51 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -4208,6 +4208,14 @@ enum punit_power_well {
 #define   SPRITE_DEST_KEY		(1<<2)
 #define	  SPRITE_FORCE_BOTTOM		(1<<2)
 #define	  SPRITE_ZORDER_ENABLE		(1<<0)
+
+#define P1S1S2C1	0
+#define P1S2S1C1	8
+#define S2P1S1C1        1
+#define S2S1P1C1        9
+#define S1P1S2C1        4
+#define S1S2P1C1        6
+
 #define _SPRA_LINOFF		0x70284
 #define _SPRA_STRIDE		0x70288
 #define _SPRA_POS		0x7028c
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 4ff3666..a6840c3 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -137,6 +137,111 @@ static void intel_update_primary_plane(struct intel_crtc *crtc)
 		I915_WRITE(reg, I915_READ(reg) & ~DISPLAY_PLANE_ENABLE);
 }
 
+/*
+ * enable/disable primary plane alpha channel based on the z-order
+ */
+void
+i915_set_primary_alpha(struct drm_i915_private *dev_priv, int zorder, int plane)
+{
+	u32 dspcntr;
+	u32 reg;
+	u32 pixformat;
+	bool alpha = false;
+
+	if (zorder != P1S1S2C1 && zorder != P1S2S1C1)
+		alpha = true;
+	else
+		alpha = false;
+
+	reg = DSPCNTR(plane);
+	dspcntr = I915_READ(reg);
+	pixformat = dspcntr & DISPPLANE_PIXFORMAT_MASK;
+	dspcntr &= ~DISPPLANE_PIXFORMAT_MASK;
+
+	DRM_DEBUG_DRIVER("pixformat = %x, alpha = %d", pixformat, alpha);
+
+	switch (pixformat) {
+	case DISPPLANE_BGRX555:
+	case DISPPLANE_BGRA555:
+		if (alpha)
+			dspcntr |= DISPPLANE_BGRA555;
+		else
+			dspcntr |= DISPPLANE_BGRX555;
+		break;
+	case DISPPLANE_BGRX888:
+	case DISPPLANE_BGRA888:
+		if (alpha)
+			dspcntr |= DISPPLANE_BGRA888;
+		else
+			dspcntr |= DISPPLANE_BGRX888;
+		break;
+	case DISPPLANE_RGBX888:
+	case DISPPLANE_RGBA888:
+		if (alpha)
+			dspcntr |= DISPPLANE_RGBA888;
+		else
+			dspcntr |= DISPPLANE_RGBX888;
+		break;
+	default:
+		DRM_ERROR("Unknown pixel format 0x%08x\n", pixformat);
+		break;
+	}
+
+	if (pixformat != (dspcntr & DISPPLANE_PIXFORMAT_MASK)) {
+		I915_WRITE(reg, dspcntr);
+		DRM_DEBUG_DRIVER("dspcntr = %x", dspcntr);
+	}
+}
+
+/*
+ * enable/disable sprite alpha channel based on the z-order
+ */
+void i915_set_sprite_alpha(struct drm_i915_private *dev_priv, int zorder,
+				int pipe, int plane)
+{
+	u32 spcntr;
+	u32 pixformat;
+	bool alpha = false;
+
+	if (zorder != S1P1S2C1 && zorder != S1S2P1C1 && plane == 0)
+		alpha = true;
+	else if (zorder != S2P1S1C1 && zorder != S2S1P1C1 && plane == 1)
+		alpha = true;
+	else
+		alpha = false;
+
+	spcntr = I915_READ(SPCNTR(pipe, plane));
+	pixformat = spcntr & SP_PIXFORMAT_MASK;
+	spcntr &= ~SP_PIXFORMAT_MASK;
+
+	DRM_DEBUG_DRIVER("sprite pixformat = %x plane = %d", pixformat, plane);
+
+	switch (pixformat) {
+	case SP_FORMAT_BGRA8888:
+	case SP_FORMAT_BGRX8888:
+		if (alpha)
+			spcntr |= SP_FORMAT_BGRA8888;
+		else
+			spcntr |= SP_FORMAT_BGRX8888;
+		break;
+	case SP_FORMAT_RGBA8888:
+	case SP_FORMAT_RGBX8888:
+		if (alpha)
+			spcntr |= SP_FORMAT_RGBA8888;
+		else
+			spcntr |= SP_FORMAT_RGBX8888;
+		break;
+	default:
+		DRM_ERROR("Unknown pixel format 0x%08x\n", pixformat);
+		break;
+	}
+
+	if (pixformat != (spcntr & SP_PIXFORMAT_MASK)) {
+		I915_WRITE(SPCNTR(pipe, plane), spcntr);
+		DRM_DEBUG_DRIVER("spcntr = %x ", spcntr);
+	}
+}
+
 int i915_set_plane_zorder(struct drm_device *dev, void *data,
 			  struct drm_file *file)
 {
@@ -146,6 +251,7 @@ int i915_set_plane_zorder(struct drm_device *dev, void *data,
 	u32 order = zorder->order;
 	int s1_zorder, s1_bottom, s2_zorder, s2_bottom;
 	int pipe = (order >> 31) & 0x1;
+	int z_order = order & 0x000F;
 
 	s1_zorder = (order >> 3) & 0x1;
 	s1_bottom = (order >> 2) & 0x1;
@@ -176,6 +282,11 @@ int i915_set_plane_zorder(struct drm_device *dev, void *data,
 		val |= SPRITE_FORCE_BOTTOM;
 	I915_WRITE(SPCNTR(pipe, 1), val);
 
+	i915_set_primary_alpha(dev_priv, z_order, pipe);
+
+	i915_set_sprite_alpha(dev_priv, z_order, pipe, 0);
+	i915_set_sprite_alpha(dev_priv, z_order, pipe, 1);
+
 	return 0;
 }
 
-- 
1.7.9.5

