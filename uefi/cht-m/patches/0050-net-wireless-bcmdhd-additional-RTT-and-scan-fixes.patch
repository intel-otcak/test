From 72e016921ef3c5f1c8abe8834589a9d4a4368b4d Mon Sep 17 00:00:00 2001
From: Ashwin <ashwin.bhat@broadcom.com>
Date: Tue, 5 Aug 2014 19:58:35 -0700
Subject: [PATCH 50/77] net: wireless: bcmdhd: additional RTT and scan fixes

1. Added support for asynchronous batch scan results get
2. Fixed chanspec to channel conversion in full scan result

b/16510235 wifi_get_cached_scan_results doesn't return any results after a
	   single scan
b/16803503 More RTT driver/HAL issues
Change-Id: Id179d7eca2eaf45113bcc42224b151861be51180
Signed-off-by: Ashwin <ashwin.bhat@broadcom.com>
Signed-off-by: Iliyan Malchev <malchev@google.com>
---
 drivers/net/wireless/bcmdhd/dhd_pno.c | 32 ++++++++++++++++++++++++++++----
 1 file changed, 28 insertions(+), 4 deletions(-)

diff --git a/drivers/net/wireless/bcmdhd/dhd_pno.c b/drivers/net/wireless/bcmdhd/dhd_pno.c
index 24678a0d89ad..bb3d638ad805 100644
--- a/drivers/net/wireless/bcmdhd/dhd_pno.c
+++ b/drivers/net/wireless/bcmdhd/dhd_pno.c
@@ -1489,6 +1489,7 @@ void dhd_wait_batch_results_complete(dhd_pub_t *dhd)
 {
 	dhd_pno_status_info_t *_pno_state;
 	dhd_pno_params_t *_params;
+	int err = 0;
 
 	_pno_state = PNO_GET_PNOSTATE(dhd);
 	_params = &_pno_state->pno_params_arr[INDEX_OF_GSCAN_PARAMS];
@@ -1497,7 +1498,30 @@ void dhd_wait_batch_results_complete(dhd_pub_t *dhd)
 	if (_params->params_gscan.get_batch_flag == GSCAN_BATCH_RETRIEVAL_IN_PROGRESS) {
 		DHD_PNO(("%s: Waiting to complete retrieval..\n", __FUNCTION__));
 		wait_for_completion(&_pno_state->get_batch_done);
+	} else { /* GSCAN_BATCH_RETRIEVAL_COMPLETE */
+		gscan_results_cache_t *iter;
+		uint16 num_results = 0;
+
+		mutex_lock(&_pno_state->pno_mutex);
+		iter = _params->params_gscan.gscan_batch_cache;
+		while (iter) {
+			num_results += iter->tot_count - iter->tot_consumed;
+			iter = iter->next;
+		}
+		mutex_unlock(&_pno_state->pno_mutex);
+
+		/* All results consumed/No results cached??
+		 * Get fresh results from FW
+		 */
+		if (!num_results) {
+			DHD_PNO(("%s: No results cached, getting from FW..\n", __FUNCTION__));
+			err = dhd_retreive_batch_scan_results(dhd);
+			if ((err >= 0) && (_params->params_gscan.get_batch_flag ==
+			    GSCAN_BATCH_RETRIEVAL_IN_PROGRESS))
+				wait_for_completion(&_pno_state->get_batch_done);
+		}
 	}
+	DHD_PNO(("%s: Wait complete\n", __FUNCTION__));
 
 	return;
 }
@@ -3382,15 +3406,15 @@ int dhd_retreive_batch_scan_results(dhd_pub_t *dhd)
 
 	params_batch = &_pno_state->pno_params_arr[INDEX_OF_BATCH_PARAMS].params_batch;
 	if (_params->params_gscan.get_batch_flag == GSCAN_BATCH_RETRIEVAL_COMPLETE) {
-		DHD_PNO(("WLC_E_PFN_BEST_BATCHING\n"));
+		DHD_PNO(("Retreive batch results\n"));
 		params_batch->get_batch.buf = NULL;
 		params_batch->get_batch.bufsize = 0;
 		params_batch->get_batch.reason = PNO_STATUS_EVENT;
 		_params->params_gscan.get_batch_flag = GSCAN_BATCH_RETRIEVAL_IN_PROGRESS;
 		schedule_work(&_pno_state->work);
 	} else {
-		DHD_PNO(("%s : WLC_E_PFN_BEST_BATCHING"
-			"will skip this event\n", __FUNCTION__));
+		DHD_PNO(("%s : WLC_E_PFN_BEST_BATCHING retrieval"
+			"already in progress, will skip\n", __FUNCTION__));
 		err = -1;
 	}
 
@@ -3545,7 +3569,7 @@ dhd_process_full_gscan_result(dhd_pub_t *dhd, const void *data, int *size)
 
 	memcpy(result->ssid, bi->SSID, bi->SSID_len);
 	result->ssid[bi->SSID_len] = '\0';
-	channel = CHSPEC_CHANNEL(bi->chanspec);
+	channel = wf_chspec_ctlchan(bi->chanspec);
 	result->channel = wf_channel2mhz(channel,
 		(channel <= CH_MAX_2G_CHANNEL?
 		WF_CHAN_FACTOR_2_4_G : WF_CHAN_FACTOR_5_G));
-- 
2.0.3

