From 763e0e68dbd6c12a5c67d86061a866fdb7924de2 Mon Sep 17 00:00:00 2001
Message-Id: <763e0e68dbd6c12a5c67d86061a866fdb7924de2.1436312509.git.chang-joon.lee@intel.com>
In-Reply-To: <d7f55a0f6423e9b14861f607af19ccac4e7f31d5.1436312509.git.chang-joon.lee@intel.com>
References: <d7f55a0f6423e9b14861f607af19ccac4e7f31d5.1436312509.git.chang-joon.lee@intel.com>
From: Tim Gore <tim.gore@intel.com>
Date: Thu, 25 Jun 2015 11:40:48 +0100
Subject: [PATCH 04/15] FOR_UPSTREAM [VPG]: drm/i915: 2nd fix for reset stats

With a per engine reset (in i915_handle_hung_ring)
the gpu_error.reset_counter does not get incremented,
this counter is only counting full GPU resets. This
is causing some OGL robustness tests to fail because
when they looked at the reset status of a context that
did not hang but was in a "share group" with a hanging
context, they were getting a NO_ERROR status return.
The context that did not suffer a hang would return
batch_active and batch_pending stats of 0, because no
batch buffers had been affected by a hang, and because
there had not been a full gpu reset the reset_count was
also 0, leading to a status of NO_ERROR. But the test
expects a reset to have happened. In pre_TDR times a
full gpu reset would have been done and reset_count would
be non zero, so the tests would have passed. I have
modified i915_get_reset_stats_ioctl so that instead of
reporting just full gpu resets, it reports the sum of all
gpu and ring resets.

Issue: VIZ-5904
Change-Id: I423d9f020e6c64d70789f6b557ba709fcffe0104
Signed-off-by: Tim Gore <tim.gore@intel.com>
---
 drivers/gpu/drm/i915/intel_uncore.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_uncore.c b/drivers/gpu/drm/i915/intel_uncore.c
index 7d96124..9c32573 100644
--- a/drivers/gpu/drm/i915/intel_uncore.c
+++ b/drivers/gpu/drm/i915/intel_uncore.c
@@ -1084,9 +1084,12 @@ int i915_get_reset_stats_ioctl(struct drm_device *dev,
 	}
 	hs = &ctx->hang_stats;
 
-	if (capable(CAP_SYS_ADMIN))
+	if (capable(CAP_SYS_ADMIN)) {
+		int i;
 		args->reset_count = i915_reset_count(&dev_priv->gpu_error);
-	else
+		for (i = 0; i < I915_NUM_RINGS; ++i)
+			args->reset_count += dev_priv->ring[i].hangcheck.total;
+	} else
 		args->reset_count = 0;
 
 	args->batch_active = hs->batch_active;
-- 
1.9.1

