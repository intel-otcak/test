From 065503c25e97c2713d338ed4c5f592ec3f75dbe5 Mon Sep 17 00:00:00 2001
Message-Id: <065503c25e97c2713d338ed4c5f592ec3f75dbe5.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Adam Rutkowski <adam.j.rutkowski@intel.com>
Date: Tue, 17 Dec 2013 11:22:28 +0100
Subject: [PATCH 057/312] FOR_UPSTREAM [VPG]: drm/i915: GPU/CPU timestamp
 correlation

Adding debugFS file to read GPU render engine timestamp and CPU
timestamp using current tracing clock. This is to enable usermode
application to correlate CPU timestamp from FTrace log with GPU render
engine timestamp collected together with hardware counters.

Issue: VIZ-3488
Change-Id: I408d64af344462786aa919caed3d80d25a123312
Depends-Change-Id: Icf7d25fcb084bc760737c415734267262580d46b
Signed-off-by: Adam Rutkowski <adam.j.rutkowski@intel.com>
Reviewed-on: https://android.intel.com/162932
Tested-by: sys_abtbuild <sys_abtbuild@intel.com>
Reviewed-by: Yang, Fei <fei.yang@intel.com>
Reviewed-by: Nordell, Joakim <joakim.nordell@intel.com>

Conflicts:

	drivers/gpu/drm/i915/i915_debugfs.c
---
 drivers/gpu/drm/i915/i915_debugfs.c |   43 +++++++++++++++++++++++++++++++++++
 1 file changed, 43 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index 769de64..66abbee 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -4086,6 +4086,48 @@ DEFINE_SIMPLE_ATTRIBUTE(i915_cache_sharing_fops,
 			i915_cache_sharing_get, i915_cache_sharing_set,
 			"%llu\n");
 
+#define TIMESTAMP_BUFFER_LEN  100U
+
+ssize_t i915_timestamp_read(struct file *filp,
+		 char __user *ubuf,
+		 size_t max,
+		 loff_t *ppos)
+{
+	struct drm_device *dev = filp->private_data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	int len = 0;
+	char buf[TIMESTAMP_BUFFER_LEN] = {0,};
+	unsigned long flags;
+	unsigned int gpu_ts;
+	unsigned int cpu;
+	u32 sec, nsec;
+	u64 ftrace_ts;
+
+	local_irq_save(flags);
+	cpu = smp_processor_id();
+	gpu_ts = I915_READ(RING_TIMESTAMP(RENDER_RING_BASE));
+	ftrace_ts = ftrace_now(cpu);
+	local_irq_restore(flags);
+
+	sec  = (u32)(ftrace_ts / NSEC_PER_SEC);
+	nsec = (u32)(ftrace_ts % NSEC_PER_SEC);
+
+	len = snprintf(buf, TIMESTAMP_BUFFER_LEN,
+		      "CPU%03u %u.%09u s\nGPU %u ticks\n",
+		      cpu, sec, nsec, gpu_ts);
+
+	return simple_read_from_buffer(ubuf, max, ppos,
+				       (const void *) buf, sizeof(buf));
+}
+
+static const struct file_operations i915_timestamp_fops = {
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.read = i915_timestamp_read,
+	.write = NULL,
+	.llseek = default_llseek,
+};
+
 static int i915_forcewake_open(struct inode *inode, struct file *file)
 {
 	struct drm_device *dev = inode->i_private;
@@ -4221,6 +4263,7 @@ static const struct i915_debugfs_files {
 	{"i915_pri_wm_latency", &i915_pri_wm_latency_fops},
 	{"i915_spr_wm_latency", &i915_spr_wm_latency_fops},
 	{"i915_cur_wm_latency", &i915_cur_wm_latency_fops},
+	{"i915_timestamp", &i915_timestamp_fops},
 };
 
 void intel_display_crc_init(struct drm_device *dev)
-- 
1.7.9.5

