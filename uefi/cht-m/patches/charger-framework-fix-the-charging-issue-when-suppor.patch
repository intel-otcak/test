From 1bfb5b43e0cfc070f24112bdfc1c9b5e7c661c6e Mon Sep 17 00:00:00 2001
From: "R, Kannappan" <r.kannappan@intel.com>
Date: Wed, 15 Jul 2015 19:29:12 +0530
Subject: [PATCH] charger-framework: fix the charging issue when supporting
 multiple                    cables

This patch fixes couple of issues
a. Framework doesnt look for the change in the cable and
did not enable charging.

b. When the cable is inserted there is a trigger for the charging but
battery properties are not previously registered which results in
charging failure.

Change-Id: I8f7fd5338d1a1b838f83dbe5f4e1c10ab684f902
Tracked-On: https://jira01.devtools.intel.com/browse/GMINL-13154
Signed-off-by: R, Kannappan <r.kannappan@intel.com>
---
 drivers/power/power_supply_charger.c | 22 +++++++++++++++-------
 drivers/power/power_supply_charger.h |  3 ++-
 2 files changed, 17 insertions(+), 8 deletions(-)

diff --git a/drivers/power/power_supply_charger.c b/drivers/power/power_supply_charger.c
index e2a24a6e10cd..2f0cc0e58b9c 100644
--- a/drivers/power/power_supply_charger.c
+++ b/drivers/power/power_supply_charger.c
@@ -237,10 +237,14 @@ static inline int is_charging_can_be_enabled(struct power_supply *psy)
 		return (health == POWER_SUPPLY_HEALTH_GOOD) ||
 				(health == POWER_SUPPLY_HEALTH_DEAD);
 	} else {
-		return
-	((CURRENT_THROTTLE_ACTION(psy) != PSY_THROTTLE_DISABLE_CHARGER) &&
-	(CURRENT_THROTTLE_ACTION(psy) != PSY_THROTTLE_DISABLE_CHARGING) &&
-	(INLMT(psy) >= 100) && (health == POWER_SUPPLY_HEALTH_GOOD));
+		int throttle_action, inlmt;
+
+		throttle_action = CURRENT_THROTTLE_ACTION(psy);
+		inlmt = INLMT(psy);
+
+		return (throttle_action != PSY_THROTTLE_DISABLE_CHARGER) &&
+			(throttle_action != PSY_THROTTLE_DISABLE_CHARGING) &&
+			(inlmt >= 100) && (health == POWER_SUPPLY_HEALTH_GOOD);
 	}
 }
 
@@ -666,9 +670,14 @@ static int trigger_algo(struct power_supply *psy)
 
 	ret = get_bat_prop_cache(psy, &bat_prop);
 	if (ret) {
-		pr_err("%s:Error in getting the battery property of %s!!\n",
+		pr_warn("%s:Error in getting the battery property of %s!!\n",
 							__func__, psy->name);
-		return ret;
+
+		/*
+		 * battery properties are not cached.
+		 * get the current properties to process
+		 */
+		get_cur_bat_prop(psy, &bat_prop);
 	}
 
 	algo = power_supply_get_charging_algo(psy, &chrg_profile);
@@ -753,7 +762,6 @@ static void __power_supply_trigger_charging_handler(struct power_supply *psy)
 	mutex_lock(&psy_chrgr.evt_lock);
 
 	if (is_trigger_charging_algo(psy)) {
-
 		if (IS_BATTERY(psy)) {
 			if (trigger_algo(psy)) {
 				enable_supplied_by_charging(psy, false);
diff --git a/drivers/power/power_supply_charger.h b/drivers/power/power_supply_charger.h
index 23ac49566c51..28de0b3dc5f3 100644
--- a/drivers/power/power_supply_charger.h
+++ b/drivers/power/power_supply_charger.h
@@ -204,7 +204,8 @@ static inline int get_ps_int_property(struct power_supply *psy,
 		(status == POWER_SUPPLY_CHARGER_EVENT_RESUME) ||\
 		(status == POWER_SUPPLY_CHARGER_EVENT_SUSPEND))
 #define IS_CHARGER_PROP_CHANGED(prop, cache_prop)\
-	((cache_prop.online != prop.online) || \
+	((cache_prop.cable != prop.cable) || \
+	(cache_prop.online != prop.online) || \
 	(cache_prop.present != prop.present) || \
 	(cache_prop.is_charging != prop.is_charging) || \
 	(cache_prop.health != prop.health) || \
-- 
1.9.1

