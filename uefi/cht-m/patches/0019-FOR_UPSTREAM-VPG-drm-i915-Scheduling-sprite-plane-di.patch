From 229a7db0fec5d8cde5b9bd4b7865eaa4d75e98d4 Mon Sep 17 00:00:00 2001
Message-Id: <229a7db0fec5d8cde5b9bd4b7865eaa4d75e98d4.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Ramalingam C <ramalingam.c@intel.com>
Date: Thu, 10 Oct 2013 21:11:37 +0530
Subject: [PATCH 019/312] FOR_UPSTREAM [VPG]: drm/i915: Scheduling sprite
 plane disable to corresponding flip

On Gen7 platforms' sprite to primary plane switch, scheduling sprite
disable to the corresponding page_flip will retain the sprite frame
till the valid data is provided through the flip. This will overcome
any unexpected delay between plane switch and page flip calls. Hence
avoiding any display flicker effect due to inappropriate data on
display on plane switch.

During plane switch on haswell from sprite to primary, there is a delay
between plane switch and flip. Because of which most of the time plane
switch and FB flip happens on different Vblank. Hence leaving a blank or
corrupted single frame on primary. This appears to be a flicker for
the users.

Conflicts:
	drivers/gpu/drm/i915/intel_display.c
	drivers/gpu/drm/i915/intel_drv.h
	drivers/gpu/drm/i915/intel_sprite.c

Issue: AXIA-4616
Change-Id: I32411cd2edd51b9a7c77c867d7046cc7e4fc7a28
Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
---
 drivers/gpu/drm/i915/intel_display.c |   16 ++++++++++++++++
 drivers/gpu/drm/i915/intel_drv.h     |    3 +++
 drivers/gpu/drm/i915/intel_sprite.c  |    5 +++--
 3 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index d82effc..f6a6d06 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -9206,6 +9206,7 @@ static int intel_gen7_queue_flip(struct drm_device *dev,
 				 struct intel_engine_cs *ring,
 				 uint32_t flags)
 {
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 	uint32_t plane_bit = 0;
 	int len, ret;
@@ -9291,6 +9292,20 @@ static int intel_gen7_queue_flip(struct drm_device *dev,
 
 	intel_mark_page_flip_active(intel_crtc);
 	__intel_ring_advance(ring);
+
+	/*
+	 * Sync the sprite plane disable with corresponding flip.
+	 * This will retain the sprite plane on display till valid data
+	 * is provided through flip. Hence avoiding any flicker effect
+	 * on plane switch, with no overhead.
+	 */
+	if (intel_crtc->disable_sprite) {
+		/* Activate double buffered register update */
+		I915_WRITE(SPRSURF(intel_crtc->pipe), 0);
+		POSTING_READ(SPRSURF(intel_crtc->pipe));
+		intel_crtc->disable_sprite = false;
+	}
+
 	return 0;
 }
 
@@ -11080,6 +11095,7 @@ static void intel_crtc_init(struct drm_device *dev, int pipe)
 	intel_crtc->cursor_cntl = ~0;
 
 	init_waitqueue_head(&intel_crtc->vbl_wait);
+	intel_crtc->disable_sprite = false;
 
 	BUG_ON(pipe >= ARRAY_SIZE(dev_priv->plane_to_crtc_mapping) ||
 	       dev_priv->plane_to_crtc_mapping[intel_crtc->plane] != NULL);
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index a116fc9..bd8d048 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -418,6 +418,9 @@ struct intel_crtc {
 	wait_queue_head_t vbl_wait;
 
 	int scanline_offset;
+
+	/* Flag to schedule the sprite disable to corresponding flip */
+	bool disable_sprite;
 };
 
 struct intel_plane_wm_parameters {
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 863e29c..3bba220 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -472,8 +472,9 @@ ivb_disable_plane(struct drm_plane *plane, struct drm_crtc *crtc)
 	/* Can't leave the scaler enabled... */
 	if (intel_plane->can_scale)
 		I915_WRITE(SPRSCALE(pipe), 0);
-	/* Activate double buffered register update */
-	I915_WRITE(SPRSURF(pipe), 0);
+
+	/* Scheduling the sprite disable to corresponding flip */
+	to_intel_crtc(crtc)->disable_sprite = true;
 
 	intel_flush_primary_plane(dev_priv, intel_crtc->plane);
 
-- 
1.7.9.5

