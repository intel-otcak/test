From ca0dbf3f5f9678d03c1b62f568517a0de13cf8a7 Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Tue, 13 May 2014 11:09:52 -0700
Subject: [PATCH 7/7] mmc: sdhci-acpi: power on connected devices before
 probing

Some devices connected to the SDHCI controller may have
separate enabling lines that are controlled through GPIO.
These devices need to be powered on and enabled before
probing. This is to ensure all devices connected can be
seen by the controller.

(Reworked from an earlier patch by Arjan van de Ven)

Change-Id: I6b8539a548ee385a133d814cfda9e42f1e565945
Signed-off-by: Daniel Leung <daniel.leung@intel.com>
---
 drivers/mmc/host/Kconfig      | 15 +++++++++++++++
 drivers/mmc/host/sdhci-acpi.c |  9 ++++++++-
 2 files changed, 23 insertions(+), 1 deletion(-)

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index 1384f67abe21..18944c76d680 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -93,6 +93,21 @@ config MMC_SDHCI_ACPI
 
 	  If unsure, say N.
 
+config MMC_SDHCI_ACPI_FORCE_POWER_ON
+	bool "Force Power On through ACPI methods"
+	depends on MMC_SDHCI_ACPI
+	help
+	  This forces the controller and all connected devices to
+	  power on before probing. This is done using ACPI.
+
+	  Some devices may have separate enabling lines that are
+	  controlled through GPIO. By calling the ACPI _PS0 method,
+	  these devices will be powered on and enabled before
+	  probing. This is to ensure all devices connected can be
+	  seen by the controller.
+
+	  If unsure, say N.
+
 config MMC_SDHCI_PLTFM
 	tristate "SDHCI platform and OF driver helper"
 	depends on MMC_SDHCI
diff --git a/drivers/mmc/host/sdhci-acpi.c b/drivers/mmc/host/sdhci-acpi.c
index 7e8070c2a6d8..6764c920da8c 100644
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@ -236,7 +236,7 @@ static int sdhci_acpi_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	acpi_handle handle = ACPI_HANDLE(dev);
-	struct acpi_device *device;
+	struct acpi_device *device, *child;
 	struct sdhci_acpi_host *c;
 	struct sdhci_host *host;
 	struct resource *iomem;
@@ -247,6 +247,13 @@ static int sdhci_acpi_probe(struct platform_device *pdev)
 	if (acpi_bus_get_device(handle, &device))
 		return -ENODEV;
 
+	if (IS_ENABLED(CONFIG_MMC_SDHCI_ACPI_FORCE_POWER_ON)) {
+		/* Power on the SDHCI controller and its children */
+		acpi_device_fix_up_power(device);
+		list_for_each_entry(child, &device->children, node)
+			acpi_device_fix_up_power(child);
+	}
+
 	if (acpi_bus_get_status(device) || !device->status.present)
 		return -ENODEV;
 
-- 
1.9.2

