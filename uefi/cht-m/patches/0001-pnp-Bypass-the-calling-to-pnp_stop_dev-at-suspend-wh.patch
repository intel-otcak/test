From dc8b3b535e44ab02b1250c07f67a27fe71034a8f Mon Sep 17 00:00:00 2001
From: Liu ShuoX <shuox.liu@intel.com>
Date: Mon, 23 Dec 2013 17:23:42 +0800
Subject: [PATCH 1/1] pnp: Bypass the calling to pnp_stop_dev at suspend when
 there is a protocol suspend

BZ: 160347

pnp pnp_bus_suspend/_resume have an issue.
pnp_bus_suspend calls pnp_stop_dev to disable the device. With ACPI,
pnp_stop_dev turns off the dev usually. Then,
pnp_bus_suspend=>pnp_dev->protocol->suspend accesses the device and
suspend it again.

pnp_bus_resume has the similar issue.

Another issue is firmware might just provide _DIS, but no_STS method.

The patch fixes it by adding a checking. If there is
pnp_dev->protocol->suspend, pnp_bus_suspend doesn't call pnp_stop_dev.
Do the similar thing for _resume.

LKML link: https://lkml.org/lkml/2013/12/23/460

Change-Id: I4fb72a28389fd10452ef30aea5642d07745d450c
Signed-off-by: Zhang Yanmin <yanmin.zhang@intel.com>
Signed-off-by: Liu ShuoX <shuox.liu@intel.com>
---
 drivers/pnp/driver.c | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/drivers/pnp/driver.c b/drivers/pnp/driver.c
index 00e9403..1b748ea 100644
--- a/drivers/pnp/driver.c
+++ b/drivers/pnp/driver.c
@@ -169,7 +169,7 @@ static int pnp_bus_suspend(struct device *dev, pm_message_t state)
 			return error;
 	}
 
-	if (pnp_can_disable(pnp_dev)) {
+	if (pnp_can_disable(pnp_dev) && !pnp_dev->protocol->suspend) {
 		error = pnp_stop_dev(pnp_dev);
 		if (error)
 			return error;
@@ -193,9 +193,7 @@ static int pnp_bus_resume(struct device *dev)
 		error = pnp_dev->protocol->resume(pnp_dev);
 		if (error)
 			return error;
-	}
-
-	if (pnp_can_write(pnp_dev)) {
+	} else if (pnp_can_write(pnp_dev)) {
 		error = pnp_start_dev(pnp_dev);
 		if (error)
 			return error;
-- 
1.9.1

