From a45f9f46ce99f2d62fee74dfb198acc5462f15bf Mon Sep 17 00:00:00 2001
From: Felipe Balbi <felipe.balbi@linux.intel.com>
Date: Tue, 5 Apr 2016 13:14:31 +0300
Subject: [PATCH 65/78] usb: dwc3: gadget: move % operation to increment
 helpers

By moving our % DWC3_NUM_TRB operation to the
increment helpers, the rest of the driver can be
simplified.

It's also a good practice to make sure we will have
a single place dealing with details about how to
increment our enqueue and dequeue pointers.

Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
(cherry picked from commit 4faf75504a7db790483aa419d8f61e58cec4934c)
Signed-off-by: Janusz Dziedzic <januszx.dziedzic@intel.com>

Change-Id: I3d14bb3ada14e5983ff71a579f1374ecc1cab5c8
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-19337
Reviewed-on: https://android.intel.com:443/511190
---
 drivers/usb/dwc3/gadget.c | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 6a1e00c..66df290 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -222,16 +222,18 @@ int dwc3_gadget_resize_tx_fifos(struct dwc3 *dwc)
 static void dwc3_ep_inc_enq(struct dwc3_ep *dep)
 {
 	dep->trb_enqueue++;
+	dep->trb_enqueue %= DWC3_TRB_NUM;
 }
 
 static void dwc3_ep_inc_deq(struct dwc3_ep *dep)
 {
 	dep->trb_dequeue++;
+	dep->trb_dequeue %= DWC3_TRB_NUM;
 }
 
 static int dwc3_ep_is_last_trb(unsigned int index)
 {
-	return (index % DWC3_TRB_NUM) == (DWC3_TRB_NUM - 1);
+	return index == DWC3_TRB_NUM - 1;
 }
 
 void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
@@ -800,13 +802,13 @@ static void dwc3_prepare_one_trb(struct dwc3_ep *dep,
 			chain ? " chain" : "");
 
 
-	trb = &dep->trb_pool[dep->trb_enqueue % DWC3_TRB_NUM];
+	trb = &dep->trb_pool[dep->trb_enqueue];
 
 	if (!req->trb) {
 		dwc3_gadget_move_started_request(req);
 		req->trb = trb;
 		req->trb_dma = dwc3_trb_dma_offset(dep, trb);
-		req->first_trb_index = dep->trb_enqueue % DWC3_TRB_NUM;
+		req->first_trb_index = dep->trb_enqueue;
 	}
 
 	dwc3_ep_inc_enq(dep);
@@ -885,11 +887,11 @@ static void dwc3_prepare_trbs(struct dwc3_ep *dep, bool starting)
 	BUILD_BUG_ON_NOT_POWER_OF_2(DWC3_TRB_NUM);
 
 	/* the first request must not be queued */
-	trbs_left = (dep->trb_dequeue - dep->trb_enqueue) % DWC3_TRB_NUM;
+	trbs_left = dep->trb_dequeue - dep->trb_enqueue;
 
 	/* Can't wrap around on a non-isoc EP since there's no link TRB */
 	if (!usb_endpoint_xfer_isoc(dep->endpoint.desc)) {
-		max = DWC3_TRB_NUM - (dep->trb_enqueue % DWC3_TRB_NUM);
+		max = DWC3_TRB_NUM - dep->trb_enqueue;
 		if (trbs_left > max)
 			trbs_left = max;
 	}
-- 
1.9.1

