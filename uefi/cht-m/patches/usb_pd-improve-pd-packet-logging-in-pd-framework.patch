From bd69d54e990a58e13f1632b6b34f3af47eb7b8ef Mon Sep 17 00:00:00 2001
From: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Date: Fri, 29 Jan 2016 19:41:02 +0530
Subject: [PATCH 13/24] usb_pd: improve pd packet logging in pd framework.

This patch provides helper functions for pd packet names
and adds pd packet logging in an user understandable way
from protocol layer.

Change-Id: I3638f4d150fa99341bf7bebfdbc3d9756d0d6279
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-18527
Signed-off-by: Venkataramana Kotakonda <venkataramana.kotakonda@intel.com>
Reviewed-on: https://android.intel.com:443/464163
---
 drivers/usb/typec/pd/message.h       | 59 ++++++++++++++++++++++++++++++++++++
 drivers/usb/typec/pd/policy_engine.c |  3 --
 drivers/usb/typec/pd/protocol.c      | 17 +++++++----
 3 files changed, 70 insertions(+), 9 deletions(-)

diff --git a/drivers/usb/typec/pd/message.h b/drivers/usb/typec/pd/message.h
index 1e768a2..c395cfa 100644
--- a/drivers/usb/typec/pd/message.h
+++ b/drivers/usb/typec/pd/message.h
@@ -360,4 +360,63 @@ static inline u32 pd_fixed_pdo_to_volt(u32 pdo)
 	return (pdo & 0x3ff) * 50;
 }
 
+static char *pd_data_msg_to_str(u8 msg)
+{
+	switch (msg) {
+	case PD_DATA_MSG_SRC_CAP:
+		return "PD_DATA_MSG_SRC_CAP";
+	case PD_DATA_MSG_REQUEST:
+		return "PD_DATA_MSG_REQUEST";
+	case PD_DATA_MSG_BIST:
+		return "PD_DATA_MSG_BIST";
+	case PD_DATA_MSG_SINK_CAP:
+		return "PD_DATA_MSG_SINK_CAP";
+	case PD_DATA_MSG_VENDOR_DEF:
+		return "PD_DATA_MSG_VENDOR_DEF";
+	default:
+		return "PD_DATA_MSG_INVALID/RESERVED";
+	}
+}
+
+static char *pd_ctrl_msg_to_str(u8 msg)
+{
+	switch (msg) {
+	case PD_CTRL_MSG_GOODCRC:
+		return "PD_CTRL_MSG_GOODCRC";
+	case PD_CTRL_MSG_GOTOMIN:
+		return "PD_CTRL_MSG_GOTOMIN";
+	case PD_CTRL_MSG_ACCEPT:
+		return "PD_CTRL_MSG_ACCEPT";
+	case PD_CTRL_MSG_REJECT:
+		return "PD_CTRL_MSG_REJECT";
+	case PD_CTRL_MSG_PING:
+		return "PD_CTRL_MSG_PING";
+	case PD_CTRL_MSG_PS_RDY:
+		return "PD_CTRL_MSG_PS_RDY";
+	case PD_CTRL_MSG_GET_SRC_CAP:
+		return "PD_CTRL_MSG_GET_SRC_CAP";
+	case PD_CTRL_MSG_GET_SINK_CAP:
+		return "PD_CTRL_MSG_GET_SINK_CAP";
+	case PD_CTRL_MSG_DR_SWAP:
+		return "PD_CTRL_MSG_DR_SWAP";
+	case PD_CTRL_MSG_PR_SWAP:
+		return "PD_CTRL_MSG_PR_SWAP";
+	case PD_CTRL_MSG_VCONN_SWAP:
+		return "PD_CTRL_MSG_VCONN_SWAP";
+	case PD_CTRL_MSG_WAIT:
+		return "PD_CTRL_MSG_WAIT";
+	case PD_CTRL_MSG_SOFT_RESET:
+		return "PD_CTRL_MSG_SOFT_RESET";
+	default:
+		return "PD_CTRL_MSG_INVALID/RESERVED";
+	}
+}
+
+static inline char *pd_msg_to_str(u8 msg, int len)
+{
+	if (len)
+		return pd_data_msg_to_str(msg);
+	return pd_ctrl_msg_to_str(msg);
+}
+
 #endif /* __PD_MESSAGE_H__ */
diff --git a/drivers/usb/typec/pd/policy_engine.c b/drivers/usb/typec/pd/policy_engine.c
index 84ace5d..92abb45 100644
--- a/drivers/usb/typec/pd/policy_engine.c
+++ b/drivers/usb/typec/pd/policy_engine.c
@@ -167,7 +167,6 @@ static int policy_engine_process_data_msg(struct policy *p, enum pe_event evt,
 	struct policy_engine *pe = container_of(p, struct policy_engine, p);
 	int data_len = PD_MSG_NUM_DATA_OBJS(&pkt->header);
 
-	log_dbg("Data msg received evt - %d\n", evt);
 	if (sop_type == PKT_TYPE_SOP_P
 		&& pe->cur_state != PE_SRC_VDM_IDENTITY_REQUEST) {
 		log_dbg("Ignore SOPP pkt in state=%d", pe->cur_state);
@@ -398,7 +397,6 @@ static int policy_engine_process_ctrl_msg(struct policy *p, enum pe_event evt,
 	int ret = 0;
 	struct policy_engine *pe = container_of(p, struct policy_engine, p);
 
-	log_dbg("Ctrl msg received evt - %d\n", evt);
 	if (sop_type != PKT_TYPE_SOP) {
 		log_dbg("Not an SOP packet, ignore");
 		return -EINVAL;
@@ -752,7 +750,6 @@ int pe_send_packet(struct policy_engine *pe, void *data, int len,
 
 	/* Send the pd_packet to protocol */
 	pe->is_gcrc_received = false;
-	log_dbg("Sending pkt, evt=%d", evt);
 	if (pe->p.prot && pe->p.prot->policy_fwd_pkt)
 		pe->p.prot->policy_fwd_pkt(pe->p.prot, msg_type, data,
 			len, type);
diff --git a/drivers/usb/typec/pd/protocol.c b/drivers/usb/typec/pd/protocol.c
index a3719d7..64002e4 100644
--- a/drivers/usb/typec/pd/protocol.c
+++ b/drivers/usb/typec/pd/protocol.c
@@ -37,7 +37,6 @@ struct prot_msg {
 	enum pd_pkt_type sop_type;
 };
 
-
 static int pd_ctrl_msg(struct pd_prot *pd, u8 msg_type, u8 msg_id)
 {
 	struct pd_packet *buf = &pd->tx_buf;
@@ -196,8 +195,10 @@ static int pd_prot_rcv_pkt_from_policy(struct pd_prot *prot, u8 msg_type,
 
 	if (msg_type == PD_CMD_HARD_RESET) {
 		pd_prot_reset_protocol(prot);
+		pr_debug("%s: Sending HARD_RESET\n", __func__);
 		return pd_prot_reset_phy(prot);
 	} else if (msg_type == PD_CMD_PROTOCOL_RESET) {
+		pr_debug("%s: PROTOCOL_RESET\n", __func__);
 		pd_prot_reset_protocol(prot);
 		return pd_tx_fsm_state(prot, PROT_TX_PHY_LAYER_RESET);
 	} else if (msg_type == PD_CTRL_MSG_SOFT_RESET) {
@@ -248,9 +249,10 @@ static int pd_prot_rcv_pkt_from_policy(struct pd_prot *prot, u8 msg_type,
 	pkt->header.num_data_obj = len / 4;
 	memcpy((u8 *)pkt + sizeof(struct pd_pkt_header), buf, len);
 
+	pr_debug("%s: Sending pkt, msg=%s, msg_id=%d\n", __func__,
+			pd_msg_to_str(msg_type, len), pkt->header.msg_id);
 	pd_prot_send_phy_packet(prot, &prot->tx_buf,
 		len + PD_MSG_HEADER_SIZE, type);
-
 	return 0;
 }
 
@@ -467,7 +469,6 @@ static void pd_prot_phy_rcv(struct pd_prot *pd)
 	enum pd_pkt_type type = 0;
 
 	mutex_lock(&pd->rx_data_lock);
-
 	memset(&rcv_buf, 0, sizeof(struct pd_packet));
 	len = pd_prot_recv_phy_packet(pd, &rcv_buf, &type);
 	if (len == 0)
@@ -477,15 +478,19 @@ static void pd_prot_phy_rcv(struct pd_prot *pd)
 		goto phy_rcv_end;
 
 	msg_type = PD_MSG_TYPE(&rcv_buf.header);
+	if (msg_type == PD_CTRL_MSG_RESERVED_0)
+		goto phy_rcv_end;
+
+	pr_debug("%s: Received msg=%s, msg_id=%d\n", __func__,
+			pd_msg_to_str(rcv_buf.header.msg_type,
+			rcv_buf.header.num_data_obj),
+			rcv_buf.header.msg_id);
 	if (!pd->is_pd_enabled) {
 		dev_dbg(pd->phy->dev, "%s:PD disabled, Ignore the pkt=%d\n",
 					__func__, msg_type);
 		goto phy_rcv_end;
 	}
 
-	if (msg_type == PD_CTRL_MSG_RESERVED_0)
-		goto phy_rcv_end;
-
 	msg_id = PD_MSG_ID(&rcv_buf.header);
 	send_good_crc = 1;
 
-- 
1.9.1

