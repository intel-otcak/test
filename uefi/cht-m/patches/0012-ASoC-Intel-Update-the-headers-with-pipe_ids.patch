From 340da68ffa69c76bac0a300750a386e1118d068f Mon Sep 17 00:00:00 2001
From: Samreen Nilofer <samreen.nilofer@intel.com>
Date: Thu, 19 Feb 2015 11:15:49 +0530
Subject: [PATCH 12/24] ASoC: Intel: Update the headers with pipe_ids

Issue: GMINL-4319

Add reserved field in the private data for future use.
Changed the file name from sst_vendor.h to sst_v2_vendor.h

Change-Id: If7aef540f46af691ee926660674b93e78c90cdff
Signed-off-by: Samreen Nilofer <samreen.nilofer@intel.com>
---
 include/uapi/sound/Kbuild                        |   1 +
 include/uapi/sound/sst_v2_vendor.h               | 205 ++++++++++++++++
 sound/soc/intel/platform-libs/atom_controls.h    | 183 ++++++++++++++
 sound/soc/intel/platform-libs/atom_pipes.h       | 291 +++++++++++++++++++++++
 sound/soc/intel/platform-libs/controls_v2_dpcm.c |   1 +
 sound/soc/intel/platform-libs/controls_v2_dpcm.h | 228 +-----------------
 sound/soc/intel/platform-libs/sst_vendor.h       | 197 ---------------
 sound/soc/intel/platform-libs/sst_widgets.h      |   2 +-
 8 files changed, 686 insertions(+), 422 deletions(-)
 create mode 100644 include/uapi/sound/sst_v2_vendor.h
 create mode 100644 sound/soc/intel/platform-libs/atom_controls.h
 create mode 100644 sound/soc/intel/platform-libs/atom_pipes.h
 delete mode 100644 sound/soc/intel/platform-libs/sst_vendor.h

diff --git a/include/uapi/sound/Kbuild b/include/uapi/sound/Kbuild
index a7f2770..96f2812 100644
--- a/include/uapi/sound/Kbuild
+++ b/include/uapi/sound/Kbuild
@@ -10,3 +10,4 @@ header-y += hdsp.h
 header-y += hdspm.h
 header-y += sb16_csp.h
 header-y += sfnt_info.h
+header-y += sst_v2_vendor.h
diff --git a/include/uapi/sound/sst_v2_vendor.h b/include/uapi/sound/sst_v2_vendor.h
new file mode 100644
index 0000000..e7683ce
--- /dev/null
+++ b/include/uapi/sound/sst_v2_vendor.h
@@ -0,0 +1,205 @@
+/*
+ *  sst_v2_vendor.h - Intel sst fw private data
+ *
+ *  Copyright (C) 2014 Intel Corp
+ *  Author: Subhransu S. Prusty<subhransu.s.prusty@intel.com>
+ *  Author: Mythri P K <mythri.p.k@intel.com>
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ */
+
+#ifndef __SST_V2_VENDOR_H__
+#define __SST_V2_VENDOR_H__
+
+#include <linux/types.h>
+
+#define SST_V2_PLUGIN_VERSION 0x2
+
+/* Default types range from 0~12. type can range from 0 to 0xff
+ * SST types start at higher to avoid any overlapping in future */
+
+#define SOC_CONTROL_TYPE_SST_GAIN		100
+#define SOC_CONTROL_TYPE_SST_MUTE		101
+#define SOC_CONTROL_TYPE_SST_ALGO_PARAMS	102
+#define SOC_CONTROL_TYPE_SST_ALGO_BYPASS	103
+#define SOC_CONTROL_TYPE_SST_MUX			104
+#define SOC_CONTROL_TYPE_SST_MIX			106
+#define SOC_CONTROL_TYPE_SST_BYTE           108
+#define SOC_CONTROL_TYPE_SST_MODE           109
+#define SOC_CONTROL_TYPE_SST_VOICE_MODE           110
+
+/* REVISIT: Define sst kcontrol index */
+#define SOC_CONTROL_IO_SST_GAIN\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_GAIN, \
+		SOC_CONTROL_TYPE_SST_GAIN, \
+		SOC_CONTROL_TYPE_VOLSW)
+
+#define SOC_CONTROL_IO_SST_MUTE\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_GAIN, \
+		SOC_CONTROL_TYPE_SST_GAIN, \
+		SOC_CONTROL_TYPE_BOOL_EXT)
+
+#define SOC_CONTROL_IO_SST_ALGO_PARAMS\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_BYTES_EXT)
+
+
+#define SOC_CONTROL_IO_SST_ALGO_BYPASS\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
+		SOC_CONTROL_TYPE_BOOL_EXT)
+
+#define SOC_CONTROL_IO_SST_MIX\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_MIX, \
+		SOC_CONTROL_TYPE_SST_MIX, \
+		SOC_CONTROL_TYPE_VOLSW)
+
+#define SOC_CONTROL_IO_SST_MUX\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_MUX, \
+		SOC_CONTROL_TYPE_SST_MUX, \
+		SOC_CONTROL_TYPE_SST_MUX)
+
+#define SOC_CONTROL_IO_SST_BYTE\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_BYTE, \
+		SOC_CONTROL_TYPE_SST_BYTE, \
+		SOC_CONTROL_TYPE_SST_BYTE)
+
+#define SOC_CONTROL_IO_SST_MODE\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_MODE, \
+		SOC_CONTROL_TYPE_SST_MODE, \
+		SOC_CONTROL_TYPE_SST_MODE)
+
+#define SOC_CONTROL_IO_SST_VOICE_MODE\
+	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_VOICE_MODE, \
+		SOC_CONTROL_TYPE_SST_VOICE_MODE, \
+		SOC_CONTROL_TYPE_SST_VOICE_MODE)
+
+#define SND_SOC_GAIN_CONTROL_NAME 44
+
+/* Event types goes here */
+/* Reserve event type 0 for no event handlers */
+enum sst_event_types {
+	SST_EVENT_TYPE_NONE = 0,
+	SST_HOSTLESS_STREAM,
+	SST_SET_BE_MODULE,
+	SST_SET_MEDIA_PATH,
+	SST_SET_MEDIA_LOOP,
+	SST_SET_TONE_GEN,
+	SST_SET_SPEECH_PATH,
+	SST_SET_SWM,
+	SST_EVENT_AWARE,
+	SST_SET_LINKED_PATH,
+	SST_SET_GENERIC_MODULE_EVENT,
+	SST_EVENT_VTSV,
+};
+
+enum sst_vendor_type {
+	SND_SOC_FW_SST_CONTROLS = 0x1000,
+	SND_SOC_FW_SST_WIDGETS,
+};
+
+enum sst_gain_kcontrol_type {
+	SST_GAIN_TLV,
+	SST_GAIN_MUTE,
+	SST_GAIN_RAMP_DURATION,
+};
+
+struct sst_dfw_gain_data {
+	__s32 max;
+	__s32 min;
+	__u32 type;
+	__u32 gain_val_index;
+	__u32 reserved;	/* reserved */
+	__u16 instance_id;
+	__u16 module_id;
+	__u16 pipe_id;
+	__u16 task_id;
+	__u16 ramp_duration;
+	__s16 l_gain;
+	__s16 r_gain;
+	__u8 mute;
+	__u8 stereo;
+	char pname[SND_SOC_GAIN_CONTROL_NAME];
+} __attribute__((packed));
+
+enum sst_algo_kcontrol_type {
+	SST_ALGO_PARAMS,
+	SST_ALGO_BYPASS,
+};
+
+struct sst_dfw_algo_data {
+	__s32 max;
+	__u32 type;
+	__u32 reserved; /* reserved */
+	__u16 module_id;
+	__u16 pipe_id;
+	__u16 task_id;
+	__u16 cmd_id;
+	__u8 bypass;
+	char params[0];
+	/* params will be in driver's pvt structure */
+} __attribute__((packed));
+
+struct sst_dfw_ids {
+	__u32 sample_bits;        /* sst_pcm_format->sample_bits */
+	__u32 rate_min;           /* sst_pcm_format-> rate_min */
+	__u32 rate_max;           /* sst_pcm_format->rate_max */
+	__u32 channels_min;       /* sst_pcm_format->channels_min */
+	__u32 channels_max;       /* sst_pcm_format->channels_max */
+	__u32 reserved;		/* reserved */
+	__u16 location_id;
+	__u16 module_id;
+	__u8  task_id;
+	__u8  format;             /* stereo/mono */
+	__u8  reg;
+	char parent_wname[SND_SOC_GAIN_CONTROL_NAME];
+} __attribute__((packed));
+
+#if 0
+/* sst_fw_config: FW config data organization
+ * For vendor specific:
+ *	hdr_xxx->size: data following header in bytes
+ *	hdr_xxx->type:
+ *		ex: SND_SOC_FW_MIXER, SND_SOC_FW_DAPM_WIDGET,...
+ *	hdr_xxx->venodr_type: SND_SOC_FW_SST_CONTROLS, SND_SOC_FW_SST_WIDGETS
+ *
+ * For Generic:
+ *	hdr_xxx->type: generic types for
+ *		ex: SND_SOC_FW_MIXER, SND_SOC_FW_DAPM_WIDGET,...
+ *
+ *	hdr_xxx->vendor_type: 0
+ */
+struct sst_fw_config {
+	struct snd_soc_fw_hdr hdr_controls;
+	struct snd_soc_fw_kcontrol num_controls;
+	struct snd_soc_fw_gain_control gain_control[];
+	struct snd_soc_fw_algo_control algo_control[];
+	struct snd_soc_fw_slot_control slot_control[];
+	struct snd_soc_fw_mux_control mux_control[];
+	struct snd_soc_fw_probe_control probe_control[];
+
+	struct snd_soc_fw_hdr hdr_gen;	/* generic control types */
+	struct snd_soc_fw_kcontrol num_gen_control;
+	struct snd_soc_fw_mixer_control gen_mixer_control[];
+
+	/* TODO: Add widgets */
+	struct snd_soc_fw_hdr hdr_widgets;
+	struct snd_soc_fw_dapm_elems num_widgets;
+	struct snd_soc_fw_aifin_widget aifin_widget[];
+
+	/* TODO: Add intercon */
+} __packed;
+#endif
+
+#endif /* __SST_V2_VENDOR_H__ */
diff --git a/sound/soc/intel/platform-libs/atom_controls.h b/sound/soc/intel/platform-libs/atom_controls.h
new file mode 100644
index 0000000..8dea361
--- /dev/null
+++ b/sound/soc/intel/platform-libs/atom_controls.h
@@ -0,0 +1,183 @@
+/*
+ *  atom_controls.h - Intel MID Platform controls header file
+ *
+ *  Copyright (C) 2014 Intel Corp
+ *  Author: Ramesh Babu <ramesh.babu@intel.com>
+ *  Author: Omair M Abdullah <omair.m.abdullah@intel.com>
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ */
+
+#ifndef __ATOM_CONTROLS_H__
+#define __ATOM_CONTROLS_H__
+
+/*
+ * This section defines the map for the mixer widgets.
+ *
+ * Each mixer will be represented by single value and that value will have each
+ * bit corresponding to one input
+ *
+ * Each out_id will correspond to one mixer and one path. Each input will be
+ * represented by single bit in the register.
+ */
+
+/* mixer register ids here */
+#define SST_MIX(x)		(x)
+
+#define SST_MIX_MODEM		SST_MIX(0)
+#define SST_MIX_BT		SST_MIX(1)
+#define SST_MIX_CODEC0		SST_MIX(2)
+#define SST_MIX_CODEC1		SST_MIX(3)
+#define SST_MIX_LOOP0		SST_MIX(4)
+#define SST_MIX_LOOP1		SST_MIX(5)
+#define SST_MIX_LOOP2		SST_MIX(6)
+#define SST_MIX_PROBE		SST_MIX(7)
+#define SST_MIX_HF_SNS		SST_MIX(8)
+#define SST_MIX_HF		SST_MIX(9)
+#define SST_MIX_SPEECH		SST_MIX(10)
+#define SST_MIX_RXSPEECH	SST_MIX(11)
+#define SST_MIX_VOIP		SST_MIX(12)
+#define SST_MIX_PCM0		SST_MIX(13)
+#define SST_MIX_PCM1		SST_MIX(14)
+#define SST_MIX_PCM2		SST_MIX(15)
+#define SST_MIX_AWARE		SST_MIX(16)
+#define SST_MIX_VAD		SST_MIX(17)
+#define SST_MIX_FM		SST_MIX(18)
+
+#define SST_MIX_MEDIA0		SST_MIX(19)
+#define SST_MIX_MEDIA1		SST_MIX(20)
+
+#define SST_NUM_MIX		(SST_MIX_MEDIA1 + 1)
+
+#define SST_MIX_SWITCH		(SST_NUM_MIX + 1)
+#define SST_OUT_SWITCH		(SST_NUM_MIX + 2)
+#define SST_IN_SWITCH		(SST_NUM_MIX + 3)
+#define SST_MUX_REG		(SST_NUM_MIX + 4)
+#define SST_REG_LAST		(SST_MUX_REG)
+
+/* last entry defines array size */
+#define SST_NUM_WIDGETS		(SST_REG_LAST + 1)
+
+/* in each mixer register we will define one bit for each input */
+#define SST_MIX_IP(x)		(x)
+
+#define SST_IP_MODEM		SST_MIX_IP(0)
+#define SST_IP_BT		SST_MIX_IP(1)
+#define SST_IP_CODEC0		SST_MIX_IP(2)
+#define SST_IP_CODEC1		SST_MIX_IP(3)
+#define SST_IP_LOOP0		SST_MIX_IP(4)
+#define SST_IP_LOOP1		SST_MIX_IP(5)
+#define SST_IP_LOOP2		SST_MIX_IP(6)
+#define SST_IP_PROBE		SST_MIX_IP(7)
+#define SST_IP_SIDETONE		SST_MIX_IP(8)
+#define SST_IP_TXSPEECH		SST_MIX_IP(9)
+#define SST_IP_SPEECH		SST_MIX_IP(10)
+#define SST_IP_TONE		SST_MIX_IP(11)
+#define SST_IP_VOIP		SST_MIX_IP(12)
+#define SST_IP_PCM0		SST_MIX_IP(13)
+#define SST_IP_PCM1		SST_MIX_IP(14)
+#define SST_IP_LOW_PCM0		SST_MIX_IP(15)
+#define SST_IP_FM		SST_MIX_IP(16)
+#define SST_IP_MEDIA0		SST_MIX_IP(17)
+#define SST_IP_MEDIA1		SST_MIX_IP(18)
+#define SST_IP_MEDIA2		SST_MIX_IP(19)
+#define SST_IP_MEDIA3		SST_MIX_IP(20)
+
+#define SST_IP_LAST		SST_IP_MEDIA3
+
+#define SST_SWM_INPUT_COUNT	(SST_IP_LAST + 1)
+#define SST_CMD_SWM_MAX_INPUTS	6
+
+enum sst_ipc_msg {
+	SST_IPC_IA_CMD = 1,
+	SST_IPC_IA_SET_PARAMS,
+	SST_IPC_IA_GET_PARAMS,
+};
+
+enum sst_cmd_type {
+	SST_CMD_BYTES_SET = 1,
+	SST_CMD_BYTES_GET = 2,
+};
+
+enum sst_task {
+	SST_TASK_SBA = 1,
+	SST_TASK_FBA_UL,
+	SST_TASK_MMX,
+	SST_TASK_AWARE,
+	SST_TASK_FBA_DL,
+};
+
+enum sst_type {
+	SST_TYPE_CMD = 1,
+	SST_TYPE_PARAMS,
+};
+
+enum sst_flag {
+	SST_FLAG_BLOCKED = 1,
+	SST_FLAG_NONBLOCK,
+};
+
+enum sst_cmd {
+	SBA_IDLE		= 14,
+	SBA_VB_SET_SPEECH_PATH	= 26,
+	MMX_SET_GAIN		= 33,
+	SBA_VB_SET_GAIN		= 33,
+	FBA_VB_RX_CNI		= 35,
+	MMX_SET_GAIN_TIMECONST	= 36,
+	SBA_VB_SET_TIMECONST	= 36,
+	FBA_VB_ANA		= 37,
+	FBA_VB_SET_FIR		= 38,
+	FBA_VB_SET_IIR		= 39,
+	SBA_VB_START_TONE	= 41,
+	SBA_VB_STOP_TONE	= 42,
+	FBA_VB_AEC		= 47,
+	FBA_VB_NR_UL		= 48,
+	FBA_VB_AGC		= 49,
+	FBA_VB_WNR		= 52,
+	FBA_VB_SLV		= 53,
+	FBA_VB_NR_DL		= 55,
+	SBA_PROBE		= 66,
+	MMX_PROBE		= 66,
+	FBA_VB_SET_BIQUAD_D_C	= 69,
+	FBA_VB_DUAL_BAND_COMP	= 70,
+	FBA_VB_SNS		= 72,
+	FBA_VB_SER		= 78,
+	FBA_VB_TX_CNI		= 80,
+	SBA_VB_START		= 85,
+	FBA_VB_SET_REF_LINE	= 94,
+	FBA_VB_SET_DELAY_LINE	= 95,
+	FBA_VB_BWX		= 104,
+	FBA_VB_GMM		= 105,
+	FBA_VB_GLC		= 107,
+	FBA_VB_BMF		= 111,
+	FBA_VB_DNR		= 113,
+	MMX_SET_SWM		= 114,
+	SBA_SET_SWM		= 114,
+	SBA_SET_MDRP            = 116,
+	SBA_HW_SET_SSP		= 117,
+	SBA_SET_MEDIA_LOOP_MAP	= 118,
+	SBA_SET_MEDIA_PATH	= 119,
+	MMX_SET_MEDIA_PATH	= 119,
+	FBA_VB_TNR_UL		= 119,
+	FBA_VB_TNR_DL		= 121,
+	FBA_VB_NLF		= 125,
+	SBA_VB_LPRO		= 126,
+	FBA_VB_MDRP		= 127,
+	SBA_VB_SET_FIR          = 128,
+	SBA_VB_SET_IIR          = 129,
+	SBA_SET_SSP_SLOT_MAP	= 130,
+	AWARE_ENV_CLASS_PARAMS	= 130,
+	VAD_ENV_CLASS_PARAMS	= 2049,
+};
+#endif /* __ATOM_CONTROLS_H__ */
diff --git a/sound/soc/intel/platform-libs/atom_pipes.h b/sound/soc/intel/platform-libs/atom_pipes.h
new file mode 100644
index 0000000..a4e96d7
--- /dev/null
+++ b/sound/soc/intel/platform-libs/atom_pipes.h
@@ -0,0 +1,291 @@
+/*
+ *  atom_pipes.h - Intel MID Platform pipes header file
+ *
+ *  Copyright (C) 2014 Intel Corp
+ *  Author: Ramesh Babu <ramesh.babu@intel.com>
+ *  Author: Omair M Abdullah <omair.m.abdullah@intel.com>
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ */
+
+#ifndef __ATOM_PIPES_H__
+#define __ATOM_PIPES_H__
+
+#define SST_DFW_PATH_ID_SHIFT		8
+#define SST_DFW_DEFAULT_CELL_NBR	0xFF
+
+/*
+ * Audio DSP Path Ids. Specified by the audio DSP FW
+ */
+enum sst_dfw_path_index {
+	SST_DFW_PATH_INDEX_MODEM_OUT	      = (0x00 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_BT_OUT	      = (0x01 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_CODEC_OUT0	      = (0x02 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_CODEC_OUT1	      = (0x03 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_SPROT_LOOP_OUT     = (0x04 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_MEDIA_LOOP1_OUT    = (0x05 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_MEDIA_LOOP2_OUT    = (0x06 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE_OUT	      = (0x07 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_HF_SNS_OUT	      = (0x08 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_VOICE_UPLINK_REF2  = (0x08 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_HF_OUT	      = (0x09 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_VOICE_UPLINK_REF1  = (0x09 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_SPEECH_OUT	      = (0x0A << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_VOICE_UPLINK	      = (0x0A << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_RX_SPEECH_OUT      = (0x0B << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_VOICE_DOWNLINK     = (0x0B << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_VOIP_OUT	      = (0x0C << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PCM0_OUT	      = (0x0D << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PCM1_OUT	      = (0x0E << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PCM2_OUT	      = (0x0F << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_AWARE_OUT	      = (0x10 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_VAD_OUT	      = (0x11 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_MEDIA0_OUT	      = (0x12 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_MEDIA1_OUT	      = (0x13 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_FM_OUT	      = (0x14 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_PROBE1_PIPE_OUT    = (0x15 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE2_PIPE_OUT    = (0x16 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE3_PIPE_OUT    = (0x17 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE4_PIPE_OUT    = (0x18 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE5_PIPE_OUT    = (0x19 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE6_PIPE_OUT    = (0x1A << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE7_PIPE_OUT    = (0x1B << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE8_PIPE_OUT    = (0x1C << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_SIDETONE_OUT	      = (0x1D << SST_DFW_PATH_ID_SHIFT),
+
+	/* Start of input paths */
+	SST_DFW_PATH_INDEX_MODEM_IN	      = (0x80 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_BT_IN	      = (0x81 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_CODEC_IN0	      = (0x82 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_CODEC_IN1	      = (0x83 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_SPROT_LOOP_IN      = (0x84 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_MEDIA_LOOP1_IN     = (0x85 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_MEDIA_LOOP2_IN     = (0x86 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_PROBE_IN	      = (0x87 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_SIDETONE_IN	      = (0x88 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_TX_SPEECH_IN	      = (0x89 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_SPEECH_IN	      = (0x8A << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_TONE_IN	      = (0x8B << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_VOIP_IN	      = (0x8C << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_PCM0_IN	      = (0x8D << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PCM1_IN	      = (0x8E << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_MEDIA0_IN	      = (0x8F << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_MEDIA1_IN	      = (0x90 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_MEDIA2_IN	      = (0x91 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_FM_IN	      = (0x92 << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_PROBE1_PIPE_IN     = (0x93 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE2_PIPE_IN     = (0x94 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE3_PIPE_IN     = (0x95 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE4_PIPE_IN     = (0x96 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE5_PIPE_IN     = (0x97 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE6_PIPE_IN     = (0x98 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE7_PIPE_IN     = (0x99 << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_PROBE8_PIPE_IN     = (0x9A << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_MEDIA3_IN	      = (0x9C << SST_DFW_PATH_ID_SHIFT),
+	SST_DFW_PATH_INDEX_LOW_PCM0_IN	      = (0x9D << SST_DFW_PATH_ID_SHIFT),
+
+	SST_DFW_PATH_INDEX_RESERVED	      = (0xFF << SST_DFW_PATH_ID_SHIFT),
+};
+
+/*
+ * switch matrix input path IDs
+ */
+enum sst_dfw_swm_inputs {
+	SST_DFW_SWM_IN_MODEM		= (SST_DFW_PATH_INDEX_MODEM_IN	    |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_BT		= (SST_DFW_PATH_INDEX_BT_IN	    |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_CODEC0		= (SST_DFW_PATH_INDEX_CODEC_IN0	    |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_CODEC1		= (SST_DFW_PATH_INDEX_CODEC_IN1     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_SPROT_LOOP	= (SST_DFW_PATH_INDEX_SPROT_LOOP_IN |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_MEDIA_LOOP1	= (SST_DFW_PATH_INDEX_MEDIA_LOOP1_IN |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_MEDIA_LOOP2	= (SST_DFW_PATH_INDEX_MEDIA_LOOP2_IN |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_PROBE		= (SST_DFW_PATH_INDEX_PROBE_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_SIDETONE		= (SST_DFW_PATH_INDEX_SIDETONE_IN    |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_TXSPEECH		= (SST_DFW_PATH_INDEX_TX_SPEECH_IN   |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_SPEECH		= (SST_DFW_PATH_INDEX_SPEECH_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_TONE		= (SST_DFW_PATH_INDEX_TONE_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_VOIP		= (SST_DFW_PATH_INDEX_VOIP_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_PCM0		= (SST_DFW_PATH_INDEX_PCM0_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_PCM1		= (SST_DFW_PATH_INDEX_PCM1_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_MEDIA0		= (SST_DFW_PATH_INDEX_MEDIA0_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_MEDIA1		= (SST_DFW_PATH_INDEX_MEDIA1_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_MEDIA2		= (SST_DFW_PATH_INDEX_MEDIA2_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_FM		= (SST_DFW_PATH_INDEX_FM_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_MEDIA3		= (SST_DFW_PATH_INDEX_MEDIA3_IN	     |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_LOW_PCM0		= (SST_DFW_PATH_INDEX_LOW_PCM0_IN    |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_IN_END		= (SST_DFW_PATH_INDEX_RESERVED	     |
+						SST_DFW_DEFAULT_CELL_NBR)
+};
+
+/*
+ * switch matrix output path IDs
+ */
+enum sst_dfw_swm_outputs {
+	SST_DFW_SWM_OUT_MODEM		= (SST_DFW_PATH_INDEX_MODEM_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_BT		= (SST_DFW_PATH_INDEX_BT_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_CODEC0		= (SST_DFW_PATH_INDEX_CODEC_OUT0      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_CODEC1		= (SST_DFW_PATH_INDEX_CODEC_OUT1      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_SPROT_LOOP	= (SST_DFW_PATH_INDEX_SPROT_LOOP_OUT  |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_MEDIA_LOOP1	= (SST_DFW_PATH_INDEX_MEDIA_LOOP1_OUT |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_MEDIA_LOOP2	= (SST_DFW_PATH_INDEX_MEDIA_LOOP2_OUT |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_PROBE		= (SST_DFW_PATH_INDEX_PROBE_OUT       |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_HF_SNS		= (SST_DFW_PATH_INDEX_HF_SNS_OUT      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_HF		= (SST_DFW_PATH_INDEX_HF_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_SPEECH		= (SST_DFW_PATH_INDEX_SPEECH_OUT      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_RXSPEECH	= (SST_DFW_PATH_INDEX_RX_SPEECH_OUT   |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_VOIP		= (SST_DFW_PATH_INDEX_VOIP_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_PCM0		= (SST_DFW_PATH_INDEX_PCM0_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_PCM1		= (SST_DFW_PATH_INDEX_PCM1_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_PCM2		= (SST_DFW_PATH_INDEX_PCM2_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_AWARE		= (SST_DFW_PATH_INDEX_AWARE_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_VAD		= (SST_DFW_PATH_INDEX_VAD_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_MEDIA0		= (SST_DFW_PATH_INDEX_MEDIA0_OUT      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_MEDIA1		= (SST_DFW_PATH_INDEX_MEDIA1_OUT      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_FM		= (SST_DFW_PATH_INDEX_FM_OUT	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+	SST_DFW_SWM_OUT_END		= (SST_DFW_PATH_INDEX_RESERVED	      |
+						SST_DFW_DEFAULT_CELL_NBR),
+};
+
+/*
+ * Audio DSP module IDs specified by FW spec
+ * TODO: Update with all modules
+ */
+enum sst_dfw_module_id {
+	SST_DFW_MODULE_ID_PCM		  = 0x0001,
+	SST_DFW_MODULE_ID_MP3		  = 0x0002,
+	SST_DFW_MODULE_ID_MP24		  = 0x0003,
+	SST_DFW_MODULE_ID_AAC		  = 0x0004,
+	SST_DFW_MODULE_ID_AACP		  = 0x0005,
+	SST_DFW_MODULE_ID_EAACP		  = 0x0006,
+	SST_DFW_MODULE_ID_WMA9		  = 0x0007,
+	SST_DFW_MODULE_ID_WMA10		  = 0x0008,
+	SST_DFW_MODULE_ID_WMA10P	  = 0x0009,
+	SST_DFW_MODULE_ID_RA		  = 0x000A,
+	SST_DFW_MODULE_ID_DDAC3		  = 0x000B,
+	SST_DFW_MODULE_ID_TRUE_HD	  = 0x000C,
+	SST_DFW_MODULE_ID_HD_PLUS	  = 0x000D,
+
+	SST_DFW_MODULE_ID_SRC		  = 0x0064,
+	SST_DFW_MODULE_ID_DOWNMIX	  = 0x0066,
+	SST_DFW_MODULE_ID_GAIN_CELL	  = 0x0067,
+	SST_DFW_MODULE_ID_SPROT		  = 0x006D,
+	SST_DFW_MODULE_ID_BASS_BOOST	  = 0x006E,
+	SST_DFW_MODULE_ID_STEREO_WDNG	  = 0x006F,
+	SST_DFW_MODULE_ID_AV_REMOVAL	  = 0x0070,
+	SST_DFW_MODULE_ID_MIC_EQ	  = 0x0071,
+	SST_DFW_MODULE_ID_SPL		  = 0x0072,
+	SST_DFW_MODULE_ID_ALGO_VTSV	  = 0x0073,
+	SST_DFW_MODULE_ID_NR		  = 0x0076,
+	SST_DFW_MODULE_ID_BWX		  = 0x0077,
+	SST_DFW_MODULE_ID_DRP		  = 0x0078,
+	SST_DFW_MODULE_ID_MDRP		  = 0x0079,
+
+	SST_DFW_MODULE_ID_ANA		  = 0x007A,
+	SST_DFW_MODULE_ID_AEC		  = 0x007B,
+	SST_DFW_MODULE_ID_NR_SNS	  = 0x007C,
+	SST_DFW_MODULE_ID_SER		  = 0x007D,
+	SST_DFW_MODULE_ID_AGC		  = 0x007E,
+
+	SST_DFW_MODULE_ID_CNI		  = 0x007F,
+	SST_DFW_MODULE_ID_CONTEXT_ALGO_AWARE  = 0x0080,
+	SST_DFW_MODULE_ID_FIR_24	  = 0x0081,
+	SST_DFW_MODULE_ID_IIR_24	  = 0x0082,
+
+	SST_DFW_MODULE_ID_ASRC		  = 0x0083,
+	SST_DFW_MODULE_ID_TONE_GEN	  = 0x0084,
+	SST_DFW_MODULE_ID_BMF		  = 0x0086,
+	SST_DFW_MODULE_ID_EDL		  = 0x0087,
+	SST_DFW_MODULE_ID_GLC		  = 0x0088,
+
+	SST_DFW_MODULE_ID_FIR_16	  = 0x0089,
+	SST_DFW_MODULE_ID_IIR_16	  = 0x008A,
+	SST_DFW_MODULE_ID_DNR		  = 0x008B,
+
+	SST_DFW_MODULE_ID_VIRTUALIZER	  = 0x008C,
+	SST_DFW_MODULE_ID_VISUALIZATION	  = 0x008D,
+	SST_DFW_MODULE_ID_LOUDNESS_OPTIMIZER  = 0x008E,
+	SST_DFW_MODULE_ID_REVERBERATION	  = 0x008F,
+
+	SST_DFW_MODULE_ID_CNI_TX	  = 0x0090,
+	SST_DFW_MODULE_ID_REF_LINE	  = 0x0091,
+	SST_DFW_MODULE_ID_VOLUME	  = 0x0092,
+	SST_DFW_MODULE_ID_FILT_DCR	  = 0x0094,
+	SST_DFW_MODULE_ID_SLV		  = 0x009A,
+	SST_DFW_MODULE_ID_NLF		  = 0x009B,
+	SST_DFW_MODULE_ID_TNR		  = 0x009C,
+	SST_DFW_MODULE_ID_WNR		  = 0x009D,
+
+	SST_DFW_MODULE_ID_LOG		  = 0xFF00,
+
+	SST_DFW_MODULE_ID_TASK		  = 0xFFFF,
+};
+#endif /* __ATOM_PIPES_H__ */
diff --git a/sound/soc/intel/platform-libs/controls_v2_dpcm.c b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
index 105b05d..2bc8688 100644
--- a/sound/soc/intel/platform-libs/controls_v2_dpcm.c
+++ b/sound/soc/intel/platform-libs/controls_v2_dpcm.c
@@ -28,6 +28,7 @@
 #include "../platform_ipc_v2.h"
 #include "../sst_platform.h"
 #include "../sst_platform_pvt.h"
+#include "atom_controls.h"
 #include "controls_v2_dpcm.h"
 #include "sst_widgets.h"
 
diff --git a/sound/soc/intel/platform-libs/controls_v2_dpcm.h b/sound/soc/intel/platform-libs/controls_v2_dpcm.h
index 473130e..b104a68 100644
--- a/sound/soc/intel/platform-libs/controls_v2_dpcm.h
+++ b/sound/soc/intel/platform-libs/controls_v2_dpcm.h
@@ -22,86 +22,10 @@
 #ifndef __SST_CONTROLS_V2_DPCM_H__
 #define __SST_CONTROLS_V2_DPCM_H__
 
-/*
- * This section defines the map for the mixer widgets.
- *
- * Each mixer will be represented by single value and that value will have each
- * bit corresponding to one input
- *
- * Each out_id will correspond to one mixer and one path. Each input will be
- * represented by single bit in the register.
- */
-
-/* mixer register ids here */
-#define SST_MIX(x)		(x)
-
-#define SST_MIX_MODEM		SST_MIX(0)
-#define SST_MIX_BT		SST_MIX(1)
-#define SST_MIX_CODEC0		SST_MIX(2)
-#define SST_MIX_CODEC1		SST_MIX(3)
-#define SST_MIX_LOOP0		SST_MIX(4)
-#define SST_MIX_LOOP1		SST_MIX(5)
-#define SST_MIX_LOOP2		SST_MIX(6)
-#define SST_MIX_PROBE		SST_MIX(7)
-#define SST_MIX_HF_SNS		SST_MIX(8)
-#define SST_MIX_HF		SST_MIX(9)
-#define SST_MIX_SPEECH		SST_MIX(10)
-#define SST_MIX_RXSPEECH	SST_MIX(11)
-#define SST_MIX_VOIP		SST_MIX(12)
-#define SST_MIX_PCM0		SST_MIX(13)
-#define SST_MIX_PCM1		SST_MIX(14)
-#define SST_MIX_PCM2		SST_MIX(15)
-#define SST_MIX_AWARE		SST_MIX(16)
-#define SST_MIX_VAD		SST_MIX(17)
-#define SST_MIX_FM		SST_MIX(18)
-
-#define SST_MIX_MEDIA0		SST_MIX(19)
-#define SST_MIX_MEDIA1		SST_MIX(20)
-
-#define SST_NUM_MIX		(SST_MIX_MEDIA1 + 1)
-
-#define SST_MIX_SWITCH		(SST_NUM_MIX + 1)
-#define SST_OUT_SWITCH		(SST_NUM_MIX + 2)
-#define SST_IN_SWITCH		(SST_NUM_MIX + 3)
-#define SST_MUX_REG		(SST_NUM_MIX + 4)
-#define SST_REG_LAST		(SST_MUX_REG)
-
-/* last entry defines array size */
-#define SST_NUM_WIDGETS		(SST_REG_LAST + 1)
-
-/* in each mixer register we will define one bit for each input */
-#define SST_MIX_IP(x)		(x)
-
-#define SST_IP_MODEM		SST_MIX_IP(0)
-#define SST_IP_BT		SST_MIX_IP(1)
-#define SST_IP_CODEC0		SST_MIX_IP(2)
-#define SST_IP_CODEC1		SST_MIX_IP(3)
-#define SST_IP_LOOP0		SST_MIX_IP(4)
-#define SST_IP_LOOP1		SST_MIX_IP(5)
-#define SST_IP_LOOP2		SST_MIX_IP(6)
-#define SST_IP_PROBE		SST_MIX_IP(7)
-#define SST_IP_SIDETONE		SST_MIX_IP(8)
-#define SST_IP_TXSPEECH		SST_MIX_IP(9)
-#define SST_IP_SPEECH		SST_MIX_IP(10)
-#define SST_IP_TONE		SST_MIX_IP(11)
-#define SST_IP_VOIP		SST_MIX_IP(12)
-#define SST_IP_PCM0		SST_MIX_IP(13)
-#define SST_IP_PCM1		SST_MIX_IP(14)
-#define SST_IP_LOW_PCM0		SST_MIX_IP(15)
-#define SST_IP_FM		SST_MIX_IP(16)
-#define SST_IP_MEDIA0		SST_MIX_IP(17)
-#define SST_IP_MEDIA1		SST_MIX_IP(18)
-#define SST_IP_MEDIA2		SST_MIX_IP(19)
-#define SST_IP_MEDIA3		SST_MIX_IP(20)
-
-#define SST_IP_LAST		SST_IP_MEDIA3
-
-#define SST_SWM_INPUT_COUNT	(SST_IP_LAST + 1)
-#define SST_CMD_SWM_MAX_INPUTS	6
-#define SST_PATH_ID_SHIFT	8
-#define SST_DEFAULT_LOCATION_ID	0xFFFF
-#define SST_DEFAULT_CELL_NBR	0xFF
-#define SST_DEFAULT_MODULE_ID	0xFFFF
+#define SST_PATH_ID_SHIFT 8
+#define SST_DEFAULT_LOCATION_ID       0xFFFF
+#define SST_DEFAULT_CELL_NBR  0xFF
+#define SST_DEFAULT_MODULE_ID 0xFFFF
 
 /*
  * Audio DSP Path Ids. Specified by the audio DSP FW
@@ -293,97 +217,6 @@ enum sst_swm_outputs {
 						SST_DEFAULT_CELL_NBR),
 };
 
-enum sst_ipc_msg {
-	SST_IPC_IA_CMD = 1,
-	SST_IPC_IA_SET_PARAMS,
-	SST_IPC_IA_GET_PARAMS,
-};
-
-enum sst_cmd_type {
-	SST_CMD_BYTES_SET = 1,
-	SST_CMD_BYTES_GET = 2,
-};
-
-enum sst_task {
-	SST_TASK_SBA = 1,
-	SST_TASK_FBA_UL,
-	SST_TASK_MMX,
-	SST_TASK_AWARE,
-	SST_TASK_FBA_DL,
-};
-
-enum sst_type {
-	SST_TYPE_CMD = 1,
-	SST_TYPE_PARAMS,
-};
-
-enum sst_flag {
-	SST_FLAG_BLOCKED = 1,
-	SST_FLAG_NONBLOCK,
-};
-
-/*
- * Enumeration for indexing the gain cells in VB_SET_GAIN DSP command
- */
-enum sst_gain_index {
-	/* GAIN IDs for SB task start here */
-	SST_GAIN_INDEX_MODEM_OUT,
-	SST_GAIN_INDEX_MODEM_IN,
-	SST_GAIN_INDEX_BT_OUT,
-	SST_GAIN_INDEX_BT_IN,
-	SST_GAIN_INDEX_FM_OUT,
-
-	SST_GAIN_INDEX_FM_IN,
-	SST_GAIN_INDEX_CODEC_OUT0,
-	SST_GAIN_INDEX_CODEC_OUT1,
-	SST_GAIN_INDEX_CODEC_IN0,
-	SST_GAIN_INDEX_CODEC_IN1,
-
-	SST_GAIN_INDEX_SPROT_LOOP_OUT,
-	SST_GAIN_INDEX_MEDIA_LOOP1_OUT,
-	SST_GAIN_INDEX_MEDIA_LOOP2_OUT,
-	SST_GAIN_INDEX_RX_SPEECH_OUT,
-	SST_GAIN_INDEX_TX_SPEECH_IN,
-
-	SST_GAIN_INDEX_SPEECH_OUT,
-	SST_GAIN_INDEX_SPEECH_IN,
-	SST_GAIN_INDEX_HF_OUT,
-	SST_GAIN_INDEX_HF_SNS_OUT,
-	SST_GAIN_INDEX_TONE_IN,
-
-	SST_GAIN_INDEX_SIDETONE_IN,
-	SST_GAIN_INDEX_PROBE_OUT,
-	SST_GAIN_INDEX_PROBE_IN,
-	SST_GAIN_INDEX_PCM0_IN_LEFT,
-	SST_GAIN_INDEX_PCM0_IN_RIGHT,
-
-	SST_GAIN_INDEX_PCM1_OUT_LEFT,
-	SST_GAIN_INDEX_PCM1_OUT_RIGHT,
-	SST_GAIN_INDEX_PCM1_IN_LEFT,
-	SST_GAIN_INDEX_PCM1_IN_RIGHT,
-	SST_GAIN_INDEX_PCM2_OUT_LEFT,
-
-	SST_GAIN_INDEX_PCM2_OUT_RIGHT,
-	SST_GAIN_INDEX_VOIP_OUT,
-	SST_GAIN_INDEX_VOIP_IN,
-	SST_GAIN_INDEX_AWARE_OUT,
-	SST_GAIN_INDEX_VAD_OUT,
-
-	/* Gain IDs for FBA task start here */
-	SST_GAIN_INDEX_VOICE_UL,
-
-	/* Gain IDs for MMX task start here */
-	SST_GAIN_INDEX_MEDIA0_IN_LEFT,
-	SST_GAIN_INDEX_MEDIA0_IN_RIGHT,
-	SST_GAIN_INDEX_MEDIA1_IN_LEFT,
-	SST_GAIN_INDEX_MEDIA1_IN_RIGHT,
-
-	SST_GAIN_INDEX_MEDIA2_IN_LEFT,
-	SST_GAIN_INDEX_MEDIA2_IN_RIGHT,
-
-	SST_GAIN_INDEX_GAIN_END
-};
-
 /*
  * Audio DSP module IDs specified by FW spec
  * TODO: Update with all modules
@@ -458,59 +291,6 @@ enum sst_module_id {
 	SST_MODULE_ID_TASK		  = 0xFFFF,
 };
 
-enum sst_cmd {
-	SBA_IDLE		= 14,
-	SBA_VB_SET_SPEECH_PATH	= 26,
-	MMX_SET_GAIN		= 33,
-	SBA_VB_SET_GAIN		= 33,
-	FBA_VB_RX_CNI		= 35,
-	MMX_SET_GAIN_TIMECONST	= 36,
-	SBA_VB_SET_TIMECONST	= 36,
-	FBA_VB_ANA		= 37,
-	FBA_VB_SET_FIR		= 38,
-	FBA_VB_SET_IIR		= 39,
-	SBA_VB_START_TONE	= 41,
-	SBA_VB_STOP_TONE	= 42,
-	FBA_VB_AEC		= 47,
-	FBA_VB_NR_UL		= 48,
-	FBA_VB_AGC		= 49,
-	FBA_VB_WNR		= 52,
-	FBA_VB_SLV		= 53,
-	FBA_VB_NR_DL		= 55,
-	SBA_PROBE		= 66,
-	MMX_PROBE		= 66,
-	FBA_VB_SET_BIQUAD_D_C	= 69,
-	FBA_VB_DUAL_BAND_COMP	= 70,
-	FBA_VB_SNS		= 72,
-	FBA_VB_SER		= 78,
-	FBA_VB_TX_CNI		= 80,
-	SBA_VB_START		= 85,
-	FBA_VB_SET_REF_LINE	= 94,
-	FBA_VB_SET_DELAY_LINE	= 95,
-	FBA_VB_BWX		= 104,
-	FBA_VB_GMM		= 105,
-	FBA_VB_GLC		= 107,
-	FBA_VB_BMF		= 111,
-	FBA_VB_DNR		= 113,
-	MMX_SET_SWM		= 114,
-	SBA_SET_SWM		= 114,
-	SBA_SET_MDRP            = 116,
-	SBA_HW_SET_SSP		= 117,
-	SBA_SET_MEDIA_LOOP_MAP	= 118,
-	SBA_SET_MEDIA_PATH	= 119,
-	MMX_SET_MEDIA_PATH	= 119,
-	FBA_VB_TNR_UL		= 119,
-	FBA_VB_TNR_DL		= 121,
-	FBA_VB_NLF		= 125,
-	SBA_VB_LPRO		= 126,
-	FBA_VB_MDRP		= 127,
-	SBA_VB_SET_FIR          = 128,
-	SBA_VB_SET_IIR          = 129,
-	SBA_SET_SSP_SLOT_MAP	= 130,
-	AWARE_ENV_CLASS_PARAMS	= 130,
-	VAD_ENV_CLASS_PARAMS	= 2049,
-};
-
 enum sst_dsp_switch {
 	SST_SWITCH_OFF = 0,
 	SST_SWITCH_ON = 3,
diff --git a/sound/soc/intel/platform-libs/sst_vendor.h b/sound/soc/intel/platform-libs/sst_vendor.h
deleted file mode 100644
index b6c8f84..0000000
--- a/sound/soc/intel/platform-libs/sst_vendor.h
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- *  sst_vendor.h - Intel sst fw private data
- *
- *  Copyright (C) 2014 Intel Corp
- *  Author: Subhransu S. Prusty<subhransu.s.prusty@intel.com>
- *  Author: Mythri P K <mythri.p.k@intel.com>
- *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; version 2 of the License.
- *
- *  This program is distributed in the hope that it will be useful, but
- *  WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *  General Public License for more details.
- *
- * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- */
-
-#ifndef __SST_VENDOR_H__
-#define __SST_VENDOR_H__
-
-/* Default types range from 0~12. type can range from 0 to 0xff
- * SST types start at higher to avoid any overlapping in future */
-
-#define SOC_CONTROL_TYPE_SST_GAIN		100
-#define SOC_CONTROL_TYPE_SST_MUTE		101
-#define SOC_CONTROL_TYPE_SST_ALGO_PARAMS	102
-#define SOC_CONTROL_TYPE_SST_ALGO_BYPASS	103
-#define SOC_CONTROL_TYPE_SST_MUX			104
-#define SOC_CONTROL_TYPE_SST_MIX			106
-#define SOC_CONTROL_TYPE_SST_BYTE           108
-#define SOC_CONTROL_TYPE_SST_MODE           109
-#define SOC_CONTROL_TYPE_SST_VOICE_MODE           110
-
-/* REVISIT: Define sst kcontrol index */
-#define SOC_CONTROL_IO_SST_GAIN\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_GAIN, \
-		SOC_CONTROL_TYPE_SST_GAIN, \
-		SOC_CONTROL_TYPE_VOLSW)
-
-#define SOC_CONTROL_IO_SST_MUTE\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_GAIN, \
-		SOC_CONTROL_TYPE_SST_GAIN, \
-		SOC_CONTROL_TYPE_BOOL_EXT)
-
-#define SOC_CONTROL_IO_SST_ALGO_PARAMS\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
-		SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
-		SOC_CONTROL_TYPE_BYTES_EXT)
-
-
-#define SOC_CONTROL_IO_SST_ALGO_BYPASS\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
-		SOC_CONTROL_TYPE_SST_ALGO_PARAMS, \
-		SOC_CONTROL_TYPE_BOOL_EXT)
-
-#define SOC_CONTROL_IO_SST_MIX\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_MIX, \
-		SOC_CONTROL_TYPE_SST_MIX, \
-		SOC_CONTROL_TYPE_VOLSW)
-
-#define SOC_CONTROL_IO_SST_MUX\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_MUX, \
-		SOC_CONTROL_TYPE_SST_MUX, \
-		SOC_CONTROL_TYPE_SST_MUX)
-
-#define SOC_CONTROL_IO_SST_BYTE\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_BYTE, \
-		SOC_CONTROL_TYPE_SST_BYTE, \
-		SOC_CONTROL_TYPE_SST_BYTE)
-
-#define SOC_CONTROL_IO_SST_MODE\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_MODE, \
-		SOC_CONTROL_TYPE_SST_MODE, \
-		SOC_CONTROL_TYPE_SST_MODE)
-
-#define SOC_CONTROL_IO_SST_VOICE_MODE\
-	SOC_CONTROL_ID(SOC_CONTROL_TYPE_SST_VOICE_MODE, \
-		SOC_CONTROL_TYPE_SST_VOICE_MODE, \
-		SOC_CONTROL_TYPE_SST_VOICE_MODE)
-
-#define SND_SOC_GAIN_CONTROL_NAME 44
-
-/* Event types goes here */
-/* Reserve event type 0 for no event handlers */
-enum sst_event_types {
-	SST_EVENT_TYPE_NONE = 0,
-	SST_HOSTLESS_STREAM,
-	SST_SET_BE_MODULE,
-	SST_SET_MEDIA_PATH,
-	SST_SET_MEDIA_LOOP,
-	SST_SET_TONE_GEN,
-	SST_SET_SPEECH_PATH,
-	SST_SET_SWM,
-	SST_EVENT_AWARE,
-	SST_SET_LINKED_PATH,
-	SST_SET_GENERIC_MODULE_EVENT,
-};
-
-enum sst_vendor_type {
-	SND_SOC_FW_SST_CONTROLS = 0x1000,
-	SND_SOC_FW_SST_WIDGETS,
-};
-
-enum sst_gain_kcontrol_type {
-	SST_GAIN_TLV,
-	SST_GAIN_MUTE,
-	SST_GAIN_RAMP_DURATION,
-};
-
-struct sst_dfw_gain_data {
-	u8 stereo;
-	enum sst_gain_kcontrol_type type;
-	u32 gain_val_index;
-	s32 max;
-	s32 min;
-	u16 instance_id;
-	u16 module_id;
-	u16 pipe_id;
-	u16 task_id;
-	u16 ramp_duration;
-	s16 l_gain;
-	s16 r_gain;
-	u8 mute;
-	char pname[44];
-} __packed;
-
-enum sst_algo_kcontrol_type {
-	SST_ALGO_PARAMS,
-	SST_ALGO_BYPASS,
-};
-
-struct sst_dfw_algo_data {
-	enum sst_algo_kcontrol_type type;
-	s32 max;
-	u16 module_id;
-	u16 pipe_id;
-	u16 task_id;
-	u16 cmd_id;
-	u8 bypass;
-	char params[0];
-	/* params will be in driver's pvt structure */
-} __packed;
-
-struct sst_dfw_ids {
-	u32 sample_bits;        /* sst_pcm_format->sample_bits */
-	u32 rate_min;           /* sst_pcm_format-> rate_min */
-	u32 rate_max;           /* sst_pcm_format->rate_max */
-	u32 channels_min;       /* sst_pcm_format->channels_min */
-	u32 channels_max;       /* sst_pcm_format->channels_max */
-	u16 location_id;
-	u16 module_id;
-	u8  task_id;
-	u8  format;             /* stereo/mono */
-	u8  reg;
-	const char parent_wname[44];
-} __packed;
-
-#if 0
-/* sst_fw_config: FW config data organization
- * For vendor specific:
- *	hdr_xxx->size: data following header in bytes
- *	hdr_xxx->type:
- *		ex: SND_SOC_FW_MIXER, SND_SOC_FW_DAPM_WIDGET,...
- *	hdr_xxx->venodr_type: SND_SOC_FW_SST_CONTROLS, SND_SOC_FW_SST_WIDGETS
- *
- * For Generic:
- *	hdr_xxx->type: generic types for
- *		ex: SND_SOC_FW_MIXER, SND_SOC_FW_DAPM_WIDGET,...
- *
- *	hdr_xxx->vendor_type: 0
- */
-struct sst_fw_config {
-	struct snd_soc_fw_hdr hdr_controls;
-	struct snd_soc_fw_kcontrol num_controls;
-	struct snd_soc_fw_gain_control gain_control[];
-	struct snd_soc_fw_algo_control algo_control[];
-	struct snd_soc_fw_slot_control slot_control[];
-	struct snd_soc_fw_mux_control mux_control[];
-	struct snd_soc_fw_probe_control probe_control[];
-
-	struct snd_soc_fw_hdr hdr_gen;	/* generic control types */
-	struct snd_soc_fw_kcontrol num_gen_control;
-	struct snd_soc_fw_mixer_control gen_mixer_control[];
-
-	/* TODO: Add widgets */
-	struct snd_soc_fw_hdr hdr_widgets;
-	struct snd_soc_fw_dapm_elems num_widgets;
-	struct snd_soc_fw_aifin_widget aifin_widget[];
-
-	/* TODO: Add intercon */
-} __packed;
-#endif
-
-#endif
diff --git a/sound/soc/intel/platform-libs/sst_widgets.h b/sound/soc/intel/platform-libs/sst_widgets.h
index 2961d3d..8e4aa88 100644
--- a/sound/soc/intel/platform-libs/sst_widgets.h
+++ b/sound/soc/intel/platform-libs/sst_widgets.h
@@ -22,7 +22,7 @@
 
 #include <sound/soc.h>
 #include <sound/tlv.h>
-#include "sst_vendor.h"
+#include <uapi/sound/sst_v2_vendor.h>
 
 #define SST_MODULE_GAIN 1
 #define SST_MODULE_ALGO 2
-- 
1.9.1

