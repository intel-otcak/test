From 139a3ab7a53d4fcad7f8e5889fa8970ce81eebc9 Mon Sep 17 00:00:00 2001
From: raosrini <srinidhi.rao@intel.com>
Date: Thu, 12 Mar 2015 13:56:15 +0530
Subject: [PATCH] extcon-dc-ti: Check USB host mode during probe

If a Host OTG device is connected to the target before the
power-on, then during bootup, the USB OTG driver will send
a notification to extcon-dc-ti-pwrsrc driver. But since the
extcon-dc-ti-pwrsrc has not yet been probed, it will miss
the notification.
Hence during the probe of extcon-dc-ti-pwrsrc, it has to
forcefully check for USB Host mode and then enable the
VBUS(charger Hi-Z mode) and set the USB Mux mode to SoC
so that USB OTG driver can enumerate the Host device.

The BQ24192 charger driver during Probe, should only
trigger the DPDM detection so that the BQ charger chip
will trigger an interrupt for any charger cable connected
prior to the device power-on.

Change-Id: I882725974844f5fcd3dfbf99995d03e91e361f44
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-1202
Reviewed-on: https://android.intel.com/#/c/341268
Signed-off-by: raosrini <srinidhi.rao@intel.com>
---
 drivers/extcon/extcon-dc-ti-pwrsrc.c | 26 ++++++++++++++++++--------
 drivers/power/bq24192_charger.c      | 24 ++++++++++++++----------
 2 files changed, 32 insertions(+), 18 deletions(-)

diff --git a/drivers/extcon/extcon-dc-ti-pwrsrc.c b/drivers/extcon/extcon-dc-ti-pwrsrc.c
index 45b86ef..e8f29aa 100644
--- a/drivers/extcon/extcon-dc-ti-pwrsrc.c
+++ b/drivers/extcon/extcon-dc-ti-pwrsrc.c
@@ -57,6 +57,7 @@ struct dc_pwrsrc_info {
 	int irq;
 	struct delayed_work dc_pwrsrc_wrk;
 	int usb_host;
+	struct mutex lock;
 };
 
 static char *pwr_up_down_info[] = {
@@ -157,6 +158,11 @@ static int pwrsrc_extcon_registration(struct dc_pwrsrc_info *info)
 	return ret;
 }
 
+static bool is_usb_host_mode(struct extcon_dev *evdev)
+{
+	return !!evdev->state;
+}
+
 static void extcon_event_worker(struct work_struct *work)
 {
 	struct dc_pwrsrc_info *info =
@@ -164,6 +170,11 @@ static void extcon_event_worker(struct work_struct *work)
 			struct dc_pwrsrc_info, dc_pwrsrc_wrk);
 	int ret;
 
+	mutex_lock(&info->lock);
+
+	if (info->cable_obj.edev)
+		info->usb_host = is_usb_host_mode(info->cable_obj.edev);
+
 	if (info->usb_host) {
 		ret = bq24192_vbus_enable();
 		if (ret)
@@ -185,12 +196,9 @@ static void extcon_event_worker(struct work_struct *work)
 		dev_warn(&info->pdev->dev,
 			"Err in switch USB enable %d", ret);
 
-	return;
-}
+	mutex_unlock(&info->lock);
 
-static bool is_usb_host_mode(struct extcon_dev *evdev)
-{
-	return !!evdev->state;
+	return;
 }
 
 static int dc_ti_pwrsrc_handle_extcon_event(struct notifier_block *nb,
@@ -199,9 +207,7 @@ static int dc_ti_pwrsrc_handle_extcon_event(struct notifier_block *nb,
 
 	struct dc_pwrsrc_info *info =
 	    container_of(nb, struct dc_pwrsrc_info, extcon_nb);
-	struct extcon_dev *edev = param;
 
-	info->usb_host = is_usb_host_mode(edev);
 	schedule_delayed_work(&info->dc_pwrsrc_wrk, 0);
 
 	return NOTIFY_OK;
@@ -236,6 +242,8 @@ static int dc_ti_pwrsrc_probe(struct platform_device *pdev)
 		goto intr_reg_failed;
 	}
 
+	mutex_init(&info->lock);
+
 	info->extcon_nb.notifier_call = dc_ti_pwrsrc_handle_extcon_event;
 	ret = extcon_register_interest(&info->cable_obj, NULL,
 				"USB-Host", &info->extcon_nb);
@@ -247,7 +255,8 @@ static int dc_ti_pwrsrc_probe(struct platform_device *pdev)
 	handle_pwrsrc_event(info);
 	/* Unmask VBUS interrupt */
 	intel_soc_pmic_clearb(DC_PS_IRQ_MASK_REG, IRQ_MASK_VBUS);
-
+	/* Handle Host OTG device connections */
+	extcon_event_worker(&info->dc_pwrsrc_wrk.work);
 	return 0;
 
 intr_reg_failed:
@@ -262,6 +271,7 @@ static int dc_ti_pwrsrc_remove(struct platform_device *pdev)
 
 	free_irq(info->irq, info);
 	extcon_dev_unregister(info->edev);
+	mutex_destroy(&info->lock);
 	kfree(info->edev);
 	return 0;
 }
diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index 3b6d5c6..c25b47f 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -2098,7 +2098,7 @@ static int bq24192_probe(struct i2c_client *client,
 	struct bq24192_chip *chip;
 	struct device *dev;
 	struct gpio_desc *gpio;
-	int ret, reg_status;
+	int ret;
 
 
 	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA)) {
@@ -2295,16 +2295,20 @@ static int bq24192_probe(struct i2c_client *client,
 	}
 
 	if (chip->chip_type == BQ24297) {
-		/* For BQ24297, check the initial cable status */
-		reg_status = bq24192_read_reg(chip->client,
-				BQ24192_SYSTEM_STAT_REG);
-		if (reg_status < 0)
-			dev_err(&chip->client->dev,
-					"STATUS register read failed\n");
-		ret = check_cable_status(chip, reg_status);
+		/*
+		 * For BQ24297, check the initial cable status.
+		 * During Probe, a charger cable might have been
+		 * connected prior to the power on of the device.
+		 * Hence deliberately trigger a DPDM detection
+		 * during probe so that the BQ charger will detect the
+		 * charger cable connected before hand and will trigger
+		 * an interrupt accordingly.
+		 */
+		ret = bq24192_reg_read_modify(chip->client,
+			BQ24192_MISC_OP_CNTL_REG, MISC_OP_CNTL_DPDM_EN, true);
 		if (ret < 0)
-			dev_err(&chip->client->dev,
-				"Failed to check cable status during probe\n");
+			dev_warn(&chip->client->dev,
+				"Failed to trigger DPDM detection during probe\n");
 	}
 
 	return 0;
-- 
1.9.1

