From eeb0a2eef89fd542dee47037047118c6a9a16758 Mon Sep 17 00:00:00 2001
Message-Id: <eeb0a2eef89fd542dee47037047118c6a9a16758.1426116068.git.feitong.yi@intel.com>
In-Reply-To: <581bcb8c8802c2b763f5abc462a37e22e0195720.1426116068.git.feitong.yi@intel.com>
References: <581bcb8c8802c2b763f5abc462a37e22e0195720.1426116068.git.feitong.yi@intel.com>
From: vandita kulkarni <vandita.kulkarni@intel.com>
Date: Fri, 27 Feb 2015 17:33:52 +0530
Subject: [PATCH 3/5] FOR_UPSTREAM [VPG]: drm/i915: Support Pm5 and DDR DVFS
 on CHV

DDR DVFS is enabled only when in maxfifo mode and for PM5 divide the
calculated ddl further by 2.

Issue: GMINL-4468
Change-Id: I766ef0edff29843951e5312f6fd0b9a08963162b
Signed-off-by: vandita kulkarni <vandita.kulkarni@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h      |    1 +
 drivers/gpu/drm/i915/i915_reg.h      |   45 +++++++++++-
 drivers/gpu/drm/i915/intel_display.c |   65 +++++++++++------
 drivers/gpu/drm/i915/intel_drv.h     |    3 +-
 drivers/gpu/drm/i915/intel_pm.c      |  130 ++++++++++++++++++++++++++--------
 drivers/gpu/drm/i915/intel_sprite.c  |    2 +-
 6 files changed, 189 insertions(+), 57 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 9f38814..8534604 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -3162,6 +3162,7 @@ extern void valleyview_set_rps(struct drm_device *dev, u8 val);
 extern void intel_detect_pch(struct drm_device *dev);
 extern int intel_trans_dp_port_sel(struct drm_crtc *crtc);
 extern int intel_enable_rc6(const struct drm_device *dev);
+extern void valleyview_update_wm_pm5(struct drm_crtc *crtc);
 
 extern bool i915_semaphore_is_enabled(struct drm_device *dev);
 int i915_reg_read_ioctl(struct drm_device *dev, void *data,
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 514a2e5..20c0628 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -480,6 +480,7 @@
 
 #define GCI_CONTROL	(dev_priv->info.display_mmio_offset + 0x650C)
 #define VGA_FAST_MODE_DISABLE	(1<<14)
+#define PFI_CREDITS_12		(4<<28)
 #define PFI_CREDITS_15		(7<<28)
 #define PFI_CREDITS_31		(8<<28)
 #define PFI_CREDITS_63		(9<<28)
@@ -4144,7 +4145,25 @@ enum punit_power_well {
 #define   DPINVGTT_STATUS_MASK			0xff
 #define   DPINVGTT_STATUS_MASK_CHV		0xfff
 
+/*
+ * the below macros are used to define the bits of
+ * plane_stat variable in dev_priv
+ * bits 0-3 represent planes of pipe a
+ * bits 4-7 represent planes of pipe b
+ * bits 8-11 represent places of pipe c
+ * bits 12,13,14 represent PIPEA, PIPEB,PIPEC
+ * respectively
+ */
+#define PIPE_A_PLANES_MASK	0xf
+#define PIPE_B_PLANES_MASK	0xf0
+#define PIPE_C_PLANES_MASK	0xf00
+#define PIPE_ENABLE_MASK	0xf000
+#define PIPE_C_ENABLE_MASK	0x4000
+
 #define	DSPARB	(dev_priv->info.display_mmio_offset + 0x70030)
+#define	DSPARB2	(dev_priv->info.display_mmio_offset + 0x70060)
+#define	DSPARB3	(dev_priv->info.display_mmio_offset + 0x7006c)
+
 #define	DSPARB_VLV_DEFAULT	0x80008000
 #define	DSPARB_CSTART_MASK	(0x7f << 7)
 #define	DSPARB_CSTART_SHIFT	7
@@ -4152,6 +4171,8 @@ enum punit_power_well {
 #define	DSPARB_BSTART_SHIFT	0
 #define	DSPARB_BEND_SHIFT	9 /* on 855 */
 #define	DSPARB_AEND_SHIFT	0
+#define	DSPARB2_VLV_DEFAULT	0x00111111
+#define	DSPARB3_VLV_DEFAULT	0x80008000
 
 #define DSPFW1			(dev_priv->info.display_mmio_offset + 0x70034)
 #define   DSPFW_SR_SHIFT	23
@@ -4202,7 +4223,7 @@ enum punit_power_well {
 #define DSPFW6			(dev_priv->info.display_mmio_offset + 0x70078)
 #define   DSPFW6_DISPLAYSR_VAL	0xF
 #define   DSPFW6_VLV		0x0000000F
-#define DSPFW7			(dev_priv->info.display_mmio_offset + 0x7007c)
+#define DSPFW7			(dev_priv->info.display_mmio_offset + 0x700B4)
 #define   DSPFW7_SPRITEC_VAL	0x0F
 #define   DSPFW7_SPRITEC1_VAL	0x04
 #define   DSPFW7_SPRITEC1_SHIFT	8
@@ -4211,6 +4232,16 @@ enum punit_power_well {
 #define   DSPFW7_SPRITED1_VAL	0x04
 #define   DSPFW7_SPRITED1_SHIFT	24
 #define   DSPFW7_VLV		0x040F040F
+#define DSPFW8			(dev_priv->info.display_mmio_offset + 0x700B8)
+#define   DSPFW8_SPRITEE_VAL	0x0F
+#define   DSPFW8_SPRITEE1_VAL	0x04
+#define   DSPFW8_SPRITEE1_SHIFT	8
+#define   DSPFW8_SPRITEF_VAL	0x0F
+#define   DSPFW8_SPRITEF_SHIFT	16
+#define   DSPFW8_SPRITEF1_VAL	0x04
+#define   DSPFW8_SPRITEF1_SHIFT	24
+#define DSPFW9			(dev_priv->info.display_mmio_offset + 0x7007C)
+#define VLV_DSPFW9_DEF_WM	0x40f0004
 
 /* drain latency register values*/
 #define VLV_DDL(pipe)	_PIPE(pipe, VLV_DDL1, VLV_DDL2)
@@ -4239,12 +4270,16 @@ enum punit_power_well {
 #define DDL_PLANEB_PRECISION_H		(1<<7)
 #define DDL_PLANEB_PRECISION_L		(0<<7)
 
+#define VLV_DDL3	(VLV_DISPLAY_BASE + 0x70058)
+#define DSPHOWM			(dev_priv->info.display_mmio_offset + 0x70064)
+#define DSPHOWM1		(dev_priv->info.display_mmio_offset + 0x70068)
+
 /* FIFO watermark sizes etc */
 #define G4X_FIFO_LINE_SIZE	64
 #define I915_FIFO_LINE_SIZE	64
 #define I830_FIFO_LINE_SIZE	32
 
-#define VALLEYVIEW_FIFO_SIZE	255
+#define VALLEYVIEW_FIFO_SIZE	511
 #define G4X_FIFO_SIZE		127
 #define I965_FIFO_SIZE		512
 #define I945_FIFO_SIZE		127
@@ -6559,10 +6594,14 @@ enum punit_power_well {
 #define  WM_DBG_DISALLOW_SPRITE		(1<<2)
 
 #define CHV_DPASSC		0x36
-
 /* Bit 6 of DPASSC indicates maxfifo enabling bit */
 #define CHV_PW_MAXFIFO_MASK		0x40
 
+#define CHV_DDR_DVFS		0x139
+#define CHV_FORCE_DDR_LOW_FREQ	0x2
+#define CHV_FORCE_DDR_HIGH_FREQ	0x1
+#define CHV_DDR_DVFS_DOORBELL	0x100
+
 /* pipe CSC */
 #define _PIPE_A_CSC_COEFF_RY_GY	0x49010
 #define _PIPE_A_CSC_COEFF_BY	0x49014
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 148b628..37e6b51 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -47,6 +47,9 @@
 #define DIV_ROUND_CLOSEST_ULL(ll, d)	\
 	({ unsigned long long _tmp = (ll)+(d)/2; do_div(_tmp, d); _tmp; })
 
+#define PIPE_ENABLE(pipe)	(1 << (pipe+12))
+
+
 void intel_save_clr_mgr_status(struct drm_device *dev);
 bool intel_restore_clr_mgr_status(struct drm_device *dev);
 static void intel_increase_pllclock(struct drm_crtc *crtc);
@@ -2263,15 +2266,6 @@ static void intel_enable_primary_hw_plane(struct drm_i915_private *dev_priv,
 
 	dev_priv->plane_stat |= VLV_UPDATEPLANE_STAT_PRIM_PER_PIPE(pipe);
 
-	/*
-	 * Since we are enabling a plane, we
-	 * need to make sure that we do not keep the
-	 * maxfifo enabled, if we already have one plane
-	 * enabled
-	 */
-	if (!dev_priv->atomic_update)
-		intel_update_maxfifo(dev_priv);
-
 	reg = DSPCNTR(plane);
 	val = I915_READ(reg);
 	WARN_ON(val & DISPLAY_PLANE_ENABLE);
@@ -2319,12 +2313,6 @@ static void intel_disable_primary_hw_plane(struct drm_i915_private *dev_priv,
 
 	I915_WRITE(reg, val & ~DISPLAY_PLANE_ENABLE);
 
-	/*
-	 * After disabling the plane, enable maxfifo
-	 * if the number of planes enabled is only one
-	 */
-	intel_update_maxfifo(dev_priv);
-
 	intel_flush_primary_plane(dev_priv, plane);
 }
 
@@ -5409,6 +5397,8 @@ static void valleyview_crtc_enable(struct drm_crtc *crtc)
 
 	intel_crtc->active = true;
 
+	dev_priv->plane_stat = dev_priv->plane_stat |
+		PIPE_ENABLE(intel_crtc->pipe);
 	intel_set_cpu_fifo_underrun_reporting(dev, pipe, true);
 
 	for_each_encoder_on_crtc(dev, crtc, encoder)
@@ -5699,6 +5689,8 @@ static void i9xx_crtc_disable(struct drm_crtc *crtc)
 		intel_wait_for_vblank(dev, pipe);
 
 	intel_disable_pipe(dev_priv, pipe);
+	dev_priv->plane_stat = dev_priv->plane_stat &
+		(~PIPE_ENABLE(intel_crtc->pipe));
 
 	i9xx_pfit_disable(intel_crtc);
 
@@ -11088,7 +11080,7 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 	int i, ret = 0;
 	int plane_cnt = 0;
-
+	u32 val = 0;
 	disp->errored = 0;
 	disp->presented = 0;
 
@@ -11116,13 +11108,27 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 			plane_cnt++;
 	}
 
-	/* Disable maxfifo if multiple planes are enabled */
-	if ((plane_cnt > 1) && dev_priv->maxfifo_enabled) {
-		I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+	/* Disable maxfifo and ddrdvfs if multiple planes are enabled */
+	if (((plane_cnt > 1) || ((dev_priv->plane_stat & PIPE_C_ENABLE_MASK)
+				== PIPE_C_ENABLE_MASK))
+		&& dev_priv->maxfifo_enabled) {
+		if (IS_CHERRYVIEW(dev_priv->dev)) {
+			mutex_lock(&dev_priv->rps.hw_lock);
+			val = CHV_FORCE_DDR_HIGH_FREQ | CHV_DDR_DVFS_DOORBELL;
+			vlv_punit_write(dev_priv, CHV_DDR_DVFS, val);
+			intel_wait_for_vblank(dev, intel_crtc->pipe);
+			I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+			val = vlv_punit_read(dev_priv, CHV_DPASSC);
+			vlv_punit_write(dev_priv, CHV_DPASSC,
+				(val | CHV_PW_MAXFIFO_MASK));
+			mutex_unlock(&dev_priv->rps.hw_lock);
+			intel_wait_for_vblank(dev, intel_crtc->pipe);
+		}
+
 		dev_priv->maxfifo_enabled = false;
 		dev_priv->wait_vbl = true;
 		dev_priv->vblcount =
-			atomic_read(&dev->vblank[intel_crtc->pipe].count);
+		atomic_read(&dev->vblank[intel_crtc->pipe].count);
 	}
 
 	/* Calculation for Flips */
@@ -11153,8 +11159,11 @@ static int intel_crtc_set_display(struct drm_crtc *crtc,
 	/* Commit to registers */
 	ret = intel_set_disp_commit_regs(disp, dev, intel_crtc);
 
+	/* updat the watermarks*/
+	valleyview_update_wm_pm5(crtc);
+
 	/* Enable maxfifo if needed */
-	intel_update_maxfifo(dev_priv);
+	intel_update_maxfifo(dev_priv, intel_crtc->pipe, plane_cnt);
 	dev_priv->atomic_update = false;
 	return ret;
 }
@@ -12132,7 +12141,7 @@ static int __intel_set_mode(struct drm_crtc *crtc,
 	struct intel_crtc *intel_crtc;
 	struct drm_connector *connector;
 	unsigned disable_pipes, prepare_pipes, modeset_pipes;
-	int ret = 0;
+	int val, ret = 0;
 
 	saved_mode = kmalloc(sizeof(*saved_mode), GFP_KERNEL);
 	if (!saved_mode)
@@ -12186,10 +12195,20 @@ static int __intel_set_mode(struct drm_crtc *crtc,
 			dev_priv->display.crtc_disable(&intel_crtc->base);
 	}
 
+	if (IS_CHERRYVIEW(dev))
+		if (dev_priv->is_first_modeset) {
+			mutex_lock(&dev_priv->rps.hw_lock);
+			val = CHV_FORCE_DDR_HIGH_FREQ | CHV_DDR_DVFS_DOORBELL;
+			vlv_punit_write(dev_priv, CHV_DDR_DVFS, val);
+			mutex_unlock(&dev_priv->rps.hw_lock);
+		}
+
 	/* DO it only once */
 	if (IS_VALLEYVIEW(dev))
-		if (dev_priv->is_first_modeset)
+		if (dev_priv->is_first_modeset) {
 			program_pfi_credits(dev_priv, true);
+			valleyview_update_wm_pm5(crtc);
+		}
 
 	/* crtc->mode is already used by the ->mode_set callbacks, hence we need
 	 * to set it here already despite that we pass it down the callchain.
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 8e7868a..184d1b8 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -1178,7 +1178,8 @@ bool is_sprite_enabled(struct drm_i915_private *dev_priv,
 			enum pipe pipe, enum plane plane);
 bool is_cursor_enabled(struct drm_i915_private *dev_priv,
 			enum pipe pipe);
-void intel_update_maxfifo(struct drm_i915_private *dev_priv);
+void intel_update_maxfifo(struct drm_i915_private *dev_priv,
+			  enum pipe pipe, int count);
 
 extern void intel_unpin_work_fn(struct work_struct *__work);
 extern void intel_unpin_sprite_work_fn(struct work_struct *__work);
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 8bcf2e6..00d3a9d 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -1509,8 +1509,8 @@ bool vlv_calculate_ddl(struct drm_crtc *crtc,
 		clock = crtc->mode.clock;
 
 	if (IS_CHERRYVIEW(dev)) {
-		h_precision = 32;
-		l_precision = 16;
+		h_precision = 32/2;
+		l_precision = 16/2;
 	} else {
 		h_precision = 64;
 		l_precision = 32;
@@ -1540,43 +1540,110 @@ bool vlv_calculate_ddl(struct drm_crtc *crtc,
 
 #define single_plane_enabled(mask) is_power_of_2(mask)
 
-void intel_update_maxfifo(struct drm_i915_private *dev_priv)
+void intel_update_maxfifo(struct drm_i915_private *dev_priv, enum pipe pipe,
+			  int plane_cnt)
 {
 	unsigned int val = 0;
+	struct drm_device *dev = dev_priv->dev;
+
+
+	if (!IS_VALLEYVIEW(dev_priv->dev))
+		return;
+
 	/*
 	 * Maxfifo is not supported for PIPEC single plane
 	 * Hence having a check while enabling maxfifo
 	 * No need of a check on pipec in disable path
-	 * as it is doens't get enabled
+	 * as it is doens't get enabled. In this function
+	 * we also enable ddrdvfs in case of single plane
+	 * enabled.
 	 */
-	if (IS_VALLEYVIEW(dev_priv->dev)) {
-		if (single_plane_enabled(dev_priv->plane_stat)
-			&& !(dev_priv->plane_stat & PIPE_C_MASK)
-			&& !dev_priv->maxfifo_enabled) {
+	if (single_plane_enabled(dev_priv->plane_stat
+			& (PIPE_A_PLANES_MASK || PIPE_B_PLANES_MASK))
+		&& !(dev_priv->plane_stat & PIPE_C_MASK)
+		&& (single_plane_enabled(dev_priv->plane_stat
+			& PIPE_ENABLE_MASK))
+		&& !dev_priv->maxfifo_enabled) {
+		if (IS_CHERRYVIEW(dev_priv->dev)) {
+			mutex_lock(&dev_priv->rps.hw_lock);
+			val = CHV_FORCE_DDR_LOW_FREQ | CHV_DDR_DVFS_DOORBELL;
+			vlv_punit_write(dev_priv, CHV_DDR_DVFS, val);
+			intel_wait_for_vblank(dev, pipe);
 			I915_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
-			if (IS_CHERRYVIEW(dev_priv->dev)) {
-				mutex_lock(&dev_priv->rps.hw_lock);
-				val = vlv_punit_read(dev_priv, CHV_DPASSC);
-				vlv_punit_write(dev_priv, CHV_DPASSC,
-						(val | CHV_PW_MAXFIFO_MASK));
-				mutex_unlock(&dev_priv->rps.hw_lock);
-			}
-			dev_priv->maxfifo_enabled = true;
-		} else if (dev_priv->maxfifo_enabled &&
-				!single_plane_enabled(dev_priv->plane_stat)) {
+			val = vlv_punit_read(dev_priv, CHV_DPASSC);
+			vlv_punit_write(dev_priv, CHV_DPASSC,
+					(val | CHV_PW_MAXFIFO_MASK));
+			mutex_unlock(&dev_priv->rps.hw_lock);
+		} else
+			I915_WRITE(FW_BLC_SELF_VLV, FW_CSPWRDWNEN);
+		dev_priv->maxfifo_enabled = true;
+	} else if (dev_priv->maxfifo_enabled
+			&& (!single_plane_enabled(dev_priv->plane_stat
+				& (PIPE_A_PLANES_MASK | PIPE_B_PLANES_MASK
+					| PIPE_C_PLANES_MASK)))
+			&& (!single_plane_enabled(dev_priv->plane_stat
+				& PIPE_ENABLE_MASK))) {
+		if (IS_CHERRYVIEW(dev_priv->dev)) {
+			mutex_lock(&dev_priv->rps.hw_lock);
+			val = CHV_FORCE_DDR_HIGH_FREQ |	CHV_DDR_DVFS_DOORBELL;
+			vlv_punit_write(dev_priv, CHV_DDR_DVFS, val);
+			intel_wait_for_vblank(dev, pipe);
+			val = vlv_punit_read(dev_priv, CHV_DPASSC);
 			I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
-			if (IS_CHERRYVIEW(dev_priv->dev)) {
-				mutex_lock(&dev_priv->rps.hw_lock);
-				val = vlv_punit_read(dev_priv, CHV_DPASSC);
-				vlv_punit_write(dev_priv, CHV_DPASSC,
+			vlv_punit_write(dev_priv, CHV_DPASSC,
 					(val & ~(CHV_PW_MAXFIFO_MASK)));
-				mutex_unlock(&dev_priv->rps.hw_lock);
-			}
-			dev_priv->maxfifo_enabled = false;
-		}
+			mutex_unlock(&dev_priv->rps.hw_lock);
+			intel_wait_for_vblank(dev, pipe);
+		} else
+			I915_WRITE(FW_BLC_SELF_VLV, ~FW_CSPWRDWNEN);
+		dev_priv->maxfifo_enabled = false;
 	}
 }
 
+void valleyview_update_wm_pm5(struct drm_crtc *crtc)
+{
+	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	I915_WRITE(DSPARB, DSPARB_VLV_DEFAULT);
+	I915_WRITE(DSPARB2, DSPARB2_VLV_DEFAULT);
+	I915_WRITE(DSPARB3, DSPARB3_VLV_DEFAULT);
+
+	I915_WRITE(DSPFW1,
+		   (DSPFW_SR_VAL << DSPFW_SR_SHIFT) |
+		   (DSPFW_CURSORB_VAL << DSPFW_CURSORB_SHIFT) |
+		   (DSPFW_PLANEB_VAL << DSPFW_PLANEB_SHIFT) |
+		   DSPFW_PLANEA_VAL);
+	I915_WRITE(DSPFW2,
+		   (DSPFW2_RESERVED) |
+		   (DSPFW_CURSORA_VAL << DSPFW_CURSORA_SHIFT) |
+		   DSPFW_PLANEC_VAL);
+	I915_WRITE(DSPFW3,
+		   (I915_READ(DSPFW3) & ~DSPFW_CURSOR_SR_MASK) |
+		   (DSPFW3_VLV));
+	I915_WRITE(DSPFW5, (DSPFW5_DISPLAYB_VAL << DSPFW5_DISPLAYB_SHIFT) |
+			(DSPFW5_DISPLAYA_VAL << DSPFW5_DISPLAYA_SHIFT) |
+			(DSPFW5_CURSORB_VAL << DSPFW5_CURSORB_SHIFT) |
+			DSPFW5_CURSORSR_VAL);
+	I915_WRITE(DSPFW6, DSPFW6_DISPLAYSR_VAL);
+
+	/* updating the sprite watermark*/
+	I915_WRITE(DSPFW4, (DSPFW4_SPRITEB_VAL << DSPFW4_SPRITEB_SHIFT) |
+			(DSPFW4_CURSORA_VAL << DSPFW4_CURSORA_SHIFT) |
+			DSPFW4_SPRITEA_VAL);
+	I915_WRITE(DSPFW7, (DSPFW7_SPRITED1_VAL << DSPFW7_SPRITED1_SHIFT) |
+			(DSPFW7_SPRITED_VAL << DSPFW7_SPRITED_SHIFT) |
+			(DSPFW7_SPRITEC1_VAL << DSPFW7_SPRITEC1_SHIFT) |
+			DSPFW7_SPRITEC_VAL);
+	I915_WRITE(DSPFW8, (DSPFW8_SPRITEF1_VAL << DSPFW8_SPRITEF1_SHIFT) |
+			(DSPFW8_SPRITEF_VAL << DSPFW8_SPRITEF_SHIFT) |
+			(DSPFW8_SPRITEE1_VAL << DSPFW8_SPRITEE1_SHIFT) |
+			DSPFW8_SPRITEE_VAL);
+	I915_WRITE(DSPFW9, (I915_READ(DSPFW9) | VLV_DSPFW9_DEF_WM));
+	I915_WRITE(DSPHOWM, 0);
+	I915_WRITE(DSPHOWM1, 0);
+}
+
 static void valleyview_update_wm(struct drm_crtc *crtc)
 {
 	struct drm_device *dev = crtc->dev;
@@ -1615,7 +1682,6 @@ static void valleyview_update_wm(struct drm_crtc *crtc)
 			DSPFW5_CURSORSR_VAL);
 	I915_WRITE(DSPFW6, DSPFW6_DISPLAYSR_VAL);
 }
-
 static void g4x_update_wm(struct drm_crtc *crtc)
 {
 	struct drm_device *dev = crtc->dev;
@@ -8059,8 +8125,14 @@ void program_pfi_credits(struct drm_i915_private *dev_priv, bool flag)
 		/* Disable before enabling */
 		I915_WRITE(GCI_CONTROL, VGA_FAST_MODE_DISABLE);
 		I915_WRITE(GCI_CONTROL, val);
-	} else
-		DRM_ERROR("cd clk < cz clk");
+	} else {
+		if (IS_CHERRYVIEW(dev_priv->dev)) {
+			val |= PFI_CREDITS_12;
+			I915_WRITE(GCI_CONTROL, VGA_FAST_MODE_DISABLE);
+			I915_WRITE(GCI_CONTROL, val);
+			DRM_ERROR("cd clk < cz clk");
+		}
+	}
 }
 
 /*
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 5f848c0..aad82b37 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -153,7 +153,7 @@ static void intel_update_primary_plane(struct drm_plane *dplane,
 	if (intel_crtc->primary_enabled) {
 		intel_crtc->reg.cntr = I915_READ(dspreg) | DISPLAY_PLANE_ENABLE;
 		intel_plane->reg.dspcntr =
-			I915_READ(dspreg) | DISPLAY_PLANE_ENABLE;
+			(I915_READ(dspreg) | DISPLAY_PLANE_ENABLE);
 		intel_crtc->pri_update = true;
 		intel_plane->pri_update = true;
 		if (!dev_priv->atomic_update)
-- 
1.7.9.5

