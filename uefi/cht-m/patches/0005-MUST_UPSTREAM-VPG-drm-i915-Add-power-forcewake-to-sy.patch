From 0431ec08b23ce1f9cdeffd4e7e768037520029f6 Mon Sep 17 00:00:00 2001
Message-Id: <0431ec08b23ce1f9cdeffd4e7e768037520029f6.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: torourke <Tom.O'Rourke@intel.com>
Date: Thu, 1 Aug 2013 13:50:01 -0700
Subject: [PATCH 005/312] MUST_UPSTREAM [VPG]: drm/i915: Add power/forcewake
 to sysfs.

The power/forcewake attribute can be used to set or clear forcewake for i915.
Setting forcewake prevents graphics hardware from going to low-power state.
Clearing forcewake re-enables the transition to low-power state.  Each
forcewake set is counted and should be paired with a matching forcewake
clear.  Access to power/forcewake requires root permission.

Usage:
set forcewake:
 echo 1 > /sys/class/drm/card0/power/forcewake
clear forcewake:
 echo 0 > /sys/class/drm/card0/power/forcewake
print forcewake count:
 cat /sys/class/drm/card0/power/forcewake

Change-Id: I8d9b5ab3d2554ba9f3142da0c5697cfd0e8a1a7d
Signed-off-by: torourke <Tom.O'Rourke@intel.com>
(cherry picked from commit 783a8cbbe20cf519c8a3c39b5117f36164e4c346)

Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
---
 drivers/gpu/drm/i915/i915_sysfs.c |   34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_sysfs.c b/drivers/gpu/drm/i915/i915_sysfs.c
index 86ce39a..06e490b 100644
--- a/drivers/gpu/drm/i915/i915_sysfs.c
+++ b/drivers/gpu/drm/i915/i915_sysfs.c
@@ -74,6 +74,37 @@ out:
 }
 
 static ssize_t
+show_forcewake(struct device *kdev, struct device_attribute *attr, char *buf)
+{
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	return snprintf(buf, PAGE_SIZE, "%x\n", dev_priv->uncore.forcewake_count);
+}
+
+static ssize_t
+forcewake_store(struct device *kdev, struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	struct drm_minor *minor = dev_to_drm_minor(kdev);
+	struct drm_device *dev = minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	u32 val;
+	ssize_t ret;
+
+	ret = kstrtou32(buf, 0, &val);
+	if (ret)
+		return ret;
+
+	if (val)
+		gen6_gt_force_wake_get(dev_priv, FORCEWAKE_ALL);
+	else
+		gen6_gt_force_wake_put(dev_priv, FORCEWAKE_ALL);
+
+	return count;
+}
+
+static ssize_t
 show_rc6_mask(struct device *kdev, struct device_attribute *attr, char *buf)
 {
 	struct drm_minor *dminor = dev_to_drm_minor(kdev);
@@ -108,12 +139,15 @@ show_rc6pp_ms(struct device *kdev, struct device_attribute *attr, char *buf)
 	return snprintf(buf, PAGE_SIZE, "%u\n", rc6pp_residency);
 }
 
+static DEVICE_ATTR(forcewake, S_IRUSR | S_IWUSR, show_forcewake,
+		   forcewake_store);
 static DEVICE_ATTR(rc6_enable, S_IRUGO, show_rc6_mask, NULL);
 static DEVICE_ATTR(rc6_residency_ms, S_IRUGO, show_rc6_ms, NULL);
 static DEVICE_ATTR(rc6p_residency_ms, S_IRUGO, show_rc6p_ms, NULL);
 static DEVICE_ATTR(rc6pp_residency_ms, S_IRUGO, show_rc6pp_ms, NULL);
 
 static struct attribute *rc6_attrs[] = {
+	&dev_attr_forcewake.attr,
 	&dev_attr_rc6_enable.attr,
 	&dev_attr_rc6_residency_ms.attr,
 	&dev_attr_rc6p_residency_ms.attr,
-- 
1.7.9.5

