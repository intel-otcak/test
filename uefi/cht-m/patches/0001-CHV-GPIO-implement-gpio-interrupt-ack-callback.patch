From fe19d2ce3a62182b9c1f990dfa5c43848d250d55 Mon Sep 17 00:00:00 2001
From: zhengq <qi.zheng@intel.com>
Date: Fri, 19 Dec 2014 22:02:20 +0800
Subject: [PATCH 1/1] CHV GPIO: implement gpio interrupt ack callback.

The CHV GPIO interrupt handler will call into handle_level_irq
or handle_edge_irq eventually from chv_gpio_irq_dispatch.
In current design, the GPIO interrupt ACK will happen in the
chv_gpio_irq_dispatch. This is unproper for level IRQ. Once ACK
the interrupt, since GPIO still keep in trigger level, unexpected
interrupts will be triggered immediately in other CPU cores.
To fix this, implement the ACK operation in chv_irq_ack, let the
linux kernel handle the GPIO ACK correctly in handle_level_irq or
handle_edge_irq.

Based on the commit by Ramirez Luna, Omar R

Tracked-On: https://jira01.devtools.intel.com/browse/AKP-799
Change-Id: Idfb83e6fd73035d240693962153b079a81eed5e0
Signed-off-by: zhengq <qi.zheng@intel.com>
---
 drivers/pinctrl/pinctrl-cherryview.c | 21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/drivers/pinctrl/pinctrl-cherryview.c b/drivers/pinctrl/pinctrl-cherryview.c
index 235deca..4503a15 100644
--- a/drivers/pinctrl/pinctrl-cherryview.c
+++ b/drivers/pinctrl/pinctrl-cherryview.c
@@ -1031,6 +1031,23 @@ static int chv_irq_wake(struct irq_data *d, unsigned on)
 
 static void chv_irq_ack(struct irq_data *d)
 {
+	struct chv_gpio *cg = irq_data_get_irq_chip_data(d);
+	u32 offset = irqd_to_hwirq(d);
+	struct gpio_pad_info *pad_info = cg->pad_info + offset;
+	void __iomem *stat_reg = chv_gpio_reg(&cg->chip, 0, CV_INT_STAT_REG);
+	unsigned long flags;
+
+	spin_lock_irqsave(&cg->lock, flags);
+
+	/* Ack if this GPIO has valid interrupt line */
+	if (pad_info->interrupt_line >= 0) {
+		chv_writel(BIT(pad_info->interrupt_line), stat_reg);
+	} else {
+		dev_warn(&cg->pdev->dev,
+			"Trying to ack GPIO intr which is not allocated\n");
+	}
+
+	spin_unlock_irqrestore(&cg->lock, flags);
 }
 
 static void chv_gpio_dbg_show(struct seq_file *s, struct gpio_chip *chip)
@@ -1160,10 +1177,10 @@ static void chv_gpio_irq_dispatch(struct chv_gpio *cg)
 	mask_reg = chv_gpio_reg(&cg->chip, 0, CV_INT_MASK_REG);
 	while ((pending = (chv_readl(reg) & chv_readl(mask_reg) & 0xFFFF))) {
 		intr_line = __ffs(pending);
-		mask = BIT(intr_line);
-		chv_writel(mask, reg);
 		offset = cg->intr_lines[intr_line];
 		if (unlikely(offset < 0)) {
+			mask = BIT(intr_line);
+			chv_writel(mask, reg);
 			dev_warn(&cg->pdev->dev, "unregistered shared irq\n");
 			continue;
 		}
-- 
1.9.1

