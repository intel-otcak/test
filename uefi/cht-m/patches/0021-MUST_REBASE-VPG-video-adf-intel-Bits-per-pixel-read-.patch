From 28f4396d438b6bd8f0e26658b05ad855db677c54 Mon Sep 17 00:00:00 2001
Message-Id: <28f4396d438b6bd8f0e26658b05ad855db677c54.1424979244.git.feitong.yi@intel.com>
In-Reply-To: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
References: <d8466aca83b11ab8b0870e775536306782d73e9f.1424979244.git.feitong.yi@intel.com>
From: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
Date: Thu, 5 Feb 2015 16:18:35 +0530
Subject: [PATCH 21/28] MUST_REBASE [VPG]: video/adf/intel: Bits per pixel
 read from EDID

This patch enabled support for reading bits per pixel from the edid
of panel and use it based on the bandwidth available.

MUST_REBASE: Since Google ADF framework is not in upstream and also
we cannot have two display drivers, other one being i915, we need to
work on i915 and ADF convergence path before it can be upstreamed.

Issue: GMINL-5757
Change-Id: I2f5e82a319eb6281b969434655f2bf213d3db2c7
Signed-off-by: Thulasimani, Sivakumar <sivakumar.thulasimani@intel.com>
---
 drivers/video/adf/intel/core/common/dp/dp_panel.c  |   80 ++++++++++++++++++++
 .../video/adf/intel/core/common/dp/gen_dp_pipe.c   |   39 ++++++++--
 drivers/video/adf/intel/core/vlv/vlv_pipeline.c    |    8 +-
 .../adf/intel/include/core/common/dp/dp_panel.h    |   12 ++-
 4 files changed, 126 insertions(+), 13 deletions(-)

diff --git a/drivers/video/adf/intel/core/common/dp/dp_panel.c b/drivers/video/adf/intel/core/common/dp/dp_panel.c
index 0a6aac43..43d9e6c 100644
--- a/drivers/video/adf/intel/core/common/dp/dp_panel.c
+++ b/drivers/video/adf/intel/core/common/dp/dp_panel.c
@@ -82,6 +82,86 @@ void dp_panel_copy_data_from_monitor(struct dp_panel *panel,
 	panel->modelist = probed_modes;
 }
 
+u32 dp_panel_get_next_bpc(u32 bpc)
+{
+	/* valid bpc are 6, 8, 10 */
+	switch (bpc) {
+	case 6:
+		return 0;
+	case 8:
+		return 6;
+	case 10:
+		return 8;
+	default:
+		return 6;
+	}
+}
+
+/* get the bits per color supported by the panel from edid */
+u32 dp_panel_get_bpc(struct dp_panel *panel, u32 dotclock)
+{
+	u32 bpc = 6, edid_val, bw_available;
+	u32 dotclock_req, lane_count, link_bw;
+	u8 *edid = (u8 *)panel->edid;
+
+	/* should not be hit, but for sanity */
+	if (!edid)
+		return bpc;
+
+	/* edid has bpc only after version 1.3 */
+	if (edid[EDID_VERSION_OFFSET] == 1 &&
+		edid[EDID_REVISION_OFFSET] <= 3)
+		return bpc;
+
+	edid_val = edid[EDID_DISP_PARAMS_OFFSET];
+
+	edid_val = (edid_val & EDID_COLOR_DEPTH_MASK) >>
+					EDID_COLOR_DEPTH_SHIFT;
+
+	switch (edid_val) {
+	case 0:
+		/* undefined so set to 6, mandatory per DP spec */
+		bpc = 6;
+		break;
+	case 1:
+		bpc = 6;
+		break;
+	case 2:
+		bpc = 8;
+		break;
+	case 3:
+		bpc = 10;
+		break;
+	default:
+		/*
+		 * TBD: Not handling higher colors for now, to be
+		 * revisited once HBR2 support is added
+		 */
+		bpc = 8;
+		break;
+	}
+
+	pr_info("Edid supports %d bits per color\n", bpc);
+	lane_count = dp_panel_get_max_lane_count(panel);
+	link_bw = dp_panel_get_max_link_bw(panel);
+
+	do {
+		/* bpp = bpc * 3 */
+		dotclock_req = dotclock * (bpc * 3);
+		bw_available = LINK_TO_DOT_CLK(link_bw) *
+				lane_count * BITS_PER_BYTE;
+
+		/* current bpc is capable of being used to drive panel */
+		if (dotclock_req <= bw_available)
+			break;
+
+		bpc = dp_panel_get_next_bpc(bpc);
+	} while (bpc != 0);
+
+	pr_info("Using %d bpc for current dotclock\n", bpc);
+	return bpc;
+}
+
 bool dp_panel_probe(struct dp_panel *panel, struct intel_pipeline *pipeline)
 {
 	/* bool live_status = false; */
diff --git a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
index e73d492..e785a5a 100644
--- a/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
+++ b/drivers/video/adf/intel/core/common/dp/gen_dp_pipe.c
@@ -25,8 +25,6 @@
 #define  DATA_LINK_M_N_MASK     (0xffffff)
 #define  DATA_LINK_N_MAX        (0x800000)
 
-#define LINK_TO_DOT_CLK(x) ((x) * 27 * 1000)
-#define BITS_PER_BYTE		8
 
 static void compute_m_n(u32 m, u32 n,
 		u32 *ret_m, u32 *ret_n)
@@ -150,6 +148,29 @@ void dp_pipe_dump_modes(struct drm_mode_modeinfo *modelist, u32 n_modes)
 	}
 }
 
+static inline bool dp_pipe_compare_modes(struct dp_pipe *dp_pipe,
+		struct drm_mode_modeinfo *mode1)
+{
+	struct drm_mode_modeinfo *mode2 = &dp_pipe->current_mode;
+
+	/* Only DPMS calls modeset with NULL */
+	if (!mode1 || !mode2)
+		return false;
+
+	if ((mode1->clock != mode2->clock) ||
+		(mode1->hdisplay != mode2->hdisplay) ||
+		(mode1->hsync_start != mode2->hsync_start) ||
+		(mode1->htotal != mode2->htotal) ||
+		(mode1->hsync_end != mode2->hsync_end) ||
+		(mode1->vdisplay != mode2->vdisplay) ||
+		(mode1->vsync_start != mode2->vsync_start) ||
+		(mode1->vtotal != mode2->vtotal) ||
+		(mode1->vrefresh != mode2->vrefresh))
+		return false;
+	else
+		return true;
+}
+
 static int dp_pipe_modeset(struct intel_pipe *pipe,
 		struct drm_mode_modeinfo *mode)
 {
@@ -166,13 +187,14 @@ static int dp_pipe_modeset(struct intel_pipe *pipe,
 	params->link_bw = 0;
 	params->lane_count = 0;
 
-	/* Avoid duplicate modesets */
-	if (dp_pipe->dpms_state == DRM_MODE_DPMS_ON)
+	/*
+	 * Avoid duplicate modesets, check both dpms state
+	 * and mode being applied
+	 */
+	if ((dp_pipe->dpms_state == DRM_MODE_DPMS_ON) &&
+		dp_pipe_compare_modes(dp_pipe, mode))
 		goto modeset_exit;
 
-	pr_err("%s:FIXME: get bpp from edid\n", __func__);
-	bpp = 24;
-
 	/* if NULL the current call is from dpms so use saved mode */
 	if (mode == NULL)
 		mode = &dp_pipe->current_mode;
@@ -180,6 +202,9 @@ static int dp_pipe_modeset(struct intel_pipe *pipe,
 		intel_adf_display_rpm_get();
 
 	dotclock = mode->clock;
+
+	/* bpp = bits per color * 3, for 3 colors in pixel */
+	bpp = dp_panel_get_bpc(&dp_pipe->panel, dotclock) * 3;
 	dp_pipe_dump_modes(mode, 1);
 	vlv_dp_backlight_seq(pipeline, false);
 
diff --git a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
index edc2b25..1552602 100644
--- a/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
+++ b/drivers/video/adf/intel/core/vlv/vlv_pipeline.c
@@ -29,8 +29,6 @@
 #include <core/vlv/dpio.h>
 #include <intel_dsi_cmd.h>
 
-#define LINK_TO_DOT_CLK(x) ((x) * 27 * 100)
-
 enum port vlv_get_connected_port(struct intel_pipe *intel_pipe)
 {
 	struct vlv_pipeline *vlv_pipeline =
@@ -242,7 +240,7 @@ u32 vlv_calc_multiplier(struct intel_pipeline *pipeline, u32 dotclock)
 
 		temp = dotclock * i;
 
-		if (temp >= 100000) {
+		if (temp >= 1000000) {
 			multiplier = i;
 			break;
 		}
@@ -294,9 +292,9 @@ u32 vlv_pipeline_on(struct intel_pipeline *pipeline,
 			mode->clock = dotclock;
 			multiplier = vlv_calc_multiplier(pipeline, dotclock);
 
-			/* Multiply by 10000 to conver to KHz */
+			/* Multiply by 1000 to conver to KHz */
 			dotclock = LINK_TO_DOT_CLK(pipeline->params.dp.link_bw)
-							* 10000;
+							* 1000;
 		} else
 			/* Convert MHz to KHz */
 			dotclock = mode->clock * 1000;
diff --git a/drivers/video/adf/intel/include/core/common/dp/dp_panel.h b/drivers/video/adf/intel/include/core/common/dp/dp_panel.h
index aa565f3..f9f937f 100644
--- a/drivers/video/adf/intel/include/core/common/dp/dp_panel.h
+++ b/drivers/video/adf/intel/include/core/common/dp/dp_panel.h
@@ -341,6 +341,15 @@ DP_LANE_SYMBOL_LOCKED)
 # define DP_PSR_SINK_STATE_MASK             0x07
 
 # define DP_MAX_ELD_LENGTH			    128
+#define EDID_VERSION_OFFSET	18
+#define EDID_REVISION_OFFSET	19
+#define EDID_DISP_PARAMS_OFFSET 20
+#define EDID_COLOR_DEPTH_MASK	0x70
+#define EDID_COLOR_DEPTH_SHIFT	4
+#define EDID_DIGITAL_INTERFACE	(1 << 7)
+
+#define LINK_TO_DOT_CLK(x) ((x) * 27 * 1000)
+#define BITS_PER_BYTE		8
 
 enum vswing_level {
 	e0_4 = 0,
@@ -416,8 +425,9 @@ extern  bool dp_panel_fast_link_train(struct dp_panel *panel,
 			struct link_params *params);
 extern bool dp_panel_probe(struct dp_panel *panel,
 			struct intel_pipeline *pipeline);
-int dp_panel_set_dpcd(struct dp_panel *panel, u32 address,
+extern int dp_panel_set_dpcd(struct dp_panel *panel, u32 address,
 			u8 *buffer, u32 size);
+extern u32 dp_panel_get_bpc(struct dp_panel *panel, u32 dotclock);
 
 /* Hack:to avoid duplication of edid parsing logic hdmi's parser is used */
 extern struct hdmi_monitor *intel_adf_hdmi_get_monitor(struct edid *edid);
-- 
1.7.9.5

