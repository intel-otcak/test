From 0986666e4043f43cdb36521cc1bc582d716e9ee8 Mon Sep 17 00:00:00 2001
Message-Id: <0986666e4043f43cdb36521cc1bc582d716e9ee8.1413837856.git.chang-joon.lee@intel.com>
In-Reply-To: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
References: <006497b7323eca32c2f489a1a9f662743c0d16d2.1413837855.git.chang-joon.lee@intel.com>
From: Chris Wilson <chris@chris-wilson.co.uk>
Date: Mon, 2 Sep 2013 16:42:08 +0530
Subject: [PATCH 013/312] FROM_UPSTREAM [VPG]: drm/i915: Asynchronously unpin
 the old framebuffer after the next vblank

Issue: AXIA-4190

Upon completion of a modeset, we must wait for the next vblank before
releasing the old framebufer. (The scanout registers are double-buffered
and update on the next vblank. If we unpin the old scanout too soon we
run the risk of accessing invalid memory, so we first need to wait until
the scanout is reading from the new framebuffer.) As the unpinning is
then deferred, we need to make sure we hold a reference to the object
until we execute the callback.

References:
http://lists.freedesktop.org/archives/intel-gfx/2013-July/029790.html

v2: (vandana.kannan@intel.com) Rework in commit message
Requirement:- On enabling sprite, it was found that the sprite fps was too
low. Making use of this patch as it gives a performance boost.
To be reverted:- This patch is not the final solution. The final solution
will have to be worked upon later.

Change-Id: Iea934e90191112954d5d3f43c2afb9b80583371e
Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>

Conflicts:

	drivers/gpu/drm/i915/intel_display.c
(cherry picked from commit aaf70f7ddde3b03e0af85a9af9dabc7e1b8e0d74)

Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>

Conflicts:

	drivers/gpu/drm/i915/intel_display.c
---
 drivers/gpu/drm/i915/intel_display.c |   31 +++++++++++++++++++++++++++----
 1 file changed, 27 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 996168f..b65f560 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2283,6 +2283,7 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
 		goto err_unpin;
 
 	i915_gem_object_pin_fence(obj);
+	drm_gem_object_reference(&obj->base);
 
 	dev_priv->mm.interruptible = true;
 	return 0;
@@ -2298,6 +2299,7 @@ void intel_unpin_fb_obj(struct drm_i915_gem_object *obj)
 {
 	i915_gem_object_unpin_fence(obj);
 	i915_gem_object_unpin_from_display_plane(obj);
+	drm_gem_object_unreference(&obj->base);
 }
 
 /* Computes the linear offset to the base tile and adjusts x, y. bytes per pixel
@@ -2708,6 +2710,26 @@ static bool intel_crtc_has_pending_flip(struct drm_crtc *crtc)
 	return pending;
 }
 
+static void intel_crtc_unpin_work_fn(struct intel_crtc *crtc, void *obj)
+{
+	struct drm_device *dev = crtc->base.dev;
+
+	mutex_lock(&dev->struct_mutex);
+	intel_unpin_fb_obj(obj);
+	mutex_unlock(&dev->struct_mutex);
+}
+
+static void
+intel_crtc_queue_unpin(struct intel_crtc *crtc,
+		       struct drm_i915_gem_object *obj)
+{
+	if (intel_crtc_add_vblank_task(crtc, false,
+				       intel_crtc_unpin_work_fn, obj)) {
+		intel_wait_for_vblank(crtc->base.dev, crtc->pipe);
+		intel_unpin_fb_obj(obj);
+	}
+}
+
 static int
 intel_pipe_set_base(struct drm_crtc *crtc, int x, int y,
 		    struct drm_framebuffer *fb)
@@ -2785,11 +2807,12 @@ intel_pipe_set_base(struct drm_crtc *crtc, int x, int y,
 	crtc->y = y;
 
 	if (old_fb) {
+		struct drm_i915_gem_object *old_obj =
+			to_intel_framebuffer(old_fb)->obj;
 		if (intel_crtc->active && old_fb != fb)
-			intel_wait_for_vblank(dev, intel_crtc->pipe);
-		mutex_lock(&dev->struct_mutex);
-		intel_unpin_fb_obj(to_intel_framebuffer(old_fb)->obj);
-		mutex_unlock(&dev->struct_mutex);
+			intel_crtc_queue_unpin(intel_crtc, old_obj);
+		else
+			intel_unpin_fb_obj(old_obj);
 	}
 
 	mutex_lock(&dev->struct_mutex);
-- 
1.7.9.5

